["```\n#!/usr/bin/python \n# \n```", "```\nimport shutil \n```", "```\ndef main(): \n\u00a0\u00a0\u00a0\u00a0module = AnsibleModule( \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0argument_spec = dict( \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0source=dict(required=True, type='str'), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dest=dict(required=True, type='str') \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0) \n\u00a0\u00a0\u00a0\u00a0) \n```", "```\n\u00a0\u00a0\u00a0\u00a0shutil.copy(module.params['source'], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0module.params['dest']) \n```", "```\n\u00a0\u00a0\u00a0\u00a0module.exit_json(changed=True) \n```", "```\nfrom ansible.module_utils.basic import * \n```", "```\nif __name__ == '__main__': \n\u00a0\u00a0\u00a0\u00a0main() \n```", "```\n--- \n- name: test remote_copy module \n\u00a0\u00a0hosts: localhost \n\u00a0\u00a0gather_facts: false \n\n\u00a0\u00a0tasks: \n\u00a0\u00a0- name: ensure foo\n\u00a0\u00a0\u00a0\u00a0ansible.builtin.file:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path: /tmp/rcfoo\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0state: touch\n\u00a0\u00a0- name: do a remote copy\n\u00a0\u00a0\u00a0\u00a0remote_copy:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0source: /tmp/rcfoo\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dest: /tmp/rcbar\n```", "```\nansible-playbook -i mastery-hosts simple_module.yaml -v\n```", "```\nimport shutil \n\nDOCUMENTATION = ''' \n--- \nmodule: remote_copy \nversion_added: future \nshort_description: Copy a file on the remote host \ndescription: \n\u00a0\u00a0- The remote_copy module copies a file on the remote host from a given source to a provided destination. \noptions: \n\u00a0\u00a0source: \n\u00a0\u00a0\u00a0\u00a0description: \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- Path to a file on the source file on the remote host \n\u00a0\u00a0\u00a0\u00a0required: True \n\u00a0\u00a0dest: \n\u00a0\u00a0\u00a0\u00a0description: \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- Path to the destination on the remote host for the copy \n\u00a0\u00a0\u00a0\u00a0required: True \nauthor: \n\u00a0\u00a0- Jesse Keating \n''' \n```", "```\nansible-doc -M library/ remote_copy\n```", "```\nEXAMPLES = ''' \n# Example from Ansible Playbooks \n- name: backup a config file \n\u00a0\u00a0remote_copy: \n\u00a0\u00a0\u00a0\u00a0source: /etc/herp/derp.conf \n\u00a0\u00a0\u00a0\u00a0dest: /root/herp-derp.conf.bak \n''' \n```", "```\n\u00a0\u00a0\u00a0\u00a0module.exit_json(changed=True, source=module.params['source'], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dest=module.params['dest']) \n```", "```\nRETURN = ''' \nsource: \n\u00a0\u00a0description: source file used for the copy \n\u00a0\u00a0returned: success \n\u00a0\u00a0type: string \n\u00a0\u00a0sample: \"/path/to/file.name\" \ndest: \n\u00a0\u00a0description: destination of the copy \n\u00a0\u00a0returned: success \n\u00a0\u00a0type: string \n\u00a0\u00a0sample: \"/path/to/destination.file\" \ngid: \n\u00a0\u00a0description: group ID of destination target \n\u00a0\u00a0returned: success \n\u00a0\u00a0type: int \n\u00a0\u00a0sample: 502 \ngroup: \n\u00a0\u00a0description: group name of destination target \n\u00a0\u00a0returned: success \n\u00a0\u00a0type: string \n\u00a0\u00a0sample: \"users\" \nuid: \n\u00a0\u00a0description: owner ID of destination target \n\u00a0\u00a0returned: success \n\u00a0\u00a0type: int \n\u00a0\u00a0sample: 502 \nowner: \n\u00a0\u00a0description: owner name of destination target \n\u00a0\u00a0returned: success \n\u00a0\u00a0type: string \n\u00a0\u00a0sample: \"fred\"\n```", "```\nmode: \n\u00a0\u00a0description: permissions of the destination target \n\u00a0\u00a0returned: success \n\u00a0\u00a0type: int \n\u00a0\u00a0sample: 0644 \nsize: \n\u00a0\u00a0description: size of destination target \n\u00a0\u00a0returned: success \n\u00a0\u00a0type: int \n\u00a0\u00a0sample: 20 \nstate: \n\u00a0\u00a0description: state of destination target \n\u00a0\u00a0returned: success \n\u00a0\u00a0type: string \n\u00a0\u00a0sample: \"file\" \n''' \n```", "```\n\u00a0\u00a0\u00a0\u00a0facts = {'rc_source': module.params['source'], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'rc_dest': module.params['dest']} \n\n\u00a0\u00a0\u00a0\u00a0module.exit_json(changed=True, ansible_facts=facts) \n```", "```\n\u00a0\u00a0- name: show a fact \n\u00a0\u00a0\u00a0\u00a0ansible.builtin.debug: \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var: rc_dest \n```", "```\n\u00a0\u00a0- name: do a remote copy \n\u00a0\u00a0\u00a0\u00a0remote_copy: \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0source: /tmp/rcfoo \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dest: /tmp/rcbar \n\u00a0\u00a0\u00a0\u00a0register: mycopy \n\n\u00a0\u00a0- name: set facts from mycopy \n\u00a0\u00a0\u00a0\u00a0ansible.builtin.set_fact: \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0rc_dest: \"{{ mycopy.dest }}\" \n```", "```\n\u00a0\u00a0\u00a0\u00a0module = AnsibleModule( \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0argument_spec = dict( \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0source=dict(required=True, type='str'), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dest=dict(required=True, type='str') \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0), \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0supports_check_mode=True \n\u00a0\u00a0\u00a0\u00a0) \n```", "```\n\u00a0\u00a0\u00a0\u00a0if not module.check_mode: \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0shutil.copy(module.params['source'], \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0module.params['dest']) \n```", "```\ndef cloud_truth(a): \n\u00a0\u00a0\u00a0\u00a0return a.replace(\"the cloud\", \"somebody else's computer\") \n```", "```\nclass FilterModule(object): \n\u00a0\u00a0\u00a0\u00a0'''Cloud truth filters''' \n\u00a0\u00a0\u00a0\u00a0def filters(self): \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return {'cloud_truth': cloud_truth} \n```", "```\n--- \n- name: test cloud_truth filter \n\u00a0\u00a0hosts: localhost \n\u00a0\u00a0gather_facts: false \n\u00a0\u00a0vars: \n\u00a0\u00a0\u00a0\u00a0statement: \"I store my files in the cloud\" \n\u00a0\u00a0tasks: \n\u00a0\u00a0- name: make a statement \n\u00a0\u00a0\u00a0\u00a0ansible.builtin.debug: \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0msg: \"{{ statement | cloud_truth }}\" \n```", "```\n    from __future__ import (absolute_import, division, print_function)\n    __metaclass__ = type\n    ```", "```\n    DOCUMENTATION = '''\n    \u00a0\u00a0\u00a0\u00a0callback: shrug\n    \u00a0\u00a0\u00a0\u00a0type: stdout\n    \u00a0\u00a0\u00a0\u00a0short_description: modify Ansible screen output\n    \u00a0\u00a0\u00a0\u00a0version_added: 4.0\n    \u00a0\u00a0\u00a0\u00a0description:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- This modifies the default output callback for ansible-playbook.\n    \u00a0\u00a0\u00a0\u00a0extends_documentation_fragment:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- default_callback\n    \u00a0\u00a0\u00a0\u00a0requirements:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- set as stdout in configuration\n    '''\n    ```", "```\n    from ansible.plugins.callback.default import CallbackModule as CallbackModule_default\n    class CallbackModule(CallbackModule_default):\n    \u00a0\u00a0CALLBACK_VERSION = 2.0\n    \u00a0\u00a0CALLBACK_TYPE = 'stdout'\n    \u00a0\u00a0CALLBACK_NAME = 'shrug'\n    \u00a0\u00a0def __init__(self):\n    \u00a0\u00a0\u00a0\u00a0super(CallbackModule, self).__init__()\n    \u00a0\u00a0def v2_playbook_on_stats(self, stats):\n    \u00a0\u00a0\u00a0\u00a0msg = b'\\xc2\\xaf\\\\_(\\xe3\\x83\\x84)_/\\xc2\\xaf'\n    \u00a0\u00a0\u00a0\u00a0self._display.display(msg.decode('utf-8') * 8)\n    \u00a0\u00a0\u00a0\u00a0super(CallbackModule, self).v2_playbook_on_stats(stats)\n    ```", "```\n    [defaults] \n    stdout_callback = shrug \n    ```", "```\n    #!/usr/bin/env python \n    # \n    ```", "```\n    import json \n    import argparse \n    ```", "```\n    inventory = {} \n    inventory['web'] = {'hosts': ['mastery.example.name'], \n    'vars': {'http_port': 80, \n    'proxy_timeout': 5}} \n    inventory['dns'] = {'hosts': ['backend.example.name']} \n    inventory['database'] = {'hosts': ['backend.example.name'], \n    'vars': {'ansible_ssh_user': 'database'}} \n    inventory['frontend'] = {'children': ['web']} \n    inventory['backend'] = {'children': ['dns', 'database'], \n    'vars': {'ansible_ssh_user': 'blotto'}} \n    inventory['errors'] = {'hosts': ['scsihost']} \n    inventory['failtest'] = {'hosts': [\"failer%02d\" % n for n in \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0range(1,11)]} \n    ```", "```\n    allgroupvars = {'ansible_ssh_user': 'otto'} \n    ```", "```\n    hostvars = {} \n    hostvars['mastery.example.name'] = {'ansible_ssh_host': '192.168.10.25'} \n    hostvars['scsihost'] = {'ansible_ssh_user': 'jfreeman'} \n    ```", "```\n    parser = argparse.ArgumentParser(description='Simple Inventory')\n    parser.add_argument('--list', action='store_true', help='List all hosts')\n    parser.add_argument('--host', help='List details of a host')\n    args = parser.parse_args()\n    ```", "```\n    if args.list: \n    for group in inventory: \n    ag = allgroupvars.copy() \n    ag.update(inventory[group].get('vars', {})) \n    inventory[group]['vars'] = ag \n    \u00a0\u00a0\u00a0\u00a0print(json.dumps(inventory)) \n    ```", "```\n    elif args.host:\n    \u00a0\u00a0\u00a0\u00a0hostfound = False\n    \u00a0\u00a0\u00a0\u00a0agghostvars = allgroupvars.copy()\n    \u00a0\u00a0\u00a0\u00a0for group in inventory:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if args.host in inventory[group].get('hosts', {}):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0hostfound = True\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for childgroup in inventory:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if group in inventory[childgroup].get('children', {}):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0agghostvars.update(inventory[childgroup].get('vars', {}))\n    \u00a0\u00a0\u00a0\u00a0for group in inventory:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if args.host in inventory[group].get('hosts', {}):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0hostfound = True\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0agghostvars.update(inventory[group].get('vars', {}))\n    \u00a0\u00a0\u00a0\u00a0if hostvars.get(args.host, {}):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0hostfound = True\n    \u00a0\u00a0\u00a0\u00a0agghostvars.update(hostvars.get(args.host, {}))\n    \u00a0\u00a0\u00a0\u00a0if not hostfound:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0agghostvars = {}\n    \u00a0\u00a0\u00a0\u00a0print(json.dumps(agghostvars))\n    ```", "```\n--- \n- name: test the inventory \n\u00a0\u00a0hosts: all \n\u00a0\u00a0gather_facts: false \n\n\u00a0\u00a0tasks: \n\u00a0\u00a0- name: hello world \n\u00a0\u00a0\u00a0\u00a0ansible.builtin.debug: \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0msg: \"Hello world, I am {{ inventory_hostname }}. \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0My username is {{ ansible_ssh_user }}\"\n```", "```\n[inventory]\nenable_plugins = ini, script\n```", "```\ntime ansible-playbook -i mastery-inventory.py inventory_test.yaml --limit backend,frontend,errors\n```", "```\n    hostvars['scsihost'] = {'ansible_ssh_user': 'jfreeman'}\n    agghostvars = dict()\n    for outergroup in inventory:\n    \u00a0\u00a0\u00a0\u00a0for grouphost in inventory[outergroup].get('hosts', {}):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0agghostvars[grouphost] = allgroupvars.copy()\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for group in inventory:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if grouphost in inventory[group].get('hosts', {}):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for childgroup in inventory:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if group in inventory[childgroup].get('children', {}):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0agghostvars[grouphost].update(inventory[childgroup].get('vars', {}))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0for group in inventory:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if grouphost in inventory[group].get('hosts', {}):\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0agghostvars[grouphost].update(inventory[group].get('vars', {}))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0agghostvars[grouphost].update(hostvars.get(grouphost, {}))\n    inventory['_meta'] = {'hostvars': agghostvars}\n    parser = argparse.ArgumentParser(description='Simple Inventory')\n    ```", "```\n    elif args.host:\n    raise StandardError(\"You've been a bad person\") \n    ```", "```\n\u00a0\u00a0\u00a0\u00a0$ source ./hacking/env-setup\n```", "```\nsudo apt install python3-pytest\n```", "```\nsudo apt install python3-pytest python3-tz python3-pytest-mock\ncd ansible\nsource ./hacking/env-setup\npytest-3 test/units/parsing\n```", "```\nsource ./hacking/env-setup\nansible-test integration --python 3.8 ping\n```", "```\nansible-test integration shippable/ --docker fedora32\n```", "```\nsudo apt install python3-pycodestyle\nsource ./hacking/env-setup\nansible-test sanity --test pep8\necho $?\n```"]