["```\nsysteminfo | Select-String \"^OS Name\",\"^OS Version\"\n```", "```\nEnable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux\n```", "```\nInvoke-WebRequest -Uri https://aka.ms/wslubuntu2004 -OutFile Ubuntu.appx -UseBasicParsing\n```", "```\nRename-Item Ubuntu.appx Ubuntu.zip \nExpand-Archive Ubuntu.zip C:\\WSL\\Ubuntu \n```", "```\nC:\\WSL\\Ubuntu\\ubuntu2004.exe\n```", "```\nNew-SelfSignedCertificate -CertStoreLocation Cert:\\LocalMachine\\My -DnsName \"$env:computername\" -FriendlyName \"WinRM HTTPS Certificate\" -NotAfter (Get-Date).AddYears(5)\n```", "```\nNew-Item -Path WSMan:\\Localhost\\Listener -Transport HTTPS -Address * -CertificateThumbprint <thumbprint of certificate>\n```", "```\nNew-NetFirewallRule -DisplayName \"WinRM HTTPS Management\" -Profile Domain,Private -Direction Inbound -Action Allow -Protocol TCP -LocalPort 5986\nSet-Item -Path \"WSMan:\\localhost\\Service\\Auth\\Basic\" -Value $true\n```", "```\n$url = \"https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1\"\n$file = \"$env:temp\\ConfigureRemotingForAnsible.ps1\"\n(New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file)\npowershell.exe -ExecutionPolicy ByPass -File $file\n```", "```\nsudo apt install python3-winrm\n```", "```\nsudo pip3 install \"pywinrm>=0.3.0\"\n```", "```\n[windows]\n10.50.0.101\n[windows:vars]\nansible_user=Administrator\nansible_password=\"Password123\"\nansible_port=5986\nansible_connection=winrm\nansible_winrm_server_cert_validation=ignore\n```", "```\nansible -i windows-hosts -m ansible.windows.win_ping all\n```", "```\nsudo dnf -y install python3-devel krb5-devel krb5-libs krb5-workstation\n```", "```\nsudo apt-get install python3-dev libkrb5-dev krb5-user\n```", "```\nsudo dnf -y install gcc\nsudo pip3 install pywinrm[kerberos]\n```", "```\n[realms]\nMASTERY.EXAMPLE.COM = {\n kdc = DEMODEM-O5NVEP9.mastery.example.com\n}\n[domain_realm]\n.mastery.example.com = MASTERY.EXAMPLE.COM\n```", "```\nkinit Administrator@MASTERY.EXAMPLE.COM\nklist\n```", "```\n[windows]\n10.0.50.103\n[windows:vars]\nansible_user=administrator@MASTERY.EXAMPLE.COM\nansible_password=\"Password123\"\nansible_port=5986\nansible_connection=winrm\nansible_winrm_server_cert_validation=ignore\n```", "```\nwinrm configSDDL default\n```", "```\nImport-Certificate -FilePath .\\certnew.cer -CertStoreLocation Cert:\\LocalMachine\\My\n```", "```\nwinrm delete winrm/config/Listener?Address=*+Transport=HTTPS\n```", "```\nNew-Item -Path WSMan:\\Localhost\\Listener -Transport HTTPS -Address * -CertificateThumbprint <thumbprint of certificate>\n```", "```\nsudo dpkg-reconfigure ca-certificates\n```", "```\n[windows]\nDEMODEM-O5NVEP9.mastery.example.com\n[windows:vars]\nansible_user=administrator@MASTERY.EXAMPLE.COM\nansible_password=\"Password123\"\nansible_port=5986\nansible_connection=winrm\nansible_winrm_ca_trust_path=/etc/ssl/certs/ca-certificates.crt\n```", "```\nGet-WindowsCapability -Online | ? Name -like 'OpenSSH*'\n```", "```\nAdd-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0\n```", "```\nStart-Service sshd\nSet-Service -Name sshd -StartupType 'Automatic'\nGet-NetFirewallRule -Name *ssh*\n```", "```\nNew-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22\n```", "```\nNew-ItemProperty -Path 'HKLM:\\SOFTWARE\\OpenSSH' -Name 'DefaultShell' -Value 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe'\n```", "```\n[windows]\nDEMODEM-O5NVEP9.mastery.example.com\n[windows:vars]\nansible_user=administrator@MASTERY.EXAMPLE.COM\nansible_password=\"Password123\"\nansible_shell_type=powershell\n```", "```\nansible -i windows-hosts -m ansible.windows.win_ping all\n```", "```\n---\n- name: Linux file example playbook\n\u00a0\u00a0hosts: all\n\u00a0\u00a0gather_facts: false\n\u00a0\u00a0tasks:\n\u00a0\u00a0\u00a0\u00a0- name: Create temporary directory\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ansible.builtin.file:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path: /tmp/mastery\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0state: directory\n\u00a0\u00a0\u00a0\u00a0- name: Copy across a test file\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ansible.builtin.copy:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0src: mastery.txt\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dest: /tmp/mastery/mastery.txt\n```", "```\n---\n- name: Windows file example playbook\n\u00a0\u00a0hosts: all\n\u00a0\u00a0gather_facts: false\n\u00a0\u00a0tasks:\n\u00a0\u00a0\u00a0\u00a0- name: Create temporary directory\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ansible.windows.win_file:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path: 'C:\\Mastery Test'\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0state: directory\n\u00a0\u00a0\u00a0\u00a0- name: Copy across a test file\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ansible.windows.win_copy:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0src: ~/src/mastery/mastery.txt\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0dest: 'C:\\Mastery Test\\mastery.txt'\n```", "```. For example, the following task would install the `c:\\temp\\setupdownloader_[aaff].exe`\u00a0file:\n\n```", "```\n\nMany other Windows modules should suffice to complete your Windows playbook needs, and, combined with these tips, you will get the end results you need, quickly and with ease.\n\n## Installing software\n\nMost Linux systems (and indeed other Unix variants) have a native package manager that makes it easy to install a wide variety of software. The `chocolatey` package manager makes this possible for Windows, and the Ansible `chocolatey.chocolatey.win_chocolatey` module makes installing software in an unattended manner with Ansible simple (note that this is not part of the `ansible.windows` collection that we have used so far, but instead lives in its own collection).\u00a0\n\nYou can explore the `chocolatey` repository and find out more about it at\u00a0[https://chocolatey.org](https://chocolatey.org).\n\nFor example, if you wanted to roll out Adobe's Acrobat Reader across an estate of Windows machines, you could use either the `ansible.windows.win_copy` or `ansible.windows.win_get_url` modules to distribute the installer, and then the\u00a0`ansible.windows.win_package` module to install it. However, the following code would perform the same task with less code:\n\n```", "```\n\nThere are all manner of clever installation routines you can run using the `chocolatey.chocolatey.win_chocolatey` module \u2013 for example, you can lock a package to a specific version, install a specific architecture, and much more \u2013 the documentation \u2028for this module includes a great many useful examples. The official Chocolatey website itself lists all the available packages \u2013 most of the common ones you would expect to need can be found there, so it should suffice for a great many installation scenarios you will come across.\n\n## Extending beyond modules\n\nJust as on any platform, there may come a time when the exact functionality required is not available from a module. Although writing a custom module (or modifying an existing one) is a viable solution to this, sometimes, a more immediate solution is required. To this end, the `ansible.windows.win_command` and `ansible.windows.win_shell` modules come to the rescue\u2014these can be used to run literal PowerShell commands on Windows. Many examples are available in the official Ansible documentation, but the following code, for example, would create the `C:\\Mastery` directory using PowerShell:\n\n```", "```\n\nWe could even revert to the traditional `cmd` shell for this task:\n\n```", "```\n\nWith these pointers, it should be possible to create the desired functionality in just about any Windows environment.\n\nThat concludes our look at Windows automation with Ansible \u2013 as long as you remember to use the correct Windows native modules, you will be able to apply the rest of this book to Windows hosts just as easily as you would any given Linux host.\n\n# Summary\n\nAnsible handles Windows hosts as effectively as Linux (and other Unix) ones. In this chapter, we covered both how to run Ansible from a Windows host, and how to integrate Windows hosts with Ansible for automation, including the authentication mechanisms, encryption, and even the basics of Windows-specific playbooks.\n\nYou have learned that Ansible can run from a recent build of Windows that supports WSL, and how to achieve this. You have also learned how to set up Windows hosts for Ansible control and how to secure this with Kerberos authentication and encryption. You also learned how to set up and use the new and experimental support for SSH communication by Ansible with Windows hosts. Finally, you learned the basics of authoring Windows playbooks, including finding the correct modules for use with Windows hosts, escaping special characters, creating directories and copy files for the host, installing packages, and even running raw shell commands on the Windows host with Ansible. This is a sound foundation on which you will be able to build out the Windows playbooks needed to manage your own estate of Windows hosts.\n\nIn the next chapter, we will cover the effective management of Ansible in the enterprise with AWX.\n\n# Questions\n\n1.  Ansible can communicate with Windows hosts using:\n\n    a) SSH\n\n    b) WinRM\n\n    c) Both of the above\n\n2.  Ansible can reliably be run from Windows:\n\n    a) Natively\n\n    b) Using Python for Windows\n\n    c) Through Cygwin\n\n    d) Through WSL or WSL2\n\n3.  The `ansible.builtin.file` module can be used to manipulate files on both Linux and Windows hosts:\n\n    a) True\n\n    b) False\n\n4.  Windows machines can have Ansible automation run on them with no initial setup:\n\n    a) True\n\n    b) False\n\n5.  The package manager for Windows is called:\n\n    a) Bournville\n\n    b) Cadbury\n\n    c) Chocolatey\n\n    d) RPM\n\n6.  Ansible modules for Windows run their commands by default using:\n\n    a) PowerShell\n\n    b) `cmd.exe`\n\n    c) Bash for Windows\n\n    d) WSL\n\n    e) Cygwin\n\n7.  You can run Windows commands directly even if a module with the functionality you need does not exist:\n\n    a) True\n\n    b) False\n\n8.  When manipulating files and directories on Windows with Ansible, you should:\n\n    a) Use `\\` for Windows path references, and `/` for files on the Linux host\n\n    b) Use `/` for all paths\n\n9.  Special characters in Windows filenames should be escaped with:\n\n    a) `\\`\n\n    b) ```"]