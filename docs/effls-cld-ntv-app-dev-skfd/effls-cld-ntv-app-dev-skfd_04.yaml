- en: '[*Chapter 3*](B17385_03_Final_PD_ePub.xhtml#_idTextAnchor034): Skaffold — Easy-Peasy
    Cloud-Native Kubernetes Application Development'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第3章*](B17385_03_Final_PD_ePub.xhtml#_idTextAnchor034)：Skaffold ——轻松开发云原生Kubernetes应用程序'
- en: In the previous chapter, we learned that developing applications with Kubernetes
    is cumbersome and provided some coding examples. This chapter will cover a high-level
    overview of Skaffold. You will also learn and understand Skaffold basic **command-line
    interface** (**CLI**) commands and how these ease developers' pain in developing
    cloud-native microservices with Skaffold. We will demonstrate Skaffold's basic
    features by building and deploying a Spring Boot application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解到使用Kubernetes开发应用是繁琐的，并提供了一些编码示例。本章将概述Skaffold的高级概述。您还将学习和了解Skaffold基本命令行界面（CLI）命令以及这些命令如何简化开发人员在Skaffold中开发云原生微服务的痛点。我们将通过构建和部署一个Spring
    Boot应用程序来演示Skaffold的基本功能。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: What is Skaffold?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Skaffold？
- en: Building and deploying a Spring Boot application with Skaffold
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Skaffold构建和部署Spring Boot应用程序
- en: By the end of this chapter, you will have a basic understanding of Skaffold
    and will be able to take advantage of Skaffold to accelerate an inner development
    loop while developing cloud-native applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将对Skaffold有基本的了解，并能够利用Skaffold加速内部开发循环，同时开发云原生应用程序。
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the examples of this chapter, you will need the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟着本章的例子，你需要以下内容：
- en: An Eclipse ([https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/))
    or IntelliJ IDEA [https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse ([https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/))
    或 IntelliJ IDEA [https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/)
- en: Git
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: Skaffold CLI ([https://skaffold.dev/docs/install/](https://skaffold.dev/docs/install/))
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Skaffold CLI ([https://skaffold.dev/docs/install/](https://skaffold.dev/docs/install/))
- en: Spring Boot 2.5 ([https://start.spring.io](https://start.spring.io))
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot 2.5 ([https://start.spring.io](https://start.spring.io))
- en: OpenJDK 16 ([https://jdk.java.net/16/](https://jdk.java.net/16/))
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenJDK 16 ([https://jdk.java.net/16/](https://jdk.java.net/16/))
- en: minikube ([https://minikube.sigs.k8s.io/docs/](https://minikube.sigs.k8s.io/docs/))
    or Docker Desktop for macOS and Windows ([https://www.docker.com/products/dockerdesktop](https://www.docker.com/products/dockerdesktop))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: minikube ([https://minikube.sigs.k8s.io/docs/](https://minikube.sigs.k8s.io/docs/))
    或 Docker Desktop for macOS and Windows ([https://www.docker.com/products/dockerdesktop](https://www.docker.com/products/dockerdesktop))
- en: You can download the code examples for this chapter from the GitHub repository
    at [https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/tree/main/Chapter03](https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/tree/main/Chapter03).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从GitHub存储库[https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/tree/main/Chapter03](https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/tree/main/Chapter03)下载本章的代码示例。
- en: What is Skaffold?
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Skaffold？
- en: As most developers, Matt Rickard, a Google engineer, also experienced the same
    pain while building and deploying Kubernetes applications in the inner loop. Matt
    decided to take the matter into his own hands and created Skaffold.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 像大多数开发人员一样，Google工程师Matt Rickard在构建和部署Kubernetes应用程序时也遇到了同样的痛点。Matt决定自己动手，创建了Skaffold。
- en: '**Skaffold** is a CLI tool that automates the build, push, and deploy steps
    for cloud-native applications running on local or remote Kubernetes clusters of
    your choice. Skaffold is not a replacement for Docker or Kubernetes. It works
    in conjunction with them and handles the build, push, and deploy boilerplate part
    for you.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**Skaffold**是一个CLI工具，它可以自动化构建、推送和部署本地或远程Kubernetes集群上运行的云原生应用程序的步骤。Skaffold并不是Docker或Kubernetes的替代品。它与它们一起工作，并为您处理构建、推送和部署的样板部分。'
- en: Skaffold is an open source tool developed by Google. It was generally available
    on November 7, 2019, and is released under the Apache 2.0 license. Skaffold is
    written in the Go programming language. You can visit the Skaffold home page at
    [https://skaffold.dev/](https://skaffold.dev/). Skaffold documentation is available
    at [https://skaffold.dev/docs/](https://skaffold.dev/docs/).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Skaffold是由Google开发的开源工具。它于2019年11月7日正式发布，并在Apache 2.0许可下发布。Skaffold是用Go编程语言编写的。您可以访问Skaffold主页[https://skaffold.dev/](https://skaffold.dev/)。Skaffold文档可在[https://skaffold.dev/docs/](https://skaffold.dev/docs/)找到。
- en: If you are on macOS, then you can use the `homebrew` package manager to install
    Skaffold with the `brew install skaffold` command. However, we will cover various
    ways to install Skaffold in [*Chapter 5*](B17385_05_Final_PD_ePub.xhtml#_idTextAnchor052),
    *Installing Skaffold and Demystifying Its Pipeline Stages*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是macOS，那么您可以使用`homebrew`软件包管理器通过`brew install skaffold`命令安装Skaffold。然而，在[*第5章*](B17385_05_Final_PD_ePub.xhtml#_idTextAnchor052)，*安装Skaffold并揭秘其流水线阶段*中，我们将介绍安装Skaffold的各种方法。
- en: 'Skaffold is widely popular among the developer community because it provides
    sensible defaults, is simple to use, and has a pluggable architecture. Here''s
    a recent tweet from the official Skaffold account, just confirming this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Skaffold在开发者社区中广受欢迎，因为它提供了合理的默认设置，易于使用，并具有可插拔的架构。这是官方Skaffold账号最近的一条推文，证实了这一点：
- en: '![Figure 3.1 – Skaffold Twitter account tweets on passing 11k stars on GitHub'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.1 – Skaffold Twitter账号在GitHub上通过11k星标推文'
- en: '](image/B17385_03_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B17385_03_01.jpg)'
- en: Figure 3.1 – Skaffold Twitter account tweets on passing 11k stars on GitHub
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 – Skaffold Twitter账号在GitHub上通过11k星标推文
- en: 'As mentioned in the tweet, the number of stars and forks for the Skaffold GitHub
    repository speaks for its popularity itself, as we can see here:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如推文中所述，Skaffold GitHub仓库的星标和分支数量本身就说明了它的受欢迎程度，如下所示：
- en: '![Figure 3.2 – Skaffold GitHub repository'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.2 – Skaffold GitHub仓库'
- en: '](image/B17385_03_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B17385_03_02.jpg)'
- en: Figure 3.2 – Skaffold GitHub repository
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 – Skaffold GitHub仓库
- en: The Skaffold GitHub page is available at [https://github.com/GoogleContainerTools/skaffold](https://github.com/GoogleContainerTools/skaffold).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Skaffold GitHub页面可在[https://github.com/GoogleContainerTools/skaffold](https://github.com/GoogleContainerTools/skaffold)找到。
- en: Let's try to understand the working of Skaffold by building and deploying a
    Spring Boot application.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过构建和部署一个Spring Boot应用程序来理解Skaffold的工作原理。
- en: Building and deploying a Spring Boot application with Skaffold
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Skaffold构建和部署Spring Boot应用程序
- en: To understand Skaffold commands and concepts better, in this section, we will
    build and deploy a Spring Boot Java application to a local single-node Kubernetes
    cluster using Skaffold.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解Skaffold命令和概念，在本节中，我们将使用Skaffold构建和部署一个Spring Boot Java应用程序到本地单节点Kubernetes集群。
- en: Note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Whenever we talk about *the Kubernetes cluster for local development* in this
    book, we refer to *the Kubernetes cluster with Docker Desktop*, if not specified
    otherwise. However, Docker Desktop or minikube is not the only tool available
    today for running a local Kubernetes cluster. Skaffold also supports Kind [https://github.com/kubernetes-sigs/kind](https://github.com/kubernetes-sigs/kind)
    and k3d [https://github.com/rancher/k3d](https://github.com/rancher/k3d) as target
    Kubernetes clusters for local development.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们在本书中谈论*用于本地开发的Kubernetes集群*时，我们指的是*具有Docker桌面版的Kubernetes集群*，除非另有说明。然而，Docker桌面版或minikube并不是今天用于运行本地Kubernetes集群的唯一工具。Skaffold还支持Kind
    [https://github.com/kubernetes-sigs/kind](https://github.com/kubernetes-sigs/kind)和k3d
    [https://github.com/rancher/k3d](https://github.com/rancher/k3d)作为本地开发的目标Kubernetes集群。
- en: Since this will be a sneak-peek of Skaffold, we will not cover everything in
    detail about Skaffold, as we are going to cover this in the upcoming chapters.
    I will, however, try to explain the commands used so that you can understand the
    exact flow. Before we dive into Skaffold, let's first talk about the Spring Boot
    application we are going to build and deploy with Skaffold.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这将是Skaffold的预览，我们不会详细介绍Skaffold的所有内容，因为我们将在接下来的章节中介绍这一点。但是，我会尝试解释所使用的命令，以便您可以理解确切的流程。在我们深入研究Skaffold之前，让我们先谈谈我们将使用Skaffold构建和部署的Spring
    Boot应用程序。
- en: Creating a Spring Boot application
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个Spring Boot应用程序
- en: 'This Spring Boot application we will be creating will have two **Representational
    State Transfer** (**REST**) endpoints exposed. The `/states` REST endpoint will
    return all Indian states and their capitals, and the `/state?name=statename` REST
    endpoint will return a specific Indian state and its capital. This application
    uses an in-memory `H2` database that inserts rows at the start of the application.
    Similar to previous chapters, we will use [https://start.spring.io](https://start.spring.io)
    to generate stubs for the project. The following screenshot shows the dependencies
    we are going to use to build this application:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要创建的这个Spring Boot应用程序将暴露两个**表述状态转移**（**REST**）端点。`/states` REST端点将返回所有印度各邦及其首府，而`/state?name=statename`
    REST端点将返回特定的印度邦及其首府。该应用程序使用内存中的`H2`数据库，在应用程序启动时插入行。与之前的章节类似，我们将使用[https://start.spring.io](https://start.spring.io)生成项目的存根。以下屏幕截图显示了我们将用于构建此应用程序的依赖项：
- en: '![Figure 3.3 – Required dependencies for the Spring Boot application'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.3 – Spring Boot应用程序所需的依赖项'
- en: '](image/B17385_03_03.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B17385_03_03.jpg)'
- en: Figure 3.3 – Required dependencies for the Spring Boot application
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – Spring Boot应用程序所需的依赖项
- en: 'Add the following dependency to the Maven `pom.xml` file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下依赖项添加到Maven的`pom.xml`文件中：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Apart from the dependencies we already discussed, I have added the `jib-maven-plugin`
    plugin to `pom.xml`, which will containerize the Spring Boot application to a
    container image. Jib takes the input as your source code and outputs a ready-to-run
    container image of your application. By the way, there''s a Gradle equivalent
    as well. For Gradle, use the following code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们已经讨论过的依赖项之外，我还在`pom.xml`中添加了`jib-maven-plugin`插件，它将Spring Boot应用程序容器化为一个容器镜像。Jib将您的源代码作为输入，并输出一个准备就绪的应用程序容器镜像。顺便说一句，Gradle也有一个等效的插件。对于Gradle，请使用以下代码：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: '**Jib** can create an image without a Docker daemon. This means that you don''t
    have to install and configure Docker and create or maintain a Dockerfile.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jib**可以在没有Docker守护程序的情况下创建镜像。这意味着您不必安装和配置Docker，也不必创建或维护Dockerfile。'
- en: We will cover more about Jib in [*Chapter 6*](B17385_06_PreFinal_PD_ePub.xhtml#_idTextAnchor074),
    *Working with Skaffold Container Image Builders and Deployers.*
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第6章*](B17385_06_PreFinal_PD_ePub.xhtml#_idTextAnchor074)中更多地介绍Jib，*使用Skaffold容器镜像构建器和部署器*。
- en: 'Let''s begin, then, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧：
- en: This is the layout of the source code directory:![Figure 3.4 – Project layout
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是源代码目录的布局:![图3.4 - 项目布局
- en: '](image/B17385_03_04.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B17385_03_04.jpg)'
- en: Figure 3.4 – Project layout
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 - 项目布局
- en: 'The following is the REST controller class annotated with `@RestController`
    annotation for handling incoming **HyperText Transfer Protocol** (**HTTP**) requests.
    The `@GetMapping` annotations on the `getAllStates()` method binds all HTTP `GET`
    requests to it when the `/states` REST endpoint is accessed. Similarly, the `getSpecificState()`
    method handles the HTTP `GET` request for `/state` when the state name is passed
    as a query parameter into the REST **Uniform Resource Locator** (**URL**). If
    no parameter is passed, then it takes a default value of the `Maharashtra` state:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '以下是用`@RestController`注解的REST控制器类，用于处理传入的**超文本传输协议**（**HTTP**）请求。`getAllStates()`方法上的`@GetMapping`注解在访问`/states`
    REST端点时绑定所有HTTP `GET`请求。同样，`getSpecificState()`方法处理了传入REST **统一资源定位符**（**URL**）的`/state`的HTTP
    `GET`请求，当州名作为查询参数传递时。如果没有传递参数，则它将采用`Maharashtra`州的默认值:'
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'At the time of writing this book, Java 16 is generally available. I have taken
    the liberty of also introducing you to some of its cool new features. Let''s now
    talk about records. We have the following data carrier `record` class:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在撰写本书时，Java 16已经普遍可用。我还有幸向您介绍了一些其新功能。现在让我们谈谈记录。我们有以下数据载体`record`类:'
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The class type is `record`, and it's a special type that got added as a feature
    in Java 16\. As per the *Java Enhancement Proposal 395* ([https://openjdk.java.net/jeps/395](https://openjdk.java.net/jeps/395)),
    records are a new kind of class in the Java language. They act as transparent
    carriers for immutable data, with less ceremony than for normal classes. Records
    can be thought of as nominal tuples. The `record` class declaration consists of
    a name, optional type parameters, a header, and a body. Another interesting feature
    worth mentioning about the `record` class is that `hashcode()`, `equals()`, `toString()`,
    and a canonical constructor are implicitly generated for us by the compiler.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 类类型是`record`，它是Java 16中作为特性添加的特殊类型。根据*Java Enhancement Proposal 395* ([https://openjdk.java.net/jeps/395](https://openjdk.java.net/jeps/395))，记录是Java语言中的一种新类型的类。它们作为不可变数据的透明载体，比普通类的仪式少。记录可以被视为名义元组。`record`类声明包括名称、可选类型参数、头部和主体。关于`record`类的另一个值得一提的有趣特性是编译器会为我们隐式生成`hashcode()`、`equals()`、`toString()`和一个规范构造函数。
- en: 'The following is the `StateRepository` interface that is implemented by the
    `StateService` class:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '以下是由`StateService`类实现的`StateRepository`接口:'
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the `StateService` class, we are using Spring's `JdbcTemplate` to access
    the `H2` database. The `findAll()` method returns all the states and their capitals.
    In the same class as the `findAll()` method, I have used the `RowMapper` functional
    interface. `JdbcTemplate` uses this for mapping rows of a `ResultSet` object and
    returns a `Row` object for the current row.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在`StateService`类中，我们使用Spring的`JdbcTemplate`来访问`H2`数据库。`findAll()`方法返回所有州和它们的首府。在与`findAll()`方法相同的类中，我使用了`RowMapper`函数接口。`JdbcTemplate`使用它来映射`ResultSet`对象的行，并为当前行返回一个`Row`对象。
- en: I'm sure you may have also observed that I have additionally used the `new`
    keyword to initialize the `record` class, which means I can initialize the `record`
    class like I would a normal class in Java. The `findByName()` method returns a
    `String`, which is the capital of the state that comes in the `query` parameter
    request.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信您可能也注意到我另外使用了`new`关键字来初始化`record`类，这意味着我可以像在Java中初始化普通类一样初始化`record`类。`findByName()`方法返回一个`String`，这是在`query`参数请求中传入的州的首府。
- en: I have also used the *Java 15 Text Blocks* ([https://openjdk.java.net/jeps/378](https://openjdk.java.net/jeps/378))
    feature while declaring the **Structured Query Language** (**SQL**) queries, which
    helps in the readability of SQL queries and **JavaScript Object Notation** (**JSON**)
    string values.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明**结构化查询语言**（**SQL**）查询时，我还使用了*Java 15文本块*（[https://openjdk.java.net/jeps/378](https://openjdk.java.net/jeps/378)）功能，这有助于提高SQL查询和**JavaScript对象表示**（**JSON**）字符串值的可读性。
- en: 'As I explained earlier, we have used the in-memory `H2` database to hold the
    data while the application is running. It gets inserted at the application startup
    using the following SQL statements:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如我之前解释的，我们使用内存中的`H2`数据库来保存数据，该数据在应用程序运行时插入。它使用以下SQL语句在应用程序启动时插入：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Data is defined using the following schema:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据使用以下模式定义：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The Kubernetes manifests—that is, deployment and service—are available under
    the `k8s` directory in the source code, as illustrated in the following code snippet:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes清单，即部署和服务，可在源代码的`k8s`目录下找到，如下面的代码片段所示：
- en: '`mydeployment.yaml`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`mydeployment.yaml`'
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`myservice.yaml`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`myservice.yaml`'
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So far, we have covered all the required building blocks for Skaffold. Now,
    let's talk about the Skaffold configuration.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经涵盖了Skaffold的所有必需构建块。现在，让我们谈谈Skaffold配置。
- en: Understanding the Skaffold configuration
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解Skaffold配置
- en: Let's talk about the `skaffold.yaml` Skaffold configuration file, where we describe
    the build and deploy part of the workflow. This file is generated using the `skaffold
    init` command. We will explore this and many other Skaffold CLI commands in [*Chapter
    5*](B17385_05_Final_PD_ePub.xhtml#_idTextAnchor052), *Installing Skaffold and
    Demystifying Its Pipeline Stages*. Skaffold typically expects the `skaffold.yaml`
    configuration file in the current directory, but you can override it by passing
    the `--filename` flag.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈`skaffold.yaml` Skaffold配置文件，在其中我们描述了工作流的构建和部署部分。该文件是使用`skaffold init`命令生成的。我们将在[*第5章*](B17385_05_Final_PD_ePub.xhtml#_idTextAnchor052)中探讨这个以及许多其他Skaffold
    CLI命令，*安装Skaffold和揭秘其流水线阶段*。Skaffold通常期望`skaffold.yaml`配置文件在当前目录中，但您可以通过传递`--filename`标志来覆盖它。
- en: 'This is the content of the configuration file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是配置文件的内容：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let me just explain the key components in this file, as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我解释一下这个文件中的关键组件，如下所示：
- en: '`apiVersion`: This specifies the **application programming interface** (**API**)
    schema version.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apiVersion`：这指定了**应用程序编程接口**（**API**）模式版本。'
- en: '`build`: This specifies how images are built with Skaffold.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build`：这指定了如何使用Skaffold构建图像。'
- en: '`artifacts`: Here, we have the images to be built.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`artifacts`：这里有要构建的图像。'
- en: '`image`: This is the name of the image to be built.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image`：这是要构建的图像的名称。'
- en: '`jib`: This specifies that the image is built using the Jib Maven plugin.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jib`：这指定了使用Jib Maven插件构建图像。'
- en: '`deploy`: This specifies how the image is going to be deployed to a local or
    remote Kubernetes cluster.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deploy`：这指定了图像将如何部署到本地或远程Kubernetes集群。'
- en: '`kubectl`: This specifies that the `kubectl` CLI is going to be used for creating
    and updating Kubernetes manifests.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl`：这指定了要使用`kubectl` CLI来创建和更新Kubernetes清单。'
- en: '`manifests`: This specifies the Kubernetes manifest file path—that is, deployments
    and services.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manifests`：这指定了Kubernetes清单文件路径，即部署和服务。'
- en: Now you have understood the Skaffold configuration, the next logical step is
    to build and deploy our Spring Boot application using Skaffold.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了Skaffold配置，下一个逻辑步骤是使用Skaffold构建和部署我们的Spring Boot应用程序。
- en: Building and deploying the Spring Boot application
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建和部署Spring Boot应用程序
- en: 'Before we go ahead with the build and deployment of our Spring Boot application,
    please make sure that Docker is up and running before running the `skaffold` command.
    Otherwise, you will get the following error:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续构建和部署我们的Spring Boot应用程序之前，请确保在运行`skaffold`命令之前Docker已经启动并运行。否则，您将收到以下错误：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The only thing now remaining is to run the `skaffold dev` command and start
    the **continuous development** (**CD**) workflow. If you run this command without
    enabling Kubernetes with Docker Desktop, it will fail, with the following error.
    So, watch out for these prerequisites:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在唯一剩下的就是运行`skaffold dev`命令并启动**持续开发**（**CD**）工作流。如果您在没有启用Docker Desktop的情况下运行此命令，它将失败，并显示以下错误。因此，请注意这些先决条件：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If all the prerequisites are met, then the moment you enter that command, what
    Skaffold will do is watch for changes in your source code directory using its
    **File Watcher** mechanism. It will build an image, push it to the local Docker
    registry, deploy your application, and stream logs from the running pods.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果满足了所有的先决条件，那么当您输入该命令时，Skaffold将会使用其**文件监视器**机制来监视源代码目录中的更改。它将构建一个图像，将其推送到本地Docker注册表，部署您的应用程序，并从运行中的pod中流式传输日志。
- en: 'How cool is that?!! You should see the following output:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这多酷啊！！您应该看到以下输出：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To reduce the verbosity of the logs, we have trimmed them down to show only
    the parts that are relevant to our discussion.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减少日志的冗长，我们已经将它们裁剪，只显示与我们讨论相关的部分。
- en: 'Since there are lots of logs generated and it would be difficult to explain
    them all at once, I have intentionally kept these in chunks to help you understand
    the Skaffold working better through these logs. So far, we can conclude the following
    from the logs:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于生成了大量日志，并且一次性解释它们将会很困难，我故意将它们分成几部分，以帮助您通过这些日志更好地理解Skaffold的工作。到目前为止，我们可以从日志中得出以下结论：
- en: Skaffold first tries to figure out the source code dependencies it needs to
    watch based on the builder defined in the `skaffold.yaml` file.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Skaffold首先尝试根据`skaffold.yaml`文件中定义的构建器来确定它需要监视的源代码依赖关系。
- en: It then generates a tag for the image, as mentioned in the `build` section of
    the `skaffold.yaml` file. You might be wondering why an image tag is generated
    before the image is built. We will cover the Skaffold tagging mechanism specifically
    in [*Chapter 5*](B17385_05_Final_PD_ePub.xhtml#_idTextAnchor052), *Installing
    Skaffold and Demystifying Its Pipeline Stages*.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，它会为图像生成一个标签，如`skaffold.yaml`文件中的`build`部分所述。您可能想知道为什么在构建图像之前会生成图像标签。我们将在[*第5章*](B17385_05_Final_PD_ePub.xhtml#_idTextAnchor052)中专门介绍Skaffold的标记机制，*安装Skaffold并揭秘其流水线阶段*。
- en: Then, it tries to find the image in the local cache. Images are cached locally
    to improve the execution time if there is no need for compilation. Since the image
    was not available locally, Skaffold started the build.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，它尝试在本地缓存中找到图像。图像被本地缓存以提高执行时间，如果不需要编译的话。由于图像在本地不可用，Skaffold开始构建。
- en: 'Before doing the actual build, Skaffold identified that the Kubernetes context
    is set to `docker-desktop`. It will use a local Docker daemon to create an image.
    Did you see the clever guesses it takes to fasten the inner development loop?
    You can verify the current `kube-context` status with the following command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行实际构建之前，Skaffold确定了Kubernetes上下文设置为`docker-desktop`。它将使用本地Docker守护程序来创建图像。您是否看到它所采取的巧妙猜测以加快内部开发循环？您可以使用以下命令验证当前的`kube-context`状态：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Since we are using the `jib-maven-plugin` plugin and the Kubernetes context
    is set to `docker-desktop`, Skaffold will internally use the `jib:dockerBuild`
    command to create an image. We have used `openjdk:16-jdk-alpine` as the base image
    because it's lightweight.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了`jib-maven-plugin`插件，并且Kubernetes上下文设置为`docker-desktop`，Skaffold将在内部使用`jib:dockerBuild`命令来创建映像。我们使用了`openjdk:16-jdk-alpine`作为基础映像，因为它很轻量级。
- en: 'First, Jib will try to authenticate with the Docker Hub container registry
    and download the base image using credentials from the `config.json` file located
    at the `/Users/ashish/.docker/config.json` path; then, it will create image layers,
    and finally upload it to the local Docker daemon, as seen in the following example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Jib将尝试使用位于`/Users/ashish/.docker/config.json`路径下的`config.json`文件中的凭据进行身份验证，并从Docker
    Hub容器注册表下载基础映像；然后，它将创建映像层，并最终将其上传到本地Docker守护程序，如下例所示：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can conclude the following from the logs:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从日志中得出以下结论：
- en: In the first line, in the `Starting test...` logs, Skaffold runs container-structure
    tests to validate built container images before deploying them to our cluster.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一行的`Starting test...`日志中，Skaffold运行container-structure测试来验证构建的容器映像在部署到我们的集群之前。
- en: Soon after that, Skaffold will create Kubernetes manifests—that is, deployment
    and services available under the `k8s` directory.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在那之后，Skaffold将创建Kubernetes清单 - 即，在`k8s`目录下可用的部署和服务。
- en: Once the manifests are created, it means the pod is up and running after some
    time. Then, it will also start streaming logs from the pod on your console itself.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦清单创建完成，意味着Pod在一段时间后已经启动并运行。然后，它还将在您的控制台上开始从Pod中流式传输日志。
- en: 'We will now do some verification to make sure that the pod is actually running.
    We will run the following `kubectl` command for verification:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将进行一些验证，以确保Pod实际上正在运行。我们将运行以下`kubectl`命令进行验证：
- en: '![Figure 3.5 – Kubernetes resources created'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.5 - 创建的Kubernetes资源'
- en: '](image/B17385_03_05.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B17385_03_05.jpg)'
- en: Figure 3.5 – Kubernetes resources created
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 - 创建的Kubernetes资源
- en: 'As you can see, we have a pod named `skaffold-introduction-667786cc47-khx4q`
    with a `RUNNING` status. Let''s hit the `/states` REST endpoint and see if we
    are getting the desired output or not, as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们有一个名为`skaffold-introduction-667786cc47-khx4q`的Pod，状态为`RUNNING`。让我们访问`/states`
    REST端点，看看我们是否得到了期望的输出，如下所示：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Indeed we are getting the expected output. Let''s hit the other `/state?name=statename`
    REST endpoint as well and see if we are getting the desired output or not, as
    follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，我们得到了预期的输出。让我们也访问另一个`/state?name=statename` REST端点，看看我们是否得到了期望的输出，如下所示：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Yes—we do get the desired output!
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 是的 - 我们确实得到了期望的输出！
- en: When you run the `skaffold dev` command, it creates a CD pipeline. For example,
    if there are any code changes in this mode, Skaffold will automatically rebuild
    and redeploy the image.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行`skaffold dev`命令时，它将创建一个CD流水线。例如，在此模式下进行任何代码更改时，Skaffold将自动重新构建和重新部署映像。
- en: In `Skaffold dev` mode, since we are using a local Kubernetes cluster and the
    Kubernetes context is set to `docker-desktop`, Skaffold will not push the image
    to a remote container registry and will load it to a local Docker registry instead.
    It will further help in accelerating the inner development loop.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Skaffold dev`模式下，由于我们使用的是本地Kubernetes集群，并且Kubernetes上下文设置为`docker-desktop`，Skaffold将不会将映像推送到远程容器注册表，而是将其加载到本地Docker注册表中。这将进一步帮助加快内部开发循环。
- en: Finally, to clean up everything we have done so far, we can just press *Ctrl*
    + *C*, and Skaffold will take care of the rest.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了清理我们迄今为止所做的一切，我们只需按下*Ctrl* + *C*，Skaffold将处理其余的事情。
- en: We thus reach the end of this demonstration, where we have successfully built
    and deployed a Spring Boot application to a single-node Kubernetes cluster that
    comes with Docker Desktop, using Skaffold.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们到达了这个演示的结束，我们已成功地构建并部署了一个Spring Boot应用程序到一个带有Docker Desktop的单节点Kubernetes集群，使用Skaffold。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced you to Skaffold and some of its commands and
    concepts. In the example, we have introduced you to only one Skaffold command—that
    is, `skaffold dev`. However, there are many such commands, for example, `skaffold
    run` and `skaffold render`, which we will cover in upcoming chapters. You have
    also learned how to build and deploy applications with Skaffold using commands
    such as `skaffold dev` to the local Kubernetes cluster.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们向您介绍了Skaffold及其一些命令和概念。在示例中，我们只向您介绍了一个Skaffold命令，即`skaffold dev`。然而，还有许多类似的命令，例如`skaffold
    run`和`skaffold render`，我们将在接下来的章节中介绍。您还学会了如何使用诸如`skaffold dev`这样的命令来构建和部署应用程序到本地Kubernetes集群。
- en: In the next chapter, we will learn about Skaffold features and architectures.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习Skaffold的特性和架构。
- en: Further reading
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Learn more about developing Java applications with Spring Boot from *Developing
    Java Applications with Spring and Spring Boot*, published by Packt Publishing
    ([https://www.packtpub.com/product/developing-java-applications-with-spring-and-spring-boot/9781789534757](https://www.packtpub.com/product/developing-java-applications-with-spring-and-spring-boot/9781789534757)).
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Packt Publishing出版的*Developing Java Applications with Spring and Spring Boot*中了解更多关于使用Spring
    Boot开发Java应用程序的信息（[https://www.packtpub.com/product/developing-java-applications-with-spring-and-spring-boot/9781789534757](https://www.packtpub.com/product/developing-java-applications-with-spring-and-spring-boot/9781789534757)）。
- en: The most recent Java 16 release notes are available at [https://jdk.java.net/16/](https://jdk.java.net/16/).
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 16最新版本的发布说明可在[https://jdk.java.net/16/](https://jdk.java.net/16/)上找到。
