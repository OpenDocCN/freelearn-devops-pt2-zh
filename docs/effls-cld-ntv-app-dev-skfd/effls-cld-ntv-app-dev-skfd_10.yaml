- en: '[*Chapter 7*](B17385_07_Final_PD_ePub.xhtml#_idTextAnchor092): Building and
    Deploying a Spring Boot Application with the Cloud Code Plugin'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第7章*](B17385_07_Final_PD_ePub.xhtml#_idTextAnchor092)：使用Cloud Code插件构建和部署Spring
    Boot应用程序'
- en: In the previous chapter, we learned about Skaffold-supported container image
    builders and deployers. In this chapter, we will introduce you to Google's Cloud
    Code plugin, which is available with IDEs such as IntelliJ. We will create a Spring
    Boot application and use the Cloud Code plugin to deploy it to a local Kubernetes
    cluster.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解了Skaffold支持的容器镜像构建器和部署器。在本章中，我们将向您介绍Google的Cloud Code插件，该插件可在IntelliJ等IDE中使用。我们将创建一个Spring
    Boot应用程序，并使用Cloud Code插件将其部署到本地Kubernetes集群。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Introducing Google's Cloud Code plugin
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Google的Cloud Code插件
- en: Installing and working with the IntelliJ Cloud Code plugin
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并使用IntelliJ Cloud Code插件
- en: Creating a Spring Boot application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Spring Boot应用程序
- en: Containerizing and deploying a Spring Boot application using Cloud Code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cloud Code对Spring Boot应用进行容器化和部署
- en: By the end of this chapter, you will have a solid understanding of the Cloud
    Code plugin and how you can use it to accelerate the development life cycle of
    a Kubernetes application using an IDE.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将对Cloud Code插件有一个扎实的理解，并了解如何使用它来加速使用IDE开发Kubernetes应用程序的开发生命周期。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您将需要以下内容：
- en: Visual Studio Code ([https://code.visualstudio.com/download](https://code.visualstudio.com/download))
    or the IntelliJ IDE ([https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/))
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code ([https://code.visualstudio.com/download](https://code.visualstudio.com/download))
    或 IntelliJ IDE ([https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/))
- en: Git
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: Spring Boot 2.5
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot 2.5
- en: OpenJDK 16
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenJDK 16
- en: The code from this book's GitHub repository can be found at [https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/tree/main/Chapter07](https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/tree/main/Chapter07).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的GitHub存储库中的代码可以在[https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/tree/main/Chapter07](https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/tree/main/Chapter07)找到。
- en: Introducing Google's Cloud Code plugin
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Google的Cloud Code插件
- en: 'If you are working to develop or maintain cloud-native applications in today''s
    age, then it is a sort of unspoken truth that you need a set of tools or a tool
    to ease your development process. As developers, we typically do the following
    tasks in the inner development loop:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在开发或维护当今的云原生应用程序，那么一个不成文的事实是您需要一套工具或工具来简化您的开发过程。作为开发人员，我们通常在内部开发循环中执行以下任务：
- en: Download specific dependencies such as Skaffold, `minikube`, and `kubectl` to
    set up the local development environment.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载特定的依赖项，如Skaffold、`minikube`和`kubectl`，以设置本地开发环境。
- en: Do a lot of context switching to view logs, documentation, and browse the cloud
    vendor-provided console.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行大量的上下文切换以查看日志、文档并浏览云供应商提供的控制台。
- en: While Skaffold is an excellent solution to this problem, would it not be nice
    to have everything clubbed into your IDE? For example, we can add a plugin that
    can do all these tasks and focus on the coding part. For this, we can use the
    **Google Cloud Code** extension, since it simplifies the development of cloud-based
    applications with your favorite IDE, such as IntelliJ, Visual Studio Code, and
    so on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Skaffold是解决这个问题的一个很好的解决方案，但是将所有东西都整合到您的IDE中不是很好吗？例如，我们可以添加一个插件来执行所有这些任务并专注于编码部分。为此，我们可以使用Google
    Cloud Code扩展，因为它简化了使用您喜爱的IDE（如IntelliJ、Visual Studio Code等）开发基于云的应用程序。
- en: 'Let''s understand some of the features that Cloud Code offers:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解一些Cloud Code提供的功能：
- en: Write, debug, and deploy Kubernetes application faster.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快地编写、调试和部署Kubernetes应用程序。
- en: Support for multiple IDEs, including JetBrains IntelliJ, Visual Studio Code,
    and Cloud Shell Editor.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多个IDE，包括JetBrains IntelliJ、Visual Studio Code和Cloud Shell Editor。
- en: Multiple startup templates for different languages with best practices to start
    your development in no time.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个不同语言的启动模板，以最佳实践快速开始开发。
- en: You can deploy your application with a single click on Google Kubernetes Engine
    or Cloud Run.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过单击Google Kubernetes引擎或Cloud Run来部署您的应用程序。
- en: Efficiently works with other Google Cloud Platform services, including Google
    Kubernetes Engine, Google Container Registry, and Cloud Storage.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效地与其他谷歌云平台服务一起使用，包括谷歌Kubernetes引擎、谷歌容器注册表和云存储。
- en: Improves the YAML file editing process with features such as code snippets and
    in-line documentation.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过代码片段和内联文档等功能改进YAML文件编辑过程。
- en: Built-in support for Skaffold to fasten your inner development loop.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置对Skaffold的支持，加快内部开发循环。
- en: Easy remote and local debugging of your applications running on Kubernetes.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松远程和本地调试在Kubernetes上运行的应用程序。
- en: Built-in log viewer to view application logs in real time for your Kubernetes
    applications.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置日志查看器，实时查看Kubernetes应用程序的应用程序日志。
- en: Now that we have understood what Cloud Code is and its features, let's try to
    install and use its startup templates to quickly deploy a Java application to
    the local Kubernetes cluster.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Cloud Code是什么以及它的特性，让我们尝试安装和使用其启动模板，快速部署Java应用程序到本地Kubernetes集群。
- en: Installing and working with the IntelliJ Cloud Code plugin
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装并使用IntelliJ Cloud Code插件
- en: 'To get started with the Cloud Code plugin, first, we need to download it. You
    can access the IntelliJ plugin marketplace to download it. Let''s learn how to
    do this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Cloud Code插件，首先我们需要下载它。您可以访问IntelliJ插件市场进行下载。让我们学习如何做到这一点：
- en: For Windows or Linux, navigate to **File** | **Settings** | **Plugins**, enter
    **Cloud Code** in the search area, and click on **Install**.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Windows或Linux，导航到**File** | **Settings** | **Plugins**，在搜索区域输入**Cloud Code**，然后单击**Install**。
- en: For macOS, navigate to **IntelliJ IDEA** | **Preferences** | **Plugins**, enter
    **Cloud Code** in the search area, and click on **Install**, as shown in the following
    screenshot:![Figure 7.1 – Installing Cloud Code from the IntelliJ marketplace
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于macOS，导航到**IntelliJ IDEA** | **Preferences** | **Plugins**，在搜索区域输入**Cloud
    Code**，然后单击**Install**，如下截图所示：![图7.1 - 从IntelliJ市场安装Cloud Code
- en: '](image/Figure_7.1_B17385.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.1_B17385.jpg)'
- en: Figure 7.1 – Installing Cloud Code from the IntelliJ marketplace
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 - 从IntelliJ市场安装Cloud Code
- en: Once the download is completed, a welcome screen will pop up. Here, click on
    **Create a Kubernetes Sample App**, as shown in the following screenshot:![Figure
    7.2 – Cloud Code welcome page
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，将弹出一个欢迎屏幕。在这里，单击**创建一个Kubernetes示例应用程序**，如下截图所示：![图7.2 - Cloud Code欢迎页面
- en: '](image/Figure_7.2_B17385.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.2_B17385.jpg)'
- en: Figure 7.2 – Cloud Code welcome page
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 - Cloud Code欢迎页面
- en: 'On the next screen, a **New Project** window will open. We need to select the
    **Java: Guestbook** project, as shown in the following screenshot, and click **Next**:![Figure
    7.3 – Selecting a pre-built Java Guestbook application'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在下一个屏幕上，将打开一个**新项目**窗口。我们需要选择**Java: Guestbook**项目，如下截图所示，然后单击**Next**：![图7.3
    - 选择预构建的Java Guestbook应用程序'
- en: '](image/Figure_7.3_B17385.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.3_B17385.jpg)'
- en: Figure 7.3 – Selecting a pre-built Java Guestbook application
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3 - 选择预构建的Java Guestbook应用程序
- en: On the next screen, you will be asked to specify your container image repository.
    If you are using DockerHub, GCR, or any other image registry, then add those details
    and click on **Next**. For example, if you are using GCR, then enter something
    like `gcr.io/gcp-project-id`. Since we are using startup templates and the image
    name is already defined in Kubernetes manifests, we can leave that part.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，您将被要求指定您的容器镜像存储库。如果您使用DockerHub、GCR或任何其他镜像注册表，则添加这些详细信息，然后单击**下一步**。例如，如果您使用GCR，则输入类似`gcr.io/gcp-project-id`的内容。由于我们使用启动模板并且镜像名称已在Kubernetes清单中定义，因此我们可以留下这部分。
- en: On the next screen, enter the project name and click on **Finish**. The sample
    Java project will be downloaded to your default project location.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，输入项目名称，然后单击**完成**。示例Java项目将下载到默认项目位置。
- en: Now that we have a working project, click the **Run/Debug Configurations** dropdown
    and select **Edit Configurations**.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有一个可用的项目，单击**运行/调试配置**下拉菜单，然后选择**编辑配置**。
- en: In the **Run/Debug Configurations** dialog box, select the **Develop on Kubernetes**
    configuration. Then, under **Run** | **Deployment**, select **Deploy to current
    context (minikube)**, as shown in the following screenshot:![Figure 7.4 – Setting
    Kubernetes's current context to Minikube
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**运行/调试配置**对话框中，选择**在Kubernetes上开发**配置。然后，在**运行** | **部署**下，选择**部署到当前上下文（minikube）**，如下面的屏幕截图所示：![图7.4
    – 将Kubernetes的当前上下文设置为Minikube
- en: '](image/Figure_7.4_B17385.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.4_B17385.jpg)'
- en: Figure 7.4 – Setting Kubernetes's current context to Minikube
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4 – 将Kubernetes的当前上下文设置为Minikube
- en: Click on **Apply** and **OK** to save your changes.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**应用**和**确定**以保存更改。
- en: Finally, to run the application on the local Minikube cluster, click on the
    green run icon:![Figure 7.5 – Running the application
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，要在本地Minikube集群上运行应用程序，请单击绿色运行图标：![图7.5 – 运行应用程序
- en: '](image/Figure_7.5_B17385.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.5_B17385.jpg)'
- en: Figure 7.5 – Running the application
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5 – 运行应用程序
- en: 'As explained earlier, Cloud Code uses Skaffold. You should see the following
    output once the application has been deployed successfully to the local Minikube
    cluster:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Cloud Code使用Skaffold。一旦应用程序成功部署到本地Minikube集群，您应该会看到以下输出：
- en: '![Figure 7.6 – Deployment logs'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.6 – 部署日志'
- en: '](image/Figure_7.6_B17385.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.6_B17385.jpg)'
- en: Figure 7.6 – Deployment logs
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6 – 部署日志
- en: You will receive a notification in the **Event Logs** section in IntelliJ. Click
    on **View** to access the local URLs of your deployed Kubernetes services:![Figure
    7.7 – Event logs notification
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将在IntelliJ的**事件日志**部分收到通知。单击**查看**以访问已部署的Kubernetes服务的本地URL：![图7.7 – 事件日志通知
- en: '](image/Figure_7.7_B17385.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.7_B17385.jpg)'
- en: Figure 7.7 – Event logs notification
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7 – 事件日志通知
- en: 'You can click on the **java-guestbook-frontend** URL to access the application:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以单击**java-guestbook-frontend** URL来访问应用程序：
- en: '![Figure 7.8 – Available services'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.8 – 可用服务'
- en: '](image/Figure_7.8_B17385.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.8_B17385.jpg)'
- en: Figure 7.8 – Available services
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8 – 可用服务
- en: 'You should see the following screen after accessing the `http://localhost:4503`
    URL:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在访问`http://localhost:4503` URL后，您应该会看到以下屏幕：
- en: '![Figure 7.9 – My Guestbook application landing page'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.9 – 我的留言板应用程序登录页面'
- en: '](image/Figure_7.9_B17385.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.9_B17385.jpg)'
- en: Figure 7.9 – My Guestbook application landing page
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9 – 我的留言板应用程序登录页面
- en: In this section, we installed the Cloud Code plugin and used the startup template
    provided to start with this plugin quickly. With our very minimal setup, we built
    and deployed a Java application to the local Kubernetes cluster. The following
    section will create a Spring Boot application that will display real-time air
    quality data.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们安装了Cloud Code插件，并使用提供的启动模板快速启动了这个插件。通过我们非常简单的设置，我们构建并部署了一个Java应用到本地的Kubernetes集群。接下来的部分将创建一个Spring
    Boot应用程序，用于显示实时空气质量数据。
- en: Creating a Spring Boot application
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Spring Boot应用程序
- en: According to WHO (https://www.who.int/health-topics/air-pollution), air pollution
    is killing approximately 7 million people worldwide every year. This is a cause
    of concern, not only for developed nations but developing nations as well. We
    should do everything we can to stop this from happening by taking strong measures.
    We, as technologists, can create solutions to make people aware about the air
    quality in their area. With this, people can take preventive measures such as
    wearing masks while they are out and keeping the elderly and kids at home if the
    air outside is toxic.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 根据世界卫生组织（https://www.who.int/health-topics/air-pollution）的数据，空气污染每年导致全球约700万人死亡。这不仅是发达国家的问题，也是发展中国家的问题。我们应该尽一切努力阻止这种情况发生，采取有力措施。作为技术人员，我们可以创造解决方案，让人们了解他们所在地区的空气质量。有了这个，人们可以采取预防措施，比如在外出时戴口罩，如果室外空气有毒，让老年人和孩子呆在家里。
- en: In this section, we will create a Spring Boot application that will show real-time
    air quality data for your current location. We will use the API provided by Openaq
    (https://openaq.org/), a non-profit organization called Wikipedia of air quality
    data. It exposes many endpoints for real-time air quality data, but we will use
    the [https://api.openaq.org/v1/latest?country=IN](https://api.openaq.org/v1/latest?country=IN) URL
    for our Spring Boot application. Let's begin.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将创建一个Spring Boot应用程序，用于显示您当前位置的实时空气质量数据。我们将使用Openaq（https://openaq.org/）提供的API，这是一个名为空气质量数据维基百科的非营利组织。它公开了许多实时空气质量数据的端点，但我们将使用[https://api.openaq.org/v1/latest?country=IN](https://api.openaq.org/v1/latest?country=IN) URL来为我们的Spring
    Boot应用程序。让我们开始吧。
- en: 'As always, we will start by downloading a working stub for our Spring Boot
    application using Spring Initializr by browsing [https://start.spring.io/](https://start.spring.io/).
    We will also add the following dependencies for our project:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我们将通过浏览[https://start.spring.io/](https://start.spring.io/)来下载一个Spring
    Boot应用程序的工作桩。我们还将为我们的项目添加以下依赖项：
- en: '![Figure 7.10 – Spring Boot project Maven dependencies'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.10 – Spring Boot项目Maven依赖'
- en: '](image/Figure_7.10_B17385.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.10_B17385.jpg)'
- en: Figure 7.10 – Spring Boot project Maven dependencies
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10 – Spring Boot项目Maven依赖
- en: 'Apart from the dependencies that we''ve already discussed, we will also add
    the following Dekorate Spring Boot starter dependency:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们已经讨论过的依赖项，我们还将添加以下Dekorate Spring Boot starter依赖项：
- en: '[PRE0]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Dekorate (https://github.com/dekorateio/dekorate) is a tool that generates
    Kubernetes manifests for you automatically. It can detect if the application has
    a Spring Boot web dependency and automatically generates Kubernetes manifests
    during compilation and, by default, configures services, deployments, and probes.
    Optionally, in your main class, you can add the `@KubernetesApplication` annotation
    to add some customization. For example, you can provide the number of replicas,
    service type, ingress, and many other things:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Dekorate（https://github.com/dekorateio/dekorate）是一个工具，可以自动生成Kubernetes清单文件。它可以检测应用程序是否具有Spring
    Boot web依赖项，并在编译期间自动生成Kubernetes清单文件，并默认配置服务、部署和探针。另外，在你的主类中，你可以添加`@KubernetesApplication`注解来进行一些自定义。例如，你可以提供副本数量、服务类型、入口等等：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Dekorate generates Kubernetes manifests in `.json` or .`yml` format in the `target/classes/META-INF/dekorate`
    directory.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Dekorate在`target/classes/META-INF/dekorate`目录中以`.json`或`.yml`格式生成Kubernetes清单。
- en: 'The following is the code for the Kubernetes service manifests:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Kubernetes服务清单的代码：
- en: '[PRE2]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following is the relevant part of the deployment Kubernetes manifest. As
    you can see, Dekorate has generated both liveness and readiness probes:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是部署Kubernetes清单的相关部分。正如您所看到的，Dekorate已生成了存活和就绪探针：
- en: '[PRE3]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is the `AirQualityController` class, which has been annotated with the
    `@Controller` annotation. All the incoming HTTP requests to `/index` are handled
    by the `index()` method, which takes the country code, limit, page, and city name
    as input. The default values for these parameters are `IN`, `5`, `1`, and `Delhi`,
    respectively.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`AirQualityController`类，它已经用`@Controller`注解进行了注释。所有传入的HTTP请求到`/index`都由`index()`方法处理，该方法以国家代码、限制、页面和城市名称作为输入。这些参数的默认值分别为`IN`、`5`、`1`和`Delhi`。
- en: 'As per the following code snippet, we have a method named `getAqiForCountry(),`
    that is called every time we request `/index`. This method also uses `RestTemplate`
    to fetch real-time air quality data from the endpoint, as mentioned in the `COUNTRY_AQI_END_POINT`
    variable, and returns an `AqiCountryResponse` object. Refer to the following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下代码片段，我们有一个名为`getAqiForCountry()`的方法，每当我们请求`/index`时都会调用该方法。该方法还使用`RestTemplate`从端点获取实时空气质量数据，如`COUNTRY_AQI_END_POINT`变量中所述，并返回一个`AqiCountryResponse`对象。请参考以下代码：
- en: '![Figure 7.11 – Code for real-time air quality data'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.11 - 实时空气质量数据的代码'
- en: '](image/Figure_7.11_B17385.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.11_B17385.jpg)'
- en: Figure 7.11 – Code for real-time air quality data
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11 - 实时空气质量数据的代码
- en: Tip
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'The `RestTemplate` class has been put in maintenance mode since version 5.0\.
    This means that only minor bug fixes will be allowed and that it will be removed
    in the future in favor of the `org.springframework.web.reactive.client.WebClient`
    class, which supports both synchronous and asynchronous operations. To use `WebClient`,
    you will have to add another dependency, such as `spring-boot-starter-webflux`.
    If you want to avoid having just one dependency, you can also use the new HTTP
    Client API, which was added in Java 11\. With this new API, we can send requests
    either synchronously or asynchronously. In the following synchronous blocking
    example, we are using the `send(HttpRequest, HttpResponse.BodyHandler)` method.
    This method blocks until the request is sent and a response is received:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 自5.0版本以来，`RestTemplate`类已进入维护模式。这意味着只允许进行轻微的错误修复，并且它将在未来被移除，以支持`org.springframework.web.reactive.client.WebClient`类，该类支持同步和异步操作。要使用`WebClient`，您将需要添加另一个依赖，比如`spring-boot-starter-webflux`。如果您想避免只有一个依赖，您也可以使用Java
    11中新增的新HTTP客户端API。使用这个新API，我们可以发送同步或异步请求。在下面的同步阻塞示例中，我们使用了`send(HttpRequest, HttpResponse.BodyHandler)`方法。该方法会阻塞，直到请求被发送并收到响应：
- en: '`HttpClient httpClient = HttpClient.newBuilder().build();`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpClient httpClient = HttpClient.newBuilder().build();`'
- en: '`HttpRequest httpRequest = HttpRequest.newBuilder()`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpRequest httpRequest = HttpRequest.newBuilder()`'
- en: '`      .uri(URI.create("URL"))`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`      .uri(URI.create("URL"))`'
- en: '`      .GET()`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`.GET()`'
- en: '`      .build();`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`      .build();`'
- en: '`HttpResponse<String> syncHttpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpResponse<String> syncHttpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());`'
- en: Similarly, for asynchronous non-blocking, we can use the `sendAsync(HttpRequest,
    HttpResponse.BodyHandler)` method. It returns with a `CompletableFuture<HttpResponse>`
    that can be combined with different asynchronous tasks.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对于异步非阻塞，我们可以使用`sendAsync(HttpRequest, HttpResponse.BodyHandler)`方法。它返回一个`CompletableFuture<HttpResponse>`，可以与不同的异步任务结合使用。
- en: 'The `AqiCountryResponse` object contains the following data elements:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`AqiCountryResponse`对象包含以下数据元素：'
- en: '[PRE4]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, we must do some sorting and return the data to the `index.html` page
    to render it on the UI. For the UI part, we have used the Spring Boot Thymeleaf
    dependency. Using the following logic, we can display the real-time air quality
    data inside a table on the `/index.html` page:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们必须对数据进行排序，并将数据返回到`index.html`页面上，以便在UI上呈现。对于UI部分，我们使用了Spring Boot Thymeleaf依赖。使用以下逻辑，我们可以在`/index.html`页面上显示实时空气质量数据：
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We have also created a static HTML table that specifies the air pollution levels,
    with colors assigned to them inside the same page. These colors make it easy for
    people to identify if pollution has reached an alarming level or not in their
    respective areas:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了一个静态HTML表，指定了空气污染级别，并在同一页内为它们分配了颜色。这些颜色使人们可以轻松地确定他们所在地区的污染是否已经达到警戒级别：
- en: '[PRE6]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'At this point, the application is ready. We can try it out by running it using
    the `mvn sprinboot:run` command. Let''s do that and see if we get the expected
    output. In the following screenshot, you can see that we have changed the default
    city to Mumbai and that we can view real-time air quality data for Mumbai:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，应用程序已经准备就绪。我们可以通过使用`mvn sprinboot:run`命令来运行它。让我们这样做，看看我们是否得到了预期的输出。在下面的截图中，您可以看到我们已将默认城市更改为孟买，并且我们可以查看孟买的实时空气质量数据：
- en: '![Figure 7.12 – Breathe – Real Time Air Quality Data for Mumbai'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.12 - 呼吸 - 孟买的实时空气质量数据'
- en: '](image/Figure_7.12_B17385.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.12_B17385.jpg)'
- en: Figure 7.12 – Breathe – Real Time Air Quality Data for Mumbai
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12 - 呼吸 - 孟买的实时空气质量数据
- en: 'On the same page, we can see a table that contains information related to different
    AQI ranges and their severity:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一页上，我们可以看到一个包含不同AQI范围及其严重程度相关信息的表格：
- en: '![Figure 7.13 – Air quality index'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.13 - 空气质量指数'
- en: '](image/Figure_7.13_B17385.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.13_B17385.jpg)'
- en: Figure 7.13 – Air quality index
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.13 - 空气质量指数
- en: In this section, we created a Spring Boot application that displays the real-time
    air quality data of a city in your country.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们创建了一个Spring Boot应用程序，用于显示您国家一个城市的实时空气质量数据。
- en: In the next section, we will use the Cloud Code plugin to containerize and deploy
    our application to our local Kubernetes cluster.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用Cloud Code插件将我们的应用程序容器化并部署到本地的Kubernetes集群。
- en: Containerizing and deploying a Spring Boot application using Cloud Code
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cloud Code对Spring Boot应用程序进行容器化和部署
- en: 'Let''s try to containerize and deploy the Spring Boot application we created
    in the previous section. To containerize our Spring Boot application, we will
    use `jib-maven-plugin`. We''ve used this many times in previous chapters, so I
    will skip the setup for it here. We will deploy to a local Minikube cluster using
    `kubectl`. Let''s learn how to do this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试将我们在上一节中创建的Spring Boot应用程序进行容器化和部署。为了容器化我们的Spring Boot应用程序，我们将使用`jib-maven-plugin`。我们在之前的章节中多次使用过这个插件，所以我会在这里跳过设置。我们将使用`kubectl`将其部署到本地的Minikube集群。让我们学习如何做到这一点：
- en: First, we will need a `skaffold.yaml` file in the root directory of our project.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在项目的根目录中有一个`skaffold.yaml`文件。
- en: You can create an empty file named `skaffold.yaml` and use the Cloud Code auto-completion
    feature, as shown in the following screenshot, to generate a working `skaffold.yaml`
    file:![Figure 7.14 – Creating the skaffold.yaml file using Cloud Code
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以创建一个名为`skaffold.yaml`的空文件，并使用Cloud Code的自动补全功能，如下截图所示，生成一个可用的`skaffold.yaml`文件：![图7.14
    - 使用Cloud Code创建skaffold.yaml文件
- en: '](image/Figure_7.14_B17385.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.14_B17385.jpg)'
- en: Figure 7.14 – Creating the skaffold.yaml file using Cloud Code
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.14 - 使用Cloud Code创建skaffold.yaml文件
- en: Sometimes, a new schema version may be available. Cloud Code is smart enough
    to detect those changes and will suggest that you upgrade the schema as well,
    as shown in the following screenshot:![Figure 7.15 – Updating the schema version
    using Cloud Code
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有时，可能会有新的模式版本可用。Cloud Code足够智能，可以检测到这些更改，并建议您升级模式，如下面的屏幕截图所示：![图7.15 – 使用Cloud
    Code更新模式版本
- en: '](image/Figure_7.15_B17385.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.15_B17385.jpg)'
- en: Figure 7.15 – Updating the schema version using Cloud Code
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.15 – 使用Cloud Code更新模式版本
- en: 'The following is the final version of our `skaffold.yaml` configuration file.
    Here, you can see that we have used `jib` to containerize our application. We
    used `kubectl` for deployment, and the path we''ve used is the same as the one
    we used for Dekorate for our Kubernetes manifest generation:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是我们的`skaffold.yaml`配置文件的最终版本。在这里，您可以看到我们使用`jib`来将我们的应用程序容器化。我们使用`kubectl`进行部署，我们使用的路径与我们为Kubernetes清单生成使用Dekorate时使用的路径相同：
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Soon after creating the `skaffold.yaml` configuration file, Cloud Code detects
    the change and suggests that we **Create Cloud Code Kubernetes Run Configurations**,
    as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建`skaffold.yaml`配置文件后不久，Cloud Code检测到更改，并建议我们**创建Cloud Code Kubernetes运行配置**，如下所示：
- en: '![Figure 7.16 – Creating run configurations using Cloud Code'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.16 – 使用Cloud Code创建运行配置'
- en: '](image/Figure_7.16_B17385.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.16_B17385.jpg)'
- en: Figure 7.16 – Creating run configurations using Cloud Code
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.16 – 使用Cloud Code创建运行配置
- en: Upon clicking this, under the **Run/Debug** configuration in IntelliJ, two new
    profiles will be created called **Develop on Kubernetes** and **Run on Kubernetes**:![Figure
    7.17 – Cloud Code profiles
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击此选项后，在IntelliJ的**运行/调试**配置下，将创建两个名为**在Kubernetes上开发**和**在Kubernetes上运行**的新配置文件：![图7.17
    – Cloud Code配置文件
- en: '](image/Figure_7.17_B17385.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_7.17_B17385.jpg)'
- en: Figure 7.17 – Cloud Code profiles
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.17 – Cloud Code配置文件
- en: 'To run our application in continuous development mode, choose **Develop on
    Kubernetes** from the dropdown. Cloud Code internally uses the `skaffold dev`
    command in this mode. It will do the following for you:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在持续开发模式下运行我们的应用程序，请从下拉菜单中选择**在Kubernetes上开发**。Cloud Code在此模式下内部使用`skaffold
    dev`命令。它将为您执行以下操作：
- en: It will start watching for changes in your source code.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将开始监视源代码的更改。
- en: It will containerize our Spring Boot application using Jib. Since we are using
    a local Kubernetes cluster, Skaffold is smart enough not to push the image to
    the remote registry for a fast inner development loop. Instead, it will load the
    image to the local Docker daemon.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将使用Jib对我们的Spring Boot应用程序进行容器化。由于我们使用的是本地Kubernetes集群，Skaffold足够智能，不会将图像推送到远程注册表以实现快速内部开发循环。相反，它将图像加载到本地Docker守护程序中。
- en: It will deploy the image to the Minikube cluster, port forward to port `8080`,
    and start streaming the logs in your IDE. The events logs in your IDE will show
    the service URL, which you can use to access your application. The output will
    be similar to what we saw in the previous section.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将部署图像到Minikube集群，端口转发到端口`8080`，并在您的IDE中开始流式传输日志。您的IDE中的事件日志将显示服务URL，您可以使用该URL访问您的应用程序。输出将类似于我们在上一节中看到的内容。
- en: The **Run on Kubernetes** option is similar to the `skaffold run` command. You
    can use this option to deploy when you want instead of doing so on every code
    change.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**在Kubernetes上运行**选项类似于`skaffold run`命令。您可以使用此选项在需要时部署，而不是在每次代码更改时都这样做。'
- en: Even though we have not done that, you can even use Cloud Code to deploy to
    a remote Kubernetes cluster. If your Kubernetes context is pointed toward a remote
    cluster such as GKE, then Cloud Code can do the deployment there as well. If you
    don't have a remote cluster, then Cloud Code can also help you create that.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们还没有这样做，您甚至可以使用Cloud Code部署到远程Kubernetes集群。如果您的Kubernetes上下文指向像GKE这样的远程集群，那么Cloud
    Code也可以在那里进行部署。如果您没有远程集群，Cloud Code也可以帮助您创建。
- en: Cloud Code has a good integration for running serverless workloads, as well
    as using Google's Cloud Run.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Code具有良好的集成，可以运行无服务器工作负载，以及使用谷歌的Cloud Run。
- en: In this section, you learned how to containerize and deploy a Spring Boot application
    to a local Kubernetes cluster using Cloud Code. Now, let's summarize this chapter.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了如何使用Cloud Code将Spring Boot应用程序容器化并部署到本地Kubernetes集群。现在，让我们总结一下本章。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to use the Cloud Code plugin developed by Google
    to do a single-click deployment of your Kubernetes applications from your IDE.
    We started this chapter by explaining the various features of Cloud Code. In the
    example, we explained how we could use the startup templates provided by Cloud
    Code to write, build, and deploy your Java applications from your IDE. Then, we
    created a Spring Boot application that uses Dekorate to generate Kubernetes manifests
    at compile time. Finally, we containerized and deployed the Spring Boot application
    to a local Minikube cluster.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用谷歌开发的Cloud Code插件，从您的IDE中进行单击部署Kubernetes应用程序。我们从解释Cloud Code的各种功能开始了本章。在示例中，我们解释了如何使用Cloud
    Code提供的启动模板从您的IDE中编写、构建和部署Java应用程序。然后，我们创建了一个使用Dekorate在编译时生成Kubernetes清单的Spring
    Boot应用程序。最后，我们将Spring Boot应用程序容器化并部署到本地Minikube集群。
- en: By doing this, you have discovered how you can use Cloud Code to increase your
    productivity while developing cloud-native applications.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，您已经发现了如何使用Cloud Code在开发云原生应用程序时提高生产力。
- en: The next chapter will talk about how we can deploy a Spring Boot application
    to the Google Kubernetes Engine.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将讨论如何将Spring Boot应用程序部署到Google Kubernetes Engine。
