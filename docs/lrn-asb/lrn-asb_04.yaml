- en: Deploying a LAMP Stack
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署 LAMP Stack
- en: In this chapter, we will look at deploying a full LAMP stack using the various
    core modules that ship with Ansible. We will be targeting the CentOS 7 Vagrant
    box we deployed in [Chapter 2](121e7191-52e8-4dac-a48b-9dd42f1fb2b0.xhtml), *Installing
    and Running Ansible*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 Ansible 随附的各种核心模块来部署完整的 LAMP stack。我们将针对我们在 [第 2 章](121e7191-52e8-4dac-a48b-9dd42f1fb2b0.xhtml)
    部署的 CentOS 7 Vagrant box 进行操作，*安装和运行 Ansible*。
- en: 'We will talk about the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论以下内容：
- en: Playbook layout—how the playbook should be structured
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Playbook 布局—Playbook 应该如何结构化
- en: Linux—preparing the Linux server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux—准备 Linux 服务器
- en: Apache—installing and configuring Apache
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache—安装和配置 Apache
- en: MariaDB—installing and configuring MariaDB
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB—安装和配置 MariaDB
- en: PHP—installing and configuring PHP
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP—安装和配置 PHP
- en: Before we start writing the playbook, we should discuss the structure we are
    going to be using after we quickly discuss what we need for the chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写 Playbook 之前，我们应该讨论一下我们将在本章中使用的结构，然后快速讨论一下我们需要的内容。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We are going to again use the CentOS 7 Vagrant box we launched in the previous
    chapters. As we will be installing all of the elements of a LAMP stack on the
    virtual machine, your Vagrant box will need to be able to download packages from
    the internet; in all, there is around 500 MB of packages and configuration to
    download.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次使用在之前章节中启动的 CentOS 7 Vagrant box。由于我们将在虚拟机上安装 LAMP stack 的所有元素，您的 Vagrant
    box 需要能够从互联网下载软件包；总共需要下载大约 500 MB 的软件包和配置。
- en: You can find a complete copy of the playbook at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter04/lamp](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter04/lamp).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter04/lamp](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter04/lamp)
    找到完整的 Playbook 副本。
- en: Playbook structure
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Playbook 结构
- en: In the previous chapters, the playbooks we have been running have typically
    been as basic as possible. They have all been in a single file, which is accompanied
    by a host inventory file. In this chapter, as we are going to be greatly expanding
    the amount of work our playbook is doing, so we are going to be using the directory
    structure recommended by Ansible.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们运行的 Playbook 通常尽可能基本。它们都在一个单独的文件中，伴随着一个主机清单文件。在本章中，由于我们将大大扩展 Playbook
    的工作量，因此我们将使用 Ansible 建议的目录结构。
- en: 'As you can see from the following layout, there are several folders and files:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从以下布局中所见，有几个文件夹和文件：
- en: '![](assets/e8ae9103-54aa-4970-8299-c91760c899e5.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e8ae9103-54aa-4970-8299-c91760c899e5.png)'
- en: 'Let''s work on creating the structure and discuss each item as we create it.
    The first folder we need to create is our top-level folder. This is the folder
    that will contain our playbook folders and files:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建结构并在创建时讨论每个项目。我们需要创建的第一个文件夹是我们的顶层文件夹。这个文件夹将包含我们的 Playbook 文件夹和文件：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The next folder we are going to create is one called `group_vars`. This will
    contain the variable files used in our playbook. For now, we are going to be creating
    a single variable file call `common.yml`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要创建的下一个文件夹叫做 `group_vars`。这将包含我们的 Playbook 中使用的变量文件。现在，我们将创建一个名为 `common.yml`
    的单个变量文件：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we are going to be creating two files: our host inventory file, which
    we will name `production`, and also our master playbook, which is typically called
    `site.yml`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建两个文件：我们的主机清单文件，我们将命名为 `production`，以及我们的主 Playbook，通常称为 `site.yml`：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The final folder we are going to create manually is called `roles`. In here,
    we are going to use the `ansible-galaxy` command to create a role called `common`.
    To do this, we use the following commands:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要手动创建的最后一个文件夹叫做 `roles`。在这里，我们将使用 `ansible-galaxy` 命令创建一个名为 `common` 的角色。为此，我们使用以下命令：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you may have noticed from the initial structure at the start of this section,
    the common role has several files and folders itself; all of these are created
    for us when we run the `ansible-galaxy init` command. We will discuss what each
    of these does in the next section where we will be using the common role to configure
    our base Linux server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经从本节开头的初始结构中注意到的那样，common 角色本身有几个文件和文件夹；当我们运行 `ansible-galaxy init` 命令时，所有这些都会为我们创建。我们将在下一节讨论这些文件的作用，届时我们将使用
    common 角色来配置我们的基本 Linux 服务器。
- en: 'The only other file that isn''t part of the default Ansible structure is our
    `Vagrantfile`. This contains the following content:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 除了默认的 Ansible 结构之外，唯一的其他文件是我们的 `Vagrantfile`。它包含以下内容：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: While we will be working through each of the files individually in this and
    the following sections, a complete copy of the playbook is available in the accompanying
    GitHub repository.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们将在本节和接下来的几节中逐个处理每个文件，但完整的 Playbook 副本可在附带的 GitHub 存储库中找到。
- en: LAMP stack
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LAMP stack
- en: 'The LAMP stack is the term used to describe an all-in-one web and database
    server. Typically, the components are:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: LAMP stack 是用来描述一体化的网站和数据库服务器的术语。通常，组件包括：
- en: '**Linux**: The underlying operating system; in our case, we will be using CentOS
    7.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**：底层操作系统；在我们的情况下，我们将使用 CentOS 7。'
- en: '**Apache**: The web server element of the stack.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache**：该堆栈的网站服务器元素。'
- en: '**MariaDB**: The database component of the stack; typically, it is MySQL-based.
    As CentOS 7 ships with MariaDB, we will be using that rather than PHP.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MariaDB**：该堆栈的数据库组件；通常是基于 MySQL 的。由于 CentOS 7 预装了 MariaDB，我们将使用它而不是 PHP。'
- en: '**PHP**: The dynamic language used by the web server to generate content.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PHP**：网站服务器用于生成内容的动态语言。'
- en: There is also a common variation of the LAMP stack called **LEMP**; this replaces
    *Apache* with *NGINX*, which is pronounced *engine-x*, hence the *E* rather than
    *N*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个常见的 LAMP stack 变体叫做 **LEMP**；它用 *NGINX* 替换 *Apache*，*NGINX* 的发音是 *engine-x*，因此用
    *E* 而不是 *N*。
- en: 'We are going to be looking at creating roles to deal with these components;
    these are:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将着手创建角色来处理这些组件；它们是：
- en: '`common`: This role will prepare our CentOS server, installing any supporting
    packages and services we need'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`common`：这个角色将准备我们的CentOS服务器，安装我们需要的任何支持软件包和服务'
- en: '`apache`: This role will install the Apache web server and also configure a
    default virtual host'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apache`：这个角色将安装Apache web服务器，并配置一个默认的虚拟主机'
- en: '`mariadb`: This role will not only install MariaDB, but it will also secure
    the installation and create a default database and user'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mariadb`：这个角色不仅会安装MariaDB，还会保护安装并创建一个默认的数据库和用户'
- en: '`php`: This role will install PHP, a set of common PHP modules, and also Composer,
    which is a package manager for PHP'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`php`：这个角色将安装PHP，一组常见的PHP模块，还有Composer，这是一个用于PHP的包管理器'
- en: Let's make a start on getting the basics ready by writing the common role.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写common角色，准备好基础知识。
- en: Common
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见
- en: 'In the previous section of this chapter, we used the `ansible-galaxy init`
    command to create the `common` role. This creates several folders and files; before
    we start editing them, let''s quickly discuss what each of them is used for:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前一部分中，我们使用`ansible-galaxy init`命令创建了`common`角色。这将创建几个文件夹和文件；在我们开始编辑它们之前，让我们快速讨论一下它们各自的用途：
- en: '![](assets/501dbfad-ccb2-4abb-bd73-6f7fd45ecb96.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/501dbfad-ccb2-4abb-bd73-6f7fd45ecb96.png)'
- en: 'It is really only the top level we are worried about; the `main.yml` files
    are just the default YAML files that are called for each part of the role:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只关心顶层；`main.yml`文件只是每个角色部分调用的默认YAML文件：
- en: '`README.md`: This is the file used to create any documentation about the role
    when the role is checked into a service such as GitHub. This file will be displayed
    along with the folder listing whenever someone browses to the common folder.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`：这是用于在像GitHub这样的服务中检入角色时创建有关角色的任何文档的文件。每当有人浏览common文件夹时，该文件将与文件夹列表一起显示。'
- en: '`default`: This is where the default variables for the role are stored. These
    can be overridden by any variables with the same name called in the `vars` folder.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default`：这是角色的默认变量存储位置。这些变量可以被`vars`文件夹中具有相同名称的任何变量覆盖。'
- en: '`files`: This folder contains any static files we may wish to copy to the target
    hosts using the `copy` module.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`files`：这个文件夹包含我们可能希望使用`copy`模块复制到目标主机的任何静态文件。'
- en: '`handlers`: Handlers are tasks that are executed once a playbook has been executed;
    typically, `handlers` are used to restart services when a configuration file has
    changed.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handlers`：处理程序是在执行playbook后执行的任务；通常，`handlers`用于在配置文件更改时重新启动服务。'
- en: '`meta`: This contains information about the role and is used if the role was
    to be published to Ansible Galaxy.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`meta`：这包含有关角色的信息，如果角色要发布到Ansible Galaxy，则会使用。'
- en: '`tasks`: This is where the bulk of the work happens.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tasks`：这是大部分工作发生的地方。'
- en: '`templates`: This folder contains the Jinja2 templates used by the `template`
    module.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates`：这个文件夹包含`template`模块使用的Jinja2模板。'
- en: '`tests`: Used to store any tests for the module.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests`：用于存储模块的任何测试。'
- en: '`vars`: You can override any of the variables defined in the `default` folder
    using the variables defined here; variables defined here can also be overridden
    by any variables loaded from the `group_vars` folder and the top level of the
    playbook.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vars`：您可以使用此处定义的变量覆盖`default`文件夹中定义的任何变量；此处定义的变量也可以被从`group_vars`文件夹和playbook的顶层加载的任何变量覆盖。'
- en: Let's make a start by adding some tasks.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始添加一些任务。
- en: Updating packages
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新软件包
- en: 'First of all, let''s update our server by adding the following to the beginning
    of the `roles/common/tasks/main.yml` file:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们通过在`roles/common/tasks/main.yml`文件的开头添加以下内容来更新我们的服务器：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You will notice that there is a difference from when we last ran `yum` to update
    all of the installed packages and that is what we are now doing is starting the
    task using the `name` key, this will print out the content of the value we assigned
    to the name key when the playbook runs, which will give us a better idea of what
    is going on during the playbook run.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到，与我们上次运行`yum`更新所有已安装软件包时有所不同，我们现在正在使用`name`键开始任务，这将在playbook运行时打印出我们分配给名称键的值的内容，这将让我们更好地了解playbook运行过程中发生了什么。
- en: Installing common packages
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装常用软件包
- en: 'Now that we have updated the installed packages, let''s install the packages
    we want to install on all of the Linux servers we will be launching:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经更新了安装的软件包，让我们安装我们想要在所有我们将启动的Linux服务器上安装的软件包：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see, we are again using the `yum` module and we have added a descriptive
    name for the task. Rather than providing a list of packages in the task, we are
    using a variable called `common_packages`, which is defined in the `roles/common/defaults/main.yml`
    file as the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们再次使用`yum`模块，并为任务添加了一个描述性名称。我们不是在任务中提供软件包的列表，而是使用一个名为`common_packages`的变量，在`roles/common/defaults/main.yml`文件中定义如下：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, we are installing `ntp` and `ntpdate`; we will be configuring
    `ntp` shortly. Next, we are installing `vim-enhanced` and `git` as they are always
    useful to have installed on a server. Then, we are installing the `policycoreutils-python`
    package, more on that later, before finally installing and enabling two additional
    `yum` repositories, EPEL and IUS.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们正在安装`ntp`和`ntpdate`；我们很快将配置`ntp`。接下来，我们安装`vim-enhanced`和`git`，因为它们在服务器上安装后总是有用。然后，我们安装`policycoreutils-python`包，稍后会详细介绍，最后安装并启用两个额外的`yum`仓库，EPEL和IUS。
- en: '**Extra Packages for Enterprise Linux** (**EPEL**) is a special interest group
    that maintains a collection of packages that are not part of the Red Hat Enterprise
    Linux core. EPEL packages are typically based on their Fedora counterparts and
    have been packaged so they will never conflict with, or replace, packages in the
    core Enterprise Linux distributions.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**企业Linux的额外软件包**（**EPEL**）是一个特别感兴趣的小组，他们维护了一系列不属于Red Hat Enterprise Linux核心的软件包。EPEL软件包通常基于它们的Fedora对应软件包，并且已经打包，因此它们永远不会与核心Enterprise
    Linux发行版中的软件包发生冲突或替换。'
- en: CentOS 7 ships with a package called `epel-release`, which enables the EPEL
    repository. However, there is no release package for IUS, so here, rather than
    using a package that is a part of the core CentOS repository, we are providing
    the full URL of the RPM file that enabled the IUS repository for CentOS 7.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: CentOS 7附带一个名为`epel-release`的软件包，它启用了EPEL存储库。但是，IUS没有发布包，因此在这里，我们不是使用核心CentOS存储库的软件包，而是提供了启用了IUS存储库的RPM文件的完整URL，该文件适用于CentOS
    7。
- en: The IUS Community Project is a collection of RPMs for Red Hat Enterprise Linux
    and compatible operating systems, such as CentOS, which aims to provide packages
    that are **Inline with Upstream Stable**, hence **IUS**. They provide packages
    for Apache, PHP, and MariaDB, which are all the latest release. The packages supplied
    by IUS adhere to the rules laid out in the *SafeRepo Initiative*, meaning they
    can be trusted.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: IUS社区项目是为红帽企业Linux和兼容操作系统（如CentOS）提供RPM的集合，旨在提供与上游稳定**一致**的软件包，因此**IUS**。他们提供Apache、PHP和MariaDB的软件包，这些都是最新版本。IUS提供的软件包遵循*SafeRepo计划*中制定的规则，这意味着它们是可信的。
- en: Configuring NTP
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置NTP
- en: 'Next up, we are copying the `ntp.conf` file from the `templates` folder, adding
    the list of NTP servers as we do, and then telling Ansible to restart NTP whenever
    the configuration file changes:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们从`templates`文件夹中复制`ntp.conf`文件，添加NTP服务器列表，然后告诉Ansible每当配置文件更改时重新启动NTP：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The template file can be found at `roles/common/templates/ntp.conf.j2`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文件可以在`roles/common/templates/ntp.conf.j2`中找到：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see, we are using the `ntp_servers` variable; this is stored in
    the `roles/common/defaults/main.yml` file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们正在使用`ntp_servers`变量；这个变量存储在`roles/common/defaults/main.yml`文件中：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, the following task has been added to `roles/common/handlers/main.yml`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，以下任务已添加到`roles/common/handlers/main.yml`中：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: While we have notified the handler here, NTP will not be restarted to the end
    of the playbook run along with any other tasks we have notified.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们在这里通知了处理程序，但NTP将不会在playbook运行的最后重新启动，以及我们通知的任何其他任务。
- en: Creating a user
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户
- en: 'The final part of the common role is to add a user called `lamp` and add our
    public key to the user. Before we look at the task, let''s look at the variable
    we will be using, which is defined in `roles/common/defaults/main.yml`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 常见角色的最后一部分是添加一个名为`lamp`的用户，并将我们的公钥添加到该用户。在我们查看任务之前，让我们先看一下我们将要使用的变量，这些变量在`roles/common/defaults/main.yml`中定义：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As you can see, we are providing three bits of information:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们提供了三条信息：
- en: '`name`: This is the name of the user we want to create'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这是我们要创建的用户的名称'
- en: '`group`: This is the group we want to add our user to'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group`：这是我们要将用户添加到的组'
- en: '`state`: If we want the user to be present or absent'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state`：如果我们希望用户存在或不存在'
- en: '`key`: Here, we are using an Ansible lookup task to read the content of the
    file at `~/.ssh/id_rsa.pub` and use that as the value'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`key`：在这里，我们使用Ansible查找任务来读取`~/.ssh/id_rsa.pub`文件的内容，并将其用作值'
- en: 'The task in the `roles/common/tasks/main.yml` file for creating the user is
    split into three parts; the first part uses the `group` module to create the group:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 用于创建用户的`roles/common/tasks/main.yml`文件中的任务分为三部分；第一部分使用`group`模块创建组：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, we are using `with_items` to load in the `users` variable, as
    the variable contains three different items, only two of which are being used
    here. We can just name them, so here we are using `item.group` and `item.state`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们使用`with_items`加载`users`变量，因为该变量包含三个不同的项目，这里只使用了两个。我们可以只命名它们，所以这里我们使用`item.group`和`item.state`。
- en: 'The second part of the task creates the user using the `user` module, as you
    can see:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 任务的第二部分使用`user`模块创建用户，如您所见：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The final part of the task adds the user''s public key to the authorized key
    file using the `authorized_key` module:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 任务的最后一部分使用`authorized_key`模块将用户的公钥添加到授权密钥文件中：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see, we are using the `item.name` and `item.key` variables this time.
    This module creates a file called `.ssh/authorized_keys` in the user's home folder,
    which is defined by `item.name`, and then places the content of `item.key` in
    there, giving the holder of the private portion of the key access to the user
    we have just created.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这次我们使用了`item.name`和`item.key`变量。该模块在用户的主目录中创建一个名为`.ssh/authorized_keys`的文件，该目录由`item.name`定义，然后将`item.key`的内容放在其中，使私钥的持有者可以访问我们刚刚创建的用户。
- en: Running the role
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行角色
- en: 'First of all, let''s launch the CentOS 7 Vagrant box by running one of the
    following commands:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们通过运行以下命令之一来启动CentOS 7 Vagrant box：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now that we have our server, we need to update the host inventory; in the `production`
    file, enter the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了服务器，我们需要更新主机清单；在`production`文件中输入以下内容：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, we need something that will execute our role. Add the following content
    to the `site.yml` file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要一个执行我们角色的东西。将以下内容添加到`site.yml`文件中：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that we have our playbook file ready, we can run it against our Vagrant
    box by running:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的playbook文件准备好了，我们可以通过运行以下命令来针对我们的Vagrant box运行它：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After a few minutes, you should see something similar to the following output:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，您应该看到类似以下输出：
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As you can see, everything has been installed and configured as expected. Rerunning
    the playbook gives these results:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，一切都已按预期安装和配置。重新运行playbook会得到以下结果：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As you can see, we have skipped the task which restarts NTP and there are no
    additional packages or updates to install, nor are there any changes to the user
    or group we created. Now that we have our basic packages updated and installed,
    and our base operating system configured, we are ready to install Apache.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们跳过了重新启动NTP的任务，也没有其他要安装的附加软件包或更新，也没有对我们创建的用户或组的任何更改。现在我们已经更新和安装了基本软件包，并配置了基本操作系统，我们准备安装Apache。
- en: Apache
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache
- en: 'At the moment, we have no role for Apache, so let''s create one using the following
    command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们没有Apache的角色，所以让我们使用以下命令创建一个：
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As before, this will create the basic scaffold for our Apache role.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，这将为我们的Apache角色创建基本的框架。
- en: Installing Apache
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Apache
- en: 'The first task we are going to add is one that installs the basic Apache packages.
    In `roles/apache/tasks/main.yml`, add the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要添加的第一个任务是安装基本的Apache软件包。在`roles/apache/tasks/main.yml`中，添加以下内容：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As you may have already guessed, the defaults for `apache_packages` can be
    found in `roles/apache/defaults/main.yml`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经猜到的那样，`apache_packages`的默认值可以在`roles/apache/defaults/main.yml`中找到：
- en: '[PRE24]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This installs the latest Apache 2.4 package from IUS, along with some of the
    supporting tools we will need. Once installed, we will now need to configure Apache.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从IUS安装最新的Apache 2.4软件包，以及我们需要的一些支持工具。安装完成后，我们现在需要配置Apache。
- en: Configuring Apache
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Apache
- en: 'You may have wondered why we created a user called `lamp` in the previous section;
    we are going to be hosting our website for this user. The first aspect in getting
    the user ready to host our website is to add the user to the `apache_group`. To
    do this, we need to run the following task:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你已经想知道为什么我们在上一节创建了一个名为`lamp`的用户；我们将为这个用户托管我们的网站。准备好用户托管我们网站的第一步是将用户添加到`apache_group`中。为此，我们需要运行以下任务：
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'There are two things to point out here. The first is that we are using the
    `users` variable from the previous role, which is still available to use within
    the playbook run, and the second thing is that we have added a variable called
    `apache_group` to `roles/apache/defaults/main.yml`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两件事需要指出。第一是我们正在使用上一个角色中的`users`变量，在playbook运行中仍然可以使用，第二是我们在`roles/apache/defaults/main.yml`中添加了一个名为`apache_group`的变量：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now that our user is in the `apache_group`, let''s create what will be the
    document root for our website:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们的用户在`apache_group`中，让我们创建将成为我们网站文档根目录的内容：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As you can see, this is using a few new variables, along with a new way of accessing
    an old one. Let's address `users.0.name` first, because we have defined the users
    as a list. It is possible that more than one user could be being added during
    the playbook run, as we only want to create one document root and assign it to
    a single virtual host we are using the first user in the list which registered
    under the **user** variable, this is where the `0` comes in.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这使用了一些新变量，以及访问旧变量的新方法。让我们先解决`users.0.name`，因为我们已经将用户定义为列表。在playbook运行期间可能会添加多个用户，因为我们只想创建一个文档根目录并将其分配给一个虚拟主机，我们使用列表中的第一个用户，该用户在**user**变量下注册，这就是`0`的用处。
- en: 'The `document_root` variable is also constructed using this principle; these
    are the two variables in the `roles/apache/defaults/main.yml` file that will help
    make up the full document root:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`document_root`变量也是使用这个原则构建的；这是`roles/apache/defaults/main.yml`文件中的两个变量，将帮助构成完整的文档根目录：'
- en: '[PRE28]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This will give our document root a path of `/home/lamp/web/` on the Vagrant
    box, assuming we do not override any of the variable names in our main playbook.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们的文档根目录在Vagrant box上的路径为`/home/lamp/web/`，假设我们没有覆盖主要playbook中的任何变量名。
- en: 'We also need to change the permissions on the lamp user''s home folder to allow
    us to execute scripts; to do this, the following task is called:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要更改lamp用户的主目录权限，以允许我们执行脚本；为此，调用以下任务：
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Next, we need to put our Apache virtual host in place; this will serve our
    web page whenever we put the name of our host in a browser. To do this, we will
    be using a template file stored in `roles/apache/templates/vhost.conf.j2` that
    uses the variables we have already defined along with two more:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要放置我们的Apache虚拟主机；这将在我们在浏览器中输入主机名时提供我们的网页。为此，我们将使用存储在`roles/apache/templates/vhost.conf.j2`中的模板文件，该文件使用我们已经定义的变量以及另外两个变量：
- en: '[PRE30]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The `index_file` variable in `roles/apache/defaults/main.yml`  looks like the
    following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`roles/apache/defaults/main.yml`中的`index_file`变量如下所示：'
- en: '[PRE31]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'There is also the `ansible_nodename` variable; this is one of the variables
    gathered from the host machine when the `setup` module first runs. The task to
    deploy the template is as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 还有`ansible_nodename`变量；这是从主机机器收集的变量之一，当`setup`模块首次运行时。部署模板的任务如下：
- en: '[PRE32]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The task that restarts Apache can be found in `roles/apache/handlers/main.yml`
    and looks like the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 重启Apache的任务可以在`roles/apache/handlers/main.yml`中找到，如下所示：
- en: '[PRE33]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now that we have Apache installed and configured, we need to allow Apache to
    use the web root, which is stored in `/home/`. To do this, we need to tweak the
    SELinux permissions.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经安装和配置了Apache，我们需要允许Apache使用存储在`/home/`中的网站根目录。为此，我们需要调整SELinux权限。
- en: Configuring SELinux
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置SELinux
- en: One of the packages we installed during the last section was `policycoreutils-python`.
    This allows us to configure SELinux using Python, and therefore Ansible.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节安装的软件包之一是`policycoreutils-python`。这允许我们使用Python配置SELinux，因此也可以使用Ansible。
- en: '**Security-Enhanced Linux** (**SELinux**) was developed by Red Hat and the
    NSA. It provides a mechanism for supporting access control security policies at
    the kernel level. These include mandatory access controls used by the United States
    Department of Defense.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全增强型Linux**（**SELinux**）是由红帽和美国国家安全局开发的。它提供了在内核级别支持访问控制安全策略的机制。这些包括美国国防部使用的强制访问控制。'
- en: 'By default, the Vagrant box we are using ships with SELinux enabled. Rather
    than simply stopping SELinux, we can just permit Apache to run outside of its
    default `/var/www/`. To do this, we need to add the following to our role:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，我们使用的Vagrant box启用了SELinux。我们可以不简单地停止SELinux，而是允许Apache在其默认的`/var/www/`之外运行。为此，我们需要将以下内容添加到我们的角色中：
- en: '[PRE34]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Now that Apache is allowed to serve content from our user directory, we can
    add an `index.html` file, so we have something other than the default Apache page
    to serve.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Apache被允许从我们的用户目录中提供内容，我们可以添加一个`index.html`文件，这样我们就有了除了默认的Apache页面之外的东西来提供。
- en: Copying an HTML file
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复制HTML文件
- en: 'The final task is to copy an `index.html` file to our web root, so we have
    something to serve with our newly installed Apache server. The task to do this
    uses the `template` module:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个任务是将`index.html`文件复制到我们的网站根目录，这样我们就有了新安装的Apache服务器可以提供的内容。执行此任务使用`template`模块：
- en: '[PRE35]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'As you can see, we are loading a template called `index.html.j2`, which contains
    the following content:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们正在加载一个名为 `index.html.j2` 的模板，其中包含以下内容：
- en: '[PRE36]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We are using two variables in our template; both of these can found in the
    `roles/apache/defaults/main.yml` file along with the variable:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在模板中使用了两个变量；这两个变量可以在 `roles/apache/defaults/main.yml` 文件中找到，还有一个变量：
- en: '[PRE37]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'As part of the task, we have the following line:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 作为任务的一部分，我们有以下一行：
- en: '[PRE38]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This means that the task will only be executed if `html_deploy` equals `true`.
    If it is anything else, then the task will be skipped. We will be looking at this
    later in the chapter, but for now, we want the page to be deployed, so we will
    keep the default value defined in the `apache/defaults/main.yml` file.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着只有当 `html_deploy` 等于 `true` 时，任务才会被执行。如果是其他任何值，那么任务将被跳过。我们将在本章后面讨论这一点，但现在，我们希望页面被部署，所以我们将保持在
    `apache/defaults/main.yml` 文件中定义的默认值。
- en: The final thing to point out before we run the role is the `html_body` variable.
    As you can see the content of the variable is spread over three lines. This is
    done using the `|` character after the variable name; this helps make your variable
    files readable and also allows you to start distributing items such as keys or
    certificates as variables, while also allowing you to encode them using vault.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行角色之前要指出的最后一件事是 `html_body` 变量。如你所见，变量的内容分布在三行上。在变量名后使用 `|` 字符来实现这一点；这有助于使你的变量文件可读，同时也允许你开始将诸如密钥或证书之类的项目作为变量进行分发，同时还允许你使用
    vault 进行编码。
- en: Running the role
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行角色
- en: 'Now that the role for installing and configuring Apache is complete, we can
    add it to our playbook:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在安装和配置 Apache 的角色已经完成，我们可以将其添加到我们的 playbook 中：
- en: '[PRE39]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Following on from the playbook in the previous section, we can simply rerun
    the following command:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节的 playbook 之后，我们可以简单地重新运行以下命令：
- en: '[PRE40]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This will work through the common role before executing the `apache` role.
    I have truncated the output for the common role in the playbook run here:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在执行 `apache` 角色之前通过通用角色工作。我在这里截断了 playbook 运行中通用角色的输出：
- en: '[PRE41]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Opening `http://192.168.50.4.nip.io/` in our browser should give us a page
    that looks like the following screenshot:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开 `http://192.168.50.4.nip.io/` 应该会给我们一个看起来像以下截图的页面：
- en: '![](assets/52829455-e57a-457c-9ade-a36ce728255a.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/52829455-e57a-457c-9ade-a36ce728255a.png)'
- en: 'As you can see, the template has picked up all of the variables we defined;
    the source for the page looks like this:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，模板已经捕捉到我们定义的所有变量；页面的源代码如下：
- en: '[PRE42]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If we were to rerun the playbook, we should see the following results:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们重新运行 playbook，我们应该会看到以下结果：
- en: '[PRE43]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: As you can see, there are `14` tasks that are `ok`, and nothing has `changed`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，有 `14` 个任务是 `ok`，没有发生任何 `changed`。
- en: MariaDB
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MariaDB
- en: Next, we are going to install and configure MariaDB, the database component
    of our LAMP stack.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装和配置 MariaDB，我们 LAMP 堆栈的数据库组件。
- en: MariaDB is a fork of MySQL. Its development has been led by some of the original
    developers of MySQL; they created the fork after concerns surrounding the licensing
    of MySQL after it was acquired by Oracle.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB 是 MySQL 的一个分支。它的开发由一些 MySQL 的原始开发人员领导；他们在 Oracle 收购 MySQL 后对 MySQL 的许可证引发了一些担忧后创建了这个分支。
- en: 'The first step is to create the files we are going to need for the role; again,
    we will use the `ansible-galaxy init` command to bootstrap the role files:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建我们将需要的角色文件；同样，我们将使用 `ansible-galaxy init` 命令来引导角色文件：
- en: '[PRE44]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Installing MariaDB
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 MariaDB
- en: As we have been using the IUS repository for other packages in our playbook,
    it would make sense to install the latest version of MariaDB from there. However,
    there is a conflict we need to resolve first.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在 playbook 中使用了 IUS 仓库来安装其他软件包，所以从那里安装最新版本的 MariaDB 是有道理的。然而，我们首先需要解决一个冲突。
- en: As part of the base Vagrant box installation, Postfix, the mail server, is installed.
    Postfix requires the `mariadb-libs` package as a dependency, but having this package
    installed is going to cause a conflict with the later version of the package we
    want to install. The solution to this problem is to remove the `mariadb-libs`
    package and, then install the packages we need, along with Postfix, which is removed
    when we uninstall `mariadb-libs`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 作为基本的 Vagrant 盒子安装，邮件服务器 Postfix 被安装了。Postfix 需要 `mariadb-libs` 软件包作为依赖，但安装这个软件包会导致与我们想要安装的后续版本软件包发生冲突。解决这个问题的方法是移除
    `mariadb-libs` 软件包，然后安装我们需要的软件包，以及在卸载 `mariadb-libs` 时被移除的 Postfix。
- en: 'The first task in the role, which we need to add to `roles/mariadb/tasks/mail.yml`,
    looks like the following:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 角色中的第一个任务，我们需要添加到 `roles/mariadb/tasks/mail.yml`，看起来像这样：
- en: '[PRE45]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'As you may have already suspected, `mariadb_packages_remove` is defined in
    the `roles/mariadb/defaults/main.yml` file:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经怀疑的那样，`mariadb_packages_remove` 在 `roles/mariadb/defaults/main.yml` 文件中被定义：
- en: '[PRE46]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: As you can see, we are using the full package name. We need to do this because
    if we simply used `mariadb-libs`, then the newly installed package would be removed
    during each playbook run. This is bad as this task would also uninstall all of
    the MariaDB packages we are going to be installing next, which, if we have a live
    database running, would be a disaster!
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们正在使用完整的软件包名称。我们需要这样做，因为如果我们简单地使用 `mariadb-libs`，那么新安装的软件包将在每次 playbook
    运行时被移除。这是不好的，因为这个任务也会卸载我们接下来要安装的所有 MariaDB 软件包，如果我们有一个正在运行的数据库，那将是一场灾难！
- en: 'To install the later version of MariaDB, we need to add the following task:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装 MariaDB 的后续版本，我们需要添加以下任务：
- en: '[PRE47]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The `mariadb_packages` variable, which again can be found in the defaults folder,
    looks like the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`mariadb_packages` 变量，同样可以在 defaults 文件夹中找到，看起来像这样：'
- en: '[PRE48]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We are installing the packages for MariaDB, along with Postfix, which was removed
    during the last task. We are also installing the `MySQL-python` package, which
    will allow Ansible to interact with our MariaDB installation.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在安装 MariaDB 的软件包，以及上一个任务中被移除的 Postfix。我们还安装了 `MySQL-python` 软件包，这将允许 Ansible
    与我们的 MariaDB 安装进行交互。
- en: 'By default, MariaDB does not start as part of the installation process. Typically,
    we would use a handler to start the service as part of the playbook run, and,
    as we have learned from the previous sections, the handlers run at the very end
    of the playbook execution. This would not be a problem if we didn''t need to interact
    with the MariaDB service to configure it. To get around this, we need to add the
    following task to our role:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，MariaDB在安装过程中不会启动。通常，我们会使用处理程序在playbook运行的最后启动服务，正如我们从前面的部分学到的，处理程序在playbook执行的最后运行。如果我们不需要与MariaDB服务交互来配置它，这不会是一个问题。为了解决这个问题，我们需要将以下任务添加到我们的角色中：
- en: '[PRE49]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: This makes sure that MariaDB is running, as well as configuring the service
    to start on boot.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保了MariaDB正在运行，并配置了服务以在启动时启动。
- en: Configuring MariaDB
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置MariaDB
- en: 'Now that MariaDB is installed and running, we make a start on getting it configured.
    Our default installation of MariaDB has no root password defined, so that should
    be the first thing we set up. We can do this using the `mysql_user` module:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在MariaDB已安装并运行，我们开始配置它。我们默认安装的MariaDB没有定义根密码，所以这应该是我们设置的第一件事。我们可以使用`mysql_user`模块来做到这一点：
- en: '[PRE50]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'As you can see, we have a few different variables in use; these are defined
    in `roles/mariadb/defaults/main.yml` as:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们使用了一些不同的变量；这些在`roles/mariadb/defaults/main.yml`中定义为：
- en: '[PRE51]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The order of the hosts in `mariadb_hosts` is important; if `localhost` is not
    the last host changed, then Ansible will give an error with a message about not
    being able to connect to MariaDB. This is because we are using the fact that MariaDB
    does not ship with a default root password to actually set the root password.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`mariadb_hosts`中主机的顺序很重要；如果`localhost`不是最后一个更改的主机，那么Ansible将会给出一个关于无法连接到MariaDB的错误消息。这是因为我们利用了MariaDB没有默认root密码的事实来实际设置root密码。'
- en: 'Now, once we have configured the root user''s password, we still want to be
    able to connect to MySQL. I prefer to set up a `~/.my.cnf` file under the root
    users folder. This can be done in Ansible as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦我们配置了root用户的密码，我们仍然希望能够连接到MySQL。我喜欢在根用户文件夹下设置一个`~/.my.cnf`文件。这可以在Ansible中完成如下：
- en: '[PRE52]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The template file can be found at `lamp/roles/mariadb/templates/my.cnf.j2`;
    it contains the following content:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文件可以在`lamp/roles/mariadb/templates/my.cnf.j2`中找到；它包含以下内容：
- en: '[PRE53]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Once in place, this means that the system root user—not to be confused with
    the root user we just set up within MariaDB—will have direct access to MariaDB
    without having to provide a password. Next up, we can delete the anonymous user,
    which is created by default. Again, we will use the `mysql_user` module for this:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦放置好，这意味着系统根用户——不要与我们刚刚在MariaDB中设置的root用户混淆——将直接访问MariaDB而无需提供密码。接下来，我们可以删除默认创建的匿名用户。同样，我们将使用`mysql_user`模块来完成这个操作：
- en: '[PRE54]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Finally, there is a `test` database created. As we will be creating our own,
    let''s remove this as well, this time using the `mysql_db` module:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还创建了一个`test`数据库。由于我们将创建自己的数据库，让我们也将其删除，这次使用`mysql_db`模块：
- en: '[PRE55]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: These configuration tasks are the equivalent of running the `mysql_secure_installation`
    command.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配置任务相当于运行`mysql_secure_installation`命令。
- en: Importing a sample database
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入示例数据库
- en: Now that our MariaDB installation is complete, we should do something with it.
    There are a few sample databases available on GitHub. Let's look at importing
    the employee database provided by datacharmer. We will be using a slightly altered
    version of the SQL dumps, but more on that later in the section.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的MariaDB安装已经完成，我们应该对其进行一些操作。GitHub上有一些示例数据库可用。让我们来看看导入datacharmer提供的employee数据库。我们将使用一个稍微修改过的SQL转储文件版本，但稍后在本节中会详细介绍。
- en: 'We are going to be using nested variables for this part of the playbook; these
    can be found in `mariadb/defaults/main.yml`:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在playbook的这一部分使用嵌套变量；这些可以在`mariadb/defaults/main.yml`中找到：
- en: '[PRE56]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: When we call these variables, they will need to be prefixed with `mariadb_sample_database`.
    For example, whenever we need to use the `db_name` variable, we will need to use
    `mariadb_sample_database.db_name`. As when we copied the HTML file in the previous
    section, we will be adding a condition using `when` to each of the tasks, which
    will mean they can be skipped if required.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们调用这些变量时，它们需要以`mariadb_sample_database`为前缀。例如，每当我们需要使用`db_name`变量时，我们将需要使用`mariadb_sample_database.db_name`。就像我们在上一节中复制HTML文件时一样，我们将为每个任务添加一个使用`when`的条件，这意味着如果需要，它们可以被跳过。
- en: 'The first thing we will need to do is download a copy of the dump files from
    GitHub and uncompress them. To do this, we will be using the `unarchive` module:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是从GitHub下载转储文件的副本并解压缩它们。为此，我们将使用`unarchive`模块：
- en: '[PRE57]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: We are grabbing the file from a remote location, which is the URL `mariadb_sample_database.source_url`,
    and uncompressing it in `/tmp`. As we have set `remote_src` to `yes`, Ansible
    knows it has to download the file from a remote source. If we didn't provide a
    full URL, it would have attempted to have copied the file from our control host.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在从远程位置获取文件，即URL`mariadb_sample_database.source_url`，并在`/tmp`中解压缩它。由于我们将`remote_src`设置为`yes`，Ansible知道它必须从远程源下载文件。如果我们没有提供完整的URL，它将尝试从控制主机复制文件。
- en: 'The next two tasks use the `mysql_db` and `mysql_user` modules to create the
    database and a user who has access to it:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个任务使用`mysql_db`和`mysql_user`模块来创建数据库和一个可以访问它的用户：
- en: '[PRE58]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The final part of the playbook imports the MySQL dumps into the database; however,
    before we import the files, we should first check if the dumps have already been
    imported. If we do not perform this check every time we run the playbook, the
    dumps will be imported. To check whether the data has been imported already, we
    are going to use the `stat` module; this checks the presence of a file and gathers
    information on it.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: playbook的最后部分将MySQL转储文件导入数据库；然而，在导入文件之前，我们应该首先检查转储文件是否已经被导入。如果我们每次运行playbook时不执行此检查，转储文件将被导入。为了检查数据是否已经被导入，我们将使用`stat`模块；这将检查文件的存在并收集有关它的信息。
- en: 'If we have already imported the data, there will be a file called `employees.frm`
    in the `/var/lib/mysql/employees` folder, so let''s check for that:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经导入了数据，`/var/lib/mysql/employees`文件夹中将会有一个名为`employees.frm`的文件，因此让我们检查一下：
- en: '[PRE59]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Now we know whether we need to import the database dumps or not, we can proceed
    with the final task, which imports the database dumps listed in `mariadb_sample_database.dump_files`
    if the following conditions are met:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道是否需要导入数据库转储，我们可以继续进行最后的任务，如果满足以下条件，将导入`mariadb_sample_database.dump_files`中列出的数据库转储：
- en: Is the variable `db_imported` defined? If not, then we are skipping importing
    the sample database and should skip this task.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量`db_imported`是否已定义？如果没有，则我们将跳过导入示例数据库，并且应该跳过此任务。
- en: Does `db_imported.stat.exists` equal `false`? If so, then the file does not
    exist, and we should import the data.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_imported.stat.exists`是否等于`false`？如果是，则文件不存在，我们应该导入数据。'
- en: 'The task itself uses the `mysql_db` module to import the data:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 该任务本身使用`mysql_db`模块来导入数据：
- en: '[PRE60]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: That completes the import of the sample database into our MariaDB installation;
    let's now run the playbook and call the role.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了将示例数据库导入到我们的MariaDB安装中；现在让我们运行playbook并调用角色。
- en: Running the role
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行角色
- en: 'Now that we have our role written, we can add it to our playbook:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了我们的角色，我们可以将其添加到我们的playbook中：
- en: '[PRE61]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Again, we can rerun the playbook using:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以使用以下命令重新运行playbook：
- en: '[PRE62]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This will work through the common and Apache roles before moving on to the
    MariaDB equivalent. This playbook output starts just before the the MariaDB role
    begins:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续进行MariaDB等效之前，这将通过常见和Apache角色进行操作。这个playbook输出开始于MariaDB角色开始之前：
- en: '[PRE63]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'If we were to rerun the playbook, the final part of the playbook run returns
    the following:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们重新运行playbook，playbook运行的最后部分将返回以下内容：
- en: '[PRE64]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'As you can see, the checks we put in place to not reimport the database dumps
    worked as expected. We can test our MariaDB installation using a tool such as
    Sequel Pro or MySQL Workbench; just use the following host and credentials to
    connect:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们设置的检查以防止重新导入数据库转储的工作效果如预期。我们可以使用Sequel Pro或MySQL Workbench等工具测试我们的MariaDB安装；只需使用以下主机和凭据连接：
- en: 'Host: `192.168.50.4.nip.io`'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机：`192.168.50.4.nip.io`
- en: 'Port: `3306`'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口：`3306`
- en: 'Username: `root`'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名：`root`
- en: 'Password: `Pa55W0rd123`'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码：`Pa55W0rd123`
- en: 'The following screenshot is taken from Sequel Pro and shows the `employees`
    table, which we imported into the `employees database` :'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图来自Sequel Pro，显示了我们导入到`employees数据库`中的`employees`表：
- en: '![](assets/b477b72d-02f7-46b0-8fd9-ef8613e90a8c.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b477b72d-02f7-46b0-8fd9-ef8613e90a8c.png)'
- en: Now that we have MariaDB installed, configured, and some sample data imported,
    let's take a look at creating a role that installs PHP, the final component of
    our LAMP stack.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装、配置了MariaDB，并导入了一些示例数据，让我们来看看创建一个安装PHP的角色，这是我们LAMP堆栈的最后一个组件。
- en: PHP
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP
- en: 'The final element of the stack we are putting together is PHP. As with the
    other three elements, we need to create a role using the `ansible-galaxy init`
    command:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在组合的堆栈的最后一个元素是PHP。与其他三个元素一样，我们需要使用`ansible-galaxy init`命令创建一个角色：
- en: '[PRE65]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: As with the other parts of the stack, we are going to be using packages from
    the IUS repository; this will allow us to install the latest version of PHP, version
    7.2.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 与堆栈的其他部分一样，我们将使用IUS存储库中的软件包；这将允许我们安装PHP的最新版本，即7.2版本。
- en: Installing PHP
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装PHP
- en: 'Like the previous three parts of the stack, we are going to start by installing
    the packages. As before, we are defining a variable in `roles/php/default/main.yml`
    that lists all of the packages we need:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 与堆栈的前三部分一样，我们将从安装软件包开始。与以前一样，我们在`roles/php/default/main.yml`中定义了一个变量，列出了我们需要的所有软件包：
- en: '[PRE66]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'This is installed by using the YUM module in `php/roles/tasks/main.yml`:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在`php/roles/tasks/main.yml`中使用YUM模块安装的：
- en: '[PRE67]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'As you can see from this task, we are notifying two different handlers, the
    one for Apache and one for PHP-FPM. You may be thinking to yourself: why do we
    need to notify Apache?'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个任务中可以看出，我们正在通知两个不同的处理程序，一个是Apache，另一个是PHP-FPM。你可能会想：为什么我们需要通知Apache？
- en: '**FastCGI Process Manager** (**FPM**) is a PHP FastCGI implementation that
    helps busy PHP websites run more efficiently. It also adds the ability to start
    PHP workers with different user and group IDs, which can listen on different ports
    using different `php.ini` files, allowing you to create pools of PHP workers to
    handle your load.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**FastCGI进程管理器**（**FPM**）是一个PHP FastCGI实现，它有助于使繁忙的PHP网站运行更高效。它还增加了使用不同用户和组ID启动PHP工作者的能力，可以使用不同的`php.ini`文件在不同的端口上监听，从而允许您创建处理负载的PHP工作者池。'
- en: As we are installing the `php72u-fpm` package, we need to configure Apache to
    use the configuration put in place by the `php72u-fpm-httpd` package; if we don't,
    then Apache will not load the configuration, which instructs it on how to interact
    with PHP-FPM.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在安装`php72u-fpm`软件包，我们需要配置Apache以使用`php72u-fpm-httpd`软件包中设置的配置；如果不这样做，Apache将不会加载配置，这会指示它如何与PHP-FPM交互。
- en: 'The handler for PHP-FPM can be found in `roles/php/handlers/main.yml`, and
    it contains the following:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: PHP-FPM的处理程序可以在`roles/php/handlers/main.yml`中找到，其中包含以下内容：
- en: '[PRE68]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: That is kind of it for the PHP installation and configuration; we should now
    have a working PHP installation, and we can test this using a phpinfo file.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是PHP安装和配置的全部内容；现在我们应该有一个可用的PHP安装，并且我们可以使用phpinfo文件进行测试。
- en: The phpinfo file
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: phpinfo文件
- en: 'As with the Apache installation, we can add the option to upload a test file,
    in this case, a simple PHP file that calls the `php_info` function. This displays
    information about our PHP installation. The task to upload this file looks like
    the following:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 与Apache安装一样，我们可以添加选项来上传一个测试文件，这里是一个简单的PHP文件，调用`php_info`函数。这会显示关于我们的PHP安装的信息。上传此文件的任务如下所示：
- en: '[PRE69]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'As you can see, it is only being called when the following is set in `roles/php/default/main.yml`:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，只有在`roles/php/default/main.yml`中设置以下内容时才会被调用：
- en: '[PRE70]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The file we are copying to the host from our Ansible controller can be found
    in `roles/php/files/info.php`, and it contains the following three lines:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从我们的Ansible控制器复制到主机的文件可以在`roles/php/files/info.php`中找到，它包含以下三行：
- en: '[PRE71]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: While this demonstrates that PHP is installed and working, it isn't very interesting,
    so before we run our playbook, let's add a few more steps that tie all of the
    elements of our LAMP stack together.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这表明PHP已安装并运行，但并不是很有趣，因此在运行playbook之前，让我们添加一些将我们的LAMP堆栈所有元素联系在一起的步骤。
- en: Adminer
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Adminer
- en: 'The final task for the playbook is going to be to install a PHP script called
    Adminer; this provides a PHP-powered interface for interacting with and managing
    your databases. There are three steps to install Adminer, all of which use the
    following nested variables that can be found in `roles/php/defaults/main.yml`:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: playbook的最后一个任务将是安装一个名为Adminer的PHP脚本；这提供了一个用于与数据库交互和管理的基于PHP的界面。安装Adminer有三个步骤，所有这些步骤都使用`roles/php/defaults/main.yml`中的嵌套变量：
- en: '[PRE72]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'As you can see, we are using nest variables again, this time to tell our playbook
    to install the tool, where it should be installed, and also where it can be downloaded
    from. The first task in `roles/php/tasks/main.yml` is to create the directory
    where we are going to be installing Adminer:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们再次使用嵌套变量，这次是告诉我们的playbook安装工具的位置，应该安装在哪里，以及可以从哪里下载。`roles/php/tasks/main.yml`中的第一个任务是创建我们将安装Adminer的目录：
- en: '[PRE73]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Now that we have somewhere on our Vagrant box to install Adminer, we should
    download it. This time, as we are not downloading an archive, we are using the
    `get_url` module:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在Vagrant盒子上有了一个安装Adminer的地方，我们应该下载它。这一次，由于我们不是在下载存档，我们使用`get_url`模块：
- en: '[PRE74]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'As you can see, we are downloading the `adminer-4.6.2-mysql.php` file from
    GitHub and saving it to **`/usr/share/adminer/index.php`**, so how do we access
    it? The final part of the task uses the template module to upload an additional
    Apache configuration file to `/etc/httpd/conf.d/adminer.conf`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们正在从GitHub下载`adminer-4.6.2-mysql.php`文件，并将其保存到**`/usr/share/adminer/index.php`**，那么我们如何访问它呢？任务的最后一部分使用模板模块将额外的Apache配置文件上传到`/etc/httpd/conf.d/adminer.conf`：
- en: '[PRE75]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The `adminer.conf.j2`  template, which should be placed in `roles/php/templates`,
    looks as follows:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`adminer.conf.j2` 模板应放置在 `roles/php/templates`，如下所示：'
- en: '[PRE76]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: As you can see, it is creating an alias called `/adminer`, which then points
    at `index.php` in `/usr/share/adminer/`. As we are adding to the Apache configuration
    file, we are also notifying the `restart httpd` handler so that Apache restarts,
    picking up our updated configuration.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它正在创建一个名为`/adminer`的别名，然后指向`/usr/share/adminer/`中的`index.php`。由于我们正在添加到Apache配置文件，因此我们还通知`restart
    httpd`处理程序，以便Apache重新启动，从而获取我们更新的配置。
- en: Running the role
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行角色
- en: 'Now that the role for the final element of our LAMP stack is complete, we can
    add it to our playbook. It should now look like the following:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的LAMP堆栈的最后一个元素的角色已经完成，我们可以将其添加到我们的playbook中。现在它应该看起来像下面这样：
- en: '[PRE77]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Run it by using the following command:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行它：
- en: '[PRE78]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'This will deploy PHP on our Vagrant box; this output picks up as the PHP role
    is called:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在我们的Vagrant盒子上部署PHP；此输出作为调用PHP角色：
- en: '[PRE79]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Once installed, you should be able to access the following URLs:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您应该能够访问以下URL：
- en: '`http://192.168.50.4.nip.io/info.php`'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://192.168.50.4.nip.io/info.php`'
- en: '`http://192.168.50.4.nip.io/adminer/`'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://192.168.50.4.nip.io/adminer/`'
- en: 'When you go to the first link, you should see something like the following
    page:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问第一个链接时，您应该看到类似以下页面的内容：
- en: '![](assets/8eb962a8-3707-4f0e-9012-5b1e92c0b487.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8eb962a8-3707-4f0e-9012-5b1e92c0b487.png)'
- en: 'At the second link, once logged in using the username `root` and password `Pa55W0rd123`,
    you should be able to see the `employees` database:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个链接中，一旦使用用户名`root`和密码`Pa55W0rd123`登录，您应该能够看到`employees`数据库：
- en: '![](assets/ae89246a-76c7-4ddb-b97d-933c6727b4c1.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ae89246a-76c7-4ddb-b97d-933c6727b4c1.png)'
- en: With Adminer, we have a PHP script accessing our MariaDB database; the pages
    are being served by Apache from our Linux Vagrant box.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Adminer，我们有一个PHP脚本访问我们的MariaDB数据库；页面是由我们的Linux Vagrant盒子上的Apache提供的。
- en: Overriding variables
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 覆盖变量
- en: 'Before we finish, we should quickly discuss how we can override the default
    variables we have been setting. To do this, add the following lines to `group_vars/common.yml
    file`:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成之前，我们应该快速讨论一下如何覆盖我们一直在设置的默认变量。为此，将以下行添加到`group_vars/common.yml`文件中：
- en: '[PRE81]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Then, rerun the playbook. Once the playbook has finished, opening `http://192.168.50.4.nip.io/`
    will show you the following page:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 然后重新运行playbook。一旦playbook完成，打开`http://192.168.50.4.nip.io/`将显示以下页面：
- en: '![](assets/aec7ff55-decf-451e-b465-b1234979f1aa.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aec7ff55-decf-451e-b465-b1234979f1aa.png)'
- en: As you can see, the default `index.html` page has been updated with a link to
    our phpinfo page and also Adminer. Any of the variables we have configured as
    default can be overridden in this way.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，默认的`index.html`页面已更新为包含指向我们的phpinfo页面和Adminer的链接。我们配置为默认的任何变量都可以以这种方式被覆盖。
- en: Summary
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have worked through writing a playbook that installs a LAMP
    stack on our CentOS 7 Vagrant box. We created four roles, one for each element
    of the stack, and within each of the roles we built in a little logic that can
    be overridden to deploy additional elements such as test HTML and PHP pages, and
    we also built in the option to create a test database that contains over 40,000
    records.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经通过编写一个playbook，在我们的CentOS 7 Vagrant盒子上安装了一个LAMP堆栈。我们创建了四个角色，每个角色对应堆栈的一个元素，并在每个角色中构建了一些逻辑，可以覆盖以部署其他元素，如测试HTML和PHP页面，并且还内置了创建一个包含超过40,000条记录的测试数据库的选项。
- en: So far, we have been installing some pretty basic packages. In the next chapter,
    we will be building a playbook that installs, configures, and maintains a WordPress
    installation.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经安装了一些非常基本的软件包。在下一章中，我们将编写一个安装、配置和维护WordPress安装的playbook。
- en: Questions
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which Ansible module would you use to download and unarchive a zip file?
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会使用哪个Ansible模块来下载和解压缩zip文件？
- en: 'True or false: The variables found in the **`roles/rolename/default/`** folder
    override all other references of the same variable.'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：在**`roles/rolename/default/`**文件夹中找到的变量会覆盖所有其他相同变量的引用。
- en: Explain how you would add a second user to our playbook
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释一下你会如何向我们的playbook中添加第二个用户
- en: 'True or false: You can only call a single handler from a task.'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：你只能从一个任务中调用一个处理程序。
- en: Update the final playbook to add a second virtual host, which serves a different
    default HTML page.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新最终的playbook以添加第二个虚拟主机，它提供不同的默认HTML页面。
- en: Further reading
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find the project pages for the third-party tools covered throughout
    the chapter at the following URLs:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下URL找到本章中涵盖的第三方工具的项目页面：
- en: '**CentOS**: [https://www.centos.org/](https://www.centos.org/)'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CentOS**: [https://www.centos.org/](https://www.centos.org/)'
- en: '**Apache**: [https://httpd.apache.org/](https://httpd.apache.org/)'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache**: [https://httpd.apache.org/](https://httpd.apache.org/)'
- en: '**MariaDB**: [https://mariadb.org/](https://mariadb.org/)'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MariaDB**: [https://mariadb.org/](https://mariadb.org/)'
- en: '**Datacharmer test database**: [https://github.com/datacharmer/test_db](https://github.com/datacharmer/test_db)'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Datacharmer test database**: [https://github.com/datacharmer/test_db](https://github.com/datacharmer/test_db)'
- en: '**PHP**: [https://php.net/](https://php.net/)'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PHP**: [https://php.net/](https://php.net/)'
- en: '**PHP-FPM**: [https://php-fpm.org/](https://php-fpm.org)'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PHP-FPM**: [https://php-fpm.org/](https://php-fpm.org)'
- en: '**Adminer**: [https://www.adminer.org](https://www.adminer.org)'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Adminer**: [https://www.adminer.org](https://www.adminer.org)'
