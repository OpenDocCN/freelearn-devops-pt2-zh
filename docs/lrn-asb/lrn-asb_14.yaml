- en: Deploying WPScan and OWASP ZAP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署WPScan和OWASP ZAP
- en: In this chapter, we will look at creating a playbook that deploys and runs two
    security tools, WPScan and OWASP ZAP. Then, using the playbooks from previous
    chapters, we will launch a WordPress installation for us to scan.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍创建一个playbook，部署和运行两个安全工具WPScan和OWASP ZAP。然后，使用之前章节的playbooks，我们将启动一个WordPress安装供我们扫描。
- en: As with other chapters, we will be using Vagrant and one of the boxes we have
    already downloaded. You can find a complete copy of the playbook at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter14](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter14).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他章节一样，我们将使用Vagrant和我们已经下载的框之一。您可以在[https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter14](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter14)找到完整的playbook副本。
- en: Preparing the boxes
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备框
- en: We are going to be launching two Vagrant boxes for this chapter, the first of
    which we will be using to install the scanning tools. This host will have Docker
    installed, and we will be using the Docker Ansible modules to interact with the
    software. The second box will contain or host the WordPress installation, which
    will be targeted by the scanning tools.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将启动两个Vagrant框，第一个将用于安装扫描工具。此主机将安装了Docker，并且我们将使用Docker Ansible模块与该软件进行交互。第二个框将包含或托管WordPress安装，扫描工具将针对其进行扫描。
- en: 'Create a `Vagrantfile` with the following content:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个包含以下内容的`Vagrantfile`：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, we are going to be launching two CentOS 7 boxes, one labelled
    `scan`, which has a hostname of `10.20.30.40.nip.io`, and the other `wp`, which
    has a hostname of `10.20.30.41.nip.io`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们将启动两个CentOS 7框，一个标记为`scan`，其主机名为`10.20.30.40.nip.io`，另一个为`wp`，其主机名为`10.20.30.41.nip.io`。
- en: 'The inventory host file, which is always called production, contains the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 主机清单文件，通常称为production，包含以下内容：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, we have defined three host groups; the first group called `scan`
    includes the single host which we will use to run the scanning tools. The second
    group, `wordpress`, while only containing a single host, could have more than
    one hosted listed, and the scans should target them all. The third group, called
    `boxes`, has been defined as a way of applying the connection configuration to
    all the hosts we have added to the playbook.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们定义了三个主机组；第一组名为`scan`，包括我们将用于运行扫描工具的单个主机。第二组`wordpress`，虽然只包含一个主机，但可以列出多个主机，并且扫描应该针对它们所有。第三组名为`boxes`，已被定义为将连接配置应用于我们在playbook中添加的所有主机的一种方式。
- en: 'You can launch the two boxes using one of the following two commands:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下两个命令之一启动这两个框：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now we have our Vagrant boxes up and running, we can take a look at what our
    playbook looks like.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的Vagrant框已经启动并运行，我们可以看一下我们的playbook是什么样子的。
- en: The WordPress playbook
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress playbook
- en: As you have already guessed, this is going to be extremely simple, as we already
    have written a playbook that deploys WordPress on a CentOS 7 host. In fact, all
    we need to do is copy the `group_vars`, `roles` folders, plus their contents,
    and also the `site.yml` file from the `Chapter05/lemp` folder in the repository
    and we are done.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您已经猜到的那样，这将非常简单，因为我们已经编写了一个在CentOS 7主机上部署WordPress的playbook。实际上，我们唯一需要做的就是从存储库的`Chapter05/lemp`文件夹中复制`group_vars`、`roles`文件夹及其内容，以及`site.yml`文件，然后我们就完成了。
- en: 'This is one of the great advantages of using a tool such as Ansible: Write
    once and use often; the only change we will be making is the `site.yml` file when
    we add in the plays that deploy the software.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用Ansible这样的工具的一个巨大优势：写一次，多次使用；我们唯一要做的更改是在添加部署软件的plays时更改`site.yml`文件。
- en: The scan playbook
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描playbook
- en: As already mentioned, we are going to be using Docker to run both WPScan and
    also OWASP ZAP. The reason for this is we would end up deploying quite a bit of
    supporting software if we were to install both packages directly on the host—while
    this is not a problem, using a tool such as Docker allows to simplify the installation
    process as well as giving us an excuse to cover the Docker Ansible modules.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将使用Docker来运行WPScan和OWASP ZAP。这样做的原因是，如果我们直接在主机上安装这两个软件包，我们将最终部署相当多的支持软件。虽然这不是问题，但使用诸如Docker这样的工具可以简化安装过程，并给我们一个借口来介绍Docker
    Ansible模块。
- en: The Docker role
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker角色
- en: 'As with all of the roles we have created so far, we are going to use the `ansible-galaxy`
    command to generate the structure for our role:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们迄今为止创建的所有角色一样，我们将使用`ansible-galaxy`命令来生成我们角色的结构：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For our Docker installation, we will be using the `yum` repository provided
    by Docker itself; this means that before we install, Docker needs to enable the
    repository. Once enabled, we will be able to install the latest stable release.
    Let''s make a start by populating some defaults in `roles/docker/defaults/main.yml`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的Docker安装，我们将使用Docker自己提供的`yum`存储库；这意味着在安装Docker之前，需要启用存储库。一旦启用，我们将能够安装最新的稳定版本。让我们首先在`roles/docker/defaults/main.yml`中填充一些默认值：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, we are defining the URL to where the repo's GPG key is stored,
    the URL for the repository file, and where on the host the repository file should
    be copied. We also have a list of the packages that need to be installed to get
    Docker up and running. Finally, we have the Python package for Docker that will
    allow Ansible to interact with the Docker API on our Vagrant box.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们正在定义存储库的GPG密钥的URL，存储库文件的URL，以及存储库文件应该被复制到主机的位置。我们还列出了需要安装的软件包列表，以使Docker正常运行。最后，我们有用于Docker的Python软件包，这将允许Ansible与我们的Vagrant
    box上的Docker API进行交互。
- en: 'Before we use any of the variables defined, we need to make sure that the host
    we are running is up to date with its packages, so the first task in `roles/docker/tasks/main.yml`
    should perform a `yum update`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用任何已定义的变量之前，我们需要确保我们运行的主机的软件包是最新的，因此`roles/docker/tasks/main.yml`中的第一个任务应该执行`yum
    update`：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now our host it up to date, we can add the GPG key; for this we will use the
    `rpm_key` module where we simply have to supply the URL, or file path, to the
    key we want to install:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的主机已经更新，我们可以添加GPG密钥；对此，我们将使用`rpm_key`模块，我们只需提供要安装的密钥的URL或文件路径：
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we have the GPG key installed, we can download the `docker-ce.repo` file
    from Docker and store it where `yum` will pick it up when it is next executed:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了GPG密钥，我们可以从Docker下载`docker-ce.repo`文件，并将其存储在`yum`在下次执行时会使用的位置：
- en: '[PRE8]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see, we are using the `get_url` module to download the file and place
    it in `/etc/yum.repos.d/` on our host machine; we are also setting the read, write,
    and execute permissions on the file to `0644`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们使用`get_url`模块下载文件并将其放置在主机机器上的`/etc/yum.repos.d/`中；我们还设置了文件的读、写和执行权限为`0644`。
- en: 'Now that we have the Docker repository configured, we can install the packages
    we defined by adding the following task:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了Docker存储库，我们可以通过添加以下任务来安装我们定义的软件包：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We have added the `update_cache` option as we have just added a new repository
    and want to make sure that it is picked up. Next, we have to install the Docker
    Python package using `pip`; by default `pip` is not installed so we need to make
    sure it is available first by using `easy_install`, which in turn was installed
    by the `python-setuptools` package, which was installed with the previous task.
    There is an `easy_install` module, so this task is simple:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了`update_cache`选项，因为我们刚刚添加了一个新的存储库，并希望确保它被识别。接下来，我们必须使用`pip`安装Docker Python包；默认情况下，`pip`未安装，因此我们需要确保它首先可用，方法是使用`easy_install`，而`easy_install`又是由先前的任务安装的`python-setuptools`软件包安装的。有一个`easy_install`模块，因此这个任务很简单：
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now that pip is available, we can use the `pip` module to install the Docker
    Python library:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在pip可用，我们可以使用`pip`模块来安装Docker Python库：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The penultimate task is to disable SELinux on the Vagrant box:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 倒数第二个任务是在Vagrant虚拟机上禁用SELinux：
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'By default, the version of Docker provided by Docker does not automatically
    start on CentOS/Red Hat servers, so the final task in this role is to start the
    Docker service and also make sure that it is configured to start on boot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，由Docker提供的Docker版本不会自动在CentOS/Red Hat服务器上启动，因此这个角色的最后一个任务是启动Docker服务，并确保它配置为在启动时启动：
- en: '[PRE13]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We have done this at this part of the playbook run rather than using a handler,
    as the playbook needs to interact with Docker before the playbook completes. As
    handlers are only called at the end of a playbook run, that would mean that the
    next part of our playbook would fail. Before we start to download and run containers,
    let's quickly run the playbook.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在playbook运行的这一部分完成之前完成了这个步骤，而不是使用处理程序，因为playbook需要在完成之前与Docker交互。由于处理程序只在playbook运行结束时调用，这意味着我们的playbook的下一部分将失败。在开始下载和运行容器之前，让我们快速运行playbook。
- en: Testing the playbook
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试playbook
- en: 'As we have all of the basic roles in place, we can try running the playbook;
    before doing so, we need to update the `site.yml` to include a play for our scan
    host:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经有了所有基本角色，我们可以尝试运行playbook；在这样做之前，我们需要更新`site.yml`以包括我们扫描主机的操作：
- en: '[PRE14]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once updated, we can run our playbook using the code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后，我们可以使用以下代码运行我们的playbook：
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This should give us something like the following output:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该给我们类似以下的输出：
- en: '[PRE16]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As you can see, this has performed the full Docker and WordPress installations;
    opening `http://10.20.30.41.nip.io/` will take you to the WordPress site:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这已经执行了完整的Docker和WordPress安装；打开`http://10.20.30.41.nip.io/`将带您进入WordPress站点：
- en: '![](assets/ad0c912f-5f54-4698-b797-30b830ddbcd8.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ad0c912f-5f54-4698-b797-30b830ddbcd8.png)'
- en: Now we have our WordPress site up and running, we can make a start on the roles
    that perform a scan of the site.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的WordPress站点已经运行起来了，我们可以开始执行扫描站点的角色。
- en: The WPScan role
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WPScan角色
- en: The first role we are going to create is one that runs WPScan. WPScan is a tool
    that performs a scan of a WordPress site; it tries to figure out the version of
    WordPress that is running as well as checking for any plugins that have known
    vulnerabilities. It can also try and brute force the admin user account; however,
    we are going to skip that.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要创建的第一个角色是运行WPScan的角色。WPScan是一个执行WordPress站点扫描的工具；它尝试确定正在运行的WordPress版本，并检查是否有已知漏洞的插件。它还可以尝试暴力破解管理员用户帐户；但是，我们将跳过这一步。
- en: 'As always, we can bootstrap the role using this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与往常一样，我们可以使用以下命令引导角色：
- en: '[PRE17]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once the files are in place, we need to add the following to `roles/wpscan/defaults/main.yml`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 文件放置好后，我们需要将以下内容添加到`roles/wpscan/defaults/main.yml`中：
- en: '[PRE18]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This sets the image we want to download from the Docker Hub; in this case, it
    is the official WPScan image from the WPScan team. We then set the variables we
    wish to use for the logs; you may notice that we are defining a folder and file
    name for the logs.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这设置了我们想要从Docker Hub下载的镜像；在这种情况下，它是来自WPScan团队的官方WPScan镜像。然后，我们设置了我们希望用于日志的变量；您可能注意到我们正在为日志定义一个文件夹和文件名。
- en: 'Next up, we need to add the tasks to `roles/wpscan/tasks/main.yml`, the first
    of which uses the `docker_image` module to pull a copy of the `wpscanteam/wpscan`
    image:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将任务添加到`roles/wpscan/tasks/main.yml`中，其中第一个任务使用`docker_image`模块来拉取`wpscanteam/wpscan`镜像的副本：
- en: '[PRE19]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next up, we need to create the folder where the logs will be written to our
    Vagrant box:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个文件夹，用于将日志写入我们的Vagrant虚拟机：
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The reason we are doing this is that we will be mounting this folder inside
    of the container we are going to be launching in the next task. As the logs are
    the only bits of data we want to keep from each scan, we will write them to the
    mounted folder, meaning that the logs will be available for us to copy to our
    Ansible controller once the container has exited and removed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这样做的原因是，我们将在下一个任务中启动的容器内挂载此文件夹。由于日志是我们希望保留的每次扫描中的唯一数据，因此我们将它们写入挂载的文件夹，这意味着一旦容器退出并删除，我们就可以将日志复制到我们的Ansible控制器上。
- en: 'Before we look at the next task, let''s take a quick look at the command we
    would need to run to launch the scan if we were using Docker directly on the command
    line:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们看下一个任务之前，让我们快速看一下如果我们直接在命令行上使用Docker来启动扫描，我们需要运行的命令：
- en: '[PRE21]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The first line of the command is where all of the Docker logic happens; what
    we are asking Docker to do is to launch (`run`) a container called wpscan (`--name`)
    in the foreground (`-it`), mounting `/tmp/wpscan/` from the host to `/tmp/wpscan/`
    inside the container (`-v`) using the specified image (`wpscanteam/wpscan`). Once
    the process exits, we remove the container (`--rm`).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的第一行是Docker逻辑发生的地方；我们要求Docker做的是在前台(`-it`)启动(`run`)一个名为wpscan的容器(`--name`)，将主机上的`/tmp/wpscan/`挂载到容器内的`/tmp/wpscan/`(`-v`)，使用指定的镜像(`wpscanteam/wpscan`)。一旦进程退出，我们就移除容器(`--rm`)。
- en: 'Everything on the second line is passed to the container''s default entry point,
    which in the case of the `wpscanteam/wpscan` image is `/wpscan/wpscan.rb`, meaning
    that the command we are using to run the scan within the container is actually
    this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行的所有内容都传递给容器的默认入口点，在`wpscanteam/wpscan`镜像的情况下，入口点是`/wpscan/wpscan.rb`，这意味着我们在容器内运行扫描的命令实际上是这样的：
- en: '[PRE22]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now we have an idea of the command we would run using Docker, we can look at
    how that would look in our task:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了使用Docker运行命令的想法，我们可以看看在我们的任务中它会是什么样子：
- en: '[PRE23]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The options in the task are in the same order as they were written in the Docker
    command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 任务中的选项的顺序与Docker命令中编写的顺序相同：
- en: '`detach: false` is similar to passing `-it` in that it will run the container
    in the foreground; by default the `docker_container` module runs containers in
    the background. This introduces a few challenges, which we will discuss shortly.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`detach: false`类似于传递`-it`，它将在前台运行容器；默认情况下，`docker_container`模块在后台运行容器。这引入了一些挑战，我们很快会讨论。'
- en: '`auto_remove: true` is the same as `--rm`.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto_remove: true`与`--rm`相同。'
- en: '`name: "wpscan"` is exactly the same as running `--name wpscan`.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name: "wpscan"`与运行`--name wpscan`完全相同。'
- en: '`volumes:"{{ log.remote_folder }}:{{ log.remote_folder }}"` is the same as
    what we would pass using the `-v` flag in Docker.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`volumes:"{{ log.remote_folder }}:{{ log.remote_folder }}"`与在Docker中使用`-v`标志传递的内容相同。'
- en: '`image: "{{ image }}"` is the equivalent of just passing the image name, for
    example, `wpscanteam/wpscan`.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image: "{{ image }}"`相当于只传递镜像名称，例如`wpscanteam/wpscan`。'
- en: Finally, `command` contains everything we want to pass to the entry-point; as
    you can see we have passed a few dynamic variables here.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，`command`包含了我们想要传递给入口点的所有内容；正如你所看到的，我们在这里传递了一些动态变量。
- en: As mentioned, the `docker_container` module by default runs the containers in
    the background; typically that would be great in most cases; however, as we are
    just running the container as a one-off job to perform our scan, then we need
    to run it in the foreground.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，默认情况下，`docker_container`模块在后台运行容器；在大多数情况下，这通常是很好的；然而，由于我们只是将容器作为一次性任务来执行我们的扫描，所以我们需要在前台运行它。
- en: Doing this will actually cause an error as we are instructing Ansible to remain
    attached to a container, which then terminates and is removed once the scan process
    completes. To get around this, we are registering the results of the task and,
    rather than using `ignore_errors`, we are telling the task to fail when ( `failed_when`)
    the return code (`rc`) is equal to `0` or equal or more than `2`, as our task
    should always have a return code of `1`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做实际上会导致错误，因为我们指示Ansible保持连接到一个容器，然后一旦扫描过程完成，容器就会终止并被移除。为了解决这个问题，我们正在注册任务的结果，而不是使用`ignore_errors`，我们告诉任务在返回代码(`rc`)等于`0`或等于或大于`2`时失败(`failed_when`)，因为我们的任务应该始终有一个返回代码为`1`。
- en: So why not just let the container run in the background? As the next task copies
    the log file from the Vagrant box to the Ansible Controller, if we were to let
    the container run in the background, Ansible would immediately move on to the
    next task and copy a partly written file.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 那么为什么不让容器在后台运行呢？因为下一个任务会将日志文件从Vagrant框复制到Ansible控制器，如果我们让容器在后台运行，Ansible将立即转移到下一个任务并复制一个部分写入的文件。
- en: 'Attaching to the container and waiting for it to exit means that we are waiting
    for the scan to complete before progressing to the next task, which looks like
    this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到容器并等待其退出意味着我们正在等待扫描完成，然后再进行下一个任务，看起来像这样：
- en: '[PRE24]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now we have our tasks written, we can try running our role.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了我们的任务，我们可以尝试运行我们的角色。
- en: Running a WPScan
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行WPScan
- en: 'To run a scan, update the `site.yml` file to look like the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行扫描，更新`site.yml`文件，使其看起来像下面的代码：
- en: '[PRE25]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then run the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行以下命令：
- en: '[PRE27]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This should give you the following results (the screenshot shows just the scan
    rather than the full playbook run, which you should see):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该给你以下结果（截图只显示了扫描而不是完整的playbook运行，你应该看到）：
- en: '![](assets/ba811144-905c-42ef-8c2d-89fc0c83b686.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ba811144-905c-42ef-8c2d-89fc0c83b686.png)'
- en: 'Also, you should find a log file in the generated folder; this contains the
    results of the WPScan run:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你应该在生成的文件夹中找到一个日志文件；其中包含了WPScan运行的结果：
- en: '![](assets/7654170f-9851-4ca8-b3e1-9f829b5f8bef.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7654170f-9851-4ca8-b3e1-9f829b5f8bef.png)'
- en: As you can see, there is quite a bit of information; however, since we deployed
    our WordPress installation from scratch, we should have a clean bill of health.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这里有相当多的信息；然而，由于我们是从头开始部署WordPress安装，我们应该有一个干净的健康状况。
- en: The OWASP ZAP role
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OWASP ZAP角色
- en: 'Now that we have covered the basics of how to run a container using Ansible
    in the WPScan role, creating the role that runs OWASP ZAP should be straightforward;
    we just use this command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经介绍了如何在WPScan角色中使用Ansible运行容器的基础知识，那么创建运行OWASP ZAP的角色应该很简单；我们只需使用这个命令：
- en: '[PRE28]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**Open Web Application Security Project Zed Attack Proxy** or **OWASP ZAP**,
    to give it its full name, is an open source web application security scanner.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**Open Web Application Security Project Zed Attack Proxy**或**OWASP ZAP**，是一个开源的Web应用安全扫描器。'
- en: 'The defaults for the role in `roles/zap/defaults/main.yml` should contain this
    code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`roles/zap/defaults/main.yml`中角色的默认值应包含此代码：'
- en: '[PRE29]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: As you can see, we are using the `owasp/zap2docker-stable` image and also we
    are using the `/tmp/zap/` folder to store the report files in on the Vagrant box.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们使用`owasp/zap2docker-stable`镜像，同时我们还在Vagrant框中使用`/tmp/zap/`文件夹来存储报告文件。
- en: 'Moving on to the tasks in `roles/zap/tasks/main.yml`, we are pulling the image
    and creating the folder as we did in the WPScan role:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 继续进行`roles/zap/tasks/main.yml`中的任务，我们正在拉取镜像并创建文件夹，就像我们在WPScan角色中所做的那样：
- en: '[PRE30]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s take a look at the `docker` command we would have run to figure out
    what we needed to put in the next task:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们将要运行的`docker`命令，以找出我们需要在下一个任务中放入什么：
- en: '[PRE31]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As you can see, the command is using all of the options we used before; there
    are differences in where we are mounting our folder within the container, as OWASP
    ZAP is expecting us to write any files we want to save to `/zap/wrk/`. This means
    we do not have to provide a full filesystem path when giving the report name as
    the application will write to `/zap/wrk/` by default.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，该命令使用了我们之前使用的所有选项；在我们将文件夹挂载到容器中的位置上有所不同，因为OWASP ZAP希望我们将要保存的任何文件写入`/zap/wrk/`。这意味着当给出报告名称时，我们不必提供完整的文件系统路径，因为应用程序将默认写入`/zap/wrk/`。
- en: 'This means that the task which launches the container should look like the
    following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着启动容器的任务应该如下代码所示：
- en: '[PRE32]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We are then downloading the report using the following task:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用以下任务下载报告：
- en: '[PRE33]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now we have our tasks in place, we can run the role.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安排好了任务，我们可以运行该角色。
- en: Running OWASP ZAP
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行OWASP ZAP
- en: 'To run the scan, we simply need to append the role to the end of our `site.yml`
    file. Once added, run the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行扫描，我们只需将该角色附加到我们的`site.yml`文件的末尾。添加后，运行以下命令：
- en: '[PRE34]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This will run through the playbook; an abridged copy of the output can be found
    here:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将运行playbook；输出的摘要副本可以在此处找到：
- en: '![](assets/6c6c75df-7b91-46c2-b011-059277d5a7eb.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6c6c75df-7b91-46c2-b011-059277d5a7eb.png)'
- en: 'This will then copy an HTML file to the generated folder; the file should look
    similar to the following:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将HTML文件复制到生成的文件夹中；文件应该类似于以下内容：
- en: '![](assets/1bdfb5fa-4590-4aad-b525-223bd83caf0b.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1bdfb5fa-4590-4aad-b525-223bd83caf0b.png)'
- en: 'Now you can remove the Vagrant boxes using this command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用以下命令删除Vagrant框：
- en: '[PRE35]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Then relaunch the boxes and run through the playbook in its entirety.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后重新启动框并完整运行playbook。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have looked at using Ansible in combination with Docker
    to launch two different tools that performed an external vulnerability scan against
    the WordPress installation we launched using an Ansible playbook. This shows how
    we can launch some quite complex tools without having to worry about writing a
    playbook to install, configure, and manage them directly on our hosts.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经看到如何将Ansible与Docker结合使用，以启动两种不同的工具，对我们使用Ansible playbook启动的WordPress安装进行外部漏洞扫描。这显示了我们如何可以启动一些相当复杂的工具，而无需担心直接在我们的主机上编写playbook来安装、配置和管理它们。
- en: In the next chapter, we are going to move off the command line and look at the
    two web-based interfaces for Ansible provided by Red Hat.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将离开命令行，看一下由红帽提供的Ansible的两个基于Web的界面。
- en: Questions
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why are we using Docker rather than installing WPScan and OWASP ZAP directly
    on our Vagrant box?
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们使用Docker而不是直接在我们的Vagrant框上安装WPScan和OWASP ZAP？
- en: 'True or false: `pip` is installed on our Vagrant box by default.'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：`pip`默认安装在我们的Vagrant框中。
- en: What is the name of the Python module we need to install for the Ansible Docker
    modules to function?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要安装哪个Python模块才能使Ansible Docker模块正常运行的模块名称是什么？
- en: Update the `Vagrantfile` and `production` files to launch a second WordPress
    Vagrant box and scan them both.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`Vagrantfile`和`production`文件，以启动第二个WordPress Vagrant框并扫描它们。
- en: Further reading
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information on the tools we have used in this chapter, please see
    the following links:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 有关本章中使用的工具的更多信息，请参阅以下链接：
- en: '**Docker**: [https://docker.com](https://docker.com)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker**：[https://docker.com](https://docker.com)'
- en: '**WPScan**: [https://wpscan.org](https://wpscan.org)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WPScan**：[https://wpscan.org](https://wpscan.org)'
- en: '**OWASP ZAP**: [https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OWASP ZAP**：[https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project)'
