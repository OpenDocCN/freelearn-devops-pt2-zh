- en: Targeting Multiple Distributions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 针对多个发行版
- en: As mentioned at the end of the last chapter, so far we have been targeting a
    single operating system with our playbook. While this is great if we are only
    going to run our playbook against CentOS 7 hosts, that might not always be the
    case.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如上一章末尾提到的，到目前为止，我们一直在针对单个操作系统使用我们的playbook。如果我们只打算针对CentOS 7主机运行我们的playbook，那是很好的，但情况可能并非总是如此。
- en: In this chapter, we are going to look at adapting our WordPress installation
    playbook to target an Ubuntu 17.04 server instance.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看如何调整我们的WordPress安装playbook以针对Ubuntu 17.04服务器实例。
- en: 'In this chapter, we will:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Look at and implement core modules that are operating system-dependent
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看并实施操作系统相关的核心模块
- en: Discuss and apply best practices for targeting multiple distributions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论并应用针对多个发行版的最佳实践
- en: See how we can target multiple hosts with an Ansible inventory
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看看如何使用Ansible清单来针对多个主机
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we are going to be launching two Vagrant boxes so you will
    need Vagrant installed and access to the internet; the boxes themselves are around
    a 300 to 500 MB download each.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将启动两个Vagrant盒子，所以你需要安装Vagrant并且能够访问互联网；这些盒子本身大约每个下载300到500MB。
- en: You will need to make a copy of the `lemp` folder from the last chapter and
    call it `lemp-multi` if you are going to follow along, adapting the roles as we
    work through them. If you are not following along, you can find a complete version
    of `lemp-multi` at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter06/lemp-multi](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter06/lemp-multi).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你要跟着做，适应我们的角色，你需要从上一章复制`lemp`文件夹并将其命名为`lemp-multi`。如果你不跟着做，你可以在[https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter06/lemp-multi](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter06/lemp-multi)找到`lemp-multi`的完整版本。
- en: Launching multiple Vagrant boxes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动多个Vagrant盒子
- en: 'Before we start to look at the changes we need to make to our Ansible playbook,
    we should look at how we are going to launch two Vagrant boxes running different
    operating systems side by side. It is possible to launch two Vagrant boxes from
    a single `Vagrantfile`; we will be using the following one:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始查看我们需要对Ansible playbook进行的更改之前，我们应该看看我们将如何同时启动两个运行不同操作系统的Vagrant盒子。可以从单个`Vagrantfile`启动两个Vagrant盒子；我们将使用以下一个：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, we are defining two different boxes, one called `centos` and
    the other `ubuntu`, you should replace the `Vagrantfile` in the `lemp` folder
    you copied earlier.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们定义了两个不同的盒子，一个叫做`centos`，另一个叫做`ubuntu`，你应该用之前复制的`lemp`文件夹中的`Vagrantfile`替换它。
- en: 'We can launch the two machines using just one command; to use VirtualBox, we
    should run:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一个命令启动两台机器；要使用VirtualBox，我们应该运行：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Or to use VMware, we can run:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 或者要使用VMware，我们可以运行：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see from the Terminal output here, this launched the two boxes:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从这里的终端输出中看到的，这启动了两个盒子：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once the boxes are up and running, you can SSH to them using the machine name:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦盒子启动并运行，你可以使用机器名称SSH连接到它们：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now that we have our two boxes running on two different operating systems,
    we can discuss the changes we need to make to our playbook. First of all, let''s
    look at how the changes to the `Vagrantfile` will affect our host inventory file,
    as you can see from this file:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两个运行在两个不同操作系统上的盒子，我们可以讨论我们需要对playbook进行的更改。首先，让我们看看对`Vagrantfile`的更改将如何影响我们的主机清单文件，正如你可以从这个文件中看到的那样：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We now have two hosts, one called `centos` and the other `ubuntu`, and we are
    putting them in a group called `wordpress` where we are setting some common variables.
    You should update your `production` file, as we will be using it in the next section.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两个主机，一个叫做`centos`，另一个叫做`ubuntu`，我们将它们放在一个名为`wordpress`的组中，我们在那里设置一些公共变量。你应该更新你的`production`文件，因为我们将在下一节中使用它。
- en: Multi-operating system considerations
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多操作系统考虑
- en: 'Looking at each of the core Ansible modules used in the three roles, `stack-install`,
    `stack-config`, and `wordpress`, we are using a few that will not work on our
    newly introduced Ubuntu box. Let''s quickly work through each one and see what
    we need to take into account when targeting two very different operating systems:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 查看在三个角色`stack-install`、`stack-config`和`wordpress`中使用的每个核心Ansible模块，我们使用了一些在我们新引入的Ubuntu盒子上不起作用的模块。让我们快速地逐个进行，并看看在针对两个非常不同的操作系统时需要考虑什么：
- en: '`yum`: The `yum` module is the package manager used for Red Hat-based machines
    such as CentOS, as Ubuntu is based on Debian, which uses `apt`. We will need to
    break out the parts of our playbook that uses the `yum` module to use the `apt`
    module instead.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yum`：`yum`模块是Red Hat系机器（如CentOS）使用的包管理器，而Ubuntu基于Debian，使用`apt`。我们需要拆分出使用`yum`模块的playbook的部分，以使用`apt`模块代替。'
- en: '`yum_repository`: As mentioned, we will need to use an `apt` equivalent module,
    which is `apt_repository`.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`yum_repository`：如前所述，我们将需要使用一个`apt`等效模块，即`apt_repository`。'
- en: '`user`: The `user` module works pretty much the same on both operating systems,
    as we are not giving our user escalated privileges. There aren''t any special
    considerations we need to make, other than double-checking the correct group is
    available.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user`：`user`模块在两个操作系统上基本上是一样的，因为我们没有给我们的用户提升的特权。除了确保正确的组可用之外，我们没有任何特殊的考虑。'
- en: '`template`, `file`, `copy`, and `lineinfile`: All four of these modules will
    work as expected; the only consideration we need to make is checking that we are
    copying the files to the correct location on the boxes.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template`、`file`、`copy`和`lineinfile`：这四个模块都将按预期工作；我们需要考虑的唯一问题是检查我们是否将文件复制到了盒子上的正确位置。'
- en: '`service`: The service module should be the same on both operating systems,
    so we should be fine.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service`：服务模块在两个操作系统上应该是一样的，所以我们应该没问题。'
- en: '`mysql_user` and `mysql_db`: As you would expect, once MySQL is installed and
    started, both of these will work across both operating systems.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mysql_user`和`mysql_db`：正如你所期望的，一旦MySQL安装并启动，这两个都将在两个操作系统上工作。'
- en: '`selinux_permissive`: SELinux is primarily for operating systems based on Red
    Hat, so we will need to find an alternative.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selinux_permissive`：SELinux主要用于基于Red Hat的操作系统，因此我们需要找到替代方案。'
- en: '`get_url`, `stat`, `shell`, and `set_fact`: These should all work consistently
    across both of our target operating systems.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_url`、`stat`、`shell`和`set_fact`：这些应该在我们的目标操作系统上都能一致工作。'
- en: Now we know which parts of our existing playbook we need to review when running
    on Ubuntu versus running CentOS, we can make a start on making our roles work
    on both of the operating systems.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了在Ubuntu上运行与在CentOS上运行时需要审查现有playbook的哪些部分，我们可以开始让我们的角色在这两个操作系统上都能工作。
- en: Adapting the roles
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整角色
- en: So how do we go about building the logic into our roles to only execute certain
    parts of the roles on different operating systems, and also as we know that package
    names will be different? How do we define different sets of variables per operating
    system?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何在我们的角色中构建逻辑，只在不同的操作系统上执行角色的某些部分，而且我们也知道软件包名称会不同？我们如何为每个操作系统定义不同的变量集？
- en: Operating system family
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作系统家族
- en: 'We have looked at the `setup` module in previous chapters; this is the module
    that gathers facts about our target hosts. One of these facts is `ansible_os_family`;
    this tells us the type of operating system we are running. Let''s check on both
    of our boxes:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的章节中已经看过`setup`模块；这是一个收集有关我们目标主机的事实的模块。其中一个事实就是`ansible_os_family`；这告诉我们我们正在运行的操作系统类型。让我们在我们的两个主机上检查一下：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see from the following Terminal output, the CentOS box returns Red
    Hat, which is expected. However, the Ubuntu box does not return any information:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从以下终端输出中所看到的，CentOS主机返回了Red Hat，这是预期的。然而，Ubuntu主机没有返回任何信息：
- en: '![](assets/7c8406e2-020d-43e1-a04c-7b7619cad888.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7c8406e2-020d-43e1-a04c-7b7619cad888.png)'
- en: 'Let''s take a look at why this is. First of all, we can rerun the command,
    but this time minus the `grep` so we can see the full output:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看为什么会这样。首先，我们可以重新运行命令，但这次去掉`grep`，这样我们就可以看到完整的输出：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This should give you something like the following results:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该给你类似以下的结果：
- en: '![](assets/de2eeb93-5e27-4e48-8cee-4b1d12533a27.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/de2eeb93-5e27-4e48-8cee-4b1d12533a27.png)'
- en: 'Oh, we are getting an error. Why is it reporting there is no Python installed?
    Running the following will SSH into the box:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，我们出现了一个错误。为什么它报告没有安装Python？运行以下命令将SSH到该服务器：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once logged in using SSH, running `which python` will show us the path to the
    Python binary. As you can see, there isn''t one installed as we get no path returned.
    So what about Python 3? Running `which python3` does return a binary:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SSH登录后，运行`which python`将显示Python二进制文件的路径。正如你所看到的，由于没有返回路径，所以没有安装。那Python 3呢？运行`which
    python3`确实返回了一个二进制文件：
- en: '![](assets/86d18150-7b81-4a08-83eb-215806581388.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/86d18150-7b81-4a08-83eb-215806581388.png)'
- en: Let's close our SSH session by running `exit`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行`exit`来关闭我们的SSH会话。
- en: What should we do about this? As we are running a version of Ansible that is
    later than 2.2, we can tell Ansible to use `/usr/bin/python3` rather than its
    default of `/usr/bin/python`. To do this, we need to update our host inventory
    file so that just the Ubuntu host gets the `ansible_python_interpreter` variable
    added along with the updated path.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该怎么办？由于我们运行的Ansible版本晚于2.2，我们可以告诉Ansible使用`/usr/bin/python3`而不是默认的`/usr/bin/python`。为此，我们需要更新我们的主机清单文件，以便只有Ubuntu主机添加`ansible_python_interpreter`变量以及更新后的路径。
- en: 'There are a few ways to achieve this; however, for now, let''s just update
    the following line in the `production` host inventory file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以实现这一点；然而，现在，让我们只更新`production`主机清单文件中的以下行：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So it reads as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，它的读法如下：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once updated, we should be able to run the following command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后，我们应该能够运行以下命令：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows an output for the preceding command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](assets/f74756fe-258e-4e9b-b72b-ec3925f3ca78.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f74756fe-258e-4e9b-b72b-ec3925f3ca78.png)'
- en: As you can see, we are targeting the host group of `wordpress`, which contains
    both of our boxes in it, and, as expected, we get `RedHat` for the CentOS box
    and the Ubuntu box is now returning `Debian`. Now that we have a way of identifying
    which operating system is in use on each host, we can make a start adapting the
    roles.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们正在针对`wordpress`主机组，其中包含我们的两个主机，并且预期地，CentOS主机返回`RedHat`，而Ubuntu主机现在返回`Debian`。现在我们已经有了一种识别每个主机上使用的操作系统的方法，我们可以开始调整角色。
- en: The stack-install role
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: stack-install角色
- en: As you may have already guessed the bulk of this role, it is only tasks that
    call `yum` related modules and we have already mentioned that this is going to
    be changed.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经猜到的，这个角色的大部分内容只是调用`yum`相关模块的任务，我们已经提到这将会改变。
- en: The first part of the role we are going to look at is the content of `roles/stack-install/tasks/main.yml`.
    At the moment, this file contains the tasks that install our desired repositories
    and packages using the `yum` and `yum_repository` modules.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要查看的角色的第一部分是`roles/stack-install/tasks/main.yml`文件的内容。目前，该文件包含使用`yum`和`yum_repository`模块安装我们期望的仓库和软件包的任务。
- en: 'We need to update the file, but first, take the existing content and save it
    as a file called `roles/stack-install/tasks/install-centos.yml`. Once you have
    the copied the content, update `roles/stack-install/tasks/main.yml` so it has
    this content:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更新文件，但首先，将现有内容另存为名为`roles/stack-install/tasks/install-centos.yml`的文件。一旦你复制了内容，更新`roles/stack-install/tasks/main.yml`，使其包含这些内容：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, we are are using the `ansible_os_family` variable to include
    variables and also different tasks.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们正在使用`ansible_os_family`变量来包含变量和不同的任务。
- en: 'The task will include one of the following files, depending on which operating
    system the task is being executed on:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 该任务将包括以下文件之一，具体取决于任务在哪个操作系统上执行：
- en: '`roles/stack-install/vars/RedHat.yml`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`roles/stack-install/vars/RedHat.yml`'
- en: '`roles/stack-install/vars/Debian.yml`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`roles/stack-install/vars/Debian.yml`'
- en: 'It will then include one of the following two files, which contain the tasks
    for the operating system:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它将包含以下两个文件中的一个，这些文件包含了操作系统的任务：
- en: '`install-centos.yml`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install-centos.yml`'
- en: '`install-ubuntu.yml`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install-ubuntu.yml`'
- en: We already know that `install-centos.yml` contains old content of our `main.yml`
    file; as the package name and repository URLs will also be changing, we should
    move the content of `roles/stack-install/default/main.yml` to `roles/stack-install/vars/RedHat.yml`,
    leaving `roles/stack-install/default/main.yml` empty.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道`install-centos.yml`包含了我们的`main.yml`文件的旧内容；由于软件包名称和仓库URL也将发生变化，我们应该将`roles/stack-install/default/main.yml`的内容移动到`roles/stack-install/vars/RedHat.yml`，并将`roles/stack-install/default/main.yml`留空。
- en: 'Now that we have the CentOS portion of our role defined, we can look at the
    Ubuntu parts, starting with the content of `roles/stack-install/vars/Debian.yml`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了角色的CentOS部分，我们可以看一下Ubuntu部分，从`roles/stack-install/vars/Debian.yml`的内容开始：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, while we are keeping the `system_packages`, `stack_packages`,
    and `extra_packages` variables, we have different package names in there. We have
    a similar situation with `repo_packages`, where we have updated URLs, as the CentOS
    repositories will not work with Ubuntu. Finally, we have introduced two new variables,
    `repo_keys`, and `repo_keys_urls`; we will look at what these are used for shortly.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，虽然我们保留了`system_packages`，`stack_packages`和`extra_packages`变量，但其中包含了不同的软件包名称。在`repo_packages`中也有类似的情况，我们更新了URL，因为CentOS仓库将无法在Ubuntu上使用。最后，我们引入了两个新变量，`repo_keys`和`repo_keys_urls`；我们很快将看到这些变量的用途。
- en: The final file we need to cover for our new role is `roles/stack-install/tasks/install-ubuntu.yml`.
    Like `install-centos.yml`, this contains the tasks to add the additional repositories
    we need and install the packages.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要处理的最后一个文件是`roles/stack-install/tasks/install-ubuntu.yml`。和`install-centos.yml`一样，这个文件包含了我们需要添加的额外仓库和安装软件包的任务。
- en: 'First of all, we need to install a few of the tools we need to continue with
    the rest of the tasks; these have been defined in the `system_packages` variable,
    so we simply have to add the following task:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装一些我们继续进行其余任务所需的工具；这些工具已经在`system_packages`变量中定义，所以我们只需要添加以下任务：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now that we have basic prerequisites installed, we can add the keys for the
    repositories we will be adding:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了基本的先决条件，我们可以为我们将要添加的仓库添加密钥：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The first task adds keys from the official Ubuntu key store, and the second
    task downloads the keys from a URL. In our case, we are adding one key for the
    official MariaDB repository and one for the NGINX mainline repository; without
    these keys, we would not be able to add the repositories without generating an
    error about them not being trusted.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个任务从官方Ubuntu密钥存储中添加密钥，第二个任务从URL下载密钥。在我们的情况下，我们为官方MariaDB仓库添加了一个密钥，为NGINX主线仓库添加了一个密钥；如果没有这些密钥，我们将无法添加仓库，会出现关于不受信任的错误。
- en: 'The task for adding repositories looks like the following; it cycles through
    the repository URLs in the `repo_packages` variable:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 添加仓库的任务如下；它循环遍历`repo_packages`变量中的仓库URL：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The final part of the playbook installs the remaining packages:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: playbook的最后一部分安装了剩余的软件包：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now we have updated our `stack-install` role, we need to do the same for the
    `stack-config` one.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经更新了`stack-install`角色，我们需要对`stack-config`角色做同样的操作。
- en: The stack-config role
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: stack-config角色
- en: 'A lot of the modules we are using in this role will work fine on both of our
    target operating systems, so in this role, we are tweaking things like paths to
    configuration files and so on. Rather than list out the entire content of the
    `roles/stack-config/tasks/main.yml` file, I will just highlight the changes that
    need to be made, starting with the following task that should be right at the
    top of the file:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个角色中使用的大部分模块在我们的目标操作系统上都能正常工作，所以在这个角色中，我们只需要调整配置文件的路径等内容。我不会列出整个`roles/stack-config/tasks/main.yml`文件的内容，我只会强调需要进行的更改，从文件顶部开始：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will load in the variables that contain the paths we need to use later
    in the role; the content of `roles/stack-config/vars/RedHat.yml` is:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载包含我们稍后在角色中需要使用的路径的变量；`roles/stack-config/vars/RedHat.yml`的内容是：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'And the content of `roles/stack-config/vars/Debian.yml` is:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`roles/stack-config/vars/Debian.yml`的内容是：'
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As you can see, most of the changes we need to make are around the location
    of the PHP configuration files. Before we get those, we need to create the WordPress
    user back in our  `roles/stack-config/tasks/main.yml` file. Because PHP-FPM runs
    under a different group by default on Ubuntu, there is no PHP-FPM group created,
    so let''s create one, making sure we add these tasks before the `add the wordpress
    user` task:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们需要进行的大部分更改是关于PHP配置文件的位置。在获取这些文件之前，我们需要在我们的`roles/stack-config/tasks/main.yml`文件中重新创建WordPress用户。因为在Ubuntu上，PHP-FPM默认运行在不同的组下，所以没有创建PHP-FPM组，让我们创建一个，确保在`add
    the wordpress user`任务之前添加这些任务：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next up, there is no `/var/www/` folder created on Ubuntu, so we will need
    to create the folder:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在Ubuntu上没有创建`/var/www/`文件夹，所以我们需要创建这个文件夹：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Both the group and folder are already there on the CentOS box, so these tasks
    should just say `ok`. Once they have been created, the user will be created without
    errors on both boxes with no changes to the `add the wordpress user` task.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS服务器上，组和文件夹已经存在，所以这些任务应该只显示`ok`。一旦它们被创建，用户将在两个服务器上都没有错误地创建，而且`add the
    wordpress user`任务也没有变化。
- en: 'All of the tasks that deploy the NGINX configuration will work without any
    changes, so we can move on to the PHP configuration:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 所有部署NGINX配置的任务都可以在不进行任何更改的情况下工作，所以我们可以继续进行PHP配置：
- en: '[PRE23]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see, both of these tasks have been updated to include the paths relevant
    to the operating system the playbook is currently targeting.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这两个任务都已经更新，包含了当前playbook目标操作系统相关的路径。
- en: 'The `restart php-fpm` handler has also been updated as the PHP-FPM service
    on the two operating systems has a different name; this task should replace the
    existing one in `roles/stack-config/handlers/main.yml`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`restart php-fpm` 处理程序也已更新，因为两个操作系统上的PHP-FPM服务具有不同的名称；此任务应替换`roles/stack-config/handlers/main.yml`中的现有任务：'
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Likewise, back in `roles/stack-config/tasks/main.yml` the task that starts
    PHP-FPM should be updated as per this task:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在`roles/stack-config/tasks/main.yml`中，启动PHP-FPM的任务应根据此任务进行更新：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The next two changes are to make the following tasks only run on CentOS boxes:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个更改是使以下任务仅在CentOS框上运行：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This is because the default configuration on Ubuntu for MariaDB does not contain
    `bind-address`, so we are skipping it; the next and final task is as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为Ubuntu上MariaDB的默认配置不包含`bind-address`，所以我们跳过它；下一个和最后一个任务如下：
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We are skipping this on the Ubuntu box because SELinux is not installed and
    does not work with Ubuntu.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Ubuntu框上跳过这一步，因为SELinux未安装并且与Ubuntu不兼容。
- en: The wordpress role
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: wordpress角色
- en: 'There a few small changes to the `wordpress` role; the first change is an update
    to `roles/wordpress/defaults/main.yml`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`wordpress` 角色有一些小的更改；第一个更改是更新`roles/wordpress/defaults/main.yml`：'
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As you can see, we have updated the `wordpress.domain` to include the `wordpress_domain`
    variable, and `wordpress.title` now includes the `os_family` variable; we are
    setting both of these in the `roles/wordpress/tasks/main.yml` file by adding the
    following task:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已将`wordpress.domain`更新为包含`wordpress_domain`变量，而`wordpress.title`现在包含`os_family`变量；我们通过在`roles/wordpress/tasks/main.yml`文件中添加以下任务来设置这两个变量：
- en: '[PRE29]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The reason we are doing this here is that Vagrant does not correctly set the
    hostname of our Ubuntu box to the fully qualified domain name, such as `192.168.50.7.nip.io`,
    so we are using the host we are SSHing to, which is defined in the `production`
    inventory hosts file. The remainder of this role remains as is.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里这样做的原因是Vagrant没有正确设置我们的Ubuntu框的主机名为完全合格的域名，例如`192.168.50.7.nip.io`，因此我们使用在`production`清单主机文件中定义的我们正在SSH连接的主机。这个角色的其余部分保持不变。
- en: Running the playbook
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行playbook
- en: 'There are no changes to our `site.yml` file, meaning that we just need to run
    the following command to start the playbook run:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`site.yml`文件没有任何更改，这意味着我们只需要运行以下命令来启动playbook运行：
- en: '[PRE30]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This will run through the playbook, giving the following output; please note
    that I have trimmed a few parts of the playbook output:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通过playbook运行，给出以下输出；请注意，我已经删除了playbook输出的一些部分：
- en: '[PRE31]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Once the playbook has finished, you should be able to access `http://192.168.50.6.nip.io/`
    in your browser, and you should see WordPress showing that it is installed on
    a Red Hat-based operating system:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦playbook完成，您应该能够在浏览器中访问`http://192.168.50.6.nip.io/`，并且您应该看到WordPress显示已安装在基于Red
    Hat的操作系统上：
- en: '![](assets/0e2f891d-2df3-4a23-847b-6f7c10c73198.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0e2f891d-2df3-4a23-847b-6f7c10c73198.png)'
- en: 'Going to `http://192.168.50.7.nip.io/` will show the same theme, but it should
    state that it is running in a Debian-based operating system, as in this screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 访问`http://192.168.50.7.nip.io/`将显示相同的主题，但它应该说明它正在运行Debian-based操作系统，就像这个截图中一样：
- en: '![](assets/f299f262-5804-43ee-bfe8-7df80942b997.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f299f262-5804-43ee-bfe8-7df80942b997.png)'
- en: 'You can try rerunning your playbook to see what results are returned, and also
    you can remove the Vagrant boxes by running:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试重新运行playbook，以查看返回的结果，并且您还可以通过运行以下命令删除Vagrant框：
- en: '[PRE32]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You will be asked if you want to remove each machine one at a time; just answer
    `yes` to each of the two prompts.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被问及是否要逐个删除每台机器；只需对两个提示都回答“是”。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have adapted our WordPress installation playbook to target
    multiple operating systems. We did this by using Ansible's inbuilt auditing module
    to determine which operating system the playbook is running against and running
    just the tasks that will work on the target operating system.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经调整了我们的WordPress安装playbook，以针对多个操作系统。我们通过使用Ansible的内置审计模块来确定playbook正在针对哪个操作系统，并仅运行适用于目标操作系统的任务来实现这一点。
- en: In the next chapter, we are going to make a start at looking at some core Ansible
    modules that deal with networking.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始查看一些处理网络的核心Ansible模块。
- en: Questions
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'True or false: We need to double-check every task in our playbook so it will
    work on both operating systems.'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：我们需要仔细检查playbook中的每个任务，以确保它在两个操作系统上都能正常工作。
- en: Which configuration option allows us to define the path to Python, Ansible will
    use?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个配置选项允许我们定义Python的路径，Ansible将使用？
- en: Explain why we need to make changes to the tasks that configured and interact
    with the PHP-FPM service.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释为什么我们需要对配置和与PHP-FPM服务交互的任务进行更改。
- en: 'True or false: The package names for each of the operating systems correspond
    exactly.'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：每个操作系统的软件包名称完全对应。
- en: Update the playbook so that a different theme is installed on each of the different
    hosts.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新playbook，以便在每个不同的主机上安装不同的主题。
- en: Further reading
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: You can find out more about the Ubuntu operating system at [https://www.ubuntu.com](https://www.ubuntu.com).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.ubuntu.com](https://www.ubuntu.com)找到有关Ubuntu操作系统的更多信息。
