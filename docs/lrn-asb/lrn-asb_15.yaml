- en: Introducing Ansible Tower and Ansible AWX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Ansible Tower和Ansible AWX
- en: In this chapter, we are going to be looking at the two graphical interfaces
    for Ansible, the commercial Ansible Tower and the open source Ansible AWX. We
    will discuss how to install them, what the differences are, and also why you would
    need to use them. After all, we are now 15 chapters into our journey with Ansible
    and have yet to need to use a graphical interface.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究Ansible的两个图形界面，商业版的Ansible Tower和开源版的Ansible AWX。我们将讨论如何安装它们，它们的区别，以及为什么您需要使用它们。毕竟，我们现在已经进行了15章的Ansible之旅，但还没有需要使用图形界面。
- en: 'By the end of this chapter, we will have:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将有：
- en: Installed Ansible Tower and Ansible AWX
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了Ansible Tower和Ansible AWX
- en: Configured both tools
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置了两个工具
- en: Deployed our highly available cloud application using Ansible Tower
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible Tower部署了我们的高可用云应用
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We will be looking at using Ansible Tower and Ansible AWX locally using a Vagrant
    box; we are also going to be using the playbook we covered in [Chapter 10](56e8175f-d1a8-4b63-ad3f-fe94ff55135e.xhtml),
    *Highly Available Cloud Deployments*. The final playbooks can be found in the
    GitHub repository at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter15](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter15).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Vagrant box在本地查看使用Ansible Tower和Ansible AWX；我们还将使用我们在[第10章](56e8175f-d1a8-4b63-ad3f-fe94ff55135e.xhtml)中涵盖的playbook，*高可用云部署*。最终的playbook可以在GitHub存储库[https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter15](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter15)中找到。
- en: Web-based Ansible
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于Web的Ansible
- en: Before we look at installing the tools, we should first take the time to discuss
    why we need them and also the differences between them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看安装工具之前，我们应该先花时间讨论为什么我们需要它们以及它们之间的区别。
- en: I am sure you are starting to notice a common thread between all of the playbooks
    we have covered so far—where possible, we are allowing the roles we are running
    to use as many parameters as possible. This makes it easy for us to change the
    output of the playbook run without having to rewrite or edit the roles directly.
    For this reason, it should also be easy for us to start using one of the two web-based
    tools provided by Red Hat for managing your Ansible deployments.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信您已经开始注意到我们迄今为止所涵盖的所有playbook之间的共同点——在可能的情况下，我们允许我们运行的角色使用尽可能多的参数。这使得我们可以轻松地更改playbook运行的输出，而无需直接重写或编辑角色。因此，我们也应该很容易开始使用Red
    Hat提供的两个基于Web的工具之一来管理您的Ansible部署。
- en: Ansible Tower is a commercially licensed, web-based graphical interface for
    Ansible. As already mentioned, you might be struggling to see the value in this.
    Imagine being able to hook Ansible up to your company's active directory and have
    users, such as developers, use Ansible Tower to deploy their own environments
    based on your playbooks, providing a controlled way for you to maintain consistency
    across your estate while allowing self-service.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower是一个商业许可的基于Web的图形界面，用于Ansible。正如前面提到的，您可能很难看到其中的价值。想象一下，将Ansible连接到公司的活动目录，并让开发人员等用户使用Ansible
    Tower根据您的playbook部署自己的环境，为您提供一种受控的方式来在整个系统中保持一致性，同时允许自助服务。
- en: 'When Red Hat announced its acquisition of Ansible in October 2015, one of the
    questions in the FAQ it published on the day of the announcement was: *Will Red
    Hat open source all of Ansible''s technology?* The reason the question was asked
    was that with other technologies Red Hat has acquired over the years, it has open
    sourced almost all aspects of them to not only invite community contributions,
    but to test and build new features, which eventually made their way into Red Hat''s
    commercially supported version.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当Red Hat在2015年10月宣布收购Ansible时，发布的FAQ中提出的一个问题是：*Red Hat是否会开源Ansible的所有技术？*之所以提出这个问题，是因为Red
    Hat在多年来收购的其他技术中，几乎已经开源了它们的所有方面，不仅邀请社区贡献，还测试和构建新功能，最终使其进入了Red Hat的商业支持版本。
- en: An example of this is the Fedora project. This project is the open source upstream
    for Red Hat Enterprise Linux features—which Fedora users are taking advantage
    of now—including DNF, a YUM replacement. This has been the default package manager
    in Fedora since 2015 and, if everything goes as planned, it should make its way
    into Red Hat Enterprise Linux 8.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个例子是Fedora项目。该项目是Red Hat企业Linux功能的开源上游，包括Fedora用户现在正在利用的DNF，这是YUM的替代品。自2015年以来，这一直是Fedora的默认软件包管理器，如果一切顺利，它应该会进入Red
    Hat企业Linux 8。
- en: Other examples of Red Hat open sourcing its technologies include WildFly, which
    is an upstream for JBoss, and the ManageIQ, which is sponsored by Red Hat and
    is the basis for Red Hat CloudForms.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Red Hat开源其技术的其他示例包括WildFly，这是JBoss的上游，以及由Red Hat赞助的ManageIQ，它是Red Hat CloudForms的基础。
- en: In September 2017, Red Hat announced it would be releasing Ansible AWX, an open
    source upstream for Ansible Tower. This project would have fortnightly releases
    with the AWX team, making select releases *stable*, although in this case, stable
    does not mean production ready as the project is still in its initial development
    cycle.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年9月，Red Hat宣布将发布Ansible AWX，这是Ansible Tower的开源上游。该项目将与AWX团队一起进行每两周的发布，使某些发布版本*稳定*，尽管在这种情况下，稳定并不意味着项目已经准备投入生产，因为该项目仍处于初始开发周期中。
- en: Ansible Tower
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible Tower
- en: We are going to start by looking at Ansible Tower. As you may recall, this is
    commercial software, so we will need a license; luckily, Red Hat provides a trial
    license. You can request it by clicking on the Try Tower Free button at [https://www.ansible.com/](https://www.ansible.com/).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从查看Ansible Tower开始。正如您可能还记得的那样，这是商业软件，所以我们需要许可证；幸运的是，Red Hat提供了试用许可证。您可以通过点击[https://www.ansible.com/](https://www.ansible.com/)上的“尝试Tower免费”按钮来请求。
- en: Please note, you must use a business address, Ansible will not accept requests
    which originate from an email address such as `me.com`, `icloud.com`, `gmail.com`,
    and `hotmain.com` and so on.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您必须使用一个商业地址，Ansible不会接受来自`me.com`、`icloud.com`、`gmail.com`、`hotmain.com`等邮箱地址的请求。
- en: 'After a while, you will receive an email that looks like the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 过一会儿，您将收到一封类似以下内容的电子邮件：
- en: '![](assets/fae164f6-44f2-43ba-828d-cfa0dc7d9d48.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fae164f6-44f2-43ba-828d-cfa0dc7d9d48.png)'
- en: 'Click on the DOWNLOAD TOWER NOW (.TAR) button; this will open your browser
    and download a TAR file containing the playbooks we will be running to deploy
    Ansible Tower. Next up, we need a server to host our Ansible Tower installation.
    Let''s use the `Vagrantfile` we have used in other chapters:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“立即下载塔（.TAR）”按钮；这将打开您的浏览器并下载一个包含我们将用来部署Ansible Tower的playbooks的TAR文件。接下来，我们需要一个服务器来托管我们的Ansible
    Tower安装。让我们使用我们在其他章节中使用过的`Vagrantfile`：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the `Vagrantfile` is in place, you can launch the Vagrant box using one
    of the following commands:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦`Vagrantfile`就位，您可以使用以下命令之一启动Vagrant框：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once you have the Vagrant box up and running, you can look at what changes you
    need to make to the inventory, which is contained within the TAR file we downloaded.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的Vagrant框已经启动运行，您可以查看需要对清单进行的更改，这些更改包含在我们下载的TAR文件中。
- en: Updating the inventory file
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新清单文件
- en: 'There are several files provided in the top level of the unarchived folder,
    to unarchive the folder double-click on the TAR file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在未解压的文件夹的顶层提供了几个文件，要解压文件夹，请双击TAR文件：
- en: '![](assets/92ca865e-46d5-4d3a-bb4b-654efca1ce0a.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/92ca865e-46d5-4d3a-bb4b-654efca1ce0a.png)'
- en: 'We just need to worry about the `inventory` file; open the file in a text editor
    and update it so it looks like the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要担心`inventory`文件；在文本编辑器中打开文件并更新它，使其看起来像以下内容：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, we have updated the host listed under the `[tower]` group to
    include the details and configuration for our Vagrant box; we have also added
    a password for the `admin_password`, `pg_password`, and `rabbitmq_password` parameters.
    Obviously, you can set your own passwords rather than using the ones listed here.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已经更新了`[tower]`组下列出的主机，以包括我们的Vagrant框的详细信息和配置；我们还为`admin_password`、`pg_password`和`rabbitmq_password`参数添加了密码。显然，您可以设置自己的密码，而不是使用这里列出的密码。
- en: The final change to the file is that `rabbitmq_use_long_name` has been updated
    from `false` to `true`. A failure to do this would result in the RabbitMQ service
    failing to start.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的最终更改是将`rabbitmq_use_long_name`从`false`更新为`true`。如果不这样做，将导致RabbitMQ服务无法启动。
- en: Running the playbook
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行playbook
- en: 'Now that we have updated the `inventory` file, we can run the `install.yml`
    playbook to kick off the Ansible Tower installation. To do this, run the following
    command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经更新了`inventory`文件，我们可以运行`install.yml` playbook来启动Ansible Tower的安装。要做到这一点，请运行以下命令：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: There are checks built into the playbook to see if the playbook is being run
    as the root user. In a typical installation, the playbook is expecting you to
    be running the playbook as the root user on the machine you want Ansible Tower
    to be installed on. However, we are doing things slightly differently, so we need
    to use the `--become` flag.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: playbook中内置了检查，以查看playbook是否作为root用户运行。在典型的安装中，playbook期望您在要安装Ansible Tower的机器上以root用户身份运行playbook。然而，我们正在稍微不同的方式进行，因此我们需要使用`--become`标志。
- en: 'The installation process takes around 20 minutes and, as you can see from the
    following output, the installer works through a lot of tasks:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程大约需要20分钟，正如您从以下输出中所看到的，安装程序会执行许多任务：
- en: '![](assets/789e806f-e002-4216-b6b5-92944d9b3012.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/789e806f-e002-4216-b6b5-92944d9b3012.png)'
- en: Requesting a license
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求许可
- en: 'Now that we have Ansible Tower installed, there are a few more steps we need
    to perform in order to complete the installation. The first step is to log in;
    to do this, enter the following URL in your browser: `https://10.20.30.40.nip.io/`.
    When you first open Tower, you will be presented with a warning about the SSL
    certificate; this is because the certificate that was installed during the deployment
    is self-signed. It is safe to proceed.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Ansible Tower，还有一些步骤需要完成安装。第一步是登录；要做到这一点，请在浏览器中输入以下URL：`https://10.20.30.40.nip.io/`。当您首次打开Tower时，将会收到有关SSL证书的警告；这是因为在部署期间安装的证书是自签名的。可以安全地继续。
- en: 'You should now see a login page; enter the USERNAME as `admin` and a PASSWORD
    of `password`, which is what we set in the `inventory` file earlier:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该看到一个登录页面；将用户名输入为`admin`，密码输入为`password`，这是我们之前在`inventory`文件中设置的：
- en: '![](assets/4e12c388-4b18-42c3-a3f3-fd39ce22da43.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4e12c388-4b18-42c3-a3f3-fd39ce22da43.png)'
- en: 'Then click on the SIGN IN button; this will take you to a page that instructs
    you to enter a license file:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击“登录”按钮；这将带您到一个页面，指示您输入许可文件：
- en: '![](assets/af0bc969-d4be-4aea-afd5-fd236f80442c.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/af0bc969-d4be-4aea-afd5-fd236f80442c.png)'
- en: Clicking the REQUEST LICENSE button will take you to [https://www.ansible.com/license/](https://www.ansible.com/license/);
    here, you have the option of requesting two types of license for your installation.
    We are going to be requesting the FREE ANSIBLE TOWER TRIAL - LIMITED FEATURES
    UP TO 10 NODES license. Select the license type, complete the form, and submit
    it as prompted.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“请求许可”按钮将带您到[https://www.ansible.com/license/](https://www.ansible.com/license/)；在这里，您可以选择为您的安装请求两种类型的许可。我们将请求免费的Ansible
    Tower试用版 - 有限功能最多支持10个节点的许可。选择许可类型，填写表格，并按提示提交。
- en: After a short while, you should receive a few emails, one of which welcomes
    you to your Ansible Tower installation. The other email contains a license file.
    Make a copy of the attached license file and use the BROWSE button on the Tower
    License page to upload it. Also review and agree to the end-user agreement. Once
    you have uploaded the license file and agreed to the END USER LICENSE AGREEMENT,
    click on SUBMIT.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 过一会儿，您应该会收到几封电子邮件，其中一封欢迎您使用Ansible Tower。另一封电子邮件包含许可文件。复制附加的许可文件，并在Tower许可页面上使用BROWSE按钮上传它。还要审查并同意最终用户协议。上传许可文件并同意最终用户许可协议后，点击提交。
- en: 'After a few seconds, you will be presented with your first look at Ansible
    Tower:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，您将首次看到Ansible Tower的外观：
- en: '![](assets/41ca39b4-0dbe-4c1d-a16f-7398de59637c.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/41ca39b4-0dbe-4c1d-a16f-7398de59637c.png)'
- en: Now we have Ansible Tower installed, we can look at running our first playbook.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Ansible Tower，我们可以开始运行我们的第一个playbook。
- en: The hello world demo project
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: hello world演示项目
- en: As you can see, we already have a project configured; this is an extremely basic
    one that downloads the sample playbook from [https://github.com/ansible/ansible-tower-samples/](https://github.com/ansible/ansible-tower-samples/)
    and displays the message Hello World. Before we can run the playbook, we first
    need to download a copy from GitHub; to do this, click on PROJECTS in the top
    menu.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经配置了一个项目；这是一个非常基本的项目，它从[https://github.com/ansible/ansible-tower-samples/](https://github.com/ansible/ansible-tower-samples/)下载示例playbook，并显示消息Hello
    World。在运行playbook之前，我们首先需要从GitHub下载一个副本；要做到这一点，请点击顶部菜单中的PROJECTS。
- en: 'You will be able to see the Demo Project listed. Hovering over the icons under
    actions will give you a description of what each one will do when you click it;
    we want to click on the first icon, Start an SCM update. After a short time, you
    should see that REVISION and **LAST UPDATED** are both populated:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您将能够看到列出的Demo Project。将鼠标悬停在操作下的图标上将为您提供单击时每个图标将执行的描述；我们要点击的是第一个图标，即启动SCM更新。不久后，您应该看到REVISION和**LAST
    UPDATED**都已填充：
- en: '![](assets/ed0bb817-c5fb-4151-a62d-301e52c1a3b8.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ed0bb817-c5fb-4151-a62d-301e52c1a3b8.png)'
- en: This means that Ansible Tower has now downloaded the demo playbook from GitHub;
    we can now run the playbook. To do this, click on TEMPLATES in the top menu.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着Ansible Tower现在已从GitHub下载了演示playbook；我们现在可以运行playbook。要做到这一点，请点击顶部菜单中的TEMPLATES。
- en: Again, you should see that there is a template called Demo Job Template and
    towards the right-hand side of the line there are several icons. The one we want
    to click is the one that looks like a rocket. Clicking Start a job using this
    template will run the demo job; you will be taken to a screen where you can monitor
    the progress of the job.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您应该看到有一个名为Demo Job Template的模板，并且在该行的右侧有几个图标。我们要点击的是看起来像火箭的图标。点击使用此模板启动作业将运行演示作业；您将被带到一个屏幕，您可以在其中监视作业的进度。
- en: 'Once complete, you should see something that looks like the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您应该看到类似以下的内容：
- en: '![](assets/37ebd7b4-0675-4c1a-bb65-b0779b2ea23e.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/37ebd7b4-0675-4c1a-bb65-b0779b2ea23e.png)'
- en: As you can see, on the left-hand side, you have an overview of the job itself;
    this tells you the status, when it started and finished, and which user requested
    the job to be executed. The section on the right-hand side of the page shows the
    playbook output, which is exactly the same as what we see when executing the playbook
    from the command line.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在左侧，您可以看到工作本身的概述；这告诉您状态，开始和结束的时间，以及哪个用户请求执行该工作。页面右侧的部分显示了playbook的输出，这与我们从命令行执行playbook时看到的完全相同。
- en: Let's take a look at running something more complicated.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来运行一些更复杂的东西。
- en: Launching the AWS playbook
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动AWS playbook
- en: In [Chapter 10](56e8175f-d1a8-4b63-ad3f-fe94ff55135e.xhtml), *Highly Available
    Cloud Deployments*, we worked through a playbook which used the AWS core Ansible
    modules to launch a cluster running WordPress; there is a standalone version of
    the `aws-wordpress` playbook hosted on GitHub at [https://github.com/russmckendrick/aws-wordpress/](https://github.com/russmckendrick/aws-wordpress/).
    Let's use this to deploy our AWS cluster using Ansible Tower.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](56e8175f-d1a8-4b63-ad3f-fe94ff55135e.xhtml)中，*高可用云部署*，我们通过一个playbook来运行WordPress的AWS核心Ansible模块来启动一个集群；在GitHub上托管了`aws-wordpress`
    playbook的独立版本，网址为[https://github.com/russmckendrick/aws-wordpress/](https://github.com/russmckendrick/aws-wordpress/)。让我们使用这个来使用Ansible
    Tower部署我们的AWS集群。
- en: Before we move on to configuring the playbook within Ansible Tower, we need
    to do a little housekeeping on the versions of some of the Python modules that
    were deployed as part of the Ansible Tower installation. This is because there
    are parts of our playbook that require later versions of the Boto modules.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置Ansible Tower中的playbook之前，我们需要对作为Ansible Tower安装的一部分部署的一些Python模块的版本进行一些清理。这是因为我们的playbook的某些部分需要更高版本的Boto模块。
- en: 'To do this, we need to SSH into our Ansible Tower host by running the following
    command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要通过运行以下命令SSH到我们的Ansible Tower主机：
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now that we are logged in as the Vagrant user, we can change the root with:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们以Vagrant用户登录，我们可以使用以下命令更改root：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we change to the same Python environment as Ansible Tower uses; to do
    this, we run the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们切换到与Ansible Tower使用相同的Python环境；为此，我们运行以下命令：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now we are using the right environment, we need to upgrade the `boto` libraries
    using the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们正在使用正确的环境，我们需要使用以下命令升级`boto`库：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once updated, we can exit the Ansible Tower Python environment by running:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 更新后，我们可以通过运行退出Ansible Tower Python环境：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then we use the `exit` command to log out:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`exit`命令退出：
- en: '![](assets/93972b61-5047-4b28-bed5-eb3433ac515b.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/93972b61-5047-4b28-bed5-eb3433ac515b.png)'
- en: Now that we have our environment updated, we can proceed to adding a new project.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的环境已更新，我们可以继续添加一个新项目。
- en: Adding a new project
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个新项目
- en: The first thing we need to do is add a new project; this is where we let Ansible
    Tower know about the repository hosting our playbook. As already mentioned, we
    will be using a GitHub repository that houses the code. To add a new project,
    click on PROJECTS in the top menu and then click on the +ADD button, which can
    be found on the right just under the row of icons in the top menu.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是添加一个新项目；这是我们让Ansible Tower知道我们的playbook存储库的地方。如前所述，我们将使用一个GitHub存储库来存放代码。要添加新项目，点击顶部菜单中的项目，然后点击右侧的+添加按钮，该按钮可以在顶部菜单的图标行下方找到。
- en: 'Here, you will be asked for several bits of information; enter the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将被要求输入一些信息；输入以下内容：
- en: 'NAME: `AWS Project`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`AWS项目`
- en: 'DESCRIPTION: `AWS WordPress Cluster`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：`AWS WordPress集群`
- en: 'ORGANIZATION: `Default`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织：`默认`
- en: 'SCM TYPE: GIT'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SCM类型：GIT
- en: 'When you select the SCM TYPE, a second section will appear that asks for details
    about where your source is hosted:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 选择SCM类型时，将出现第二部分，要求输入源代码存放的详细信息：
- en: 'SCM URL: `https://github.com/russmckendrick/aws-wordpress.git`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SCM URL：`https://github.com/russmckendrick/aws-wordpress.git`
- en: 'SCM BRANCH/TAG/COMMIT: master'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SCM分支/标签/提交：主
- en: 'SCM CREDENTIAL: Leave blank as this is a publicly accessible repository'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SCM凭据：留空，因为这是一个公开可访问的存储库
- en: 'Clean: Tick'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清除：打勾
- en: 'Delete on Update: Tick'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新时删除：打勾
- en: 'Update on Launch: Tick'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动时更新：打勾
- en: 'CACHE TIMEOUT (SECONDS): Leave at zero'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存超时（秒）：保持为零
- en: 'Once you have entered the details, click on SAVE. If you now return to the
    PROJECTS page, you should see that Ansible has already downloaded the source for
    the playbook:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 输入详细信息后，点击保存。如果现在返回到项目页面，您应该会看到Ansible已经下载了playbook的源代码：
- en: '![](assets/24a65a34-ffd8-4f41-b8b4-7125c23be058.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/24a65a34-ffd8-4f41-b8b4-7125c23be058.png)'
- en: Adding credentials
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加凭据
- en: 'Next up, we have to let Ansible Tower know the credentials to use when accessing
    our AWS account; to add these, click on the Settings icon (the cog in the top
    menu) and you will be taken to a screen which looks like the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要让Ansible Tower知道在访问我们的AWS账户时要使用的凭据；要添加这些凭据，点击顶部菜单中的设置图标（顶部菜单中的齿轮图标），您将被带到一个看起来像以下内容的屏幕：
- en: '![](assets/511cdd09-30d8-4e89-9dcc-f401feb5cc36.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/511cdd09-30d8-4e89-9dcc-f401feb5cc36.png)'
- en: As you can see, there are a lot of different options here. As you may have already
    guessed, the option we are interested in is the CREDENTIALS one. Clicking on it
    will take you to a page that gives you an overview of the existing credentials;
    we want to add some new ones, so click on the +ADD button.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这里有很多不同的选项。您可能已经猜到，我们感兴趣的选项是凭据。点击它将带您到一个页面，该页面会给您一个现有凭据的概述；我们想要添加一些新的凭据，所以点击+添加按钮。
- en: 'This should take you to a page that is similar in layout to the one where we
    added the project. Fill out the following information:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带您到一个页面，布局类似于我们添加项目的页面。填写以下信息：
- en: 'NAME: `AWS API Credentials`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`AWS API凭据`
- en: 'DESCRIPTION: `AWS API Credentials`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：`AWS API凭据`
- en: 'ORGANIZATION: `Default`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织：`默认`
- en: 'CREDENTIAL TYPE: Click on the magnifying glass icon and select Amazon Web Services'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 凭据类型：点击放大镜图标，选择Amazon Web Services
- en: 'Once the CREDENTIAL TYPEhas been selected, the second section will be added;
    here, you can enter the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 选择凭据类型后，将添加第二部分；在这里，您可以输入以下内容：
- en: 'ACCESS KEY: Add your access key from the previous AWS chapters, for example,
    `AKIAI5KECPOTNTTVM3EDA`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问密钥：添加您在之前的AWS章节中的访问密钥，例如，`AKIAI5KECPOTNTTVM3EDA`
- en: 'SECRET KEY: Add your secret key from the previous AWS chapters, for example,
    `Y4B7FFiSWl0Am3VIFc07lgnc/TAtK5+RpxzIGTr`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 秘钥：添加您在之前的AWS章节中的秘钥，例如，`Y4B7FFiSWl0Am3VIFc07lgnc/TAtK5+RpxzIGTr`
- en: 'STS TOKEN: Leave blank'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: STS令牌：留空
- en: 'Once the form is completed, click on SAVE. Once saved, you will notice that
    the SECRET KEY is marked as ENCRYPTED:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 表单填写完成后，点击保存。保存后，您会注意到密钥被标记为加密：
- en: '![](assets/b6cf5b66-48ca-40fa-bbb6-ab7ae358c6c8.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b6cf5b66-48ca-40fa-bbb6-ab7ae358c6c8.png)'
- en: When you save sensitive information in Ansible Tower, it is encrypted, and you
    only have the option to REPLACE or REVERT it. At no point can you view the information
    again.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在Ansible Tower中保存敏感信息时，它会被加密，您只能选择替换或恢复它。在任何时候，您都不能再查看这些信息。
- en: Adding an inventory
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加库存
- en: 'Now that we have the credentials in place, we need to recreate the content
    of the inventory file called `production` within Ansible Tower. As a reminder,
    the file looks like the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了凭据，我们需要在Ansible Tower中重新创建名为`production`的库存文件的内容。作为提醒，文件看起来像下面这样：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To add the inventory, click on INVENTORIES in the top menu and then the +ADD
    button. You will notice that the +ADD button now brings up a drop-down list; from
    that list, we want to add an Inventory.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加库存，点击顶部菜单中的库存，然后点击+添加按钮。您会注意到+添加按钮现在会弹出一个下拉列表；从该列表中，我们要添加一个库存。
- en: 'In the form that opens, enter the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开的表单中，输入以下内容：
- en: 'NAME: `AWS Inventory`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`AWS库存`
- en: 'DESCRIPTION: `AWS Inventory`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：`AWS库存`
- en: 'ORGANIZATION: `Default`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织：`默认`
- en: 'INSIGHTS CREDENTIALS: Leave blank'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 洞察凭据：留空
- en: 'INSIGHTS GROUPS: Leave blank'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 洞察组：留空
- en: 'VARIABLES: Enter the values listed as follows:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量：输入以下列出的值：
- en: '[PRE10]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once entered, click on SAVE; this will create the Inventory, and we can now
    add the two groups we need. To do this, click on GROUPS, which can be found in
    the row on the buttons above the form:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 输入后，点击保存；这将创建库存，现在我们可以添加我们需要的两个组。要做到这一点，点击组，可以在表单上方的按钮行中找到：
- en: '![](assets/6abeb18c-4611-4245-84f4-8c73e6cfd01f.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6abeb18c-4611-4245-84f4-8c73e6cfd01f.png)'
- en: 'Click on **+ADD GROUP** and then enter the following details:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**+添加组**，然后输入以下详细信息：
- en: 'NAME: `ec2_instance`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`ec2_instance`
- en: 'DESCRIPTION: `ec2_instance`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：`ec2_instance`
- en: 'VARIABLES: Leave blank'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量：留空
- en: 'Then click on SAVE, repeat the process, and add a second group using the following
    details:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击保存，重复该过程，并使用以下详细信息添加第二个组：
- en: 'NAME: `already_running`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`already_running`
- en: 'DESCRIPTION: `already_running`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：`already_running`
- en: 'VARIABLES: Leave blank'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量：留空
- en: 'Again, click on SAVE; you should now have two groups listed:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 再次点击保存；现在应该列出两个组：
- en: '![](assets/653abd86-9d9f-4828-ac8a-6f6cbf23fa19.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/653abd86-9d9f-4828-ac8a-6f6cbf23fa19.png)'
- en: Now that we have our project, inventory, and some credentials for accessing
    our AWS, we just need to add the templates, one to launch and configure the cluster,
    and another to terminate it.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了我们的项目、库存和一些用于访问我们的AWS的凭据，我们只需要添加模板，一个用于启动和配置集群，另一个用于终止它。
- en: Adding the templates
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加模板
- en: 'Click on TEMPLATES in the top menu and, in the drop-down menu of the +ADD button,
    select Job Template. This is the biggest form we have come across so far; however,
    parts of it will be populated automatically when we start to fill in the details.
    Let''s make a start:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 点击顶部菜单中的TEMPLATES，然后在+ADD按钮的下拉菜单中选择作业模板。这是我们迄今为止遇到的最大表单；但是，当我们开始填写详细信息时，其中的部分将自动填充。让我们开始吧：
- en: 'NAME: `AWS - Launch`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`AWS - 启动`
- en: 'DESCRIPTION: Launch and deploy WordPress instances'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：启动和部署WordPress实例
- en: 'JOB TYPE: Leave as Run'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作类型：保持为运行
- en: 'INVENTORY: Click on the icon and select AWS Inventory'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库存：点击图标并选择AWS库存
- en: 'PROJECT: Click on the icon and select `AWS Project`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目：点击图标并选择`AWS项目`
- en: 'PLAYBOOK: Select `site.yml` from the drop-down list'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏规则：从下拉列表中选择`site.yml`
- en: 'CREDENTIAL: Select the CREDENTIAL TYPE of Amazon Web Services, then choose
    AWS API Credentials; also select the Demo Credential for MACHINE'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 凭据：选择Amazon Web Services的凭据类型，然后选择AWS API凭据；还为MACHINE选择演示凭据
- en: 'FORKS: Leave as Default'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分叉：保持默认
- en: 'LIMIT: Leave blank'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制：留空
- en: 'VERBOSITY: Leave at `0` (Normal)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细程度：保持为`0`（正常）
- en: 'INSTANCE GROUPS, JOB TAGS, SKIP TAGS, LABELS: Leave blank'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例组、作业标签、跳过标签、标签：留空
- en: 'SHOW CHANGES: Leave OFF'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示更改：关闭
- en: 'OPTIONS and EXTRA VARIABLES: Leave as their defaults'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项和额外变量：保持默认值
- en: 'Click on SAVE and you can add a second template to remove the cluster. To do
    this, click on the +ADD button and select Job Templateagain; this time, use the
    following information:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 点击保存，您可以添加第二个模板来删除集群。要做到这一点，点击+ADD按钮并再次选择作业模板；这次使用以下信息：
- en: 'NAME: `AWS - Remove`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`AWS - 删除`
- en: 'DESCRIPTION: Remove the WordPress cluster'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：移除WordPress集群
- en: 'JOB TYPE: Leave as Run'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作类型：保持为运行
- en: 'INVENTORY: Click on the icon and select AWS Inventory'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库存：点击图标并选择AWS库存
- en: 'PROJECT: Click on the icon and select `AWS Project`'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目：点击图标并选择`AWS项目`
- en: 'PLAYBOOK: Select `remove.yml` from the drop-down list'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏规则：从下拉列表中选择`remove.yml`
- en: 'CREDENTIAL: Select the CREDENTIAL TYPE of Amazon Web Services, then choose
    AWS API Credentials; also select the Demo Credential for MACHINE'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 凭据：选择Amazon Web Services的凭据类型，然后选择AWS API凭据；还为MACHINE选择演示凭据
- en: 'FORKS: Leave as Default'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分叉：保持默认
- en: 'LIMIT: Leave blank'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制：留空
- en: 'VERBOSITY: Leave at `0` (Normal)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细程度：保持为`0`（正常）
- en: 'INSTANCE GROUPS, JOB TAGS, SKIP TAGS, LABELS: Leave blank'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例组、作业标签、跳过标签、标签：留空
- en: 'SHOW CHANGES: Leave OFF'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示更改：关闭
- en: 'OPTIONS and EXTRA VARIABLES: Leave as their defaults'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项和额外变量：保持默认值
- en: Running the playbook
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行剧本
- en: 'Now that we have our playbook ready to run, we can run it by clicking on TEMPLATES
    in the top menu and then clicking on the run icon, the rocket one, next to `AWS
    -Launch`. This will take the same amount of time to run as it did when we executed
    it from the command line:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的剧本已经准备好运行，我们可以通过点击顶部菜单中的TEMPLATES，然后点击`AWS -Launch`旁边的运行图标，来运行它。这将花费与我们从命令行执行时一样多的时间来运行：
- en: '![](assets/51ab538f-b42d-480d-ba33-a0257a04bbdd.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/51ab538f-b42d-480d-ba33-a0257a04bbdd.png)'
- en: 'As you can see from the preceding screenshot, everything built and ran as expected,
    meaning that we will be able to see our WordPress site when going to the Elastic
    Load Balancer URL:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从前面的截图中所看到的，一切都按预期构建和运行，这意味着当我们转到弹性负载均衡器URL时，我们将能够看到我们的WordPress网站：
- en: '![](assets/d97f6a4b-b560-46b3-a8b9-2ea9b55111ec.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d97f6a4b-b560-46b3-a8b9-2ea9b55111ec.png)'
- en: Removing the cluster
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除集群
- en: Now that we have launched the cluster, we can run the second playbook, which
    removes it. To do this, click on TEMPLATES in the top menu and then click on the
    run icon, the rocket one, next to `AWS -Remove`. This will launch the playbook,
    which removes everything we just launched. Again, it will take a little while
    to run through all of the tasks.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动了集群，我们可以运行第二个剧本，将其删除。要做到这一点，点击顶部菜单中的TEMPLATES，然后点击运行图标，即`AWS -Remove`旁边的火箭图标。这将启动剧本，删除我们刚刚启动的一切。同样，运行所有任务需要一点时间。
- en: 'It is important to point out that in order for the `remove.yml` playbook to
    successfully execute through Ansible Tower, you have to update one of the tasks
    in `roles/remove/tasks/main.yml`. If you recall, we had the following lines in
    there:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 需要指出的是，为了使`remove.yml`剧本能够通过Ansible Tower成功执行，您必须更新`roles/remove/tasks/main.yml`中的一个任务。如果您还记得，我们在那里有以下几行：
- en: '[PRE11]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If this task was present, then our playbook execution would stall at this task
    and not proceed, as Ansible Tower playbook runs are not interactive. The task
    was replaced with the following:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此任务存在，那么我们的剧本执行将在此任务处停顿，而不会继续进行，因为Ansible Tower剧本运行不是交互式的。该任务已被以下内容替换：
- en: '[PRE12]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is the only change that was needed for our playbook to run using Ansible
    Tower; everything else remains as is.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的剧本能够在Ansible Tower上运行所需的唯一更改；其他一切保持不变。
- en: Tower summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tower摘要
- en: 'While we have only had time to run a basic playbook, I am sure you can start
    to see the advantages of using Ansible Tower for enabling all of your users to
    run playbooks. There are quite a few features you can use. However, there are
    three different versions of Ansible Tower currently available. The following table
    provides a quick overview of the features available in each version:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们只有时间运行了一个基本的剧本，但我相信您已经开始看到使用Ansible Tower为所有用户运行剧本的优势了。您可以使用许多功能。但是，目前有三个不同版本的Ansible
    Tower可用。以下表格提供了每个版本中可用功能的快速概述：
- en: '| **Feature** | **Self-Support** | **Standard** | **Premium** |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| **功能** | **自助支持** | **标准** | **高级** |'
- en: '| Dashboard: Get an overview of your Ansible Tower status | Yes | Yes | Yes
    |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 仪表板：获取Ansible Tower状态的概述 | 是 | 是 | 是'
- en: '| Real-time job output: View the output of your jobs as they are executed in
    real time | Yes | Yes | Yes |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 实时作业输出：实时查看作业的输出 | 是 | 是 | 是'
- en: '| Job scheduling: Execute jobs on a schedule; also set up repeat runs, for
    example, every weekday at 9 a.m., run the job to deploy the development instances
    | Yes | Yes | Yes |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 作业调度：按计划执行作业；还可以设置重复运行，例如，每个工作日上午9点运行部署开发实例的作业 | 是 | 是 | 是'
- en: '| Pull from source control: Host your playbooks in source control, such as
    Git or SVN | Yes | Yes | Yes |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: 从源代码控制中拉取：将您的playbooks托管在源代码控制中，比如Git或SVN | 是 | 是 | 是
- en: '| Workflows: Chain multiple playbooks together in one job | No | Yes | Yes
    |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 工作流程：在一个作业中链接多个playbooks | 否 | 是 | 是'
- en: '| Role-based access: Get fine-grained control of your users and what they can
    access | Yes | Yes | Yes |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 基于角色的访问：对用户及其访问权限进行精细控制 | 是 | 是 | 是'
- en: '| Integration with third-party authentication: Hook your Tower installation
    into an Active Directory or an LDAP identity server | No | Yes | Yes |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: 与第三方身份验证集成：将您的Tower安装连接到Active Directory或LDAP身份验证服务器 | 否 | 是 | 是
- en: '| Surveys: Build forms for users to fill out as part of a job run; this allows
    your users to provide information without them having to write any YAML | No |
    Yes | Yes |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 调查：为用户构建表单，作为作业运行的一部分填写；这允许用户提供信息，而无需编写任何YAML | 否 | 是 | 是'
- en: '| 8x5 Support from Red Hat | No | Yes | Yes |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: 来自红帽的8x5支持 | 否 | 是 | 是
- en: '| 24x7 Support from Red Hat | No | No | Yes |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: 来自红帽的24x7支持 | 否 | 否 | 是
- en: 'The current license costs for Ansible Tower are as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower的当前许可成本如下：
- en: '**Self-support up to 10 nodes**: Free of charge; this is the license we applied
    to our installation'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自助支持最多10个节点**：免费；这是我们应用于我们的安装的许可证'
- en: '**Self-support up to 100 nodes**: $5,000 per year'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自助支持最多100个节点**：每年5,000美元'
- en: '**Self-support up to 250 nodes**: $10,000 per year'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自助支持最多250个节点**：每年10,000美元'
- en: '**Standard up to 100 nodes**: $10,000 per year'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准最多100个节点**：每年10,000美元'
- en: '**Standard over 100 nodes**: Custom pricing, contact Ansible'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准超过100个节点**：自定义定价，请联系Ansible'
- en: '**Premium up to 100 nodes**: $14,000 per year'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级最多100个节点**：每年14,000美元'
- en: '**Premium over 100 nodes**: Custom pricing, contact Ansible'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级超过100个节点**：自定义定价，请联系Ansible'
- en: These prices do not include the Red Hat-supported Ansible Engine; there are
    additional costs for that on top of the ones listed here, if you want a supported
    Ansible engine.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这些价格不包括由红帽支持的Ansible Engine；如果您想要受支持的Ansible引擎，除了这里列出的费用之外，还有额外的费用。
- en: So, Ansible Tower, while great, may not be within everyone's budget and this
    is where Ansible AWX comes in.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，虽然Ansible Tower非常好，但可能不在每个人的预算范围内，这就是Ansible AWX的用武之地。
- en: Ansible AWX
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible AWX
- en: Let's get straight into installing Ansible AWX; we will need a Vagrant box,
    Docker installed on the Vagrant box, and finally a copy of the AWX source.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直接开始安装Ansible AWX；我们将需要一个Vagrant box，在Vagrant box上安装Docker，最后是AWX源的副本。
- en: Preparing the playbook
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备playbook
- en: 'For our installation, we will be using Ansible to prepare our Vagrant box and
    install Ansible AWX. To create the structure for the playbook, run the following
    commands:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的安装，我们将使用Ansible来准备我们的Vagrant box并安装Ansible AWX。要为playbook创建结构，请运行以下命令：
- en: '[PRE13]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `Vagrantfile` we are going to be using can be found here:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的`Vagrantfile`可以在这里找到：
- en: '[PRE14]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The first role we are going to create is one we have covered already; it is
    the Docker role from [Chapter 14](d71c8c72-7673-40f2-857a-a55514a7646b.xhtml),
    *Deploying WPScan and OWASP ZAP*.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要创建的第一个角色是我们已经涵盖过的角色；它是来自[第14章](d71c8c72-7673-40f2-857a-a55514a7646b.xhtml)的Docker角色，*部署WPScan和OWASP
    ZAP*。
- en: The docker role
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: docker角色
- en: 'I am not going to go into detail about the tasks, as these have already been
    covered. We can bootstrap the role by running the following command:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我不打算详细介绍任务，因为这些已经涵盖过了。我们可以通过运行以下命令来引导角色：
- en: '[PRE15]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now that we have the files in place, we can update the `roles/docker/defaults/main.yml`
    file with the following content:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经放置了文件，我们可以使用以下内容更新`roles/docker/defaults/main.yml`文件：
- en: '[PRE16]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The content of `roles/docker/tasks/main.yml` should be:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`roles/docker/tasks/main.yml`的内容应该是：'
- en: '[PRE17]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This should get the Docker part of the AWX installation installed and allow
    us to move onto the next role.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该安装AWX安装的Docker部分，并允许我们转移到下一个角色。
- en: The awx role
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: awx角色
- en: 'The next and (sort of) final role for our AWX installation can be created by
    running:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的AWX安装的下一个（有点）最终角色可以通过运行以下命令创建：
- en: '[PRE18]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The default variables in `roles/awx/defaults/main.yml` are similar in format
    to the ones in the `docker` role:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`roles/awx/defaults/main.yml`中的默认变量格式与`docker`角色中的变量类似：'
- en: '[PRE19]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Starting from the top, we have two different GitHub repo URLs. The first `awx.repo_url`
    is the main AWX repository and the second `awx.logo_url` is for the official logo
    pack. Next up, we have the path, `awx.repo_path`, and we want to check out the
    code too. In this case, it is `~/awx` which, as we are using `become`, will be
    `/root/awx/`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 从头开始，我们有两个不同的GitHub存储库URL。第一个`awx.repo_url`是主AWX存储库，第二个`awx.logo_url`是官方标志包。接下来，我们有路径`awx.repo_path`，我们也想检出代码。在这种情况下，它是`~/awx`，因为我们使用`become`，它将是`/root/awx/`。
- en: To check out the code from GitHub, we need to make sure that we have Git installed.  `awx.packages`
    is the only additional package we need to install using `yum`. Next up, we need
    to install Ansible itself and a few of the other Python packages we will need
    using PIP (`awx.pip`).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要从GitHub检出代码，我们需要确保已安装Git。`awx.packages`是我们需要使用`yum`安装的唯一附加软件包。接下来，我们需要安装Ansible本身以及我们将使用PIP（`awx.pip`）安装的其他一些Python软件包。
- en: Finally, we have the command (`awx.install_command`) we need to run in order
    to install Ansible AWX. As you can see, we are using an Ansible playbook that
    ships as part of the code we are checking out; the command itself is overriding
    the option for using official AWX logos by passing `awx_official=true` as extra
    variables.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个命令（`awx.install_command`），我们需要运行以安装Ansible AWX。如您所见，我们正在使用作为我们正在检查的代码的一部分提供的Ansible
    playbook；命令本身正在通过传递`awx_official=true`作为额外变量来覆盖使用官方AWX标志的选项。
- en: 'Now that we have discussed the variables we need to define, we can add the
    tasks to `roles/awx/tasks/main.yml`, starting with the tasks that install the
    Yum and Pip packages:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了我们需要定义的变量，我们可以将任务添加到`roles/awx/tasks/main.yml`中，从安装Yum和Pip软件包的任务开始：
- en: '[PRE20]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, we have the tasks that check out the two AWX repositories from GitHub:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有检出两个AWX存储库的任务来自GitHub：
- en: '[PRE21]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As you can see, both repositories are being moved to the same location on our
    Vagrant box. The final task runs the playbook that downloads, configures, and
    launches the Ansible AWX Docker containers:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，两个存储库都将移动到Vagrant盒子上的相同位置。最后一个任务运行了下载、配置和启动Ansible AWX Docker容器的playbook：
- en: '[PRE22]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Running the playbook
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行playbook
- en: 'Now that we have our playbook in place, we can add our host inventory information
    to the `production` file:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了我们的playbook，我们可以将我们的主机清单信息添加到`production`文件中：
- en: '[PRE23]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Finally, we can add the following to the `site.yml` file, and we should be
    good to run our installation:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以将以下内容添加到`site.yml`文件中，然后我们就可以运行我们的安装了：
- en: '[PRE24]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To get Ansible AWX up and running, we need to execute one of the following
    commands to launch the Vagrant box:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Ansible AWX运行起来，我们需要执行以下命令中的一个来启动Vagrant盒子：
- en: '[PRE25]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, the following command will run the playbook:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，以下命令将运行playbook：
- en: '[PRE26]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'It will take a few minutes to run through the playbook; once complete, you
    should see something like this:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 运行playbook需要几分钟时间；完成后，您应该会看到类似以下的内容：
- en: '![](assets/978a3929-0a39-4176-9ab7-9a3904f7fe65.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/978a3929-0a39-4176-9ab7-9a3904f7fe65.png)'
- en: 'Opening your browser and going to `http://10.20.30.50.nip.io/` should show
    you the following message:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`http://10.20.30.50.nip.io/`应该会显示以下消息：
- en: '![](assets/15b0a5e1-cdcf-472c-89b7-5dd3bde9e0f2.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/15b0a5e1-cdcf-472c-89b7-5dd3bde9e0f2.png)'
- en: Keep the page open and, after a few minutes, you should see a login prompt.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 保持页面打开，几分钟后，您应该会看到一个登录提示。
- en: Using Ansible AWX
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible AWX
- en: 'You should be at a login prompt. The USERNAME and PASSWORD are `admin`/`password`:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到登录提示。用户名和密码是`admin`/`password`：
- en: '![](assets/ce021ce4-f26e-4c3b-8f72-b176feee04e3.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ce021ce4-f26e-4c3b-8f72-b176feee04e3.png)'
- en: 'When you first log in, you may notice that the look and feel is similar to
    Ansible Tower, although, there are a few differences:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次登录时，您可能会注意到外观和感觉与Ansible Tower相似，尽管有一些差异：
- en: '![](assets/36b9751c-cc82-4d13-b008-cb2cac6a3148.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/36b9751c-cc82-4d13-b008-cb2cac6a3148.png)'
- en: As you can see, the menu has moved from the top to the left-hand side and there
    are also more options. Clicking on PROJECTS in the left-hand menu will take you
    to the page where you can Get The Latest SVM Revision of the hello-world example
    we first ran in Ansible Tower. Click the cloud icon to download it.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，菜单已从顶部移至左侧，并且还有更多选项。在左侧菜单中点击PROJECTS将带您到页面，您可以获取我们在Ansible Tower中首次运行的hello-world示例的最新SVM修订版。点击云图标进行下载。
- en: Once you have the project synced, click on TEMPLATES in the left-hand menu;
    you should see an empty list. Click on the + button and select Job Template from
    the drop-down list.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦项目同步完成，点击左侧菜单中的TEMPLATES；您应该会看到一个空列表。点击+按钮并从下拉列表中选择作业模板。
- en: 'This will take you to a page that is the same as we saw when adding a template
    in Ansible Tower. Fill in the following details:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带你到一个页面，与我们在Ansible Tower中添加模板时看到的相同。填写以下细节：
- en: 'NAME: `Demo Template`'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`Demo Template`
- en: 'DESCRIPTION: `Run the hello-world example`'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：`运行hello-world示例`
- en: 'JOB TYPE: Leave as Run'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作业类型：保持为运行
- en: 'INVENTORY: Click on the icon and select `Demo Inventory`'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单：点击图标并选择`Demo Inventory`
- en: '**PROJECT**: Click on the icon and select `Demo Project`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PROJECT**：点击图标并选择`Demo Project`'
- en: '**PLAYBOOK**: Select `hello-world.yml` from the drop-down list'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PLAYBOOK**：从下拉列表中选择`hello-world.yml`'
- en: '**CREDENTIAL**: Click on the icon and select the **Demo Credential** from the
    list'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CREDENTIAL**：点击图标并从列表中选择**Demo Credential**'
- en: '**FORKS**: Leave as Default'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FORKS**：保持默认'
- en: '**LIMIT**: Leave blank'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LIMIT**：留空'
- en: '**VERBOSITY**: Leave at `0` (Normal)'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VERBOSITY**：保持为`0`（正常）'
- en: '**INSTANCE GROUPS**, **JOB TAGS**, **SKIP TAGS**, **LABELS**: Leave blank'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**INSTANCE GROUPS**，**JOB TAGS**，**SKIP TAGS**，**LABELS**：留空'
- en: '**SHOW CHANGES**: Leave OFF'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示更改**：保持关闭'
- en: '**OPTIONS** and **EXTRA VARIABLES**: Leave as their defaults'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OPTIONS**和**EXTRA VARIABLES**：保持默认值'
- en: 'Once filled in, click on the **SAVE** button at the bottom of the form. Clicking
    on TEMPLATES in the left-hand side menu will now show the `Demo Template` listed:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完毕后，点击表单底部的**保存**按钮。现在点击左侧菜单中的TEMPLATES将显示`Demo Template`：
- en: '![](assets/2315d6be-97ba-4765-ac5c-5bca300f6dba.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2315d6be-97ba-4765-ac5c-5bca300f6dba.png)'
- en: 'Clicking on the rocket icon, or **Start a job using this template**, will run
    the hello world playbook:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 点击火箭图标，或者**使用此模板启动作业**，将运行hello world playbook：
- en: '![](assets/5850f7c3-e70f-4bf8-bff2-e59346fcffdb.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5850f7c3-e70f-4bf8-bff2-e59346fcffdb.png)'
- en: So there we have it—a very quick overview of Ansible AWX which, as I have already
    mentioned, is not too dissimilar to Ansible Tower.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们已经对Ansible AWX进行了一个非常快速的概述，正如我已经提到的，它与Ansible Tower并没有太大的不同。
- en: AWX summary
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWX摘要
- en: Let's get this out of the way now. At the time of writing, Red Hat does not
    recommend Ansible AWX for production environments. Personally, I have found it
    to be quite stable, especially for software that is in constant development. Sure,
    there have been some issues when upgrading but, for the most part, these have
    been minimal.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在解决这个问题。在撰写本文时，红帽不建议在生产环境中使用Ansible AWX。就我个人而言，我发现它相当稳定，尤其是对于不断发展的软件。当然，在升级时可能会出现一些问题，但大多数情况下这些问题都很小。
- en: With Ansible AWX being the upstream of Ansible Tower, there are features present,
    such as being able to use third-party authentication services and workflows, which
    are not present in the self-supported version of Ansible Tower. There are also
    no limits on the number of hosts you can manage. This makes Ansible AWX a very
    attractive alternative to Ansible Tower; however, you do need to take into account
    its development cycle and how upgrades could affect the day-to-day running of
    your AWX installation.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Ansible AWX是Ansible Tower的上游，因此具有一些功能，例如能够使用第三方身份验证服务和工作流程，这些功能在自支持版本的Ansible
    Tower中不存在。您可以管理的主机数量也没有限制。这使得Ansible AWX成为Ansible Tower的一个非常有吸引力的替代品；但是，您需要考虑其开发周期以及升级可能如何影响您的AWX安装的日常运行。
- en: Summary
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have worked through the installation and usage of two different
    web frontends that can be used to run your Ansible playbooks. We have also discussed
    the differences in cost, functionality, and stability between the various versions
    of the frontends.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经通过安装和使用两种不同的Web前端来运行您的Ansible playbooks。我们还讨论了前端各个版本之间的成本、功能和稳定性差异。
- en: I am sure you will agree that using a tool such as Ansible Tower or Ansible
    AWX will allow your users, colleagues, and end users to consume the playbooks
    you write in a supported and consistent way.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信您会同意，使用诸如Ansible Tower或Ansible AWX这样的工具将允许您的用户、同事和最终用户以受支持和一致的方式使用您编写的playbooks。
- en: In the next chapter, we are going to look at the `ansible-galaxy` command and
    services in more detail.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更详细地了解`ansible-galaxy`命令和服务。
- en: Questions
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: State and explain the differences between Ansible Tower and Ansible AWX.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阐明Ansible Tower和Ansible AWX之间的区别并解释。
- en: Using Ansible AWX, configure and run the AWS WordPress playbook as we did with
    Ansible Tower.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Ansible AWX，配置并运行AWS WordPress playbook，就像我们在Ansible Tower中所做的那样。
- en: Further reading
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more details on the two pieces of software, see the following URLs:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 有关这两个软件的更多详细信息，请参阅以下网址：
- en: '**Ansible Tower overview**: [https://www.ansible.com/products/tower/](https://www.ansible.com/products/tower/)'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ansible Tower概述**: [https://www.ansible.com/products/tower/](https://www.ansible.com/products/tower/)'
- en: '**Ansible Tower full feature list**: [https://www.ansible.com/products/tower/editions/](https://www.ansible.com/products/tower/editions/)'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ansible Tower完整功能列表**: [https://www.ansible.com/products/tower/editions/](https://www.ansible.com/products/tower/editions/)'
- en: '**Ansible AWX announcement**: [https://www.redhat.com/en/about/press-releases/red-hat-advances-enterprise-and-network-automation-new-ansible-offerings/](https://www.redhat.com/en/about/press-releases/red-hat-advances-enterprise-and-network-automation-new-ansible-offerings/)'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ansible AWX公告**: [https://www.redhat.com/en/about/press-releases/red-hat-advances-enterprise-and-network-automation-new-ansible-offerings/](https://www.redhat.com/en/about/press-releases/red-hat-advances-enterprise-and-network-automation-new-ansible-offerings/)'
- en: '**Ansible AWX FAQ**: [https://www.ansible.com/products/awx-project/faq/](https://www.ansible.com/products/awx-project/faq/)'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ansible AWX常见问题**: [https://www.ansible.com/products/awx-project/faq/](https://www.ansible.com/products/awx-project/faq/)'
- en: '**Ansible AWX GitHub repository**: [https://github.com/ansible/awx/](https://github.com/ansible/awx/)'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ansible AWX GitHub存储库**: [https://github.com/ansible/awx/](https://github.com/ansible/awx/)'
