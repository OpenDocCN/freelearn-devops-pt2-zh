["```\n$ export AWS_ACCESS_KEY=AKIAI5KECPOTNTTVM3EDA $ export AWS_SECRET_KEY=Y4B7FFiSWl0Am3VIFc07lgnc/TAtK5+RpxzIGTr\n```", "```\n$ echo $AWS_ACCESS_KEY\n```", "```\n$ mkdir vpc vpc/group_vars vpc/roles $ touch vpc/production vpc/site.yml vpc/group_vars/common.yml\n$ cd vpc\n```", "```\n$ ansible-galaxy init roles/vpc\n```", "```\n- name: ensure that the VPC is present\n  ec2_vpc_net:\n    region: \"{{ ec2_region }}\"\n    name: \"{{ environment_name }}\"\n    state: present\n    cidr_block: \"{{ vpc_cidr_block }}\"\n    resource_tags: { \"Name\" : \"{{ environment_name }}\", \"Environment\" : \"{{ environment_name }}\" }\n  register: vpc_info\n\n# - name: print the information we have registered\n#   debug:\n#     msg: \"{{ vpc_info }}\"\n```", "```\nenvironment_name: \"my-vpc\"\nec2_region: \"eu-west-1\"\n```", "```\nvpc_cidr_block: \"10.0.0.0/16\"\n```", "```\n- name: Create and configure an Amazon VPC\n  hosts: localhost\n  connection: local\n  gather_facts: True\n\n  vars_files:\n    - group_vars/common.yml\n    - group_vars/firewall.yml\n    - group_vars/secrets.yml\n    - group_vars/words.yml\n    - group_vars/keys.yml\n\n  roles:\n    - roles/vpc\n```", "```\n$ ansible-playbook site.yml\n```", "```\n[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit\nlocalhost does not match 'all'\n\nPLAY [Create and configure an Amazon VPC] *******************************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [localhost]\n\nTASK [roles/vpc : ensure that the VPC is present] ***********************************************\nchanged: [localhost]\n\nTASK [roles/vpc : print the information we have registered] *************************************\nok: [localhost] => {\n \"msg\": {\n \"changed\": true,\n \"failed\": false,\n \"vpc\": {\n \"cidr_block\": \"10.0.0.0/16\",\n \"cidr_block_association_set\": [\n {\n \"association_id\": \"vpc-cidr-assoc-1eee5575\",\n \"cidr_block\": \"10.0.0.0/16\",\n \"cidr_block_state\": {\n \"state\": \"associated\"\n }\n }\n ],\n \"classic_link_enabled\": false,\n \"dhcp_options_id\": \"dopt-44851321\",\n \"id\": \"vpc-ccef75aa\",\n \"instance_tenancy\": \"default\",\n \"is_default\": false,\n \"state\": \"available\",\n \"tags\": {\n \"Environment\": \"my-vpc\",\n \"Name\": \"my-vpc\"\n }\n }\n }\n}\n\nPLAY RECAP **************************************************************************************\nlocalhost : ok=3 changed=1 unreachable=0 failed=0\n```", "```\n$ ansible-galaxy init roles/subnets\n```", "```\nthe_subnets:\n  - { use: 'ec2', az: 'a', subnet: '10.0.10.0/24' }\n  - { use: 'ec2', az: 'b', subnet: '10.0.11.0/24' }\n  - { use: 'ec2', az: 'c', subnet: '10.0.12.0/24' }\n  - { use: 'elb', az: 'a', subnet: '10.0.20.0/24' }\n  - { use: 'elb', az: 'b', subnet: '10.0.21.0/24' }\n  - { use: 'elb', az: 'c', subnet: '10.0.22.0/24' }\n  - { use: 'rds', az: 'a', subnet: '10.0.30.0/24' }\n  - { use: 'rds', az: 'b', subnet: '10.0.31.0/24' }\n  - { use: 'efs', az: 'b', subnet: '10.0.40.0/24' }\n  - { use: 'efs', az: 'c', subnet: '10.0.41.0/24' }\n```", "```\n- name: ensure that the subnets are present\n  ec2_vpc_subnet:\n    region: \"{{ ec2_region }}\"\n    state: present\n    vpc_id: \"{{ vpc_info.vpc.id }}\"\n    cidr: \"{{ item.subnet }}\"\n    az: \"{{ ec2_region }}{{ item.az }}\"\n    resource_tags: \n      \"Name\" : \"{{ environment_name }}_{{ item.use }}_{{ ec2_region }}{{ item.az }}\"\n      \"Environment\" : \"{{ environment_name }}\"\n      \"Use\" : \"{{ item.use }}\"\n  with_items: \"{{ the_subnets }}\"\n```", "```\n- name: gather information about the ec2 subnets\n  ec2_vpc_subnet_facts:\n    region: \"{{ ec2_region }}\"\n    filters:\n      \"tag:Use\": \"ec2\"\n      \"tag:Environment\": \"{{ environment_name }}\"\n  register: subnets_ec2\n\n- name: gather information about the elb subnets\n  ec2_vpc_subnet_facts:\n    region: \"{{ ec2_region }}\"\n    filters:\n      \"tag:Use\": \"elb\"\n      \"tag:Environment\": \"{{ environment_name }}\"\n  register: subnets_elb\n\n- name: gather information about the rds subnets\n  ec2_vpc_subnet_facts:\n    region: \"{{ ec2_region }}\"\n    filters:\n      \"tag:Use\": \"rds\"\n      \"tag:Environment\": \"{{ environment_name }}\"\n  register: subnets_rds\n\n- name: gather information about the efs subnets\n  ec2_vpc_subnet_facts:\n    region: \"{{ ec2_region }}\"\n    filters:\n      \"tag:Use\": \"efs\"\n      \"tag:Environment\": \"{{ environment_name }}\"\n  register: subnets_efs\n```", "```\n- name: register just the IDs for each of the subnets\n  set_fact:\n    subnet_ec2_ids: \"{{ subnets_ec2.subnets | map(attribute='id') | list  }}\"\n    subnet_elb_ids: \"{{ subnets_elb.subnets | map(attribute='id') | list  }}\"\n    subnet_rds_ids: \"{{ subnets_rds.subnets | map(attribute='id') | list  }}\"\n    subnet_efs_ids: \"{{ subnets_efs.subnets | map(attribute='id') | list  }}\"\n```", "```\n# - name: print all the ids we have registered\n#   debug:\n#     msg: \"{{ subnet_ec2_ids + subnet_elb_ids + subnet_rds_ids\n      + subnet_efs_ids }}\"\n```", "```\n- name: Create and configure an Amazon VPC\n  hosts: localhost\n  connection: local\n  gather_facts: True\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - roles/vpc\n    - roles/subnets\n```", "```\n$ ansible-playbook site.yml\n```", "```\n[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'\n\nPLAY [Create and configure an Amazon VPC] *******************************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [localhost]\n\nTASK [roles/vpc : ensure that the VPC is present] ***********************************************\nok: [localhost]\n\nTASK [roles/subnets : ensure that the subnets are present] **************************************\nchanged: [localhost] => (item={u'subnet': u'10.0.10.0/24', u'use': u'ec2', u'az': u'a'})\nchanged: [localhost] => (item={u'subnet': u'10.0.11.0/24', u'use': u'ec2', u'az': u'b'})\nchanged: [localhost] => (item={u'subnet': u'10.0.12.0/24', u'use': u'ec2', u'az': u'c'})\nchanged: [localhost] => (item={u'subnet': u'10.0.20.0/24', u'use': u'elb', u'az': u'a'})\nchanged: [localhost] => (item={u'subnet': u'10.0.21.0/24', u'use': u'elb', u'az': u'b'})\nchanged: [localhost] => (item={u'subnet': u'10.0.22.0/24', u'use': u'elb', u'az': u'c'})\nchanged: [localhost] => (item={u'subnet': u'10.0.30.0/24', u'use': u'rds', u'az': u'a'})\nchanged: [localhost] => (item={u'subnet': u'10.0.31.0/24', u'use': u'rds', u'az': u'b'})\nchanged: [localhost] => (item={u'subnet': u'10.0.40.0/24', u'use': u'efs', u'az': u'b'})\nchanged: [localhost] => (item={u'subnet': u'10.0.41.0/24', u'use': u'efs', u'az': u'c'})\n\n```", "```\nTASK [roles/subnets : gather information about the ec2 subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : gather information about the elb subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : gather information about the rds subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : gather information about the efs subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : register just the IDs for each of the subnets] ****************************\nok: [localhost]\n\nTASK [roles/subnets : print all the ids we have registered] *************************************\nok: [localhost] => {\n \"msg\": [\n \"subnet-2951e761\",\n \"subnet-24ea4a42\",\n \"subnet-fce80ba6\",\n \"subnet-6744f22f\",\n \"subnet-64eb083e\",\n \"subnet-51f15137\",\n \"subnet-154ef85d\",\n \"subnet-19e9497f\",\n \"subnet-4340f60b\",\n \"subnet-5aea0900\"\n ]\n}\n\nPLAY RECAP **************************************************************************************\nlocalhost : ok=9 changed=1 unreachable=0 failed=0\n```", "```\n$ ansible-galaxy init roles/gateway\n```", "```\n- name: ensure that there is an internet gateway\n  ec2_vpc_igw:\n    region: \"{{ ec2_region }}\"\n    vpc_id: \"{{ vpc_info.vpc.id }}\"\n    state: present\n    tags:\n      \"Name\": \"{{ environment_name }}_internet_gateway\"\n      \"Environment\": \"{{ environment_name }}\"\n      \"Use\": \"gateway\"\n  register: igw_info\n```", "```\n# - name: print the information we have registered\n#   debug:\n#     msg: \"{{ igw_info }}\"\n```", "```\n- name: check that we can route through internet gateway\n  ec2_vpc_route_table:\n    region: \"{{ ec2_region }}\"\n    vpc_id: \"{{ vpc_info.vpc.id }}\"\n    subnets: \"{{ subnet_ec2_ids + subnet_elb_ids }}\"\n    routes:\n      - dest: 0.0.0.0/0\n        gateway_id: \"{{ igw_info.gateway_id }}\"\n    resource_tags:\n      \"Name\": \"{{ environment_name }}_outbound\"\n      \"Environment\": \"{{ environment_name }}\"\n```", "```\n- name: Create and configure an Amazon VPC\n  hosts: localhost\n  connection: local\n  gather_facts: True\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - roles/vpc\n    - roles/subnets\n    - roles/gateway\n```", "```\n$ ansible-playbook site.yml\n```", "```\n[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'\n\nPLAY [Create and configure an Amazon VPC] *******************************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [localhost]\n\nTASK [roles/vpc : ensure that the VPC is present] ***********************************************\nok: [localhost]\n\nTASK [roles/subnets : ensure that the subnets are present] **************************************\nok: [localhost] => (item={u'subnet': u'10.0.10.0/24', u'use': u'ec2', u'az': u'a'})\nok: [localhost] => (item={u'subnet': u'10.0.11.0/24', u'use': u'ec2', u'az': u'b'})\nok: [localhost] => (item={u'subnet': u'10.0.12.0/24', u'use': u'ec2', u'az': u'c'})\nok: [localhost] => (item={u'subnet': u'10.0.20.0/24', u'use': u'elb', u'az': u'a'})\nok: [localhost] => (item={u'subnet': u'10.0.21.0/24', u'use': u'elb', u'az': u'b'})\nok: [localhost] => (item={u'subnet': u'10.0.22.0/24', u'use': u'elb', u'az': u'c'})\nok: [localhost] => (item={u'subnet': u'10.0.30.0/24', u'use': u'rds', u'az': u'a'})\nok: [localhost] => (item={u'subnet': u'10.0.31.0/24', u'use': u'rds', u'az': u'b'})\nok: [localhost] => (item={u'subnet': u'10.0.40.0/24', u'use': u'efs', u'az': u'b'})\nok: [localhost] => (item={u'subnet': u'10.0.41.0/24', u'use': u'efs', u'az': u'c'})\n\nTASK [roles/subnets : gather information about the ec2 subnets] *********************************\nok: [localhost]\n\n```", "```\nTASK [roles/subnets : gather information about the elb subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : gather information about the rds subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : gather information about the efs subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : register just the IDs for each of the subnets] ****************************\nok: [localhost]\n\nTASK [roles/gateway : ensure that there is an internet gateway] *********************************\nchanged: [localhost]\n\nTASK [roles/gateway : print the information we have registered] *********************************\nok: [localhost] => {\n \"msg\": {\n \"changed\": true,\n \"failed\": false,\n \"gateway_id\": \"igw-a74235c0\",\n \"tags\": {\n \"Environment\": \"my-vpc\",\n \"Name\": \"my-vpc_internet_gateway\",\n \"Use\": \"gateway\"\n },\n \"vpc_id\": \"vpc-ccef75aa\"\n }\n}\n\nTASK [roles/gateway : check that we can route through internet gateway] *************************\nchanged: [localhost]\n\nPLAY RECAP **************************************************************************************\nlocalhost : ok=11 changed=2 unreachable=0 failed=0\n```", "```\n$ ansible-galaxy init roles/securitygroups\n```", "```\n- name: provision elb security group\n  ec2_group:\n    region: \"{{ ec2_region }}\"\n    vpc_id: \"{{ vpc_info.vpc.id }}\"\n    name: \"{{ environment_name }}-elb\"\n    description: \"opens port 80 and 443 to the world\"\n    tags:\n      \"Name\": \"{{ environment_name }}-elb\"\n      \"Environment\": \"{{ environment_name }}\"\n    rules:\n      - proto: \"tcp\"\n        from_port: \"80\"\n        to_port: \"80\"\n        cidr_ip: \"0.0.0.0/0\"\n        rule_desc: \"allow all on port 80\"\n      - proto: \"tcp\"\n        from_port: \"443\"\n        to_port: \"443\"\n        cidr_ip: \"0.0.0.0/0\"\n        rule_desc: \"allow all on port 443\"\n  register: sg_elb\n```", "```\n- name: find out your current public IP address using https://ipify.org/\n  ipify_facts:\n  register: public_ip\n\n- name: set your public ip as a fact\n  set_fact:\n    your_public_ip: \"{{ public_ip.ansible_facts.ipify_public_ip }}/32\"\n\n# - name: print your public ip address\n#   debug:\n#     msg: \"Your public IP address is {{ your_public_ip }}\"\n```", "```\n- name: provision ec2 security group\n  ec2_group:\n    region: \"{{ ec2_region }}\"\n    vpc_id: \"{{ vpc_info.vpc.id }}\"\n    name: \"{{ environment_name }}-ec2\"\n    description: \"opens port 22 to a trusted IP and port 80 to the elb group\"\n    tags:\n      \"Name\": \"{{ environment_name }}-ec2\"\n      \"Environment\": \"{{ environment_name }}\"\n    rules:\n      - proto: \"tcp\"\n        from_port: \"22\"\n        to_port: \"22\"\n        cidr_ip: \"{{ your_public_ip }}\"\n        rule_desc: \"allow {{ your_public_ip }} access to port 22\"\n      - proto: \"tcp\"\n        from_port: \"80\"\n        to_port: \"80\"\n        group_id: \"{{ sg_elb.group_id }}\"\n        rule_desc: \"allow {{ sg_elb.group_id }} access to port 80\"\n  register: sg_ec2\n```", "```\n- name: provision rds security group\n  ec2_group:\n    region: \"{{ ec2_region }}\"\n    vpc_id: \"{{ vpc_info.vpc.id }}\"\n    name: \"{{ environment_name }}-rds\"\n    description: \"opens port 3306 to the ec2 instances\"\n    tags:\n      \"Name\": \"{{ environment_name }}-rds\"\n      \"Environment\": \"{{ environment_name }}\"\n    rules:\n      - proto: \"tcp\"\n        from_port: \"3306\"\n        to_port: \"3306\"\n        group_id: \"{{ sg_ec2.group_id }}\"\n        rule_desc: \"allow {{ sg_ec2.group_id }} access to port 3306\"\n  register: sg_rds\n\n- name: provision efs security group\n  ec2_group:\n    region: \"{{ ec2_region }}\"\n    vpc_id: \"{{ vpc_info.vpc.id }}\"\n    name: \"{{ environment_name }}-efs\"\n    description: \"opens port 2049 to the ec2 instances\"\n    tags:\n      \"Name\": \"{{ environment_name }}-efs\"\n      \"Environment\": \"{{ environment_name }}\"\n    rules:\n      - proto: \"tcp\"\n        from_port: \"2049\"\n        to_port: \"2049\"\n        group_id: \"{{ sg_ec2.group_id }}\"\n        rule_desc: \"allow {{ sg_ec2.group_id }} access to port 2049\"\n  register: sg_efs\n```", "```\n# - name: print all the ids we have registered\n#   debug:\n#     msg: \"ELB = {{ sg_elb.group_id }}, EC2 = {{ sg_ec2.group_id }}, RDS = {{ sg_rds.group_id }} and EFS = {{ sg_efs.group_id }}\"\n```", "```\n$ ansible-playbook site.yml\n```", "```\n[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'\n\nPLAY [Create and configure an Amazon VPC] *******************************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [localhost]\n\nTASK [roles/vpc : ensure that the VPC is present] ***********************************************\nok: [localhost]\n\nTASK [roles/subnets : ensure that the subnets are present] **************************************\nok: [localhost] => (item={u'subnet': u'10.0.10.0/24', u'use': u'ec2', u'az': u'a'})\nok: [localhost] => (item={u'subnet': u'10.0.11.0/24', u'use': u'ec2', u'az': u'b'})\nok: [localhost] => (item={u'subnet': u'10.0.12.0/24', u'use': u'ec2', u'az': u'c'})\nok: [localhost] => (item={u'subnet': u'10.0.20.0/24', u'use': u'elb', u'az': u'a'})\nok: [localhost] => (item={u'subnet': u'10.0.21.0/24', u'use': u'elb', u'az': u'b'})\nok: [localhost] => (item={u'subnet': u'10.0.22.0/24', u'use': u'elb', u'az': u'c'})\nok: [localhost] => (item={u'subnet': u'10.0.30.0/24', u'use': u'rds', u'az': u'a'})\nok: [localhost] => (item={u'subnet': u'10.0.31.0/24', u'use': u'rds', u'az': u'b'})\nok: [localhost] => (item={u'subnet': u'10.0.40.0/24', u'use': u'efs', u'az': u'b'})\nok: [localhost] => (item={u'subnet': u'10.0.41.0/24', u'use': u'efs', u'az': u'c'})\n\nTASK [roles/subnets : gather information about the ec2 subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : gather information about the elb subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : gather information about the rds subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : gather information about the efs subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : register just the IDs for each of the subnets] ****************************\nok: [localhost]\n\nTASK [roles/gateway : ensure that there is an internet gateway] *********************************\nok: [localhost]\n\nTASK [roles/gateway : check that we can route through internet gateway] *************************\nok: [localhost]\n\nTASK [roles/securitygroups : provision elb security group] **************************************\nchanged: [localhost]\n\nTASK [roles/securitygroups : find out your current public IP address using https://ipify.org/] **\nok: [localhost]\n\n```", "```\nTASK [roles/securitygroups : set your public ip as a fact] **************************************\nok: [localhost]\n\nTASK [roles/securitygroups : print your public ip address] **************************************\nok: [localhost] => {\n \"msg\": \"Your public IP address is 109.153.155.197/32\"\n}\n\nTASK [roles/securitygroups : provision ec2 security group] **************************************\nchanged: [localhost]\n\nTASK [roles/securitygroups : provision rds security group] **************************************\nchanged: [localhost]\n\nTASK [roles/securitygroups : provision efs security group] **************************************\nchanged: [localhost]\n\nTASK [roles/securitygroups : print all the ids we have registered] ******************************\nok: [localhost] => {\n \"msg\": \"ELB = sg-97778eea, EC2 = sg-fa778e87, RDS = sg-8e7089f3 and EFS = sg-7b718806\"\n}\n\nPLAY RECAP **************************************************************************************\nlocalhost : ok=18 changed=4 unreachable=0 failed=0\n```", "```\n$ ansible-galaxy init roles/elb\n```", "```\n- name: provision the target group\n  elb_target_group:\n    name: \"{{ environment_name }}-target-group\"\n    region: \"{{ ec2_region }}\"\n    protocol: \"http\"\n    port: \"80\"\n    deregistration_delay_timeout: \"15\"\n    vpc_id: \"{{ vpc_info.vpc.id }}\"\n    state: \"present\"\n    modify_targets: \"false\"\n```", "```\n- name: provision an application elastic load balancer\n  elb_application_lb:\n    region: \"{{ ec2_region }}\"\n    name: \"{{ environment_name }}-elb\"\n    security_groups: \"{{ sg_elb.group_id }}\"\n    subnets: \"{{ subnet_elb_ids }}\"\n    listeners:\n      - Protocol: \"HTTP\" \n        Port: \"80\"\n        DefaultActions:\n          - Type: \"forward\" \n            TargetGroupName: \"{{ environment_name }}-target-group\"\n    state: present\n  register: loadbalancer\n```", "```\n# - name: print the information on the load balancer we have registered\n#   debug:\n#     msg: \"{{ loadbalancer }}\"\n```", "```\n- name: Create and configure an Amazon VPC\n  hosts: localhost\n  connection: local\n  gather_facts: True\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - roles/vpc\n    - roles/subnets\n    - roles/gateway\n    - roles/securitygroups\n    - roles/elb\n```", "```\n$ ansible-playbook site.yml\n```", "```\n[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'\n\nPLAY [Create and configure an Amazon VPC] *******************************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [localhost]\n\nTASK [roles/vpc : ensure that the VPC is present] ***********************************************\nok: [localhost]\n\nTASK [roles/subnets : ensure that the subnets are present] **************************************\nok: [localhost] => (item={u'subnet': u'10.0.10.0/24', u'use': u'ec2', u'az': u'a'})\nok: [localhost] => (item={u'subnet': u'10.0.11.0/24', u'use': u'ec2', u'az': u'b'})\nok: [localhost] => (item={u'subnet': u'10.0.12.0/24', u'use': u'ec2', u'az': u'c'})\nok: [localhost] => (item={u'subnet': u'10.0.20.0/24', u'use': u'elb', u'az': u'a'})\nok: [localhost] => (item={u'subnet': u'10.0.21.0/24', u'use': u'elb', u'az': u'b'})\nok: [localhost] => (item={u'subnet': u'10.0.22.0/24', u'use': u'elb', u'az': u'c'})\nok: [localhost] => (item={u'subnet': u'10.0.30.0/24', u'use': u'rds', u'az': u'a'})\nok: [localhost] => (item={u'subnet': u'10.0.31.0/24', u'use': u'rds', u'az': u'b'})\nok: [localhost] => (item={u'subnet': u'10.0.40.0/24', u'use': u'efs', u'az': u'b'})\nok: [localhost] => (item={u'subnet': u'10.0.41.0/24', u'use': u'efs', u'az': u'c'})\n\nTASK [roles/subnets : gather information about the ec2 subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : gather information about the elb subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : gather information about the rds subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : gather information about the efs subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : register just the IDs for each of the subnets] ****************************\nok: [localhost]\n\nTASK [roles/gateway : ensure that there is an internet gateway] *********************************\nok: [localhost]\n\nTASK [roles/gateway : check that we can route through internet gateway] *************************\nok: [localhost]\n\nTASK [roles/securitygroups : provision elb security group] **************************************\nok: [localhost]\n\nTASK [roles/securitygroups : find out your current public IP address using https://ipify.org/] **\nok: [localhost]\n\nTASK [roles/securitygroups : set your public ip as a fact] **************************************\nok: [localhost]\n\nTASK [roles/securitygroups : provision ec2 security group] **************************************\nok: [localhost]\n\nTASK [roles/securitygroups : provision rds security group] **************************************\nok: [localhost]\n\nTASK [roles/securitygroups : provision efs security group] **************************************\nok: [localhost]\n\nTASK [roles/elb : provision the target group] ***************************************************\nchanged: [localhost]\n\nTASK [roles/elb : provision an application elastic load balancer] *******************************\nchanged: [localhost]\n\nTASK [roles/elb : print the information on the load balancer we have registered] ****************\nok: [localhost] => {\n \"msg\": {\n \"access_logs_s3_bucket\": \"\",\n \"access_logs_s3_enabled\": \"false\",\n \"access_logs_s3_prefix\": \"\",\n \"attempts\": 1,\n \"availability_zones\": [\n {\n \"subnet_id\": \"subnet-51f15137\",\n \"zone_name\": \"eu-west-1a\"\n },\n {\n \"subnet_id\": \"subnet-64eb083e\",\n \"zone_name\": \"eu-west-1c\"\n },\n {\n \"subnet_id\": \"subnet-6744f22f\",\n \"zone_name\": \"eu-west-1b\"\n }\n ],\n \"canonical_hosted_zone_id\": \"Z32O12XQLNTSW2\",\n \"changed\": true,\n \"created_time\": \"2018-04-22T16:12:31.780000+00:00\",\n \"deletion_protection_enabled\": \"false\",\n \"dns_name\": \"my-vpc-elb-374523105.eu-west-1.elb.amazonaws.com\",\n \"failed\": false,\n \"idle_timeout_timeout_seconds\": \"60\",\n \"ip_address_type\": \"ipv4\",\n \"listeners\": [\n {\n \"default_actions\": [\n {\n \"target_group_arn\": \"arn:aws:elasticloadbalancing:eu-west-1:687011238589:targetgroup/my-vpc-target-group/d5bab5efb2d314a8\",\n \"type\": \"forward\"\n }\n ],\n \"listener_arn\": \"arn:aws:elasticloadbalancing:eu-west-1:687011238589:listener/app/my-vpc-elb/98dd881c7a931ab3/3f4be2b480657bf9\",\n \"load_balancer_arn\": \"arn:aws:elasticloadbalancing:eu-west-1:687011238589:loadbalancer/app/my-vpc-elb/98dd881c7a931ab3\",\n \"port\": 80,\n \"protocol\": \"HTTP\",\n \"rules\": [\n {\n \"actions\": [\n {\n \"target_group_arn\": \"arn:aws:elasticloadbalancing:eu-west-1:687011238589:targetgroup/my-vpc-target-group/d5bab5efb2d314a8\",\n \"type\": \"forward\"\n }\n ],\n \"conditions\": [],\n \"is_default\": true,\n \"priority\": \"default\",\n \"rule_arn\": \"arn:aws:elasticloadbalancing:eu-west-1:687011238589:listener-rule/app/my-vpc-elb/98dd881c7a931ab3/3f4be2b480657bf9/c70feab5b31460c2\"\n }\n ]\n }\n ],\n \"load_balancer_arn\": \"arn:aws:elasticloadbalancing:eu-west-1:687011238589:loadbalancer/app/my-vpc-elb/98dd881c7a931ab3\",\n \"load_balancer_name\": \"my-vpc-elb\",\n \"routing_http2_enabled\": \"true\",\n \"scheme\": \"internet-facing\",\n \"security_groups\": [\n \"sg-97778eea\"\n ],\n \"state\": {\n \"code\": \"provisioning\"\n },\n \"tags\": {},\n \"type\": \"application\",\n \"vpc_id\": \"vpc-ccef75aa\"\n }\n}\n\n```", "```\nPLAY RECAP ******************************************************************************************************************************\nlocalhost : ok=19 changed=2 unreachable=0 failed=0\n```"]