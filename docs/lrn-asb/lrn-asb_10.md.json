["```\n$ mkdir aws-wordpress aws-wordpress/group_vars aws-wordpress/roles $ touch aws-wordpress/production aws-wordpress/site.yml aws-wordpress/group_vars/common.yml\n```", "```\n- name: Create and configure an Amazon VPC\n  hosts: localhost\n  connection: local\n  gather_facts: True\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - roles/vpc\n    - roles/subnets\n    - roles/gateway\n    - roles/securitygroups\n    - roles/elb\n```", "```\n---\n# the common variables\n\nenvironment_name: \"wordpress\"\nec2_region: \"eu-west-1\"\n```", "```\nthe_subnets:\n  - { use: 'ec2', az: 'a', subnet: '10.0.10.0/24' }\n  - { use: 'ec2', az: 'b', subnet: '10.0.11.0/24' }\n  - { use: 'ec2', az: 'c', subnet: '10.0.12.0/24' }\n  - { use: 'elb', az: 'a', subnet: '10.0.20.0/24' }\n  - { use: 'elb', az: 'b', subnet: '10.0.21.0/24' }\n  - { use: 'elb', az: 'c', subnet: '10.0.22.0/24' }\n  - { use: 'rds', az: 'a', subnet: '10.0.30.0/24' }\n  - { use: 'rds', az: 'b', subnet: '10.0.31.0/24' }\n  - { use: 'efs', az: 'a', subnet: '10.0.40.0/24' }\n  - { use: 'efs', az: 'b', subnet: '10.0.41.0/24' }\n  - { use: 'efs', az: 'c', subnet: '10.0.42.0/24' }\n```", "```\n$ ansible-galaxy init roles/rds\n```", "```\nrds:\n  db_username: \"{{ environment_name }}\"\n  db_password: \"{{ lookup('password', 'group_vars/rds_passwordfile chars=ascii_letters,digits length=30') }}\"\n  db_name: \"{{ environment_name }}\"\n  app_instance_type: \"db.t2.micro\"\n  engine: \"mariadb\"\n  hdd_size: \"5\"\n  no_of_backups: \"7\"\n  multi_az: \"yes\"\n  wait: \"yes\"\n  wait_time: \"1200\"\n```", "```\n- name: create RDS subnet group\n  rds_subnet_group:\n    region: \"{{ ec2_region }}\"\n    state: present\n    name: \"{{ environment_name }}_rds_group\"\n    description: \"RDS Group for {{ environment_name }}\"\n    subnets: \"{{ subnet_rds_ids }}\"\n```", "```\n- name: launch the rds instance\n  rds:\n    region: \"{{ ec2_region }}\"\n    command: \"create\"\n    instance_name: \"{{ environment_name }}-rds\"\n    db_engine: \"{{ rds.engine }}\"\n    size: \"{{ rds.hdd_size }}\"\n    backup_retention: \"{{ rds.no_of_backups }}\"\n    instance_type: \"{{ rds.app_instance_type }}\"\n    multi_zone: \"{{ rds.multi_az }}\"\n    subnet: \"{{ environment_name }}_rds_group\"\n    vpc_security_groups: \"{{ sg_rds.group_id }}\"\n    username: \"{{ rds.db_username }}\"\n    password: \"{{ rds.db_password }}\"\n    db_name: \"{{ rds.db_name }}\"\n    wait: \"{{ rds.wait }}\"\n    wait_timeout: \"{{ rds.wait_time }}\"\n    tags:\n      Name: \"{{ environment_name }}-rds\"\n      Environment: \"{{ environment_name }}\"\n```", "```\n$ ansible-galaxy init roles/efs\n```", "```\nefs:\n  wait: \"yes\"\n  wait_time: \"1200\"\n```", "```\n---\n\nefs_targets:\n{% for item in subnet_efs_ids %}\n      - subnet_id: \"{{ item }}\"\n        security_groups: [ \"{{ sg_efs.group_id }}\" ]\n{% endfor %}\n```", "```\n- name: generate the efs targets file\n  template:\n    src: \"targets.j2\"\n```", "```\n    dest: \"group_vars/generated_efs_targets.yml\"\n\n- name: load the efs targets\n  include_vars: \"group_vars/generated_efs_targets.yml\"\n```", "```\n- name: create the efs volume\n  efs:\n    region: \"{{ ec2_region }}\"\n    state: present\n    name: \"{{ environment_name }}-efs\"\n    tags:\n        Name: \"{{ environment_name }}-efs\"\n        Environment: \"{{ environment_name }}\"\n    targets: \"{{ efs_targets }}\"\n    wait: \"{{ efs.wait }}\"\n    wait_timeout: \"{{ efs.wait_time }}\"\n```", "```\n- name: create the efs volume\n  efs:\n    region: \"{{ ec2_region }}\"\n    state: present\n    name: \"{{ environment_name }}-efs\"\n    tags:\n        Name: \"{{ environment_name }}-efs\"\n        Environment: \"{{ environment_name }}\"\n    targets:\n      - subnet_id: \"{{ item }}\"\n        security_groups: [ \"{{ sg_efs.group_id }}\" ]\n    wait: \"{{ efs.wait }}\"\n    wait_timeout: \"{{ efs.wait_time }}\"\n  with_items: \"{{ subnet_efs_ids }}\"\n```", "```\nefs_targets:\n      - subnet_id: \"subnet-0ce64b6a\"\n        security_groups: [ \"sg-695f8b14\" ]\n      - subnet_id: \"subnet-2598747f\"\n        security_groups: [ \"sg-695f8b14\" ]\n      - subnet_id: \"subnet-ee3487a6\"\n        security_groups: [ \"sg-695f8b14\" ]\n```", "```\n---\n\n- name: Create, launch and configure our basic AWS environment\n  hosts: localhost\n  connection: local\n  gather_facts: True\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - roles/vpc\n    - roles/subnets\n    - roles/gateway\n    - roles/securitygroups\n    - roles/elb\n    - roles/rds\n    - roles/efs\n```", "```\n$ export AWS_ACCESS_KEY=AKIAI5KECPOTNTTVM3EDA $ export AWS_SECRET_KEY=Y4B7FFiSWl0Am3VIFc07lgnc/TAtK5+RpxzIGTr\n```", "```\n$ time ansible-playbook -i production site.yml\n```", "```\n[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit\nlocalhost does not match 'all'\n\nPLAY [Create, launch and configure our basic AWS environment] ************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [localhost]\n\nTASK [roles/vpc : ensure that the VPC is present] ***********************************************\nchanged: [localhost]\n\nTASK [roles/subnets : ensure that the subnets are present] **************************************\nchanged: [localhost] => (item={u'subnet': u'10.0.10.0/24', u'use': u'ec2', u'az': u'a'})\nchanged: [localhost] => (item={u'subnet': u'10.0.11.0/24', u'use': u'ec2', u'az': u'b'})\nchanged: [localhost] => (item={u'subnet': u'10.0.12.0/24', u'use': u'ec2', u'az': u'c'})\nchanged: [localhost] => (item={u'subnet': u'10.0.20.0/24', u'use': u'elb', u'az': u'a'})\nchanged: [localhost] => (item={u'subnet': u'10.0.21.0/24', u'use': u'elb', u'az': u'b'})\nchanged: [localhost] => (item={u'subnet': u'10.0.22.0/24', u'use': u'elb', u'az': u'c'})\nchanged: [localhost] => (item={u'subnet': u'10.0.30.0/24', u'use': u'rds', u'az': u'a'})\nchanged: [localhost] => (item={u'subnet': u'10.0.31.0/24', u'use': u'rds', u'az': u'b'})\nchanged: [localhost] => (item={u'subnet': u'10.0.40.0/24', u'use': u'efs', u'az': u'a'})\nchanged: [localhost] => (item={u'subnet': u'10.0.41.0/24', u'use': u'efs', u'az': u'b'})\nchanged: [localhost] => (item={u'subnet': u'10.0.42.0/24', u'use': u'efs', u'az': u'c'})\n\nTASK [roles/subnets : gather information about the ec2 subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : gather information about the elb subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : gather information about the rds subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : gather information about the efs subnets] *********************************\nok: [localhost]\n\nTASK [roles/subnets : register just the IDs for each of the subnets] ****************************\nok: [localhost]\n\nTASK [roles/gateway : ensure that there is an internet gateway] *********************************\nchanged: [localhost]\n\nTASK [roles/gateway : check that we can route through internet gateway] *************************\nchanged: [localhost]\n\nTASK [roles/securitygroups : provision elb security group] **************************************\nchanged: [localhost]\n\nTASK [roles/securitygroups : find out your current public IP address using https://ipify.org/] *****\nok: [localhost]\n\nTASK [roles/securitygroups : set your public ip as a fact] **************************************\nok: [localhost]\n\nTASK [roles/securitygroups : provision ec2 security group] **************************************\nchanged: [localhost]\n\nTASK [roles/securitygroups : provision rds security group] **************************************\nchanged: [localhost]\n\nTASK [roles/securitygroups : provision efs security group] **************************************\nchanged: [localhost]\n\nTASK [roles/elb : provision the target group] ***************************************************\nchanged: [localhost]\n\nTASK [roles/elb : provision an application elastic load balancer] *******************************\nchanged: [localhost]\n\nTASK [roles/rds : create RDS subnet group] ******************************************************\nchanged: [localhost]\n\nTASK [roles/rds : launch the rds instance] ******************************************************\nchanged: [localhost]\n\nTASK [roles/efs : generate the efs targets file] ************************************************\nchanged: [localhost]\n\nTASK [roles/efs : load the efs targets] *********************************************************\nok: [localhost]\n\nTASK [roles/efs : create the efs volume] ********************************************************\nchanged: [localhost]\n\nPLAY RECAP **************************************************************************************\nlocalhost : ok=23 changed=14 unreachable=0 failed=0\n```", "```\n$ ansible-galaxy init roles/remove\n```", "```\nwait:\n  wait: \"yes\"\n  wait_time: \"1200\"\n\nvpc_cidr_block: \"10.0.0.0/16\"\n```", "```\n- name: remove the efs shares\n  efs:\n    region: \"{{ ec2_region }}\"\n    state: absent\n    name: \"{{ environment_name }}-efs\"\n    wait: \"{{ wait.wait }}\"\n    wait_timeout: \"{{ wait.wait_time }}\"\n```", "```\n- name: terminate the rds instance\n  rds:\n    region: \"{{ ec2_region }}\"\n    command: \"delete\"\n    instance_name: \"{{ environment_name }}-rds\"\n    wait: \"{{ wait.wait }}\"\n    wait_timeout: \"{{ wait.wait_time }}\"\n\n- name: wait for 2 minutes before continuing\n  pause:\n    minutes: 2\n\n- name: remove RDS subnet group\n  rds_subnet_group:\n    region: \"{{ ec2_region }}\"\n    state: absent\n    name: \"{{ environment_name }}_rds_group\"\n```", "```\n- name: terminate the application elastic load balancer\n  elb_application_lb:\n    region: \"{{ ec2_region }}\"\n    name: \"{{ environment_name }}-elb\"\n    state: \"absent\"\n\n- name: prompt\n  pause:\n    prompt: \"Make sure the elastic load balancer has been terminated before proceeding\"\n```", "```\n- name: remove the target group\n  elb_target_group:\n    region: \"{{ ec2_region }}\"\n    name: \"{{ environment_name }}-target-group\"\n    state: \"absent\"\n```", "```\n- name: remove the efs security group\n  ec2_group:\n    region: \"{{ ec2_region }}\"\n    name: \"{{ environment_name }}-efs\"\n    state: \"absent\"\n\n- name: wait for 30 seconds before continuing\n  pause:\n    seconds: 30\n\n- name: remove the rds security group\n  ec2_group:\n    region: \"{{ ec2_region }}\"\n    name: \"{{ environment_name }}-rds\"\n    state: \"absent\"\n\n- name: wait for 30 seconds before continuing\n  pause:\n    seconds: 30\n\n- name: remove the ec2 security group\n  ec2_group:\n    region: \"{{ ec2_region }}\"\n    name: \"{{ environment_name }}-ec2\"\n    state: \"absent\"\n\n- name: wait for 30 seconds before continuing\n  pause:\n    seconds: 30\n\n- name: remove the elb security group\n  ec2_group:\n    region: \"{{ ec2_region }}\"\n    name: \"{{ environment_name }}-elb\"\n    state: \"absent\"\n\n- name: wait for 30 seconds before continuing\n  pause:\n    seconds: 30\n```", "```\n- name: get some facts on the route table\n  ec2_vpc_route_table_facts:\n    region: \"{{ ec2_region }}\"\n    filters:\n      \"tag:Name\": \"{{ environment_name }}_outbound\"\n      \"tag:Environment\": \"{{ environment_name }}\"\n  register: route_table_facts\n\n- name: remove the route table\n  ec2_vpc_route_table:\n    region: \"{{ ec2_region }}\"\n```", "```\n    vpc_id: \"{{ route_table_facts.route_tables[0].vpc_id }}\"\n    route_table_id: \"{{ route_table_facts.route_tables[0].id }}\"\n    lookup: \"id\"\n    state: \"absent\"\n  ignore_errors: yes\n```", "```\n- name: get some facts on the vpc\n  ec2_vpc_net_facts:\n    region: \"{{ ec2_region }}\"\n    filters:\n      \"tag:Name\": \"{{ environment_name }}\"\n      \"tag:Environment\": \"{{ environment_name }}\"\n  register: vpc_facts\n\n- name: ensure that there isn't an internet gateway\n  ec2_vpc_igw:\n    region: \"{{ ec2_region }}\"\n    state: \"absent\"\n    vpc_id: \"{{ vpc_facts.vpcs[0].vpc_id }}\"\n    tags:\n      \"Name\": \"{{ environment_name }}_internet_gateway\"\n      \"Environment\": \"{{ environment_name }}\"\n  ignore_errors: yes\n```", "```\n- name: gather information about the subnets\n  ec2_vpc_subnet_facts:\n    region: \"{{ ec2_region }}\"\n```", "```\n    filters:\n      \"tag:Environment\": \"{{ environment_name }}\"\n  register: the_subnets\n```", "```\n- name: ensure that the subnets are absent\n  ec2_vpc_subnet:\n    region: \"{{ ec2_region }}\"\n    state: \"absent\"\n    vpc_id: \"{{ vpc_facts.vpcs[0].vpc_id }}\"\n    cidr: \"{{ item.cidr_block }}\"\n  with_items: \"{{ the_subnets.subnets }}\"\n```", "```\n- name: ensure that the VPC is absent\n  ec2_vpc_net:\n    region: \"{{ ec2_region }}\"\n    name: \"{{ environment_name }}\"\n    state: \"absent\"\n    cidr_block: \"{{ vpc_cidr_block }}\"\n```", "```\n---\n\n- name: Terminate everything in our basic AWS environment\n  hosts: localhost\n  connection: local\n  gather_facts: True\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - roles/remove\n```", "```\n$ time ansible-playbook -i production remove.yml\n```", "```\n[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit\nlocalhost does not match 'all'\n\nPLAY [Terminate everything in our basic AWS environment] *****************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [localhost]\n\nTASK [roles/remove : remove the efs shares] *****************************************************\nchanged: [localhost]\n\nTASK [roles/remove : terminate the rds instance] ************************************************\nchanged: [localhost]\n\nTASK [roles/remove : wait for 2 minutes before continuing] **************************************\nPausing for 120 seconds\n(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\nok: [localhost]\n\nTASK [roles/remove : remove RDS subnet group] ***************************************************\nchanged: [localhost]\n\nTASK [roles/remove : terminate the application elastic load balancer] ***************************\nchanged: [localhost]\n\nTASK [roles/remove : prompt] ********************************************************************\n[roles/remove : prompt]\nMake sure the elastic load balancer has been terminated before proceeding:\n\nok: [localhost]\n\nTASK [roles/remove : remove the target group] ***************************************************\nchanged: [localhost]\n\nTASK [roles/remove : remove the efs security group] *********************************************\nchanged: [localhost]\n\nTASK [roles/remove : wait for 30 seconds before continuing] *************************************\nPausing for 30 seconds\n(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\nok: [localhost]\n\nTASK [roles/remove : remove the rds security group] *********************************************\nchanged: [localhost]\n\nTASK [roles/remove : wait for 30 seconds before continuing] *************************************\nPausing for 30 seconds\n(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\nok: [localhost]\n\nTASK [roles/remove : remove the ec2 security group] *********************************************\nchanged: [localhost]\n\nTASK [roles/remove : wait for 30 seconds before continuing] *************************************\nPausing for 30 seconds\n(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\nok: [localhost]\n\nTASK [roles/remove : remove the elb security group] *********************************************\nchanged: [localhost]\n\nTASK [roles/remove : wait for 30 seconds before continuing] *************************************\nPausing for 30 seconds\n(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\nok: [localhost]\n\nTASK [roles/remove : get some facts on the route table] *****************************************\nok: [localhost]\n\nTASK [roles/remove : remove the route table] ****************************************************\nchanged: [localhost]\n\nTASK [roles/remove : get some facts on the vpc] *************************************************\nok: [localhost]\n\nTASK [roles/remove : ensure that there isn't an internet gateway] *******************************\nchanged: [localhost]\n\nTASK [roles/remove : gather information about the subnets] **************************************\nok: [localhost]\n\nTASK [roles/remove : ensure that the subnets are absent] ****************************************\nchanged: [localhost] => (item={u'availability_zone': u'eu-west-1b', u'subnet_id': u'subnet-50259618', u'assign_ipv6_address_on_creation': False, u'tags': {u'Environment': u'wordpress', u'Use': u'rds', u'Name': u'wordpress_rds_eu-west-1b'}, u'default_for_az': False, u'state': u'available', u'ipv6_cidr_block_association_set': [], u'vpc_id': u'vpc-7596f013', u'cidr_block': u'10.0.31.0/24', u'available_ip_address_count': 251, u'id': u'subnet-50259618', u'map_public_ip_on_launch': False})\nchanged: [localhost] => (item={u'availability_zone': u'eu-west-1a', u'subnet_id': u'subnet-80f954e6', u'assign_ipv6_address_on_creation': False, u'tags': {u'Environment': u'wordpress', u'Use': u'elb', u'Name': u'wordpress_elb_eu-west-1a'}, u'default_for_az': False, u'state': u'available', u'ipv6_cidr_block_association_set': [], u'vpc_id': u'vpc-7596f013', u'cidr_block': u'10.0.20.0/24', u'available_ip_address_count': 251, u'id': u'subnet-80f954e6', u'map_public_ip_on_launch': False})\nchanged: [localhost] => (item={u'availability_zone': u'eu-west-1c', u'subnet_id': u'subnet-499f7313', u'assign_ipv6_address_on_creation': False, u'tags': {u'Environment': u'wordpress', u'Use': u'ec2', u'Name': u'wordpress_ec2_eu-west-1c'}, u'default_for_az': False, u'state': u'available', u'ipv6_cidr_block_association_set': [], u'vpc_id': u'vpc-7596f013', u'cidr_block': u'10.0.12.0/24', u'available_ip_address_count': 251, u'id': u'subnet-499f7313', u'map_public_ip_on_launch': False})\nchanged: [localhost] => (item={u'availability_zone': u'eu-west-1a', u'subnet_id': u'subnet-74fc5112', u'assign_ipv6_address_on_creation': False, u'tags': {u'Environment': u'wordpress', u'Use': u'ec2', u'Name': u'wordpress_ec2_eu-west-1a'}, u'default_for_az': False, u'state': u'available', u'ipv6_cidr_block_association_set': [], u'vpc_id': u'vpc-7596f013', u'cidr_block': u'10.0.10.0/24', u'available_ip_address_count': 251, u'id': u'subnet-74fc5112', u'map_public_ip_on_launch': False})\nchanged: [localhost] => (item={u'availability_zone': u'eu-west-1b', u'subnet_id': u'subnet-9f3a89d7', u'assign_ipv6_address_on_creation': False, u'tags': {u'Environment': u'wordpress', u'Use': u'ec2', u'Name': u'wordpress_ec2_eu-west-1b'}, u'default_for_az': False, u'state': u'available', u'ipv6_cidr_block_association_set': [], u'vpc_id': u'vpc-7596f013', u'cidr_block': u'10.0.11.0/24', u'available_ip_address_count': 251, u'id': u'subnet-9f3a89d7', u'map_public_ip_on_launch': False})\nchanged: [localhost] => (item={u'availability_zone': u'eu-west-1c', u'subnet_id': u'subnet-8e967ad4', u'assign_ipv6_address_on_creation': False, u'tags': {u'Environment': u'wordpress', u'Use': u'efs', u'Name': u'wordpress_efs_eu-west-1c'}, u'default_for_az': False, u'state': u'available', u'ipv6_cidr_block_association_set': [], u'vpc_id': u'vpc-7596f013', u'cidr_block': u'10.0.42.0/24', u'available_ip_address_count': 251, u'id': u'subnet-8e967ad4', u'map_public_ip_on_launch': False})\nchanged: [localhost] => (item={u'availability_zone': u'eu-west-1a', u'subnet_id': u'subnet-d7fe53b1', u'assign_ipv6_address_on_creation': False, u'tags': {u'Environment': u'wordpress', u'Use': u'efs', u'Name': u'wordpress_efs_eu-west-1a'}, u'default_for_az': False, u'state': u'available', u'ipv6_cidr_block_association_set': [], u'vpc_id': u'vpc-7596f013', u'cidr_block': u'10.0.40.0/24', u'available_ip_address_count': 251, u'id': u'subnet-d7fe53b1', u'map_public_ip_on_launch': False})\nchanged: [localhost] => (item={u'availability_zone': u'eu-west-1c', u'subnet_id': u'subnet-029b7758', u'assign_ipv6_address_on_creation': False, u'tags': {u'Environment': u'wordpress', u'Use': u'elb', u'Name': u'wordpress_elb_eu-west-1c'}, u'default_for_az': False, u'state': u'available', u'ipv6_cidr_block_association_set': [], u'vpc_id': u'vpc-7596f013', u'cidr_block': u'10.0.22.0/24', u'available_ip_address_count': 251, u'id': u'subnet-029b7758', u'map_public_ip_on_launch': False})\nchanged: [localhost] => (item={u'availability_zone': u'eu-west-1a', u'subnet_id': u'subnet-ede5488b', u'assign_ipv6_address_on_creation': False, u'tags': {u'Environment': u'wordpress', u'Use': u'rds', u'Name': u'wordpress_rds_eu-west-1a'}, u'default_for_az': False, u'state': u'available', u'ipv6_cidr_block_association_set': [], u'vpc_id': u'vpc-7596f013', u'cidr_block': u'10.0.30.0/24', u'available_ip_address_count': 251, u'id': u'subnet-ede5488b', u'map_public_ip_on_launch': False})\nchanged: [localhost] => (item={u'availability_zone': u'eu-west-1b', u'subnet_id': u'subnet-ec3e8da4', u'assign_ipv6_address_on_creation': False, u'tags': {u'Environment': u'wordpress', u'Use': u'efs', u'Name': u'wordpress_efs_eu-west-1b'}, u'default_for_az': False, u'state': u'available', u'ipv6_cidr_block_association_set': [], u'vpc_id': u'vpc-7596f013', u'cidr_block': u'10.0.41.0/24', u'available_ip_address_count': 251, u'id': u'subnet-ec3e8da4', u'map_public_ip_on_launch': False})\nchanged: [localhost] => (item={u'availability_zone': u'eu-west-1b', u'subnet_id': u'subnet-c227948a', u'assign_ipv6_address_on_creation': False, u'tags': {u'Environment': u'wordpress', u'Use': u'elb', u'Name': u'wordpress_elb_eu-west-1b'}, u'default_for_az': False, u'state': u'available', u'ipv6_cidr_block_association_set': [], u'vpc_id': u'vpc-7596f013', u'cidr_block': u'10.0.21.0/24', u'available_ip_address_count': 251, u'id': u'subnet-c227948a', u'map_public_ip_on_launch': False})\n\nTASK [roles/remove : ensure that the VPC is absent] *********************************************\nchanged: [localhost]\n\nPLAY RECAP **************************************************************************************\nlocalhost : ok=23 changed=13 unreachable=0 failed=0\n```", "```\n$ ansible-galaxy init roles/ec2\n```", "```\nimage:\n  base: \"CentOS Linux 7 x86_64*\"\n  owner: \"679593333241\"\n  root_device: \"ebs\"\n  architecture: \"x86_64\"\nwait_port: \"22\"\nec2_instance_type: \"t2.micro\"\n```", "```\n- name: gather facts on any already running instances\n  ec2_instance_facts:\n    region: \"{{ ec2_region }}\"\n    filters:\n      instance-state-name: \"running\"\n      \"tag:environment\": \"{{ environment_name }}\"\n      \"tag:Name\": \"{{ environment_name }}-ec2\"\n  register: running_instances\n```", "```\n- name: add any already running instances to a group\n  add_host:\n    name: \"{{ item.public_dns_name }}\"\n    ansible_ssh_host: \"{{ item.public_dns_name }}\"\n    groups: \"already_running\"\n  with_items: \"{{ running_instances.instances }}\"\n```", "```\n- name: set the number of already running instances as a fact\n  set_fact:\n    number_of_running_hosts: \"{{ groups['already_running'] | length | default(0) }}\"\n```", "```\n- name: run the tasks for a new deployment \n  include_tasks: \"new_deployment.yml\"\n  when: number_of_running_hosts|int == 0\n```", "```\n- name: run the tasks for an existing deployment \n  include_tasks: \"existing_deployment.yml\"\n  when: number_of_running_hosts|int >= 1\n```", "```\n- name: search for all of the AMIs in the defined region which match our selection\n  ec2_ami_facts:\n    region: \"{{ ec2_region }}\"\n    owners: \"{{ image.owner }}\"\n    filters:\n      name: \"{{ image.base }}\"\n      architecture: \"{{ image.architecture }}\"\n      root-device-type: \"{{ image.root_device }}\" \n  register: amiFind\n\n- name: filter the list of AMIs to find the latest one with an EBS backed volume\n  set_fact:\n    amiSortFilter: \"{{ amiFind.images | sort(attribute='creation_date') | last }}\"\n\n- name: finally grab AMI ID of the most recent result which matches our base image which is backed by an EBS volume\n  set_fact:\n    our_ami_id: \"{{ amiSortFilter.image_id }}\"\n```", "```\n- name: check the user {{ ansible_user_id }} has a key, if not create one\n  user:\n    name: \"{{ ansible_user_id }}\"\n    generate_ssh_key: yes\n    ssh_key_file: \"~/.ssh/id_rsa\"\n```", "```\n- name: upload the users public key\n  ec2_key:\n    region: \"{{ ec2_region }}\"\n    name: \"{{ environment_name }}-{{ ansible_user_id }}\"\n    key_material: \"{{ item }}\"\n  with_file: \"~/.ssh/id_rsa.pub\"\n```", "```\n- name: launch an instance\n  ec2_instance:\n    region: \"{{ ec2_region }}\"\n    state: \"present\"\n    instance_type: \"{{ ec2_instance_type }}\"\n    image_id: \"{{ our_ami_id }}\"\n    wait: yes\n    key_name: \"{{ environment_name }}-{{ ansible_user_id }}\"\n    security_groups: [ \"{{ sg_ec2.group_id }}\" ]\n    network: \n      assign_public_ip: true\n    filters:\n      instance-state-name: \"running\"\n      \"tag:Name\": \"{{ environment_name }}-tmp\"\n      \"tag:environment\": \"{{ environment_name }}\"\n    vpc_subnet_id: \"{{ subnet_ec2_ids[0] }}\"\n    tags:\n      Name: \"{{ environment_name }}-tmp\"\n      environment: \"{{ environment_name }}\"\n```", "```\n- name: gather facts on the instance we just launched using the AWS API\n  ec2_instance_facts:\n    region: \"{{ ec2_region }}\"\n    filters:\n      instance-state-name: \"running\"\n      \"tag:Name\": \"{{ environment_name }}-tmp\"\n      \"tag:environment\": \"{{ environment_name }}\"\n  register: singleinstance\n\n- name: add our temporary instance to a host group for use in the next step\n  add_host:\n```", "```\n    name: \"{{ item.public_dns_name }}\"\n    ansible_ssh_host: \"{{ item.public_dns_name }}\"\n    groups: \"ec2_instance\"\n  with_items: \"{{ singleinstance.instances }}\"\n```", "```\n- name: wait until SSH is available before moving onto the next step\n  wait_for:\n    host: \"{{ item.public_dns_name }}\"\n    port: 22\n    delay: 2\n    timeout: 320\n    state: \"started\"\n  with_items: \"{{ singleinstance.instances }}\"\n```", "```\n- name: add the instance to the target group\n  elb_target_group:\n    name: \"{{ environment_name }}-target-group\"\n    region: \"{{ ec2_region }}\"\n    protocol: \"http\"\n    port: \"80\"\n    vpc_id: \"{{ vpc_info.vpc.id }}\"\n    state: \"present\"\n    targets:\n      - Id: \"{{ item.instance_id }}\"\n        Port: \"80\"\n    modify_targets: \"true\"\n  with_items: \"{{ singleinstance.instances }}\"\n```", "```\n- name: add one of our running instances to a host group for use in the next step\n  add_host:\n    name: \"{{ groups['already_running'][0] }}\"\n    ansible_ssh_host: \"{{ groups['already_running'][0] }}\"\n    groups: \"ec2_instance\"\n```", "```\n$ ansible-galaxy init roles/stack\n```", "```\n- name: update all of the installed packages\n  yum:\n    name: \"*\"\n    state: \"latest\"\n    update_cache: \"yes\"\n```", "```\n- name: are the wordpress files already there?\n  stat:\n    path: \"{{ wordpress_system.home }}/index.php\"\n  register: wp_installed\n```", "```\n- name: if no wordpress installed install and configure the software stack\n  include_role:\n    name: \"stack\"\n    tasks_from: \"deploy.yml\"\n  when: wp_installed.stat.exists == False\n\n- name: if no wordpress installed, install it !!!\n  include_role:\n    name: \"stack\"\n    tasks_from: \"wordpress.yml\"\n  when: wp_installed.stat.exists == False\n```", "```\nwp_cli:\n  download: \"https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\"\n  path: \"/usr/local/bin/wp\"\n\nwordpress:\n  domain: \"http://{{ elb_results.load_balancers[0].dns_name }}/\"\n  title: \"WordPress installed by Ansible on AWS\"\n  username: \"ansible\"\n  password: \"password\"\n  email: \"test@example.com\"\n\nefs_mount_dir: \"/efs\"\n\nwordpress_system:\n  user: \"wordpress\"\n  group: \"php-fpm\"\n  comment: \"wordpress system user\"\n  home: \"{{ efs_mount_dir }}/wordpress\"\n  state: \"present\"\n\nphp:\n  ip: \"127.0.0.1\"\n  port: \"9000\"\n  upstream: \"php\"\n  ini:\n    - { regexp: '^;date.timezone =', replace: 'date.timezone = Europe/London' }\n    - { regexp: '^expose_php = On', replace: 'expose_php = Off' }\n    - { regexp: '^upload_max_filesize = 2M', replace: 'upload_max_filesize = 20M' }\n\nselinux:\n  http_permissive: true\n\nrepo_packages:\n  - \"epel-release\"\n  - \"https://centos7.iuscommunity.org/ius-release.rpm\"\n\nnginx_repo:\n  name: \"nginx\"\n  description: \"The mainline NGINX repo\"\n  baseurl: \"http://nginx.org/packages/mainline/centos/7/$basearch/\"\n  gpgcheck: \"no\"\n  enabled: \"yes\"\n\nsystem_packages:\n  - \"MySQL-python\"\n  - \"policycoreutils-python\"\n  - \"nfs-utils\"\n\nstack_packages:\n  - \"nginx\"\n  - \"mariadb\"\n  - \"php72u\"\n  - \"php72u-bcmath\"\n  - \"php72u-cli\"\n  - \"php72u-common\"\n  - \"php72u-dba\"\n  - \"php72u-fpm\"\n  - \"php72u-fpm-nginx\"\n  - \"php72u-gd\"\n  - \"php72u-intl\"\n  - \"php72u-json\"\n  - \"php72u-mbstring\"\n  - \"php72u-mysqlnd\"\n  - \"php72u-process\"\n  - \"php72u-snmp\"\n  - \"php72u-soap\"\n  - \"php72u-xml\"\n  - \"php72u-xmlrpc\"\n\nextra_packages:\n  - \"vim-enhanced\"\n  - \"git\"\n  - \"unzip\"\n```", "```\n- name: find some information on the elastic load balancer\n  local_action:\n    module: efs_facts\n    region: \"{{ ec2_region }}\"\n    name: \"{{ environment_name }}-efs\"\n  become: no\n```", "```\n- name: ensure EFS volume is mounted.\n  mount:\n    name: \"{{ efs_mount_dir }}\"\n    src: \"{{ efs[0].file_system_id }}.efs.{{ ec2_region }}.amazonaws.com:/\"\n    fstype: nfs4\n    opts: nfsvers=4.1\n    state: mounted\n```", "```\n- name: install the repo packages\n  yum:\n    name: \"{{ item }}\"\n    state: \"installed\"\n  with_items: \"{{ repo_packages }}\"\n\n- name: add the NGINX mainline repo\n  yum_repository:\n    name: \"{{ nginx_repo.name }}\"\n    description: \"{{ nginx_repo.description }}\"\n    baseurl: \"{{ nginx_repo.baseurl }}\"\n    gpgcheck: \"{{ nginx_repo.gpgcheck }}\"\n    enabled: \"{{ nginx_repo.enabled }}\"\n\n- name: install the stack packages\n  yum:\n    name: \"{{ item }}\"\n    state: \"installed\"\n  with_items: \"{{ system_packages + stack_packages + extra_packages }}\"\n\n- name: add the wordpress user\n  user: \n    name: \"{{ wordpress_system.user }}\"\n    group: \"{{ wordpress_system.group }}\"\n    comment: \"{{ wordpress_system.comment }}\"\n    home: \"{{ wordpress_system.home }}\"\n    state: \"{{ wordpress_system.state }}\"\n\n- name: copy the nginx.conf to /etc/nginx/\n  template:\n    src: \"nginx-nginx.conf.j2\"\n    dest: \"/etc/nginx/nginx.conf\"\n  notify: \"restart nginx\"\n\n- name: create the global directory in /etc/nginx/\n  file:\n    dest: \"/etc/nginx/global/\"\n    state: \"directory\"\n    mode: \"0644\"\n\n- name: copy the restrictions.conf to /etc/nginx/global/\n  copy:\n    src: \"nginx-global-restrictions.conf\"\n    dest: \"/etc/nginx/global/restrictions.conf\"\n  notify: \"restart nginx\"\n\n- name: copy the wordpress_shared.conf to /etc/nginx/global/\n  template:\n    src: \"nginx-global-wordpress_shared.conf.j2\"\n    dest: \"/etc/nginx/global/wordpress_shared.conf\"\n  notify: \"restart nginx\"\n\n- name: copy the default.conf to /etc/nginx/conf.d/\n  template:\n    src: \"nginx-confd-default.conf.j2\"\n    dest: \"/etc/nginx/conf.d/default.conf\"\n  notify: \"restart nginx\"\n\n- name: copy the www.conf to /etc/php-fpm.d/\n  template:\n    src: \"php-fpmd-www.conf.j2\"\n    dest: \"/etc/php-fpm.d/www.conf\"\n  notify: \"restart php-fpm\"\n\n- name: configure php.ini\n  lineinfile: \n    dest: \"/etc/php.ini\"\n    regexp: \"{{ item.regexp }}\"\n    line: \"{{ item.replace }}\"\n    backup: \"yes\"\n    backrefs: \"yes\"\n  with_items: \"{{ php.ini }}\"\n  notify: \"restart php-fpm\"\n\n- name: start php-fpm\n  service:\n    name: \"php-fpm\"\n    state: \"started\"\n\n- name: start nginx\n  service:\n    name: \"nginx\"\n    state: \"started\"\n\n- name: set the selinux allowing httpd_t to be permissive is required\n  selinux_permissive:\n    name: httpd_t\n    permissive: true\n  when: selinux.http_permissive == true\n```", "```\n- name: find some information on the rds instance\n  local_action:\n    module: rds\n    region: \"{{ ec2_region }}\"\n    command: facts\n    instance_name: \"{{ environment_name }}-rds\"\n  become: no\n  register: rds_results\n```", "```\n- name: find some information on the elastic load balancer\n  local_action:\n    module: elb_application_lb_facts\n    region: \"{{ ec2_region }}\"\n    names: \"{{ environment_name }}-elb\"\n  become: no\n  register: elb_results\n```", "```\n- name: download wp-cli\n  get_url:\n    url: \"{{ wp_cli.download }}\"\n    dest: \"{{ wp_cli.path }}\"\n\n- name: update permissions of wp-cli to allow anyone to execute it\n  file:\n    path: \"{{ wp_cli.path }}\"\n    mode: \"0755\"\n\n- name: are the wordpress files already there?\n  stat:\n    path: \"{{ wordpress_system.home }}/index.php\"\n  register: wp_installed\n\n- name: download wordpresss\n  shell: \"{{ wp_cli.path }} core download\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  when: wp_installed.stat.exists == False\n\n- name: set the correct permissions on the homedir\n  file:\n    path: \"{{ wordpress_system.home }}\"\n    mode: \"0775\"\n  when: wp_installed.stat.exists == False\n\n- name: is wordpress already configured?\n  stat:\n    path: \"{{ wordpress_system.home }}/wp-config.php\"\n  register: wp_configured\n\n- name: configure wordpress\n  shell: \"{{ wp_cli.path }} core config --dbhost={{ rds_results.instance.endpoint }} --dbname={{ environment_name }} --dbuser={{ environment_name }} --dbpass={{ lookup('password', 'group_vars/rds_passwordfile chars=ascii_letters,digits length=30') }}\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  when: wp_configured.stat.exists == False\n\n- name: do we need to install wordpress?\n  shell: \"{{ wp_cli.path }} core is-installed\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  ignore_errors: yes\n  register: wp_installed\n\n- name: install wordpress if needed\n  shell: \"{{ wp_cli.path }} core install --url='{{ wordpress.domain }}' --title='{{ wordpress.title }}' --admin_user={{ wordpress.username }} --admin_password={{ wordpress.password }} --admin_email={{ wordpress.email }}\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  when: wp_installed.rc == 1\n```", "```\n$ ansible-galaxy init roles/ami\n```", "```\n- name: find out some facts about the instance we have been using\n  ec2_instance_facts:\n    region: \"{{ ec2_region }}\"\n    filters:\n      dns-name: \"{{ groups['ec2_instance'][0] }}\"\n  register: \"our_instance\"\n```", "```\n- name: create the AMI\n  ec2_ami:\n    region: \"{{ ec2_region }}\"\n    instance_id: \"{{ our_instance.instances.0.instance_id }}\"\n    wait: \"yes\"\n    name: \"{{ environment_name }}-{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}\"\n    tags:\n        Name: \"{{ environment_name }}-{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}\"\n        Environment: \"{{ environment_name }}\"\n        Date: \"{{ ansible_date_time.date }} {{ ansible_date_time.time }}\"\n```", "```\n- name: wait for 2 minutes before continuing\n  pause:\n    minutes: 2\n```", "```\n$ ansible-galaxy init roles/autoscaling\n```", "```\nmin_size: 2\nmax_size: 9\ndesired_capacity: 3\nreplace_size: 2\nhealth_check_type: ELB\nassign_public_ip: yes\nec2_instance_type: \"t2.micro\"\n```", "```\n- name: search through all of our AMIs\n  ec2_ami_facts:\n    region: \"{{ ec2_region }}\"\n    filters:\n      name: \"{{ environment_name }}-*\"\n  register: amiFind\n```", "```\n- name: find the last one we built\n  set_fact:\n    amiSortFilter: \"{{ amiFind.images | sort(attribute='creation_date') | last }}\"\n```", "```\n- name: grab AMI ID and name of the most recent result\n  set_fact:\n    our_ami_id: \"{{ amiSortFilter.image_id }}\"\n    our_ami_name: \"{{ amiSortFilter.name }}\"\n```", "```\n- name: create the launch configuration\n  ec2_lc:\n    region: \"{{ ec2_region }}\"\n    name: \"{{ our_ami_name }}\"\n    state: present\n    image_id: \"{{ our_ami_id }}\"\n    security_groups: [ \"{{ sg_ec2.group_id }}\" ]\n    assign_public_ip: \"{{ assign_public_ip }}\"\n    instance_type: \"{{ ec2_instance_type }}\"\n    volumes:\n    - device_name: /dev/xvda\n      volume_size: 10\n      volume_type: gp2\n      delete_on_termination: true\n```", "```\n- name: find out the target group ARN\n  elb_target_group_facts:\n    region: \"{{ ec2_region }}\"\n    names:\n      - \"{{ environment_name }}-target-group\"\n  register: elb_target_group\n```", "```\n- name: create / update the auto-scaling group using the launch configuration we just created\n  ec2_asg:\n    region: \"{{ ec2_region }}\"\n    name: \"{{ environment_name }}-asg\"\n    target_group_arns: [ \"{{ elb_target_group.target_groups[0].target_group_arn }}\" ]\n    launch_config_name: \"{{ our_ami_name }}\"\n    min_size: \"{{ min_size }}\"\n    max_size: \"{{ max_size }}\"\n    desired_capacity: \"{{ desired_capacity }}\"\n    health_check_period: 300\n    health_check_type: \"{{ health_check_type }}\"\n    replace_all_instances: yes\n    replace_batch_size: \"{{ replace_size }}\"\n    vpc_zone_identifier: \"{{ subnet_ec2_ids }}\"\n    wait_for_instances: \"yes\"\n    wait_timeout: \"900\"\n    tags:\n      - Name: \"{{ environment_name }}-ec2\"\n      - environment: \"{{ environment_name }}\"\n```", "```\n- name: remove any tmp instances which are running\n  ec2_instance:\n    region: \"{{ ec2_region }}\"\n    state: absent\n    filters:\n      instance-state-name: \"running\"\n      \"tag:environment\": \"{{ environment_name }}\"\n      \"tag:Name\": \"{{ environment_name }}-tmp\"\n```", "```\n# Register all of the host groups we will be creating in the playbooks\n[ec2_instance]\n[already_running]\n\n# Put all the groups into into a single group so we can easily apply one config to it for overriding things like the ssh user and key location\n[aws:children]\nec2_instance\nalready_running\n\n# Finally, configure some bits to allow us access to the instances before we deploy our credentials using Ansible\n[aws:vars]\nansible_ssh_user=centos\nansible_ssh_private_key_file=~/.ssh/id_rsa\nhost_key_checking=False\n```", "```\n---\n\n- name: Create, launch and configure our basic AWS environment\n  hosts: localhost\n  connection: local\n  gather_facts: True\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - roles/vpc\n    - roles/subnets\n    - roles/gateway\n    - roles/securitygroups\n    - roles/elb\n    - roles/rds\n    - roles/efs\n    - roles/ec2\n\n- name: Configure / update the EC2 instance\n  hosts: ec2_instance\n  become: yes\n  become_method: sudo\n  gather_facts: True\n\n  vars_files: \n    - group_vars/common.yml\n\n  roles:\n    - roles/stack\n\n- name: Create, launch and configure our AMI\n  hosts: localhost\n  connection: local\n  gather_facts: True\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - roles/ami\n    - roles/autoscaling\n```", "```\n$ export AWS_ACCESS_KEY=AKIAI5KECPOTNTTVM3EDA\n$ export AWS_SECRET_KEY=Y4B7FFiSWl0Am3VIFc07lgnc/TAtK5+RpxzIGTr\n```", "```\n$ time ansible-playbook -i production site.yml\n```", "```\n[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'\n\nPLAY [Create, launch and configure our basic AWS environment] ************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [localhost]\n\nTASK [roles/ec2 : gather facts on any already running instances] ********************************\nok: [localhost]\n\nTASK [roles/ec2 : add any already running instances to a group] *********************************\n\nTASK [roles/ec2 : set the number of already running instances as a fact] ***********************\nok: [localhost]\n\nTASK [roles/ec2 : run the tasks for a new deployment] *******************************************\nincluded: /Users/russ/Documents/Code/learn-ansible-fundamentals-of-ansible-2x/chapter10/aws-wordpress/roles/ec2/tasks/new_deployment.yml for localhost\n\nTASK [roles/ec2 : search for all of the AMIs in the defined region which match our selection] ***\nok: [localhost]\n\nTASK [roles/ec2 : filter the list of AMIs to find the latest one with an EBS backed volume] *****\nok: [localhost]\n\nTASK [roles/ec2 : finally grab AMI ID of the most recent result which matches our base image which is backed by an EBS volume] ***************************************************************\nok: [localhost]\n\nTASK [roles/ec2 : check the user russ has a key, if not create one] *****************************\nok: [localhost]\n\nTASK [roles/ec2 : upload the users public key] **************************************************\nok: [localhost] => (item=ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDmuoFR01i/Yf3HATl9c3sufJvghTFgYzK/Zt29JiTqWlSQhmXhNNTh6iI6nXuPVhQGQaciWbqya6buncQ3vecISx6+EwsAmY3Mwpz1a/eMiXOgO/zn6Uf79dXcMN2JwpLFoON1f9PR0/DTpEkjwqb+eNLw9ThjH0J994+Pev+m8OrqgReFW36a/kviUYKsHxkXmkgxtPJgwKU90STNab4qyfKEGhi2w/NzECgseeQYs1H3klORaHQybhpXkoCIMmgy9gnzSH7oa2mJqKilVed27xoirkXzWPaAQlfiEE1iup+2xMqWY6Jl9qb8tJHRS+l8UcxTMNaWsQkTysLTgBAZ russ@mckendrick.io)\n\nTASK [roles/ec2 : launch an instance] ***********************************************************\nchanged: [localhost]\n\nTASK [roles/ec2 : gather facts on the instance we just launched using the AWS API] **************\nok: [localhost]\n\nTASK [roles/ec2 : add our temporary instance to a host group for use in the next step] **********\nchanged: [localhost] =>\n\nTASK [roles/ec2 : wait until SSH is available before moving onto the next step] *****************\nok: [localhost] => \n\nTASK [roles/ec2 : add the instance to the target group] ******************************************\nchanged: [localhost] =>\n\nTASK [roles/ec2 : run the tasks for an existing deployment] *************************************\nskipping: [localhost]\n\nPLAY [Configure / update the EC2 instance] ******************************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [roles/stack : update all of the installed packages] ***************************************\nok: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [roles/stack : are the wordpress files already there?] *************************************\nok: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [roles/stack : if no wordpress installed install and configure the software stack] *********\n\nTASK [stack : find some information on the elastic load balancer] *******************************\nok: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com -> localhost]\n\nTASK [stack : ensure EFS volume is mounted.] ****************************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : install the repo packages] *************************************************************************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com] => (item=[u'epel-release', u'https://centos7.iuscommunity.org/ius-release.rpm'])\n\nTASK [stack : add the NGINX mainline repo] ******************************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : install the stack packages] *******************************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com] => (item=[u'MySQL-python', u'policycoreutils-python', u'nfs-utils', u'nginx', u'mariadb', u'php72u', u'php72u-bcmath', u'php72u-cli', u'php72u-common', u'php72u-dba', u'php72u-fpm', u'php72u-fpm-nginx', u'php72u-gd', u'php72u-intl', u'php72u-json', u'php72u-mbstring', u'php72u-mysqlnd', u'php72u-process', u'php72u-snmp', u'php72u-soap', u'php72u-xml', u'php72u-xmlrpc', u'vim-enhanced', u'git', u'unzip'])\n\nTASK [stack : add the wordpress user] ***********************************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : copy the nginx.conf to /etc/nginx/] ***********************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : create the global directory in /etc/nginx/] ***************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : copy the restrictions.conf to /etc/nginx/global/] *********************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : copy the wordpress_shared.conf to /etc/nginx/global/] *****************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : copy the default.conf to /etc/nginx/conf.d/] **************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : copy the www.conf to /etc/php-fpm.d/] *********************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : configure php.ini] ****************************************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com] => (item={u'regexp': u'^;date.timezone =', u'replace': u'date.timezone = Europe/London'})\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com] => (item={u'regexp': u'^expose_php = On', u'replace': u'expose_php = Off'})\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com] => (item={u'regexp': u'^upload_max_filesize = 2M', u'replace': u'upload_max_filesize = 20M'})\n\nTASK [stack : start php-fpm] ********************************************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : start nginx] **********************************************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : set the selinux allowing httpd_t to be permissive is required] ********************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [roles/stack : if no wordpress installed, install it !!!] **********************************\n\nTASK [stack : download wp-cli] ******************************************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : update permissions of wp-cli to allow anyone to execute it] ***********************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : find some information on the rds instance] ****************************************\nok: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com -> localhost]\n\nTASK [stack : find some information on the elastic load balancer] *******************************\nok: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com -> localhost]\n\nTASK [stack : are the wordpress files already there?] *******************************************\nok: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : download wordpresss] **************************************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : set the correct permissions on the homedir] *****************************************************************************************************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : is wordpress already configured?] ***************************************************************************************************************************************\nok: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : configure wordpress] ****************************************************************************************************************************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nTASK [stack : do we need to install wordpress?] ***************************************************************************************************************************************\nfatal: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]: FAILED! => {\"changed\": true, \"cmd\": \"/usr/local/bin/wp core is-installed\", \"delta\": \"0:00:01.547784\", \"end\": \"2018-05-06 14:19:01.301168\", \"msg\": \"non-zero return code\", \"rc\": 1, \"start\": \"2018-05-06 14:18:59.753384\", \"stderr\": \"\", \"stderr_lines\": [], \"stdout\": \"\", \"stdout_lines\": []}\n...ignoring\n\nTASK [stack : install wordpress if needed] ******************************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nRUNNING HANDLER [roles/stack : restart nginx] ***************************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nRUNNING HANDLER [roles/stack : restart php-fpm] *************************************************\nchanged: [ec2-34-244-58-38.eu-west-1.compute.amazonaws.com]\n\nPLAY [Create, launch and configure our AMI] *****************************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [localhost]\n\nTASK [roles/ami : find out some facts about the instance we have been using] ********************\nok: [localhost]\n\nTASK [roles/ami : create the AMI] *************************************************************************************************\nchanged: [localhost]\n\nTASK [roles/ami : wait for 2 minutes before continuing] *****************************************\nPausing for 120 seconds\n(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\nok: [localhost]\n\nTASK [roles/autoscaling : search through all of our AMIs] ***************************************\nok: [localhost]\n\nTASK [roles/autoscaling : find the last one we built] *******************************************\nok: [localhost]\n\nTASK [roles/autoscaling : grab AMI ID and name of the most recent result] ***********************\nok: [localhost]\n\nTASK [roles/autoscaling : create the launch configuration] **************************************\nchanged: [localhost]\n\nTASK [roles/autoscaling : find out the target group ARN] ****************************************\nok: [localhost]\n\nTASK [roles/autoscaling : create / update the auto-scaling group using the launch configuration we just created] ********************************************************************************\nchanged: [localhost]\n\nTASK [roles/autoscaling : remove any tmp instances] *********************************************\nchanged: [localhost]\n\nPLAY RECAP **************************************************************************************\nec2-34-244-58-38.eu-west-1.compute.amazonaws.com : ok=32 changed=24 unreachable=0 failed=0\nlocalhost : ok=47 changed=21 unreachable=0 failed=0\n```", "```\nreal 31m34.752s\nuser 2m4.008s\nsys  0m39.274s\n```", "```\n$ time ansible-playbook -i production site.yml\n```", "```\nWARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'\n\nPLAY [Create, launch and configure our basic AWS environment] ************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [localhost]\n\nTASK [roles/ec2 : gather facts on any already running instances] ********************************\nok: [localhost]\n\nTASK [roles/ec2 : add any already running instances to a group] *********************************\nchanged: [localhost] => \n\nTASK [roles/ec2 : set the number of already running instances as a fact] ************************\nok: [localhost]\n\nTASK [roles/ec2 : run the tasks for a new deployment] *******************************************\nskipping: [localhost]\n\nTASK [roles/ec2 : run the tasks for an existing deployment] *************************************\nincluded: /Users/russ/Documents/Code/learn-ansible-fundamentals-of-ansible-2x/chapter10/aws-wordpress/roles/ec2/tasks/existing_deployment.yml for localhost\n\nTASK [roles/ec2 : add one of our running instances to a host group for use in the next step] ****\nchanged: [localhost]\n\nPLAY [Configure / update the EC2 instance] ******************************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [ec2-52-211-180-156.eu-west-1.compute.amazonaws.com]\n\nTASK [roles/stack : update all of the installed packages] ***************************************\nchanged: [ec2-52-211-180-156.eu-west-1.compute.amazonaws.com]\n\nTASK [roles/stack : are the wordpress files already there?] *************************************\nok: [ec2-52-211-180-156.eu-west-1.compute.amazonaws.com]\n\nTASK [roles/stack : if no wordpress installed install and configure the software stack] *********\nskipping: [ec2-52-211-180-156.eu-west-1.compute.amazonaws.com]\n\nTASK [roles/stack : if no wordpress installed, install it !!!] **********************************\nskipping: [ec2-52-211-180-156.eu-west-1.compute.amazonaws.com]\n\nPLAY [Create, launch and configure our AMI] *****************************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [localhost]\n\nTASK [roles/ami : find out some facts about the instance we have been using] ********************\nok: [localhost]\n\nTASK [roles/ami : create the AMI] ***************************************************************\nchanged: [localhost]\n\nTASK [roles/ami : wait for 2 minutes before continuing] *****************************************\nPausing for 120 seconds\n(ctrl+C then 'C' = continue early, ctrl+C then 'A' = abort)\nok: [localhost]\n\nTASK [roles/autoscaling : search through all of our AMIs] ***************************************\nok: [localhost]\n\nTASK [roles/autoscaling : find the last one we built] *******************************************\nok: [localhost]\n\nTASK [roles/autoscaling : grab AMI ID and name of the most recent result] ***********************\nok: [localhost]\n\nTASK [roles/autoscaling : create the launch configuration] **************************************\nchanged: [localhost]\n\nTASK [roles/autoscaling : find out the target group ARN] ****************************************\nok: [localhost]\n\nTASK [roles/autoscaling : create / update the auto-scaling group using the launch configuration we just created] ********************************************************************************\nchanged: [localhost]\n\nTASK [roles/autoscaling : remove any tmp instances] *********************************************\nok: [localhost]\n\nPLAY RECAP **************************************************************************************\nec2-52-211-180-156.eu-west-1.compute.amazonaws.com : ok=3 changed=1 unreachable=0 failed=0\nlocalhost : ok=39 changed=5 unreachable=0 failed=0\n```", "```\nreal 9m18.502s\nuser 0m48.718s\nsys  0m14.115s\n```", "```\n- name: remove the auto-scaling group\n  ec2_asg:\n    region: \"{{ ec2_region }}\"\n    name: \"{{ environment_name }}-asg\"\n    state: absent\n    wait_for_instances: \"yes\"\n    wait_timeout: \"900\"\n\n```", "```\n- name: wait for 2 minutes before continuing\n  pause:\n    minutes: 2\n```", "```\n- name: search through all of our AMIs\n  ec2_ami_facts:\n    region: \"{{ ec2_region }}\"\n    filters:\n      name: \"{{ environment_name }}-*\"\n  register: amiFind\n\n- name: unregister all of our AMIs\n  ec2_ami:\n    image_id: \"{{ item.image_id }}\"\n    delete_snapshot: True\n    state: absent\n  with_items: \"{{ amiFind.images }}\"\n```", "```\n$ ansible-playbook -i production remove.yml\n```"]