["```\n$ mkdir jenkins\n$ cd jenkins\n$ touch production requirements.yml site.yml Vagrantfile\n```", "```\n- src: \"geerlingguy.java\"\n- src: \"geerlingguy.jenkins\"\n```", "```\n$ ansible-galaxy install -r requirements.yml\n```", "```\n---\n\n- hosts: jenkins\n  gather_facts: true\n  become: yes\n  become_method: sudo\n\n  vars:\n    java_packages: \"java-1.8.0-openjdk\"\n    jenkins_hostname: \"10.20.30.60.nip.io\"\n    jenkins_admin_username: \"ansible\"\n    jenkins_admin_password: \"Pa55w0rD\"\n\n  roles:\n    - geerlingguy.java\n    - geerlingguy.jenkins\n```", "```\nbox ansible_host=10.20.30.60.nip.io\n\n[jenkins]\nbox\n\n[jenkins:vars]\nansible_connection=ssh\nansible_user=vagrant\nansible_private_key_file=~/.ssh/id_rsa\nhost_key_checking=False\n```", "```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nAPI_VERSION = \"2\"\nBOX_NAME = \"centos/7\"\nBOX_IP = \"10.20.30.60\"\nDOMAIN = \"nip.io\"\nPRIVATE_KEY = \"~/.ssh/id_rsa\"\nPUBLIC_KEY = '~/.ssh/id_rsa.pub'\n\nVagrant.configure(API_VERSION) do |config|\n  config.vm.box = BOX_NAME\n  config.vm.network \"private_network\", ip: BOX_IP\n  config.vm.host_name = BOX_IP + '.' + DOMAIN\n  config.ssh.insert_key = false\n  config.ssh.private_key_path = [PRIVATE_KEY, \"~/.vagrant.d/insecure_private_key\"]\n  config.vm.provision \"file\", source: PUBLIC_KEY, destination: \"~/.ssh/authorized_keys\"\n\n  config.vm.provider \"virtualbox\" do |v|\n    v.memory = \"2024\"\n    v.cpus = \"2\"\n  end\n\n  config.vm.provider \"vmware_fusion\" do |v|\n    v.vmx[\"memsize\"] = \"2024\"\n    v.vmx[\"numvcpus\"] = \"2\"\n  end\n\nend\n```", "```\n$ vagrant up\n$ vagrant up --provider=vmware_fusion\n```", "```\n$ ansible-playbook -i production site.yml\n```", "```\nPLAY [jenkins] **********************************************************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [box]\n\nTASK [geerlingguy.java : Include OS-specific variables.] ****************************************\nok: [box]\n\nTASK [geerlingguy.java : Include OS-specific variables for Fedora.] *****************************\nskipping: [box]\n\nTASK [geerlingguy.java : Include version-specific variables for Debian.] ************************\nskipping: [box]\n\nTASK [geerlingguy.java : Define java_packages.] *************************************************\nskipping: [box]\n\nTASK [geerlingguy.java : include_tasks] *********************************************************\nincluded: /Users/russ/.ansible/roles/geerlingguy.java/tasks/setup-RedHat.yml for box\n\nTASK [geerlingguy.java : Ensure Java is installed.] *********************************************\nchanged: [box] => (item=java-1.8.0-openjdk)\n\nTASK [geerlingguy.java : include_tasks] *********************************************************\nskipping: [box]\n\nTASK [geerlingguy.java : include_tasks] *********************************************************\nskipping: [box]\n\nTASK [geerlingguy.java : Set JAVA_HOME if configured.] ******************************************\nskipping: [box]\n\nTASK [geerlingguy.jenkins : Include OS-Specific variables] **************************************\nok: [box]\n\nTASK [geerlingguy.jenkins : Define jenkins_repo_url] ********************************************\nok: [box]\n\nTASK [geerlingguy.jenkins : Define jenkins_repo_key_url] ****************************************\nok: [box]\n\nTASK [geerlingguy.jenkins : Define jenkins_pkg_url] *********************************************\nok: [box]\n\nTASK [geerlingguy.jenkins : include_tasks] ******************************************************\nincluded: /Users/russ/.ansible/roles/geerlingguy.jenkins/tasks/setup-RedHat.yml for box\n\nTASK [geerlingguy.jenkins : Ensure dependencies are installed.] *********************************\nok: [box]\n\nTASK [geerlingguy.jenkins : Ensure Jenkins repo is installed.] **********************************\nchanged: [box]\n\nTASK [geerlingguy.jenkins : Add Jenkins repo GPG key.] ******************************************\nchanged: [box]\n\nTASK [geerlingguy.jenkins : Download specific Jenkins version.] *********************************\nskipping: [box]\n\nTASK [geerlingguy.jenkins : Check if we downloaded a specific version of Jenkins.] **************\nskipping: [box]\n\nTASK [geerlingguy.jenkins : Install our specific version of Jenkins.] ***************************\nskipping: [box]\n\nTASK [geerlingguy.jenkins : Ensure Jenkins is installed.] ***************************************\nchanged: [box]\n\nTASK [geerlingguy.jenkins : include_tasks] ******************************************************\nskipping: [box]\n\nTASK [geerlingguy.jenkins : include_tasks] ******************************************************\nincluded: /Users/russ/.ansible/roles/geerlingguy.jenkins/tasks/settings.yml for box\n\nTASK [geerlingguy.jenkins : Modify variables in init file] **************************************\nchanged: [box] => (item={u'option': u'JENKINS_ARGS', u'value': u'--prefix='})\nchanged: [box] => (item={u'option': u'JENKINS_JAVA_OPTIONS', u'value': u'-Djenkins.install.runSetupWizard=false'})\n\nTASK [geerlingguy.jenkins : Set the Jenkins home directory] *************************************\nchanged: [box]\n\nTASK [geerlingguy.jenkins : Immediately restart Jenkins on init config changes.] ****************\nchanged: [box]\n\nTASK [geerlingguy.jenkins : Set HTTP port in Jenkins config.] ***********************************\nchanged: [box]\n\nTASK [geerlingguy.jenkins : Ensure jenkins_home /var/lib/jenkins exists] ************************\nok: [box]\n\nTASK [geerlingguy.jenkins : Create custom init scripts directory.] ******************************\nchanged: [box]\n\nRUNNING HANDLER [geerlingguy.jenkins : configure default users] *********************************\nchanged: [box]\n\nTASK [geerlingguy.jenkins : Immediately restart Jenkins on http or user changes.] ***************\nchanged: [box]\n\nTASK [geerlingguy.jenkins : Ensure Jenkins is started and runs on startup.] *********************\nok: [box]\n\nTASK [geerlingguy.jenkins : Wait for Jenkins to start up before proceeding.] ********************\nFAILED - RETRYING: Wait for Jenkins to start up before proceeding. (60 retries left).\n [WARNING]: Consider using the get_url or uri module rather than running curl. If you need to use\ncommand because get_url or uri is insufficient you can add warn=False to this command task or set\ncommand_warnings=False in ansible.cfg to get rid of this message.\n\nok: [box]\n\nTASK [geerlingguy.jenkins : Get the jenkins-cli jarfile from the Jenkins server.] ***************\nchanged: [box]\n\nTASK [geerlingguy.jenkins : Remove Jenkins security init scripts after first startup.] **********\nchanged: [box]\n\nTASK [geerlingguy.jenkins : include_tasks] ******************************************************\nincluded: /Users/russ/.ansible/roles/geerlingguy.jenkins/tasks/plugins.yml for box\n\nTASK [geerlingguy.jenkins : Get Jenkins admin password from file.] ******************************\nskipping: [box]\n\nTASK [geerlingguy.jenkins : Set Jenkins admin password fact.] ***********************************\nok: [box]\n\nTASK [geerlingguy.jenkins : Get Jenkins admin token from file.] *********************************\nskipping: [box]\n\nTASK [geerlingguy.jenkins : Set Jenkins admin token fact.] **************************************\nok: [box]\n\nTASK [geerlingguy.jenkins : Create update directory] ********************************************\nok: [box]\n\nTASK [geerlingguy.jenkins : Download current plugin updates from Jenkins update site] ***********\nchanged: [box]\n\nTASK [geerlingguy.jenkins : Remove first and last line from json file] **************************\nok: [box]\n\nTASK [geerlingguy.jenkins : Install Jenkins plugins using password.] ****************************\n\nTASK [geerlingguy.jenkins : Install Jenkins plugins using token.] *******************************\n\nPLAY RECAP **************************************************************************************\nbox : ok=32 changed=14 unreachable=0 failed=0\n```", "```\n$ ansible-galaxy init ansible-role-docker\n```", "```\n---\n# vars file for ansible-role-docker\n\ndocker:\n  gpg_key: \"https://download.docker.com/linux/centos/gpg\"\n  repo_url: \"https://download.docker.com/linux/centos/docker-ce.repo\"\n  repo_path: \"/etc/yum.repos.d/docker-ce.repo\"\n  edge: \"docker-ce-edge\"\n  packages:\n    - \"docker-ce\"\n    - \"device-mapper-persistent-data\"\n    - \"lvm2\"\n    - \"python-setuptools\"\n    - \"libselinux-python\"\n  pip:\n    - \"docker\"\n```", "```\n---\n# vars file for ansible-role-docker\n\ndocker:\n  gpg_key: \"https://download.docker.com/linux/ubuntu/gpg\"\n  repo: \"deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release | lower }} edge\"\n  system_packages:\n    - \"apt-transport-https\"\n    - \"ca-certificates\"\n    - \"curl\"\n    - \"software-properties-common\"\n    - \"python3-pip\"\n  packages:\n    - \"docker-ce\"\n  pip:\n    - \"docker\"\n```", "```\n---\n# tasks file for ansible-role-docker\n\n- name: include the operating system specific variables\n  include_vars: \"{{ ansible_os_family }}.yml\"\n\n- name: install the stack on centos\n  import_tasks: install-redhat.yml\n  when: ansible_os_family == 'RedHat'\n\n- name: install the stack on ubuntu\n  import_tasks: install-ubuntu.yml\n  when: ansible_os_family == 'Debian'\n```", "```\n---\n# tasks file for ansible-role-docker\n\n- name: add the gpg key for the docker repo\n  rpm_key:\n    key: \"{{ docker.gpg_key }}\"\n    state: \"present\"\n\n- name: add docker repo from the remote url\n  get_url:\n    url: \"{{ docker.repo_url }}\"\n    dest: \"{{ docker.repo_path }}\"\n    mode: \"0644\"\n\n- name: install the docker packages\n  yum:\n    name: \"{{ item }}\"\n    state: \"installed\"\n    update_cache: \"yes\"\n    enablerepo: \"{{ docker.edge }}\"\n  with_items: \"{{ docker.packages }}\"\n\n- name: install pip\n  easy_install:\n    name: pip\n    state: latest\n\n- name: install the python packages\n  pip:\n    name: \"{{ item }}\"\n  with_items: \"{{ docker.pip }}\"\n\n- name: put selinux into permissive mode\n  selinux:\n    policy: targeted\n    state: permissive\n\n- name: start docker and configure to start on boot\n  service:\n    name: \"docker\"\n    state: \"started\"\n    enabled: \"yes\"\n```", "```\n---\n# tasks file for ansible-role-docker\n\n- name: install the system packages\n  apt:\n    name: \"{{ item }}\"\n    state: \"present\"\n    update_cache: \"yes\"\n  with_items: \"{{ docker.system_packages }}\"\n\n- name: add the apt keys from a key server\n  apt_key:\n    url: \"{{ docker.gpg_key }}\"\n    state: present\n\n- name: add the apt repo\n  apt_repository:\n    repo: \"{{ docker.repo }}\"\n    state: present\n\n- name: install the docker package\n  apt:\n    name: \"{{ item }}\"\n    state: \"present\"\n    update_cache: \"yes\"\n    force: \"yes\"\n  with_items: \"{{ docker.packages }}\"\n\n- name: install the python packages\n  pip:\n    name: \"{{ item }}\"\n  with_items: \"{{ docker.pip }}\"\n\n- name: start docker and configure to start on boot\n  service:\n    name: \"docker\"\n    state: \"started\"\n    enabled: \"yes\"\n```", "```\n---\n\ngalaxy_info:\n  author: \"Russ McKendrick\"\n  description: \"Role to install the Docker CE Edge release on either an Enterprise Linux or Ubuntu host\"\n  license: \"license (BSD)\"\n  min_ansible_version: 2.4\n  platforms:\n    - name: EL\n      versions:\n      - 6\n      - 7\n    - name: Ubuntu\n      versions:\n      - bionic\n      - artful\n      - xenial\n  galaxy_tags:\n    - docker\n\ndependencies: []\n```", "```\nAnsible Docker Role\n=========\nThis role installs the current Edge build Docker CE using the official repo, for more information on Docker CE see the official site at [https://www.docker.com/community-edition](https://www.docker.com/community-edition).\n\nRequirements\n------------\nApart from requiring root access via `become: yes` this role has no special requirements.\n\nRole Variables\n--------------\nAll of the variables can be found in the `vars` folder.\n\nDependencies\n------------\nNone.\n\nExample Playbook\n----------------\nAn example playbook can be found below;\n\n```", "```\n\nLicense\n-------\nBSD\n\nAuthor Information\n------------------\nThis role is published by [Russ McKendrick](http://russ.mckendrick.io/).\n```", "```\n$ git init\n$ git add -A .\n$ git commit -m \"first commit\"\n$ git remote add origin git@github.com:russmckendrick/ansible-role-docker.git\n$ git push -u origin master\n```", "```\n$ mkdir docker\n$ cd docker\n$ touch production requirements.yml site.yml Vagrantfile\n```", "```\ncentos ansible_host=10.20.30.10.nip.io \nubuntu ansible_host=10.20.30.20.nip.io ansible_python_interpreter=/usr/bin/python3\n\n[docker]\ncentos\nubuntu\n\n[docker:vars]\nansible_connection=ssh\nansible_user=vagrant\nansible_private_key_file=~/.ssh/id_rsa\nhost_key_checking=False\n```", "```\n- src: \"russmckendrick.docker\"\n```", "```\n---\n\n- hosts: docker\n  gather_facts: true\n  become: yes\n  become_method: sudo\n\n  roles:\n    - russmckendrick.docker\n```", "```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nAPI_VERSION = \"2\"\nDOMAIN = \"nip.io\"\nPRIVATE_KEY = \"~/.ssh/id_rsa\"\nPUBLIC_KEY = '~/.ssh/id_rsa.pub'\nCENTOS_IP = '10.20.30.10'\nCENTOS_BOX = 'centos/7'\nUBUNTU_IP = '10.20.30.20'\nUBUNTU_BOX = 'generic/ubuntu1804'\n\nVagrant.configure(API_VERSION) do |config|\n\n  config.vm.define \"centos\" do |centos|\n      centos.vm.box = CENTOS_BOX\n      centos.vm.network \"private_network\", ip: CENTOS_IP\n      centos.vm.host_name = CENTOS_IP + '.' + DOMAIN\n      centos.ssh.insert_key = false\n      centos.ssh.private_key_path = [PRIVATE_KEY, \"~/.vagrant.d/insecure_private_key\"]\n      centos.vm.provision \"file\", source: PUBLIC_KEY, destination: \"~/.ssh/authorized_keys\"\n\n      centos.vm.provider \"virtualbox\" do |v|\n        v.memory = \"2024\"\n        v.cpus = \"2\"\n      end\n\n      centos.vm.provider \"vmware_fusion\" do |v|\n        v.vmx[\"memsize\"] = \"2024\"\n        v.vmx[\"numvcpus\"] = \"2\"\n      end\n  end\n\n  config.vm.define \"ubuntu\" do |ubuntu|\n      ubuntu.vm.box = UBUNTU_BOX\n      ubuntu.vm.network \"private_network\", ip: UBUNTU_IP\n      ubuntu.vm.host_name = UBUNTU_IP + '.' + DOMAIN\n      ubuntu.ssh.insert_key = false\n      ubuntu.ssh.private_key_path = [PRIVATE_KEY, \"~/.vagrant.d/insecure_private_key\"]\n      ubuntu.vm.provision \"file\", source: PUBLIC_KEY, destination: \"~/.ssh/authorized_keys\"\n\n      ubuntu.vm.provider \"virtualbox\" do |v|\n        v.memory = \"2024\"\n        v.cpus = \"2\"\n      end\n\n      ubuntu.vm.provider \"vmware_fusion\" do |v|\n        v.vmx[\"memsize\"] = \"2024\"\n        v.vmx[\"numvcpus\"] = \"2\"\n      end\n  end\n\nend\n```", "```\n$ ansible-galaxy install -r requirements.yml\n```", "```\n$ vagrant up\n$ vagrant up --provider=vmware_fusion\n```", "```\n$ ansible-playbook -i production site.yml \n```", "```\n$ ansible-galaxy login\n```", "```\n$ ansible-galaxy login --github-token 0aa7c253044609b98425865wbf6z679a94613bae89 \n```", "```\n$ ansible-galaxy import russmckendrick ansible-role-docker\n```", "```\n$ ansible-galaxy search docker\n```", "```\n$ ansible-galaxy search --author=russmckendrick docker\n```", "```\n$ ansible-galaxy info russmckendrick.docker\n```"]