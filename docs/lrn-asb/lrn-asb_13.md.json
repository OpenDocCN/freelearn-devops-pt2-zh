["```\n$ mkdir scap scap/group_vars scap/roles\n$ touch scap/Vagrantfile scap/production scap/site.yml scap/group_vars/common.yml\n```", "```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nAPI_VERSION = \"2\"\nBOX_NAME = \"russmckendrick/centos75\"\nBOX_IP = \"10.20.30.40\"\nDOMAIN = \"nip.io\"\nPRIVATE_KEY = \"~/.ssh/id_rsa\"\nPUBLIC_KEY = '~/.ssh/id_rsa.pub'\n\nVagrant.configure(API_VERSION) do |config|\n  config.vm.box = BOX_NAME\n  config.vm.network \"private_network\", ip: BOX_IP\n  config.vm.host_name = BOX_IP + '.' + DOMAIN\n  config.vm.synced_folder \".\", \"/vagrant\", disabled: true\n  config.ssh.insert_key = false\n  config.ssh.private_key_path = [PRIVATE_KEY, \"~/.vagrant.d/insecure_private_key\"]\n  config.vm.provision \"file\", source: PUBLIC_KEY, destination: \"~/.ssh/authorized_keys\"\n\n  config.vm.provider \"virtualbox\" do |v|\n    v.memory = \"2024\"\n    v.cpus = \"2\"\n  end\n\n  config.vm.provider \"vmware_fusion\" do |v|\n    v.vmx[\"memsize\"] = \"2024\"\n    v.vmx[\"numvcpus\"] = \"2\"\n  end\n\nend\n```", "```\nbox1 ansible_host=10.20.30.40.nip.io\n\n[scap]\nbox1\n\n[scap:vars]\nansible_connection=ssh\nansible_user=vagrant\nansible_private_key_file=~/.ssh/id_rsa\nhost_key_checking=False \n```", "```\n$ vagrant up\n$ vagrant up --provider=vmware_fusion\n```", "```\n$ ansible-galaxy init roles/install\n```", "```\ninstall:\n  packages:\n    - \"openscap-scanner\"\n    - \"scap-security-guide\"\n```", "```\n- name: update all of the installed packages\n  yum:\n    name: \"*\"\n    state: \"latest\"\n    update_cache: \"yes\"\n\n- name: install the packages needed\n  package:\n    name: \"{{ item }}\"\n    state: latest\n  with_items: \"{{ install.packages }}\"\n```", "```\n$ ansible-galaxy init roles/scan\n```", "```\nallow_duplicates: true\n```", "```\noscap:\n  profile: \"xccdf_org.ssgproject.content_profile_pci-dss\"\n  policy: \"ssg-centos7-ds.xml\"\n  policy_path: \"/usr/share/xml/scap/ssg/content/\"\n```", "```\nreport:\n  report_remote_path: \"/tmp/{{ inventory_hostname }}_report_{{ report_name }}.html\"\n  report_local_path: \"generated/{{ inventory_hostname }}_report_{{ report_name }}.html\"\n  results: \"/tmp/{{ inventory_hostname }}_results_{{ report_name }}.xml\" \n```", "```\nscan_command: >\n  oscap xccdf eval --profile {{ oscap.profile }}\n    --fetch-remote-resources\n    --results-arf {{ report.results }}\n    --report {{ report.report_remote_path }}\n    {{ oscap.policy_path }}{{ oscap.policy }}\n```", "```\n- name: run the openscap scan\n  command: \"{{ scan_command }}\"\n  args:\n    creates: \"{{ report.report_remote_path }}\"\n  ignore_errors: yes\n```", "```\n- name: download the html report\n  fetch:\n    src: \"{{ report.report_remote_path }}\"\n    dest: \"{{ report.report_local_path }}\"\n    flat: yes\n```", "```\n---\n\n- hosts: scap\n  gather_facts: true\n  become: yes\n  become_method: sudo\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - { role: install, tags: [ \"scan\" ] }\n    - { role: scan, tags: [ \"scan\" ], report_name: \"01-initial-scan\" }\n```", "```\n$ ansible-playbook -i production site.yml\n```", "```\nPLAY [scap] ****************************************************************************************\n\nTASK [Gathering Facts] *****************************************************************************\nok: [box1]\n\nTASK [install : install the packages needed] *******************************************************\nchanged: [box1] => (item=openscap-scanner)\nchanged: [box1] => (item=scap-security-guide)\n\n```", "```\nTASK [scan : run the openscap scan] ****************************************************************\nfatal: [box1]: FAILED! => {\"changed\": true, \"cmd\": [\"oscap\", \"xccdf\", \"eval\", \"--profile\", \"xccdf_org.ssgproject.content_profile_pci-dss\", \"--fetch-remote-resources\", \"--results-arf\", \"/tmp/box1_results_01-initial-scan.xml\", \"--report\", \"/tmp/box1_report_01-initial-scan.html\", \"/usr/share/xml/scap/ssg/content/ssg-centos7-ds.xml\"], \"delta\": \"0:01:03.459407\", \"end\": \"2018-05-16 08:17:50.970321\", \"msg\": \"non-zero return code\", \"rc\": 2, \"start\": \"2018-05-16 08:16:47.510914\", \"stderr\": \"Downloading: https://www.redhat.com/security/data/oval/com.redhat.rhsa-RHEL7.xml.bz2 ... ok\", \"stderr_lines\": [\"Downloading: https://www.redhat.com/security/data/oval/com.redhat.rhsa-RHEL7.xml.bz2 ... ok\"], \"stdout\": \"Title\\r\\tEnsure Red Hat GPG Key Installed\\nRule\\r\\txccdf_org.ssgproject.content_rule_ensure_redhat_gpgkey_installed\\nResult\\r\\tpass\\n\\nTitle\\r\\tEnsure gpgcheck Enabled In Main Yum \"\\txccdf_org.ssgproject.content_rule_chronyd_or_ntpd_specify_multiple_servers\", \"Result\", \"\\tpass\"]}\n...ignoring\n\nTASK [scan : download the html report] *************************************************************\nchanged: [box1]\n\nPLAY RECAP *****************************************************************************************\nbox1 : ok=4 changed=3 unreachable=0 failed=0\n```", "```\n$ open generated/box1_report_01-initial-scan.html\n```", "```\n$ ansible-galaxy init roles/fix-ansible\n```", "```\nplaybook_file:\n  remote: \"/tmp/{{ inventory_hostname }}_ansible.yml\"\n  local: \"generated/{{ inventory_hostname }}_ansible.yml\"\n  log: \"generated/{{ inventory_hostname }}_ansible.log\"\n```", "```\nansible_fix_command: >\n  oscap xccdf generate fix\n    --profile {{ oscap.profile }}\n    --template urn:xccdf:fix:script:ansible\n    --output {{ playbook_file.remote }}\n    {{ report.results }}\n```", "```\nmissing_folders:\n  - \"/etc/dconf/db/local.d/locks/\"\n\nmissing_files:\n  - \"/etc/dconf/db/local.d/locks/00-security-settings-lock\"\n  - \"/etc/sysconfig/prelink\"\n```", "```\n- name: fix missing folders\n  file:\n    path: \"{{ item }}\"\n    state: \"directory\"\n  with_items: \"{{ missing_folders }}\"\n\n- name: fix missing files\n  file:\n    path: \"{{ item }}\"\n    state: \"touch\"\n  with_items: \"{{ missing_files }}\"\n```", "```\n- name: do we already have the playbook?\n  stat:\n    path: \"{{ playbook_file.remote }}\"\n  register: playbook_check\n```", "```\n- name: generate the ansible playbook with the fixes\n  command: \"{{ ansible_fix_command }}\"\n  args:\n    creates: \"{{ playbook_file.remote }}\" \n  ignore_errors: yes\n```", "```\n- name: download the ansible playbook\n  fetch:\n    src: \"{{ playbook_file.remote }}\"\n    dest: \"{{ playbook_file.local }}\"\n    flat: yes\n  when: playbook_check.stat.exists == False\n```", "```\n- name: run the ansible playbook locally\n  local_action:\n    module: \"command ansible-playbook -i production --become --become-method sudo {{ playbook_file.local }}\"\n  become: no\n  register: playbook_run\n  when: playbook_check.stat.exists == False\n```", "```\n$ ansible-playbook -i production --become --become-method sudo generated/box1_ansible.yml\n```", "```\n- name: write the results to a log file\n  local_action:\n    module: \"copy content={{ playbook_run.stdout }} dest={{ playbook_file.log }}\"\n  become: no\n  when: playbook_check.stat.exists == False\n```", "```\n---\n\n- hosts: scap\n  gather_facts: true\n  become: yes\n  become_method: sudo\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - { role: install, tags: [ \"scan\" ] }\n    - { role: scan, tags: [ \"scan\" ], report_name: \"01-initial-scan\" }\n    - { role: fix-ansible, report_name: \"01-initial-scan\" }\n    - { role: scan, report_name: \"02-post-ansible-fix\" }\n```", "```\n$ ansible-playbook -i production site.yml\n```", "```\nPLAY [scap] *************************************************************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [box1]\n\nTASK [install : update all of the installed packages] *******************************************\nok: [box1]\n\nTASK [install : install the packages needed] ****************************************************\nok: [box1] => (item=openscap-scanner)\nok: [box1] => (item=scap-security-guide)\n\nTASK [scan : run the openscap scan] *************************************************************\nok: [box1]\n\nTASK [scan : download the html report] **********************************************************\nok: [box1]\n\nTASK [fix-ansible : fix missing folders] ********************************************************\nchanged: [box1] => (item=/etc/dconf/db/local.d/locks/)\n\nTASK [fix-ansible : fix missing files] **********************************************************\nchanged: [box1] => (item=/etc/dconf/db/local.d/locks/00-security-settings-lock)\nchanged: [box1] => (item=/etc/sysconfig/prelink)\n\nTASK [fix-ansible : do we already have the playbook?] *******************************************\nok: [box1]\n\nTASK [fix-ansible : generate the ansible playbook with the fixes] *******************************\nchanged: [box1]\n\nTASK [fix-ansible : download the ansible playbook] **********************************************\nchanged: [box1]\n\nTASK [fix-ansible : run the ansible playbook locally] *******************************************\nchanged: [box1 -> localhost]\n\nTASK [fix-ansible : write the results to a log file] ********************************************\nchanged: [box1 -> localhost]\n\nTASK [scan : run the openscap scan] *************************************************************\nfatal: [box1]: FAILED! => \n...ignoring\n\nTASK [scan : download the html report] **********************************************************\nchanged: [box1]\n\nPLAY RECAP **************************************************************************************\nbox1 : ok=14 changed=8 unreachable=0 failed=0\n```", "```\n$ open generated/box1_report_02-post-ansible-fix.html\n```", "```\n    - name: Set SSH Idle Timeout Interval\n      lineinfile:\n        create: yes\n        dest: /etc/ssh/sshd_config\n        regexp: ^ClientAliveInterval\n        line: \"ClientAliveInterval {{ sshd_idle_timeout_value }}\"\n        validate: sshd -t -f %s\n      #notify: restart sshd\n      tags:\n        - sshd_set_idle_timeout\n        - low_severity\n        - restrict_strategy\n        - low_complexity\n        - low_disruption\n        - CCE-27433-2\n        - NIST-800-53-AC-2(5)\n        - NIST-800-53-SA-8(i)\n        - NIST-800-53-AC-12\n        - NIST-800-171-3.1.11\n        - PCI-DSS-Req-8.1.8\n        - CJIS-5.5.6\n        - DISA-STIG-RHEL-07-040320\n```", "```\n$ ansible-playbook -i production --become --become-method sudo --tags \"low_disruption\" generated/box1_ansible.yml\n```", "```\nPLAY RECAP **************************************************************************************\nbox1 : ok=151 changed=85 unreachable=0 failed=0 \n```", "```\n$ ansible-galaxy init roles/fix-bash\n```", "```\nbash_file:\n  remote: \"/tmp/{{ inventory_hostname }}_bash.sh\"\n  log: \"generated/{{ inventory_hostname }}_bash.log\"\n\nbash_fix_command: >\n  oscap xccdf generate fix\n    --profile {{ oscap.profile }}\n    --output {{ bash_file.remote }}\n    {{ report.results }}\n```", "```\n- name: do we already have the bash script?\n  stat:\n    path: \"{{ bash_file.remote }}\"\n  register: bash_script_check\n\n- name: generate the bash script\n  command: \"{{ bash_fix_command }}\"\n  args:\n    creates: \"{{ bash_file.remote }}\" \n  ignore_errors: yes\n\n- name: run the bash script\n  command: \"bash {{ bash_file.remote }}\"\n  ignore_errors: yes\n  register: bash_run\n  when: bash_script_check.stat.exists == False\n\n- name: write the results to a log file\n  local_action:\n    module: \"copy content={{ bash_run.stdout }} dest={{ bash_file.log }}\"\n  become: no\n  when: bash_script_check.stat.exists == False\n```", "```\n- hosts: scap\n  gather_facts: true\n  become: yes\n  become_method: sudo\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - { role: install, tags: [ \"scan\" ] }\n    - { role: scan, tags: [ \"scan\" ], report_name: \"01-initial-scan\" }\n    - { role: fix-ansible, report_name: \"01-initial-scan\" }\n    - { role: scan, report_name: \"02-post-ansible-fix\" }\n    - { role: fix-bash, report_name: \"02-post-ansible-fix\" }\n    - { role: scan, report_name: \"03-post-bash-fix\" }\n```", "```\n$ ansible-playbook -i production site.yml\n```", "```\nPLAY [scap] *************************************************************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [box1]\n\nTASK [install : update all of the installed packages] *******************************************\nok: [box1]\n\nTASK [install : install the packages needed] ****************************************************\nok: [box1] => (item=openscap-scanner)\nok: [box1] => (item=scap-security-guide)\n\nTASK [scan : run the openscap scan] *************************************************************\nok: [box1]\n\nTASK [scan : download the html report] **********************************************************\nok: [box1]\n\nTASK [fix-ansible : fix missing folders] ********************************************************\nok: [box1] => (item=/etc/dconf/db/local.d/locks/)\n\nTASK [fix-ansible : fix missing files] **********************************************************\nchanged: [box1] => (item=/etc/dconf/db/local.d/locks/00-security-settings-lock)\nchanged: [box1] => (item=/etc/sysconfig/prelink)\n\nTASK [fix-ansible : do we already have the playbook?] *******************************************\nok: [box1]\n\nTASK [fix-ansible : generate the ansible playbook with the fixes] *******************************\nskipping: [box1]\n\nTASK [fix-ansible : download the ansible playbook] **********************************************\nskipping: [box1]\n\nTASK [fix-ansible : run the ansible playbook locally] *******************************************\nskipping: [box1]\n\nTASK [fix-ansible : write the results to a log file] ********************************************\nskipping: [box1]\n\nTASK [scan : run the openscap scan] *************************************************************\nok: [box1]\n\nTASK [scan : download the html report] **********************************************************\nok: [box1]\n\nTASK [fix-bash : do we already have the bash script?] *******************************************\nok: [box1]\n\nTASK [fix-bash : generate the bash script] ******************************************************\nchanged: [box1]\n\nTASK [fix-bash : run the bash script] ***********************************************************\nchanged: [box1]\n\nTASK [fix-bash : write the results to a log file] ***********************************************\nchanged: [box1 -> localhost]\n\nTASK [scan : run the openscap scan] *************************************************************\nfatal: [box1]: FAILED! =>\n...ignoring\n\nTASK [scan : download the html report] **********************************************************\nchanged: [box1]\n\nPLAY RECAP **************************************************************************************\nbox1 : ok=16 changed=6 unreachable=0 failed=0\n```", "```\n$ open generated/box1_report_03-post-bash-fix.html\n```", "```\n$ ansible-playbook -i production --tags \"scan\" --extra-vars \"report_name=scan-only\" site.yml\n```", "```\n$ ansible-galaxy init roles/final-fixes\n```", "```\n- name: sort out the logrotate\n  lineinfile:\n    path: \"/etc/logrotate.conf\"\n    regexp: \"^weekly\"\n    line: \"daily\"\n```", "```\n- name: add the missing line to the modules.rules\n  lineinfile:\n    path: \"/etc/audit/rules.d/modules.rules\"\n    line: \"-a always,exit -F arch=b32 -S init_module -S delete_module -k modules\"\n```", "```\n- name: add file for content_rule_file_permissions_var_log_audit\n  file:\n    path: \"/var/log/audit/audit.log.fix\"\n    state: \"touch\"\n```", "```\n- name: copy the content_rule_file_permissions_var_log_audit.sh script\n  copy:\n    src: \"content_rule_file_permissions_var_log_audit.sh\"\n    dest: \"/tmp/content_rule_file_permissions_var_log_audit.sh\"\n\n- name: run the content_rule_file_permissions_var_log_audit.sh script \n  command: \"bash /tmp/content_rule_file_permissions_var_log_audit.sh\"\n```", "```\nif `grep -q ^log_group /etc/audit/auditd.conf` ; then\n  GROUP=$(awk -F \"=\" '/log_group/ {print $2}' /etc/audit/auditd.conf | tr -d ' ')\n  if ! [ \"${GROUP}\" == 'root' ] ; then\n    chmod 0640 /var/log/audit/audit.log\n    chmod 0440 /var/log/audit/audit.log.*\n  else\n    chmod 0600 /var/log/audit/audit.log\n    chmod 0400 /var/log/audit/audit.log.*\n  fi\n\n  chmod 0640 /etc/audit/audit*\n  chmod 0640 /etc/audit/rules.d/*\nelse\n  chmod 0600 /var/log/audit/audit.log\n  chmod 0400 /var/log/audit/audit.log.*\n  chmod 0640 /etc/audit/audit*\n  chmod 0640 /etc/audit/rules.d/*\nfi\n```", "```\n---\n\n- hosts: scap\n  gather_facts: true\n  become: yes\n  become_method: sudo\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - { role: final-fixes }\n    - { role: scan, report_name: \"04-final-fixes\" }\n```", "```\n$ ansible-playbook -i production final-fixes.yml\n```", "```\nPLAY [scap] *************************************************************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [box1]\n\nTASK [final-fixes : sort out the logrotate] *****************************************************\nchanged: [box1]\n\nTASK [final-fixes : add the missing line to the modules.rules] **********************************\nchanged: [box1]\n\nTASK [final-fixes : add file for content_rule_file_permissions_var_log_audit] *******************\nchanged: [box1]\n\nTASK [final-fixes : copy the content_rule_file_permissions_var_log_audit.sh script] *************\nchanged: [box1]\n\nTASK [final-fixes : run the content_rule_file_permissions_var_log_audit.sh script] **************\nchanged: [box1]\n\nTASK [scan : run the openscap scan] *************************************************************\nfatal: [box1]: FAILED! => \n...ignoring\n\nTASK [scan : download the html report] **********************************************************\nchanged: [box1]\n\nPLAY RECAP **************************************************************************************\nbox1 : ok=8 changed=7 unreachable=0 failed=0\n```", "```\n$ open generated/box1_report_04-final-fixes.html\n```", "```\n$ vagrant destroy\n```"]