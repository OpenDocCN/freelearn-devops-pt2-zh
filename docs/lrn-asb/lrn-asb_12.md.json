["```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nAPI_VERSION  = \"2\"\nBOX_NAME     = \"StefanScherer/windows_2016\"\nCOMMUNICATOR = \"winrm\"\nUSERNAME     = \"vagrant\"\nPASSWORD     = \"vagrant\"\n\nVagrant.configure(API_VERSION) do |config|\n  config.vm.define \"vagrant-windows-2016\"\n  config.vm.box = BOX_NAME\n  config.vm.synced_folder \".\", \"/vagrant\", disabled: true\n  config.vm.network \"forwarded_port\", guest: 80, host: 8080\n  config.vm.communicator = COMMUNICATOR\n  config.winrm.username = USERNAME\n  config.winrm.password = PASSWORD\n\n  config.vm.provider \"virtualbox\" do |v|\n    v.memory = \"4048\"\n    v.cpus = \"4\"\n    v.gui = true\n  end\n\n  config.vm.provider \"vmware_fusion\" do |v|\n    v.vmx[\"memsize\"] = \"4048\"\n    v.vmx[\"numvcpus\"] = \"4\"\n  end\n\nend\n```", "```\n$ vagrant up\n```", "```\n$ vagrant up --provider=vmware_fusion\n```", "```\n$ sudo pip install pywinrm[credssp]\n```", "```\n$ sudo pip install pywinrm[credssp] --ignore-installed pyOpenSSL\n```", "```\nbox1 ansible_host=localhost\n\n[windows]\nbox1\n\n[windows:vars]\nansible_connection=winrm\nansible_user=vagrant\nansible_password=vagrant\nansible_port=55985\nansible_winrm_scheme=http\nansible_winrm_server_cert_validation=ignore\n```", "```\n$ ansible windows -i production -m win_ping\n```", "```\n$ export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES\n```", "```\n$ ansible windows -i production -m setup\n```", "```\n---\n\n- hosts: windows\n  gather_facts: true\n\n  tasks:\n    - debug:\n        msg: \"I am connecting to {{ ansible_nodename }} which is running {{ ansible_distribution }} {{ ansible_distribution_version }}\"\n```", "```\n$ ansible-playbook -i production playbook01.yml\n```", "```\n$ mkdir web web/group_vars web/roles\n$ touch web/production web/site.yml web/group_vars/common.yml\n```", "```\n$ cd web\n$ ansible-galaxy init roles/iis\n```", "```\n---\n# defaults file for web/roles/iis\n\ndocument_root: 'C:\\inetpub\\wwwroot\\'\nhtml_file: ansible.html\n\nhtml_heading: \"Success !!!\"\nhtml_body: |\n  This HTML page has been deployed using Ansible to a <b>{{ ansible_distribution }}</b> host.<br><br>\n  The weboot is <b>{{ document_root }}</b> this file is called <b>{{ html_file }}</b>.<br>\n```", "```\n<!--{{ ansible_managed }}-->\n<!doctype html>\n<title>{{ html_heading }}</title>\n<style>\n  body { text-align: center; padding: 150px; }\n  h1 { font-size: 50px; }\n  body { font: 20px Helvetica, sans-serif; color: #333; }\n  article { display: block; text-align: left; width: 650px; margin: 0 auto; }\n</style>\n<article>\n    <h1>{{ html_heading }}</h1>\n    <div>\n        <p>{{ html_body }}</p>\n    </div>\n</article>\n```", "```\n- name: enable IIS\n  win_feature:\n    name: \n      - \"Web-Server\"\n      - \"Web-Common-Http\"\n    state: \"present\"\n```", "```\n- name: create an html file from a template\n  win_template:\n    src: \"index.html.j2\"\n    dest: \"{{ document_root }}{{ html_file }}\"\n```", "```\n---\n\n- hosts: windows\n  gather_facts: true\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - roles/iis\n```", "```\n$ ansible-playbook -i production site.yml\n```", "```\n$ ansible-galaxy init roles/asp\n```", "```\naspx_document_root: 'C:\\inetpub\\wwwroot\\ansible\\'\naspx_file: default.aspx\n\naspx_heading: \"Success !!!\"\naspx_body: |\n  This HTML page has been deployed using Ansible to a <b>{{ ansible_distribution }}</b> host.<br><br>\n  The weboot is <b>{{ aspx_document_root }}</b> this file is called <b>{{ aspx_file }}</b>.<br><br>\n  The output below is from ASP.NET<br><br>\n  Hello from <%= Environment.MachineName %> at <%= DateTime.UtcNow %><br><br>\n```", "```\n<!--{{ ansible_managed }}-->\n<!doctype html>\n<title>{{ html_heading }}</title>\n<style>\n  body { text-align: center; padding: 150px; }\n  h1 { font-size: 50px; }\n  body { font: 20px Helvetica, sans-serif; color: #333; }\n  article { display: block; text-align: left; width: 650px; margin: 0 auto; }\n</style>\n<article>\n    <h1>{{ aspx_heading }}</h1>\n    <div>\n        <p>{{ aspx_body }}</p>\n    </div>\n</article>\n```", "```\n- name: enable .net\n  win_feature:\n    name: \n      - \"Net-Framework-Features\"\n      - \"Web-Asp-Net45\"\n      - \"Web-Net-Ext45\"\n    state: \"present\"\n  notify: restart iis\n```", "```\n- name: create the folder for our asp.net app\n  win_file:\n    path: \"{{ aspx_document_root }}\"\n    state: \"directory\"\n\n- name: create an aspx file from a template\n  win_template:\n    src: \"default.aspx.j2\"\n    dest: \"{{ aspx_document_root }}{{ aspx_file }}\"\n```", "```\n- name: ensure the default web application exists\n  win_iis_webapplication:\n    name: \"Default\"\n    state: \"present\"\n    physical_path: \"{{ aspx_document_root }}\"\n    application_pool: \"DefaultAppPool\"\n    site: \"Default Web Site\"\n```", "```\n- name: restart iis\n  win_service:\n    name: w3svc\n    state: restarted\n```", "```\n---\n\n- hosts: windows\n  gather_facts: true\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - roles/iis\n    - roles/asp\n```", "```\n$ ansible-playbook -i production site.yml\n```", "```\n$ vagrant destroy\n```", "```\n$ mkdir cloud cloud/group_vars cloud/roles\n$ touch cloud/production cloud/site.yml cloud/group_vars/common.yml\n```", "```\n$ cd cloud\n$ ansible-galaxy init roles/aws\n```", "```\nvpc_cidr_block: \"10.0.0.0/16\"\nthe_subnets:\n  - { use: 'ec2', az: 'a', subnet: '10.0.10.0/24' }\n\nec2:\n  instance_type: \"t2.large\"\n  wait_port: \"5986\"\n\nimage:\n  base: Windows_Server-2016-English-Full-Base-*\n  owner: amazon\n  architecture: x86_64\n  root_device: ebs\n\nwin_initial_password: \"{{ lookup('password', 'group_vars/generated_administrator chars=ascii_letters,digits length=30') }}\"\n```", "```\n- name: ensure that the VPC is present\n  ec2_vpc_net:\n    region: \"{{ ec2_region }}\"\n    name: \"{{ environment_name }}\"\n    state: present\n    cidr_block: \"{{ vpc_cidr_block }}\"\n    resource_tags: { \"Name\" : \"{{ environment_name }}\", \"Environment\" : \"{{ environment_name }}\" }\n  register: vpc_info\n\n- name: ensure that the subnets are present\n  ec2_vpc_subnet:\n    region: \"{{ ec2_region }}\"\n    state: present\n    vpc_id: \"{{ vpc_info.vpc.id }}\"\n    cidr: \"{{ item.subnet }}\"\n    az: \"{{ ec2_region }}{{ item.az }}\"\n    resource_tags: \n      \"Name\" : \"{{ environment_name }}_{{ item.use }}_{{ ec2_region }}{{ item.az }}\"\n      \"Environment\" : \"{{ environment_name }}\"\n      \"Use\" : \"{{ item.use }}\"\n  with_items: \"{{ the_subnets }}\"\n\n- name: gather information about the ec2 subnets\n  ec2_vpc_subnet_facts:\n    region: \"{{ ec2_region }}\"\n    filters:\n      \"tag:Use\": \"ec2\"\n      \"tag:Environment\": \"{{ environment_name }}\"\n  register: subnets_ec2\n\n- name: register just the IDs for each of the subnets\n  set_fact:\n    subnet_ec2_ids: \"{{ subnets_ec2.subnets | map(attribute='id') | list }}\"\n\n- name: find out your current public IP address using https://ipify.org/\n  ipify_facts:\n  register: public_ip\n\n- name: set your public ip as a fact\n  set_fact:\n    your_public_ip: \"{{ public_ip.ansible_facts.ipify_public_ip }}/32\"\n```", "```\n- name: provision ec2 security group\n  ec2_group:\n    region: \"{{ ec2_region }}\"\n    vpc_id: \"{{ vpc_info.vpc.id }}\"\n    name: \"{{ environment_name }}-ec2\"\n    description: \"Opens the RDP and WinRM ports to a trusted IP\"\n    tags:\n      \"Name\": \"{{ environment_name }}-ec2\"\n      \"Environment\": \"{{ environment_name }}\"\n    rules:\n      - proto: \"tcp\"\n        from_port: \"3389\"\n        to_port: \"3389\"\n        cidr_ip: \"{{ your_public_ip }}\"\n        rule_desc: \"allow {{ your_public_ip }} access to port RDP\"\n      - proto: \"tcp\"\n        from_port: \"5985\"\n        to_port: \"5985\"\n        cidr_ip: \"{{ your_public_ip }}\"\n        rule_desc: \"allow {{ your_public_ip }} access to WinRM\"\n      - proto: \"tcp\"\n        from_port: \"5986\"\n        to_port: \"5986\"\n        cidr_ip: \"{{ your_public_ip }}\"\n        rule_desc: \"allow {{ your_public_ip }} access to WinRM\"\n  register: sg_ec2\n```", "```\n- name: ensure that there is an internet gateway\n  ec2_vpc_igw:\n    region: \"{{ ec2_region }}\"\n    vpc_id: \"{{ vpc_info.vpc.id }}\"\n    state: present\n    tags:\n      \"Name\": \"{{ environment_name }}_internet_gateway\"\n      \"Environment\": \"{{ environment_name }}\"\n      \"Use\": \"gateway\"\n  register: igw_info\n\n- name: check that we can route through internet gateway\n  ec2_vpc_route_table:\n    region: \"{{ ec2_region }}\"\n    vpc_id: \"{{ vpc_info.vpc.id }}\"\n    subnets: \"{{ subnet_ec2_ids }}\"\n    routes:\n      - dest: 0.0.0.0/0\n        gateway_id: \"{{ igw_info.gateway_id }}\"\n    resource_tags:\n      \"Name\": \"{{ environment_name }}_outbound\"\n      \"Environment\": \"{{ environment_name }}\"\n\n- name: search for all of the AMIs in the defined region which match our selection\n  ec2_ami_facts:\n    region: \"{{ ec2_region }}\"\n    owners: \"{{ image.owner }}\"\n    filters:\n      name: \"{{ image.base }}\"\n      architecture: \"{{ image.architecture }}\"\n      root-device-type: \"{{ image.root_device }}\" \n  register: amiFind\n\n- name: filter the list of AMIs to find the latest one with an EBS backed volume\n  set_fact:\n    amiSortFilter: \"{{ amiFind.images | sort(attribute='creation_date') | last }}\"\n\n- name: finally grab AMI ID of the most recent result which matches our base image which is backed by an EBS volume\n  set_fact:\n    our_ami_id: \"{{ amiSortFilter.image_id }}\"\n```", "```\n- name: launch an instance\n  ec2_instance:\n    region: \"{{ ec2_region }}\"\n    state: \"present\"\n    instance_type: \"{{ ec2.instance_type }}\"\n    image_id: \"{{ our_ami_id }}\"\n    wait: yes\n    security_groups: [ \"{{ sg_ec2.group_id }}\" ]\n    network: \n      assign_public_ip: true\n    filters:\n      instance-state-name: \"running\"\n      \"tag:Name\": \"{{ environment_name }}\"\n      \"tag:environment\": \"{{ environment_name }}\"\n    vpc_subnet_id: \"{{ subnet_ec2_ids[0] }}\"\n    user_data: \"{{ lookup('template', 'userdata.j2') }}\"\n    tags:\n      Name: \"{{ environment_name }}\"\n      environment: \"{{ environment_name }}\"\n```", "```\n- name: gather facts on the instance we just launched using the AWS API\n  ec2_instance_facts:\n    region: \"{{ ec2_region }}\"\n    filters:\n      instance-state-name: \"running\"\n      \"tag:Name\": \"{{ environment_name }}\"\n      \"tag:environment\": \"{{ environment_name }}\"\n  register: singleinstance\n\n- name: add our temporary instance to a host group for use in the next step\n  add_host:\n    name: \"{{ item.public_dns_name }}\"\n    ansible_ssh_host: \"{{ item.public_dns_name }}\"\n    groups: \"ec2_instance\"\n  with_items: \"{{ singleinstance.instances }}\"\n\n- name: wait until WinRM is available before moving onto the next step\n  wait_for:\n    host: \"{{ item.public_dns_name }}\"\n    port: \"{{ ec2.wait_port }}\"\n    delay: 2\n    timeout: 320\n    state: \"started\"\n  with_items: \"{{ singleinstance.instances }}\"\n```", "```\n<powershell>\n$admin = [adsi](\"WinNT://./administrator, user\")\n$admin.PSBase.Invoke(\"SetPassword\", \"{{ win_initial_password }}\")\nInvoke-Expression ((New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1'))\n</powershell>\n```", "```\n$ ansible-galaxy init roles/user\n```", "```\nansible:\n  username: \"ansible\"\n  password: \"{{ lookup('password', 'group_vars/generated_ansible chars=ascii_letters,digits length=30') }}\"\n  groups:\n    - \"Users\"\n    - \"Administrators\"\n```", "```\n- name: ensure that the ansible created users are present\n  win_user:\n    name: \"{{ ansible.username }}\"\n    fullname: \"{{ ansible.username | capitalize }}\"\n    password: \"{{ ansible.password }}\"\n    state: \"present\"\n    groups: \"{{ ansible.groups }}\"\n```", "```\n$ ansible-galaxy init roles/choc\n```", "```\napps:\n  - \"notepadplusplus.install\"\n  - \"putty.install\"\n  - \"googlechrome\"\n```", "```\n- name: install software using chocolatey\n  win_chocolatey:\n    name: \"{{ item }}\"\n    state: \"present\"\n  with_items: \"{{ apps }}\"\n```", "```\n$ ansible-galaxy init roles/info\n```", "```\n- name: print out information on the host\n  debug:\n    msg: \"You can connect to '{{ inventory_hostname }}' using the username of '{{ ansible.username }}' with a password of '{{ ansible.password }}'.\"\n```", "```\nenvironment_name: \"windows_example\"\nec2_region: \"eu-west-1\"\n```", "```\n[ec2_instance]\n\n[ec2_instance:vars]\nansible_connection=winrm\nansible_user=\"Administrator\"\nansible_password=\"{{ lookup('password', 'group_vars/generated_administrator chars=ascii_letters,digits length=30') }}\"\nansible_winrm_server_cert_validation=ignore\n```", "```\n---\n\n- name: Create the AWS environment and launch an EC2 instance\n  hosts: localhost\n  connection: local\n  gather_facts: True\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - roles/aws\n\n- name: Bootstrap the EC2 instance\n  hosts: ec2_instance\n  gather_facts: true\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - roles/user\n    - roles/choc\n    - roles/info \n```", "```\n$ export AWS_ACCESS_KEY=AKIAI5KECPOTNTTVM3EDA\n$ export AWS_SECRET_KEY=Y4B7FFiSWl0Am3VIFc07lgnc/TAtK5+RpxzIGTr\n$ ansible-playbook -i production site.yml\n```", "```\n[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit\nlocalhost does not match 'all'\n\nPLAY [Create the AWS environment and launch an EC2 instance] ************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [localhost]\n\nTASK [roles/aws : ensure that the VPC is present] ***********************************************\nchanged: [localhost]\n\nTASK [roles/aws : ensure that the subnets are present] ******************************************\nchanged: [localhost] => (item={u'subnet': u'10.0.10.0/24', u'use': u'ec2', u'az': u'a'})\n\nTASK [roles/aws : gather information about the ec2 subnets] *************************************\nok: [localhost]\n\nTASK [roles/aws : register just the IDs for each of the subnets] ********************************\nok: [localhost]\n\nTASK [roles/aws : find out your current public IP address using https://ipify.org/] *************\nok: [localhost]\n\nTASK [roles/aws : set your public ip as a fact] *************************************************\nok: [localhost]\n\nTASK [roles/aws : provision ec2 security group] *************************************************\nchanged: [localhost]\n\nTASK [roles/aws : ensure that there is an internet gateway] *************************************\nchanged: [localhost]\n\nTASK [roles/aws : check that we can route through internet gateway] *****************************\nchanged: [localhost]\n\nTASK [roles/aws : search for all of the AMIs in the defined region which match our selection] ***\nok: [localhost]\n\nTASK [roles/aws : filter the list of AMIs to find the latest one with an EBS backed volume] *****\nok: [localhost]\n\nTASK [roles/aws : finally grab AMI ID of the most recent result which matches our base image which is backed by an EBS volume] ***************************************************************\nok: [localhost]\n\nTASK [roles/aws : launch an instance] ***********************************************************\nchanged: [localhost]\n\nTASK [roles/aws : gather facts on the instance we just launched using the AWS API] **************\nok: [localhost]\n\nTASK [roles/aws : add our temporary instance to a host group for use in the next step] **********\nchanged: [localhost] => \n\nTASK [roles/aws : wait until WinRM is available before moving onto the next step] ***************\nok: [localhost] => \n\nPLAY [Bootstrap the EC2 instance] ***************************************************************\n\nTASK [Gathering Facts] **************************************************************************\nok: [ec2-34-245-2-119.eu-west-1.compute.amazonaws.com]\n\nTASK [roles/user : ensure that the ansible created users are present] **************************\nchanged: [ec2-34-245-2-119.eu-west-1.compute.amazonaws.com]\n\nTASK [roles/choc : install software using chocolatey] *******************************************\nchanged: [ec2-34-245-2-119.eu-west-1.compute.amazonaws.com] => (item=notepadplusplus.install)\nchanged: [ec2-34-245-2-119.eu-west-1.compute.amazonaws.com] => (item=putty.install)\nchanged: [ec2-34-245-2-119.eu-west-1.compute.amazonaws.com] => (item=googlechrome)\n [WARNING]: Chocolatey was missing from this system, so it was installed during this task run.\n\nTASK [roles/info : print out informaton on the host] ********************************************\nok: [ec2-34-245-2-119.eu-west-1.compute.amazonaws.com] => {\n \"msg\": \"You can connect to 'ec2-34-245-2-119.eu-west-1.compute.amazonaws.com' using the username of 'ansible' with a password of 'Qb9LVPkUeZFRx5HLFgVllFrkqK7HHN'.\"\n}\n\nPLAY RECAP **************************************************************************************\nec2-34-245-2-119.eu-west-1.compute.amazonaws.com : ok=4 changed=2 unreachable=0 failed=0\nlocalhost : ok=17 changed=7 unreachable=0 failed=0\n```", "```\n$ ansible-playbook -i production remove.yml\n```"]