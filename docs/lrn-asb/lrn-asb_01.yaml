- en: An Introduction to Ansible
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible简介
- en: In our first chapter, we are going to be looking at the technology world before
    tools such as Ansible came into existence in order to get an understanding of
    why Ansible was needed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一章中，我们将研究Ansible出现之前的技术世界，以便了解为什么需要Ansible。
- en: Before we start to talk about Ansible, let's quickly discuss the old world.
    I have been working with servers, mostly ones that serve web pages, since the
    late 90s, and the landscape is unrecognizable. To give you an idea of how I used
    to operate my early servers, here is a quick overview of my first few years running
    servers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始讨论Ansible之前，让我们快速讨论一下旧世界。我从90年代末开始就一直在使用服务器，大多数是用来提供网页服务的，而当时的情况已经完全不同了。为了让你了解我是如何操作我的早期服务器的，这里是我运行服务器的前几年的简要概述。
- en: Like most people at the time, I started with a shared hosting account where
    I had very little control over anything on the server side when the site I was
    running at the time outgrew shared hosting. I moved to a dedicated server—this
    is where I thought I would be able to flex my future system administrator muscles,
    but I was wrong.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 和当时的大多数人一样，我最初使用的是共享托管账户，在那时，我对服务器端的任何事情都几乎没有控制权。当时运行的网站已经超出了共享托管的范围。我转移到了专用服务器——我以为我可以在这里展示未来的系统管理员能力，但我错了。
- en: The server I got was a Cobalt RaQ 3, a 1U server appliance, which, in my opinion,
    was ahead of its time. However, I did not have root level access to the machine
    and for everything I needed to do, I had to use the web-based control panel. Eventually,
    I got a level of access where I could access the server using SSH or Telnet (I
    know, it was the early days), and I started to teach myself how to be a system
    administrator by making changes in the web control panel and looking at the changes
    to the configuration files on the server.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我得到的服务器是Cobalt RaQ 3，一个1U服务器设备，我认为它领先于当时的技术。然而，我没有root级别的访问权限，对于我需要做的一切，我都必须使用基于Web的控制面板。最终，我获得了一定级别的访问权限，可以使用SSH或Telnet访问服务器（我知道，那是早期），并开始通过在Web控制面板中进行更改并查看服务器上的配置文件来自学成为系统管理员。
- en: After a while, I changed servers and this time opted to forego any web-based
    control panel and just use what I had learned with the Cobalt RaQ to configure
    my first proper **Linux, Apache, MySQL, PHP** (**LAMP**) server by using the pages
    of notes I had made. I had created my own runbooks of one-liners to install and
    configure the software I needed, as well as numerous scribbles to help me look
    into problems and keep the lights on.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 过了一段时间，我换了服务器，这次我选择放弃任何基于Web的控制面板，只使用我在Cobalt RaQ上学到的知识来配置我的第一个真正的**Linux, Apache,
    MySQL, PHP** (**LAMP**)服务器，使用我做的笔记。我创建了自己的运行手册，包括一行命令来安装和配置我需要的软件，以及大量的涂鸦来帮助我解决问题并保持服务器运行。
- en: After I got my second server for another project, I realized that was probably
    a good time to type out my notes so that I could copy and paste them when I needed
    to deploy a server, which I am glad I did, as it was shortly after my first server
    failed—my host apologized and replaced it with a higher-specification but completely
    fresh machine with an updated operating system.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当我为另一个项目获得了第二台服务器后，我意识到这可能是一个好时机，可以打字记录我的笔记，这样在需要部署服务器时就可以复制粘贴，我很高兴我这样做了，因为就在我的第一台服务器失败后不久，我的主机道歉并用一台更新的操作系统替换了它，配置也更高。
- en: So I grabbed my Microsoft Word file containing the notes I made and proceeded
    to then copy and paste each instruction, making tweaks based on what I needed
    to install and also on the upgraded operating system. Several hours later, I had
    my server up and running and my data restored.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 于是，我打开了我的Microsoft Word文件，里面有我做的笔记，然后逐条复制粘贴每条指令，根据我需要安装的内容和升级后的操作系统进行调整。几个小时后，我的服务器恢复正常运行，我的数据也被恢复了。
- en: One of the important lessons I learned, other than that there is no such thing
    as too many backups, was to not use Microsoft Word to store these types of notes;
    the command doesn't care if your notes are all nicely formatted with headings
    and courier font for the bits you need to paste. What it does care about is using
    proper syntax, which Word had managed to autocorrect and format for print.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我学到的一个重要教训之一是，备份永远不嫌多，另一个是不要使用Microsoft Word来存储这些类型的笔记；命令并不在乎你的笔记是否都是用漂亮的格式和Courier字体编写的。它在乎的是使用正确的语法，而Word已经自动更正和格式化为打印格式。
- en: So, I made a copy of the history file on the server and transcribed my notes
    in plaintext. These notes provided the base for the next few years as I started
    to script parts of them, mostly the bits that didn't require any user input.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我在服务器上复制了历史文件，并将我的笔记转录成纯文本。这些笔记成为了接下来几年的基础，因为我开始对其中的部分内容进行脚本化，主要是那些不需要用户输入的部分。
- en: These scraps of commands, one-liners, and scripts were all adapted through Red
    Hat Linux 6—note the lack of the word *Enterprise*—all the way through to CentOS
    3 and 4.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令片段、一行命令和脚本都是通过Red Hat Linux 6进行调整的，一直到CentOS 3和4。
- en: Things got complicated when I changed roles, stopped consuming services from
    web hosts, and started working for one. All of a sudden, I was building servers
    for customers who may have different requirements than my own projects—no one
    server was the same.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当我改变了角色，停止了从Web主机那里获取服务，并开始为Web主机工作时，事情变得复杂起来。突然间，我开始为可能有不同需求的客户构建服务器——没有一个服务器是相同的。
- en: From here, I started working with Kickstart scripts, PXE boot servers, gold
    masters on imaging servers, virtual machines, and bash scripts that started prompting
    for information on the system that was being built. I had also moved from only
    needing to worry about maintaining my own servers to having to log in to hundreds
    of different physical and virtual servers, from ones that belonged to the company
    I was working for to customer machines.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，我开始使用Kickstart脚本、PXE引导服务器、镜像服务器上的gold master、虚拟机和开始提示正在构建的系统的信息的bash脚本。我也从只需要担心维护自己的服务器转变为需要登录数百个不同的物理和虚拟服务器，从属于我工作的公司的服务器到客户机器。
- en: Over the next few years, my single text file quickly morphed into a complex
    collection of notes, scripts, precompiled binaries, and spreadsheets of information
    that, if I am being honest, really only made sense to me.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几年里，我的单个文本文件迅速变成了一个复杂的笔记、脚本、预编译二进制文件和信息电子表格的集合，如果我诚实地说，这些东西只有我自己能理解。
- en: While I had moved to automate quite a few parts of my day-to-day work using
    bash scripts and stringing commands together, I found that my days were still
    very much filled with running all of these tasks manually, as well as working
    a service desk dealing with customer-reported problems and queries.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我已经开始使用bash脚本和串联命令来自动化我的日常工作的很多部分，但我发现我的日子仍然充满了手动运行所有这些任务，以及处理客户报告的问题和查询的服务台工作。
- en: My story is probably typical of many people, while the operating systems used
    will probably be considered quite ancient. Now, the entry point of using a GUI
    and moving to the command line, while also keeping a scratch pad of common commands,
    is quite a common one I have heard.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我的故事可能是许多人的典型，而使用的操作系统可能被认为是相当古老的。现在，使用GUI作为入口并转向命令行，同时保留常用命令的草稿本，是我听说过的一个很常见的过程。
- en: 'We will be covering the following topics:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Who is behind Ansible
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁在背后支持Ansible
- en: The differences between Ansible and other tools
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible与其他工具的区别
- en: The problem Ansible solves
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible解决的问题
- en: Ansible's story
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible的故事
- en: Let's take quick a look at who wrote Ansible, and also what Ansible means.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下谁写了Ansible，以及Ansible的含义。
- en: The term
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这个术语
- en: Before we discuss how Ansible started, we should quickly discuss the origin
    of the name. The term Ansible was penned by science fiction novelist Ursula K.
    Le Guin; it was first used in her novel *Rocannon's World*, first published in
    1966\. In the context of the story, an **Ansible** is a fictional device that
    is able to send and receive messages faster than light.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论Ansible的起源之前，我们应该快速讨论一下名称的起源。术语Ansible是由科幻小说作家乌苏拉·勒·格恩创造的；它首次出现在她1966年首次出版的小说《洛坎农的世界》中。在故事的背景下，**Ansible**是一个虚构的设备，能够比光速更快地发送和接收消息。
- en: 'In 1974, Ursula K. Le Guin''s novel *The Dispossessed: An Ambiguous Utopia*,
    was published; this book features the development of the Ansible technology by
    exploring the (fictional) details of the mathematical theory that would make such
    a device possible.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 1974年，乌苏拉·勒·格恩的小说《被放逐者：一个模棱两可的乌托邦》出版；这本书通过探索（虚构的）数学理论的细节，展示了Ansible技术的发展，使得这样的设备成为可能。
- en: The term has since been used by several other notable authors within the genre
    to describe communication devices that are capable of relaying messages over interstellar
    distances.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个术语后来被这个类型的其他一些著名作者使用，用来描述能够在星际距离上传递消息的通信设备。
- en: The software
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这个软件
- en: Ansible, the software, was originally developed by Michael DeHaan, who was also
    the author of *Cobbler,* which was developed while DeHaan was working for Red
    Hat.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible软件最初是由Michael DeHaan开发的，他也是《Cobbler》的作者，该软件是在DeHaan为红帽公司工作时开发的。
- en: Cobbler is a Linux installation server that allows you to quickly deploy servers
    within your network; it can help with DNS, DHCP, package updates and distribution,
    virtual machine deployment, power management of physical hosts, and also the handoff
    of a newly deployed server, be it physical or virtual, to a configuration management
    system.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Cobbler是一个Linux安装服务器，允许您在网络中快速部署服务器；它可以帮助进行DNS、DHCP、软件包更新和分发、虚拟机部署、物理主机的电源管理，以及新部署的服务器（无论是物理的还是虚拟的）交接给配置管理系统。
- en: DeHaan left Red Hat and worked for companies such as Puppet, which was a good
    fit since many users of Cobbler used it to hand off to a Puppet server to manage
    the servers once they had been provisioned.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: DeHaan离开了红帽公司，为Puppet等公司工作，这是一个很好的选择，因为Cobbler的许多用户使用它来交给Puppet服务器管理一旦它们被配置。
- en: 'A few years after leaving Puppet, DeHaan made the first  public commit on the
    Ansible project; this was on February 23, 2012\. The original README file gave
    quite a simple description that laid the foundation for what Ansible would eventually
    become:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 离开Puppet几年后，DeHaan在2012年2月23日对Ansible项目进行了第一次公开提交。最初的README文件给出了一个非常简单的描述，为Ansible最终将成为的基础奠定了基础：
- en: '"Ansible is an extra-simple Python API for doing ''remote things'' over SSH.
    As Func, which I co-wrote, aspired to avoid using SSH and have it''s own daemon
    infrastructure, Ansible aspires to be quite different and more minimal, but still
    able to grow more modularly over time."'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '"Ansible是一个超级简单的Python API，用于通过SSH执行''远程任务''。与我共同编写的Func一样，它希望避免使用SSH并拥有自己的守护程序基础设施，Ansible希望成为完全不同和更简化，但仍然能够随着时间的推移更加模块化地增长。"'
- en: Since that first commit, and at the time of writing, there have been over 35,000
    commits by 3,000 contributors over 38 branches and 195 releases.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 自第一次提交以来，在撰写本文时，已经有3000名贡献者在38个分支和195个发布中进行了超过35,000次提交。
- en: In 2013, the project had grown and Ansible, Inc., was founded to offer commercial
    support to Ansible users who had relied on the project to manage both their instructors
    and servers, be they physical, virtual, or hosted on public clouds.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 2013年，该项目发展壮大，Ansible, Inc.成立，为依赖该项目管理他们的教练和服务器的Ansible用户提供商业支持，无论是物理的、虚拟的还是托管在公共云上的。
- en: Out of the formation of Ansible, Inc., which received $6 million in series A
    funding, came the commercial Ansible Tower, which acted as a web-based frontend
    where end users can consume role-based access to Ansible services.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible, Inc.的成立，获得了600万美元的A轮融资，推出了商业版的Ansible Tower，作为一个基于Web的前端，最终用户可以在那里消费基于角色的Ansible服务。
- en: 'Then, in October 2015, Red Hat announced that they were to acquire Ansible
    for $150 million. In the announcement, Joe Fitzgerald, who was Vice President,
    Management, Red Hat at the time of the acquisition, was quoted as saying:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在2015年10月，红帽宣布他们将以1.5亿美元收购Ansible。在宣布中，当时担任红帽管理副总裁的Joe Fitzgerald被引述说：
- en: '"Ansible is a clear leader in IT automation and DevOps, and helps Red Hat take
    a significant step forward in our goal of creating frictionless IT."'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: “Ansible是IT自动化和DevOps领域的领军者，有助于红帽在创造无摩擦的IT目标上迈出重要一步。”
- en: During the course of this book, you will find that the statement in the original
    README file and Red Hat's statement at the time of acquiring Ansible both still
    ring true.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的过程中，您会发现原始README文件中的声明和Red Hat在收购Ansible时的声明仍然成立。
- en: Before we look at rolling our sleeves up and installing Ansible, which we will
    be doing in the next chapter, we should look at some of the core concepts surrounding
    it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始动手安装Ansible之前，我们应该先了解一些围绕它的核心概念。
- en: Ansible versus other tools
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible与其他工具
- en: 'If you look at the design principles in the first commit compared to the current
    version, you will notice that while there have been some additions and tweaks,
    the core principles remain pretty much intact:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您比较第一个提交中的设计原则和当前版本，您会注意到虽然有一些增加和调整，但核心原则基本保持不变：
- en: '**Agentless**: Everything should be managed by the SSH daemon, the WinRM protocol
    in the case of Windows machines, or API calls—there should be no reliance on either
    custom agents or additional ports that need to be opened or interacted with on
    the target host'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无代理**：一切都应该由SSH守护程序、Windows机器的WinRM协议或API调用来管理——不应该依赖于自定义代理或需要在目标主机上打开或交互的其他端口'
- en: '**Minimal**: You should be able to manage new remote machines without having
    to install any new software as each Linux host will typically have at least SSH
    and Python installed as part of a minimal installation'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小化**：您应该能够管理新的远程机器，而无需安装任何新软件，因为每台Linux主机通常都会在最小安装的一部分中安装至少SSH和Python'
- en: '**Descriptive**: You should be able to describe your infrastructure, stack,
    or task in a language that is readable by both machines and humans'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述性**：您应该能够用机器和人都能读懂的语言描述您的基础架构、堆栈或任务'
- en: '**Simple**: The setup processes and learning curve should be simple and feel
    intuitive'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单**：设置过程和学习曲线应该简单且直观'
- en: '**Easy to use**: It should be the easiest IT automation system to use, ever'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于使用**：这应该是最容易使用的IT自动化系统'
- en: A few of these principles make Ansible quite different to other tools. Let's
    take a look at the most basic difference between Ansible and other tools, such
    as Puppet and Chef.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些原则使Ansible与其他工具有很大不同。让我们来看看Ansible和Puppet、Chef等其他工具之间最基本的区别。
- en: Declarative versus imperative
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明式与命令式
- en: When I first started using Ansible, I had already implemented Puppet to help
    manage the stacks on the machines that I was managing. As the configuration became
    more and more complex, the Puppet code became extremely complicated. This is when
    I started looking at alternatives, and ones that fixed some of the issues I was
    facing.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始使用Ansible时，我已经实施了Puppet来帮助管理我管理的机器上的堆栈。随着配置变得越来越复杂，Puppet代码变得非常复杂。这时我开始寻找一些解决我面临问题的替代方案。
- en: Puppet uses a custom declarative language to describe the configuration. Puppet
    then packages this configuration as a manifest that the agent running on each
    server then applies.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet使用自定义的声明性语言来描述配置。然后，Puppet将这个配置打包成一个清单，然后运行在每台服务器上的代理程序应用这个清单。
- en: The use of declarative language means that Puppet, Chef, and other configuration
    tools such as CFEngine all operate using the principle of eventual consistency,
    meaning that eventually, after a few runs of the agent, your desired configuration
    would be in place.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 使用声明性语言意味着Puppet、Chef和其他配置工具（如CFEngine）都使用最终一致性的原则运行，这意味着最终，在代理程序运行几次后，您的期望配置将就位。
- en: Ansible, on the other hand, is an imperative language meaning that, rather than
    just defining the end state of your desired outcome and letting the tool decide
    how it should get there, you also define the order in which tasks are executed
    in order to reach the state you have defined.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Ansible是一种命令式语言，这意味着你不仅要定义所需结果的最终状态，并让工具决定如何达到这个状态，还要定义任务执行的顺序，以达到你所定义的状态。
- en: 'The example I tend to use is as follows. We have a configuration where the
    following states need to be applied to a server:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我倾向于使用的例子如下。我们有一个配置，需要将以下状态应用到服务器上：
- en: Create a group called `Team`
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Team`的组
- en: Create a user `Alice` and add her to the group `Team`
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Alice`的用户并将她添加到`Team`组
- en: Create a user `Bob` and add him to the group `Team`
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`Bob`的用户并将他添加到`Team`组
- en: Give the user `Alice` escalated privileges
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给用户`Alice`提升的特权
- en: 'This may seem simple; however, when you execute these tasks using a declarative
    language, you may, for example, find that the following happens:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来很简单；然而，当你使用声明性语言执行这些任务时，你可能会发现，例如，以下情况发生：
- en: '**Run 1**: The tasks are executed in the following order: 2, 1, 3, and 4\.
    This means that on the first run, as the group called `Team` does not exist, adding
    the user `Alice` fails, which means that `Alice` is never given escalated privileges.
    However, the group `Team` is added and the user called `Bob` is added.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行1**：任务按以下顺序执行：2、1、3和4。这意味着在第一次运行时，由于名为`Team`的组不存在，添加用户`Alice`失败，这意味着`Alice`从未获得提升的特权。然而，组`Team`被添加，用户`Bob`被添加。'
- en: '**Run 2**: Again, the tasks are executed in the following order: 2, 1, 3, and
    4\. Because the group `Team` was created during run 1, the user `Alice` is now
    created and she is also given escalated privileges. As the group `Team` and user
    `Bob` already exist, they are left as is.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行2**：同样，任务按照以下顺序执行：2、1、3和4。因为在运行1期间创建了“Team”组，所以现在创建了用户“Alice”，并且她也被赋予了提升的特权。由于“Team”组和用户“Bob”已经存在，它们保持不变。'
- en: '**Run 3**: The tasks are executed in the same order as runs 1 and 2; however,
    as the desired configuration had been reached, no changes were made.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行3**：任务按照运行1和2的相同顺序执行；然而，由于已经达到了期望的配置，因此没有进行任何更改。'
- en: Each subsequent run would continue until there was either a change to the configuration
    or on the host itself, for example, if `Bob` had really annoyed `Alice` and she
    used her escalated privileges to remove the user `Bob` from the host. When the
    agent next runs, `Bob` will be recreated as that is still our desired configuration,
    no matter what access `Alice` thinks `Bob` should have.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每次运行都会继续，直到配置或主机本身发生变化，例如，如果“Bob”真的惹恼了“Alice”，她使用她的提升的特权从主机中删除用户“Bob”。当代理下次运行时，“Bob”将被重新创建，因为这仍然是我们期望的配置，不管“Alice”认为“Bob”应该有什么访问权限。
- en: 'If we were to run the same tasks using an imperative language, then the following
    should happen:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用命令式语言运行相同的任务，那么应该发生以下情况：
- en: '**Run 1**: The tasks are executed in the order we defined them, meaning that
    the group is created, then the two users, and finally the escalated privileges
    of `Alice` are applied'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行1**：任务按照我们定义的顺序执行，这意味着首先创建组，然后创建两个用户，最后应用“Alice”的提升特权'
- en: '**Run 2**: Again, the tasks are executed in the order and checks are made to
    ensure that our desired configuration is in place'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行2**：同样，任务按照顺序执行，并进行检查以确保我们的期望配置已经就位'
- en: As you can see, both ways get to our final configuration and they also enforce
    our desired state. With the tools that use declarative language, it is possible
    to declare dependencies, meaning that we can simply engineer out the issue we
    came across when running the tasks.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这两种方式都可以达到我们的最终配置，并且它们也强制执行我们的期望状态。使用声明性语言的工具可以声明依赖关系，这意味着我们可以简单地消除运行任务时遇到的问题。
- en: However, this example only has four steps; what happens when you have a few
    hundred steps that are launching servers in public cloud platforms and then installing
    software that needs several prerequisites?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个例子只有四个步骤；当您有几百个步骤在公共云平台上启动服务器，然后安装需要几个先决条件的软件时会发生什么？
- en: This is the position I found myself in before I started to use Ansible. Puppet
    was great at enforcing my desired end configuration; however, when it came to
    getting there, I found myself having to worry about building a lot of logic into
    my manifests to arrive at my desired state.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在开始使用Ansible之前发现自己处于的位置。Puppet在强制执行我期望的最终配置方面做得很好；然而，在达到那里时，我发现自己不得不担心将大量逻辑构建到我的清单中，以达到我期望的状态。
- en: What was also annoying is that each successful run would take about 40 minutes
    to complete. But as I was having dependency issues, I had to start from scratch
    with each failure and change to ensure that I was actually fixing the problem
    and not because things were starting to become consistent—not what you want when
    you are on a deadline.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 令人讨厌的是，每次成功运行都需要大约40分钟才能完成。但由于我遇到了依赖问题，我不得不从头开始处理每次失败和更改，以确保我实际上是在解决问题，而不是因为事情开始变得一致而不得不重新开始——这不是在截止日期时想要的。
- en: Configuration versus orchestration
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置与编排
- en: Another key difference between Ansible and the other tools that it is commonly
    compared to is that the majority of these tools have their origins as systems
    that are designed to deploy and police a configuration state.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible与其他常常被比较的工具之间的另一个关键区别是，这些工具的大部分起源于被设计为部署和监控配置状态的系统。
- en: They typically require an agent to be installed on each host, that agent discovers
    some information about the host it is installed on, and then calls back to a central
    server basically saying *Hi, I am server XYZ, could I please have my configuration?*
    The server then decides what the configuration for the server looks like and sends
    it across to the agent, which then applies it. Typically, this exchange takes
    place every 15 to 30 minutes—this is great if you need to enforce a configuration
    on a server.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 它们通常需要在每个主机上安装代理，该代理会发现有关其安装主机的一些信息，然后回调到一个中央服务器，基本上说“嗨，我是服务器XYZ，我可以请你给我配置吗？”然后服务器决定服务器的配置是什么样的，并将其发送给代理，然后代理应用它。通常，这种交换每15到30分钟发生一次——如果您需要强制执行服务器上的配置，这是很好的。
- en: However, the way that Ansible has been designed to run allows it to act as an
    orchestration tool; for example, you can run it to launch a server in your VMware
    environment, and once the server has been launched, it can then connect to your
    newly launched machine and install a LAMP stack. Then, it never has to connect
    to that host again, meaning that all we are left with is the server, the LAMP
    stack, and nothing else, other than maybe a few comments in files to say that
    Ansible added some lines of configuration—but that should be the only sign that
    Ansible was used to configure the host.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Ansible的设计方式使其能够充当编排工具；例如，您可以运行它在VMware环境中启动服务器，一旦服务器启动，它就可以连接到您新启动的机器并安装LAMP堆栈。然后，它永远不必再次连接到该主机，这意味着我们剩下的只是服务器、LAMP堆栈，除了可能在文件中添加一些注释以表明Ansible添加了一些配置行之外，没有其他东西，但这应该是Ansible用于配置主机的唯一迹象。
- en: Infrastructure as code
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: 'Before we finish this chapter and move on to installing Ansible, let''s quickly
    discuss infrastructure as code, first of all by looking at some actual code. The
    following bash script installs several RPMs using the `yum` package manager:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成本章并继续安装Ansible之前，让我们快速讨论基础设施即代码，首先通过查看一些实际的代码来了解。以下bash脚本使用`yum`软件包管理器安装了几个RPM包：
- en: '[PRE0]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is a Puppet class that does the same task as the  previous bash
    script:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个Puppet类，执行与之前的bash脚本相同的任务：
- en: '[PRE1]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next up, we have the same task using SaltStack:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用SaltStack执行相同的任务：
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, we have the same task again, this time using Ansible:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们再次执行相同的任务，这次使用Ansible：
- en: '[PRE3]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Even without going into any detail, you should be able to get the general gist
    of what each of the three examples is doing. All three, while not strictly infrastructure,
    are valid examples of infrastructure as code.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 即使不详细介绍，您也应该能够了解这三个示例各自在做什么。这三个示例虽然不严格属于基础设施，但都是基础设施即代码的有效示例。
- en: This is where you manage the code that manages your infrastructure in exactly
    the same way as a developer would manage the source code for their application.
    You use source control, store it in a centrally available repository where you
    can collaborate with your peers, you branch and use pull requests to check in
    your changes, and, where possible, you write and execute unit tests to ensure
    that changes to your infrastructure are successful and error-free before deploying
    to production. This should be as automated as possible. Any manual intervention
    in the tasks mentioned should be seen as potentially a point of failure and you
    should work to automate the task.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您以与开发人员管理其应用程序源代码完全相同的方式管理管理基础设施的代码。您使用源代码控制，在一个中心可用的存储库中存储它，与同行合作，分支并使用拉取请求检查您的更改，并在可能的情况下编写和执行单元测试，以确保对基础设施的更改在部署到生产环境之前是成功的和无错误的。这应尽可能自动化。在提到的任务中的任何手动干预都应被视为潜在的故障点，您应该努力自动化任务。
- en: This approach to infrastructure management has a few advantages, one being that
    you, as system administrators, are using the same processes and tooling as your
    developer colleagues, meaning that any procedures that apply to them also apply
    to you. This makes for a more consistent working experience, as well as exposing
    you to tools that you may not have been exposed to or used before.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这种基础设施管理方法有一些优势，其中之一是作为系统管理员，您正在使用与开发人员同样的流程和工具，这意味着适用于他们的任何程序也适用于您。这使工作体验更加一致，同时让您接触到以前可能没有接触或使用过的工具。
- en: Secondly, and more importantly, it allows you to share your work. Before this
    approach, this type of work seemed to others a dark art performed only by system
    administrators. Doing this work in the open allows you to have your peers review
    and comment on your configuration, as well as being able to do the same yourself
    to theirs. Also, you can share your work so that others can incorporate elements
    into their own projects.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，更重要的是，它允许您分享您的工作。在采用这种方法之前，这种工作似乎对其他人来说是系统管理员专有的黑暗艺术。在公开进行这项工作可以让您的同行审查和评论您的配置，同时也可以让您做同样的事情来审查他们的配置。此外，您可以分享您的工作，以便其他人可以将其中的元素纳入他们自己的项目中。
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Before we finish this chapter, I would like to just finish up my own personal
    journey. As mentioned elsewhere in the chapter, I moved from my collection of
    scripts and runbooks to Puppet, which was great until my requirements moved away
    from managing just server configuration and maintaining the state of the servers
    I was managing.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成本章之前，我想结束一下我的个人经历。正如本章其他地方提到的，我从我的脚本和运行簿集合转移到了Puppet，这很棒，直到我的需求不再局限于管理服务器配置和维护我管理的服务器的状态。
- en: I needed to start to manage infrastructure in public clouds. This requirement
    quickly started to frustrate me when using Puppet. At the time, Puppet's coverage
    of the APIs I need to use for my infrastructure was lacking. I am assured it is
    a lot better now, but also I found myself having to build too much logic into
    my manifests with regard to the order in which each task was executed.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要开始在公共云中管理基础设施。当使用Puppet时，这个要求很快开始让我感到沮丧。当时，Puppet对我需要用于基础设施的API的覆盖范围不足。我相信现在它的覆盖范围要好得多，但我也发现自己不得不在我的清单中构建太多的逻辑，涉及每个任务执行的顺序。
- en: It is around this time, which was December 2014, that I decided to look at Ansible.
    I know this because I wrote a blog post entitled *First Steps With Ansible*, and
    since then, I don't think I have looked back. I have since introduced several
    of my work colleagues and customers to Ansible, as well as writing previous books
    for Packt.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在2014年12月左右，我决定看看Ansible。我知道这是因为我写了一篇名为*First Steps With Ansible*的博客文章，从那时起，我想我再也没有回头看过。自那时起，我已经向我的同事和客户介绍了Ansible，并为Packt写了之前的书籍。
- en: In this chapter, we have taken a look at my own personal history with both Ansible
    and some of the other tools that Ansible is compared to, and we have discussed
    the differences between these tools and also where Ansible originated.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了我个人与Ansible以及与之相比的其他工具的历史，并讨论了这些工具之间的区别以及Ansible的起源。
- en: In the next chapter, we are going to look at installing Ansible and running
    our first playbooks against a local virtual machine.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何安装Ansible并针对本地虚拟机运行我们的第一个playbook。
- en: Further reading
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'In this chapter, we mentioned Puppet and SaltStack:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们提到了Puppet和SaltStack：
- en: Puppet is a configuration management tool that runs a server/agent configuration.
    It comes in two flavors—the open source version and an enterprise version that
    is supported by Puppet, the company. It is a declarative system and is closely
    tied to Ruby. For more information on Puppet, see [https://puppet.com/](https://puppet.com/).
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet是一个运行服务器/代理配置的配置管理工具。它有两种版本——开源版本和由Puppet公司支持的企业版本。它是一个声明性系统，与Ruby密切相关。有关Puppet的更多信息，请参见[https://puppet.com/](https://puppet.com/)。
- en: SaltStack is another configuration management tool. It is extremely scalable
    and, while it shares a design approach with Ansible, it works in a similar way
    to Puppet in that it has a server/agent approach. You can find more information
    on SaltStack at [https://saltstack.com/](https://saltstack.com/).
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SaltStack是另一个配置管理工具。它具有极高的可扩展性，虽然与Ansible共享设计方法，但它的工作方式类似于Puppet，采用了服务器/代理的方式。您可以在[https://saltstack.com/](https://saltstack.com/)找到更多关于SaltStack的信息。
- en: I also mentioned my blog, which you can find at [https://media-glass.es/](https://media-glass.es/).
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我还提到了我的博客，您可以在[https://media-glass.es/](https://media-glass.es/)找到。
