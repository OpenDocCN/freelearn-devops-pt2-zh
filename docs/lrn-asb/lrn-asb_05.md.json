["```\n$ mkdir lemp lemp/group_vars\n$ touch lemp/group_vars/common.yml lemp/production lemp/site.yml lemp/Vagrantfile lemp/.gitignore\n$ cd lemp\n```", "```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nAPI_VERSION = \"2\"\nBOX_NAME    = \"centos/7\"\nBOX_IP      = \"192.168.50.5\"\nDOMAIN      = \"nip.io\"\nPRIVATE_KEY = \"~/.ssh/id_rsa\"\nPUBLIC_KEY  = '~/.ssh/id_rsa.pub'\n\nVagrant.configure(API_VERSION) do |config|\n  config.vm.box = BOX_NAME\n  config.vm.network \"private_network\", ip: BOX_IP\n  config.vm.host_name = BOX_IP + '.' + DOMAIN\n  config.ssh.insert_key = false\n  config.ssh.private_key_path = [PRIVATE_KEY,\n  \"~/.vagrant.d/insecure_private_key\"]\n  config.vm.provision \"file\", source: PUBLIC_KEY, destination:\n  \"~/.ssh/authorized_keys\"\n\n  config.vm.provider \"virtualbox\" do |v|\n    v.memory = \"2024\"\n    v.cpus = \"2\"\n  end\n\n  config.vm.provider \"vmware_fusion\" do |v|\n    v.vmx[\"memsize\"] = \"2024\"\n    v.vmx[\"numvcpus\"] = \"2\"\n  end\n\nend\n```", "```\n.vagrant\n```", "```\n$ ansible-galaxy init roles/stack-install\n```", "```\nrepo_packages:\n  - \"epel-release\"\n  - \"https://centos7.iuscommunity.org/ius-release.rpm\"\n```", "```\nnginx_repo:\n  name: \"nginx\"\n  description: \"The mainline NGINX repo\"\n  baseurl: \"http://nginx.org/packages/mainline/centos/7/$basearch/\"\n  gpgcheck: \"no\"\n  enabled: \"yes\"\n```", "```\n- name: install the repo packages\n  yum:\n    name: \"{{ item }}\"\n    state: \"installed\"\n  with_items: \"{{ repo_packages }}\"\n```", "```\n- name: add the NGINX mainline repo\n  yum_repository:\n    name: \"{{ nginx_repo.name }}\"\n    description: \"{{ nginx_repo.description }}\"\n    baseurl: \"{{ nginx_repo.baseurl }}\"\n    gpgcheck: \"{{ nginx_repo.gpgcheck }}\"\n    enabled: \"{{ nginx_repo.enabled }}\"\n```", "```\n$ yum info nginx\n```", "```\n- name: update all of the installed packages\n  yum:\n    name: \"*\"\n    state: \"latest\"\n    update_cache: \"yes\"\n```", "```\npackages_remove:\n  - \"mariadb-libs.x86_64\"\n```", "```\nsystem_packages:\n  - \"postfix\"\n  - \"MySQL-python\"\n  - \"policycoreutils-python\"\n```", "```\nstack_packages:\n  - \"nginx\"\n  - \"mariadb101u\"\n  - \"mariadb101u-server\"\n  - \"mariadb101u-config\"\n  - \"mariadb101u-common\"\n  - \"mariadb101u-libs\"\n  - \"php72u\"\n  - \"php72u-bcmath\"\n  - \"php72u-cli\"\n  - \"php72u-common\"\n  - \"php72u-dba\"\n  - \"php72u-fpm\"\n  - \"php72u-fpm-nginx\"\n  - \"php72u-gd\"\n  - \"php72u-intl\"\n  - \"php72u-json\"\n  - \"php72u-mbstring\"\n  - \"php72u-mysqlnd\"\n  - \"php72u-process\"\n  - \"php72u-snmp\"\n  - \"php72u-soap\"\n  - \"php72u-xml\"\n  - \"php72u-xmlrpc\"\n```", "```\nextra_packages:\n  - \"vim-enhanced\"\n  - \"git\"\n  - \"unzip\"\n```", "```\n- name: remove the packages so that they can be replaced\n  yum:\n    name: \"{{ item }}\"\n    state: \"absent\"\n  with_items: \"{{ packages_remove }}\"\n```", "```\n- name: install the stack packages\n  yum:\n    name: \"{{ item }}\"\n    state: \"installed\"\n  with_items: \"{{ system_packages + stack_packages + extra_packages }}\"\n```", "```\n$ ansible-galaxy init roles/stack-config\n```", "```\nwordpress_system:\n  user: \"wordpress\"\n  group: \"php-fpm\"\n  comment: \"wordpress system user\"\n  home: \"/var/www/wordpress\"\n  state: \"present\"\n```", "```\n- name: add the wordpress user\n  user: \n    name: \"{{ wordpress_system.user }}\"\n    group: \"{{ wordpress_system.group }}\"\n    comment: \"{{ wordpress_system.comment }}\"\n    home: \"{{ wordpress_system.home }}\"\n    state: \"{{ wordpress_system.state }}\"\n```", "```\n# {{ ansible_managed }}\nuser nginx;\nworker_processes {{ ansible_processor_count }};\nerror_log /var/log/nginx/error.log warn;\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    access_log /var/log/nginx/access.log main;\n    sendfile on;\n    keepalive_timeout 65;\n    client_max_body_size 20m;\n    include /etc/nginx/conf.d/*.conf;\n}\n```", "```\n- name: copy the nginx.conf to /etc/nginx/\n  template:\n    src: \"nginx-nginx.conf.j2\"\n    dest: \"/etc/nginx/nginx.conf\"\n  notify: \"restart nginx\"\n```", "```\n- name: \"restart nginx\"\n  service:\n    name: \"nginx\"\n    state: \"restarted\"\n    enabled: \"yes\"\n```", "```\n# {{ ansible_managed }}\n\nupstream {{ php.upstream }} {\n        server {{ php.ip }}:{{ php.port }};\n}\n\nserver {\n    listen 80;\n  server_name {{ ansible_nodename }};\n  root {{ wordpress_system.home }};\n  index index.php index.html index.htm;\n\n    include global/restrictions.conf;\n    include global/wordpress_shared.conf;\n\n}\n```", "```\n- name: create the global directory in /etc/nginx/\n  file:\n    dest: \"/etc/nginx/global/\"\n    state: \"directory\"\n    mode: \"0644\"\n```", "```\n- name: copy the restrictions.conf to /etc/nginx/global/\n  copy:\n    src: \"nginx-global-restrictions.conf\"\n    dest: \"/etc/nginx/global/restrictions.conf\"\n  notify: \"restart nginx\"\n\n- name: copy the wordpress_shared.conf to /etc/nginx/global/\n  template:\n    src: \"nginx-global-wordpress_shared.conf.j2\"\n    dest: \"/etc/nginx/global/wordpress_shared.conf\"\n  notify: \"restart nginx\"\n```", "```\n   # Do not log robots.txt\n        location = /robots.txt {\n            log_not_found off;\n            access_log off;\n        }\n\n    # If no favicon exists return a 204 (no content error)\n        location ~* /favicon\\.ico$ {\n            try_files $uri =204;\n            expires max;\n            log_not_found off;\n            access_log off;\n        }\n\n  # Deny access to htaccess files\n        location ~ /\\. {\n            deny all;\n        }\n\n  # Deny access to some bits wordpress leaves hanging around \n        location ~* /(wp-config.php|readme.html|license.txt|nginx.conf) {\n            deny all;\n        }\n\n    # Deny access to .php files in the /wp-content/ directory (including sub-folders)\n        location ~* ^/wp-content/.*.(php|phps)$ {\n            deny all;\n        }\n\n    # Allow only internal access to .php files inside wp-includes directory\n        location ~* ^/wp-includes/.*\\.(php|phps)$ {\n            internal;\n        }\n\n    # Deny access to specific files in the /wp-content/ directory (including sub-folders)\n        location ~* ^/wp-content/.*.(txt|md|exe)$ {\n            deny all;\n        }\n\n    # hide content of sensitive files\n        location ~* \\\\.(conf|engine|inc|info|install|make|module|profile|test|po|sh|.*sql|theme|tpl(\\\\.php)?|xtmpl)\\$|^(\\\\..*|Entries.*|Repository|Root|Tag|Template)\\$|\\\\.php_ {\n            deny all;\n        }\n\n    # don't allow other executable file types\n        location ~* \\\\.(pl|cgi|py|sh|lua)\\$ {\n            deny all;\n        }\n\n    # hide the wordfence firewall\n        location ~ ^/\\.user\\.ini {\n            deny all;\n        }\n```", "```\n    # http://wiki.nginx.org/WordPress\n    # This is cool because no php is touched for static content. \n    # Include the \"?$args\" part so non-default permalinks doesn't break when using query string\n        location / {\n            try_files $uri $uri/ /index.php?$args;\n        }\n\n        # Set the X-Frame-Options\n        add_header X-Frame-Options \"SAMEORIGIN\" always;\n        add_header X-Xss-Protection \"1; mode=block\" always;\n        add_header X-Content-Type-Options \"nosniff\" always;\n\n    # Do not log + cache images, css, js, etc\n        location ~* \\.(ico|css|js|gif|jpeg|jpg|png|woff|ttf|otf|svg|woff2|eot)$ {\n            expires max;\n            log_not_found off;\n            access_log off;\n         # Send the all shebang in one fell swoop\n            tcp_nodelay off;\n        # Set the OS file cache\n            open_file_cache max=1000 inactive=120s;\n            open_file_cache_valid 45s;\n            open_file_cache_min_uses 2;\n            open_file_cache_errors off;\n        }\n\n    # Handle .php files\n        location ~ \\.php$ {\n            try_files $uri =404;\n            fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n            include /etc/nginx/fastcgi_params;\n            fastcgi_connect_timeout 180s;\n            fastcgi_send_timeout 180s;\n            fastcgi_read_timeout 180s;\n            fastcgi_intercept_errors on;\n            fastcgi_max_temp_file_size 0;\n            fastcgi_pass {{ php.upstream }};\n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n            fastcgi_index index.php;\n        }\n\n    # Rewrite rules for WordPress SEO by Yoast\n        rewrite ^/sitemap_index\\.xml$ /index.php?sitemap=1 last;\n        rewrite ^/([^/]+?)-sitemap([0-9]+)?\\.xml$ /index.php?sitemap=$1&sitemap_n=$2 last;\n\n    # Add trailing slash to */wp-admin requests\n        rewrite /wp-admin$ $scheme://$host$uri/ permanent;\n```", "```\n- name: copy the default.conf to /etc/nginx/conf.d/\n  template:\n    src: \"nginx-confd-default.conf.j2\"\n    dest: \"/etc/nginx/conf.d/default.conf\"\n  notify: \"restart nginx\"\n```", "```\n# {{ ansible_managed }}\n\nupstream php {\n        server {{ php.ip }}:{{ php.port }};\n}\n\nserver {\n    listen 80;\n  server_name {{ ansible_nodename }};\n  root {{ wordpress_system.home }};\n  index index.php;\n  include global/restrictions.conf;\n  include global/wordpress_shared.conf;\n}\n```", "```\nphp:\n  ip: \"127.0.0.1\"\n  port: \"9000\"\n  upstream: \"php\"\n  ini:\n    - { regexp: '^;date.timezone =', replace: 'date.timezone = Europe/London' }\n    - { regexp: '^expose_php = On', replace: 'expose_php = Off' }\n    - { regexp: '^upload_max_filesize = 2M', replace: 'upload_max_filesize = 20M' }\n```", "```\n; {{ ansible_managed }}\n\n[{{ wordpress_system.user }}]\nuser = {{ wordpress_system.user }}\ngroup = {{ wordpress_system.group }}\nlisten = {{ php.ip }}:{{ php.port }}\nlisten.allowed_clients = {{ php.ip }}\npm = dynamic\npm.max_children = 50\npm.start_servers = 5\npm.min_spare_servers = 5\npm.max_spare_servers = 35\nphp_admin_value[error_log] = /var/log/php-fpm/{{ wordpress_system.user }}-error.log\nphp_admin_flag[log_errors] = on\nphp_value[session.save_handler] = files\nphp_value[session.save_path] = /var/lib/php/fpm/session\nphp_value[soap.wsdl_cache_dir] = /var/lib/php/fpm/wsdlcache\n```", "```\n- name: copy the www.conf to /etc/php-fpm.d/\n  template:\n    src: \"php-fpmd-www.conf.j2\"\n    dest: \"/etc/php-fpm.d/www.conf\"\n  notify: \"restart php-fpm\"\n```", "```\n- name: \"restart php-fpm\"\n  service:\n    name: \"php-fpm\"\n    state: \"restarted\"\n    enabled: \"yes\"\n```", "```\n- name: configure php.ini\n  lineinfile: \n    dest: \"/etc/php.ini\"\n    regexp: \"{{ item.regexp }}\"\n    line: \"{{ item.replace }}\"\n    backup: \"yes\"\n    backrefs: \"yes\"\n  with_items: \"{{ php.ini }}\"\n  notify: \"restart php-fpm\"\n```", "```\n- name: start php-fpm\n  service:\n    name: \"php-fpm\"\n    state: \"started\"\n\n- name: start nginx\n  service:\n    name: \"nginx\"\n    state: \"started\"\n```", "```\nmariadb:\n  bind: \"127.0.0.1\"\n  server_config: \"/etc/my.cnf.d/mariadb-server.cnf\"\n  username: \"root\"\n  password: \"Pa55W0rd123\"\n  hosts:\n    - \"127.0.0.1\"\n    - \"::1\"\n    - \"{{ ansible_nodename }}\"\n    - \"localhost\"\n```", "```\n- name: configure the mariadb bind address\n  lineinfile: \n    dest: \"{{ mariadb.server_config }}\"\n    regexp: \"#bind-address=0.0.0.0\"\n    line: \"bind-address={{ mariadb.bind }}\"\n    backup: \"yes\"\n    backrefs: \"yes\"\n```", "```\n- name: start mariadb\n  service:\n    name: \"mariadb\"\n    state: \"started\"\n    enabled: \"yes\"\n\n- name: change mysql root password\n  mysql_user:\n    name: \"{{ mariadb.username }}\" \n    host: \"{{ item }}\" \n    password: \"{{ mariadb.password }}\"\n    check_implicit_admin: \"yes\"\n    priv: \"*.*:ALL,GRANT\"\n  with_items: \"{{ mariadb.hosts }}\"\n\n- name: set up .my.cnf file\n  template:\n    src: \"my.cnf.j2\"\n    dest: \"~/.my.cnf\"\n\n- name: delete anonymous MySQL user\n  mysql_user:\n    user: \"\"\n    host: \"{{ item }}\"\n    state: \"absent\"\n  with_items: \"{{ mariadb.hosts }}\"\n\n- name: remove the MySQL test database\n  mysql_db:\n    db: \"test\" \n    state: \"absent\"\n```", "```\n# {{ ansible_managed }}\n[client]\npassword='{{ mariadb.password }}'\n```", "```\nselinux:\n  http_permissive: true\n```", "```\n- name: set the selinux allowing httpd_t to be permissive is required\n  selinux_permissive:\n    name: httpd_t\n    permissive: true\n  when: selinux.http_permissive == true\n```", "```\n$ ansible-galaxy init roles/wordpress\n```", "```\nwp_cli:\n  download: \"https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\"\n  path: \"/usr/local/bin/wp\"\n```", "```\n- name: download wp-cli\n  get_url:\n    url: \"{{ wp_cli.download }}\"\n    dest: \"{{ wp_cli.path }}\"\n\n- name: update permissions of wp-cli to allow anyone to execute it\n  file:\n    path: \"{{ wp_cli.path }}\"\n    mode: \"0755\"\n```", "```\nwp_database:\n  name: \"wordpress\"\n  username: \"wordpress\"\n  password: \"W04DPr3S5\"\n```", "```\n- name: create the wordpress database\n  mysql_db:\n    db: \"{{ wp_database.name }}\" \n    state: \"present\"\n\n- name: create the user for the wordpress database\n  mysql_user:\n    name: \"{{ wp_database.username }}\"\n    password: \"{{ wp_database.password }}\"\n    priv: \"{{ wp_database.name }}.*:ALL\"\n    state: \"present\"\n  with_items: \"{{ mariadb.hosts }}\"\n```", "```\nwordpress:\n  domain: \"http://{{ ansible_nodename }}/\"\n  title: \"WordPress installed by Ansible\"\n  username: \"ansible\"\n  password: \"password\"\n  email: \"test@example.com\"\n  theme: \"sydney\"\n  plugins:\n    - \"jetpack\"\n    - \"wp-super-cache\"\n    - \"wordpress-seo\"\n    - \"wordfence\"\n    - \"nginx-helper\"\n```", "```\n- name: are the wordpress files already there?\n  stat:\n    path: \"{{ wordpress_system.home }}/index.php\"\n  register: wp_installed\n\n- name: download wordpresss\n  shell: \"{{ wp_cli.path }} core download\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  when: wp_installed.stat.exists == False\n```", "```\n- name: set the correct permissions on the homedir\n  file:\n    path: \"{{ wordpress_system.home }}\"\n    mode: \"0755\"\n  when: wp_installed.stat.exists == False\n```", "```\n- name: is wordpress already configured?\n  stat:\n    path: \"{{ wordpress_system.home }}/wp-config.php\"\n  register: wp_configured\n```", "```\n- name: configure wordpress\n  shell: \"{{ wp_cli.path }} core config --dbhost={{ mariadb.bind }} --dbname={{ wp_database.name }} --dbuser={{ wp_database.username }} --dbpass={{ wp_database.password }}\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  when: wp_configured.stat.exists == False\n```", "```\n- name: do we need to install wordpress?\n  shell: \"{{ wp_cli.path }} core is-installed\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  ignore_errors: yes\n  register: wp_installed\n```", "```\n- name: install wordpress if needed\n  shell: \"{{ wp_cli.path }} core install --url='{{ wordpress.domain }}' --title='{{ wordpress.title }}' --admin_user={{ wordpress.username }} --admin_password={{ wordpress.password }} --admin_email={{ wordpress.email }}\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  when: wp_installed.rc == 1\n```", "```\n- name: do we need to install the plugins?\n  shell: \"{{ wp_cli.path }} plugin is-installed {{ item }}\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  with_items: \"{{ wordpress.plugins }}\"\n  ignore_errors: yes\n  register: wp_plugin_installed\n```", "```\n- name: set a fact if we don't need to install the plugins\n  set_fact:\n    wp_plugin_installed_skip: true\n  when: wp_plugin_installed.failed is undefined\n\n- name: set a fact if we need to install the plugins\n  set_fact:\n    wp_plugin_installed_skip: false\n  when: wp_plugin_installed.failed is defined\n```", "```\n- name: install the plugins if we need to or ignore if not\n  shell: \"{{ wp_cli.path }} plugin install {{ item }} --activate\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  with_items: \"{{ wordpress.plugins }}\"\n  when: wp_plugin_installed_skip == false\n```", "```\n- name: do we need to install the theme?\n  shell: \"{{ wp_cli.path }} theme is-installed {{ wordpress.theme }}\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  ignore_errors: yes\n  register: wp_theme_installed\n\n- name: set a fact if we don't need to install the theme\n  set_fact:\n    wp_theme_installed_skip: true\n  when: wp_theme_installed.failed == false\n\n- name: set a fact if we need to install the theme\n  set_fact:\n    wp_theme_installed_skip: false\n  when: wp_theme_installed.failed == true\n\n- name: install the theme if we need to or ignore if not\n  shell: \"{{ wp_cli.path }} theme install {{ wordpress.theme }} --activate\"\n  args:\n    chdir: \"{{ wordpress_system.home }}\"\n  become_user: \"{{ wordpress_system.user }}\"\n  become: true\n  when: wp_theme_installed_skip == false\n```", "```\nbox1 ansible_host=192.168.50.5.nip.io\n\n[wordpress]\nbox1\n\n[wordpress:vars]\nansible_connection=ssh\nansible_user=vagrant\nansible_private_key_file=~/.ssh/id_rsa\nhost_key_checking=False\n```", "```\n---\n\n- hosts: wordpress\n  gather_facts: true\n  become: yes\n  become_method: sudo\n\n  vars_files:\n    - group_vars/common.yml\n\n  roles:\n    - roles/stack-install\n    - roles/stack-config\n    - roles/wordpress\n```", "```\n$ vagrant up\n$ vagrant up --provider=vmware_fusion\n```", "```\n$ ansible-playbook -i production site.yml\n```", "```\nPLAY [wordpress] ***********************************************************************************\n\nTASK [Gathering Facts] *****************************************************************************\nok: [box1]\n\nTASK [roles/stack-install : install the repo packages] *********************************************\nchanged: [box1] => (item=[u'epel-release', u'https://centos7.iuscommunity.org/ius-release.rpm'])\n\nTASK [roles/stack-install : add the NGINX mainline repo] *******************************************\nchanged: [box1]\n\nTASK [roles/stack-install : update all of the installed packages] **********************************\nchanged: [box1]\n\nTASK [roles/stack-install : remove the packages so that they can be replaced] **********************\nchanged: [box1] => (item=[u'mariadb-libs.x86_64'])\n\nTASK [roles/stack-install : install the stack packages] ********************************************\nchanged: [box1] => (item=[u'postfix', u'MySQL-python', u'policycoreutils-python', u'nginx', u'mariadb101u', u'mariadb101u-server', u'mariadb101u-config', u'mariadb101u-common', u'mariadb101u-libs', u'php72u', u'php72u-bcmath', u'php72u-cli', u'php72u-common', u'php72u-dba', u'php72u-fpm', u'php72u-fpm-nginx', u'php72u-gd', u'php72u-intl', u'php72u-json', u'php72u-mbstring', u'php72u-mysqlnd', u'php72u-process', u'php72u-snmp', u'php72u-soap', u'php72u-xml', u'php72u-xmlrpc', u'vim-enhanced', u'git', u'unzip'])\n\nTASK [roles/stack-config : add the wordpress user] *************************************************\nchanged: [box1]\n\nTASK [roles/stack-config : copy the nginx.conf to /etc/nginx/] *************************************\nchanged: [box1]\n\nTASK [roles/stack-config : create the global directory in /etc/nginx/] *****************************\nchanged: [box1]\n\nTASK [roles/stack-config : copy the restrictions.conf to /etc/nginx/global/] ***********************\nchanged: [box1]\n\nTASK [roles/stack-config : copy the wordpress_shared.conf to /etc/nginx/global/] *******************\nchanged: [box1]\n\nTASK [roles/stack-config : copy the default.conf to /etc/nginx/conf.d/] ****************************\nchanged: [box1]\n\nTASK [roles/stack-config : copy the www.conf to /etc/php-fpm.d/] ***********************************\nchanged: [box1]\n\nTASK [roles/stack-config : configure php.ini] ******************************************************\nchanged: [box1] => (item={u'regexp': u'^;date.timezone =', u'replace': u'date.timezone = Europe/London'})\nchanged: [box1] => (item={u'regexp': u'^expose_php = On', u'replace': u'expose_php = Off'})\nchanged: [box1] => (item={u'regexp': u'^upload_max_filesize = 2M', u'replace': u'upload_max_filesize = 20M'})\n\nTASK [roles/stack-config : start php-fpm] **********************************************************\nchanged: [box1]\n\nTASK [roles/stack-config : start nginx] ************************************************************\nchanged: [box1]\n\nTASK [roles/stack-config : configure the mariadb bind address] *************************************\nchanged: [box1]\n\nTASK [roles/stack-config : start mariadb] **********************************************************\nchanged: [box1]\n\nTASK [roles/stack-config : change mysql root password] *********************************************\nchanged: [box1] => (item=127.0.0.1)\nchanged: [box1] => (item=::1)\nchanged: [box1] => (item=192.168.50.5.nip.io)\nchanged: [box1] => (item=localhost)\n\nTASK [roles/stack-config : set up .my.cnf file] ****************************************************\nchanged: [box1]\n\nTASK [roles/stack-config : delete anonymous MySQL user] ********************************************\nok: [box1] => (item=127.0.0.1)\nok: [box1] => (item=::1)\nchanged: [box1] => (item=192.168.50.5.nip.io)\nchanged: [box1] => (item=localhost)\n\nTASK [roles/stack-config : remove the MySQL test database] *****************************************\nchanged: [box1]\n\nTASK [roles/stack-config : set the selinux allowing httpd_t to be permissive is required] **********\nchanged: [box1]\n\nTASK [roles/wordpress : download wp-cli] ***********************************************************\nchanged: [box1]\n\nTASK [roles/wordpress : update permissions of wp-cli to allow anyone to execute it] ****************\nchanged: [box1]\n\nTASK [roles/wordpress : create the wordpress database] *********************************************\nchanged: [box1]\n\nTASK [roles/wordpress : create the user for the wordpress database] ********************************\nchanged: [box1] => (item=127.0.0.1)\nok: [box1] => (item=::1)\nok: [box1] => (item=192.168.50.5.nip.io)\nok: [box1] => (item=localhost)\n\nTASK [roles/wordpress : are the wordpress files already there?] ************************************\nok: [box1]\n\nTASK [roles/wordpress : download wordpresss] *******************************************************\nchanged: [box1]\n\nTASK [roles/wordpress : set the correct permissions on the homedir] ********************************\nchanged: [box1]\n\nTASK [roles/wordpress : is wordpress already configured?] ******************************************\nok: [box1]\n\nTASK [roles/wordpress : configure wordpress] *******************************************************\nchanged: [box1]\n\nTASK [roles/wordpress : do we need to install wordpress?] ******************************************\nfatal: [box1]: FAILED! => {\"changed\": true, \"cmd\": \"/usr/local/bin/wp core is-installed\", \"delta\": \"0:00:00.364987\", \"end\": \"2018-03-04 20:22:16.659411\", \"msg\": \"non-zero return code\", \"rc\": 1, \"start\": \"2018-03-04 20:22:16.294424\", \"stderr\": \"\", \"stderr_lines\": [], \"stdout\": \"\", \"stdout_lines\": []}\n...ignoring\n\nTASK [roles/wordpress : install wordpress if needed] ***********************************************\nchanged: [box1]\n\nTASK [roles/wordpress : do we need to install the plugins?] ****************************************\nfailed: [box1] (item=jetpack) => {\"changed\": true, \"cmd\": \"/usr/local/bin/wp plugin is-installed jetpack\", \"delta\": \"0:00:01.366121\", \"end\": \"2018-03-04 20:22:20.175418\", \"item\": \"jetpack\", \"msg\": \"non-zero return code\", \"rc\": 1, \"start\": \"2018-03-04 20:22:18.809297\", \"stderr\": \"\", \"stderr_lines\": [], \"stdout\": \"\", \"stdout_lines\": []}\nfailed: [box1] (item=wp-super-cache) => {\"changed\": true, \"cmd\": \"/usr/local/bin/wp plugin is-installed wp-super-cache\", \"delta\": \"0:00:00.380384\", \"end\": \"2018-03-04 20:22:21.035274\", \"item\": \"wp-super-cache\", \"msg\": \"non-zero return code\", \"rc\": 1, \"start\": \"2018-03-04 20:22:20.654890\", \"stderr\": \"\", \"stderr_lines\": [], \"stdout\": \"\", \"stdout_lines\": []}\nfailed: [box1] (item=wordpress-seo) => {\"changed\": true, \"cmd\": \"/usr/local/bin/wp plugin is-installed wordpress-seo\", \"delta\": \"0:00:00.354021\", \"end\": \"2018-03-04 20:22:21.852955\", \"item\": \"wordpress-seo\", \"msg\": \"non-zero return code\", \"rc\": 1, \"start\": \"2018-03-04 20:22:21.498934\", \"stderr\": \"\", \"stderr_lines\": [], \"stdout\": \"\", \"stdout_lines\": []}\nfailed: [box1] (item=wordfence) => {\"changed\": true, \"cmd\": \"/usr/local/bin/wp plugin is-installed wordfence\", \"delta\": \"0:00:00.357012\", \"end\": \"2018-03-04 20:22:22.673549\", \"item\": \"wordfence\", \"msg\": \"non-zero return code\", \"rc\": 1, \"start\": \"2018-03-04 20:22:22.316537\", \"stderr\": \"\", \"stderr_lines\": [], \"stdout\": \"\", \"stdout_lines\": []}\nfailed: [box1] (item=nginx-helper) => {\"changed\": true, \"cmd\": \"/usr/local/bin/wp plugin is-installed nginx-helper\", \"delta\": \"0:00:00.346194\", \"end\": \"2018-03-04 20:22:23.389176\", \"item\": \"nginx-helper\", \"msg\": \"non-zero return code\", \"rc\": 1, \"start\": \"2018-03-04 20:22:23.042982\", \"stderr\": \"\", \"stderr_lines\": [], \"stdout\": \"\", \"stdout_lines\": []}\n...ignoring\n\nTASK [roles/wordpress : set a fact if we don't need to install the plugins] ************************\nskipping: [box1]\n\nTASK [roles/wordpress : set a fact if we need to install the plugins] ******************************\nok: [box1]\n\nTASK [roles/wordpress : install the plugins if we need to or ignore if not] ************************\nchanged: [box1] => (item=jetpack)\nchanged: [box1] => (item=wp-super-cache)\nchanged: [box1] => (item=wordpress-seo)\nchanged: [box1] => (item=wordfence)\nchanged: [box1] => (item=nginx-helper)\n\nTASK [roles/wordpress : do we need to install the theme?] ******************************************\nfatal: [box1]: FAILED! => {\"changed\": true, \"cmd\": \"/usr/local/bin/wp theme is-installed sydney\", \"delta\": \"0:00:01.451018\", \"end\": \"2018-03-04 20:23:02.227557\", \"msg\": \"non-zero return code\", \"rc\": 1, \"start\": \"2018-03-04 20:23:00.776539\", \"stderr\": \"\", \"stderr_lines\": [], \"stdout\": \"\", \"stdout_lines\": []}\n...ignoring\n\nTASK [roles/wordpress : set a fact if we don't need to install the theme] **************************\nskipping: [box1]\n\nTASK [roles/wordpress : set a fact if we need to install the theme] ********************************\nok: [box1]\n\nTASK [roles/wordpress : install the theme if we need to or ignore if not] **************************\nchanged: [box1]\n\nRUNNING HANDLER [roles/stack-config : restart nginx] ***********************************************\nchanged: [box1]\n\nRUNNING HANDLER [roles/stack-config : restart php-fpm] *********************************************\nchanged: [box1]\n\nPLAY RECAP *****************************************************************************************\nbox1 : ok=42 changed=37 unreachable=0 failed=0\n```", "```\nTASK [roles/wordpress : do we need to install wordpress?] ******************************************\nchanged: [box1]\n\nTASK [roles/wordpress : install wordpress if needed] ***********************************************\nskipping: [box1]\n\nTASK [roles/wordpress : do we need to install the plugins?] ****************************************\nchanged: [box1] => (item=jetpack)\nchanged: [box1] => (item=wp-super-cache)\nchanged: [box1] => (item=wordpress-seo)\nchanged: [box1] => (item=wordfence)\nchanged: [box1] => (item=nginx-helper)\n\nTASK [roles/wordpress : set a fact if we don't need to install the plugins] ************************\nok: [box1]\n\nTASK [roles/wordpress : set a fact if we need to install the plugins] ******************************\nskipping: [box1]\n\nTASK [roles/wordpress : install the plugins if we need to or ignore if not] ************************\nskipping: [box1] => (item=jetpack)\nskipping: [box1] => (item=wp-super-cache)\nskipping: [box1] => (item=wordpress-seo)\nskipping: [box1] => (item=wordfence)\nskipping: [box1] => (item=nginx-helper)\n\nTASK [roles/wordpress : do we need to install the theme?] ******************************************\nchanged: [box1]\n\nTASK [roles/wordpress : set a fact if we don't need to install the theme] **************************\nok: [box1]\n\nTASK [roles/wordpress : set a fact if we need to install the theme] ********************************\nskipping: [box1]\n\nTASK [roles/wordpress : install the theme if we need to or ignore if not] **************************\nskipping: [box1]\n\nPLAY RECAP *****************************************************************************************\nbox1 : ok=34 changed=3 unreachable=0 failed=0\n```", "```\n$ vagrant destroy\n```"]