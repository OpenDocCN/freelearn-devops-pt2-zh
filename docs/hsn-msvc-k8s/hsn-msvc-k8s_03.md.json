["```\ntype SocialGraphManager interface {\n   Follow(followed string, follower string) error\n   Unfollow(followed string, follower string) error\n\n   GetFollowing(username string) (map[string]bool, error)\n   GetFollowers(username string) (map[string]bool, error)\n}\n```", "```\npackage social_graph_manager\n\nimport (\n   \"errors\"\n   om \"github.com/the-gigi/delinkcious/pkg/object_model\"\n)\n\ntype SocialGraphManager struct {\n   store om.SocialGraphManager\n}\n\nfunc (m *SocialGraphManager) Follow(followed string, follower string) (err error) {\n    ...\n}\n\nfunc (m *SocialGraphManager) Unfollow(followed string, follower string) (err error) {\n    ...\n}\n\nfunc (m *SocialGraphManager) GetFollowing(username string) (map[string]bool, error) {\n    ...\n}\n\nfunc (m *SocialGraphManager) GetFollowers(username string) (map[string]bool, error) {\n    ...\n}\n```", "```\nfunc makeFollowEndpoint(svc om.SocialGraphManager) endpoint.Endpoint {\n   return func(_ context.Context, request interface{}) (interface{}, error) {\n      req := request.(followRequest)\n      err := svc.Follow(req.Followed, req.Follower)\n      res := followResponse{}\n      if err != nil {\n         res.Err = err.Error()\n      }\n      return res, nil\n   }\n}\n```", "```\nfunc (m *SocialGraphManager) Follow(followed string, follower string) (err error) {\n   if followed == \"\" || follower == \"\" {\n      err = errors.New(\"followed and follower can't be empty\")\n      return\n   }\n\n   return m.store.Follow(followed, follower)\n}\n```", "```\nfunc (s EndpointSet) Follow(followed string, follower string) (err error) {\n   resp, err := s.FollowEndpoint(context.Background(), FollowRequest{Followed: followed, Follower: follower})\n   if err != nil {\n      return err\n   }\n   response := resp.(SimpleResponse)\n\n   if response.Err != \"\" {\n      err = errors.New(response.Err)\n   }\n   return\n}\n```", "```\n$ tree -L 1\n.\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u251c\u2500\u2500 cmd\n\u251c\u2500\u2500 pkg\n\u2514\u2500\u2500 svc\n```", "```\n$ tree cmd\ncmd\n\u2514\u2500\u2500 social_graph_service_e2e\n \u2514\u2500\u2500 social_graph_service_e2e.go\n```", "```\n$ tree pkg\npkg\n\u251c\u2500\u2500 link_manager\n\u2502   \u251c\u2500\u2500 abstract_link_store.go\n\u2502   \u251c\u2500\u2500 db_link_store.go\n\u2502   \u251c\u2500\u2500 db_link_store_test.go\n\u2502   \u251c\u2500\u2500 in_memory_link_store.go\n\u2502   \u251c\u2500\u2500 link_manager.go\n\u2502   \u2514\u2500\u2500 link_manager_suite_test.go\n\u251c\u2500\u2500 link_manager_client\n\u2502   \u2514\u2500\u2500 client.go\n\u251c\u2500\u2500 object_model\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u251c\u2500\u2500 interfaces.go\n\u2502   \u2514\u2500\u2500 types.go\n\u251c\u2500\u2500 social_graph_client\n\u2502   \u251c\u2500\u2500 client.go\n\u2502   \u2514\u2500\u2500 endpoints.go\n\u251c\u2500\u2500 social_graph_manager\n\u2502   \u251c\u2500\u2500 db_scoial_graph_store.go\n\u2502   \u251c\u2500\u2500 db_social_graph_manager_test.go\n\u2502   \u251c\u2500\u2500 in_memory_social_graph_manager_test.go\n\u2502   \u251c\u2500\u2500 in_memory_social_graph_store.go\n\u2502   \u251c\u2500\u2500 social_graph_manager.go\n\u2502   \u2514\u2500\u2500 social_graph_manager_suite_test.go\n\u2514\u2500\u2500 user_manager\n \u251c\u2500\u2500 db_user_manager_test.go\n \u251c\u2500\u2500 db_user_store.go\n \u251c\u2500\u2500 in_memory_user_manager.go\n \u251c\u2500\u2500 in_memory_user_manager_test.go\n \u251c\u2500\u2500 in_memory_user_store.go\n \u2514\u2500\u2500 user_manager_suite_test.go\n```", "```\n$ tree svc\nsvc\n\u251c\u2500\u2500 delinkcious_service\n\u2502   \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 link_service\n\u2502   \u251c\u2500\u2500 link_service.go\n\u2502   \u2514\u2500\u2500 transport.go\n\u251c\u2500\u2500 social_graph_service\n\u2502   \u251c\u2500\u2500 social_graph_service.go\n\u2502   \u2514\u2500\u2500 transport.go\n\u2514\u2500\u2500 user_service\n \u251c\u2500\u2500 transport.go\n \u2514\u2500\u2500 user_service.go\n```", "```\npackage object_model\n\ntype LinkManager interface {\n   GetLinks(request GetLinksRequest) (GetLinksResult, error)\n   AddLink(request AddLinkRequest) error\n   UpdateLink(request UpdateLinkRequest) error\n   DeleteLink(username string, url string) error\n}\n\ntype UserManager interface {\n   Register(user User) error\n   Login(username string, authToken string) (session string, err error)\n   Logout(username string, session string) error\n}\n\ntype SocialGraphManager interface {\n   Follow(followed string, follower string) error\n   Unfollow(followed string, follower string) error\n\n   GetFollowing(username string) (map[string]bool, error)\n   GetFollowers(username string) (map[string]bool, error)\n}\n\ntype LinkManagerEvents interface {\n   OnLinkAdded(username string, link *Link)\n   OnLinkUpdated(username string, link *Link)\n   OnLinkDeleted(username string, url string)\n}\n```", "```\npackage object_model\n\nimport \"time\"\n\ntype Link struct {\n   Url         string\n   Title       string\n   Description string\n   Tags        map[string]bool\n   CreatedAt   time.Time\n   UpdatedAt   time.Time\n}\n\ntype GetLinksRequest struct {\n   UrlRegex         string\n   TitleRegex       string\n   DescriptionRegex string\n   Username         string\n   Tag              string\n   StartToken       string\n}\n\ntype GetLinksResult struct {\n   Links         []Link\n   NextPageToken string\n}\n\ntype AddLinkRequest struct {\n   Url         string\n   Title       string\n   Description string\n   Username    string\n   Tags        map[string]bool\n}\n\ntype UpdateLinkRequest struct {\n   Url         string\n   Title       string\n   Description string\n   Username    string\n   AddTags     map[string]bool\n   RemoveTags  map[string]bool\n}\n\ntype User struct {\n   Email string\n   Name  string\n}\n```", "```\npackage social_graph_manager\n\nimport (\n   \"errors\"\n   om \"github.com/the-gigi/delinkcious/pkg/object_model\"\n)\n\ntype SocialGraphManager struct {\n   store om.SocialGraphManager\n}\n```", "```\nfunc NewSocialGraphManager(store om.SocialGraphManager) (om.SocialGraphManager, error) {\n   if store == nil {\n      return nil, errors.New(\"store can't be nil\")\n   }\n   return &SocialGraphManager{store: store}, nil\n}\n```", "```\nfunc (m *SocialGraphManager) Follow(followed string, follower string) (err error) {\n   if followed == \"\" || follower == \"\" {\n      err = errors.New(\"followed and follower can't be empty\")\n      return\n   }\n\n   return m.store.Follow(followed, follower)\n}\n\nfunc (m *SocialGraphManager) Unfollow(followed string, follower string) (err error) {\n   if followed == \"\" || follower == \"\" {\n      err = errors.New(\"followed and follower can't be empty\")\n      return\n   }\n\n   return m.store.Unfollow(followed, follower)\n}\n\nfunc (m *SocialGraphManager) GetFollowing(username string) (map[string]bool, error) {\n   return m.store.GetFollowing(username)\n}\n\nfunc (m *SocialGraphManager) GetFollowers(username string) (map[string]bool, error) {\n   return m.store.GetFollowers(username)\n}\n```", "```\npackage service\n\nimport (\n   httptransport \"github.com/go-kit/kit/transport/http\"\n   \"github.com/gorilla/mux\"\n   sgm \"github.com/the-gigi/delinkcious/pkg/social_graph_manager\"\n   \"log\"\n   \"net/http\"\n)\n```", "```\nfunc Run() {\n   store, err := sgm.NewDbSocialGraphStore(\"localhost\", 5432, \"postgres\", \"postgres\")\n   if err != nil {\n      log.Fatal(err)\n   }\n   svc, err := sgm.NewSocialGraphManager(store)\n   if err != nil {\n      log.Fatal(err)\n   }\n```", "```\nfollowHandler := httptransport.NewServer(\n   makeFollowEndpoint(svc),\n   decodeFollowRequest,\n   encodeResponse,\n)\n\nunfollowHandler := httptransport.NewServer(\n   makeUnfollowEndpoint(svc),\n   decodeUnfollowRequest,\n   encodeResponse,\n)\n\ngetFollowingHandler := httptransport.NewServer(\n   makeGetFollowingEndpoint(svc),\n   decodeGetFollowingRequest,\n   encodeResponse,\n)\n\ngetFollowersHandler := httptransport.NewServer(\n   makeGetFollowersEndpoint(svc),\n   decodeGetFollowersRequest,\n   encodeResponse,\n)\n```", "```\nr := mux.NewRouter()\nr.Methods(\"POST\").Path(\"/follow\").Handler(followHandler)\nr.Methods(\"POST\").Path(\"/unfollow\").Handler(unfollowHandler)\nr.Methods(\"GET\").Path(\"/following/{username}\").Handler(getFollowingHandler)\nr.Methods(\"GET\").Path(\"/followers/{username}\").Handler(getFollowersHandler)\n```", "```\nlog.Println(\"Listening on port 9090...\")\nlog.Fatal(http.ListenAndServe(\":9090\", r))\n```", "```\ntype Endpoint func(ctx context.Context, request interface{}) (response interface{}, err error)\n```", "```\nreq := request.(getByUsernameRequest)\n```", "```\nreq, ok := request.(getByUsernameRequest)\nif !ok {\n   ...\n}\n```", "```\ntype getByUsernameRequest struct {\n   Username string `json:\"username\"`\n}\n```", "```\nfollowingMap, err := svc.GetFollowing(req.Username)\n```", "```\ntype getFollowingResponse struct {\n   Following map[string]bool `json:\"following\"`\n   Err       string          `json:\"err\"`\n}\n```", "```\nres := getFollowingResponse{Following: followingMap}\nif err != nil {\n   res.Err = err.Error()\n}\n```", "```\nfunc makeGetFollowingEndpoint(svc om.SocialGraphManager) endpoint.Endpoint {\n   return func(_ context.Context, request interface{}) (interface{}, error) {\n      req := request.(getByUsernameRequest)\n      followingMap, err := svc.GetFollowing(req.Username)\n      res := getFollowingResponse{Following: followingMap}\n      if err != nil {\n         res.Err = err.Error()\n      }\n      return res, nil\n   }\n}\n```", "```\nfunc decodeGetFollowingRequest(_ context.Context, r *http.Request) (interface{}, error) {\n   parts := strings.Split(r.URL.Path, \"/\")\n   username := parts[len(parts)-1]\n   if username == \"\" || username == \"following\" {\n      return nil, errors.New(\"user name must not be empty\")\n   }\n   request := getByUsernameRequest{Username: username}\n   return request, nil\n```", "```\nfunc encodeResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {\n   return json.NewEncoder(w).Encode(response)\n}\n```", "```\n$ docker restart postgres\n$ go run main.go\n\n2018/12/31 10:41:23 Listening on port 9090...\n```", "```\n$ http POST http://localhost:9090/follow followed=liat follower=gigi\nHTTP/1.1 200 OK\nContent-Length: 11\nContent-Type: text/plain; charset=utf-8\nDate: Mon, 31 Dec 2018 09:19:01 GMT\n\n{\n \"err\": \"\"\n}\n\n$ http POST http://localhost:9090/follow followed=guy follower=gigi\nHTTP/1.1 200 OK\nContent-Length: 11\nContent-Type: text/plain; charset=utf-8\nDate: Mon, 31 Dec 2018 09:19:01 GMT\n\n{\n \"err\": \"\"\n}\n```", "```\n$ http GET http://localhost:9090/following/gigi\nHTTP/1.1 200 OK\nContent-Length: 37\nContent-Type: text/plain; charset=utf-8\nDate: Mon, 31 Dec 2018 09:37:21 GMT\n\n{\n \"err\": \"\",\n \"following\": {\n \"guy\": true\n \"liat\": true\n }\n}\n```", "```\nfunc NewClient(baseURL string) (om.SocialGraphManager, error) {\n   // Quickly sanitize the instance string.\n   if !strings.HasPrefix(baseURL, \"http\") {\n      baseURL = \"http://\" + baseURL\n   }\n   u, err := url.Parse(baseURL)\n   if err != nil {\n      return nil, err\n   }\n\n   followEndpoint := httptransport.NewClient(\n      \"POST\",\n      copyURL(u, \"/follow\"),\n      encodeHTTPGenericRequest,\n      decodeSimpleResponse).Endpoint()\n\n   unfollowEndpoint := httptransport.NewClient(\n      \"POST\",\n      copyURL(u, \"/unfollow\"),\n      encodeHTTPGenericRequest,\n      decodeSimpleResponse).Endpoint()\n\n   getFollowingEndpoint := httptransport.NewClient(\n      \"GET\",\n      copyURL(u, \"/following\"),\n      encodeGetByUsernameRequest,\n      decodeGetFollowingResponse).Endpoint()\n\n   getFollowersEndpoint := httptransport.NewClient(\n      \"GET\",\n      copyURL(u, \"/followers\"),\n      encodeGetByUsernameRequest,\n      decodeGetFollowersResponse).Endpoint()\n\n   // Returning the EndpointSet as an interface relies on the\n   // EndpointSet implementing the Service methods. That's just a simple bit\n   // of glue code.\n   return EndpointSet{\n      FollowEndpoint:       followEndpoint,\n      UnfollowEndpoint:     unfollowEndpoint,\n      GetFollowingEndpoint: getFollowingEndpoint,\n      GetFollowersEndpoint: getFollowersEndpoint,\n   }, nil\n}\n```", "```\ntype EndpointSet struct {\n   FollowEndpoint       endpoint.Endpoint\n   UnfollowEndpoint     endpoint.Endpoint\n   GetFollowingEndpoint endpoint.Endpoint\n   GetFollowersEndpoint endpoint.Endpoint\n}\n```", "```\nfunc (s EndpointSet) GetFollowing(username string) (following map[string]bool, err error) {\n   resp, err := s.GetFollowingEndpoint(context.Background(), getByUserNameRequest{Username: username})\n   if err != nil {\n      return\n   }\n\n   response := resp.(getFollowingResponse)\n   if response.Err != \"\" {\n      err = errors.New(response.Err)\n   }\n   following = response.Following\n   return\n}\n```", "```\nfunc NewSocialGraphManager(store om.SocialGraphManager) (om.SocialGraphManager, error) {\n   if store == nil {\n      return nil, errors.New(\"store can't be nil\")\n   }\n   return &SocialGraphManager{store: store}, nil\n}\n```", "```\npackage social_graph_manager\n\nimport (\n   \"errors\"\n   om \"github.com/the-gigi/delinkcious/pkg/object_model\"\n)\n\ntype Followers map[string]bool\ntype Following map[string]bool\n\ntype SocialUser struct {\n   Username  string\n   Followers Followers\n   Following Following\n}\n\nfunc NewSocialUser(username string) (user *SocialUser, err error) {\n   if username == \"\" {\n      err = errors.New(\"user name can't be empty\")\n      return\n   }\n\n   user = &SocialUser{Username: username, Followers: Followers{}, Following: Following{}}\n   return\n}\n```", "```\ntype SocialGraph map[string]*SocialUser\n\ntype InMemorySocialGraphStore struct {\n   socialGraph SocialGraph\n}\n\nfunc NewInMemorySocialGraphStore() om.SocialGraphManager {\n   return &InMemorySocialGraphStore{\n      socialGraph: SocialGraph{},\n   }\n}\n```", "```\nfunc (m *InMemorySocialGraphStore) Follow(followed string, follower string) (err error) {\n   followedUser := m.socialGraph[followed]\n   if followedUser == nil {\n      followedUser, _ = NewSocialUser(followed)\n      m.socialGraph[followed] = followedUser\n   }\n\n   if followedUser.Followers[follower] {\n      return errors.New(\"already following\")\n   }\n\n   followedUser.Followers[follower] = true\n\n   followerUser := m.socialGraph[follower]\n   if followerUser == nil {\n      followerUser, _ = NewSocialUser(follower)\n      m.socialGraph[follower] = followerUser\n   }\n\n   followerUser.Following[followed] = true\n\n   return\n```"]