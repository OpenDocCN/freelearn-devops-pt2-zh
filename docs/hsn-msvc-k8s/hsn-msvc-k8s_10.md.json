["```\npackage main\n\n import \"errors\"\n\n func safeDivide(a int, b int) (int, error) {\n         if b == 0 {\n                 return 0, errors.New(\"division by zero\")\n         }\n\n         return a / b, nil\n }\n```", "```\npackage main\n\n import (\n         \"testing\"\n )\n\nfunc TestExactResult(t *testing.T) {\n        result, err := safeDivide(8, 4)\n        if err != nil {\n                t.Errorf(\"8 / 4 expected 2,  got error %v\", err)\n        }\n\n        if result != 2 {\n         t.Errorf(\"8 / 4 expected 2,  got %d\", result)\n        }\n} \n\nfunc TestIntDivision(t *testing.T) {\n        result, err := safeDivide(14, 5)\n        if err != nil {\n                t.Errorf(\"14 / 5 expected 2,  got error %v\", err)\n        }\n\n        if result != 2 {\n                   t.Errorf(\"14 / 5 expected 2,  got %d\", result)\n        }\n}\n\nfunc TestDivideByZero(t *testing.T) {\n        result, err := safeDivide(77, 0)\n        if err == nil {\n                t.Errorf(\"77 / 0 expected 'division by zero' error,  got result %d\", result)\n        }\n\n       if err.Error() != \"division by zero\" {\n               t.Errorf(\"77 / 0 expected 'division by zero' error,  got this error instead %v\", err)\n       }\n}\n```", "```\n$ go test -v\n=== RUN   TestExactResult\n--- PASS: TestExactResult (0.00s)\n=== RUN   TestIntDivision\n--- PASS: TestIntDivision (0.00s)\n=== RUN   TestDivideByZero\n--- PASS: TestDivideByZero (0.00s)\nPASS\nok      github.com/the-gigi/hands-on-microservices-with-kubernetes-code/ch10    0.010s\n```", "```\npackage main\n\n import \"errors\"\n\n func safeDivide(a int, b int) (int, error) {\n         if b == 0 {\n                 return 0, errors.New(\"division by zero\")\n         }\n\n         return a - b, nil\n}\n```", "```\n$ go test -v\n=== RUN   TestExactResult\n--- FAIL: TestExactResult (0.00s)\n foo_test.go:14: 8 / 4 expected 2,  got 4\n=== RUN   TestIntDivision\n--- FAIL: TestIntDivision (0.00s)\n foo_test.go:25: 14 / 5 expected 2,  got 9\n=== RUN   TestDivideByZero\n--- PASS: TestDivideByZero (0.00s)\nFAIL\nexit status 1\nFAIL    github.com/the-gigi/hands-on-microservices-with-kubernetes-code/ch10    0.009s\n```", "```\npackage link_manager\n\n import (\n     \"bytes\"\n     \"encoding/json\"\n     \"errors\"\n     \"github.com/the-gigi/delinkcious/pkg/link_checker_events\"\n     om \"github.com/the-gigi/delinkcious/pkg/object_model\"\n     \"log\"\n     \"net/http\"\n )\n```", "```\nfunc NewLinkManager(linkStore LinkStore,\n     socialGraphManager om.SocialGraphManager,\n     natsUrl string,\n     eventSink om.LinkManagerEvents,\n     maxLinksPerUser int64) (om.LinkManager, error) {\n     ...\n }\n```", "```\npackage link_manager\n\n import (\n     om \"github.com/the-gigi/delinkcious/pkg/object_model\"\n )\n\n type LinkStore interface {\n     GetLinks(request om.GetLinksRequest) (om.GetLinksResult, error)\n     AddLink(request om.AddLinkRequest) (*om.Link, error)\n     UpdateLink(request om.UpdateLinkRequest) (*om.Link, error)\n     DeleteLink(username string, url string) error\n     SetLinkStatus(username, url string, status om.LinkStatus) error\n }\n```", "```\npackage link_manager\ntype mockSocialGraphManager struct { followers map[string]bool }\n\nfunc (m *mockSocialGraphManager) Follow(followed string, follower string) error { return nil }\n\nfunc (m *mockSocialGraphManager) Unfollow(followed string, follower string) error { return nil }\n\nfunc (m *mockSocialGraphManager) GetFollowing(username string) (map[string]bool, error) { return nil, nil }\n\nfunc (m *mockSocialGraphManager) GetFollowers(username string) (map[string]bool, error) { return m.followers, nil }\n\nfunc newMockSocialGraphManager(followers []string) *mockSocialGraphManager { m := &mockSocialGraphManager{ map[string]bool{}, } for _, f := range followers { m.followers[f] = true }\n\nreturn m\n\n}\n```", "```\npackage link_manager\n\nimport ( om \"github.com/the-gigi/delinkcious/pkg/object_model\" )\n\ntype testEventsSink struct { addLinkEvents map[string][]om.Link updateLinkEvents map[string][]om.Link deletedLinkEvents map[string][]string }\n\nfunc (s testEventsSink) OnLinkAdded(username string, link om.Link) { if s.addLinkEvents[username] == nil { s.addLinkEvents[username] = []*om.Link{} } s.addLinkEvents[username] = append(s.addLinkEvents[username], link) }\n\nfunc (s testEventsSink) OnLinkUpdated(username string, link om.Link) { if s.updateLinkEvents[username] == nil { s.updateLinkEvents[username] = []*om.Link{} } s.updateLinkEvents[username] = append(s.updateLinkEvents[username], link) }\n\nfunc (s *testEventsSink) OnLinkDeleted(username string, url string) { if s.deletedLinkEvents[username] == nil { s.deletedLinkEvents[username] = []string{} } s.deletedLinkEvents[username] = append(s.deletedLinkEvents[username], url) }\n\nfunc newLinkManagerEventsSink() testEventsSink { return &testEventsSink{ map[string][]om.Link{}, map[string][]*om.Link{}, map[string][]string{}, } }\n```", "```\npackage link_manager\nimport ( \"testing\"\n. \"github.com/onsi/ginkgo\"\n. \"github.com/onsi/gomega\"\n)\nfunc TestLinkManager(t *testing.T) { RegisterFailHandler(Fail) RunSpecs(t, \"LinkManager Suite\") }\n```", "```\npackage link_manager\nimport ( . \"github.com/onsi/ginkgo\" . \"github.com/onsi/gomega\" om \"github.com/the-gigi/delinkcious/pkg/object_model\" )\n```", "```\nvar _ = Describe(\"In-memory link manager tests\", func() { var err error var linkManager om.LinkManager var socialGraphManager mockSocialGraphManager var eventSink testEventsSink\n```", "```\nBeforeEach(func() {\n     socialGraphManager = newMockSocialGraphManager([]string{\"liat\"})\n     eventSink = newLinkManagerEventsSink()\n     linkManager, err = NewLinkManager(NewInMemoryLinkStore(),\n         socialGraphManager,\n         \"\",\n         eventSink,\n         10)\n     \u03a9(err).Should(BeNil())\n })\n```", "```\nIt(\"should add and get links\", func() {\n     // No links initially\n     r := om.GetLinksRequest{\n         Username: \"gigi\",\n     }\n     res, err := linkManager.GetLinks(r)\n     \u03a9(err).Should(BeNil())\n     \u03a9(res.Links).Should(HaveLen(0))\n```", "```\n    // Add a link\n     r2 := om.AddLinkRequest{\n         Username: \"gigi\",\n         Url:      \"https://golang.org/\",\n         Title:    \"Golang\",\n         Tags:     map[string]bool{\"programming\": true},\n     }\n     err = linkManager.AddLink(r2)\n     \u03a9(err).Should(BeNil())\n```", "```\n    res, err = linkManager.GetLinks(r)\n     \u03a9(err).Should(BeNil())\n     \u03a9(res.Links).Should(HaveLen(1))\n     link := res.Links[0]\n     \u03a9(link.Url).Should(Equal(r2.Url))\n     \u03a9(link.Title).Should(Equal(r2.Title))\n```", "```\n    // Verify link manager notified the event sink about a single added event for the follower \"liat\"\n     \u03a9(eventSink.addLinkEvents).Should(HaveLen(1))\n     \u03a9(eventSink.addLinkEvents[\"liat\"]).Should(HaveLen(1))\n     \u03a9(*eventSink.addLinkEvents[\"liat\"][0]).Should(Equal(link))\n     \u03a9(eventSink.updateLinkEvents).Should(HaveLen(0))\n     \u03a9(eventSink.deletedLinkEvents).Should(HaveLen(0))\n })\n```", "```\npackage main\nimport ( \"context\" _ \"github.com/lib/pq\" \"github.com/the-gigi/delinkcious/pkg/db_util\" \"github.com/the-gigi/delinkcious/pkg/link_manager_client\" om \"github.com/the-gigi/delinkcious/pkg/object_model\" . \"github.com/the-gigi/delinkcious/pkg/test_util\" \"log\" \"os\" )\n```", "```\nfunc initDB() { db, err := db_util.RunLocalDB(\"link_manager\") Check(err)\ntables := []string{\"tags\", \"links\"}\n for _, table := range tables {\n     err = db_util.DeleteFromTableIfExist(db, table)\n     Check(err)\n }\n}\n```", "```\nfunc runLinkService(ctx context.Context) {\n     // Set environment\n     err := os.Setenv(\"PORT\", \"8080\")\n     Check(err)\n\n     err = os.Setenv(\"MAX_LINKS_PER_USER\", \"10\")\n     Check(err)\n\n     RunService(ctx, \".\", \"link_service\")\n }\n\n func runSocialGraphService(ctx context.Context) {\n     err := os.Setenv(\"PORT\", \"9090\")\n     Check(err)\n\n     RunService(ctx, \"../social_graph_service\", \"social_graph_service\")\n }\n```", "```\nfunc main() {\n     // Turn on authentication\n     err := os.Setenv(\"DELINKCIOUS_MUTUAL_AUTH\", \"true\")\n     Check(err)\n\n     initDB()\n\n     ctx := context.Background()\n     defer KillServer(ctx)\n\n     if os.Getenv(\"RUN_SOCIAL_GRAPH_SERVICE\") == \"true\" {\n         runSocialGraphService(ctx)\n     }\n\n     if os.Getenv(\"RUN_LINK_SERVICE\") == \"true\" {\n         runLinkService(ctx)\n     }\n```", "```\n// Run some tests with the client\n     cli, err := link_manager_client.NewClient(\"localhost:8080\")\n     Check(err)\n\n     links, err := cli.GetLinks(om.GetLinksRequest{Username: \"gigi\"})\n     Check(err)\n     log.Print(\"gigi's links:\", links)\n\n     err = cli.AddLink(om.AddLinkRequest{Username: \"gigi\",\n         Url:   \"https://github.com/the-gigi\",\n         Title: \"Gigi on Github\",\n         Tags:  map[string]bool{\"programming\": true}})\n     Check(err)\n\n     links, err = cli.GetLinks(om.GetLinksRequest{Username: \"gigi\"})\n     Check(err)\n     log.Print(\"gigi's links:\", links)\n```", "```\n    err = cli.UpdateLink(om.UpdateLinkRequest{Username: \"gigi\",\n         Url:         \"https://github.com/the-gigi\",\n         Description: \"Most of my open source code is here\"},\n     )\n\n     Check(err)\n     links, err = cli.GetLinks(om.GetLinksRequest{Username: \"gigi\"})\n     Check(err)\n     log.Print(\"gigi's links:\", links)\n\n     err = cli.DeleteLink(\"gigi\", \"https://github.com/the-gigi\")\n     Check(err)\n     Check(err)\n     links, err = cli.GetLinks(om.GetLinksRequest{Username: \"gigi\"})\n     Check(err)\n     log.Print(\"gigi's links:\", links)\n }\n```", "```\npackage db_util\n\n import (\n     \"database/sql\"\n     \"fmt\"\n     sq \"github.com/Masterminds/squirrel\"\n     _ \"github.com/lib/pq\"\n     \"log\"\n     \"os\"\n     \"os/exec\"\n     \"strconv\"\n     \"strings\"\n )\n```", "```\ntype dbParams struct {\n     Host     string\n     Port     int\n     User     string\n     Password string\n     DbName   string\n }\n\n func defaultDbParams() dbParams {\n     return dbParams{\n         Host:     \"localhost\",\n         Port:     5432,\n         User:     \"postgres\",\n         Password: \"postgres\",\n     }\n }\n```", "```\nfunc connectToDB(host string, port int, username string, password string, dbName string) (db *sql.DB, err error) {\n     mask := \"host=%s port=%d user=%s password=%s dbname=%s sslmode=disable\"\n     dcn := fmt.Sprintf(mask, host, port, username, password, dbName)\n     db, err = sql.Open(\"postgres\", dcn)\n     return\n }\n```", "```\nfunc RunLocalDB(dbName string) (db *sql.DB, err error) {\n     // Launch the DB if not running\n     out, err := exec.Command(\"docker\", \"ps\", \"-f\", \"name=postgres\", \"--format\", \"{{.Names}}\").CombinedOutput()\n     if err != nil {\n         return\n     }\n```", "```\n    s := string(out)\n     if s == \"\" {\n         out, err = exec.Command(\"docker\", \"restart\", \"postgres\").CombinedOutput()\n         if err != nil {\n             log.Print(string(out))\n             _, err = exec.Command(\"docker\", \"run\", \"-d\", \"--name\", \"postgres\",\n                 \"-p\", \"5432:5432\",\n                 \"-e\", \"POSTGRES_PASSWORD=postgres\",\n                 \"postgres:alpine\").CombinedOutput()\n\n         }\n         if err != nil {\n             return\n         }\n     }\n```", "```\np := defaultDbParams()\n db, err = EnsureDB(p.Host, p.Port, p.User, p.Password, dbName)\n return\n}\n```", "```\n// Make sure the database exists (creates it if it doesn't)\n\nfunc EnsureDB(host string, port int, username string, password string, dbName string) (db *sql.DB, err error) { // Connect to the postgres DB postgresDb, err := connectToDB(host, port, username, password, \"postgres\") if err != nil { return }\n\n// Check if the DB exists in the list of databases\n var count int\n sb := sq.StatementBuilder.PlaceholderFormat(sq.Dollar)\n q := sb.Select(\"count(*)\").From(\"pg_database\").Where(sq.Eq{\"datname\": dbName})\n err = q.RunWith(postgresDb).QueryRow().Scan(&count)\n if err != nil {\n     return\n }\n\n // If it doesn't exist create it\n if count == 0 {\n     _, err = postgresDb.Exec(\"CREATE database \" + dbName)\n     if err != nil {\n         return\n     }\n }\n\n db, err = connectToDB(host, port, username, password, dbName)\n return\n}\n```", "```\npackage test_util\n\nimport ( \"context\" \"os\" \"os/exec\" )\n```", "```\n...\n result, err := foo()\n if err != nil {\n     return err\n }\n...\n```", "```\nfunc Check(err error) { if err != nil { panic(err) } }\n```", "```\n...\n result, err := foo()\n Check(err)\n...\n```", "```\n// Build and run a service in a target directory\nfunc RunService(ctx context.Context, targetDir string, service string) {\n   // Save and restore later current working dir\n   wd, err := os.Getwd()\n   Check(err)\n   defer os.Chdir(wd)\n\n   // Build the server if needed\n   os.Chdir(targetDir)\n   _, err = os.Stat(\"./\" + service)\n   if os.IsNotExist(err) {\n      _, err := exec.Command(\"go\", \"build\", \".\").CombinedOutput()\n      Check(err)\n   }\n\n   cmd := exec.CommandContext(ctx, \"./\"+service)\n   err = cmd.Start()\n   Check(err)\n}\n```", "```\nfunc StopService(ctx context.Context) { ctx.Done() }\n```", "```\npackage main\n\nimport ( \"encoding/json\" \"errors\" \"fmt\" om \"github.com/the-gigi/delinkcious/pkg/object_model\" . \"github.com/the-gigi/delinkcious/pkg/test_util\" \"io/ioutil\" \"log\" \"net/http\" net_url \"net/url\" \"os\" \"os/exec\" \"time\" )\n```", "```\nvar ( delinkciousUrl string delinkciousToken = os.Getenv(\"DELINKCIOUS_TOKEN\") httpClient = http.Client{} )\n```", "```\n$ minikube service api-gateway --url http://192.168.99.161:30866\n```", "```\nfunc main() { tempUrl, err := exec.Command(\"minikube\", \"service\", \"api-gateway\", \"--url\").CombinedOutput() delinkciousUrl = string(tempUrl[:len(tempUrl)-1]) + \"/v1.0\" Check(err)\n\n// Delete link\n deleteLink(\"https://github.com/the-gigi\")\n\n // Get links\n getLinks()\n\n // Add a new link\n addLink(\"https://github.com/the-gigi\", \"Gigi on Github\")\n\n // Get links again\n getLinks()\n\n // Wait a little and get links again\n time.Sleep(time.Second * 3)\n getLinks()\n\n}\n```", "```\nfunc getLinks() { req, err := http.NewRequest(\"GET\", string(delinkciousUrl)+\"/links\", nil) Check(err)\n\nreq.Header.Add(\"Access-Token\", delinkciousToken)\n r, err := httpClient.Do(req)\n Check(err)\n\n defer r.Body.Close()\n\n if r.StatusCode != http.StatusOK {\n     Check(errors.New(r.Status))\n }\n\n var glr om.GetLinksResult\n body, err := ioutil.ReadAll(r.Body)\n\n err = json.Unmarshal(body, &glr)\n Check(err)\n\n log.Println(\"======= Links =======\")\n for _, link := range glr.Links {\n     log.Println(fmt.Sprintf(\"title: '%s', url: '%s', status: '%s'\", link.Title, link.Url, link.Status))\n }\n\n}\n```", "```\nfunc addLink(url string, title string) { params := net_url.Values{} params.Add(\"url\", url) params.Add(\"title\", title) qs := params.Encode()\n\nlog.Println(\"===== Add Link ======\")\n log.Println(fmt.Sprintf(\"Adding new link - title: '%s', url: '%s'\", title, url))\n\n url = fmt.Sprintf(\"%s/links?%s\", delinkciousUrl, qs)\n req, err := http.NewRequest(\"POST\", url, nil)\n Check(err)\n\n req.Header.Add(\"Access-Token\", delinkciousToken)\n r, err := httpClient.Do(req)\n Check(err)\n if r.StatusCode != http.StatusOK {\n     defer r.Body.Close()\n     bodyBytes, err := ioutil.ReadAll(r.Body)\n     Check(err)\n     message := r.Status + \" \" + string(bodyBytes)\n     Check(errors.New(message))\n }\n\n}\n```", "```\n$ minikube status host: Running kubelet: Running apiserver: Running kubectl: Correctly Configured: pointing to minikube-vm at 192.168.99.160\n```", "```\n$ go run smoke.go\n```", "```\n2019/04/19 10:03:48 ======= Links ======= 2019/04/19 10:03:48 title: 'gg', url: 'http://gg.com', status: 'invalid' 2019/04/19 10:03:48 ===== Add Link ====== 2019/04/19 10:03:48 Adding new link - title: 'Gigi on Github', url: 'https://github.com/the-gigi' 2019/04/19 10:03:49 ======= Links ======= 2019/04/19 10:03:49 title: 'gg', url: 'http://gg.com', status: 'invalid' 2019/04/19 10:03:49 title: 'Gigi on Github', url: 'https://github.com/the-gigi', status: 'pending' 2019/04/19 10:03:52 ======= Links ======= 2019/04/19 10:03:52 title: 'gg', url: 'http://gg.com', status: 'invalid' 2019/04/19 10:03:52 title: 'Gigi on Github', url: 'https://github.com/the-gigi', status: 'valid'\n```", "```\nbrew cask install osxfuse\n```", "```\nbrew install datawire/blackbird/telepresence\n```", "```\nfunc makeGetLinksEndpoint(svc om.LinkManager) endpoint.Endpoint { return func(_ context.Context, request interface{}) (interface{}, error) { fmt.Println(\"**** Local link service here! calling GetLinks() ****\") req := request.(om.GetLinksRequest) result, err := svc.GetLinks(req) res := getLinksResponse{} for _, link := range result.Links { res.Links = append(res.Links, newLink(link)) } if err != nil { res.Err = err.Error() return res, err } return res, nil } }\n```", "```\n$ cd svc/service/link_service\n$ go build -gcflags \"all=-N -l\" .\n\n$ telepresence --swap-deployment link-manager --run ./link_service\nT: How Telepresence uses sudo: https://www.telepresence.io/reference/install#dependencies\nT: Invoking sudo. Please enter your sudo password.\nPassword:\nT: Starting proxy with method 'vpn-tcp', which has the following limitations: All processes are affected, only one telepresence can run per machine, and you can't use other VPNs. You may need to add cloud hosts and headless services with --also-proxy.\nT: For a full list of method limitations see https://telepresence.io/reference/methods.html\nT: Volumes are rooted at $TELEPRESENCE_ROOT. See https://telepresence.io/howto/volumes.html for details.\nT: Starting network proxy to cluster by swapping out Deployment link-manager with a proxy\nT: Forwarding remote port 8080 to local port 8080.\n\nT: Guessing that Services IP range is 10.96.0.0/12\\. Services started after this point will be inaccessible if are outside this range; restart telepresence if you can't access a new Service.\nT: Setup complete. Launching your command.\n2019/04/20 01:17:06 DB host: 10.100.193.162 DB port: 5432\n2019/04/20 01:17:06 Listening on port 8080...\n```", "```\n$ go run smoke.go \n2019/04/21 00:18:50 ======= Links ======= 2019/04/21 00:18:50 ===== Add Link ====== 2019/04/21 00:18:50 Adding new link - title: 'Gigi on Github', url: 'https://github.com/the-gigi' 2019/04/21 00:18:50 ======= Links ======= 2019/04/21 00:18:50 title: 'Gigi on Github', url: 'https://github.com/the-gigi', status: 'pending' 2019/04/21 00:18:54 ======= Links ======= 2019/04/21 00:18:54 title: 'Gigi on Github', url: 'https://github.com/the-gigi', status: 'valid'\n```", "```\n**** Local link service here! calling GetLinks() ****\n**** Local link service here! calling GetLinks() ****\n```", "```\n$ kubectl logs svc/link-manager | grep \"Local link service here\" \n```"]