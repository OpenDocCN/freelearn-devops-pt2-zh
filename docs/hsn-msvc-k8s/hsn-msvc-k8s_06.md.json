["```\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority: /Users/gigi.sayfan/.minikube/ca.crt\n    server: https://192.168.99.123:8443\n  name: minikube\ncontexts:\n- context:\n    cluster: minikube\n    user: minikube\n  name: minikube\ncurrent-context: minikube\nkind: Config\npreferences: {}\nusers:\n- name: minikube\n  user:\n    client-certificate: /Users/gigi.sayfan/.minikube/client.crt\n    client-key: /Users/gigi.sayfan/.minikube/client.key\n```", "```\n$ kubectl get sa default -o yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n creationTimestamp: 2019-01-11T15:49:27Z\n name: default\n namespace: default\n resourceVersion: \"325\"\n selfLink: /api/v1/namespaces/default/serviceaccounts/default\n uid: 79e17169-15b8-11e9-8591-0800275914a6\nsecrets:\n- name: default-token-td5tz\n```", "```\n# TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\n# CA_CERT=$(cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt)\n# URL=\"https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}\"\n\n# curl --cacert \"$CERT\" -H \"Authorization: Bearer $TOKEN\" \"$URL/api/v1/namespaces/default/pods\"\n{\n  \"kind\": \"Status\",\n  \"apiVersion\": \"v1\",\n  \"metadata\": {\n\n  },\n  \"status\": \"Failure\",\n  \"message\": \"pods is forbidden: User \\\"system:serviceaccount:default:default\\\" cannot list resource \\\"pods\\\" in API group \\\"\\\" in the namespace \\\"default\\\"\",\n  \"reason\": \"Forbidden\",\n  \"details\": {\n    \"kind\": \"pods\"\n  },\n  \"code\": 403\n}\n```", "```\nFROM python:3\n\nRUN apt-get update -y\nRUN apt-get install -y vim\nRUN pip install kubernetes \\\n                httpie     \\\n                ipython\n\nCMD bash\n```", "```\n$ kubectl run trouble -it --image=g1g1/py-kube:0.2 bash\n```", "```\n# ipython\nPython 3.7.2 (default, Feb  6 2019, 12:04:03)\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.2.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: from kubernetes import client, config\nIn [2]: config.load_incluster_config()\nIn [3]: api = client.CoreV1Api()\nIn [4]: api.list_namespaced_pod(namespace='default')\n\n```", "```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: link-manager\n  automountServiceAccountToken: false\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: link-manager\n  labels:\n    svc: link\n    app: manager\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      svc: link\n      app: manager\n  serviceAccountName: link-manager\n...\n```", "```\n$ kubectl get secret link-manager-token-zgzff | grep link-manager-token\nlink-manager-token-zgzff   kubernetes.io/service-account-token  3   20h\n```", "```\n$ kubectl create secret docker-registry private-dockerhub \\\n --docker-server=docker.io \\\n --docker-username=g1g1 \\\n --docker-password=$DOCKER_PASSWORD \\\n --docker-email=$DOCKER_EMAIL\nsecret \"private-dockerhub\" created\n$ kubectl get secret private-dockerhub\nNAME                TYPE                             DATA      AGE\nprivate-dockerhub   kubernetes.io/dockerconfigjson   1         16s\n```", "```\na=1\nb=2\n```", "```\n$ kubectl create secret generic generic-secrets --from-env-file=generic-secrets.txt -o yaml\n\napiVersion: v1\ndata:\n a: MQ==\n b: Mg==\nkind: Secret\nmetadata:\n creationTimestamp: 2019-02-16T21:37:38Z\n name: generic-secrets\n namespace: default\n resourceVersion: \"1207295\"\n selfLink: /api/v1/namespaces/default/secrets/generic-secrets\n uid: 14e1db5c-3233-11e9-8e69-0800275914a6\ntype: Opaque\n```", "```\n$ echo -n $(kubectl get secret generic-secrets -o jsonpath=\"{.data.a}\") | base64 -D\n1\n```", "```\n$ echo -n top-secret | base64\ndG9wLXNlY3JldA==\n\n$ echo -n bottom-secret | base64\nYm90dG9tLXNlY3JldA==\n\napiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\n  name: generic-secrets2\n  namespace: default\ndata:\n  c: dG9wLXNlY3JldA==\n  d: Ym90dG9tLXNlY3JldA==\n```", "```\n$ kubectl create -f generic-secrets2.yaml\nsecret \"generic-secrets2\" created\n\n$ echo -n $(kubectl get secret generic-secrets2 -o jsonpath=\"{.data.c}\") | base64 -d\ntop-secret\n\n$ echo -n $(kubectl get secret generic-secrets2 -o jsonpath=\"{.data.d}\") | base64 -d\nbottom-secret\n```", "```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: service-account\nautomountServiceAccountToken: false\n```", "```\n$ kubectl create -f service-account.yaml\nserviceaccount \"service-account\" created\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: trouble\nspec:\n  serviceAccountName: service-account\n  containers:\n  - name: trouble\n    image: g1g1/py-kube:0.2\n    command: [\"/bin/bash\", \"-c\", \"while true ; do sleep 10 ; done\"]\n    volumeMounts:\n    - name: generic-secrets2\n      mountPath: \"/etc/generic-secrets2\"\n      readOnly: true\n  imagePullSecrets:\n  - name: private-dockerhub\n  volumes:\n  - name: generic-secrets2\n    secret:\n      secretName: generic-secrets2\n```", "```\n$ kubectl create -f pod-with-secrets.yaml\npod \"trouble\" created\n```", "```\n$ kubectl exec -it trouble bash\n\n# ls /var/run/secrets/kubernetes.io/serviceaccount/\nls: cannot access '/var/run/secrets/kubernetes.io/serviceaccount/': No such file or directory\n\n# cat /etc/generic-secrets2/c\ntop-secret\n\n# cat /etc/generic-secrets2/d\nbottom-secret\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  labels:\n    app.kubernetes.io/component: server\n    app.kubernetes.io/name: argo-cd\n  name: argocd-server\nrules:\n- apiGroups:\n  - \"\"\n  resources:\n  - secrets\n  - configmaps\n  verbs:\n  - create\n  - get\n  - list\n  ...\n- apiGroups:\n  - argoproj.io\n  resources:\n  - applications\n  - appprojects\n  verbs:\n  - create\n  - get\n  - list\n  ...\n- apiGroups:\n  - \"\"\n  resources:\n  - events\n  verbs:\n  - create\n  - list\n```", "```\n- apiGroups:\n  - \"\"\n  resources:\n  - secrets\n  - configmaps\n  verbs:\n  - create\n  - get\n  - list\n  - watch\n  - update\n  - patch\n  - delete\n```", "```\n- apiGroups:\n  - \"\"\n  resources:\n  - events\n  verbs:\n  - create\n- list\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  labels:\n    app.kubernetes.io/component: application-controller\n    app.kubernetes.io/name: argo-cd\n  name: argocd-application-controller\nrules:\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs:\n  - '*'\n- nonResourceURLs:\n  - '*'\n  verbs:\n- '*'\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  labels:\n    app.kubernetes.io/component: application-controller\n    app.kubernetes.io/name: argo-cd\n  name: argocd-application-controller\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: argocd-application-controller\nsubjects:\n- kind: ServiceAccount\nname: argocd-application-controller\n```", "```\n$ echo -n \"social-graph-manager: 123\" | base64\nc29jaWFsLWdyYXBoLW1hbmFnZXI6IDEyMw==\n```", "```\napiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\n  name: mutual-auth\n  namespace: default\ndata:\n  mutual-auth.yaml: c29jaWFsLWdyYXBoLW1hbmFnZXI6IDEyMw==\n```", "```\n$ kubectl get secret link-mutual-auth -o \"jsonpath={.data['mutual-auth\\.yaml']}\" | base64 -D\nsocial-graph-manager: 123\n```", "```\n$ echo -n \"link-manager: 123\" | base64\nbGluay1tYW5hZ2VyOiAxMjM=\n```", "```\napiVersion: v1\nkind: Secret\ntype: Opaque\nmetadata:\n  name: mutual-auth\n  namespace: default\ndata:\n  mutual-auth.yaml: bGluay1tYW5hZ2VyOiAxMjM=\n```", "```\nspec:\n  containers:\n  - name: link-manager\n    image: g1g1/delinkcious-link:0.3\n    imagePullPolicy: Always\n    ports:\n    - containerPort: 8080\n    envFrom:\n    - configMapRef:\n        name: link-manager-config\n    volumeMounts:\n    - name: mutual-auth\n      mountPath: /etc/delinkcious\n      readOnly: true\n  volumes:\n  - name: mutual-auth\n    secret:\n      secretName: link-mutual-auth\n```", "```\npackage auth_util\n\nimport (\n   _ \"github.com/lib/pq\"\n   \"gopkg.in/yaml.v2\"\n   \"io/ioutil\"\n   \"os\"\n)\n\nconst callersFilename = \"/etc/delinkcious/mutual-auth.yaml\"\n\nvar callersByName = map[string]string{}\nvar callersByToken = map[string][]string{}\n```", "```\nfunc init() {\n   if os.Getenv(\"DELINKCIOUS_MUTUAL_AUTH\") == \"false\" {\n      return\n   }\n\n   data, err := ioutil.ReadFile(callersFilename)\n   if err != nil {\n      panic(err)\n   }\n   err = yaml.Unmarshal(data, callersByName)\n   if err != nil {\n      panic(err)\n   }\n\n   for caller, token := range callersByName {\n      callersByToken[token] = append(callersByToken[token], caller)\n   }\n}\n```", "```\nfunc GetToken(caller string) string {\n   return callersByName[caller]\n}\n\nfunc HasCaller(caller string, token string) bool {\n   for _, c := range callersByToken[token] {\n      if c == caller {\n         return true\n      }\n   }\n\n   return false\n}\n```", "```\n// encodeHTTPGenericRequest is a transport/http.EncodeRequestFunc that\n// JSON-encodes any request to the request body. Primarily useful in a client.\nfunc encodeHTTPGenericRequest(_ context.Context, r *http.Request, request interface{}) error {\n   var buf bytes.Buffer\n   if err := json.NewEncoder(&buf).Encode(request); err != nil {\n      return err\n   }\n   r.Body = ioutil.NopCloser(&buf)\n\n   if os.Getenv(\"DELINKCIOUS_MUTUAL_AUTH\") != \"false\" {\n      token := auth_util.GetToken(SERVICE_NAME)\n      r.Header[\"Delinkcious-Caller-Token\"] = []string{token}\n   }\n\n   return nil\n}\n```", "```\nfunc decodeGetFollowersRequest(_ context.Context, r *http.Request) (interface{}, error) {\n   if os.Getenv(\"DELINKCIOUS_MUTUAL_AUTH\") != \"false\" {\n      token := r.Header[\"Delinkcious-Caller-Token\"]\n      if len(token) == 0 || token[0] == \"\" {\n         return nil, errors.New(\"Missing caller token\")\n      }\n\n      if !auth_util.HasCaller(\"link-manager\", token[0]) {\n         return nil, errors.New(\"Unauthorized caller\")\n      }\n   }\n   parts := strings.Split(r.URL.Path, \"/\")\n   username := parts[len(parts)-1]\n   if username == \"\" || username == \"followers\" {\n      return nil, errors.New(\"user name must not be empty\")\n   }\n   request := getByUsernameRequest{Username: username}\n   return request, nil\n}\n```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: deny-all\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n```", "```\n# http GET http://$SOCIAL_GRAPH_MANAGER_SERVICE_HOST:9090/following/gigi\n\nHTTP/1.1 200 OK\nContent-Length: 37\nContent-Type: text/plain; charset=utf-8\nDate: Mon, 18 Feb 2019 18:00:52 GMT\n\n{\n    \"err\": \"\",\n    \"following\": {\n        \"liat\": true\n    }\n}\n```", "```\n# http GET http://$SOCIAL_GRAPH_MANAGER_SERVICE_HOST:9090/following/gigi\n\nhttp: error: Request timed out (30s).\n```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-social-graph-db\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      svc: social-graph\n      app: db\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          svc: social-graph\n          app: manger\n    ports:\n    - protocol: TCP\n      port: 5432\n```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-link-to-social-graph\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      svc: social-graph\n      app: manager\n  ingress:\n  - from:\n    - podSelector:\n        matchLabels:\n          svc: link\n          app: manger\n    ports:\n    - protocol: TCP\n      port: 9090\n```", "```\nrules:\n- apiGroups:\n  - '*'\n  resources:\n  - '*'\n  verbs:\n  - '*'\n- nonResourceURLs:\n  - '*'\n  verbs:\n- '*'\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: user-manager\n  labels:\n    svc: user\n    app: manager\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      svc: user\n      app: manager\n  template:\n    metadata:\n      labels:\n        svc: user\n        app: manager\n    spec:\n      containers:\n      - name: user-manager\n        image: g1g1/delinkcious-user:0.3\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 7070\n        resources:\n          requests:\n            memory: 64Mi\n            cpu: 250m\n          limits:\n            memory: 64Mi\n            cpu: 250m\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: secure-pod\nspec:\n  containers:\n  - name: some-container\n    image: g1g1/py-kube:0.2\n    command: [\"/bin/bash\", \"-c\", \"while true ; do sleep 10 ; done\"]\n    securityContext:\n      runAsUser: 2000\n      allowPrivilegeEscalation: false\n      capabilities:\n        add: [\"NET_ADMIN\", \"SYS_TIME\"]\n      seLinuxOptions:\n        level: \"s0:c123,c456\"\n```", "```\n$ kubectl exec -it secure-pod bash\n\nI have no name!@secure-pod:/$ whoami\nwhoami: cannot find name for user ID 2000\n\nI have no name!@secure-pod:/$ sudo su\nbash: sudo: command not found\n```", "```\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n  name: disallow-privileged-access\nspec:\n  privileged: false\n  allowPrivilegeEscalation: false\n  # required fields.\n  seLinux:\n    rule: RunAsAny\n  supplementalGroups:\n    rule: RunAsAny\n  runAsUser:\n    rule: RunAsAny\n  fsGroup:\n    rule: RunAsAny\n  volumes:\n  - '*'\n```"]