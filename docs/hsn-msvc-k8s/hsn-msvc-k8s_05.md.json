["```\nfn main() {\n    let mut a: u8 = 0;\n    let mut b: u8 = 1;\n    println!(\"{}\", a);\n    while b <= 100 {\n        println!(\"{}\", b);\n        b = a + b;\n        a = b - a;\n    }\n}\n\nOutput:\n\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n```", "```\nif __FILE__ == $0\n  limit = Integer(ARGV[0])\n  a = 0\n  b = 1\n  puts a\n  while b < limit\n    puts b\n    b = a + b\n    a = b - a\n  end\nend\n```", "```\nimport os\n\nlimit = int(os.environ['FIB_LIMIT'])\na = 0\nb = 1\nprint(a)\nwhile b < limit:\n    print(b)\n    b = a + b\n    a = b - a\n```", "```\n[section]\na=1\nb=2\n\n; here is a comment\n[another_section]\nc=3\nd=4\ne=5\n```", "```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <startminimized value=\"False\">\n  <width value=\"1024\">\n  <height value = \"768\">\n  <dummy />\n  <plugin>\n    <name value=\"Show Warning Message Box\">\n    <dllfile value=\"foo.dll\">\n    <method value = \"warning\">\n  </plugin>\n  <plugin>\n    <name value=\"Show Error Message Box\">\n    <dllfile value=\"foo.dll\">\n    <method value = \"error\">\n  </plugin>\n  <plugin>\n    <name value=\"Get Random Number\">\n    <dllfile value=\"bar.dll\">\n        <method value = \"random\">\n  </plugin>\n</xml>\n```", "```\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25,\n  \"address\": {\n    \"streetAddress\": \"21 2nd Street\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postalCode\": \"10021\"\n  },\n  \"phoneNumber\": [\n    {\n      \"type\": \"home\",\n      \"number\": \"212 555-1234\"\n    },\n    {\n      \"type\": \"fax\",\n      \"number\": \"646 555-4567\"\n    }\n  ],\n  \"gender\": {\n    \"type\": \"male\"\n  }\n}\n```", "```\n# sequencer protocols for Laser eye surgery\n---\n- step:  &id001                  # defines anchor label &id001\n    instrument:      Lasik 3000\n    pulseEnergy:     5.4\n    pulseDuration:   12\n    repetition:      1000\n    spotSize:        1mm\n\n- step: &id002\n    instrument:      Lasik 3000\n    pulseEnergy:     5.0\n    pulseDuration:   10\n    repetition:      500\n    spotSize:        2mm\n- step: *id001                   # refers to the first step (with anchor &id001)\n- step: *id002                   # refers to the second step\n- step:\n    <<: *id001\n    spotSize: 2mm                # redefines just this key, refers rest from &id001\n- step: *id002\n```", "```\n# This is how to comment in TOML.\n\ntitle = \"A TOML Example\"\n\n[owner]\nname = \"Gigi Sayfan\"\ndob = 1968-09-28T07:32:00-08:00 # First class dates\n\n# Simple section with various data types\n[kubernetes]\napi_server = \"192.168.1.1\"\nports = [ 80, 443 ]\nconnection_max = 5000\nenabled = true\n\n# Nested section\n[servers]\n\n  # Indentation (tabs and/or spaces) is optional\n  [servers.alpha]\n  ip = \"10.0.0.1\"\n  dc = \"dc-1\"\n\n  [servers.beta]\n  ip = \"10.0.0.2\"\n  dc = \"dc-2\"\n\n[clients]\ndata = [ [\"gamma\", \"delta\"], [1, 2] ]\n\n# Line breaks are OK when inside arrays\nhosts = [\n  \"alpha\",\n  \"omega\"\n]\n```", "```\nuser       www www;  ## Default: nobody\nworker_processes  5;  ## Default: 1\nerror_log  logs/error.log;\npid        logs/nginx.pid;\nworker_rlimit_nofile 8192;\n\nevents {\n  worker_connections  4096;  ## Default: 1024\n}\n\nhttp {\n  include    conf/mime.types;\n  include    /etc/nginx/proxy.conf;\n  include    /etc/nginx/fastcgi.conf;\n  index    index.html index.htm index.php;\n\n  default_type application/octet-stream;\n  log_format   main '$remote_addr - $remote_user [$time_local]  $status '\n    '\"$request\" $body_bytes_sent \"$http_referer\" '\n    '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  access_log   logs/access.log  main;\n  sendfile     on;\n  tcp_nopush   on;\n  server_names_hash_bucket_size 128; # this seems to be required for some vhosts\n\n  server { # php/fastcgi\n    listen       80;\n    server_name  domain1.com www.domain1.com;\n    access_log   logs/domain1.access.log  main;\n    root         html;\n\n    location ~ \\.php$ {\n      fastcgi_pass   127.0.0.1:1025;\n    }\n  }\n}\n```", "```\n$ cat ~/.kube/config\napiVersion: v1\nclusters:\n- cluster:\n certificate-authority: /Users/gigi.sayfan/.minikube/ca.crt\n server: https://192.168.99.121:8443\n name: minikube\ncontexts:\n- context:\n cluster: minikube\n user: minikube\n name: minikube\ncurrent-context: minikube\nkind: Config\npreferences: {}\nusers:\n- name: minikube\n user:\n client-certificate: /Users/gigi.sayfan/.minikube/client.crt\n client-key: /Users/gigi.sayfan/.minikube/client.key\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: link-service-config\n  namespace: default\ndata:\n  MAX_LINKS_PER_USER: \"10\"\n  PORT: \"8080\"\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: link-manager\n  labels:\n    svc: link\n    app: manager\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      svc: link\n      app: manager\n  template:\n    metadata:\n      labels:\n        svc: link\n        app: manager\n    spec:\n      containers:\n      - name: link-manager\n        image: g1g1/delinkcious-link:0.2\n        ports:\n        - containerPort: 8080\n      envFrom:\n      - configMapRef:\n          name: link-manager-config\n```", "```\nMAX_LINKS_PER_PAGE=10\nPORT=9090\n```", "```\nport := os.Getenv(\"PORT\")\nif port == \"\" {\n   port = \"8080\"\n}\n\nmaxLinksPerUserStr := os.Getenv(\"MAX_LINKS_PER_USER\")\nif maxLinksPerUserStr == \"\" {\n   maxLinksPerUserStr = \"10\"\n}\n```", "```\nfunc runLinkService(ctx context.Context) {\n   // Set environment\n   err := os.Setenv(\"PORT\", \"8080\")\n   check(err)\n\n   err = os.Setenv(\"MAX_LINKS_PER_USER\", \"10\")\n   check(err)\n\n   runService(ctx, \".\", \"link_service\")\n}\n\nfunc runSocialGraphService(ctx context.Context) {\n   err := os.Setenv(\"PORT\", \"9090\")\n   check(err)\n\n   runService(ctx, \"../social_graph_service\", \"social_graph_service\")\n}\n```", "```\n$ kubectl create configmap test --dry-run --from-literal=a=1 --from-literal=b=2 -o yaml\napiVersion: v1\ndata:\n a: \"1\"\n b: \"2\"\nkind: ConfigMap\nmetadata:\n creationTimestamp: null\n name: test\n```", "```\nsuperhero: Doctor Strange\nvillain: Thanos\n```", "```\n$ kubectl create configmap file-config --dry-run --from-file comics.yaml -o yaml\n\napiVersion: v1\ndata:\n comics.yaml: |+\n superhero: Doctor Strange\n villain: Thanos\n\nkind: ConfigMap\nmetadata:\n creationTimestamp: null\n name: file-config\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: env-config\n  namespace: default\ndata:\n  SUPERHERO: Superman\n  VILLAIN: Lex Luthor\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: some-pod\nspec:\n  containers:\n  - name: some-container\n    image: busybox\n    command: [ \"/bin/sh\", \"-c\", \"watch 'echo \\\"superhero: $SUPERHERO villain: $VILLAIN\\\"'\" ]\n    envFrom:\n    - configMapRef:\n        name: env-config\n  restartPolicy: Never\n```", "```\n$ kubectl create -f env-config.yaml\nconfigmap \"env-config\" created\n\n$ kubectl create -f some-pod.yaml\npod \"some-pod\" created\n```", "```\n$ kubectl logs -f some-pod\n\nEvery 2s: echo \"superhero: $SUPERHERO villain: $VILLAIN\"      2019-02-08 20:50:39\n\nsuperhero: Superman villain: Lex Luthor\n```", "```\n$ kubectl edit configmap env-config\n\n# Please edit the object below. Lines beginning with a '#' will be ignored,\n# and an empty file will abort the edit. If an error occurs while saving this file will be\n# reopened with the relevant failures.\n#\napiVersion: v1\ndata:\n SUPERHERO: Batman\n VILLAIN: Joker\nkind: ConfigMap\nmetadata:\n creationTimestamp: 2019-02-08T20:49:37Z\n name: env-config\n namespace: default\n resourceVersion: \"874765\"\n selfLink: /api/v1/namespaces/default/configmaps/env-config\n uid: 0c83dee5-2be3-11e9-9999-0800275914a6\n\nconfigmap \"env-config\" edited\n```", "```\n$ kubectl get configmap env-config -o yaml\n\napiVersion: v1\ndata:\n SUPERHERO: Batman\n VILLAIN: Joker\nkind: ConfigMap\nmetadata:\n creationTimestamp: 2019-02-08T20:49:37Z\n name: env-config\n namespace: default\n resourceVersion: \"875323\"\n selfLink: /api/v1/namespaces/default/configmaps/env-config\n uid: 0c83dee5-2be3-11e9-9999-0800275914a6\n```", "```\n$ kubectl logs -f some-pod\n\nEvery 2s: echo \"superhero: $SUPERHERO villain: $VILLAIN\"    2019-02-08 20:59:22\n\nsuperhero: Superman villain: Lex Luthor\n```", "```\n$ kubectl delete -f some-pod.yaml\npod \"some-pod\" deleted\n\n$ kubectl create -f some-pod.yaml\npod \"some-pod\" created\n\n$ kubectl logs -f some-pod\n\nEvery 2s: echo \"superhero: $SUPERHERO villain: $VILLAIN\" 2019-02-08 21:45:47\n\nsuperhero: Batman villain: Joker\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: some-other-pod\nspec:\n  containers:\n  - name: some-container\n    image: busybox\n    command: [ \"/bin/sh\", \"-c\", \"watch \\\"cat /etc/config/comics\\\"\" ]\n    volumeMounts:\n    - name: config-volume\n      mountPath: /etc/config\n  volumes:\n  - name: config-volume\n    configMap:\n      name: file-config\n  restartPolicy: Never\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: file-config\n  namespace: default\ndata:\n  comics: |+\n    superhero: Doctor Strange\n    villain: Thanos\n```", "```\n$ kubectl create -f file-config.yaml\nconfigmap \"file-config\" created\n\n$ kubectl create -f some-other-pod.yaml\npod \"some-other-pod\" created\n\n$ kubectl logs -f some-other-pod\n\nEvery 2s: cat /etc/config/comics      2019-02-08 22:15:08\n\nsuperhero: Doctor Strange\nvillain: Thanos\n```", "```\n$ kubectl apply -f file-config.yaml\nWarning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply\nconfigmap \"file-config\" configured\n\n$ kubectl get configmap file-config -o yaml\napiVersion: v1\ndata:\n comics: |+\n superhero: Super Woman\n villain: Medusa\n\nkind: ConfigMap\nmetadata:\n annotations:\n kubectl.kubernetes.io/last-applied-configuration: |\n {\"apiVersion\":\"v1\",\"data\":{\"comics\":\"superhero: Super Woman\\nvillain: Medusa\\n\\n\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"file-config\",\"namespace\":\"default\"}}\n creationTimestamp: 2019-02-08T22:14:01Z\n name: file-config\n namespace: default\n resourceVersion: \"881662\"\n selfLink: /api/v1/namespaces/default/configmaps/file-config\n uid: d6e892f4-2bee-11e9-9999-0800275914a6\n```", "```\n$ kubectl logs -f some-other-pod\n\nEvery 2s: cat /etc/config/comics     2019-02-08 23:02:58\n\nsuperhero: Super Woman\nvillain: Medusa\n```", "```\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  # name must match the spec fields below, and be in the form: <plural>.<group>\n  name: superheros.example.org\nspec:\n  # group name to use for REST API: /apis/<group>/<version>\n  group: example.org\n  # list of versions supported by this CustomResourceDefinition\n  versions:\n  - name: v1\n    # Each version can be enabled/disabled by Served flag.\n    served: true\n    # One and only one version must be marked as the storage version.\n    storage: true\n  # either Namespaced or Cluster\n  scope: Cluster\n  names:\n    # plural name to be used in the URL: /apis/<group>/<version>/<plural>\n    plural: superheros\n    # singular name to be used as an alias on the CLI and for display\n    singular: superhero\n    # kind is normally the CamelCased singular type. Your resource manifests use this.\n    kind: SuperHero\n    # shortNames allow shorter string to match your resource on the CLI\n    shortNames:\n    - hr\n```", "```\napiVersion: \"example.org/v1\"\nkind: SuperHero\nmetadata:\n  name: antman\nspec:\n  superpower: \"can shrink\"\n  size: \"tiny\"\n```", "```\napiVersion: \"example.org/v1\"\nkind: SuperHero\nmetadata:\n  name: hulk\nspec:\n  superpower: \"super strong\"\n  size: \"big\"\n  color: \"green\"\n```", "```\n$ kubectl create -f superheros-crd.yaml\ncustomresourcedefinition.apiextensions.k8s.io \"superheros.example.org\" created\n\n$ kubectl create -f antman.yaml\nsuperhero.example.org \"antman\" created\n\n$ kubectl create -f hulk.yaml\nsuperhero.example.org \"hulk\" created\n```", "```\n$ kubectl get hr\nNAME               AGE\nantman              5m\nhulk                5m\n```", "```\n$ kubectl get superhero hulk -o yaml\napiVersion: example.org/v1\nkind: SuperHero\nmetadata:\n creationTimestamp: 2019-02-09T09:58:32Z\n generation: 1\n name: hulk\n namespace: default\n resourceVersion: \"932374\"\n selfLink: /apis/example.org/v1/namespaces/default/superheros/hulk\n uid: 4256d27b-2c51-11e9-9999-0800275914a6\nspec:\n color: green\n size: big\n superpower: super strong\n```", "```\n$ kubectl get crd -n argocd\nNAME                         AGE\napplications.argoproj.io     20d\nappprojects.argoproj.io      20d\n```", "```\n$ kubectl get endpoints\nNAME                   ENDPOINTS             AGE\nkubernetes             192.168.99.122:8443   27d\nlink-db                172.17.0.13:5432      16d\nlink-manager           172.17.0.10:8080      16d\nsocial-graph-db        172.17.0.8:5432       26d\nsocial-graph-manager   172.17.0.7:9090       19d\nuser-db                172.17.0.12:5432      18d\nuser-manager           172.17.0.9:7070       18d\n```"]