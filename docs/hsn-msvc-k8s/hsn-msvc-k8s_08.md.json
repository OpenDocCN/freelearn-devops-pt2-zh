["```\n$ kubectl get storageclass\nNAME PROVISIONER AGE\nstandard (default) k8s.io/minikube-hostpath 65d\n```", "```\n$ kubectl get storageclass -o jsonpath='{.items[0].provisioner}'\nk8s.io/minikube-hostpath\n```", "```\n$ kubectl get po | grep trouble\ntrouble-6785b4949b-84x22     1/1 Running   1     2h\n```", "```\nget_pod_name_by_label ()\n {\n kubectl get po -l $1 -o custom-columns=NAME:.metadata.name | tail +2 | uniq\n }\n\nalias kpn='get_pod_name_by_label'\n```", "```\n$ get_pod_name_by_label run=trouble\ntrouble-6785b4949b-84x22\n```", "```\n$ alias trouble='kubectl exec -it $(get_pod_name_by_label run=trouble) bash'\n```", "```\n$ trouble\nroot@trouble-6785b4949b-84x22:/#\n```", "```\nroot@trouble-6785b4949b-84x22:/# echo \"life is short\" > life.txt\nroot@trouble-6785b4949b-84x22:/# cat life.txt\nlife is short\n```", "```\n$ kubectl delete pod $(get_pod_name_by_label run=trouble)\npod \"trouble-6785b4949b-84x22\" deleted\n\n$ get_pod_name_by_label run=trouble\ntrouble-6785b4949b-n6cmj\n```", "```\n$ trouble\nroot@trouble-6785b4949b-n6cmj:/# cat life.txt\ncat: life.txt: No such file or directory\n```", "```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: some-storage\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  volumeMode: Filesystem\n```", "```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: trouble\n  labels:\n    run: trouble\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      run: trouble\n  template:\n    metadata:\n      labels:\n        run: trouble\n    spec:\n      containers:\n      - name: trouble\n        image: g1g1/py-kube:0.2\n        imagePullPolicy: Always\n        command: [\"/bin/bash\", \"-c\", \"while true ; do sleep 10 ; done\"]\n        volumeMounts:\n        - name: keep-me\n          mountPath: \"/data\"\n      imagePullSecrets:\n      - name: private-dockerhub\n      volumes:\n      - name: keep-me\n        persistentVolumeClaim:\n          claimName: some-storage\n```", "```\nvolumes:\n- name: keep-me\n  persistentVolumeClaim:\n    claimName: some-storage\n```", "```\nvolumeMounts:\n- name: keep-me\n  mountPath: \"/data\"\n```", "```\n$ trouble\nroot@trouble-64554479d-tszlb:/# ls /data\nroot@trouble-64554479d-tszlb:/# cd /data/\nroot@trouble-64554479d-tszlb:/data# echo \"to infinity and be-yond!\" > infinity.txt\nroot@trouble-64554479d-tszlb:/data# cat infinity.txt\nto infinity and beyond!\n```", "```\n$ kubectl delete pod trouble-64554479d-tszlb\npod \"trouble-64554479d-tszlb\" deleted\n\n$ trouble\nroot@trouble-64554479d-mpl24:/# cat /data/infinity.txt\nto infinity and beyond!\n```", "```\nvolumes:\n  - name: test-volume\n    gcePersistentDisk:\n      pdName: my-data-disk\n      fsType: ext4\n```", "```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: user-db\nspec:\n  selector:\n    matchLabels:\n      svc: user\n      app: postgres\n  serviceName: user-db\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        svc: user\n        app: postgres\n    spec:\n      terminationGracePeriodSeconds: 10\n      containers:\n      - name: nginx\n        image: postgres:11.1-alpine\n        ports:\n        - containerPort: 5432\n        env:\n        - name: POSTGRES_DB\n          value: user_manager\n        - name: POSTGRES_USER\n          value: postgres\n        - name: POSTGRES_PASSWORD\n          value: postgres\n        - name: PGDATA\n          value: /data/user-db\n\n        volumeMounts:\n        - name: user-db\n          mountPath: /data/user-db\n  volumeClaimTemplates:\n  - metadata:\n      name: user-db\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      # storageClassName: <custom storage class>\n      resources:\n        requests:\n          storage: 1Gi\n```", "```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: user-db\nspec:\n  selector:\n    matchLabels:\n      svc: user\n      app: postgres\n  replicas: 1\n  serviceName: user-db\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: user-db\nspec:\n  ports:\n  - port: 5432\n  clusterIP: None\n  selector:\n    svc: user\n    app: postgres\n```", "```\ntemplate:\n  metadata:\n    labels:\n      svc: user\n      app: postgres\n  spec:\n    terminationGracePeriodSeconds: 10\n    containers:\n    - name: nginx\n      image: postgres:11.1-alpine\n      ports:\n      - containerPort: 5432\n      env:\n      - name: POSTGRES_DB\n        value: user_manager\n      - name: POSTGRES_USER\n        value: postgres\n      - name: POSTGRES_PASSWORD\n        value: postgres\n      - name: PGDATA\n        value: /data/user-db\n      volumeMounts:\n      - name: user-db\n        mountPath: /data/user-db\n```", "```\nvolumeClaimTemplates:\n- metadata:\n    name: user-db\n  spec:\n    accessModes: [ \"ReadWriteOnce\" ]\n    # storageClassName: <custom storage class>\n    resources:\n      requests:\n        storage: 1Gi\n```", "```\n<service name>.<namespace>.svc.cluster.local\n```", "```\n<statefulset name>-<ordinal>.<service name>.<namespace>.svc.cluster.local\n```", "```\nuser-db-0.user-db.default.svc.cluster.local\n```", "```\nstatefulset.kubernetes.io/pod-name=<pod-name>\n```", "```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: cassandra\n  labels:\n    app: cassandra\n spec:\n   serviceName: cassandra\n   replicas: 3\n   selector:\n     matchLabels:\n       app: cassandra \n```", "```\ntemplate:\n  metadata:\n    labels:\n      app: cassandra\n  spec:\n    terminationGracePeriodSeconds: 1800\n    containers:\n    - name: cassandra\n      image: gcr.io/google-samples/cassandra:v13\n      imagePullPolicy: Always\n      ...\n      volumeMounts:\n      - name: cassandra-data\n        mountPath: /cassandra_data\n```", "```\nvolumeClaimTemplates:\n- metadata:\n    name: cassandra-data\n  spec:\n    accessModes: [ \"ReadWriteOnce\" ]\n    storageClassName: fast\n    resources:\n      requests:\n        storage: 1Gi\n```", "```\nseed_provider:\n    - class_name: SEED_PROVIDER\n        parameters:\n        # seeds is actually a comma-delimited list of addresses.\n        # Ex: \"<ip1>,<ip2>,<ip3>\"\n        - seeds: \"10.0.0.1,10.0.0.2,10.0.0.3,\"\n```", "```\npackage io.k8s.cassandra;\n\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\n...\n\n /**\n * Create new seed provider\n *\n * @param params\n */\n public KubernetesSeedProvider(Map<String, String> params) {\n }\n\n...\n }\n }\n\nprivate static String getEnvOrDefault(String var, String def) {\n String val = System.getenv(var);\n...\n static class Endpoints {\n public List<InetAddress> ips;\n }\n }\n```", "```\n$ kubectl exec -it link-db-6b9b64db5-zp59g env | grep PGDATA\nPGDATA=/var/lib/postgresql/data\n```", "```\n$ kubectl exec -it link-db-6b9b64db5-zp59g ls /var/lib/postgresql/data\nPG_VERSION pg_multixact pg_tblspc\nbase pg_notify pg_twophase\nglobal pg_replslot pg_wal\npg_commit_ts pg_serial pg_xact\npg_dynshmem pg_snapshots post-gresql.auto.conf\npg_hba.conf pg_stat postgresql.conf\npg_ident.conf pg_stat_tmp postmaster.opts\npg_logical pg_subtrans postmaster.pid\n```", "```\n$ minikube ssh\n_ _\n_ _ ( ) ( )\n___ ___ (_) ___ (_)| |/') _ _ | |_ __\n/' _ ` _ `\\| |/' _ `\\| || , < ( ) ( )| '_`\\ /'__`\\\n| ( ) ( ) || || ( ) || || |\\`\\ | (_) || |_) )( ___/\n(_) (_) (_)(_)(_) (_)(_)(_) (_)`\\___/'(_,__/'`\\____)\n\n$ docker ps -f name=k8s_postgres_link-db -q\n409d4a52a7f5\n\n$ docker inspect -f \"{{json .Mounts}}\" 409d4a52a7f5 | jq .[1]\n{\n\"Type\": \"volume\",\n\"Name\": \"f9d090d6defba28f0c0bfac8ab7935d189332478d0bf03def6175f5c0a2e93d7\",\n \"Source\": \"/var/lib/docker/volumes/f9d090d6defba28f0c0bfac8ab7935d189332478d0bf03def6175f5c0a2e93d7/_data\",\n\"Destination\": \"/var/lib/postgresql/data\",\n\"Driver\": \"local\",\n\"Mode\": \"\",\n\"RW\": true,\n\"Propagation\": \"\"\n}\n```", "```\n$ kubectl get svc user-db\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE\nuser-db ClusterIP None <none> 5432/TCP 4d\n```", "```\n$ kubectl get endpoints user-db\nNAME ENDPOINTS AGE\nuser-db 172.17.0.25:5432 4d\n```", "```\nroot@trouble-64554479d-zclxc:/# dig +short us-er-db-0.user-db.default.svc.cluster.local\n172.17.0.25\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: user-manager-config\n  namespace: default\ndata:\n  USER_DB_SERVICE_HOST: \"us-er-db-0.user-db.default.svc.cluster.local\"\n  USER_DB_SERVICE_PORT: \"5432\"\n```", "```\nfunc GetDbEndpoint(dbName string) (host string, port int, err error) {\n hostEnvVar := strings.ToUpper(dbName) + \"_DB_SERVICE_HOST\"\n host = os.Getenv(hostEnvVar)\n if host == \"\" {\n host = \"localhost\"\n }\n\nportEnvVar := strings.ToUpper(dbName) + \"_DB_SERVICE_PORT\"\n dbPort := os.Getenv(portEnvVar)\n if dbPort == \"\" {\n dbPort = \"5432\"\n }\n\nport, err = strconv.Atoi(dbPort)\n return\n }\n```", "```\nfunc Run() {\n dbHost, dbPort, err := db_util.GetDbEndpoint(\"user\")\n if err != nil {\n log.Fatal(err)\n }\n\nstore, err := sgm.NewDbUserStore(dbHost, dbPort, \"postgres\", \"postgres\")\n if err != nil {\n log.Fatal(err)\n }\n ...\n }\n```", "```\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: news-manager-redis\nspec:\n  serviceName: news-manager-redis\n  replicas: 1\n  selector:\n    matchLabels:\n      app: redis\n      svc: news-manager\n  template:\n    metadata:\n      labels:\n        app: redis\n        svc: news-manager\n    spec:\n      containers:\n      - name: redis-primary\n        image: redis:5.0.3-alpine\n        imagePullPolicy: Always\n        ports:\n        - containerPort: 6379\n          name: redis\n        volumeMounts:\n        - name: news-manager-redis\n          mountPath: /data\n  volumeClaimTemplates:\n  - metadata:\n      name: news-manager-redis\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      resources:\n        requests:\n          storage: 1Gi\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: news-manager-redis\n  labels:\n    app: redis\n    svc: news-manager\nspec:\n  selector:\n    app: redis\n    svc: news-manager\n  type: None\n  ports:\n  - port: 6379\n    name: redis\n```", "```\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: news-manager-config\n  namespace: default\ndata:\n  PORT: \"6060\"\n  NEWS_MANAGER_REDIS_SERVICE_HOST: \"news-manager-redis-0.news-manager-redis.default.svc.cluster.local\"\n  USER_DB_SERVICE_PORT: \"6379\"\n```", "```\nredisHostname := os.Getenv(\"NEWS_MANAGER_REDIS_SERVICE_HOST\")\nredisPort := os.Getenv(\"NEWS_MANAGER_REDIS_SERVICE_PORT\")\n\nvar store nm.Store\nif redisHostname == \"\" {\nstore = nm.NewInMemoryNewsStore()\n} else {\naddress := fmt.Sprintf(\"%s:%s\", redisHostname, redisPort)\nstore, err = nm.NewRedisNewsStore(address)\nif err != nil {\nlog.Fatal(err)\n}\n}\n```", "```\npackage news_manager\n\nimport (\n \"github.com/go-redis/redis\"\n \"github.com/pelletier/go-toml\"\n om \"github.com/the-gigi/delinkcious/pkg/object_model\"\n )\n\n// RedisNewsStore manages a UserEvents data structure\n type RedisNewsStore struct {\n redis *redis.Client\n }\n\nfunc NewRedisNewsStore(address string) (store Store, err error) {\n client := redis.NewClient(&redis.Options{\n Addr: address,\n Password: \"\", // use empty password for simplicity. should come from a secret in production\n DB: 0, // use default DB\n })\n\n_, err = client.Ping().Result()\n if err != nil {\n return\n }\n\nstore = &RedisNewsStore{redis: client}\n return\n }\n```", "```\nfunc (m *RedisNewsStore) AddEvent(username string, event *om.Event) (err error) {\n t, err := toml.Marshal(*event)\n if err != nil {\n return\n }\nerr = m.redis.RPush(username, t).Err()\n return\n }\n```", "```\nconst redisMaxPageSize = 10\n\nfunc (m *RedisNewsStore) GetNews(username string, startIndex int) (events []*om.Event, nextIndex int, err error) {\n stop := startIndex + redisMaxPageSize - 1\n result, err := m.redis.LRange(username, int64(startIndex), int64(stop)).Result()\n if err != nil {\n return\n }\n\nfor _, t := range result {\n var event om.Event\n err = toml.Unmarshal([]byte(t), &event)\n if err != nil {\n return\n }\n\nevents = append(events, &event)\n }\n\nif len(result) == redisMaxPageSize {\n nextIndex = stop + 1\n } else {\n nextIndex = -1\n }\n\nreturn\n }\n```"]