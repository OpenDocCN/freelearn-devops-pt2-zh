["```\n$ tree -L 2\n.\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 build.sh\n\u251c\u2500\u2500 cmd\n\u2502   \u251c\u2500\u2500 link_service_e2e\n\u2502   \u251c\u2500\u2500 social_graph_service_e2e\n\u2502   \u2514\u2500\u2500 user_service_e2e\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 go.sum\n\u251c\u2500\u2500 pkg\n\u2502   \u251c\u2500\u2500 db_util\n\u2502   \u251c\u2500\u2500 link_manager\n\u2502   \u251c\u2500\u2500 link_manager_client\n\u2502   \u251c\u2500\u2500 object_model\n\u2502   \u251c\u2500\u2500 social_graph_client\n\u2502   \u251c\u2500\u2500 social_graph_manager\n\u2502   \u251c\u2500\u2500 user_client\n\u2502   \u2514\u2500\u2500 user_manager\n\u2514\u2500\u2500 svc\n \u251c\u2500\u2500 api_gateway_service\n \u251c\u2500\u2500 link_service\n \u251c\u2500\u2500 social_graph_service\n \u2514\u2500\u2500 user_service\n```", "```\nversion: 2\njobs:\n  build:\n    docker:\n    - image: circleci/golang:1.11\n    - image: circleci/postgres:9.6-alpine\n      environment: # environment variables for primary container\n        POSTGRES_USER: postgres\n    working_directory: /go/src/github.com/the-gigi/delinkcious\n    steps:\n    - checkout\n    - run:\n        name: Get all dependencies\n        command: |\n          go get -v ./...\n          go get -u github.com/onsi/ginkgo/ginkgo\n          go get -u github.com/onsi/gomega/...\n    - run:\n        name: Test everything\n        command: ginkgo -r -race -failFast -progress\n    - setup_remote_docker:\n        docker_layer_caching: true\n    - run:\n        name: build and push Docker images\n        shell: /bin/bash\n        command: |\n          chmod +x ./build.sh\n          ./build.sh\n```", "```\nversion: 2\njobs:\n build:\n docker:\n - image: circleci/golang:1.11\n - image: circleci/postgres:9.6-alpine\n      environment: # environment variables for primary container\n        POSTGRES_USER: postgres\n    working_directory: /go/src/github.com/the-gigi/delinkcious\n```", "```\nsteps:\n- checkout\n- run:\n    name: Get all dependencies\n    command: |\n      go get -v ./...\n      go get -u github.com/onsi/ginkgo/ginkgo\n      go get -u github.com/onsi/gomega/...\n```", "```\n- run:\n    name: Test everything\n    command: ginkgo -r -race -failFast -progress\n```", "```\n- setup_remote_docker:\n    docker_layer_caching: true\n- run:\n    name: build and push Docker images\n    shell: /bin/bash\n    command: |\n      chmod +x ./build.sh\n      ./build.sh\n```", "```\n#!/bin/bash\n\nset -eo pipefail\n```", "```\nIMAGE_PREFIX='g1g1'\nSTABLE_TAG='0.2'\n\nTAG=\"${STABLE_TAG}.${CIRCLE_BUILD_NUM}\"\nROOT_DIR=\"$(pwd)\"\nSVC_DIR=\"${ROOT_DIR}/svc\"\n```", "```\ncd $SVC_DIR\ndocker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_PASSWORD\n```", "```\ncd \"${SVC_DIR}/$svc\"\n    if [[ ! -f Dockerfile ]]; then\n        continue\n    fi\n    UNTAGGED_IMAGE=$(echo \"${IMAGE_PREFIX}/delinkcious-${svc}\" | sed -e 's/_/-/g' -e 's/-service//g')\n    STABLE_IMAGE=\"${UNTAGGED_IMAGE}:${STABLE_TAG}\"\n    IMAGE=\"${UNTAGGED_IMAGE}:${TAG}\"\n    docker build -t \"$IMAGE\" .\n    docker tag \"${IMAGE}\" \"${STABLE_IMAGE}\"\n    docker push \"${IMAGE}\"\n    docker push \"${STABLE_IMAGE}\"\ndone\ncd $ROOT_DIR\n```", "```\nFROM golang:1.11 AS builder\nADD ./main.go main.go\nADD ./service service\n# Fetch dependencies\nRUN go get -d -v\n\n# Build image as a truly static Go binary\nRUN CGO_ENABLED=0 GOOS=linux go build -o /link_service -a -tags netgo -ldflags '-s -w' .\n```", "```\nFROM scratch\nMAINTAINER Gigi Sayfan <the.gigi@gmail.com>\nCOPY --from=builder /link_service /app/link_service\nEXPOSE 7070\nENTRYPOINT [\"/app/link_service\"]\n```", "```\n]$ tree k8s\nk8s\n\u251c\u2500\u2500 db.yaml\n\u2514\u2500\u2500 link_manager.yaml\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: link-manager\n  labels:\n    svc: link\n    app: manager\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      svc: link\n      app: manager\n  template:\n    metadata:\n      labels:\n        svc: link\n        app: manager\n    spec:\n      containers:\n      - name: link-manager\n        image: g1g1/delinkcious-link:0.2\n        ports:\n        - containerPort: 8080\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: link-manager\nspec:\n  ports:\n  - port:  8080\n  selector:\n    svc: link\n    app: manager\n```", "```\n$ kubectl apply -f k8s\ndeployment.apps \"link-db\" created\nservice \"link-db\" created\ndeployment.apps \"link-manager\" created\nservice \"link-manager\" created\n```", "```\n$ kubectl create namespace argocd\n$ kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n```", "```\n$ kubectl get all -n argocd NAME                                        READY  STATUS RESTARTS  AGE\npod/argocd-application-controller-7c5cf86b76-2cp4z 1/1   Running  1  1m\npod/argocd-repo-server-74f4b4845-hxzw7             1/1   Running  0  1m\npod/argocd-server-9fc58bc5d-cjc95                  1/1   Running  0  1m\npod/dex-server-8fdd8bb69-7dlcj                     1/1   Running  0  1m\n```", "```\nNAME                                  TYPE        CLUSTER-IP       EXTERNAL-IP  PORT(S) \nservice/argocd-application-controller ClusterIP   10.106.22.145    <none>       8083/TCP \nservice/argocd-metrics                ClusterIP   10.104.1.83      <none>       8082/TCP \nservice/argocd-repo-server            ClusterIP   10.99.83.118     <none>       8081/TCP \nservice/argocd-server                 ClusterIP   10.103.35.4      <none>       80/TCP,443/TCP \nservice/dex-server                    ClusterIP   10.110.209.247   <none>       5556/TCP,5557/TCP \n```", "```\n\nNAME                                            DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/argocd-application-controller   1         1         1            1           1m\ndeployment.apps/argocd-repo-server              1         1         1            1           1m\ndeployment.apps/argocd-server                   1         1         1            1           1m\ndeployment.apps/dex-server                      1         1         1            1           1m\n\n```", "```\nNAME                                                       DESIRED   CURRENT   READY     AGE\nreplicaset.apps/argocd-application-controller-7c5cf86b76   1         1         1         1m\nreplicaset.apps/argocd-repo-server-74f4b4845               1         1         1         1m\nreplicaset.apps/argocd-server-9fc58bc5d                    1         1         1         1m\nreplicaset.apps/dex-server-8fdd8bb69                       1         1         1         1m\n```", "```\n$ kubectl get crd\nNAME                       AGE\napplications.argoproj.io   7d\nappprojects.argoproj.io    7d\n```", "```\n$ brew install argoproj/tap/argocd\n```", "```\n$ kubectl port-forward -n argocd svc/argocd-server 8080:443\n```", "```\n$ kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o name | cut -d'/' -f 2\n```", "```\n$ argocd login :8080\n```", "```\nWARNING: server certificate had error: tls: either ServerName or InsecureSkipVerify must be specified in the tls.Config. Proceed insecurely (y/n)?\n```", "```\nargocd login --insecure :8080\n```", "```\nargocd login --insecure --username admin --password $ARGOCD_PASSWORD :8080\n```", "```\n$ kubectl port-forward -n argocd svc/argocd-server 8080:443\n```", "```\nargocd app set <APPNAME> --sync-policy automated\n```", "```\nargocd app set <APPNAME> --auto-prune\n```", "```\n$ argocd app list\nNAME                  CLUSTER                         NAMESPACE  PROJECT  STATUS     HEALTH   SYNCPOLICY  CONDITIONS\nlink-manager          https://kubernetes.default.svc  default    default  OutOfSync  Healthy  Auto-Prune  <none>\nsocial-graph-manager  https://kubernetes.default.svc  default    default  Synced     Healthy  Auto-Prune  <none>\nuser-manager          https://kubernetes.default.svc  default    default  Synced     Healthy  Auto-Prune  <none>\n```", "```\n$ argocd app sync link-manager\n```"]