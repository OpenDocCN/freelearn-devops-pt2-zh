["```\n$ kubectl get po -l svc=social-graph,app=manager\nNAME READY STATUS RESTARTS AGE\nsocial-graph-manager-7d84ffc5f7-bst7w 1/1 Running 53 20d\n\n $ kubectl get po social-graph-manager-7d84ffc5f7-bst7w -o jsonpath=\"{.metadata.ownerReferences[0]['name']}\"\n social-graph-manager-7d84ffc5f7\n\n $ kubectl get po social-graph-manager-7d84ffc5f7-bst7w -o jsonpath=\"{.metadata.ownerReferences[0]['kind']}\"\n ReplicaSet\n```", "```\n$ kubectl get rs social-graph-manager-7d84ffc5f7 -o jsonpath=\"{.metadata.ownerReferences[0]['name']}\"\n graph-manager\n\n $ kubectl get rs social-graph-manager-7d84ffc5f7 -o jsonpath=\"{.metadata.ownerReferences[0]['kind']}\"\n Deployment\n```", "```\n$ kubectl create ns staging\nnamespace/staging created\n```", "```\nkubectl port-forward -n argocd svc/argocd-server 8080:443\n```", "```\nimport os\n import subprocess\n\ndef run(cmd):\n     cmd = ('argocd ' + cmd).split()\n     output = subprocess.check_output(cmd)\n     return output.decode('utf-8')\n```", "```\ndef login():\n     host = 'localhost:8080'\n     password = os.environ['ARGOCD_PASSWORD']\n     cmd = f'login {host} --insecure --username admin --password {password}'\n     output = run(cmd)\n     print(output)\n```", "```\ndef get_apps(namespace):\n     \"\"\" \"\"\"\n     output = run(f'app list -o wide')\n     keys = 'name project namespace path repo'.split()\n     apps = []\n     lines = output.split('\\n')\n     headers = [h.lower() for h in lines[0].split()]\n     for line in lines[1:]:\n         items = line.split()\n         app = {k: v for k, v in zip(headers, items) if k in keys}\n         if app:\n             apps.append(app)\n     return apps\n```", "```\ndef create_project(project, cluster, namespace, description, repo):\n     \"\"\" \"\"\"\n     cmd = f'proj create {project} --description {description} -d {cluster},{namespace} -s {repo}'\n     output = run(cmd)\n     print(output)\n\n     # Add access to resources\n     cmd = f'proj allow-cluster-resource {project} \"*\" \"*\"'\n     output = run(cmd)\n     print(output)\n```", "```\ndef create_app(name, project, namespace, repo, path):\n     \"\"\" \"\"\"\n     cmd = f\"\"\"app create {name}-staging --project {project} --dest-server https://kubernetes.default.svc\n               --dest-namespace {namespace} --repo {repo} --path {path}\"\"\"\n     output = run(cmd)\n     print(output)\n```", "```\ndef copy_apps_from_default_to_staging():\n     apps = get_apps('default')\n\n     for a in apps:\n         create_app(a['name'], 'staging', 'staging', a['repo'], a['path'])\n```", "```\ndef main():\n     login()\n     copy_apps_from_default_to_staging()\n\n     apps = get_apps('staging')\n     for a in apps:\n         print(a)\n\n if __name__ == '__main__':\n     main()\n```", "```\n$ kubectl edit deployment user-manager\n deployment.extensions/user-manager edited\n\n $ kubectl get deployment user-manager -o yaml | grep strategy -A 1\n strategy:\n type: Recreate\n```", "```\n$ kubectl get deployment social-graph-manager -o yaml | grep strategy -A 4\n strategy:\n rollingUpdate:\n maxSurge: 25%\n maxUnavailable: 25%\n type: RollingUpdate\n```", "```\n$ kubectl edit deployment link-manager \ndeployment.extensions/link-manager edited\n```", "```\n$ kubectl get po -l svc=link,app=manager\n -o custom columns=\"NAME:.metadata.name,DEPLOYMENT:.metadata.labels.deployment,IP:.status.podIP\" \nNAME                           DEPLOYMENT IP \nlink-manager-65d4998d47-chxpj  blue       172.17.0.37 \nlink-manager-65d4998d47-jwt7x  blue       172.17.0.36 \nlink-manager-65d4998d47-rlfhb  blue       172.17.0.35\n```", "```\n$ kubectl get ep link-manager\n NAME ENDPOINTS AGE\n link-manager 172.17.0.35:8080,172.17.0.36:8080,172.17.0.37:8080 21d\n```", "```\n$ kubectl get svc link-manager -o custom-columns=SELECTOR:.spec.selector\nSELECTOR \nmap[app:manager svc:link]\n```", "```\nselector: app: manager svc: link deployment: blue\n```", "```\n$ kubectl get svc link-manager -o custom-columns=SELECTOR:.spec.selector \nSELECTOR \nmap[app:manager deployment:blue svc:link]\n```", "```\nfunc newLink(source om.Link) link { \nreturn link{ \nUrl: source.Url, \nTitle: source.Title, \nDescription: \"[green] \" + source.Description, \nStatus: source.Status, \nTags: source.Tags, \nCreatedAt: source.CreatedAt.Format(time.RFC3339), \nUpdatedAt: source.UpdatedAt.Format(time.RFC3339), } }\n```", "```\n#!/bin/bash\nset -eo pipefail\nIMAGE_PREFIX='g1g1' STABLE_TAG='0.4'\nTAG=\"{CIRCLE_BUILD_NUM}\" ...\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n name: green-link-manager\n labels:\n svc: link\n app: manager\n deployment: green\nspec:\n replicas: 3\n selector:\n matchLabels:\n svc: link\n app: manager\n deployment: green\n template:\n metadata:\n labels:\n svc: link\n app: manager\n deployment: green\n spec:\n serviceAccount: link-manager\n containers:\n - name: link-manager\n image: g1g1/delinkcious-link:0.4\n imagePullPolicy: Always\n ports:\n - containerPort: 8080\n envFrom:\n - configMapRef:\n name: link-manager-config\n volumeMounts:\n - name: mutual-auth\n mountPath: /etc/delinkcious\n readOnly: true\n volumes:\n - name: mutual-auth\n secret:\n secretName: link-mutual-auth\n```", "```\n$ kubectl apply -f green_link_manager.yaml\ndeployment.apps/green-link-manager created\n```", "```\n$ kubectl get po -l svc=link,app=manager -o custom-columns=\"NAME:.metadata.name,DEPLOYMENT:.metadata.labels.deployment\"\nNAME                                  DEPLOYMENT\ngreen-link-manager-5874c6cd4f-2ldfn   green\ngreen-link-manager-5874c6cd4f-mvm5v   green\ngreen-link-manager-5874c6cd4f-vcj9s   green\nlink-manager-65d4998d47-chxpj         blue\nlink-manager-65d4998d47-jwt7x         blue\nlink-manager-65d4998d47-rlfhb         blue\n```", "```\n$ http \"${DELINKCIOUS_URL}/v1.0/links\" \"Access-Token: ${DELINKCIOUS_TOKEN}\"'\nHTTP/1.0 200 OK\nContent-Length: 214\nContent-Type: application/json\nDate: Tue, 30 Apr 2019 06:02:03 GMT\nServer: Werkzeug/0.14.1 Python/3.7.2\n\n{\n \"err\": \"\",\n \"links\": [\n {\n \"CreatedAt\": \"2019-04-30T06:01:47Z\",\n \"Description\": \"nothing to see here...\",\n \"Status\": \"invalid\",\n \"Tags\": null,\n \"Title\": \"gg\",\n \"UpdatedAt\": \"2019-04-30T06:01:47Z\",\n \"Url\": \"http://gg.com\"\n }\n ]\n}\n```", "```\n spec:\n   selector:\n     deployment: green\n```", "```\n$ kubectl patch service/link-manager --patch \"$(cat green-patch.yaml)\"\n service/link-manager patched \n```", "```\n$ kubectl get svc link-manager -o jsonpath=\"{.spec.selector.deployment}\"\n **green** \n```", "```\n$ http \"${DELINKCIOUS_URL}/v1.0/links\" \"Access-Token: ${DELINKCIOUS_TOKEN}\"'\n\n HTTP/1.0 200 OK\n Content-Length: 221\n Content-Type: application/json\n Date: Tue, 30 Apr 2019 06:19:43 GMT\n Server: Werkzeug/0.14.1 Python/3.7.2\n\n {\n \"err\": \"\",\n \"links\": [\n {\n \"CreatedAt\": \"2019-04-30T06:01:47Z\",\n \"Description\": \"[green] nothing to see here...\",\n \"Status\": \"invalid\",\n \"Tags\": null,\n \"Title\": \"gg\",\n \"UpdatedAt\": \"2019-04-30T06:01:47Z\",\n \"Url\": \"http://gg.com\"\n }\n ]\n }\n```", "```\n$ kubectl delete deployment link-manager\n deployment.extensions \"link-manager\" deleted\n\n $ kubectl get po -l svc=link,app=manager\n NAME                                  READY   STATUS    RESTARTS   AGE\n green-link-manager-5874c6cd4f-2ldfn   1/1     Running   5          1h\n green-link-manager-5874c6cd4f-mvm5v   1/1     Running   5          1h\n green-link-manager-5874c6cd4f-vcj9s   1/1     Running   5          1h\n```", "```\nfunc newLink(source om.Link) link {\n     return link{\n         Url:         source.Url,\n         Title:       source.Title,\n         Description: \"[green] \" + source.Description,\n         Status:      source.Status,\n         Tags:        source.Tags,\n         CreatedAt:   source.CreatedAt.Format(time.RFC3339),\n         UpdatedAt:   source.UpdatedAt.Format(time.RFC3339),\n     }\n }\n```", "```\n#!/bin/bash\n\n set -eo pipefail\n\n IMAGE_PREFIX='g1g1'\n STABLE_TAG='0.4'\n\n TAG=\"${STABLE_TAG}.${CIRCLE_BUILD_NUM}\" ...\n```", "```\n--- apiVersion: apps/v1\n kind: Deployment\n metadata:\n   name: yellow-link-manager\n   labels:\n     svc: link\n     app: manager\n     deployment: yellow\n spec:\n   replicas: 1\n   selector:\n     matchLabels:\n       svc: link\n       app: manager\n       deployment: yellow\n   template:\n     metadata:\n       labels:\n         svc: link\n         app: manager\n         deployment: yellow\n     spec:\n       serviceAccount: link-manager\n       containers:\n       - name: link-manager\n         image: g1g1/delinkcious-link:0.5\n         imagePullPolicy: Always\n         ports:\n         - containerPort: 8080\n         envFrom:\n         - configMapRef:\n             name: link-manager-config\n         volumeMounts:\n         - name: mutual-auth\n           mountPath: /etc/delinkcious\n           readOnly: true\n       volumes:\n       - name: mutual-auth\n         secret:\n           secretName: link-mutual-auth\n```", "```\n$ kubectl apply -f yellow_link_manager.yaml\n deployment.apps/yellow-link-manager created \n```", "```\n$ kubectl scale --replicas=9 deployment/green-link-manager\n deployment.extensions/green-link-manager scaled\n\n $ kubectl get po -l svc=link,app=manager\n NAME                                  READY   STATUS    RESTARTS   AGE\n green-link-manager-5874c6cd4f-2ldfn    1/1    Running   10         15h\n green-link-manager-5874c6cd4f-9csxz    1/1    Running   0          52s\n green-link-manager-5874c6cd4f-c5rqn    1/1    Running   0          52s\n green-link-manager-5874c6cd4f-mvm5v    1/1    Running   10         15h\n green-link-manager-5874c6cd4f-qn4zj    1/1    Running   0          52s\n green-link-manager-5874c6cd4f-r2jxf    1/1    Running   0          52s\n green-link-manager-5874c6cd4f-rtwsj    1/1    Running   0          52s\n green-link-manager-5874c6cd4f-sw27r    1/1    Running   0          52s\n green-link-manager-5874c6cd4f-vcj9s    1/1    Running   10         15h\n yellow-link-manager-67847d6b85-n97b5   1/1    Running   4        6m20s\n```", "```\n$ kubectl get svc link-manager -o custom-columns=NAME:.metadata.name,SELECTOR:.spec.selector\n NAME           SELECTOR\n link-manager   map[app:manager deployment:green svc:link]\n\n $ kubectl patch svc link-manager --type=json -p='[{\"op\": \"remove\", \"path\": \"/spec/selector/deployment\"}]'\n service/link-manager patched\n\n $ kubectl get svc link-manager -o custom-columns=NAME:.metadata.name,SELECTOR:.spec.selector\n NAME           SELECTOR\n link-manager   map[app:manager svc:link]\n```", "```\n$ for i in {1..30}\n > do\n >   http \"${DELINKCIOUS_URL}/v1.0/links\" \"Access-Token: ${DELINKCIOUS_TOKEN}\" | jq .links[0].Description\n > done\n\n \"[green] nothing to see here...\"\n \"[yellow] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[yellow] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[yellow] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[yellow] nothing to see here...\"\n \"[yellow] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[yellow] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n \"[green] nothing to see here...\"\n```", "```\n$ kubectl get po -l svc=user,app=manager -o jsonpath=\"{.items[0].spec.containers[0].image}\"\n g1g1/delinkcious-user:0.5\n\n $ kubectl rollout history deployment user-manager\n deployment.extensions/user-manager\n REVISION  CHANGE-CAUSE\n 1         <none>\n 2         <none>\n```", "```\n$ kubectl edit deployment user-manager --record=true\n deployment.extensions/user-manager edited\n\n $ kubectl rollout history deployment user-manager\n deployment.extensions/user-manager\n REVISION  CHANGE-CAUSE\n 1         <none>\n 2         <none>\n 3         kubectl edit deployment user-manager --record=true\n```", "```\n$ kubectl rollout history deployment user-manager --revision=1\n deployment.extensions/user-manager with revision #1\n Pod Template:\n Labels:    app=manager\n pod-template-hash=6fb9878576\n svc=user\n Containers:\n user-manager:\n Image:    g1g1/delinkcious-user:0.3\n Port:    7070/TCP\n Host Port:    0/TCP\n Limits:\n cpu:    250m\n memory:    64Mi\n Requests:\n cpu:    250m\n memory:    64Mi\n Environment Variables from:\n user-manager-config    ConfigMap    Optional: false\n Environment:    <none>\n Mounts:    <none>\n Volumes:    <none>\n```", "```\n$ kubectl rollout undo deployment user-manager --to-revision=1\n deployment.extensions/user-manager rolled back\n\n $ kubectl get deployment user-manager -o jsonpath=\"{.spec.template.spec.containers[0].image}\"\n g1g1/delinkcious-user:0.3\n```", "```\n api = Api(app)\n     resource_map = (\n         (Link, '/v1.0/links'),\n         (Followers, '/v1.0/followers'),\n         (Following, '/v1.0/following'),\n     )\n```", "```\n     api = Api(app)\n     resource_map = (\n         (Link, '/v1/links'),\n         (Followers, '/v1/followers'),\n         (Following, '/v1/following'),\n     )\n```", "```\n     r := mux.NewRouter()\n     r.Methods(\"POST\").Path(\"/follow\").Handler(followHandler)\n     r.Methods(\"POST\").Path(\"/unfollow\").Handler(unfollowHandler)\n     r.Methods(\"GET\").Path(\"/following/{username}\").Handler(getFollowingHandler)\n     r.Methods(\"GET\").Path(\"/followers/{username}\").Handler(getFollowersHandler)\n```", "```\ngo get github.com/google/ko/cmd/ko\n```", "```\n $ export GOPATH=~/go\n $ mkdir -p ~/go/src/github.com/the-gigi\n $ cd ~/go/src/github.com/the-gigi\n $ ln -s ~/git/delinkcious delinkcious\n $ cd delinkcious\n $ go get -d ./...\n```", "```\nexport KO_DOCKER_REPO=ko.local\n```", "```\n---\n apiVersion: apps/v1\n kind: Deployment\n metadata:\n   name: ko-link-manager\n   labels:\n     svc: link\n     app: manager\n spec:\n   replicas: 1\n   selector:\n     matchLabels:\n       svc: link\n       app: manager\n   template:\n     metadata:\n       labels:\n         svc: link\n         app: manager\n     spec:\n       serviceAccount: link-manager\n       containers:\n       - name: link-manager\n         image: \"github.com/the-gigi/delinkcious/svc/link_service\"\n         imagePullPolicy: IfNotPresent\n         ports:\n         - containerPort: 8080\n         envFrom:\n         - configMapRef:\n             name: link-manager-config\n         volumeMounts:\n         - name: mutual-auth\n           mountPath: /etc/delinkcious\n           readOnly: true\n       volumes:\n       - name: mutual-auth\n         secret:\n           secretName: link-mutual-auth\n```", "```\n$ ko apply -f ko_link_manager.yaml\n 2019/05/01 14:29:31 Building github.com/the-gigi/delinkcious/svc/link_service\n 2019/05/01 14:29:34 Using base gcr.io/distroless/static:latest for github.com/the-gigi/delinkcious/svc/link_service\n 2019/05/01 14:29:34 No matching credentials were found, falling back on anonymous\n 2019/05/01 14:29:36 Loading ko.local/link_service-1819ff5de960487aed3f9074cd43cc03:1c862ed08cf571c6a82a3e4a1eb2d79dbe122fc4901e73f88b51f0731d4cd565\n 2019/05/01 14:29:38 Loaded ko.local/link_service-1819ff5de960487aed3f9074cd43cc03:1c862ed08cf571c6a82a3e4a1eb2d79dbe122fc4901e73f88b51f0731d4cd565\n 2019/05/01 14:29:38 Adding tag latest\n 2019/05/01 14:29:38 Added tag latest\n deployment.apps/ko-link-manager configured\n```", "```\n $ go run smoke.go\n 2019/05/01 14:35:59 ======= Links =======\n 2019/05/01 14:35:59 ===== Add Link ======\n 2019/05/01 14:35:59 Adding new link - title: 'Gigi on Github', url: 'https://github.com/the-gigi'\n 2019/05/01 14:36:00 ======= Links =======\n 2019/05/01 14:36:00 title: 'Gigi on Github', url: 'https://github.com/the-gigi', status: 'pending', description: '[yellow] '\n 2019/05/01 14:36:04 ======= Links =======\n 2019/05/01 14:36:04 title: 'Gigi on Github', url: 'https://github.com/the-gigi', status: 'valid', description: '[yellow] '\n```", "```\nfunc newLink(source om.Link) link {\n     return link{\n         Url:         source.Url,\n         Title:       source.Title,\n         Description: \"[ko] \" + source.Description,\n         Status:      source.Status,\n         Tags:        source.Tags,\n         CreatedAt:   source.CreatedAt.Format(time.RFC3339),\n         UpdatedAt:   source.UpdatedAt.Format(time.RFC3339),\n     }\n }\n```", "```\n$ ko apply -f ko_link_manager.yaml\n 2019/05/01 14:39:37 Building github.com/the-gigi/delinkcious/svc/link_service\n 2019/05/01 14:39:52 Using base gcr.io/distroless/static:latest for github.com/the-gigi/delinkcious/svc/link_service\n 2019/05/01 14:39:52 No matching credentials were found, falling back on anonymous\n 2019/05/01 14:39:54 Loading ko.local/link_service-1819ff5de960487aed3f9074cd43cc03:1af7800585ca70a390da7e68e6eef506513e0f5d08cabc05a51c453e366ededf\n 2019/05/01 14:39:56 Loaded ko.local/link_service-1819ff5de960487aed3f9074cd43cc03:1af7800585ca70a390da7e68e6eef506513e0f5d08cabc05a51c453e366ededf\n 2019/05/01 14:39:56 Adding tag latest\n 2019/05/01 14:39:56 Added tag latest\n deployment.apps/ko-link-manager configured\n```", "```\n$ go run smoke.go\n 2019/05/01 22:12:10 ======= Links =======\n 2019/05/01 22:12:10 ===== Add Link ======\n 2019/05/01 22:12:10 Adding new link - title: 'Gigi on Github', url: 'https://github.com/the-gigi'\n 2019/05/01 22:12:10 ======= Links =======\n 2019/05/01 22:12:10 title: 'Gigi on Github', url: 'https://github.com/the-gigi', status: 'pending', description: '[ko] '\n 2019/05/01 22:12:14 ======= Links =======\n 2019/05/01 22:12:14 title: 'Gigi on Github', url: 'https://github.com/the-gigi', status: 'valid', description: '[ko] '\n```", "```\n$ mk ssh\n _             _\n _         _ ( )           ( )\n ___ ___  (_)  ___  (_)| |/')  _   _ | |_      __\n /' _ ` _ `\\| |/' _ `\\| || , <  ( ) ( )| '_`\\  /'__`\\\n | ( ) ( ) || || ( ) || || |\\`\\ | (_) || |_) )(  ___/\n (_) (_) (_)(_)(_) (_)(_)(_) (_)`\\___/'(_,__/'`\\____)\n\n $ docker images | grep ko\n ko.local/link_service-1819ff5de960487aed3f9074cd43cc03           1af7800585ca70a390da7e68e6eef506513e0f5d08cabc05a51c453e366ededf   9188384722a5        49 years ago        14.1MB\n ko.local/link_service-1819ff5de960487aed3f9074cd43cc03           latest                                                             9188384722a5        49 years ago        14.1MB\n```", "```\ncurl https://vapor-ware.github.io/gimme-that/gimme.sh | bash\n```", "```\ngo get github.com/vapor-ware/ksync/cmd/ksync\n```", "```\nksync init\n```", "```\nksync watch\n```", "```\ncd svc/api_gateway_service ksync create --selector=svc=api-gateway $PWD /api_gateway_service\n```", "```\ndef get(self):\n     \"\"\"Get all links\n     \"\"\"\n     username, email = _get_user()\n     parser = RequestParser()\n     parser.add_argument('url_regex', type=str, required=False)\n     parser.add_argument('title_regex', type=str, required=False)\n     parser.add_argument('description_regex', type=str, required=False)\n     parser.add_argument('tag', type=str, required=False)\n     parser.add_argument('start_token', type=str, required=False)\n     args = parser.parse_args()\n     args.update(username=username)\n     r = requests.get(self.base_url, params=args)\n\n     if not r.ok:\n         abort(r.status_code, message=r.content)\n\n     result = r.json()\n     result.update(ksync='Yeah, it works!')\n     return result\n```", "```\n$ http \"${DELINKCIOUS_URL}/v1/links\" \"Access-Token: ${DELINKCIOUS_TOKEN}\"'\nHTTP/1.0 200 OK Content-Length: 249 Content-Type: application/json Date: Thu, 02 May 2019 17:17:07 GMT Server: Werkzeug/0.14.1 Python/3.7.2\n{ \"err\": \"\", \"ksync\": \"Yeah, it works!\", \"links\": [ { \"CreatedAt\": \"2019-05-02T05:12:10Z\", \"Description\": \"[ko] \", \"Status\": \"valid\", \"Tags\": null, \"Title\": \"Gigi on Github\", \"UpdatedAt\": \"2019-05-02T05:12:10Z\", \"Url\": \"https://github.com/the-gigi\" } ] }\n```", "```\nbrew install azure/draft/draft\n```", "```\n$ draft init\n$ draft init Installing default plugins... Installation of default plugins complete Installing default pack repositories... Installation of default pack repositories complete $DRAFT_HOME has been configured at /Users/gigi.sayfan/.draft. Happy Sailing!\n$ eval $(minikube docker-env)\n```", "```\nfunc newLink(source om.Link) link { return link{ Url: source.Url, Title: source.Title, Description: \"[draft]\" + source.Description, Status: source.Status, Tags: source.Tags, CreatedAt: source.CreatedAt.Format(time.RFC3339), UpdatedAt: source.UpdatedAt.Format(time.RFC3339), } }\n```", "```\n$ draft create --app draft-link-manager --> Draft detected Go (67.381270%) --> Ready to sail\n```", "```\n$ draft up\nDraft Up Started: 'draft-link-manager': 01D9XZD650WS93T46YE4QJ3V70 draft-link-manager: Building Docker Image: SUCCESS (9.0060s) draft-link-manager: Pushing Docker Image\n```", "```\n$ brew install skaffold\n```", "```\n$ skaffold init ? Choose the dockerfile to build image postgres:11.1-alpine None (image not built from these sources) ? Choose the dockerfile to build image g1g1/delinkcious-link:0.6 Dockerfile WARN[0014] unused dockerfiles found in repository: [Dockerfile.dev] apiVersion: skaffold/v1beta9 kind: Config build: artifacts: - image: g1g1/delinkcious-link:0.6 deploy: kubectl: manifests: - k8s/configmap.yaml - k8s/db.yaml - k8s/link_manager.yaml - k8s/secrets.yaml\nDo you want to write this configuration to skaffold.yaml? [y/n]: y Configuration skaffold.yaml was written You can now run [skaffold build] to build the artifacts or [skaffold run] to build and deploy or [skaffold dev] to enter development mode, with auto-redeploy.\n```", "```\n$ skaffold build Generating tags... - g1g1/delinkcious-link:0.6 -> g1g1/delinkcious-link:0.6:v0.6-79-g6b178c6-dirty Tags generated in 2.005247255s Starting build... Found [minikube] context, using local docker daemon. Building [g1g1/delinkcious-link:0.6]... Sending build context to Docker daemon 10.75kB Complete in 4.717424985s FATA[0004] build failed: building [g1g1/delinkcious-link:0.6]: build artifact: docker build: Error response from daemon: invalid reference format\n```", "```\nhttps://github.com/GoogleContainerTools/skaffold/issues/1749 \n```", "```\nbrew tap windmilleng/tap brew install windmilleng/tap/tilt\n```", "```\n# Get all the YAML files\nscript = \"\"\"python -c 'from glob import glob; print(\",\".join(glob(\"k8s/*.yaml\")))'\"\"\" yaml_files = str(local(script))[:-1] yaml_files = yaml_files.split(',') for f in yaml_files: k8s_yaml(f)\n\n# Get the service name\nscript = \"\"\"import os; print('-'.join(os.getcwd().split(\"/\")[-1].split(\"_\")[:-1])\"\"\" name = str(local(script))[:-1]\ndocker_build('g1g1/delinkcious-' + name, '.', dockerfile='Dockerfile.dev')\n```", "```\nPython 3.7.3 (default, Mar 27 2019, 09:23:15) [Clang 10.0.1 (clang-1001.0.46.3)] on darwin Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> from glob import glob >>> glob(\"k8s/*.yaml\") ['k8s/db.yaml', 'k8s/secrets.yaml', 'k8s/link_manager.yaml', 'k8s/configmap.yaml']\n```", "```\nscript = \"\"\"python -c 'from glob import glob; print(\",\".join(glob(\"k8s/*.yaml\")))'\"\"\" yaml_files = str(local(script))[:-1]\n```", "```\nyaml_files = yaml_files.split(',')\n```", "```\nfor f in yaml_files: k8s_yaml(f)\n```", "```\nscript = \"\"\"import os; print('-'.join(os.getcwd().split(\"/\")[-1].split(\"_\")[:-1]),\"\"\" name = str(local(script))[:-1]\n```", "```\ndocker_build('g1g1/delinkcious-' + name, '.', dockerfile='Dockerfile.dev')\n```", "```\nk8s_yam('k8s/db.yaml') k8s_yam('k8s/secrets.yaml') k8s_yam('k8s/link_manager.yaml') k8s_yam(''k8s/configmap.yaml'')\ndocker_build('g1g1/delinkcious-link, '.', dockerfile='Dockerfile.dev')\n```", "```\n$ kubectl get po link-manager-654959fd78-9rnnh -o jsonpath=\"{.spec.containers[0].image}\"\ndocker.io/g1g1/delinkcious-link:tilt-2b1afed5db0064f2\n```", "```\nfunc newLink(source om.Link) link { return link{ Url: source.Url, Title: source.Title, Description: \"[tilt] \" + source.Description, Status: source.Status, Tags: source.Tags, CreatedAt: source.CreatedAt.Format(time.RFC3339), UpdatedAt: source.UpdatedAt.Format(time.RFC3339), } }\n```", "```\n$ http \"${DELINKCIOUS_URL}/v1/links\" \"Access-Token: ${DELINKCIOUS_TOKEN}\" HTTP/1.0 200 OK Content-Length: 221 Content-Type: application/json Date: Sat, 04 May 2019 07:38:32 GMT Server: Werkzeug/0.14.1 Python/3.7.2\n{ \"err\": \"\", \"links\": [ { \"CreatedAt\": \"2019-05-04T07:38:28Z\", \"Description\": \"[tilt] nothing to see here...\", \"Status\": \"pending\", \"Tags\": null, \"Title\": \"gg\", \"UpdatedAt\": \"2019-05-04T07:38:28Z\", \"Url\": \"http://gg.com\" } ] }\n```", "```\nFROM g1g1/delinkcious-python-flask-grpc:0.1 MAINTAINER Gigi Sayfan \"the.gigi@gmail.com\" COPY . /api_gateway_service WORKDIR /api_gateway_service EXPOSE 5000 ENTRYPOINT FLASK_DEBUG=1 python run.py\n```", "```\n# Get all the YAML files\nyaml_files = str(local(\"\"\"python -c 'from glob import glob; print(\",\".join(glob(\"k8s/*.yaml\")))'\"\"\"))[:-1] yaml_files = yaml_files.split(',') for f in yaml_files: k8s_yaml(f)\n```", "```\n# Get the service name\nscript = \"\"\"python -c 'import os; print(\"-\".join(os.getcwd().split(\"/\")[-1].split(\"_\")[:-1]))'\"\"\" name = str(local(script))[:-1]\ndocker_build('g1g1/delinkcious-' + name, '.', live_update=[ # when requirements.txt changes, we need to do a full build fall_back_on('requirements.txt'), # Map the local source code into the container under /api_gateway_service sync('.', '/api_gateway_service'), ])\n```", "```\n$ http \"${DELINKCIOUS_URL}/v1/links\" \"Access-Token: ${DELINKCIOUS_TOKEN}\"\nHTTP/1.0 200 OK \nContent-Length: 221 \nContent-Type: application/json \nDate: Sat, 04 May 2019 20:39:42 GMT \nServer: Werkzeug/0.14.1 Python/3.7.2\n{ \n\"err\": \"\", \n\"links\": [ { \n\"CreatedAt\": \"2019-05-04T07:38:28Z\", \n\"Description\": \"[tilt] nothing to see here...\", \n\"Status\": \"pending\", \n\"Tags\": null, \n\"Title\": \"gg\", \n\"UpdatedAt\": \"2019-05-04T07:38:28Z\", \n\"Url\": \"http://gg.com\" \n} ] \n}\n```", "```\nclass Link(Resource): host = os.environ.get('LINK_MANAGER_SERVICE_HOST', 'localhost') port = os.environ.get('LINK_MANAGER_SERVICE_PORT', '8080') base_url = 'http://{}:{}/links'.format(host, port)\ndef get(self):\n     \"\"\"Get all links\n     \"\"\"\n     username, email = _get_user()\n     parser = RequestParser()\n     parser.add_argument('url_regex', type=str, required=False)\n     parser.add_argument('title_regex', type=str, required=False)\n     parser.add_argument('description_regex', type=str, required=False)\n     parser.add_argument('tag', type=str, required=False)\n     parser.add_argument('start_token', type=str, required=False)\n     args = parser.parse_args()\n     args.update(username=username)\n     r = requests.get(self.base_url, params=args)\n\n     if not r.ok:\n         abort(r.status_code, message=r.content)\n     r['tilt'] = 'Yeah, sync works!!!'\n     return r.json()\n```", "```\n$ http \"${DELINKCIOUS_URL}/v1/links\" \"Access-Token:\n${DELINKCIOUS_TOKEN}\"\n\nHTTP/1.0 200 OK \nContent-Length: 374 \nContent-Type: application/json \nDate: Sat, 04 May 2019 21:06:13 GMT \nServer: Werkzeug/0.14.1 Python/3.7.2\n{\n \"err\": \"\", \n\"links\": \n[ { \n\"CreatedAt\": \"2019-05-04T07:38:28Z\", \n\"Description\": \"[tilt] nothing to see here...\", \n\"Status\": \"pending\", \n\"Tags\": null, \n\"Title\": \"gg\", \"UpdatedAt\": \n\"2019-05-04T07:38:28Z\", \n\"Url\": \"http://gg.com\" \n} ], \n\"tilt\": \"Yeah, \nsync works!!!\" \n} \n```"]