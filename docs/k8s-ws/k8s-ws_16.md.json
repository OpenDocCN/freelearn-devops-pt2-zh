["```\nminikube stop\nminikube start --extra-config=apiserver.enable-admission-plugins=\"LimitRanger,NamespaceExists,NamespaceLifecycle,ResourceQuota,ServiceAccount,DefaultStorageClass,MutatingAdmissionWebhook,ValidatingAdmissionWebhook\"\n```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n    \u00a0\u00a0name: configmap-env-pod\n    spec:\n    \u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0- name: configmap-container\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: k8s.gcr.io/busybox\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command: [ \"/bin/sh\", \"-c\", \"sleep 5\" ]\n    ```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n    \u00a0\u00a0name: configmap-env-pod\n    \u00a0\u00a0annotations:\n    \u00a0\u00a0\u00a0\u00a0podModified: \"true\"\n    spec:\n    \u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0- name: configmap-container\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: k8s.gcr.io/busybox\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command: [ \"/bin/sh\", \"-c\", \"sleep 5\" ]\n    ```", "```\n// AdmissionReview describes an admission review request/response.\ntype AdmissionReview struct {\n\u00a0\u00a0\u00a0\u00a0metav1.TypeMeta `json:\",inline\"`\n\u00a0\u00a0\u00a0\u00a0// Request describes the attributes for the admission request.\n\u00a0\u00a0\u00a0\u00a0// +optional\n\u00a0\u00a0\u00a0\u00a0Request *AdmissionRequest `json:\"request,omitempty\"       protobuf:\"bytes,1,opt,name=request\"`\n\u00a0\u00a0\u00a0\u00a0// Response describes the attributes for the admission response.\n\u00a0\u00a0\u00a0\u00a0// +optional\n\u00a0\u00a0\u00a0\u00a0Response *AdmissionResponse `json:\"response,omitempty\" protobuf:\"bytes,2,opt,name=response\"`\n}\n```", "```\nkubectl patch configmap simple-configmap -n webhooks -p '{\"metadata\": {\"annotations\":\u00a0\u00a0{\"new\":\"annotation\"}\u00a0\u00a0} }'\n```", "```\n    kubectl create ns webhooks\n    ```", "```\n    namespace/webhooks created\n    ```", "```\n    kubectl create configmap simple-configmap --from-literal=url=google.com -n webhooks\n    ```", "```\n    configmap/simple-configmap created\n    ```", "```\n    kubectl get configmap simple-configmap -o yaml -n webhooks\n    ```", "```\n    kubectl patch configmap simple-configmap -n webhooks -p '{\"metadata\": {\"annotations\":  {\"teamname\":\"kubeteam\"}  } }'\n    ```", "```\n    configmap/simple-configmap patched\n    ```", "```\n    kubectl patch configmap simple-configmap -n webhooks --type='json' -p='[{\"op\": \"add\", \"path\": \"/metadata/annotations/custompatched\", \"value\": \"true\"}]'\n    ```", "```\n    configmap/simple-configmap patched\n    ```", "```\n    kubectl get configmap simple-configmap -n webhooks -o yaml\n    ```", "```\n20\u00a0func MutateCustomAnnotation(admissionRequest      *v1beta1.AdmissionRequest ) (*v1beta1.AdmissionResponse,      error){ \n21\u00a0\n22\u00a0\u00a0\u00a0// Parse the Pod object. \n23\u00a0\u00a0\u00a0raw := admissionRequest.Object.Raw \n24\u00a0\u00a0\u00a0pod := corev1.Pod{} \n25\u00a0\u00a0\u00a0if _, _, err := deserializer.Decode(raw, nil, &pod); err !=        nil{ \n26\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, errors.New(\"unable to parse pod\") \n27\u00a0\u00a0\u00a0} \n28\u00a0\n29\u00a0\u00a0\u00a0//create annotation to add \n30\u00a0\u00a0\u00a0annotations := map[string]string{\"podModified\" : \"true\"} \n31\u00a0\n32\u00a0\u00a0\u00a0//prepare the patch to be applied to the object \n33\u00a0\u00a0\u00a0var patch []patchOperation \n34\u00a0\u00a0\u00a0patch = append(patch, patchOperation{ \n35\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Op:\u00a0\u00a0 \"add\", \n36\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Path: \"/metadata/annotations\", \n37\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Value: annotations, \n38\u00a0\u00a0\u00a0}) \n39\u00a0\n40\u00a0\u00a0\u00a0//convert patch into bytes \n41\u00a0\u00a0\u00a0patchBytes, err := json.Marshal(patch) \n42\u00a0\u00a0\u00a0if err != nil { \n43\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, errors.New(\"unable to parse the patch\") \n44\u00a0\u00a0\u00a0} \n45\u00a0\n46\u00a0\u00a0\u00a0//create the response with patch bytes \n47\u00a0\u00a0\u00a0var admissionResponse *v1beta1.AdmissionResponse \n48\u00a0\u00a0\u00a0admissionResponse = &v1beta1.AdmissionResponse { \n49\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Allowed: true, \n50\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Patch:\u00a0\u00a0 patchBytes, \n51\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0PatchType: func() *v1beta1.PatchType { \n52\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pt := v1beta1.PatchTypeJSONPatch \n53\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return &pt \n54\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}(), \n55\u00a0\u00a0\u00a0} \n56\u00a0\n57\u00a0\u00a0\u00a0//return the response \n58\u00a0\u00a0\u00a0return admissionResponse, nil \n59\u00a0\n60\u00a0} \n```", "```\n    openssl req -nodes -new -x509 -keyout controller_ca.key -out controller_ca.crt -subj \"/CN=Mutating Admission Controller Webhook CA\"\n    ```", "```\n    openssl genrsa -out tls.key 2048\n    ```", "```\n    openssl req -new -key tls.key -subj \"/CN=webhook-server.webhooks.svc\" \\\n    \u00a0\u00a0\u00a0\u00a0| openssl x509 -req -CA controller_ca.crt -CAkey controller_ca.key -CAcreateserial -out tls.crt\n    ```", "```\n    Signature ok\n    subject=/CN=webhook-server.webhooks.svc\n    Getting CA Private Key\n    ```", "```\n    kubectl -n webhooks create secret tls webhook-server-tls \\\n    \u00a0\u00a0\u00a0\u00a0--cert \"tls.crt\" \\\n    \u00a0\u00a0\u00a0\u00a0--key \"tls.key\"\n    ```", "```\n    secret/webhook-server-tls created\n    ```", "```\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n    \u00a0\u00a0name: webhook-server\n    \u00a0\u00a0labels:\n    \u00a0\u00a0\u00a0\u00a0app: webhook-server\n    spec:\n    \u00a0\u00a0replicas: 1\n    \u00a0\u00a0selector:\n    \u00a0\u00a0\u00a0\u00a0matchLabels:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: webhook-server\n    \u00a0\u00a0template:\n    \u00a0\u00a0\u00a0\u00a0metadata:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: webhook-server\n    \u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: server\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: packtworkshops/the-kubernetes-          workshop:mutating-webhook\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0imagePullPolicy: Always\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ports:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- containerPort: 8443\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: webhook-api\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0volumeMounts:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: webhook-tls-certs\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mountPath: /etc/secrets/tls\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readOnly: true\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0volumes:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: webhook-tls-certs\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secret:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secretName: webhook-server-tls\n    ```", "```\n    kubectl create -f mutating-server.yaml -n webhooks\n    ```", "```\n    deployment.apps/webhook-server created\n    ```", "```\n    apiVersion: v1\n    kind: Service\n    metadata:\n    \u00a0\u00a0labels:\n    \u00a0\u00a0\u00a0\u00a0app: webhook-server\n    \u00a0\u00a0name: webhook-server\n    \u00a0\u00a0namespace: webhooks\n    spec:\n    \u00a0\u00a0ports:\n    \u00a0\u00a0- port: 443\n    \u00a0\u00a0\u00a0\u00a0protocol: TCP\n    \u00a0\u00a0\u00a0\u00a0targetPort: 8443\n    \u00a0\u00a0selector:\n    \u00a0\u00a0\u00a0\u00a0app: webhook-server\n    \u00a0\u00a0sessionAffinity: None\n    \u00a0\u00a0type: ClusterIP\n    ```", "```\n    kubectl create -f mutating-serversvc.yaml -n webhooks\n    ```", "```\n    service/webhook-server created\n    ```", "```\napiVersion: admissionregistration.k8s.io/v1beta1\nkind: MutatingWebhookConfiguration\nmetadata:\n\u00a0\u00a0name: pod-annotation-webhook\nwebhooks:\n- name: webhook-server.webhooks.svc\n\u00a0\u00a0 clientConfig:\n\u00a0\u00a0\u00a0\u00a0 service:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 name: webhook-server\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 namespace: webhooks\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 path: \"/mutate\"\n\u00a0\u00a0\u00a0\u00a0 caBundle: \"LS0\u2026\"    #The caBundle is truncated for brevity\n\u00a0\u00a0 rules:\n\u00a0\u00a0\u00a0\u00a0 - operations: [ \"CREATE\" ]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 apiGroups: [\"\"]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 apiVersions: [\"v1\"]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resources: [\"pods\"]\n```", "```\nopenssl base64 -in controller_ca.crt -out controller_ca-base64.crt\n```", "```\ncat controller_ca-base64.crt | tr -d '\\n' > onelinecert.pem\n```", "```\nfunc ValidateTeamAnnotation(admissionRequest   *v1beta1.AdmissionRequest ) (*v1beta1.AdmissionResponse, error){\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Get the AdmissionReview Object\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0raw := admissionRequest.Object.Raw\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0pod := corev1.Pod{}\n\n\u00a0\u00a0\u00a0\u00a0\u00a0// Parse the Pod object.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if _, _, err := deserializer.Decode(raw, nil, &pod);         err != nil {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, errors.New(\"unable to parse pod\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//Get all the Labels of the Pod\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0podLabels := pod.ObjectMeta.GetLabels()\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//Logic to check if label exists\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//check if the teamName label is available, if not         generate an error.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if podLabels == nil || podLabels[teamNameLabel] == \"\" {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return nil, errors.New(\"teamName label not found\")\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//Populate the Allowed flag\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//if the teamName label exists, return the response with \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//Allowed flag set to true.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0var admissionResponse *v1beta1.AdmissionResponse\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0admissionResponse = &v1beta1.AdmissionResponse {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Allowed: true,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//Return the response with Allowed set to true\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return admissionResponse, nil\n}\nconst (\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0//This is the name of the label that is expected to be         part of the pods to allow them to be created.\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0teamNameLabel = `teamName`\n)\n```", "```\n    kubectl get ValidatingWebHookConfiguration -n webhooks\n    ```", "```\n    NAME                        CREATED AT\n    pod-label-verify-webhook    201908-23T13:59:30Z\n    ```", "```\n    kubectl delete ValidatingWebHookConfiguration pod-label-verify-webhook -n webhooks\n    ```", "```\n    kubectl delete ns webhooks\n    ```", "```\n    namespace \"webhooks\" deleted\n    ```", "```\n    kubectl create ns webhooks\n    ```", "```\n    namespace/webhooks created\n    ```", "```\n    openssl req -nodes -new -x509 -keyout controller_ca.key -out controller_ca.crt -subj \"/CN=Mutating Admission Controller Webhook CA\"\n    ```", "```\n    openssl genrsa -out tls.key 2048\n    openssl req -new -key tls.key -subj \"/CN=webhook-server.webhooks.svc\" \\\n    \u00a0\u00a0\u00a0\u00a0| openssl x509 -req -CA controller_ca.crt -Cakey controller_ca.key -Cacreateserial -out tls.crt\n    ```", "```\n    kubectl -n webhooks create secret tls webhook-server-tls \\\n    --cert \"tls.crt\" \\\n    --key \"tls.key\"\n    ```", "```\n    secret/webhook-server-tls created\n    ```", "```\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n    \u00a0\u00a0name: webhook-server\n    \u00a0\u00a0labels:\n    \u00a0\u00a0\u00a0\u00a0app: webhook-server\n    spec:\n    \u00a0\u00a0replicas: 1\n    \u00a0\u00a0selector:\n    \u00a0\u00a0\u00a0\u00a0matchLabels:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: webhook-server\n    \u00a0\u00a0template:\n    \u00a0\u00a0\u00a0\u00a0metadata:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: webhook-server\n    \u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: server\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: packtworkshops/the-kubernetes-workshop:webhook\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0imagePullPolicy: Always\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ports:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- containerPort: 8443\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: webhook-api\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0volumeMounts:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: webhook-tls-certs\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mountPath: /etc/secrets/tls\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0readOnly: true\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0volumes:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: webhook-tls-certs\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secret:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0secretName: webhook-server-tls\n    ```", "```\n    kubectl create -f validating-server.yaml -n webhooks\n    ```", "```\n    deployment.apps/webhook-server created\n    ```", "```\n    kubectl get pods -n webhooks -w\n    ```", "```\n    apiVersion: v1\n    kind: Service\n    metadata:\n    \u00a0\u00a0labels:\n    \u00a0\u00a0\u00a0\u00a0app: webhook-server\n    \u00a0\u00a0name: webhook-server\n    \u00a0\u00a0namespace: webhooks\n    spec:\n    \u00a0\u00a0ports:\n    \u00a0\u00a0- port: 443\n    \u00a0\u00a0\u00a0\u00a0protocol: TCP\n    \u00a0\u00a0\u00a0\u00a0targetPort: 8443\n    \u00a0\u00a0selector:\n    \u00a0\u00a0\u00a0\u00a0app: webhook-server\n    \u00a0\u00a0sessionAffinity: None\n    \u00a0\u00a0type: ClusterIP\n    ```", "```\n    kubectl create -f validating-serversvc.yaml -n webhooks\n    ```", "```\n    service/webhook-server created\n    ```", "```\n    openssl x509 -inform PEM -in controller_ca.crt > controller_ca.crt.pem\n    openssl base64 -in controller_ca.crt.pem -out controller_ca-base64.crt.pem\n    ```", "```\n    cat controller_ca-base64.crt.pem\n    ```", "```\n    cat controller_ca-base64.crt.pem | tr -d '\\n' > onelinecert.pem\n    cat onelinecert.pem\n    ```", "```\n    apiVersion: admissionregistration.k8s.io/v1beta1\n    kind: ValidatingWebhookConfiguration\n    metadata:\n    \u00a0\u00a0name: pod-label-verify-webhook\n    webhooks:\n    \u00a0\u00a0- name: webhook-server.webhooks.svc\n    \u00a0\u00a0\u00a0\u00a0namespaceSelector:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0matchExpressions:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- key: applyValidation\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0operator: In\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0values: [\"true\",\"yes\", \"1\"]\n\n    \u00a0\u00a0\u00a0\u00a0clientConfig:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0service:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: webhook-server\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0namespace: webhooks\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0path: \"/validate\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0caBundle: \"CA_BASE64_PEM\"    #Retain the quotes when you         copy the caBundle here. Please read the note below on         how to add specific values here.\n    \u00a0\u00a0\u00a0\u00a0rules:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- operations: [ \"CREATE\" ]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0apiGroups: [\"\"]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0apiVersions: [\"v1\"]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resources: [\"pods\"]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0scope: \"Namespaced\"\n    ```", "```\n    kubectl create -f validation-config-namespace-scoped.yaml\n    ```", "```\n    kubectl create namespace webhooks-demo\n    ```", "```\n    namespace/webhooks-demo created\n    ```", "```\n    kubectl label namespace webhooks applyValidation=true\n    ```", "```\n    namespace/webhooks labeled\n    ```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n    \u00a0\u00a0name: validating-pod-example\n    spec:\n    \u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0- name: validating-pod-example-container\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: k8s.gcr.io/busybox\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0command: [ \"/bin/sh\", \"-c\", \"while :; do echo '.'; sleep         5 ; done\" ]\n    ```", "```\n    kubectl create -f target-validating-pod.yaml -n webhooks\n    ```", "```\n    kubectl create -f target-validating-pod.yaml -n webhooks-demo\n    ```", "```\n    pod/validating-pod-example created\n    ```", "```\n    kubectl describe pod validating-pod-example -n webhooks-demo\n    ```"]