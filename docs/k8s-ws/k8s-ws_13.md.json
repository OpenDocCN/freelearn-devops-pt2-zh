["```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n\u00a0\u00a0namespace: default\n\u00a0\u00a0name: test-role\nrules:\n\u00a0\u00a0- verbs:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- \"list\"\n\u00a0\u00a0\u00a0\u00a0apiGroups:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- \"\"\n\u00a0\u00a0\u00a0\u00a0resources:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- \"pods\"\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n\u00a0\u00a0name: test-role-binding\n\u00a0\u00a0namespace: default\nroleRef:\n\u00a0\u00a0name: test-role\n\u00a0\u00a0kind: ClusterRole\n\u00a0\u00a0apiGroup: rbac.authorization.k8s.io\nsubjects:\n\u00a0\u00a0- kind: ServiceAccount\n\u00a0\u00a0\u00a0\u00a0name: test-sa\n\u00a0\u00a0\u00a0\u00a0namespace: default \n```", "```\nkubectl --as=system:serviceaccount:default:test-sa get pods\n```", "```\n    curl -O https://raw.githubusercontent.com/PacktWorkshops/Kubernetes-Workshop/master/Chapter12/Exercise12.02/main.tf\n    ```", "```\n    terraform init\n    terraform apply\n    ```", "```\n    apiVersion: v1\n    kind: ServiceAccount\n    metadata:\n    \u00a0\u00a0name: test-sa\n    \u00a0\u00a0namespace: default\n    ```", "```\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: ClusterRole\n    metadata:\n    \u00a0\u00a0namespace: default\n    \u00a0\u00a0name: test-sa-cluster-role\n    rules:\n    \u00a0\u00a0- verbs:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- \"list\"\n    \u00a0\u00a0\u00a0\u00a0apiGroups:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- \"\"\n    \u00a0\u00a0\u00a0\u00a0resources:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- \"pods\"\n    ```", "```\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: ClusterRoleBinding\n    metadata:\n    \u00a0\u00a0name: test-sa-cluster-role-binding\n    \u00a0\u00a0namespace: default\n    roleRef:\n    \u00a0\u00a0name: test-sa-cluster-role\n    \u00a0\u00a0kind: ClusterRole\n    \u00a0\u00a0apiGroup: rbac.authorization.k8s.io\n    subjects:\n    \u00a0\u00a0- kind: ServiceAccount\n    \u00a0\u00a0\u00a0\u00a0name: test-sa\n    \u00a0\u00a0\u00a0\u00a0namespace: default\n    ```", "```\n    kubectl apply -f sa.yaml -f cr.yaml -f crb.yaml\n    ```", "```\n    kubectl get pods --all-namespaces\n    ```", "```\n    kubectl describe pod -n kube-system aws-node-fzr6m\n    ```", "```\n    kubectl --as=system:serviceaccount:default:test-sa get pods --all-namespaces\n    ```", "```\n    kubectl --as=system:serviceaccount:default:test-sa describe pod -n kube-system aws-node-fzr6m\n    ```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n\u00a0\u00a0name: sample-network-policy\n\u00a0\u00a0namespace: my-namespace\nspec:\n\u00a0\u00a0podSelector:\n\u00a0\u00a0\u00a0\u00a0matchLabels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0role: db\n\u00a0\u00a0policyTypes:\n\u00a0\u00a0- Ingress\n\u00a0\u00a0- Egress\n\u00a0\u00a0ingress:\n\u00a0\u00a0- from:\n\u00a0\u00a0\u00a0\u00a0- ipBlock:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cidr: 192.18.0.0/16\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0except:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- 192.18.1.0/24\n\u00a0\u00a0\u00a0\u00a0- namespaceSelector:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0matchLabels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0project: sample-project\n\u00a0\u00a0\u00a0\u00a0- podSelector:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0matchLabels:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0role: frontend\n\u00a0\u00a0\u00a0\u00a0ports:\n\u00a0\u00a0\u00a0\u00a0- protocol: TCP\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port: 3257\n\u00a0\u00a0egress:\n\u00a0\u00a0- to:\n\u00a0\u00a0\u00a0\u00a0- ipBlock:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cidr: 10.0.0.0/24\n\u00a0\u00a0\u00a0\u00a0ports:\n\u00a0\u00a0\u00a0\u00a0- protocol: TCP\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port: 5832\n```", "```\n    kubectl apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/release-1.5/config/v1.5/calico.yaml\n    ```", "```\n    kubectl get daemonset calico-node --namespace kube-system\n    ```", "```\n    apiVersion: networking.k8s.io/v1\n    kind: NetworkPolicy\n    metadata:\n    \u00a0\u00a0name: default-deny\n    spec:\n    \u00a0\u00a0podSelector: {}\n    \u00a0\u00a0policyTypes:\n    \u00a0\u00a0\u00a0\u00a0- Ingress\n    \u00a0\u00a0\u00a0\u00a0- Egress\n    ```", "```\n    kubectl apply -f net_pol_all_deny.yaml\n    ```", "```\n    networkpolicy.networking.k8s.io/default-deny created\n    ```", "```\n    curl -O https://raw.githubusercontent.com/PacktWorkshops/Kubernetes-Workshop/master/Chapter12/Exercise12.04/with_redis.yaml\n    ```", "```\n    kubectl apply -f with_redis.yaml\n    ```", "```\n    kubectl describe deployment kubernetes-test-ha-application-with-redis-deployment\n    ```", "```\n    kubectl proxy\n    ```", "```\n    Starting to serve on 127.0.0.1:8001\n    ```", "```\n    curl localhost:8001/api/v1/namespaces/default/services/kubernetes-test-ha-application-with-redis:/proxy/get-number\n    ```", "```\n    Error: 'dial tcp 10.0.0.193:8080: i/o timeout'\n    Trying to reach: 'http:10.0.0.193:8080/get-number'%\n    ```", "```\napiVersion: policy/v1beta1\nkind: PodSecurityPolicy\nmetadata:\n\u00a0\u00a0name: psp-example\n\u00a0\u00a0namespace: default\nspec:\n\u00a0\u00a0privileged: true\n\u00a0\u00a0seLinux:\n\u00a0\u00a0\u00a0\u00a0rule: RunAsAny\n\u00a0\u00a0supplementalGroups:\n\u00a0\u00a0\u00a0\u00a0rule: MustRunAs\n\u00a0\u00a0\u00a0\u00a0ranges:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- min: 1\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max: 2500\n\u00a0\u00a0runAsUser:\n\u00a0\u00a0\u00a0\u00a0rule: MustRunAsNonRoot\n\u00a0\u00a0fsGroup:\n\u00a0\u00a0\u00a0\u00a0rule: MustRunAs\n\u00a0\u00a0\u00a0\u00a0ranges:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- min: 655\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max: 655\n\u00a0\u00a0volumes:\n\u00a0\u00a0\u00a0\u00a0- '*'\n```", "```\n    apiVersion: policy/v1beta1\n    kind: PodSecurityPolicy\n    metadata:\n    \u00a0\u00a0name: psp-example\n    \u00a0\u00a0namespace: default\n    spec:\n    \u00a0\u00a0privileged: false\n    \u00a0\u00a0seLinux:\n    \u00a0\u00a0\u00a0\u00a0rule: RunAsAny\n    \u00a0\u00a0supplementalGroups:\n    \u00a0\u00a0\u00a0\u00a0rule: MustRunAs\n    \u00a0\u00a0\u00a0\u00a0ranges:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- min: 1\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max: 2500\n    \u00a0\u00a0runAsUser:\n    \u00a0\u00a0\u00a0\u00a0rule: MustRunAsNonRoot\n    \u00a0\u00a0fsGroup:\n    \u00a0\u00a0\u00a0\u00a0rule: MustRunAs\n    \u00a0\u00a0\u00a0\u00a0ranges:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- min: 655\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max: 655\n    \u00a0\u00a0volumes:\n    \u00a0\u00a0\u00a0\u00a0- '*'\n    ```", "```\n    kubectl apply -f pod_security_policy_example.yaml\n    ```", "```\n    podsecuritypolicy.policy/psp-example created\n    ```", "```\n    FROM debian:latest\n    USER 0\n    CMD echo $(whoami)\n    ```", "```\n    docker build -t root .\n    ```", "```\n    docker run root:latest\n    ```", "```\n    root\n    ```", "```\n    apiVersion: v1\n    kind: Pod\n    metadata:\n    \u00a0\u00a0name: rooter\n    spec:\n    \u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0- name: rooter\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: packtworkshops/the-kubernetes-workshop:root-tester\n    ```", "```\n    kubectl create serviceaccount fake-user\n    ```", "```\n    serviceaccount/fake-user created\n    ```", "```\n    kubectl create role psp:unprivileged --verb=use --resource=podsecuritypolicy --resource-name=psp-example\n    ```", "```\n    role.rbac.authorization.k8s.io/psp:unprivileged created\n    ```", "```\n    kubectl create rolebinding fake-user:psp:unprivileged --role=psp:unprivileged --serviceaccount=psp-example:fake-user\n    ```", "```\n    rolebinding.rbac.authorization.k8s.io/fake-user: psp:unprivileged created\n    ```", "```\n    kubectl --as=system:serviceaccount:psp-example:fake-user apply -f pod.yaml\n    ```"]