["```\nkubectl get pods -n kube-system\n```", "```\nkubectl auth can-i get pods --all-namespaces\nkubectl auth can-i get pods -n default\n```", "```\nkubectl auth can-i delete pods\nkubectl auth can-i get pods\nkubectl auth can-i get pods --all-namespaces\n```", "```\n    minikube start\n    ```", "```\n    kubectl describe pod kube-apiserver-minikube -n kube-system | grep enable-admission-plugins\n    ```", "```\n    kubectl exec -it kube-apiserver-minikube -n kube-system -- kube-apiserver -h | grep \"enable-admission-plugins\" | grep -vi deprecated\n    ```", "```\n    minikube start --extra-config=apiserver.enable-admission-plugins=\"LimitRanger,NamespaceExists,NamespaceLifecycle,ResourceQuota,ServiceAccount,DefaultStorageClass,MutatingAdmissionWebhook\"\n    ```", "```\n    kubectl describe pod kube-apiserver-minikube -n kube-system | grep enable-admission-plugins\n    ```", "```\nkubectl get pods -n kube-system\n```", "```\nkubectl get pods -n kube-system --v=8\n```", "```\nkubectl get pods -n kube-system --v=10\n```", "```\n    GET /api/v1/pods\n    ```", "```\n    GET /api/v1/namespaces/{namespace}/pods/{name}\n    ```", "```\n    GET /api/v1/namespaces/{my-namespace}/pods/{pod-name}\n    ```", "```\n    GET /apis/apps/v1/namespaces/{my-namespace}/deployments\n    ```", "```\n    GET /api/v1/services\n    ```", "```\nkubectl api-resources --namespaced=true\n```", "```\n    GET /api/v1/nodes/{node-name}\n    ```", "```\n    GET /api/v1/nodes\n    ```", "```\n    kubectl api-resources --namespaced=false\n    ```", "```\nkubectl api-resources --api-group=''\n```", "```\nkubectl api-resources --api-group='apps'\n```", "```\nkubectl api-resources --api-group='rbac.authorization.k8s.io'\n```", "```\nkubectl version --short --v=6\n```", "```\nkubectl api-versions\n```", "```\n    kubectl api-resources | grep ingresses\n    ```", "```\n    ingresses     ing     extensions            true         Ingress\n    ingresses     ing     networking.k8s.io     true         Ingress\n    ```", "```\n    kubectl api-resources --api-group=\"extensions\"\n    ```", "```\n    NAME       SHORTNAMES     APIGROUP     NAMESPACED      KIND\n    ingresses  ing            extensions   true            Ingress\n    ```", "```\n    kubectl api-resources --api-group=\"networking.k8s.io\"\n    ```", "```\n    kubectl explain ingress\n    ```", "```\n    kubectl explain ingress --api-version=networking.k8s.io/v1beta1\n    ```", "```\n    kubectl explain ingress.spec --api-version=networking.k8s.io/v1beta1\n    ```", "```\n    kubectl explain ingress.spec.backend --api-version=networking.k8s.io/v1beta1\n    ```", "```\nNo matches for kind \"CronJob\" in version \"batch/v2alpha1\".\n```", "```\n    minikube start --extra-config=apiserver.runtime-config=batch/v2alpha1\n    ```", "```\n    kubectl describe pod kube-apiserver-minikube -n kube-system | grep runtime\n    ```", "```\n    --runtime-config=batch/v2alpha1\n    ```", "```\n    kubectl api-versions | grep batch/v2alpha1\n    ```", "```\n    batch/v2alpha1\n    ```", "```\n    apiVersion: batch/v2alpha1\n    kind: CronJob\n    metadata:\n    \u00a0\u00a0name: hello\n    spec:\n    \u00a0\u00a0schedule: \"*/1 * * * *\"\n    \u00a0\u00a0jobTemplate:\n    \u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0template:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: hello\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: busybox\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- /bin/sh\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- -c\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- date; echo Hello from the Kubernetes cluster\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0restartPolicy: OnFailure\n    ```", "```\n    kubectl create -f sample-cronjob.yaml\n    ```", "```\n    cronjob.batch/hello created\n    ```", "```\n    minikube ssh\n    ```", "```\n    sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml\n    ```", "```\n    exit\n    ```", "```\n    kubectl delete pods -n kube-system -l component=kube-apiserver\n    ```", "```\n    pod \"kube-apiserver-minikube\" deleted\n    ```", "```\n    kubectl delete pods -n kube-system -l component=kube-controller-manager\n    ```", "```\n    pod \"kube-controller-manager-minikube\" deleted\n    ```", "```\n    kubectl api-versions | grep batch/v2alpha1\n    ```", "```\n--runtime-config=extensions/v1beta1/ingresses=false\n```", "```\nkubectl create deployment mynginx --image=nginx:latest \n```", "```\ndeployment.apps/mynginx created\n```", "```\nkubectl scale deployment mynginx --replicas=2\n```", "```\ndeployment.apps/mynginx scaled\n```", "```\nkubectl get pods\n```", "```\nNAME                        READY    STATUS     RESTARTS   AGE\nmynginx-565f67b548-gk5n2    1/1      Running    0          2m30s\nmynginx-565f67b548-q6slz    1/1      Running    0          2m30s\n```", "```\nkubectl proxy\n```", "```\nStarting to serve on 127.0.0.1:8001\n```", "```\nkubectl proxy --port=8080 &\n```", "```\n[1] 48285\nAbuTalebMBP:~ mohammed$ Starting to serve on 127.0.0.1:8080\n```", "```\nfg\n```", "```\nkubectl proxy --port=8080\n^C\n```", "```\ncurl http://127.0.0.1:8080/apis\n```", "```\n    curl http://127.0.0.1:8080/apis/apps/v1\n    ```", "```\n    curl http://127.0.0.1:8080/apis/apps/v1/namespaces/default/deployments\n    ```", "```\ncurl http://127.0.0.1:8080/apis/apps/v1/namespaces/default/deployments/mynginx\n```", "```\ncurl -X POST <URL-path> -H 'Content-Type: application/yaml' --data <spec/manifest>\n```", "```\nkubectl create namespace my-namespace\n```", "```\nnamespace/my-namespace created\n```", "```\nkubectl create namespace my-second-namespace --dry-run=client -o yaml\n```", "```\n    kubectl proxy &\n    ```", "```\n    [1] 50034\n    AbuTalebMBP:~ mohammed$ Starting to serve on 127.0.0.1:8080\n    ```", "```\n    kubectl create namespace example --dry-run -o yaml\n    ```", "```\n    curl -X POST http://127.0.0.1:8001/api/v1/namespaces -H 'Content-    Type: application/yaml' --data \"\n    apiVersion: v1\n    kind: Namespace\n    metadata:\n    \u00a0\u00a0creationTimestamp: null\n    \u00a0\u00a0name: example\n    spec: {}\n    status: {}\n    \"\n    ```", "```\n    kubectl create deployment nginx-example -n example --image=nginx:latest --dry-run -o yaml\n    ```", "```\n    curl -X POST http://127.0.0.1:8001/apis/apps/v1/namespaces/example/    deployments -H 'Content-Type: application/yaml' --data \"\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n    \u00a0\u00a0creationTimestamp: null\n    \u00a0\u00a0labels:\n    \u00a0\u00a0\u00a0\u00a0run: nginx-example\n    \u00a0\u00a0name: nginx-example\n    spec:\n    \u00a0\u00a0replicas: 3\n    \u00a0\u00a0selector:\n    \u00a0\u00a0\u00a0\u00a0matchLabels:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0run: nginx-example\n    \u00a0\u00a0strategy: {}\n    \u00a0\u00a0template:\n    \u00a0\u00a0\u00a0\u00a0metadata:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0creationTimestamp: null\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0run: nginx-example\n    \u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- image: nginx:latest\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: nginx-example\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resources: {}\n    status: {}\n    \"\n    ```", "```\nkubectl exec -it kube-apiserver-minikube -n kube-system -- /bin/sh -c \"apt update ; apt -y install procps ; ps aux | grep kube-apiserver\"\n```", "```\nCommon Name = www.google.com\nOrganization = Google LLC\nLocality = Mountain View\nState = California\nCountry = US\n```", "```\ncurl --cert <ClientCertificate> --key <PrivateKey> --cacert <CertificateAuthority> https://<APIServerAddress:port>/api\n```", "```\nkubectl config view\n```", "```\ncurl --cert ~/.minikube/client.crt --key ~/.minikube/client.key --cacert ~/.minikube/ca.crt https://192.168.99.110:8443/api\n```", "```\nkubectl get serviceaccounts --all-namespaces\n```", "```\nkubectl get secrets\n```", "```\nNAME                 TYPE                                 DATA   AGE\ndefault-token-wtkk5  kubernetes.io/service-account-token  3      10h\n```", "```\nkubectl get secrets default-token-wtkk5 -o yaml\n```", "```\necho \"<copied_value>\" | base64 --decode\n```", "```\nkubectl exec -it <pod-name> -- /bin/bash\n```", "```\ndf -h\n```", "```\nls /var/run/secrets/kubernetes.io/serviceaccount\n```", "```\nca.crt  namespace  token\n```", "```\nkubectl run my-bash --rm --restart=Never -it --image=ubuntu -- bash\n```", "```\nIf you don't see a command prompt, try pressing enter.\nroot@my-bash: /#\n```", "```\napt update && apt -y install curl\n```", "```\ncurl https://kubernetes/api/v1/namespaces/$NAMESPACE/pods\n```", "```\ncurl --insecure https://kubernetes/api/v1/namespaces/$NAMESPACE/pods\n```", "```\nCACERT=/run/secrets/kubernetes.io/serviceaccount/ca.crt\nTOKEN=$(cat /run/secrets/kubernetes.io/serviceaccount/token)\nNAMESPACE=$(cat /run/secrets/kubernetes.io/serviceaccount/namespace)\n```", "```\ncurl --cacert $CACERT -H \"Authorization: Bearer $TOKEN\" https://kubernetes/api/v1/namespaces/$NAMESPACE/pods\n```", "```\nkubectl create rolebinding defaultSA-view \\\n\u00a0\u00a0--clusterrole=view \\\n\u00a0\u00a0--serviceaccount=default:default \\\n\u00a0\u00a0--namespace=default\n```", "```\nrolebinding.rbac.authorization.k8s.io/defaultSA-view created\n```", "```\ncurl --cacert $CACERT -H \"Authorization: Bearer $TOKEN\" https://kubernetes/api/v1/namespaces/$NAMESPACE/pods\n```", "```\n    \"status\": {\n    \u00a0\u00a0\"phase\": \"Terminating\"\n    ```"]