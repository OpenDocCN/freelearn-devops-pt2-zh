["```\n    kops version\n    ```", "```\n    Version 1.15.0 (git-9992b4055)\n    ```", "```\n    aws iam create-group --group-name kops\n    aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name kops\n    aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name kops\n    aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name kops\n    aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name kops\n    aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonVPCFullAccess --group-name kops\n    aws iam create-user --user-name kops\n    aws iam add-user-to-group --user-name kops --group-name kops\n    aws iam create-access-key --user-name kops\n    ```", "```\n    export AWS_ACCESS_KEY_ID=<AccessKeyId>\n    export AWS_SECRET_ACCESS_KEY=<SecretAccessKey>\n    ```", "```\n    export BUCKET_NAME=\"kops-$(LC_ALL=C tr -dc 'a-z0-9' </dev/urandom | head -c 13 ; echo)\" && echo $BUCKET_NAME\n    ```", "```\n    kops-aptjv0e9o2wet\n    ```", "```\n    aws s3 mb s3://$BUCKET_NAME --region us-west-2\n    ```", "```\n    make_bucket: kops-aptjv0e9o2wet\n    ```", "```\n    export NAME=myfirstcluster.k8s.local\n    export KOPS_STATE_STORE=s3://$BUCKET_NAME\n    ```", "```\n    kops create cluster --zones us-west-2a,us-west-2b,us-west-2c --master-count=3 --kubernetes-version=1.15.0 --name $NAME\n    ```", "```\n    kops create secret --name myfirstcluster.k8s.local sshpublickey admin -i ~/.ssh/id_rsa.pub\n    ```", "```\n    ssh -i ~/.ssh/id_rsa admin@<public_ip_of_instance>\n    ```", "```\n    kops edit cluster $NAME\n    ```", "```\n    kops update cluster $NAME --yes\n    ```", "```\n    kops validate cluster\n    ```", "```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n\u00a0\u00a0name: admin-user\n\u00a0\u00a0namespace: kube-system\n```", "```\nserviceAccountName: admin-user\n```", "```\n    kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta1/aio/deploy/recommended.yaml\n    ```", "```\n    apiVersion: v1\n    kind: ServiceAccount\n    metadata:\n    \u00a0\u00a0name: admin-user\n    \u00a0\u00a0namespace: kube-system\n    ---\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: ClusterRoleBinding\n    metadata:\n    \u00a0\u00a0name: admin-user\n    roleRef:\n    \u00a0\u00a0apiGroup: rbac.authorization.k8s.io\n    \u00a0\u00a0kind: ClusterRole\n    \u00a0\u00a0name: cluster-admin\n    subjects:\n    - kind: ServiceAccount\n    \u00a0\u00a0name: admin-user\n    \u00a0\u00a0namespace: kube-system\n    ```", "```\n    kubectl apply -f sa.yaml\n    ```", "```\n    serviceaccount/admin-user created\n    clusterrolebinding.rbac.authorization.k8s.io/admin-user created\n    ```", "```\n    kubectl describe serviceaccount -n kube-system admin-user\n    ```", "```\n    kubectl get secret -n kube-system -o yaml admin-user-token-vx84g\n    ```", "```\n    kubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep admin-user | awk '{print $1}') -o jsonpath='{.data.token}' | base64 --decode\n    ```", "```\n    kubectl proxy\n    ```", "```\n    Starting to serve on 127.0.0.1:8001\n    ```", "```\n    http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/\n    ```", "```\nkops delete cluster --name ${NAME} --yes\n```"]