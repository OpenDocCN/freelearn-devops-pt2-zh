- en: 5\. Pods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5. Pod
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter introduces the concept of pods and teaches how to properly configure
    and deploy them. We will begin by creating a simple pod with your application
    container running in it. We will explain what the different aspects of pod configuration
    mean and decide which configuration to use based on your application or use case.
    You will be able to define resource allocation requirements and limits for pods.
    We will then move on to see how we can debug the pod, check the logs, and make
    changes to it when needed. Some more useful tools for managing faults in pods,
    such as liveness and readiness probes and restart policies, are also covered in
    this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Pod的概念，并教授如何正确配置和部署它们。我们将从创建一个简单的Pod开始，其中运行您的应用程序容器。我们将解释Pod配置的不同方面意味着什么，并根据您的应用程序或用例决定使用哪种配置。您将能够为Pod定义资源分配要求和限制。然后，我们将看看如何调试Pod，检查日志，并在需要时对其进行更改。本章还涵盖了一些用于管理Pod中故障的更多有用工具，例如活跃性和就绪性探针以及重启策略。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the previous chapter, we learned how to use kubectl to interact with the
    Kubernetes API. In this chapter and the upcoming chapters, we will use that knowledge
    to interact with the API to create various types of Kubernetes objects.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用kubectl与Kubernetes API进行交互。在本章和即将到来的章节中，我们将利用这些知识与API进行交互，以创建各种类型的Kubernetes对象。
- en: In a Kubernetes system, many entities represent the state of the cluster and
    what the cluster's workload looks like. These entities are known as Kubernetes
    objects. Kubernetes objects describe various things, for example, what containers
    will be running in the cluster, what resources they will be using, how those containers
    will interact with each other, and how they will be exposed to the outer world.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes系统中，许多实体代表了集群的状态以及集群的工作负载。这些实体被称为Kubernetes对象。Kubernetes对象描述各种事物，例如，在集群中将运行哪些容器，它们将使用什么资源，这些容器将如何相互交互，以及它们将如何暴露给外部世界。
- en: A pod is the basic building block of Kubernetes, and it can be described as
    the basic unit of deployment. Just like we define a process as a program in execution,
    we can define a pod as a running process in the Kubernetes world. Pods are the
    smallest unit of replication in Kubernetes. A pod can have any number of containers
    running in it. A pod is basically a wrapper around containers running on a node.
    Using pods instead of individual containers has a few benefits. For example, containers
    in a pod have shared volumes, Linux namespaces, and cgroups. Each pod has a unique
    IP address and the port space is shared by all the containers in that pod. This
    means that different containers inside a pod can communicate with each other using
    their corresponding ports on localhost.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Pod是Kubernetes的基本构建块，可以描述为部署的基本单元。就像我们将进程定义为执行中的程序一样，我们可以将Pod定义为Kubernetes世界中正在运行的进程。Pod是Kubernetes中最小的复制单元。一个Pod可以有任意数量的容器在其中运行。Pod基本上是围绕在节点上运行的容器的包装器。使用Pod而不是单独的容器有一些好处。例如，Pod中的容器具有共享卷、Linux命名空间和cgroups。每个Pod都有唯一的IP地址，端口空间由该Pod中的所有容器共享。这意味着Pod内部的不同容器可以使用本地主机上的相应端口相互通信。
- en: Ideally, we should use multiple containers in a pod only when we want them to
    be managed and located together in the Kubernetes cluster. For example, we may
    have a container running our application and another container that fetches logs
    from the application container and forwards them to some central storage. In this
    case, we would want both of our containers to stay together, to share the same
    IP so that they can communicate over localhost, and to share the same storage
    so that the second container can read the logs our application container is generating.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们应该只在希望它们在Kubernetes集群中被管理和定位在一起时才在一个pod中使用多个容器。例如，我们可能有一个容器运行我们的应用程序，另一个容器从应用程序容器中获取日志并将其转发到一些中央存储。在这种情况下，我们希望我们的两个容器保持在一起，共享相同的IP，以便它们可以通过localhost进行通信，并共享相同的存储，以便第二个容器可以读取我们的应用程序容器生成的日志。
- en: In this chapter, we will cover what a pod is, how it works, and how to define
    its pod spec, which describes the state of a pod. We will go through different
    phases of the life cycle of a pod and learn how to control the pods using health
    checks or probes. Let's begin by learning how a pod is configured.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍pod是什么，它是如何工作的，以及如何定义其pod规范，描述pod的状态。我们将经历pod生命周期的不同阶段，并学习如何使用健康检查或探针来控制pod。让我们开始学习如何配置一个pod。
- en: Pod Configuration
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pod配置
- en: 'In order to be able to successfully configure a pod, we must first be able
    to read and understand a pod configuration file. Here is an example pod configuration
    file:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功配置一个pod，我们必须首先能够阅读和理解一个pod配置文件。以下是一个示例pod配置文件：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can break down the configuration of a pod into four main components:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将pod的配置分解为四个主要组件：
- en: '`apiVersion`: Version of the Kubernetes API we are going to use.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apiVersion`：我们将要使用的Kubernetes API的版本。'
- en: '`kind`: The kind of Kubernetes object we are trying to create, which is a `Pod`
    in this case.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kind`：我们要创建的Kubernetes对象的类型，在这种情况下是`Pod`。'
- en: '`metadata`: Metadata or information that uniquely identifies the object we''re creating.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata`：唯一标识我们正在创建的对象的元数据或信息。'
- en: '`spec`: Specification of our pod, such as container name, image name, volumes,
    and resource requests.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`spec`：我们的pod的规范，如容器名称、镜像名称、卷和资源请求。'
- en: '`apiVersion`, `kind`, and `metadata` apply to all types of Kubernetes objects
    and are required fields. `spec` is also a required field; however, its layout
    is different for different types of objects.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`apiVersion`，`kind`和`metadata`适用于所有类型的Kubernetes对象，并且是必需的字段。`spec`也是一个必需的字段；但是，它的布局对于不同类型的对象是不同的。'
- en: The following exercise demonstrates how to use such a pod configuration file
    to create a simple pod.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下练习演示了如何使用这样一个pod配置文件来创建一个简单的pod。
- en: 'Exercise 5.01: Creating a Pod with a Single Container'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.01：创建一个带有单个容器的Pod
- en: 'In this exercise, we aim to create our first simple pod that runs a single
    container. To complete this exercise, perform the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们的目标是创建我们的第一个简单的pod，其中运行一个单一的容器。要完成这个练习，请执行以下步骤：
- en: 'Create a file called `single-container-pod.yaml` with the following contents:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`single-container-pod.yaml`的文件，其中包含以下内容：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the following command in Terminal to create a pod with the preceding configuration:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中运行以下命令以创建具有上述配置的pod：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You should see the following response:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下响应：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The output indicates that the pod has been created.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 输出表明已创建了pod。
- en: 'Verify that the pod was created by getting the list of all the pods using this command:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用以下命令获取所有pod的列表来验证是否已创建pod：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should see the following response:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下响应：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we have created our first pod, let''s look into it in more detail.
    To do that, we can describe the pod we just created using the following command
    in Terminal:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的第一个pod，让我们更详细地了解一下。为了做到这一点，我们可以使用以下命令在终端中描述我们刚刚创建的pod：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should see the following output:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![Figure 5.1: Describing first-pod'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.1：描述第一个pod'
- en: '](image/B14870_05_01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14870_05_01.jpg)'
- en: 'Figure 5.1: Describing first-pod'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1：描述第一个pod
- en: The output shows various details about the pod we just created. In the following
    sections, we shall go through the highlighted sections of the preceding output
    to find out more about the pod that's running.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了我们刚刚创建的pod的各种细节。在接下来的部分中，我们将通过前面输出的突出部分来了解更多关于正在运行的pod的信息。
- en: Name
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 名称
- en: This field states the name of the pod, and it is also sometimes referred to
    as the pod ID. Pod names are unique in a particular namespace. A pod name can
    be a maximum of 253 characters long. The characters allowed in a pod name are
    numerals (0-9), lowercase letters (a-z), hyphens (-), and dots (.).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 该字段说明了pod的名称，有时也被称为pod ID。在特定的命名空间中，pod名称是唯一的。Pod名称最多可以有253个字符长。在pod名称中允许的字符是数字（0-9）、小写字母（a-z）、连字符（-）和点（.）。
- en: 'Consider the second line in the output shown in *Figure 5.1*:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑输出中显示的第二行*图5.1*：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It is the same as the one we mentioned in our YAML configuration.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们在YAML配置中提到的是一样的。
- en: Namespace
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名空间
- en: 'Kubernetes supports namespaces to create multiple virtual clusters within the
    same physical cluster. We may need to use namespaces if we want to provide separate
    environments to our different teams working on the same cluster. Namespaces also
    help in scoping the object names. For example, you cannot have two pods with the
    same name within the same namespace. However, it''s possible to have two pods
    with the same name in two different namespaces. Now, consider the second line
    in the output shown in *Figure 5.1*:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes支持命名空间，在同一物理集群中创建多个虚拟集群。如果我们想要为在同一集群上工作的不同团队提供单独的环境，我们可能需要使用命名空间。命名空间还有助于限定对象名称。例如，在同一命名空间中不能有两个具有相同名称的pod。但是，在两个不同的命名空间中可以有两个具有相同名称的pod。现在，考虑输出中显示的第二行*图5.1*：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can either temporarily change the namespace of the request by passing the
    `--namespace` argument for a particular kubectl command, or we can update the
    kubectl config to change the namespace for all subsequent kubectl commands. To
    create a new namespace, we can use the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过为特定的kubectl命令传递`--namespace`参数来临时更改请求的命名空间，或者我们可以更新kubectl配置以更改所有后续kubectl命令的命名空间。要创建一个新的命名空间，我们可以使用以下命令：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There are two ways to create pods in different namespaces – by using a CLI command,
    or by specifying the namespace in the pod configuration. The following exercises
    demonstrate how you can create pods in different namespaces to reap the benefits
    of namespaces that were mentioned earlier.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以在不同的命名空间中创建pod-通过使用CLI命令，或者通过在pod配置中指定命名空间。以下练习演示了如何在不同的命名空间中创建pod，以获得前面提到的命名空间的好处。
- en: 'Exercise 5.02: Creating a Pod in a Different Namespace by Specifying the Namespace
    in the CLI'
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.02：通过在CLI中指定命名空间来创建不同命名空间中的Pod
- en: 'In this exercise, we will create a pod in a namespace other than `default`.
    We will do that using the same pod configuration from *Exercise 5.01*, *Creating
    a Pod with a Single Container*, by specifying the namespace in the command argument.
    Follow these steps to complete the exercise:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将在一个不同于`default`的命名空间中创建一个pod。我们将使用相同的pod配置从*练习5.01*，*使用单个容器创建一个Pod*中，通过在命令参数中指定命名空间来完成这个操作。按照以下步骤完成这个练习：
- en: 'Run the following command to view all the available namespaces in our Kubernetes
    cluster:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来查看我们Kubernetes集群中所有可用的命名空间：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should see the following list of namespaces:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下命名空间列表：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The output shows all the namespaces in our Kubernetes cluster. The `default`
    namespace is, as the word implies, the default namespace for all Kubernetes objects
    created without any namespace.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了我们Kubernetes集群中的所有命名空间。`default`命名空间就像字面意思一样，是所有没有任何命名空间创建的Kubernetes对象的默认命名空间。
- en: 'Run the following command to create the pod with the `single-container-pod.yaml`
    pod configuration but in a different namespace:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令，使用`single-container-pod.yaml`的Pod配置创建一个不同命名空间中的Pod：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You should see the following response:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下响应：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you create a pod in a particular namespace, you can only view it by switching
    to that namespace.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在特定命名空间中创建了一个Pod，只能通过切换到该命名空间来查看它。
- en: 'Verify that the pod was created in the `kube-public` namespace:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证Pod是否在`kube-public`命名空间中创建：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You should see the following response:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下响应：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The output here shows that we have successfully created the pod in the `kube-public`
    namespace.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的输出显示我们已经成功在`kube-public`命名空间中创建了Pod。
- en: The next exercise demonstrates how to create a pod in different namespace based
    on a YAML file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个练习演示了如何基于YAML文件在不同的命名空间中创建Pod。
- en: 'Exercise 5.03: Creating a Pod in a Different Namespace by Specifying the Namespace
    in the Pod Configuration YAML file'
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.03：通过在Pod配置YAML文件中指定命名空间来创建不同命名空间中的Pod
- en: In this exercise, we shall add a line to the YAML configuration file to specify
    that all pods created using this file use a specified namespace.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将在YAML配置文件中添加一行，以指定使用指定命名空间创建的所有Pod。
- en: 'Run the following command to view all the available namespaces in our Kubernetes
    cluster:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来查看我们Kubernetes集群中所有可用的命名空间：
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You should see the following list of namespaces:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下命名空间列表：
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next, create a file named `single-container-pod-with-namespace.yaml` with the
    following configuration:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为`single-container-pod-with-namespace.yaml`的文件，其中包含以下配置：
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the following command to create a pod with the `single-container-pod-with-namespace.yaml`
    pod configuration:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令，使用`single-container-pod-with-namespace.yaml`的Pod配置创建一个Pod：
- en: '[PRE19]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You should see the following response:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下响应：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Verify that the pod was created in the `kube-public` namespace:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证Pod是否在`kube-public`命名空间中创建：
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You should see the following list of pods:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下Pod列表：
- en: '[PRE22]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The output shows that the new pod we created occupies the `kube-public` namespace.
    Any other pods created using the `single-container-pod-with-namespace.yaml` pod
    configuration will occupy the same namespace.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示我们创建的新Pod占据了`kube-public`命名空间。使用`single-container-pod-with-namespace.yaml`的Pod配置创建的任何其他Pod都将占据相同的命名空间。
- en: In the following exercise, we shall change the default kubectl namespace so
    that all pods without a defined namespace take our newly defined namespace instead
    of `default`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，我们将更改默认的kubectl命名空间，以便所有没有定义命名空间的Pod都使用我们新定义的命名空间，而不是`default`。
- en: 'Exercise 5.04: Changing the Namespace for All Subsequent kubectl Commands'
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.04：更改所有后续kubectl命令的命名空间
- en: In this exercise, we will change the namespace for all subsequent kubectl commands
    from `default` to `kube-public`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将把所有后续的kubectl命令的命名空间从`default`改为`kube-public`。
- en: 'Run the following command to view all the available namespaces in our Kubernetes
    cluster:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来查看我们Kubernetes集群中所有可用的命名空间：
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should see the following list of namespaces:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下命名空间列表：
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Run the following command to change the namespace for all subsequent requests
    by modifying the current context:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令，通过修改当前上下文来更改所有后续请求的命名空间：
- en: '[PRE25]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You should see the following response:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下的响应：
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Run the following command to list all the pods in the `kube-public` namespace
    without using the `namespace` argument:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令来列出`kube-public`命名空间中的所有pod，而不使用`namespace`参数：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You should see the following list of pods:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下的pod列表：
- en: '[PRE28]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The output shows that the preceding command lists all the pods that we have
    created in the `kube-public` namespace. We saw in *Exercise 5.01*, *Creating a
    Pod with a Single Container*, that the `kubectl get pods` command shows pods in
    the default namespace. But here, we get results from the `kube-public` namespace
    instead.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示，前面的命令列出了我们在`kube-public`命名空间中创建的所有pod。我们在*练习5.01*中看到，使用`kubectl get pods`命令可以显示默认命名空间中的pod。但在这里，我们得到的是`kube-public`命名空间的结果。
- en: 'In this step, we will undo the changes so that it doesn''t affect the upcoming
    exercises in this chapter. We will change the default namespace to `default` again
    to avoid any confusion:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一步中，我们将撤消更改，以便不影响本章中即将进行的练习。我们将再次将默认命名空间更改为`default`，以避免任何混淆：
- en: '[PRE29]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You should see the following response:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下的响应：
- en: '[PRE30]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In this exercise, we have seen how to change and reset the default namespace
    of the context.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们已经学会了如何更改和重置上下文的默认命名空间。
- en: Node
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 节点
- en: 'As you have learned in earlier chapters, nodes are the various machines running
    in our cluster. This field reflects the node in the Kubernetes cluster where this
    pod was running. Knowing what node a pod is running on can help us with debugging
    issues with that pod. Observe the sixth line of the output shown in *Figure 5.1*:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在之前的章节中学到的，节点是在我们的集群中运行的各种机器。这个字段反映了这个pod在Kubernetes集群中运行的节点。知道一个pod在哪个节点上运行可以帮助我们调试该pod的问题。观察*图5.1*中显示的输出的第六行：
- en: '[PRE31]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can list all the nodes in our Kubernetes cluster by running the following
    command:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令列出Kubernetes集群中的所有节点：
- en: '[PRE32]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You should see the following response:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下的响应：
- en: '[PRE33]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In this case, there''s only one node in our cluster because we are using Minikube
    for these exercises:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们的集群中只有一个节点，因为我们在这些练习中使用的是Minikube：
- en: '[PRE34]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If we have more than one node in our cluster, we can configure our pod to run
    on a particular node by adding the following `nodeName` field to the configuration,
    as seen in the sixth line in the previous spec.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的集群中有多个节点，我们可以通过在配置中添加以下`nodeName`字段来配置我们的pod在特定节点上运行，就像在上一个规范的第六行中看到的那样。
- en: Note
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In a production environment, `nodeName` is typically not used for assigning
    a certain pod to run on the desired node. In the next chapter, we will learn about
    `nodeSelector`, which is a better way to control which node the pod gets assigned
    to.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，通常不使用`nodeName`来指定某个pod在所需节点上运行。在下一章中，我们将学习`nodeSelector`，这是一种更好的控制pod分配到哪个节点的方法。
- en: Status
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 状态
- en: 'This field tells us the status of the pod so that we can take appropriate action,
    such as starting or stopping a pod as required. While this demonstration shows
    one of the ways to get the status of the pod, in actual practice, you would want
    to automate actions based on the pod status. Consider the tenth line of the output
    shown in *Figure 5.1*:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字段告诉我们pod的状态，以便我们可以采取适当的行动，比如根据需要启动或停止一个pod。虽然这个演示展示了获取pod状态的一种方式，但在实际操作中，您可能希望根据pod状态自动执行操作。考虑*图5.1*中显示的输出的第十行：
- en: '[PRE35]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This states that the current status of the pod is `Running`. This field reflects
    which phase of its life cycle a pod is in. We will talk about various phases of
    a pod's life cycle in the next section of this chapter.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明pod的当前状态是`Running`。这个字段反映了pod处于生命周期的哪个阶段。我们将在本章的下一节中讨论pod生命周期的各个阶段。
- en: Containers
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器
- en: 'Earlier in this chapter, we saw that we can bundle various containers inside
    a pod. This field lists all the containers that we have created in this pod. Consider
    the output field from line 12 onwards in *Figure 5.1*:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，我们看到我们可以在一个pod中捆绑各种容器。这个字段列出了我们在这个pod中创建的所有容器。考虑*图5.1*中从第12行开始的输出字段：
- en: '![Figure 5.2: Containers field from the describe command'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.2：使用描述命令的容器字段'
- en: '](image/B14870_05_02.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14870_05_02.jpg)'
- en: 'Figure 5.2: Containers field from the describe command'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2：使用描述命令的容器字段
- en: 'We have only one in this case. We can see that the name and the image of the
    container are the same as we specified in the YAML configuration. The following
    is a list of the other fields that we can set:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们只有一个。我们可以看到容器的名称和镜像与我们在YAML配置中指定的相同。以下是我们可以设置的其他字段的列表：
- en: '`Image`: Name of the Docker image'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Image`：Docker镜像的名称'
- en: '`Args`: The arguments to the entry point for the container'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Args`：容器入口点的参数'
- en: '`Command`: The command to run on the container once it starts'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Command`：容器启动后要运行的命令'
- en: '`Ports`: A list of ports to expose from the container'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ports`：要从容器中暴露的端口列表'
- en: '`Env`: A list of environment variables to be set in the container'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Env`：要在容器中设置的环境变量列表'
- en: '`resources`: The resource requirements of the container'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resources`：容器的资源需求'
- en: In the following exercise, we shall create a container using a simple command.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的练习中，我们将使用一个简单的命令创建一个容器。
- en: 'Exercise 5.05: Using CLI Commands to Create a Pod Running a Container'
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.05：使用CLI命令创建运行容器的Pod
- en: In this exercise, we will create a pod that will run a container by running
    a command.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个将通过运行命令来运行容器的pod。
- en: 'First, let''s create a file named `pod-with-container-command.yaml` with the
    following pod configuration:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个名为`pod-with-container-command.yaml`的文件，其中包含以下的pod配置：
- en: '[PRE36]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Run the following command to create the pod using the configuration defined
    in the `pod-with-container-command.yaml` file:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令，使用`pod-with-container-command.yaml`文件中定义的配置来创建pod：
- en: '[PRE37]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'You should see the following response:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到以下的响应：
- en: '[PRE38]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The YAML file we created in the previous step instructs the pod to start a
    container with an Ubuntu image and run the following command:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一步创建的YAML文件指示pod启动一个带有Ubuntu镜像的容器，并运行以下命令：
- en: '[PRE39]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This command should print a dot (`.`) character on a new line every 5 seconds.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令应该每5秒打印一个点（`.`）字符到新的一行。
- en: 'Let''s check the logs of this pod to verify that it''s doing what it''s expected
    to do. To check the logs of a pod, we can use the `kubectl logs` command:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们检查这个pod的日志，以验证它是否按预期运行。要检查pod的日志，我们可以使用`kubectl logs`命令：
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'You should see the following response:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到以下的响应：
- en: '![Figure 5.3: Following logs for command-pod'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.3：命令-pod的日志'
- en: '](image/B14870_05_03.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14870_05_03.jpg)'
- en: 'Figure 5.3: Following logs for command-pod'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3：命令-pod的日志
- en: In the log, which keeps updating periodically, we see a dot (`.`) character
    printed on a new line every 5 seconds. Thus, we have successfully created the
    desired container.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在日志中，我们定期更新，每5秒打印一个点（`.`）字符到新的一行。因此，我们成功创建了期望的容器。
- en: Note
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `-f` flag is to follow the logs on the container. That is, the log keeps
    updating in real-time. If we skip that flag, we will see the logs without following
    them.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`-f`标志是为了跟踪容器上的日志。也就是说，日志会实时更新。如果我们跳过该标志，我们将看到日志而不是跟踪它们。'
- en: In the next exercise, we shall run a container that opens up a port, which is
    something that you would have to do regularly to make the container accessible
    to the rest of your cluster or the internet.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将运行一个打开端口的容器，这是您经常需要做的事情，以使容器可以被集群或互联网访问。
- en: 'Exercise 5.06: Creating a Pod Running a Container That Exposes a Port'
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.06：创建运行公开端口的容器的Pod
- en: In this exercise, we will create a pod that runs a container that will expose
    a port that we can access from outside the pod.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个运行容器的pod，该容器将公开一个可以从pod外部访问的端口。
- en: 'First, let''s create a file named `pod-with-exposed-port.yaml` with the following
    pod configuration:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个名为`pod-with-exposed-port.yaml`的文件，其中包含以下pod配置：
- en: '[PRE41]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Run the following command to create the pod using the `pod-with-exposed-port.yaml`
    file:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令，使用`pod-with-exposed-port.yaml`文件创建pod：
- en: '[PRE42]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You should see the following response:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到以下响应：
- en: '[PRE43]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This pod should create a container and expose its port `80`. We have configured
    the pod to run a container with an `nginx` image, which is a popular web server.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这个pod应该创建一个容器并公开其端口`80`。我们已经配置了pod以运行具有`nginx`镜像的容器，这是一个流行的Web服务器。
- en: 'Next, we will forward port `80` from the pod to localhost:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将把pod的端口`80`转发到localhost：
- en: '[PRE44]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You should see the following response:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到以下响应：
- en: '[PRE45]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This will expose port `80` from the pod to localhost port `80`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把pod的端口`80`公开到localhost的端口`80`。
- en: Note
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：
- en: We will need to keep this command running in one terminal.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在一个终端中保持此命令运行。
- en: Now, we can simply enter either `http://localhost` or `http://127.0.0.1` in
    the address bar of the browser.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在浏览器的地址栏中输入`http://localhost`或`http://127.0.0.1`。
- en: 'Alternatively, we can run the following command and see the HTML source code
    of the default index page in the response:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，我们可以运行以下命令并查看响应中默认索引页面的HTML源代码：
- en: '[PRE46]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You should see the following output:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到以下输出：
- en: '![Figure 5.4: Getting the HTML source using curl'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.4：使用curl获取HTML源代码'
- en: '](image/B14870_05_04.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14870_05_04.jpg)'
- en: 'Figure 5.4: Getting the HTML source using curl'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4：使用curl获取HTML源代码
- en: 'Next, let''s verify that the pod is actually receiving the request by checking
    the logs using the `kubectl logs` command:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们通过使用`kubectl logs`命令来检查日志，验证pod是否实际接收到请求：
- en: '[PRE47]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'You should see the following response:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该会看到以下响应：
- en: '![Figure 5.5: Checking the logs for the nginx pod'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.5：检查nginx pod的日志'
- en: '](image/B14870_05_05.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14870_05_05.jpg)'
- en: 'Figure 5.5: Checking the logs for the nginx pod'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5：检查nginx pod的日志
- en: The log shows that our container that is running an `nginx` image is receiving
    our HTTP request to localhost and responding as expected.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 日志显示，我们运行`nginx`镜像的容器正在接收我们发送到localhost的HTTP请求，并如预期地做出响应。
- en: 'We can also define the minimum and maximum resource allocation for our containers.
    This is useful for managing the resources used by our deployments. This can be
    achieved using the following two fields in the YAML configuration file:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以为我们的容器定义最小和最大资源分配。这对于管理部署使用的资源非常有用。这可以通过YAML配置文件中的以下两个字段来实现：
- en: '`limits`: Describes the maximum amount of resources allowed for this container.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`limits`：描述此容器允许的资源的最大量。'
- en: '`requests`: Describes the minimum amount of resources required for this container.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requests`：描述此容器所需资源的最小量。'
- en: We can use these fields to define the minimum and maximum memory and CPU resources
    for our containers. The CPU resource is measured in CPU units. 1 CPU unit means
    that the container has access to 1 logical CPU core.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这些字段来定义容器的最小和最大内存和CPU资源。CPU资源以CPU单位来衡量。1个CPU单位表示容器可以访问1个逻辑CPU核心。
- en: In the next exercise, we shall create a container with defined resource requirements.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将创建一个具有定义资源需求的容器。
- en: 'Exercise 5.07: Creating a Pod Running a Container with Resource Requirements'
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.07：创建运行具有资源需求的Pod
- en: 'In this exercise, we will create a pod with a container that has resource requirements.
    First of all, let''s see how we can configure the container''s resource requirements:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个带有资源需求的容器的pod。首先，让我们看看如何配置容器的资源需求：
- en: 'Create a file named `pod-with-resource-requirements.yaml` with a pod configuration
    that specifies both `limits` and `requests` for memory and CPU resources, as shown
    here:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`pod-with-resource-requirements.yaml`的文件，其中包含指定内存和CPU资源的`limits`和`requests`的pod配置，如下所示：
- en: '[PRE48]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In this YAML file, we define the minimum memory requirement for the container
    to be 64 MB and the maximum memory that the container can occupy to be 128 MB.
    If the container tries to allocate more than 128 MB of memory, it will be killed
    with a status of `OOMKilled`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个YAML文件中，我们定义了容器的最小内存需求为64MB，容器可以占用的最大内存为128MB。如果容器尝试分配超过128MB的内存，它将被杀死，并显示`OOMKilled`状态。
- en: The minimum CPU requirement for CPU is 0.5 (which can also be understood as
    500 milli-CPUs and can be written as `500m` instead of `0.5`) and the container
    will only be allowed to use a maximum of 1 CPU unit.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: CPU的最小需求为0.5（也可以理解为500毫CPU，可以写为`500m`而不是`0.5`），容器只能使用最多1个CPU单位。
- en: 'Next, we will create the pod that uses this YAML configuration with the `kubectl
    create` command:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`kubectl create`命令创建使用此YAML配置的pod：
- en: '[PRE49]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'You should see the following response:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下响应：
- en: '[PRE50]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Next, let''s make sure the pod is created with the correct resource requirements.
    Check the pod definitions using the `describe` command:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们确保pod以正确的资源需求创建。使用`describe`命令检查pod定义：
- en: '[PRE51]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'You should see the following output:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![Figure 5.6: Describing resource-requirements-pod'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.6：描述资源需求-pod'
- en: '](image/B14870_05_06.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14870_05_06.jpg)'
- en: 'Figure 5.6: Describing resource-requirements-pod'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6：描述资源需求-pod
- en: The highlighted fields in the output show that the pod has been assigned the
    `limits` and `requests` sections that we stated in the YAML file.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中突出显示的字段显示，pod已被分配了我们在YAML文件中声明的`limits`和`requests`部分。
- en: What happens if we define unrealistic resource requirements for our pod? Let's
    explore that in the following exercise.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们为我们的pod定义不切实际的资源需求会发生什么？让我们在以下练习中探讨这个问题。
- en: 'Exercise 5.08: Creating a Pod with Resource Requests That Can''t Be Met by
    Any of the Nodes'
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.08：创建一个资源请求无法满足任何节点的pod
- en: In this exercise, we will create a pod with large resource requests that are
    too big for the nodes in the cluster and see what happens.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个具有对集群中的节点来说太大的资源请求的pod，并查看会发生什么。
- en: 'Create a file named `pod-with-huge-resource-requirements.yaml` with the following
    pod configuration:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`pod-with-huge-resource-requirements.yaml`的文件，其中包含以下pod配置：
- en: '[PRE52]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In this YAML file, we define the minimum requirement to be 64 GB of memory and
    500 CPU cores. It is unlikely that the machine that you are running this exercise
    on would meet those requirements.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个YAML文件中，我们定义了内存的最小需求为64GB，CPU核心为500个。您运行此练习的机器可能不满足这些要求。
- en: 'Next, we will create the pod that uses this YAML configuration with the `kubectl
    create` command:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`kubectl create`命令创建使用此YAML配置的pod：
- en: '[PRE53]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'You should see the following response:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下响应：
- en: '[PRE54]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now, let''s see what''s going on with our pod. Get its status using the `kubectl
    get` command:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们的pod发生了什么。使用`kubectl get`命令获取其状态：
- en: '[PRE55]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'You should see the following response:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下响应：
- en: '![Figure 5.7: Getting the status of huge-resource-requirements-pod'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.7：获取巨大资源需求-pod的状态'
- en: '](image/B14870_05_07.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14870_05_07.jpg)'
- en: 'Figure 5.7: Getting the status of huge-resource-requirements-pod'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7：获取巨大资源需求-pod的状态
- en: We see that the pod has been in the `Pending` state for almost a minute. That's unusual!
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到pod已经处于“挂起”状态将近一分钟。这很不寻常！
- en: 'Let''s dig deeper and describe the pod using the following command:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们深入挖掘，并使用以下命令描述pod：
- en: '[PRE56]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'You should see the following output:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![Figure 5.8: Describing huge-resource-requirements-pod'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.8：描述巨大资源需求的pod'
- en: '](image/B14870_05_08.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14870_05_08.jpg)'
- en: 'Figure 5.8: Describing huge-resource-requirements-pod'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8：描述巨大资源需求的pod
- en: Let's focus on the last line of the output. We can clearly see that there's
    a warning stating that the Kubernetes controller couldn't find any nodes that
    satisfy the CPU and memory requirements of the pod. Hence, the pod scheduling
    has failed.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们专注于输出的最后一行。我们可以清楚地看到警告，指出Kubernetes控制器找不到满足pod的CPU和内存需求的任何节点。因此，pod调度失败了。
- en: To summarize, pod scheduling works on the basis of resource requirements. A
    pod will only be scheduled on a node that satisfies all its resource requirements.
    If we do not specify a resource (memory or CPU) limit, there's no upper bound
    on the number of resources a pod can use.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，pod调度是基于资源需求的。一个pod只会被调度到满足其所有资源需求的节点上。如果我们不指定资源（内存或CPU）限制，那么pod可以使用的资源数量就没有上限。
- en: This poses the risk of one bad pod consuming too much CPU or allocating too
    much memory that impacts the other pods running in the same namespace/cluster.
    Hence, it's a good idea to add resource requests and limits to the pod configuration
    in a production environment.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这带来了一个风险，即一个糟糕的pod消耗了太多的CPU或分配了太多的内存，影响了在同一命名空间/集群中运行的其他pod。因此，在生产环境中，向pod配置添加资源请求和限制是一个好主意。
- en: As mentioned earlier in the chapter, a pod can run more than one container.
    In the following exercise, we will create a pod with more than one container.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章前面提到的，一个pod可以运行多个容器。在接下来的练习中，我们将创建一个具有多个容器的pod。
- en: 'Exercise 5.09: Creating a Pod with Multiple Containers Running inside It'
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.09：创建一个包含多个容器的pod
- en: 'In this exercise, we will create a pod with multiple containers. For that,
    we can use the configuration that we used in the previous section, with the only
    difference being that the `containers` field will now contain more than one container
    spec. Follow these steps to complete the exercise:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个具有多个容器的pod。为此，我们可以使用在上一节中使用的配置，唯一的区别是“容器”字段现在将包含多个容器规范。按照以下步骤完成练习：
- en: 'Create a file named `multiple-container-pod.yaml` with the following pod configuration:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`multiple-container-pod.yaml`的文件，其中包含以下pod配置：
- en: '[PRE57]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Next, we will create a pod that uses the preceding YAML configuration with
    the `kubectl create` command:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`kubectl create`命令创建一个使用前面的YAML配置的pod：
- en: '[PRE58]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'You should see the following response:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下响应：
- en: '[PRE59]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Next, we will describe the pod and see what containers it is running:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将描述pod并查看它正在运行的容器：
- en: '[PRE60]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'You should see the following output:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![Figure 5.9: Describing multi-container-pod'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.9：描述多容器pod'
- en: '](image/B14870_05_09.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14870_05_09.jpg)'
- en: 'Figure 5.9: Describing multi-container-pod'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9：描述多容器pod
- en: As can be seen from the preceding output, we have two containers running in
    a single pod. Now, we need to make sure we can access the logs from either container.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的输出可以看出，我们有两个容器在一个单独的pod中运行。现在，我们需要确保我们可以访问任一容器的日志。
- en: 'We can specify the container name to get the logs for a particular container
    running in a pod, as shown here:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以指定容器名称来获取运行在pod中的特定容器的日志，如下所示：
- en: '[PRE61]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'For example, to see the logs for a second container that is printing out dots
    on a new line every 5 seconds, use this command:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要查看第二个容器的日志，该容器每5秒在新行上打印出点，使用此命令：
- en: '[PRE62]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'You should see the following response:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下响应：
- en: '![Figure 5.10: The logs for second-container inside multi-container-pod'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.10：多容器pod中second-container的日志'
- en: '](image/B14870_05_10.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14870_05_10.jpg)'
- en: 'Figure 5.10: The logs for second-container inside multi-container-pod'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10：多容器pod中second-container的日志
- en: The output we see here is similar to *Exercise 5.05*, *Using CLI Commands to
    Create a Pod Running a Container*, as we have essentially used a similar container
    as we defined there.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到的输出与*练习5.05*，*使用CLI命令创建运行容器的pod*类似，因为我们基本上使用了与那里定义的类似的容器。
- en: Thus, we have created a pod with multiple containers and accessed the logs of
    the desired container.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经创建了一个具有多个容器的pod，并访问了所需容器的日志。
- en: Life Cycle of a Pod
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pod的生命周期
- en: Now that we know how to run a pod and how to configure it for our use cases,
    in this section, we will talk about the life cycle of a pod to understand how
    it works in more detail.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何运行一个pod以及如何为我们的用例配置它，在本节中，我们将讨论pod的生命周期，以了解它的工作原理。
- en: Phases of a Pod
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pod的阶段
- en: 'Every pod has a pod status that tells us what stage of its life cycle a pod
    is in. We can see the pod status by running the `kubectl get` command:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 每个pod都有一个pod状态，告诉我们pod处于生命周期的哪个阶段。我们可以通过运行`kubectl get`命令来查看pod状态：
- en: '[PRE63]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'You will see the following response:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下响应：
- en: '[PRE64]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: For our first pod, named `first-pod`, we see that the pod is in the `Running`
    state.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的第一个名为`first-pod`的pod，我们看到pod处于`运行`状态。
- en: 'Let''s see what the different states that a pod can have in its life cycle
    are:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看pod在其生命周期中可能具有的不同状态：
- en: '`Pending`: This means that the pod has been submitted to the cluster, but the
    controller hasn''t created all its containers yet. It may be downloading images
    or waiting for the pod to be scheduled on one of the cluster nodes.'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`挂起`：这意味着pod已经提交到集群，但控制器尚未创建所有的容器。它可能正在下载镜像或等待pod被调度到集群节点之一。'
- en: '`Running`: This state means that the pod has been assigned to one of the cluster
    nodes and at least one of the containers is either running or is in the process
    of starting up.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`运行`：这个状态意味着pod已经分配给集群节点，并且至少一个容器正在运行或正在启动过程中。'
- en: '`Succeeded`: This state means that the pod has run, and all of its containers
    have been terminated with success.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`成功`：这个状态意味着pod已经运行，并且所有的容器都已成功终止。'
- en: '`Failed`: This state means the pod has run and at least one of the containers
    has terminated with a non-zero exit code, that is, it has failed to execute its commands.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`失败`：这个状态意味着pod已经运行，至少一个容器以非零退出代码终止，也就是说，它未能执行其命令。'
- en: '`Unknown`: This means that the state of the pod could not be found. This may
    be because of the inability of the controller to connect with the node that the
    pod was assigned to.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`未知`：这意味着无法找到pod的状态。这可能是因为控制器无法连接到分配给pod的节点。'
- en: Note
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `get pod` command cannot get evicted or deleted pods. To do that, you can
    use the `--show-all` flag, but it has been deprecated since Kubernetes v1.15.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`get pod`命令无法获取被驱逐或删除的pod。为此，您可以使用`--show-all`标志，但自Kubernetes v1.15以来已被弃用。'
- en: Probes/Health Checks
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探针/健康检查
- en: 'A probe is a health check that can be configured to check the health of the
    containers running in a pod. A probe can be used to determine whether a container
    is running or ready to receive requests. A probe may return the following results:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 探针是可以配置为检查运行在pod中的容器的健康状况的健康检查。探针可以用来确定容器是否正在运行或准备好接收请求。探针可能返回以下结果：
- en: '`Success`: The container passed the health check.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`成功`：容器通过了健康检查。'
- en: '`Failure`: The container failed the health check.'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`失败`：容器未通过健康检查。'
- en: '`Unknown`: The health check failed for unknown reasons.'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`未知`：健康检查由于未知原因失败。'
- en: Types of Probes
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探针的类型
- en: The following types of probes are available for us to use.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下类型的探针。
- en: Liveness Probe
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活跃探针
- en: This is a health check that's used to determine whether a particular container
    is running or not. If a container fails the liveness probe, the controller will
    try to restart the pod on the same node according to the restart policy configured
    for the pod.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于确定特定容器是否正在运行的健康检查。如果容器未通过活跃探针，控制器将根据为Pod配置的重启策略尝试在同一节点上重新启动Pod。
- en: It's a good idea to specify a liveness probe when we want the container to be
    terminated and restarted when a particular check fails.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 当特定检查失败时，指定活跃探针并希望容器在失败时被终止并重新启动是一个好主意。
- en: Readiness Probe
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 就绪探针
- en: This is a health check that's used to determine whether a particular container
    is ready to receive requests or not. How we define the readiness of a container
    depends largely on the application running inside the container.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于确定特定容器是否准备好接收请求的健康检查。我们如何定义容器的就绪状态在很大程度上取决于容器内运行的应用程序。
- en: For example, for a container serving a web application, readiness may mean that
    the container has loaded all static assets, established a connection with the
    database, started the webserver, and opened a specific port on the host to start
    serving requests. On the other hand, for a container serving some data, the readiness
    probe should succeed only when it has loaded all the data from disk and is ready
    to start serving the requests for that data.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于一个提供Web应用程序的容器，就绪可能意味着容器已经加载了所有静态资产，与数据库建立了连接，启动了Web服务器，并在主机上打开了一个特定的端口来开始提供请求。另一方面，对于提供一些数据的容器，就绪探针只有在它从磁盘加载了所有数据并准备好开始为该数据提供请求时才能成功。
- en: If a container fails its readiness probe, the Kubernetes controller will ensure
    that the pod doesn't receive any requests. If a container specifies a readiness
    probe, its default state will be `Failure` until the readiness probe succeeds.
    The container will start receiving requests only after the readiness probe returns
    with the `Success` state. If no readiness probe is configured, the container will
    start receiving requests as soon as it starts.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个容器未通过就绪探针，Kubernetes控制器将确保该Pod不会收到任何请求。如果容器指定了就绪探针，其默认状态将是“失败”，直到就绪探针成功。只有在就绪探针返回“成功”状态后，容器才会开始接收请求。如果没有配置就绪探针，容器将在启动后立即开始接收请求。
- en: Configuration of Probes
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探针的配置
- en: 'There are a bunch of generic fields we can use to configure the probes:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一堆通用字段来配置探针：
- en: '![Figure 5.11: Table showing configuration fields for probes'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.11：显示探针配置字段的表格'
- en: '](image/B14870_05_11.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14870_05_11.jpg)'
- en: 'Figure 5.11: Table showing configuration fields for probes'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11：显示探针配置字段的表格
- en: Implementation of Probes
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探针的实现
- en: Probes (liveness or readiness) can be implemented by passing a command to the
    container, getting it to fetch some resources, or trying to connect to it, as
    we shall see in this section. We can use different implementations for liveness
    and readiness probes within the same container.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 探针（活跃或就绪）可以通过向容器传递命令、让其获取一些资源，或尝试连接到它来实现，正如我们将在本节中看到的那样。我们可以在同一个容器中使用不同的实现来进行活跃和就绪探针。
- en: Command Probe
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令探针
- en: In the command implementation of a probe, the controller will get the container
    to execute the specified command in order to perform the probe on the container.
    For this implementation, we use the `command` field. This field specifies the
    command to execute in order to perform the probe on the container. It can either
    be a string or an array.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在探针的命令实现中，控制器将使容器执行指定的命令以对容器执行探针。对于此实现，我们使用“command”字段。该字段指定要执行的命令以对容器执行探针。它可以是字符串或数组。
- en: 'The following example shows how liveness and readiness probe configuration
    can be used in the container spec:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了如何在容器规范中使用活跃性和就绪性探针配置：
- en: '[PRE65]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: HTTP Request Probe
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: HTTP请求探针
- en: In this type of probe, the controller will send a GET HTTP request to the given
    address (host and port) to perform the probe on the container. It's possible to
    set the custom HTTP headers to be sent in the probe request.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种类型的探针中，控制器将向给定地址（主机和端口）发送GET HTTP请求以对容器执行探针。可以设置要在探针请求中发送的自定义HTTP标头。
- en: 'We can set the following fields to configure an HTTP request probe:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以设置以下字段来配置HTTP请求探针：
- en: '`host`: Hostname to which the request will be made. It defaults to the pod
    IP address.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机：将发出请求的主机名。默认为pod IP地址。
- en: '`path`: Path to make the request to.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径：发出请求的路径。
- en: '`port`: Name or number of the port to make the request to.'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口：要发出请求的端口的名称或编号。
- en: '`httpHeaders`: Custom headers to be set in the request.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “httpHeaders”：要在请求中设置的自定义标头。
- en: '`scheme`: Scheme to use while making the request. The default value is HTTP.'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方案：在发出请求时使用的方案。默认值为HTTP。
- en: 'Here''s an example of an HTTP request probe for liveness and readiness:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个用于活跃性和就绪性的HTTP请求探针的示例：
- en: '[PRE66]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: TCP Socket Probe
  id: totrans-312
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TCP套接字探针
- en: 'In this implementation of a probe, the controller will try to establish a connection
    on the given host and the specified port number. We can use the following two
    fields for this probe:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种探针的实现中，控制器将尝试在给定的主机和指定的端口号上建立连接。我们可以使用以下两个字段进行此探针：
- en: '`host`: Hostname to which the connection will be established. It defaults to
    the pod IP address.'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机：将建立连接的主机名。默认为pod IP地址。
- en: '`port`: Name or number of the port to connect to.'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 端口：要连接的端口的名称或编号。
- en: 'Here''s an example of a TCP socket probe:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个TCP套接字探针的示例：
- en: '[PRE67]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Restart Policy
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重启策略
- en: 'We can specify `restartPolicy` in the pod specification to instruct the controller
    about the conditions required to restart the pod. The default value of `restartPolicy`
    is `Always`. It can take the following values:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在pod规范中指定“restartPolicy”以指示控制器重新启动pod所需的条件。 “restartPolicy”的默认值为“Always”。它可以采用以下值：
- en: '`Always`: Always restart the pod when it terminates.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “Always”：当pod终止时始终重新启动pod。
- en: '`OnFailure`: Restart the pod only when it terminates with failure.'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “OnFailure”：仅在pod以失败终止时重新启动pod。
- en: '`Never`: Never restart the pod after it terminates.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永不：在终止后永不重新启动pod。
- en: If we want the pod to crash and restart when it has some issues or becomes unhealthy,
    we should set the restart policy to either `Always` or `OnFailure`.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望pod在出现问题或变得不健康时崩溃并重新启动，我们应该将重启策略设置为“Always”或“OnFailure”。
- en: In the following exercise, we shall create a liveness probe with the command
    implementation.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的练习中，我们将创建一个带有命令实现的活跃探针。
- en: 'Exercise 5.10: Creating a Pod Running a Container with a Liveness Probe and
    No Restart Policy'
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.10：创建一个运行带有活跃探针和无重启策略的容器的pod
- en: In this exercise, we will create a pod with a liveness probe and no restart
    policy. Not specifying a restart policy for a pod means that the default policy
    of `Always` will be used.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个带有活跃探针和无重启策略的pod。未为pod指定重启策略意味着将使用“Always”的默认策略。
- en: 'Create `liveness-probe.yaml` with the following pod configuration:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`liveness-probe.yaml`，使用以下pod配置：
- en: '[PRE68]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'This pod configuration means that there will be a container created from an
    Ubuntu image and the following command will be run once it starts:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 这个pod配置意味着将会创建一个来自Ubuntu镜像的容器，并且一旦它启动，将运行以下命令：
- en: '[PRE69]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The preceding command creates an empty file at path `/tmp/live`, sleeps for
    30 seconds, deletes the `/tmp/live` file, and then sleeps for 10 minutes before
    terminating with success.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令在路径`/tmp/live`创建一个空文件，休眠30秒，删除`/tmp/live`文件，然后休眠10分钟后成功终止。
- en: 'Next, we have a liveness probe that executes the following command every 5
    seconds with an initial delay of 5 seconds:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有一个活跃探针，它每5秒执行一次以下命令，初始延迟为5秒：
- en: '[PRE70]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Run the following command to create the pod using `liveness-probe.yaml`:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令使用`liveness-probe.yaml`创建pod：
- en: '[PRE71]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'When the container starts, the liveness probe will succeed because the command
    will execute successfully. Now, let''s wait for at least 30 seconds and run the
    `describe` command:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当容器启动时，活跃探针将成功，因为命令将成功执行。现在，让我们等待至少30秒，然后运行`describe`命令：
- en: '[PRE72]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'You should see the following output:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![Figure 5.12: Describing liveness-probe: first failure'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.12：描述活跃探针：第一次失败'
- en: '](image/B14870_05_12.jpg)'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14870_05_12.jpg)'
- en: 'Figure 5.12: Describing liveness-probe: first failure'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.12：描述活跃探针：第一次失败
- en: In the last line, which is highlighted, we can see that the liveness probe has
    failed for the first time.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一行，也就是突出显示的内容中，我们可以看到活跃探针已经第一次失败。
- en: 'Let''s wait for a few more seconds until the probe has failed three times and
    run the same command again:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再等待几秒，直到探针失败三次，然后再次运行相同的命令：
- en: '[PRE73]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'You should see the following output:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![Figure 5.13: Describing liveness-probe: after three failures'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.13：描述活跃探针：三次失败后'
- en: '](image/B14870_05_13.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14870_05_13.jpg)'
- en: 'Figure 5.13: Describing liveness-probe: after three failures'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.13：描述活跃探针：三次失败后
- en: The last two highlighted lines in the output tell us that the liveness probe
    has failed three times. And now, the pod will be killed and restarted.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中最后两行突出显示的内容告诉我们，活跃探针已经失败了三次。现在，该pod将被杀死并重新启动。
- en: 'Next, we will verify that the pod has been restarted at least once using the
    following command:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用以下命令验证该pod至少已经重新启动了一次：
- en: '[PRE74]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'You should see the following response:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下响应：
- en: '[PRE75]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: This output shows that the pod has been restarted upon failing the liveness
    probe.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出显示，该pod在活跃探针失败后已经重新启动。
- en: Let's now take a look at what happens if we set the restart policy to `Never`.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如果将重启策略设置为`Never`会发生什么。
- en: 'Exercise 5.11: Creating a Pod Running a Container with a Liveness Probe and
    a Restart Policy'
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.11：创建一个运行有活跃探针和重启策略的容器的Pod
- en: 'In this exercise, we will use the same pod configuration from the last exercise,
    the only difference being that the `restartPolicy` field will be set to `Never`.
    Follow these steps to complete the activity:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用上一个练习中相同的pod配置，唯一的区别是`restartPolicy`字段将被设置为`Never`。按照以下步骤完成活动：
- en: 'Create `liveness-probe-with-restart-policy.yaml` with the following pod configuration:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`liveness-probe-with-restart-policy.yaml`，使用以下pod配置：
- en: '[PRE76]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Run the following command to create the pod using `liveness-probe.yaml`:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令使用`liveness-probe.yaml`创建pod：
- en: '[PRE77]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'You should see the following response:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下响应：
- en: '[PRE78]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Let''s wait for around one minute and run the `describe` command:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们等待大约一分钟，然后运行`describe`命令：
- en: '[PRE79]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'You should see the following output:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下输出：
- en: '![Figure 5.14: Describing liveness-probe-never-restart'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.14：描述活跃探针-永不重启'
- en: '](image/B14870_05_14.jpg)'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14870_05_14.jpg)'
- en: 'Figure 5.14: Describing liveness-probe-never-restart'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14：描述活跃探针-永不重启
- en: As we can see, in the last two highlighted lines, the controller will only kill
    the container and will never attempt to restart it, respecting the restart policy
    specified in the pod specification.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，在最后两行中，控制器只会杀死容器，而不会尝试重新启动它，遵守了pod规范中指定的重启策略。
- en: In the following exercise, we shall take a look at the implementation of a readiness probe.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的练习中，我们将看一下就绪探针的实现。
- en: 'Exercise 5.12: Creating a Pod Running a Container with a Readiness Probe'
  id: totrans-372
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5.12：创建一个运行带有就绪探针的容器的Pod
- en: In this exercise, we will create a pod with a container that has a readiness
    probe.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个带有就绪探针的pod。
- en: 'Create a file named `readiness-probe.yaml` with the following pod configuration:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`readiness-probe.yaml`的文件，其中包含以下的pod配置：
- en: '[PRE80]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The preceding pod configuration specifies that there will be a container created
    from an Ubuntu image and the following command will be run once it starts:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的pod配置指定将从Ubuntu镜像创建一个容器，并且一旦启动，将运行以下命令：
- en: '[PRE81]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: The preceding command sleeps for 30 seconds, creates an empty file at `/tmp/ready`,
    and then sleeps for 10 minutes before terminating with success.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令休眠30秒，在`/tmp/ready`创建一个空文件，然后再休眠10分钟后以成功终止。
- en: 'Next, we have a readiness probe that executes the following command every 5
    seconds with an initial delay of 10 seconds:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有一个就绪探针，它每5秒执行一次以下命令，初始延迟为10秒：
- en: '[PRE82]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Run the following command to create the pod using `readiness-probe.yaml`:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令使用`readiness-probe.yaml`创建pod：
- en: '[PRE83]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'You should see the following response:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下的响应：
- en: '[PRE84]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: When the container starts, the default value of the readiness probe will be
    `Failure`. It will wait for 10 seconds before executing the probe for the first time.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 当容器启动时，就绪探针的默认值将是`Failure`。它将在第一次执行探测之前等待10秒。
- en: 'Let''s check the state of the pod:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们来检查一下pod的状态：
- en: '[PRE85]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'You should see the following response:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下的响应：
- en: '[PRE86]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: We can see that the pod is not ready yet.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到该pod还没有准备好。
- en: 'Now, let''s try to find more information about this pod using the `describe`
    command. If we wait for more than 10 seconds after the container starts, we will
    see that the readiness probe starts failing:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用`describe`命令找到有关该pod的更多信息。如果在容器启动后等待超过10秒，我们将看到就绪探针开始失败：
- en: '[PRE87]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'You should see the following output:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下的输出：
- en: '![Figure 5.15: Describing readiness-probe'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.15：描述就绪探针'
- en: '](image/B14870_05_15.jpg)'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/B14870_05_15.jpg)'
- en: 'Figure 5.15: Describing readiness-probe'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15：描述就绪探针
- en: That output tells us that the readiness probe has failed once already. If we
    wait for a while and run that command again, we will see that the readiness probe
    keeps failing until 30 seconds have elapsed since the starting time of the container.
    After that, the readiness probe will start succeeding since a file will be created
    at `/tmp/ready`.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 该输出告诉我们，就绪探针已经失败了一次。如果我们等一会儿，再次运行该命令，我们将看到就绪探针一直失败，直到容器的启动时间已经过去30秒。之后，就绪探针将开始成功，因为在`/tmp/ready`将创建一个文件。
- en: 'Let''s check the state of the pod again:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再次检查一下pod的状态：
- en: '[PRE88]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'You should see the following response:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下的响应：
- en: '[PRE89]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: We can see that the probe has succeeded, and the pod is now in the `Ready` state.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到探针已经成功，pod现在处于`Ready`状态。
- en: Best Practices While Using Probes
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在使用探针时的最佳实践
- en: 'An incorrect use of probes will not help you achieve the intended purpose or
    may even break a pod. Follow these practices to make proper use of probes:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 错误使用探针将无法帮助您实现预期的目的，甚至可能破坏pod。遵循这些实践以正确使用探针：
- en: For liveness probes, `initialDelaySeconds` should be significantly larger than
    the time it takes for the application to start up. Otherwise, the container is
    likely to get stuck in a restart loop where it keeps failing the liveness probe
    and hence keeps on getting restarted by the controller.
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于活跃探针，“initialDelaySeconds”应该比应用程序启动所需的时间大得多。否则，容器很可能会陷入重启循环，因为它一直无法通过活跃探针，因此一直被控制器重新启动。
- en: For readiness probes, `initialDelaySeconds` could be small because we want to
    enable the traffic to the pod as soon as the container is ready, and polling the
    container more frequently while it's starting up doesn't cause any harm in most
    cases.
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于就绪探针，“initialDelaySeconds”可以很小，因为我们希望在容器准备就绪后尽快启用对pod的流量，并且在启动过程中更频繁地轮询容器在大多数情况下不会造成任何伤害。
- en: For readiness probes, we should be careful with setting `failureThreshold` to
    make sure our readiness probe doesn't give up prematurely in case of temporary
    outages or issues with the system.
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于就绪探针，我们应该小心设置“failureThreshold”，以确保我们的就绪探针在临时中断或系统问题的情况下不会过早放弃。
- en: 'Activity 5.01: Deploying an Application in a Pod'
  id: totrans-408
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动5.01：在pod中部署应用程序
- en: Imagine you are working with a team of developers who have built an awesome
    application that they want you to deploy in a pod. The application has a process
    that starts up and takes approximately 20 seconds to load all the required assets.
    Once the application starts up, it's ready to start receiving requests. If, for
    some reason, the application crashes, you would want the pod to restart itself
    as well. They have given you the task of creating the pod using a configuration
    that will satisfy these needs for the application developers in the best way possible.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你正在与一组开发人员合作，他们构建了一个很棒的应用程序，希望你将其部署到一个pod中。该应用程序有一个启动过程，大约需要20秒来加载所有所需的资源。一旦应用程序启动，它就准备好开始接收请求。如果出现应用程序崩溃的情况，你也希望pod能够重新启动。他们让你使用一个配置来创建pod，以最好的方式满足应用程序开发人员的需求。
- en: 'We have provided a pre-made application image to emulate the behavior of the
    application mentioned above. You can get it by using this line in your pod spec:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了一个预制的应用程序镜像，以模拟上述应用程序的行为。你可以在pod规范中使用这行来获取它：
- en: '[PRE90]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Note
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Ideally, you would want to create this pod in a different namespace to keep
    it separate from the rest of the stuff that you created during the exercises.
    So, feel free to create a namespace and create the pod in that namespace.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你希望在不同的命名空间中创建这个pod，以使其与你在练习期间创建的其他内容分开。所以，可以随意创建一个命名空间，并在该命名空间中创建pod。
- en: 'Here are the high-level steps to complete this activity:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完成此活动的高级步骤：
- en: Create a new namespace for your pod.
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的pod创建一个新的命名空间。
- en: Create a pod configuration that's suitable for the application requirements.
    Ensure that you use an appropriate namespace, restart policy, readiness and liveness
    probes, and container image given by application developers.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个适合应用程序需求的pod配置。确保你使用适当的命名空间、重启策略、就绪和活跃探针，以及应用程序开发人员提供的容器镜像。
- en: Create a pod using the configuration you've just created.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你刚刚创建的配置创建一个pod。
- en: Make sure the pod is running as per the requirements.
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保pod按照要求运行。
- en: Note
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The solution to this activity can be found at the following address: [https://packt.live/304PEoD](https://packt.live/304PEoD).'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 此活动的解决方案可以在以下地址找到：[https://packt.live/304PEoD](https://packt.live/304PEoD)。
- en: Summary
  id: totrans-421
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have explored various components of pod configuration and
    learned when to use what. We should now be able to create a pod and choose the
    right values of various fields in the pod configuration according to the needs
    of your application. This ability puts us in a position where we can use our strong
    understanding of this essential, basic building block and extend it to develop
    a full-fledged application that's deployed reliably.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经探讨了Pod配置的各种组件，并学会了在何时使用何种组件。现在我们应该能够创建一个Pod，并根据应用程序的需求选择Pod配置中各个字段的正确值。这种能力使我们能够利用我们对这个基本的重要构建块的深刻理解，并将其扩展到开发一个可靠部署的完整应用程序。
- en: In the next chapter, we will discuss how we can add labels and arbitrary metadata
    to pods and use them to identify or search for pods. That will help us to organize
    our pods as well as choose a subset of them when required.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何向Pod添加标签和任意元数据，并使用它们来识别或搜索Pod。这将帮助我们组织我们的Pod，并在需要时选择它们的子集。
