- en: Automating Application Delivery with F5 LTM and Ansible
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用F5 LTM和Ansible自动化应用交付
- en: 'In this chapter, we will outline how to automate F5 BIG-IP platforms running
    as **load balancers** (**LBs**) or **Local Traffic Manager** (**LTM**) appliances.
    We will explore how to interact with F5 LTM nodes using Ansible and how to onboard
    these devices and accelerate application deployment hosted by these devices, using
    various Ansible modules. We will base our illustration on the following sample
    network diagram. The diagram shows single F5 LTM nodes connected to **direct current**
    (**DC**) switches:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将概述如何自动化运行作为**负载均衡器**（**LBs**）或**本地流量管理器**（**LTM**）设备的F5 BIG-IP平台。我们将探讨如何使用Ansible与F5
    LTM节点交互，以及如何通过各种Ansible模块对这些设备进行加速应用部署。我们将以以下样本网络图为基础进行说明。该图显示了连接到**直流**（**DC**）交换机的单个F5
    LTM节点：
- en: '![](assets/27890347-0c13-4b72-946d-5d198bf422b7.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/27890347-0c13-4b72-946d-5d198bf422b7.png)'
- en: 'The main recipes covered in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要涵盖的配方如下：
- en: Building an Ansible network inventory
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Ansible网络清单
- en: Connecting and authenticating to BIG-IP devices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接和认证到BIG-IP设备
- en: Configuring generic system options on BIG-IP devices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在BIG-IP设备上配置通用系统选项
- en: Configuring interfaces and trunks on BIG-IP devices
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在BIG-IP设备上配置接口和干线
- en: Configuring **virtual local area networks** (**VLANs**) and **self-internet
    protocols** (**self-IPs**) on BIG-IP devices
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在BIG-IP设备上配置**虚拟局域网**（**VLANs**）和**自身互联网协议**（**self-IPs**）
- en: Configuring static routes on BIG-IP devices
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在BIG-IP设备上配置静态路由
- en: Deploying nodes on BIG-IP devices
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在BIG-IP设备上部署节点
- en: Configuring a load balancing pool on BIG-IP devices
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在BIG-IP设备上配置负载均衡池
- en: Configuring virtual servers on BIG-IP devices
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在BIG-IP设备上配置虚拟服务器
- en: Retrieving operational data from BIG-IP nodes
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从BIG-IP节点检索操作数据
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All the code used in the recipes in this chapter can be found on the following
    GitHub repository: [https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch5_f5](https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch5_f5).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有代码都可以在以下GitHub存储库中找到：[https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch5_f5](https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch5_f5)。
- en: 'The following are the software releases on which this chapter is based:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章基于以下软件版本：
- en: Ansible machine running CentOS 7
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行CentOS 7的Ansible机器
- en: Ansible 2.9
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 2.9
- en: F5 BIG-IP device running BIG-IP 13.1.1, Build 0.0.4 final
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行BIG-IP 13.1.1，Build 0.0.4 final的F5 BIG-IP设备
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[https://bit.ly/2RE5tOL](https://bit.ly/2RE5tOL)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/2RE5tOL](https://bit.ly/2RE5tOL)'
- en: Building an Ansible network inventory
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Ansible网络清单
- en: In this recipe, we will outline how to build and structure our Ansible inventory
    to describe our sample F5 BIG-IP nodes. Building an Ansible inventory is a mandatory
    step in telling Ansible how to connect to the managed devices.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将概述如何构建和组织我们的Ansible清单，以描述我们的样本F5 BIG-IP节点。构建Ansible清单是告诉Ansible如何连接到受管设备的强制步骤。
- en: Getting ready
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: We will create a new folder that will host all the files that we will create
    in this chapter. The new folder is named `ch5_f5`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的文件夹，用于存放本章中创建的所有文件。新文件夹名为`ch5_f5`。
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Inside the new folder, `ch5_f5`, we create a `hosts` file with the following
    content:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新文件夹`ch5_f5`中，我们创建一个`hosts`文件，其中包含以下内容：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create an `Ansible.cfg` file, as shown in the following code:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Ansible.cfg`文件，如下所示：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Since we have a single LTM node in our network topology, this simplifies our
    Ansible inventory file. In our `hosts` file, we create a single group (called
    `ltm`) and we specify a single node in it, which is called `ltm01`. We specify
    the management IP addresses for the nodes, using the `Ansible_host` parameter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的网络拓扑中只有一个LTM节点，这简化了我们的Ansible清单文件。在我们的`hosts`文件中，我们创建一个单一组（称为`ltm`），并在其中指定一个单一节点，名为`ltm01`。我们使用`Ansible_host`参数指定节点的管理IP地址。
- en: The management port on the BIG-IP device must have this IP address configured,
    and IP connectivity between the Ansible control machine and the BIG-IP node is
    established over this management port.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: BIG-IP设备的管理端口必须配置此IP地址，并且Ansible控制机与BIG-IP节点之间的IP连接必须通过此管理端口建立。
- en: Finally, we create the `Ansible.cfg` file and configure it to point to our `hosts`
    file, to be used as an Ansible inventory file. We disable the setup module, which
    is not needed when running Ansible against network nodes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建`Ansible.cfg`文件并配置它指向我们的`hosts`文件，以用作Ansible清单文件。我们禁用了setup模块，在针对网络节点运行Ansible时不需要它。
- en: Connecting and authenticating to BIG-IP devices
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接和认证到BIG-IP设备
- en: In this recipe, we will outline how to connect to BIG-IP nodes from Ansible
    via the **Representational State Transfer** (**REST**) API exposed by BIG-IP device,
    in order to start managing the devices from Ansible. We are going to use usernames
    and passwords to authenticate to the BIG-IP node in our topology.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将概述如何通过BIG-IP设备暴露的**表述状态转移**（**REST**）API从Ansible连接到BIG-IP节点，以便从Ansible开始管理这些设备。我们将使用用户名和密码来对我们拓扑中的BIG-IP节点进行身份验证。
- en: Getting ready
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: In order to follow along with this recipe, an Ansible inventory file should
    be constructed as per the previous recipe. IP reachability must be established
    between the Ansible control machine and all the devices in the network.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了按照这个示例进行操作，应该按照前面的示例构建一个Ansible清单文件。Ansible控制机和网络中所有设备之间必须建立IP可达性。
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Inside the `ch5_f5` folder, create a `group_vars` folder.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ch5_f5`文件夹中，创建一个`group_vars`文件夹。
- en: 'Create a new `group_vars/all.yml` file with the following connection parameters
    settings:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`group_vars/all.yml`文件，其中包含以下连接参数设置：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a new playbook with the name `pb_f5_onboard.yml`, with the following
    task to create new system users:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`pb_f5_onboard.yml`的新的playbook，其中包含以下任务来创建新的系统用户：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Update the `pb_f5_onboard.yml` playbook with the following task to update the
    admin user account:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`pb_f5_onboard.yml` playbook以更新管理员用户帐户：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Ansible uses the  REST API on the F5 LTM nodes in order to manage the BIG-IP
    nodes. Ansible establishes an HTTPS connection to the BIG-IP node and uses it
    as the transport mechanism to invoke the REST API on the BIG-IP node. In order
    to establish the HTTPS connection with the BIG-IP system, we need to provide some
    parameters in order for Ansible to initiate and establish a connection with the
    BIG-IP node. These parameters include the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible使用F5 LTM节点上的REST API来管理BIG-IP节点。Ansible建立一个HTTPS连接到BIG-IP节点，并将其用作调用BIG-IP节点上的REST
    API的传输机制。为了与BIG-IP系统建立HTTPS连接，我们需要提供一些参数，以便Ansible启动并与BIG-IP节点建立连接。这些参数包括以下内容：
- en: Username/password to authenticate with the BIG-IP REST API
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于认证BIG-IP REST API的用户名/密码
- en: IP address and port, over which we can reach the REST API endpoint on the BIG-IP
    node
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP地址和端口，通过这些我们可以访问BIG-IP节点上的REST API端点
- en: Whether we validate the certificate for the BIG-IP node negotiated over the
    HTTPS session
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们验证通过HTTPS会话协商的BIG-IP节点的证书
- en: We include all these parameters in a dictionary called `conn_parameters`, which
    we include in the `group_vars/all.yml` file, so as to be applied on any BIG-IP
    node.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将所有这些参数包含在一个名为`conn_parameters`的字典中，并将其包含在`group_vars/all.yml`文件中，以便应用于任何BIG-IP节点。
- en: By default, a new LTM device comes with the `admin/admin` default username and
    password for the **graphical user interface** (**GUI**) and REST API access. We
    use these credentials as the user and password variables inside the `conn_parameters`
    dictionary, and we specify the `Ansible_host` variable as the IP address over
    which the REST API can be established over port `443`. Finally, we disable certificate
    validation, since the certificate on the BIG-IP node is self-signed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，新的LTM设备使用`admin/admin`默认用户名和密码用于**图形用户界面**（**GUI**）和REST API访问。我们将这些凭据作为`conn_parameters`字典中的用户和密码变量，并将`Ansible_host`变量指定为可以通过端口`443`建立REST
    API的IP地址。最后，我们禁用证书验证，因为BIG-IP节点上的证书是自签名的。
- en: We create a new variable called `users`, which holds all the new users that
    we want to configure on our LTM, along with their role/privilege. In this case,
    we want to provide administrative privileges for the Ansible user across all the
    partitions on the LTM node.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个名为`users`的新变量，其中包含我们要在LTM上配置的所有新用户，以及他们的角色/权限。在这种情况下，我们希望为Ansible用户在LTM节点上的所有分区提供管理权限。
- en: We create a new playbook for onboarding a new LTM node. In the first task, we
    create the new users using the `bigip_user` module, and we provide the parameters
    to establish the HTTPS connection, using the `provider` attribute. We loop over
    all the users in our `users` variable to provision them.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为新的LTM节点创建一个新的playbook。在第一个任务中，我们使用`bigip_user`模块创建新用户，并使用`provider`属性提供参数以建立HTTPS连接。我们循环遍历`users`变量中的所有用户以进行配置。
- en: The second task also uses the `bigip_user` module in order to update the default
    `admin` profile on the LTM and to change this default password to a new password
    specified in the `admin_passwd` variable.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个任务还使用`bigip_user`模块来更新LTM上的默认`admin`配置，并将此默认密码更改为`admin_passwd`变量中指定的新密码。
- en: On the playbook level, we are setting the connection to `local`. This is because
    we are going to establish the HTTPS connection from the Ansible control machine,
    and we want to prevent Ansible from using **Secure Shell** (**SSH**) to connect
    to the LTM node.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在playbook级别上，我们将连接设置为`local`。这是因为我们将从Ansible控制机建立HTTPS连接，并且我们希望阻止Ansible使用**Secure
    Shell**（**SSH**）连接到LTM节点。
- en: 'The following screenshot shows the new Ansible user created on the BIG-IP node:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在BIG-IP节点上创建的新的Ansible用户：
- en: '![](assets/e027eff4-2fc6-421a-8c26-9ce4f291d62f.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e027eff4-2fc6-421a-8c26-9ce4f291d62f.png)'
- en: 'The following screenshot shows the details of the Ansible user created using
    the playbook:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用playbook创建的Ansible用户的详细信息：
- en: '![](assets/42db9ea5-67fc-498c-a7ca-f76a2b83a20d.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/42db9ea5-67fc-498c-a7ca-f76a2b83a20d.png)'
- en: We are using a plaintext password for simplicity; however, a plaintext password
    should never be used. Ansible Vault should be used to secure the password.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 出于简单起见，我们使用明文密码；但是，永远不应该使用明文密码。应该使用Ansible Vault来保护密码。
- en: There's more...
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'After adding the new Ansible user, we update the `conn_parameters` dictionary
    with the new user that we have created. We can start managing the LTM nodes with
    this user, as shown here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加新的Ansible用户后，我们使用新创建的用户更新`conn_parameters`字典。我们可以使用这个用户开始管理LTM节点，如下所示：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Configuring generic system options on BIG-IP devices
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在BIG-IP设备上配置通用系统选项
- en: In this recipe, we will outline how to configure some basic system options such
    as hostname, **Domain Name System** (**DNS**), and the **Network Time Protocol**
    (**NTP**) on BIG-IP nodes. We will understand how to set up all these system-level
    parameters using the various Ansible modules available.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将概述如何在BIG-IP节点上配置一些基本的系统选项，如主机名、**域名系统**（**DNS**）和**网络时间协议**（**NTP**）。我们将了解如何使用各种可用的Ansible模块设置所有这些系统级参数。
- en: Getting ready
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To follow along with this recipe, an Ansible inventory is assumed to be already
    set up. IP connectivity between Ansible and the BIG-IP nodes is already established,
    with the correct user credentials.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了按照这个步骤进行操作，假定已经设置了Ansible清单。Ansible和BIG-IP节点之间已经建立了IP连接，并且具有正确的用户凭据。
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Update the `group_vars/all.yml` file with the following system-level parameters:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下系统级参数更新`group_vars/all.yml`文件：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a new folder called `tasks` and create an `f5_system.yml` file with
    the following content:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`tasks`的新文件夹，并创建一个名为`f5_system.yml`的文件，其中包含以下内容：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `pb_f5_onboard.yml` file, add the following highlighted tasks:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pb_f5_onboard.yml`文件中，添加以下突出显示的任务：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In order to configure the various system parameters on BIG-IP nodes, we use
    a separate module for each task. We group all these tasks in a single file called
    `f5_system.yml` under the `tasks` folder, and inside this file, we use three separate
    tasks/modules, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在BIG-IP节点上配置各种系统参数，我们为每个任务使用单独的模块。我们将所有这些任务分组在一个名为`f5_system.yml`的文件夹下，并在此文件夹中使用三个单独的任务/模块，如下所示：
- en: '`bigip_hostname` to set up the hostname'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bigip_hostname`来设置主机名'
- en: '`bigip_device_dns` to set up the DNS server that the BIG-IP node will use'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bigip_device_dns`来设置BIG-IP节点将使用的DNS服务器'
- en: '`bigip_device_ntp` to set up the NTP servers on the BIG-IP node'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bigip_device_ntp`来设置BIG-IP节点上的NTP服务器'
- en: All these modules take the `conn_parameters` dictionary to correctly set up
    how to communicate with the REST API of the BIG-IP node. In our sample topology,
    we use a single server as the DNS and NTP. We describe it using the `nms_servers`
    variable in the `group_vars/all.yml` file, to apply to all our nodes in our Ansible
    inventory.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些模块都使用`conn_parameters`字典来正确设置如何与BIG-IP节点的REST API进行通信。在我们的示例拓扑中，我们使用单个服务器作为DNS和NTP。我们在`group_vars/all.yml`文件中使用`nms_servers`变量来描述它，以应用于我们Ansible清单中的所有节点。
- en: In order to configure the hostname, we need to supply a **fully qualified domain
    name** (**FQDN**) for the device. So, we configure our domain again under the
    `group_vars/all.yml` file and use it in conjunction with the device name to set
    up its hostname.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置主机名，我们需要为设备提供一个**完全合格的域名**（**FQDN**）。因此，我们在`group_vars/all.yml`文件中再次配置我们的域，并与设备名称一起使用以设置其主机名。
- en: 'After running this playbook, we can see that the configuration is applied to
    the BIG-IP node. The following screenshot shows that the Host Name is correctly
    provisioned:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此playbook后，我们可以看到配置已应用到BIG-IP节点。以下截图显示主机名已正确配置：
- en: '![](assets/a93c4e9f-0d35-49f2-af99-2e69cdd359dd.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a93c4e9f-0d35-49f2-af99-2e69cdd359dd.png)'
- en: 'The NTP configuration is deployed correctly, as per the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: NTP配置已正确部署，如下截图所示：
- en: '![](assets/23fdad58-75d6-4d81-b37b-0751bb0068ee.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/23fdad58-75d6-4d81-b37b-0751bb0068ee.png)'
- en: 'The DNS is configured correctly, as per the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: DNS已正确配置，如下截图所示：
- en: '![](assets/1f9537f9-1277-4ef7-b402-6987b1abdf07.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1f9537f9-1277-4ef7-b402-6987b1abdf07.png)'
- en: Configuring interfaces and trunks on BIG-IP devices
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在BIG-IP设备上配置接口和干线
- en: In this recipe, we will outline how to set up trunks on BIG-IP devices. Trunk
    ports on BIG-IP nodes are used to provide increased redundancy for the device,
    by combining multiple interfaces into a single logical interface. It is very similar
    to port channels in traditional network vendors.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将概述如何在BIG-IP设备上设置干线。BIG-IP节点上的干线端口用于通过将多个接口组合成单个逻辑接口来为设备提供增加的冗余性。这与传统网络供应商中的端口通道非常相似。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To follow along with this recipe, an Ansible inventory is assumed to be already
    set up. IP connectivity between Ansible and the BIG-IP nodes is already established,
    with the correct user credentials.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了按照这个步骤进行，假定已经设置了Ansible清单。Ansible和BIG-IP节点之间已经建立了IP连接，并且具有正确的用户凭据。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a `host_vars` folder and create a `ltm01.yml` file with the following
    content:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`host_vars`文件夹，并创建一个名为`ltm01.yml`的文件，其中包含以下内容：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Under the `tasks` folder, add a new file called `f5_interfaces.yml` with the
    following content:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tasks`文件夹下，添加一个名为`f5_interfaces.yml`的新文件，其中包含以下内容：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Update the `pb_f5_onboard.yml` playbook with the following new task:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下新任务更新`pb_f5_onboard.yml` playbook：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We define the host-specific data for the LTM device under the `host_vars` folder,
    in a file called `ltm01.yml`. In this file, we define the physical interface on
    the LTM node under the `phy_interfaces` variable. We define another variable called
    `trunks` in order to define the trunks available on the device. In the `trunks`
    variable, we reference the `phy_interfaces` variable in order to limit data duplication.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`host_vars`文件夹下的一个名为`ltm01.yml`的文件中为LTM设备定义特定于主机的数据。在这个文件中，我们在`phy_interfaces`变量下定义了LTM节点上的物理接口。我们定义了另一个名为`trunks`的变量，以定义设备上可用的干线。在`trunks`变量中，我们引用`phy_interfaces`变量，以限制数据重复。
- en: In the `f5_interfaces.yml` task file, we add a new task using the `bigip_trunk`
    module to provision the required trunks on the BIG-IP node. We loop over the `trunks`
    data structure to provision all the required trunk ports. In this task, we supply
    different parameters that adjust the trunk properties (such as disable the **Link
    Aggregation Control Protocol** (**LACP**)) and set up the correct method to distribute
    the frames across the trunk ports.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在`f5_interfaces.yml`任务文件中，我们添加了一个新任务，使用`bigip_trunk`模块在BIG-IP节点上配置所需的干线。我们循环遍历`trunks`数据结构，以配置所有所需的干线端口。在这个任务中，我们提供了不同的参数来调整干线属性（例如禁用**链路聚合控制协议**（**LACP**））并设置正确的方法来在干线端口之间分发帧。
- en: 'After running the playbook, we can see that the required trunk Interfaces are
    provisioned, as shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 运行playbook后，我们可以看到所需的干线接口已经配置，如下截图所示：
- en: '![](assets/70a5696e-b909-4f39-9818-07a08c18d74d.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/70a5696e-b909-4f39-9818-07a08c18d74d.png)'
- en: See also...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: For more information regarding the `bigip_trunk` Ansible module, and the different
    options regarding how to deploy trunk ports on the BIG-IP nodes, please refer
    to the following URL: [https://docs.Ansible.com/Ansible/latest/modules/bigip_trunk_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_trunk_module.html).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`bigip_trunk` Ansible模块的更多信息，以及如何在BIG-IP节点上部署干线端口的不同选项，请参阅以下网址：[https://docs.Ansible.com/Ansible/latest/modules/bigip_trunk_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_trunk_module.html)。
- en: Configuring VLANs and self-IPs on BIG-IP devices
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在BIG-IP设备上配置VLAN和自IP
- en: In this recipe, we will outline how to configure VLANs on BIG-IP nodes. VLANs
    on the BIG-IP nodes are fundamental for traffic separation for the different applications
    hosted by the BIG-IP LTM nodes. They are fundamental to designating external (internet-facing)
    and internal (server-facing) domains. We will also outline how to assign an IP
    address on the VLAN interfaces that we provision.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将概述如何在BIG-IP节点上配置VLAN。 BIG-IP节点上的VLAN对于通过BIG-IP LTM节点托管的不同应用程序的流量分离至关重要。它们对于指定外部（面向互联网）和内部（面向服务器）域至关重要。我们还将概述如何在我们配置的VLAN接口上分配IP地址。
- en: Getting ready
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To follow along with this recipe, an Ansible inventory is assumed to be already
    set up. IP connectivity between Ansible and the BIG-IP nodes is already established,
    with the correct user credentials. As all the VLANs in this setup will be deployed
    on trunk ports, we need to have the trunk ports already provisioned, as per the
    previous recipe.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了按照本教程进行操作，假定已经设置了Ansible清单。 Ansible与BIG-IP节点之间已经建立了IP连接，并且具有正确的用户凭据。由于此设置中的所有VLAN都将部署在干线端口上，因此我们需要根据先前的教程已经配置好干线端口。
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Update the `host_vars/ltm01.yml` file under the `host_vars` folder with the
    following VLAN data:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`host_vars`文件夹下的`host_vars/ltm01.yml`文件中使用以下VLAN数据进行更新：
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Update the `f5_interfaces.yml` file under the `tasks` folder with the task
    to provision VLANs, as follows:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tasks`文件夹下的`f5_interfaces.yml`文件中更新任务，以配置VLAN，如下所示：
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Update the `f5_interfaces.yml` file under the `tasks` folder with the task
    to provision the IP addresses on the respective VLANs, as follows:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tasks`文件夹下的`f5_interfaces.yml`文件中更新任务，以在相应的VLAN上配置IP地址，如下所示：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We add the `vlans` data structure in `host_vars/ltm01.yml` to declare all the
    VLANs that we need to provision on the LTM node, along with the IP addresses associated
    with this VLAN.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`host_vars/ltm01.yml`中添加`vlans`数据结构，以声明我们需要在LTM节点上配置的所有VLAN，以及与该VLAN相关联的IP地址。
- en: We update the `f5_interfaces.yml` file with a task using the `bigip_vlan` module
    to provision the VLANs on the BIG-IP node, and we loop over the `vlans` data structure
    to extract all the required parameters to set up the needed VLANs. Next, we add
    another task using the `bigip_selfip` Ansible module to deploy the IP addresses
    on the VLANs.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`bigip_vlan`模块更新`f5_interfaces.yml`文件，以在BIG-IP节点上配置VLAN，并循环遍历`vlans`数据结构以提取设置所需VLAN的所有必要参数。接下来，我们使用`bigip_selfip`
    Ansible模块添加另一个任务，以在VLAN上部署IP地址。
- en: 'After running the playbook again, we can see the VLANs and self-IPs on the
    BIG-IP node, as shown in the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行playbook后，我们可以看到BIG-IP节点上的VLAN和自身IP，如下截图所示：
- en: '![](assets/fe846472-f643-46dc-8c0a-34c03e1bb338.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fe846472-f643-46dc-8c0a-34c03e1bb338.png)'
- en: 'The correct IP address is configured correctly on the VLAN interface, as per
    the following screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的IP地址已根据以下截图正确配置在VLAN接口上：
- en: '![](assets/e02acc83-96e3-449d-b708-9ff502f6b703.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e02acc83-96e3-449d-b708-9ff502f6b703.png)'
- en: See also...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'For more options regarding how to deploy VLANs and self-IPs on the BIG-IP nodes,
    please refer to the following URLs:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何在BIG-IP节点上部署VLAN和自身IP的更多选项，请参考以下网址：
- en: '`bigip-vlan`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`bigip-vlan`'
- en: '[https://docs.ansible.com/ansible/latest/modules/bigip_vlan_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_vlan_module.html)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible/latest/modules/bigip_vlan_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_vlan_module.html)'
- en: '`bigip-selfip`'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`bigip-selfip`'
- en: '[https://docs.Ansible.com/Ansible/latest/modules/bigip_selfip_module.html#bigip-selfip-module](https://docs.ansible.com/ansible/latest/modules/bigip_selfip_module.html#bigip-selfip-module)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.Ansible.com/Ansible/latest/modules/bigip_selfip_module.html#bigip-selfip-module](https://docs.ansible.com/ansible/latest/modules/bigip_selfip_module.html#bigip-selfip-module)'
- en: Configuring static routes on BIG-IP devices
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在BIG-IP设备上配置静态路由
- en: After deploying the VLANs and IP addresses on the BIG-IP device, we need to
    configure routing on the BIG-IP nodes in order to reach the external destination.
    We use static routes in our topology in order to provision the required routing
    on the LTM node. In this recipe, we will outline how to configure static routes
    on BIG-IP devices.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在在BIG-IP设备上部署VLAN和IP地址后，我们需要配置BIG-IP节点上的路由，以便到达外部目的地。我们在我们的拓扑中使用静态路由，以在LTM节点上配置所需的路由。在本教程中，我们将概述如何在BIG-IP设备上配置静态路由。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To follow along with this recipe, an Ansible inventory is assumed to be already
    set up, and IP connectivity between Ansible and the BIG-IP nodes is already established,
    with the correct user credentials. Furthermore, we need to deploy the VLANs and
    IP addresses in the BIG-IP node, as per the previous recipe.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了按照本教程进行操作，假定已经设置了Ansible清单，并且Ansible与BIG-IP节点之间已经建立了IP连接，并且具有正确的用户凭据。此外，我们需要根据先前的教程在BIG-IP节点上部署VLAN和IP地址。
- en: How to do it...
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Update the `host_vars/ltm01.yml` file with the following routing data:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下路由数据更新`host_vars/ltm01.yml`文件：
- en: '[PRE15]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Update the `pb_f5_onboard.yml` file with the following task:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`pb_f5_onboard.yml`文件：
- en: '[PRE16]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We add the `routes` data structure under the `host_vars/ltm01.yml` file to declare
    all the static routes that need to be provisioned on the LTM node.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`host_vars/ltm01.yml`文件下添加`routes`数据结构，以声明需要在LTM节点上配置的所有静态路由。
- en: We update the `pb_f5_onboard.yml` playbook with a task to provision the static
    routes using the `bigip_static_route` module, and we loop over the `routes` data
    structure to provision all the needed routes on the device.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`bigip_static_route`模块更新`pb_f5_onboard.yml` playbook，以配置静态路由，并循环遍历`routes`数据结构，以在设备上配置所有所需的路由。
- en: 'After running the playbook again, we can see the correct static routes, as
    shown in the following screenshot:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行playbook后，我们可以看到正确的静态路由，如下截图所示：
- en: '![](assets/6e89a8c6-85b8-4d73-949c-e8fe27fc2cba.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6e89a8c6-85b8-4d73-949c-e8fe27fc2cba.png)'
- en: Deploying nodes on BIG-IP devices
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在BIG-IP设备上部署节点
- en: Using BIG-IP LTM to deploy an application requires load balancing of the application
    traffic across multiple servers. This requires us to define the servers/instances
    that are hosting the application. In BIG-IP, these instances are called nodes
    and they identify each server with a unique IP address. In this recipe, we are
    going to start deploying a new application (web server) on the BIG-IP device,
    and we will provision the nodes that are carrying this service using Ansible.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用BIG-IP LTM部署应用程序需要跨多个服务器对应用程序流量进行负载均衡。这要求我们定义托管应用程序的服务器/实例。在BIG-IP中，这些实例称为节点，并且它们使用唯一的IP地址标识每个服务器。在这个教程中，我们将开始在BIG-IP设备上部署一个新的应用程序（Web服务器），并使用Ansible来配置承载此服务的节点。
- en: Getting ready
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The basic setup for the BIG-IP should be already completed as per the previous
    recipes, and the correct VLANs to reach these nodes (physical servers) must be
    deployed.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: BIG-IP的基本设置应该已经按照之前的教程完成，必须部署正确的VLAN以到达这些节点（物理服务器）。
- en: How to do it...
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a new YAML file called `web_app.yml` with the following content:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`web_app.yml`的新的YAML文件，内容如下：
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a new Ansible playbook called `pb_f5_deploy_app.yml` with the following
    content:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`pb_f5_deploy_app.yml`的新的Ansible playbook，内容如下：
- en: '[PRE18]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We define all the parameters for our new web application that should be hosted
    on the BIG-IP LTM device in a YAML file called `web_app.yaml`. In this file, we
    include a `pool_members` parameter to outline the web servers that will house
    the application. We use this parameter to create the nodes on the BIG-IP LTM.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在名为`web_app.yaml`的YAML文件中定义了新的Web应用程序的所有参数，该应用程序应该托管在BIG-IP LTM设备上。在这个文件中，我们包括了一个`pool_members`参数，用来概述将承载应用程序的Web服务器。我们使用这个参数在BIG-IP
    LTM上创建节点。
- en: We create a new playbook for application deployment, called `pb_f5_deploy_app.yml`.
    We include the `web_app.yml` file so as to have access to all the parameters defined
    for this app. We create a new task using the `bigip_node` module to provision
    a new node on the BIG-IP appliance, and we loop through the `pool_members` parameter
    derived from the `web_app.yml` file to provision all the required nodes on the
    BIG-IP appliance. In order to connect to the BIG-IP node, we use the same previous
    provider attribute with the `conn_parameters` parameter defined in the `group_vars/all.yml` file
    to establish the connection with the BIG-IP.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为应用程序部署创建一个新的playbook，名为`pb_f5_deploy_app.yml`。我们包括`web_app.yml`文件，以便访问为此应用程序定义的所有参数。我们使用`bigip_node`模块创建一个新的节点，并循环遍历从`web_app.yml`文件中派生的`pool_members`参数，以在BIG-IP设备上创建所有必需的节点。为了连接到BIG-IP节点，我们使用与之前相同的提供者属性，并使用`group_vars/all.yml`文件中定义的`conn_parameters`参数来建立与BIG-IP的连接。
- en: 'Running this playbook, we create all the required nodes, as shown in the following
    screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个playbook，我们创建了所有必需的节点，如下截图所示：
- en: '![](assets/3e0103c7-336a-4e03-92e5-caf6650a098a.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3e0103c7-336a-4e03-92e5-caf6650a098a.png)'
- en: Configuring a load balancing pool on BIG-IP devices
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在BIG-IP设备上配置负载均衡池
- en: After creating a node on the BIG-IP, we need to create a load balancing pool
    for the application that we are deploying and assign pool members from the nodes
    that we have created into this pool. In this recipe, we will outline how to provision
    load balancing pools on the BIG-IP nodes, and how to assign members to the load
    balancing pool.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在BIG-IP上创建节点后，我们需要为我们部署的应用程序创建一个负载均衡池，并将我们创建的节点中的池成员分配到这个池中。在这个教程中，我们将概述如何在BIG-IP节点上配置负载均衡池，以及如何将成员分配到负载均衡池中。
- en: Getting ready
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that all the previous recipes have been implemented and
    that the nodes on the BIG-IP are already provisioned, as per the previous recipe.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程假设之前的所有教程都已经实施，并且BIG-IP上的节点已经按照之前的教程进行了配置。
- en: How to do it...
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Update the `pb_f5_deploy_app.yml` playbook with the following task to create
    a new pool:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`pb_f5_deploy_app.yml` playbook，添加以下任务以创建一个新的池：
- en: '[PRE19]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Update the `pb_f5_deploy_app.yml` playbook with the following task to assign
    pool members to the newly created pool:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`pb_f5_deploy_app.yml` playbook，添加以下任务以将池成员分配给新创建的池：
- en: '[PRE20]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we create a load balancing pool on the BIG-IP system using the
    `bigip_pool` module, and we specify the load balancing technique that should be
    used on this pool. In this example, we are using the `round-robin` technique.
    We create the pool name using the different parameters extracted from the `web_app.yml`
    file (mainly the website and `vip_port`).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们使用`bigip_pool`模块在BIG-IP系统上创建一个负载均衡池，并指定应该在此池上使用的负载均衡技术。在这个例子中，我们使用`round-robin`技术。我们使用从`web_app.yml`文件中提取的不同参数（主要是网站和`vip_port`）来创建池名称。
- en: Next, we assign the pool members to this newly created pool using the `bigip_pool_member`
    module and loop through all the `pool_members` defined in the `web_app.yml` file.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`bigip_pool_member`模块将池成员分配给这个新创建的池，并循环遍历`web_app.yml`文件中定义的所有`pool_members`。
- en: We can see that all these procedures create a consistent method for defining
    the pool names, as well as assigning the required pool members to the correct
    pool member. All the information is retrieved from a single definition file that
    describes and outlines how the service should be deployed.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，所有这些过程都创建了一种一致的方法来定义池名称，并将所需的池成员分配给正确的池成员。所有信息都是从一个单一的定义文件中检索出来，该文件描述并概述了服务的部署方式。
- en: 'Running these two tasks, we will see that the pool is correctly created with
    the correct pool members, as shown in the following screenshot:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这两个任务，我们将看到池已经正确创建，并且具有正确的池成员，如下截图所示：
- en: '![](assets/f819655c-1d20-4c4d-a3cf-3ae7b81da67f.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f819655c-1d20-4c4d-a3cf-3ae7b81da67f.png)'
- en: 'The following screenshot shows the current members:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了当前的成员：
- en: '![](assets/dd97973c-1947-4845-8522-000e93f7e12a.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dd97973c-1947-4845-8522-000e93f7e12a.png)'
- en: See also...
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'In this recipe, we outlined the basic use for the Ansible modules to provision
    load balancing pools on the BIG-IP nodes. However, there are more options available
    for these modules, such as specifying the load balancing ratio for each member,
    as well as attaching monitors for the overall pool. Please consult the following
    URLs for more options:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们概述了使用Ansible模块在BIG-IP节点上提供负载均衡池的基本用法。然而，这些模块还有更多的选项，例如为每个成员指定负载均衡比率，以及为整个池附加监视器。请参考以下链接以获取更多选项：
- en: '`bigip_pool`: [https://docs.Ansible.com/Ansible/latest/modules/bigip_pool_module.htmlb](https://docs.ansible.com/ansible/latest/modules/bigip_pool_module.html)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bigip_pool`: [https://docs.Ansible.com/Ansible/latest/modules/bigip_pool_module.htmlb](https://docs.ansible.com/ansible/latest/modules/bigip_pool_module.html)'
- en: '`bigip_pool_member`: [https://docs.Ansible.com/Ansible/latest/modules/bigip_pool_member_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_pool_member_module.html#bigip-pool-member-module)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bigip_pool_member`: [https://docs.Ansible.com/Ansible/latest/modules/bigip_pool_member_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_pool_member_module.html#bigip-pool-member-module)'
- en: Configuring virtual servers on BIG-IP devices
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在BIG-IP设备上配置虚拟服务器
- en: The last part in deploying an application on the BIG-IP LTM for load balancing
    is configuring the virtual server on the BIG-IP LTM node, and creating a **virtual
    IP** (**VIP**) on the BIG-IP node for this virtual server. In this recipe, we
    outline how to deploy the virtual server using Ansible.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在BIG-IP LTM上部署应用程序的最后一部分是在BIG-IP LTM节点上配置虚拟服务器，并为该虚拟服务器在BIG-IP节点上创建**虚拟IP**（VIP）。在这个食谱中，我们概述了如何使用Ansible部署虚拟服务器。
- en: Getting ready
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe assumes that all the previous recipes are completed, and a load
    balancing pool and pool members are already configured.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱假设所有先前的食谱都已完成，并且负载均衡池和池成员已经配置好。
- en: How to do it...
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Update the `pb_f5_deploy_app.yml` playbook with the following task:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`pb_f5_deploy_app.yml` playbook：
- en: '[PRE21]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We use the `bigip_virtual_server` module to provision the required virtual server
    on the BIG-IP appliance, by specifying the parameters defined in the `web_app.yml`
    file. We also define and provision the profiles that need to be applied to the
    newly created virtual server. These profiles are the HTTP and SSL profiles. These
    profiles are already created by default on the BIG-IP node, and in a case where
    we need to create custom profiles, we need to create these in a separate task,
    using the appropriate Ansible module.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`bigip_virtual_server`模块在BIG-IP设备上提供所需的虚拟服务器，通过指定`web_app.yml`文件中定义的参数。我们还定义并提供需要应用于新创建的虚拟服务器的配置文件。这些配置文件是HTTP和SSL配置文件。这些配置文件已经默认在BIG-IP节点上创建，在需要创建自定义配置文件的情况下，我们需要使用适当的Ansible模块在单独的任务中创建这些配置文件。
- en: 'Running this last task, we can see that the Virtual Server is created, as illustrated
    in the following screenshot:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 运行最后一个任务，我们可以看到虚拟服务器已创建，如下面的截图所示：
- en: '![](assets/3f6ccbc6-1552-4b76-b73d-4748a42fc8bb.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3f6ccbc6-1552-4b76-b73d-4748a42fc8bb.png)'
- en: In this last task, we have created a functional service VIP on the LTM node,
    in order to start processing HTTP requests for our new website and to load balance
    the traffic across all the instances in the load balancing group.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个任务中，我们在LTM节点上创建了一个功能性的服务VIP，以便开始处理我们新网站的HTTP请求，并将流量在负载均衡组中的所有实例之间进行负载均衡。
- en: See also...
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: In this recipe, we discussed the basic use of the Ansible module to provision
    virtual servers on the BIG-IP nodes. However, there are more options available
    in order to tweak the configuration for the virtual server that needs to be deployed.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们讨论了使用Ansible模块在BIG-IP节点上提供虚拟服务器的基本用法。然而，还有更多的选项可用于调整需要部署的虚拟服务器的配置。
- en: 'There are more Ansible modules that let you create profiles you can use to
    attach to the virtual server, and the following are some links for these modules:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多的Ansible模块可以让您创建可以附加到虚拟服务器的配置文件，以下是一些这些模块的链接：
- en: '`bigip_virtual_server`: [https://docs.Ansible.com/Ansible/latest/modules/bigip_virtual_server_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_virtual_server_module.html#bigip-virtual-server-module)'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bigip_virtual_server`: [https://docs.Ansible.com/Ansible/latest/modules/bigip_virtual_server_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_virtual_server_module.html#bigip-virtual-server-module)'
- en: '`bigip_profile_http`: [https://docs.Ansible.com/Ansible/latest/modules/bigip_profile_http_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_profile_http_module.html#bigip-profile-http-module)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bigip_profile_http`: [https://docs.Ansible.com/Ansible/latest/modules/bigip_profile_http_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_profile_http_module.html#bigip-profile-http-module)'
- en: '`bigip_profile_client_ssl`: [https://docs.Ansible.com/Ansible/latest/modules/bigip_profile_client_ssl_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_profile_client_ssl_module.html#bigip-profile-client-ssl-module)'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bigip_profile_client_ssl`: [https://docs.Ansible.com/Ansible/latest/modules/bigip_profile_client_ssl_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_profile_client_ssl_module.html#bigip-profile-client-ssl-module)'
- en: '`bigip_profile_server_ssl`: [https://docs.Ansible.com/Ansible/latest/modules/bigip_profile_server_ssl_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_profile_server_ssl_module.html#bigip-profile-server-ssl-module)'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bigip_profile_server_ssl`: [https://docs.Ansible.com/Ansible/latest/modules/bigip_profile_server_ssl_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_profile_server_ssl_module.html#bigip-profile-server-ssl-module)'
- en: Retrieving operational data from BIG-IP nodes
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从BIG-IP节点检索操作数据
- en: In this recipe, we outline how to retrieve operational data for different components
    on the BIG-IP appliance in terms of the network state of the BIG-IP nodes, such
    as interfaces and VLANs, as well as data relating to the components responsible
    for application delivery, such as virtual servers and pools.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们概述了如何检索BIG-IP设备上不同组件的操作数据，例如BIG-IP节点的网络状态，如接口和VLAN，以及与应用程序交付相关的组件的数据，如虚拟服务器和池。
- en: Getting ready
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To follow along with this recipe, an Ansible inventory is assumed to be already
    set up, and IP connectivity between Ansible and the BIG-IP nodes is already established,
    with the correct user credentials.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 为了按照这个步骤进行操作，假设已经设置了Ansible清单，并且Ansible与BIG-IP节点之间已经建立了IP连接，并且具有正确的用户凭据。
- en: How to do it...
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new Ansible playbook, `pb_f5_validate.yml`, with the following content:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Ansible playbook，`pb_f5_validate.yml`，内容如下：
- en: '[PRE22]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Update the playbook with a new task to filter the interface facts, as follows:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容更新playbook，以过滤接口事实的新任务：
- en: '[PRE23]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Update the `pb_f5_validate.yml` playbook with a new task to validate the interface
    status, as follows:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容更新`pb_f5_validate.yml` playbook，以验证接口状态的新任务：
- en: '[PRE24]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The REST API supported on the BIG-IP node uses different methods to retrieve
    operational data from the device, and it outputs all this data in JSON format.
    The following snippet outlines the interface status gathered from the BIG-IP nodes
    using the `bigip_device_facts` module:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在BIG-IP节点上支持的REST API使用不同的方法从设备中检索操作数据，并以JSON格式输出所有这些数据。以下代码段概述了使用`bigip_device_facts`模块从BIG-IP节点收集的接口状态：
- en: '[PRE25]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We retrieve the operational facts from the BIG-IP nodes using `bigip_device_facts`,
    and we restrict only the data retrieved from the node using `gather_subset`. We
    include the `interfaces` option only to get the interface data. We save all the
    retrieved output to the `bigip_facts` variable.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`bigip_device_facts`从BIG-IP节点检索操作事实，并且仅使用`gather_subset`限制从节点检索的数据。我们只包括`interfaces`选项来获取接口数据。我们将所有检索到的输出保存到`bigip_facts`变量中。
- en: We create a new fact for the device, called `net_intfs`. The only use of this
    new fact is to filter the interface facts retrieved from the previous task to
    the interface that we have defined for our device in the `phy_interfaces` parameter
    (which is defined under the `host_vars` folder). This new parameter will include
    only the interface facts for the interfaces that we declared in our design.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为设备创建了一个名为`net_intfs`的新事实。这个新事实的唯一用途是过滤从上一个任务中检索到的接口事实，以匹配我们在`phy_interfaces`参数（在`host_vars`文件夹下定义）中为我们的设备定义的接口。这个新参数将只包括我们在设计中声明的接口的接口事实。
- en: We use the `assert` module to validate that all the interfaces that we defined
    for our application are enabled and operational from the retrieved data, and we
    loop over the `net_intfs` variable (which is a list) to loop over all the interfaces
    and confirm that they are enabled.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`assert`模块来验证我们为应用程序定义的所有接口是否从检索到的数据中启用和运行，并且我们循环遍历`net_intfs`变量（它是一个列表）来确认它们都已启用。
- en: There's more...
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If we need to get the operational data for the application that we have deployed
    on the LTM node, we create a new playbook to validate the application deployment
    as shown in the following code, using the `bigip_device_facts` module. We limit
    the data retrieved to only the virtual servers. We validate the data using the
    `assert` statement, as we did in the previous playbook. The following code shows
    the playbook contents for application deployment validation.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要获取部署在LTM节点上的应用程序的操作数据，我们创建一个新的playbook来验证应用程序部署，如下所示，使用`bigip_device_facts`模块。我们将检索到的数据限制为只有虚拟服务器。我们使用`assert`语句来验证数据，就像我们在之前的playbook中所做的那样。以下代码显示了用于应用程序部署验证的playbook内容。
- en: 'We create a new playbook, `pb_f5_app_validate.yml`, with the following task
    to collect `virtual-servers` facts:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个新的playbook，`pb_f5_app_validate.yml`，其中包含收集`virtual-servers`事实的以下任务：
- en: '[PRE26]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We update the playbook with the following tasks to filter the `virtual-servers`
    facts:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下任务更新playbook，以过滤`virtual-servers`事实：
- en: '[PRE27]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We update the playbook with the following task to validate the state of the
    virtual server for our application:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下任务更新playbook来验证我们应用程序的虚拟服务器的状态：
- en: '[PRE28]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: These validation playbooks can be extended to validate multiple parameters on
    the virtual servers. Also, we can validate other components such as LTM load balancing
    pools, to build a more comprehensive validation for the application deployed.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这些验证playbook可以扩展到验证虚拟服务器上的多个参数。此外，我们还可以验证其他组件，如LTM负载均衡池，以构建更全面的应用程序部署验证。
- en: See also...
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: For more information regarding the Ansible `bigip_device_facts` module and all
    the information that we can retrieve from the BIG-IP node, please visit the following
    website: [https://docs.Ansible.com/Ansible/latest/modules/bigip_device_facts_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_device_facts_module.html#bigip-device-facts-module).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Ansible `bigip_device_facts`模块以及我们可以从BIG-IP节点检索的所有信息的更多信息，请访问以下网站：[https://docs.Ansible.com/Ansible/latest/modules/bigip_device_facts_module.html](https://docs.ansible.com/ansible/latest/modules/bigip_device_facts_module.html#bigip-device-facts-module)。
