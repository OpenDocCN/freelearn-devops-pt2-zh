["```\n$ ansible localhost -m aws_az_facts\n\nlocalhost | FAILED! => {\n \"changed\": false,\n \"msg\": \"boto3 required for this module\"\n }\n```", "```\n$ sudo pip3 install boto3 boto\n```", "```\n$ cat hosts\n\n[us]\n us_prod_vpc\n\n[eu]\n eu_prod_vpc\n\n[prod_vpcs]\n us_prod_vpc\n eu_prod_vpc\n```", "```\n$ cat ansible.cfg\n\n[defaults]\n inventory=hosts\n vault_password_file=~/.ansible_vault_passwd\n gathering=explicit\n transport=local\n retry_files_enabled=False\n action_warnings=False\n```", "```\n$ ansible-vault encrypt_string <ACCESS_KEY_ID> --name aws_access_key\n\n$ ansible-vault encrypt_string <SECRET_ACCESS_KEY> --name aws_secret_key_id\n\n```", "```\nansible_connection: local\n\naws_access_key: !vault |\n $ANSIBLE_VAULT;1.1;AES256\n 37623631653336633662666138353639653365323637323665353731386661343164393664333434\n 3430306562623532366137663835636138613633633835660a656235363130303035383965663464\n 39326130613433643861653933623032393735376466333861326537646563643736356632303435\n 6631326531666461310a353461396431303765393830636432363430323438373635383132336462\n 37356163643662623633643965386465656563613533613938666232343063396261\n\naws_secret_key_id: !vault |\n $ANSIBLE_VAULT;1.1;AES256\n 38353165666437393262303035646531666139623963643066623066346633393964633438626539\n 6266623937343036376266373463623266316462613139660a336664353564623531393332613433\n 34336363393962666633363630393631376135656666623862373966643935386665363733376133\n 6236326462326566320a653364336464363963623136363362666632396133613863376166343135\n 37373839316430643337353564373062333232656136393564613132333065316638383739326238\n 3530386534303033636463626664346234653136353534633265\n```", "```\n$ cat group_vars/eu.yml\n aws_region: eu-west-1\n\n$ cat group_vars/eu.yml\n aws_region: us-east-1\n```", "```\n$ cat host_vars/eu_prod_vpc.yml\n\nvpc_name: EU_Prod_Public_VPC\nvpc_cidr: 10.3.0.0/16\nvpc_tags:\n role: prod\n region: eu EU $ cat host_vars/us_prod_vpc.yml\nvpc_name: US_Prod_Public_VPC\nvpc_cidr: 10.1.0.0/16\nvpc_tags:\n role: prod\n region: US\n```", "```\n$ cat pb_aws_net_build.yml\n\n- name: Create all AWS Networks\n hosts: prod_vpcs\n environment:\n AWS_ACCESS_KEY: \"{{ aws_access_key }}\"\n AWS_SECRET_KEY: \"{{ aws_secret_key_id }}\"\n tasks:\n - name: Create New VPC\n ec2_vpc_net:\n cidr_block: \"{{ vpc_cidr }}\"\n region: \"{{ aws_region }}\"\n name: \"{{ vpc_name }}\"\n state: \"{{ vpc_state | default('present') }}\"\n tags: \"{{ vpc_tags }}\"\n register: create_vpc\n```", "```\n\"create_vpc\": {\n \"vpc\": {\n \"cidr_block\": \"10.1.0.0/16\",\n\n< -- Output Omitted for brevity -->\n\n \"dhcp_options_id\": \"dopt-b983c8c2\",\n \"id\": \"vpc-0d179be0eb66847f3\",\n \"instance_tenancy\": \"default\",\n \"is_default\": false,\n \"owner_id\": \"955645556619\",\n \"state\": \"available\",\n \"tags\": {\n \"Name\": \"US_Prod_Public_VPC\",\n \"region\": \"US\",\n \"role\": \"prod\"\n }\n }\n}\n```", "```\n$ cat host_vars/eu_prod_vpc.yml\n\n< -- Output Omitted for brevity -->\n\nvpc_subnets:\n eu-prod-public-a:\n cidr: 10.3.1.0/24\n az: \"{{ aws_region }}a\"\n tags: \"{{ vpc_tags }}\"\n public: true\n\n eu-prod-public-b:\n cidr: 10.3.2.0/24\n az: \"{{ aws_region}}b\"\n tags: \"{{ vpc_tags }}\"\n public: true\n```", "```\n\n- name: \"set fact: VPC ID\"\n set_fact:\n vpc_id: \"{{ create_vpc.vpc.id }}\"\n\n- name: create VPC subnets\n ec2_vpc_subnet:\n region: \"{{ aws_region }}\"\n vpc_id: \"{{ vpc_id }}\"\n cidr: \"{{ item.value.cidr }}\"\n az: \"{{ item.value.az }}\"\n tags: \"{{item.value.tags | combine({ 'Name': item.key })}}\"\n with_dict: \"{{ vpc_subnets }}\"\n register: create_vpc_subnets\n```", "```\n$ cat host_vars/eu_prod_vpc.yml\n\n< -- Output Omitted for brevity -->\n\nigw_name: eu_prod_igw\n\n$ cat host_vars/eu_prod_vpc.yml\n\n< -- Output Omitted for brevity -->\n\nigw_name: us_prod_igw\n```", "```\n\n- name: Create IGW\n ec2_vpc_igw:\n region: \"{{ aws_region }}\"\n vpc_id: \"{{ vpc_id }}\"\n state: present\n tags: \"{{ vpc_tags | combine({'Name': igw_name}) }}\"\n register: vpc_igw_create\n\n- name: Extract VPC IGW ID\n set_fact:\n igw_id: \"{{ vpc_igw_create.gateway_id }}\"\n```", "```\nok: [us_prod_vpc] => {\n \"vpc_igw_create\": {\n \"changed\": true,\n \"failed\": false,\n \"gateway_id\": \"igw-05d3e4c664486790b\",\n \"tags\": {\n \"Name\": \"us_prod_igw\",\n \"region\": \"US\",\n \"role\": \"prod\"\n },\n \"vpc_id\": \"vpc-0abc32281330c9bc6\"\n }\n}\n```", "```\n$ cat host_vars/eu_prod_vpc.yml\n\n< -- Output Omitted for brevity -->\n\nroute_table:\n tags:\n Name: eu_public_rt\n igw:\n - dest: 0.0.0.0/0\n gateway_id: \"{{ igw_id }}\"\n public:\n - eu-prod-public-a\n - eu-prod-public-b\n```", "```\n- name: Get Default VPC Route Table\n ec2_vpc_route_table_facts:\n region: \"{{ aws_region }}\"\n filters:\n vpc-id: \"{{ vpc_id }}\"\n register: vpc_route_table_facts\n tags: rt\n\n- name: Extract Route Table IDs\n set_fact:\n rt_id: \"{{vpc_route_table_facts.route_tables[0].id }}\"\n tags: rt\n```", "```\n- name: Update Default VPC Route Table\n ec2_vpc_route_table :\n region: \"{{ aws_region }}\"\n vpc_id: \"{{ vpc_id }}\"\n route_table_id: \"{{ rt_id }}\"\n routes: \"{{ route_table.igw }}\"\n subnets: \"{{ route_table.public }}\"\n lookup: id\n state: present\n tags: \"{{ vpc_tags | combine(route_table.tags) }}\"\n```", "```\nok: [us_prod_vpc] => {\n \"vpc_route_table_facts\": {\n \"route_tables\": [\n {\n < -- Output Omitted for brevity --> ],\n \"id\": \"rtb-0b6669ba5fd9eb9c8\",\n \"routes\": [\n {\n \"destination_cidr_block\": \"10.1.0.0/16\",\n \"gateway_id\": \"local\",\n\n< -- Output Omitted for brevity -->\n\n }\n ],\n \"tags\": {},\n \"vpc_id\": \"vpc-005b1dcb981791d86\"\n }\n ]\n }\n} \n```", "```\n$ cat host_vars/eu_prod_vpc.yml\n\n< -- Output Omitted for brevity -->\n\nnetwork_acls:\n - name: EU_Prod_ACLs\n subnets: \"{{ vpc_subnets.keys() | list }}\"\n ingress_rules:\n - [100,'tcp','allow','0.0.0.0/0',null,null,80,80]\n - [200,'tcp','allow','0.0.0.0/0',null,null,443,443]\n```", "```\n- name: Create Network ACLs\n ec2_vpc_nacl:\n region: \"{{ aws_region }}\"\n vpc_id: \"{{ vpc_id }}\"\n name: \"{{ item.name }}\"\n subnets: \"{{ item.subnets }}\"\n ingress: \"{{ item.ingress_rules }}\"\n tags: \"{{ vpc_tags | combine({'Name':item.name}) }}\"\n loop: \"{{ network_acls }}\"\n```", "```\n$ cat pb_vpc_validate.yml\n\n- name: Validate VPC Build\n hosts: all\n gather_facts: no\n environment:\n AWS_ACCESS_KEY: \"{{ aws_access_key }}\"\n AWS_SECRET_KEY: \"{{ aws_secret_key_id }}\"\n AWS_REGION: \"{{ aws_region }}\"\n tasks:\n - name: Get VPC facts\n ec2_vpc_net_facts:\n filters:\n \"tag:Name\": \"{{ vpc_name }}\"\n register: vpc_facts\n\n    - name: Validate VPC Info\n assert:\n that:\n - vpc_facts.vpcs[0].cidr_block == vpc_cidr\n - vpc_facts.vpcs[0].tags.Name == vpc_name\n when: vpc_facts.vpcs != []\n```", "```\n - name: Extract VPC ID\n set_fact:\n vpc_id: \"{{ vpc_facts.vpcs[0].id }}\"\n\n - name: Get Subnet facts\n ec2_vpc_subnet_facts:\n filters:\n vpc-id: \"{{ vpc_id }}\"\n register: vpc_subnet_facts\n tags: subnet\n```", "```\n - name: Validate VPC Subnets Info\n assert:\n that:\n - vpc_subnet_facts.subnets |\n selectattr('tags.Name','equalto',item.key) |\n map(attribute='cidr_block') |\n list | first == item.value.cidr\n\n - vpc_subnet_facts.subnets |\n selectattr('tags.Name','equalto',item.key) |\n map(attribute='availability_zone') |\n list | first == item.value.az\n\n with_dict: \"{{ vpc_subnets }}\"\n```", "```\n$ cat pb_delete_vpc.yml\n\n- name: Delete all VPC resources\n hosts: all\n gather_facts: no\n environment:\n AWS_ACCESS_KEY: \"{{ aws_access_key }}\"\n AWS_SECRET_KEY: \"{{ aws_secret_key_id }}\"\n AWS_REGION: \"{{ aws_region }}\"\n tasks:\n - name: Get VPC facts\n ec2_vpc_net_facts:\n filters:\n \"tag:Name\": \"{{ vpc_name }}\"\n register: vpc_facts\n\n - name: Extract VPC ID\n set_fact:\n vpc_id: \"{{ vpc_facts.vpcs[0].id }}\"\n```", "```\n - name: Start Delete VPC Resources\n block:\n - name: Delete Subnets\n ec2_vpc_subnet:\n cidr: \"{{ item.value.cidr }}\"\n vpc_id: \"{{ vpc_id }}\"\n state: absent\n with_dict: \"{{ vpc_subnets }}\" - name: Delete IGW\n ec2_vpc_igw:\n vpc_id: \"{{ vpc_id }}\"\n state: absent\n```", "```\n - name: Delete NACLs\n ec2_vpc_nacl:\n name: \"{{ item.name }}\"\n vpc_id: \"{{ vpc_id }}\"\n state: absent\n loop: \"{{ network_acls }}\"\n```", "```\n - name: Delete VPC\n ec2_vpc_net:\n cidr_block: \"{{ vpc_cidr }}\"\n name: \"{{ vpc_name }}\"\n state: absent\n when: vpc_id is defined\n```"]