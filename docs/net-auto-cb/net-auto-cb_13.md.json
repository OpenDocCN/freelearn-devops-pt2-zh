["```\n$ python3 -m venv dev\n$ source dev/bin/activate\n```", "```\n$ (dev) $ pip3 install ansible==2.9\n```", "```\n(dev)$ which python\n~/dev/bin/python\n (dev)$ python --version\nPython 3.6.8\n```", "```\n(dev)$ ansible --version\nansible 2.9\n config file = None\n configured module search path = ['/home/vagrant/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']\n ansible python module location = /home/vagrant/dev/lib64/python3.6/site-packages/ansible\n *executable location = /home/vagrant/dev/bin/ansible*  python version = 3.6.8 (default, Aug  7 2019, 17:28:10) [GCC 4.8.5 20150623 (Red Hat 4.8.5-39)]\n```", "```\n$ cat hosts\n[all:vars]\nansible_python_interpreter=~/dev/bin/python \n```", "```\n$ sudo pip3 install yamllint\n```", "```\n$ sudo pip3 install ansible-lint\n```", "```\n$ cd ch13_ansible_best_practice\n```", "```\n# run yamllint on all files in this folder\n$ yamllint\n```", "```\n# run ansible-lint on this specific ansible-playbook\n$ ansible-lint pb_build_datamodel.yml\n```", "```\n# no errors or only warning\n$ echo $?\n0\n```", "```\n# errors are present\n$ echo $?\n1\n```", "```\n---\nextends: default\nrules:\n line-length:\n level: warning\n```", "```\n$ ansible-lint -L\n$ ansible-lint -T\n```", "```\n$ ansible-lint -x task pb_build_datamodel.yml\n```", "```\n[defaults]\n < --- Output Omitted for brevity ---->\ncallback_whitelist=timer, profile_tasks, profile_roles\n```", "```\n$ ansible-playbook pb_generate_config.yml --list-tasks\n```", "```\n$ ansible-playbook pb_generate_config.yml\n```", "```\n---\nACLs:\n INFRA_ACL:\n - src: 10.1.1.0/24\n dst: any\n dport: ssh\n state: present\n - src: 10.2.1.0/24\n dst: any\n app: udp\n dport: snmp\n state: present\n```", "```\n---\n- include_vars: ACLs.yml\n- name: Validate ACL is Defined\n assert:\n that:\n - ACLs is defined\n - \"'INFRA_ACL' in ACLs.keys()\"\n - ACLs.INFRA_ACL|length > 0\n- name: Validate Rules are Valid\n assert:\n that:\n - item.src is defined\n - item.dst is defined\n - item.src | ipaddr\n loop: \"{{ ACLs.INFRA_ACL }}\"\n```", "```\n---\n- name: Configure ACL on IOS-XR\n hosts: all\n tasks:\n - name: Validate Input Data\n import_tasks: validate_acls.yml\n run_once: yes\n delegate_to: localhost\n tags: validate\n - name: Create ACL Config\n template:\n src: acl.j2\n dest: acl_conf.cfg\n delegate_to: localhost\n run_once: yes\n - name: Provision ACLs\n iosxr_config:\n src: acl_conf.cfg\n match: line\n```", "```\n---\nACLs:\n INFRA_ACL:\n< --- Output Omitted for brevity -- >\n - src: 10.3.2.0/24\n dst: 10.2.2.0/24\n dport: dns\n state: present\n```", "```\n$ ansible-playbook pb_push_acl.yml -l den-core01  --check\n```", "```\n$ ansible-playbook pb_push_acl.yml -l den-core01  --check --diff\n```", "```\n- name: Configure ACL on IOS-XR\n hosts: all\n serial: 1\n tags: deploy\n tasks:\n - name: Backup Config\n iosxr_config:\n backup:\n *when: not ansible_check_mode*    - name: Deploy ACLs\n iosxr_config:\n src: acl_conf.cfg\n match: line\n *when: not ansible_check_mode*\n```", "```\n[defaults]\nforks=2\n```", "```\n- name: Configure ACL on IOS-XR\n hosts: all\n serial: 1\n  tags: deploy\n tasks:\n - name: Backup Config\n iosxr_config:\n backup:\n - name: Deploy ACLs\n iosxr_config:\n src: acl_conf.cfg\n match: line\n```", "```\n[defaults]\n< --- Output Omitted for brevity -->\nfact_caching=yaml\nfact_caching_connection=./fact_cache\n```", "```\n---\n- name: Collect Network Facts\n hosts: all\n tasks:\n - name: Collect Facts Using Built-in Fact Modules\n iosxr_facts:\n gather_subset:\n - interfaces\n - name: Collect Using NAPALM Facts\n napalm_get_facts:\n hostname: \"{{ ansible_host }}\"\n username: \"{{ ansible_user }}\"\n password: \"{{ ansible_ssh_pass }}\"\n dev_os: \"{{ ansible_network_os }}\"\n filter:\n - interfaces\n - name: Set and Cache Custom Fact\n set_fact:\n site: Egypt\n cacheable: yes\n```", "```\n$ ansible-playbook pb_validate_from_cache.yml -l den-core01\n```", "```\n---\n- name: Validate Cache Data\n vars:\n ansible_connection: local\n hosts: all\n tasks:\n - name: Validate all Interfaces\n assert:\n that:\n - item.value.operstatus == 'up'\n with_dict: \"{{ ansible_net_interfaces }}\"\n - name: Validate Custom Fact\n assert:\n that:\n - site == 'Egypt'\n```", "```\nclass FilterModule(object):\n def filters(self):\n return {\n 'acl_state': self.acl_state\n }\n def acl_state(self,acl_def):\n for acl_name, acl_rules in acl_def.items():\n for rule in acl_rules:\n rule['state'] = rule['state'].upper()\n return acl_def\n```", "```\n---\n - name: Test Custom Filter\n hosts: all\n vars:\n ansible_connection: local\n tasks:\n - name: Read ACL data\n include_vars: ACLs.yml\n run_once: yes\n - name: Apply Our Custom Filter\n set_fact:\n standard_acl: \"{{ ACLs | acl_state }}\"\n run_once: yes\n - name: Display Output After Filter\n debug: var=standard_acl\n```", "```\nclass FilterModule(object):\n\n< -- Output Omitted for brevity -- >\n    def custom_acl(self,acl_def,field=None):\n for acl_name, acl_rules in acl_def.items():\n for rule in acl_rules:\n if field and field in rule.keys():\n rule[field] = rule[field].upper()\n return acl_def\n def filters(self):\n return {\n 'acl_state': self.acl_state,\n 'custom_acl': self.custom_acl\n }\n```", "```\n - name: Apply Our Custom Filter\n set_fact:\n standard_acl: \"{{ ACLs | acl_state }}\"\n final_acl: \"{{ ACLs | custom_acl('dports') }}\"\n run_once: yes\n - name: Display Output After Filter\n debug: var=final_acl\n```"]