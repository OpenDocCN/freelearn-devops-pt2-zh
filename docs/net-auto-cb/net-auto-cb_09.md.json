["```\n$ sudo pip3 install requests\n```", "```\n$ sudo pip3 install google-auth\n```", "```\n$ mkdir ch9_gcp\n```", "```\n$ cat hosts\n\n[gcp_vpc]\ndemo_gcp_vpc\n```", "```\n$ cat ansible.cfg\n\n[defaults]\ninventory=hosts\nretry_files_enabled=False\ngathering=explicit\nhost_key_checking=False\naction_warnings=False\n```", "```\n$ mkdir -p group_var/gcp_vpc.yml\n```", "```\n$ mkdir -p roles\n```", "```\n$ tree ch9_gcp\n .\n \u251c\u2500\u2500 ansible.cfg\n \u251c\u2500\u2500 group_vars\n \u2502 \u2514\u2500\u2500 gcp_vpc.yml\n \u251c\u2500\u2500 hosts\n \u2514\u2500\u2500 roles\n```", "```\n$ cat ansible.cfg\n\n[defaults]\n vault_password_file=vault_pass\n```", "```\n$ ansible-vault encrypt gcp-ansible-secret.json\n```", "```\n$ cat gcp_account_info.yml\n ---\n service_account_file: gcp_credentials.json\n project: \"gcp-ansible-demo\"\n auth_kind: serviceaccount\n```", "```\n$ cd roles\n$ ansible-galaxy init gcp_net_build\n```", "```\n- name: Create a New GCP VPC\n gcp_compute_network:\n name: \"{{ vpc_name | regex_replace('_','-') }}\"\n routing_config:\n routing_mode: \"REGIONAL\"\n auto_create_subnetworks: no\n state: present\n auth_kind: \"{{ auth_kind }}\"\n project: \"{{ project }}\"\n service_account_file: \"{{ service_account_file }}\"\n register: gcp_vpc\n tags: gcp_vpc\n```", "```\n$ cat group_vars/gcp_vpc.yml\n ---\n vpc_name: ansible-demo-vpc\n```", "```\n---\n- name: Build GCP Environment\n hosts: all\n connection: local\n gather_facts: no\n force_handlers: true\n vars_files:\n - gcp_account_info.yml\n tasks:\n - name: Read the Vault Encrypted JSON File\n copy:\n content: \"{{ lookup('file','gcp-ansible-secret.json') }}\"\n dest: \"{{ service_account_file }}\"\n notify: Clean tmp Decrypted Files\n tags: always\n```", "```\n - name: Build GCP Network\n import_role:\n name: gcp_net_build\n tags: gcp_net_build\n```", "```\n handlers:\n - name: Clean tmp Decrypted Files\n file:\n path: \"{{ service_account_file }}\"\n state: absent\n```", "```\nok: [demo_gcp_vpc] => {\n \"gcp_vpc\": {\n \"autoCreateSubnetworks\": false,\n \"changed\": true,\n \"creationTimestamp\": \"2019-11-26T12:49:51.130-08:00\",\n \"failed\": false,\n \"id\": \"8661055357091590400\",\n \"kind\": \"compute#network\",\n \"name\": \"demo-gcp-vpc\",\n \"routingConfig\": {\n \"routingMode\": \"REGIONAL\"\n },\n \"selfLink\": \"https://www.googleapis.com/compute/v1/projects/gcp-ansible-demo/global/networks/demo-gcp-vpc\"\n }\n} \n```", "```\n$ cat group_vars/gcp_vpc.yml\n\nsubnets:\n - name: anz-web\n cidr: 10.1.1.0/24\n region: australia-southeast1\n\n - name: anz-db\n cidr: 10.1.2.0/24\n region: australia-southeast1\n\n - name: anz-bastion\n cidr: 10.1.3.0/24\n region: australia-southeast1\n```", "```\n- name: Create Subnets\n gcp_compute_subnetwork:\n name: \"{{ subnet.name }}\"\n ip_cidr_range: \"{{ subnet.cidr }}\"\n network: \"{{ gcp_vpc}}\"\n region: \"{{ subnet.region }}\"\n state: present\n auth_kind: \"{{ auth_kind }}\"\n project: \"{{ project }}\"\n service_account_file: \"{{ service_account_file }}\"\n loop: \"{{ subnets }}\"\n loop_control:\n loop_var: subnet\n register: gcp_subnets\n```", "```\n$ cat group_vars/gcp_vpc.yml\n\nfw_rules:\n - name: allow_sql_from_anz-web_to_anz-db\n type: allow\n direction: ingress\n priority: 10\n apply_to: anz-db\n src_tag: anz-web\n dest_tag:\n protocol: tcp\n port: 3389\n state: present\n```", "```\n - name: allow_internet_to-anz-web\n type: allow\n direction: ingress\n priority: 10\n src: 0.0.0.0/0\n apply_to: anz-web\n protocol: tcp\n port: 80,443\n state: present\n```", "```\n - name: allow_ssh_to_anz-bastion\n type: allow\n direction: ingress\n priority: 10\n src: 0.0.0.0/0\n apply_to: anz-bastion\n protocol: tcp\n port: 22\n state: present\n\n - name: allow_ssh_from_bastion_only\n type: allow\n direction: ingress\n priority: 10\n src_tag: anz-bastion\n apply_to: anz-web,anz-db\n protocol: tcp\n port: 22\n state: present\n```", "```\n- name: Create Allow Firewall Rules\n gcp_compute_firewall:\n name: \"{{ rule.name | regex_replace('_','-') }}\"\n network: {selfLink: \"{{ gcp_vpc.selfLink }}\"}\n priority: \"{{ rule.priority | default(omit) }}\"\n direction: \"{{ rule.direction | upper | mandatory }}\"\n allowed:\n - ip_protocol: \"{{ rule.protocol }}\"\n ports: \"{{ (rule.port|string).split(',') }}\"\n source_ranges: \"{{ rule.src | default(omit) }}\"\n source_tags: \"{{ omit if rule.src_tag is not defined else rule.src_tag.split(',') }}\"\n destination_ranges: \"{{ rule.dest | default(omit) }}\"\n target_tags: \"{{ omit if rule.apply_to is not defined else rule.apply_to.split(',') }}\"\n auth_kind: \"{{ auth_kind }}\"\n project: \"{{ project }}\"\n service_account_file: \"{{ service_account_file }}\"\n loop: \"{{ fw_rules | selectattr('type','equalto','allow') | list }}\"\n loop_control:\n loop_var: rule\n tags: gcp_fw_rules\n```", "```\n$ cat group_vars/gcp_vpc.yml\n\ncompute_node_flavor: f1-micro\ncompute_node_images: projects/centos-cloud/global/images/family/centos-7\ncompute_node_image_size: 10\n```", "```\n$ cat group_vars/gcp_vpc.yml\ncompute_nodes:\n - name: web-server-1\n network: anz-web\n has_internet: yes\n zone: australia-southeast1-a\n\n< -- Output Omitted for Brevity -- >\n\n - name: db-server-1\n network: anz-db\n has_internet: no\n zone: australia-southeast1-a\n\n< -- Output Omitted for Brevity -- >\n\n - name: bastion-host\n network: anz-bastion\n ip: 10.1.3.253\n has_internet: yes\n ip_forwarding: yes\n zone: australia-southeast1-a\n```", "```\n$ cd roles\n$ ansible-galaxy init gcp_vm_build\n```", "```\n- name: create a disk for {{ node.name }}\n gcp_compute_disk:\n name: \"{{ node.name | regex_replace('_','-') }}-disk\"\n size_gb: \"{{compute_node_image_size }}\"\n source_image: \"{{ compute_node_images }}\"\n zone: \"{{ node.zone }}\"\n auth_kind: \"{{ auth_kind }}\"\n project: \"{{ project }}\"\n service_account_file: \"{{ service_account_file }}\"\n state: present\n register: gcp_vm_disk\n\n```", "```\n- name: create a {{ node.name }} instance with no Internet\n gcp_compute_instance:\n name: \"{{ node.name | regex_replace('_','-') }}\"\n machine_type: \"{{ compute_node_flavor }}\"\n disks:\n - source: \"{{ gcp_vm_disk }}\"\n boot: 'true'\n network_interfaces:\n - network: \"{{ gcp_vpc }}\"\n subnetwork: \"{{ gcp_subnets.results |\n selectattr('name','equalto',node.network) |\n list | first }}\"\n metadata:\n tier: \"{{ node.name.split('-')[0] }}\"\n tags:\n items: \"{{ node.network }}\"\n zone: \"{{ node.zone }}\"\n auth_kind: \"{{ auth_kind }}\"\n project: \"{{ project }}\"\n service_account_file: \"{{ service_account_file }}\"\n state: present\n when: not node.has_internet\n```", "```\n- name: create an {{ node.name }} instance with Internet\n gcp_compute_instance:\n name: \"{{ node.name | regex_replace('_','-') }}\"\n machine_type: f1-micro\n can_ip_forward: \"{{ node.ip_forwarding if node.ip_forwarding is defined else 'no' }}\"\n disks:\n - source: \"{{ gcp_vm_disk }}\"\n boot: 'true'\n network_interfaces:\n - network: \"{{ gcp_vpc }}\"\n network_ip: \"{{ node.ip if node.ip is defined else omit }}\"\n subnetwork: \"{{ gcp_subnets.results |\n selectattr('name','equalto',node.network) |\n list | first }}\"\n access_configs:\n - name: External NAT\n type: ONE_TO_ONE_NAT\n metadata:\n tier: \"{{ node.name.split('-')[0] }}\"\n zone: \"{{ node.zone }}\"\n tags:\n items: \"{{ node.network }}\"\n auth_kind: \"{{ auth_kind }}\"\n project: \"{{ project }}\"\n service_account_file: \"{{ service_account_file }}\"\n state: present\n register: vm_data\n when: node.has_internet\n```", "```\n - name: Build VM Instances\n include_role:\n name: gcp_vm_build\n loop: \"{{ compute_nodes }}\"\n loop_control:\n loop_var: node\n```", "```\n$ cat group_vars/gcp_vpc.yml\nroute_tables:\n - name: db_tier_rt\n subnet: db_tier\n routes:\n - name: Default Route\n prefix: 0.0.0.0/0\n nh: none\n```", "```\n- name: Create the Route\n gcp_compute_route:\n name: \"{{ route.name }}\"\n dest_range: \"{{ route.dest}}\"\n network: {selfLink: \"{{ gcp_vpc.selfLink }}\"}\n next_hop_ip: \"{{ route.nh }}\"\n tags: \"{{ route.apply_to.split(',') | default(omit) }}\"\n state: present\n auth_kind: \"{{ auth_kind }}\"\n project: \"{{ project }}\"\n service_account_file: \"{{ service_account_file }}\"\n loop: \"{{ cutom_routes }}\"\n loop_control:\n loop_var: route\n tags: gcp_route\n```", "```\n$ cat pb_gcp_net_validate.yml\n\n---\n- name: Build GCP Environment\n hosts: all\n connection: local\n gather_facts: no\n force_handlers: True\n vars_files:\n - gcp_account_info.yml\n tasks:\n - name: Get Subnet Facts\n gcp_compute_subnetwork_facts:\n region: \"{{ subnets | map(attribute='region') | list | first }}\"\n auth_kind: \"{{ auth_kind }}\"\n project: \"{{ project }}\"\n service_account_file: \"{{ service_account_file }}\"\n register: gcp_vpc_subnets\n```", "```\n - name: Validate all Subnets are Deployed\n assert:\n that:\n - gcp_vpc_subnets['items'] | selectattr('name','equalto',item.name) |\n map(attribute='ipCidrRange') | list | first\n == item.cidr\n loop: \"{{ subnets }}\"\n```", "```\n$ cat pb_gcp_env_destroy.yml\n\n---\n- name: Decommission GCP Resources\n hosts: all\n connection: local\n force_handlers: True\n environment:\n GCP_SERVICE_ACCOUNT_FILE: \"{{ service_account_file }}\"\n GCP_AUTH_KIND: 'serviceaccount'\n vars_files:\n - gcp_account_info.yml\n tasks:\n - name: Read the Vault Encrypted JSON File\n copy:\n content: \"{{ lookup('file','gcp-ansible-secret.json') }}\"\n dest: \"{{ service_account_file }}\"\n notify: Clean tmp Decrypted Files\n tags: always\n```", "```\n - name: Get VPC Facts\n gcp_compute_network_facts:\n project: \"{{ project }}\"\n register: gcp_vpc\n```", "```\n - name: Delete Instance {{ node.name }}\n gcp_compute_instance:\n name: \"{{ node.name | regex_replace('_','-') }}\"\n zone: \"{{ node.zone }}\"\n project: \"{{ project }}\"\n state: absent\n loop: \"{{ compute_nodes }}\"\n loop_control:\n loop_var: node\n```", "```\n - name: Delete disks for {{ node.name }}\n gcp_compute_disk:\n name: \"{{ node.name | regex_replace('_','-') }}-disk\"\n zone: \"{{ node.zone }}\"\n project: \"{{ project }}\"\n state: absent\n loop: \"{{ compute_nodes }}\"\n loop_control:\n loop_var: node\n```", "```\n - name: Delete All Firewall Rules\n gcp_compute_firewall:\n name: \"{{ rule.name | regex_replace('_','-') }}\"\n network: \"{{ gcp_vpc }}\"\n project: \"{{ project }}\"\n state: absent\n loop: \"{{ fw_rules }}\"\n loop_control:\n loop_var: rule\n tags: gcp_fw_rules\n```", "```\n- name: Delete all Routes\n gcp_compute_route:\n name: \"{{ route.name }}\"\n dest_range: \"{{ route.dest}}\"\n network: \"{{ gcp_vpc }}\"\n project: \"{{ project }}\"\n state: absent\n loop: \"{{ custom_routes }}\"\n loop_control:\n loop_var: route\n when:\n - custom_routes is defined\n```", "```\n - name: Delete GCP Subnets\n gcp_compute_subnetwork:\n name: \"{{ subnet.name }}\"\n ip_cidr_range: \"{{ subnet.cidr }}\"\n network: \"{{ gcp_vpc }}\"\n region: \"{{ subnet.region }}\"\n project: \"{{ project }}\"\n state: absent\n loop: \"{{ subnets }}\"\n loop_control:\n loop_var: subnet\n```", "```\n - name: Delete GCP VPC\n gcp_compute_network:\n name: \"{{ vpc_name | regex_replace('_','-') }}\"\n project: \"{{ project }}\"\n state: absent\n```"]