- en: Deploying and Operating GCP Networking Resources with Ansible
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible部署和操作GCP网络资源
- en: Google Cloud is one of the big players in the public cloud and it provides a
    comprehensive set of services and features on its **Google Cloud Platform** (**GCP**)
    cloud. In this chapter, we will explore how to automate the provisioning of resources
    on the GCP cloud using Ansible and how to use the various Ansible modules to orchestrate
    the building of virtual networks across the GCP cloud.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud是公共云中的重要参与者之一，它在其**Google Cloud Platform**（**GCP**）云上提供了一套全面的服务和功能。在本章中，我们将探讨如何使用Ansible自动化在GCP云上提供资源，并如何使用各种Ansible模块来编排在GCP云上构建虚拟网络。
- en: 'In this chapter, we will use a simple network setup to illustrate the use of
    different Ansible modules in building an example network across GCP. The following
    diagram outlines this sample network that we will build:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用一个简单的网络设置来说明在GCP上使用不同Ansible模块构建示例网络的方法。以下图表概述了我们将构建的示例网络：
- en: '![](assets/910e0c04-0d37-4c3e-a965-7e793b6ba1be.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/910e0c04-0d37-4c3e-a965-7e793b6ba1be.png)'
- en: 'This chapter will cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Installing the GCP SDK
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装GCP SDK
- en: Building an Ansible inventory
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Ansible清单
- en: Authenticating to your GCP account
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证您的GCP账户
- en: Creating GCP VPC networks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建GCP VPC网络
- en: Creating subnets
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建子网
- en: Deploying firewall rules in GCP
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GCP中部署防火墙规则
- en: Deploying VMs in GCP
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GCP中部署虚拟机
- en: Adjusting routing within a VPC
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整VPC内的路由
- en: Validating GCP deployment using Ansible
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible验证GCP部署
- en: Decommissioning GCP resources using Ansible
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible取消部署GCP资源
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In order to start working with GCP, we need to create an account. You can set
    up a free GCP account at [https://cloud.google.com/free/](https://cloud.google.com/free/).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始使用GCP，我们需要创建一个账户。您可以在[https://cloud.google.com/free/](https://cloud.google.com/free/)上设置一个免费的GCP账户。
- en: The GitHub code used in this chapter can be found at [https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch9_gcp](https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch9_gcp).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的GitHub代码可以在[https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch9_gcp](https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch9_gcp)找到。
- en: 'The following are the software releases that this chapter is based on:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章基于以下软件版本：
- en: CentOS 7
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CentOS 7
- en: Ansible 2.9
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 2.9
- en: Python 3.6.8
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6.8
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[https://bit.ly/3erVlSN](https://bit.ly/3erVlSN)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3erVlSN](https://bit.ly/3erVlSN)'
- en: Installing the GCP SDK
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装GCP SDK
- en: In this recipe, we will outline how to install the required Python libraries
    needed to start interacting with the GCP orchestration system using Ansible. This
    step is mandatory since the required Python libraries must be installed on the
    Ansible control machine in order for all the Ansible GCP modules to work.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将概述如何安装所需的Python库，以便开始使用Ansible与GCP编排系统进行交互。这一步是强制性的，因为必须在Ansible控制机器上安装所需的Python库，以便所有Ansible
    GCP模块正常工作。
- en: Getting ready
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have `sudo` access on the machine in order to install the GCP Python
    libraries. You also need to have Python installed and the Python pip package,
    which we will use to install the GCP package.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在机器上拥有`sudo`访问权限才能安装GCP Python库。您还需要安装Python和Python pip包，我们将使用它来安装GCP包。
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Install the `requests` package as shown in the following code:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下代码安装`requests`包：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install the Google authentication package as shown in the following code:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下代码安装Google认证包：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a new folder called `ch9_gcp` to host all the code for this chapter:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch9_gcp`的新文件夹，用于存放本章的所有代码：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The default installation of Ansible doesn’t include all the required Python
    modules needed to execute the GCP cloud modules. In this recipe, we installed
    the two required Python packages that are needed by all GCP modules. The first
    package is the `requests` package, which is used mainly to invoke REST API calls
    to the Google orchestration system, and the other package is the `google-auth`
    package to authenticate against the API.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 默认安装的Ansible不包括执行GCP云模块所需的所有必需的Python模块。在本教程中，我们安装了所有GCP模块所需的两个Python包。第一个包是`requests`包，主要用于调用Google编排系统的REST
    API调用，另一个包是`google-auth`包，用于对API进行身份验证。
- en: See also...
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: For more information regarding how to start interacting with GCP using Ansible,
    please refer to [https://docs.ansible.com/ansible/latest/scenario_guides/guide_gce.html](https://docs.ansible.com/ansible/latest/scenario_guides/guide_gce.html).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何使用Ansible开始与GCP进行交互的更多信息，请参阅[https://docs.ansible.com/ansible/latest/scenario_guides/guide_gce.html](https://docs.ansible.com/ansible/latest/scenario_guides/guide_gce.html)。
- en: Building an Ansible inventory
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Ansible清单
- en: In this recipe, we will outline how to build an Ansible inventory to describe
    the network infrastructure setup that we will build across the GCP public cloud.
    This is a mandatory step that we need to take in order to define all our VPC networks
    across all the regions that we will deploy our infrastructure in.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将概述如何构建一个Ansible清单，以描述我们将在GCP公共云中构建的网络基础架构。这是一个强制性的步骤，我们需要采取这一步骤来定义我们在其中部署基础架构的所有地区的所有VPC网络。
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Create the `hosts` file inside the `ch9_gcp` directory with the following data:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ch9_gcp`目录中创建`hosts`文件，并填入以下数据：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create the `ansible.cfg` file with the following content:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`ansible.cfg`文件，并填入以下内容：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create the `group_vars` folder and the `gcp_vpc.yml`, which will host all the
    variables that define our infrastructure in this VPC:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`group_vars`文件夹和`gcp_vpc.yml`，其中将包含定义我们在此VPC中的基础架构的所有变量：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create the `roles` directory within our main folder (`ch9_gcp`). This folder
    will include all the roles that we will use to create our GCP infrastructure:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的主文件夹（`ch9_gcp`）中创建`roles`目录。该文件夹将包括我们用来创建GCP基础架构的所有角色：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We created the `hosts` Ansible inventory file and we declared all the VPCs that
    we will provision in the GCP cloud. We have a single VPC in our sample setup,
    so we created a single group called the `gcp_vpc`, which includes our VPC (`demo_gcp_vpc`).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了`hosts` Ansible清单文件，并声明了我们将在GCP云中配置的所有VPC。在我们的示例设置中，我们有一个单独的VPC，所以我们创建了一个名为`gcp_vpc`的单一组，其中包括我们的VPC（`demo_gcp_vpc`）。
- en: We created the `group_vars/gcp_vpc.yml` file, which will house all the variables
    that we will declare to define our infrastructure in this VPC.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了`group_vars/gcp_vpc.yml`文件，其中将包含我们在此VPC中定义基础架构的所有变量。
- en: 'At this time, our directory layout is as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们的目录布局如下：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Authenticating to your GCP account
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对GCP帐户进行身份验证
- en: In this recipe, we will outline how to create the required credentials to programmatically
    authenticate to our GCP account from Ansible. This is a mandatory step that you
    need to take in order to be able to run any Ansible module in the following recipes.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将概述如何创建所需的凭据，以便从Ansible对我们的GCP帐户进行编程身份验证。这是您需要采取的强制步骤，以便能够在以下教程中运行任何Ansible模块。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible controller must have internet access. In addition, the user performing
    these steps must have administrative access to the GCP console in order to create
    the required resources to enable programmatic interaction with the GCP APIs.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible控制器必须具有互联网访问权限。此外，执行这些步骤的用户必须具有GCP控制台的管理员访问权限，以便创建所需的资源以启用与GCP API的编程交互。
- en: How to do it...
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Log in to GCP Console with an administrative account.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用管理员帐户登录到GCP控制台。
- en: 'From the main console, choose IAM & admin | Manage Resources. Create a new
    project within GCP that will house all the infrastructure that we will build in
    GCP:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主控制台中，选择IAM & admin | Manage Resources。在GCP中创建一个新项目，该项目将容纳我们在GCP中构建的所有基础设施：
- en: '![](assets/1b91a110-bc79-4a46-b76b-fdcd84ccda23.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1b91a110-bc79-4a46-b76b-fdcd84ccda23.png)'
- en: 'From the main console, go to IAM & admin | Service accounts:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从主控制台转到IAM & admin | Service accounts：
- en: '![](assets/9bfee5ee-1ba7-4c43-9483-99c695d42552.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9bfee5ee-1ba7-4c43-9483-99c695d42552.png)'
- en: 'Create a New Service account for a new Ansible user:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为新的Ansible用户创建一个新的服务帐户：
- en: '![](assets/80d7aaaa-3f81-461c-a8bb-7a92cd076ea2.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/80d7aaaa-3f81-461c-a8bb-7a92cd076ea2.png)'
- en: 'Assign the appropriate role to this new service account so that you can create/edit/delete
    the resources in this GCP project:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个新的服务帐户分配适当的角色，以便您可以在此GCP项目中创建/编辑/删除资源：
- en: '![](assets/cc8950c4-cabc-44dd-b85e-72b808026853.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cc8950c4-cabc-44dd-b85e-72b808026853.png)'
- en: 'Create and download the private key that will be used to authenticate this
    user:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并下载将用于对此用户进行身份验证的私钥：
- en: '![](assets/3d5de4dd-7de0-4b64-b77c-2f24cd4c203f.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3d5de4dd-7de0-4b64-b77c-2f24cd4c203f.png)'
- en: Copy the downloaded JSON key file to the project directory `ch9_gcp` and rename
    it as `gcp_ansible_secret.json`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的JSON密钥文件复制到项目目录`ch9_gcp`并将其重命名为`gcp_ansible_secret.json`。
- en: 'On the GCP console, select API & Services and enable the Google Compute Engine
    API for the current project:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在GCP控制台上，选择API & Services并为当前项目启用Google Compute Engine API：
- en: '![](assets/321bf2ae-6fb7-406f-b41c-1190a4844803.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/321bf2ae-6fb7-406f-b41c-1190a4844803.png)'
- en: How it works...
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In order to have programmatic access to the GCP API (this is how Ansible communicates
    with the GCP cloud to provision resources), we need to create a special account
    called a service account within our GCP project. This service account is similar
    to a user, but with only API access to the GCP project. We created this service
    account and called it Ansible, and we provided it with the Project Owner role
    in order to have full privilege to create resources within the GCP project (in
    production, a more restrictive role should be assigned to this service account).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够以编程方式访问GCP API（这是Ansible与GCP云通信以配置资源的方式），我们需要在我们的GCP项目中创建一个称为服务帐户的特殊帐户。此服务帐户类似于用户，但只能访问GCP项目的API。我们创建了此服务帐户并将其称为Ansible，并为其分配了项目所有者角色，以便在GCP项目中具有创建资源的全部权限（在生产环境中，应为此服务帐户分配更严格的角色）。
- en: 'In order to authenticate to the GCP API using this service account, GCP provided
    us with a JSON file that has the identification information for this account.
    The main parameters included in this JSON file are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用此服务帐户对GCP API进行身份验证，GCP为我们提供了一个JSON文件，其中包含此帐户的身份信息。此JSON文件中包含的主要参数如下：
- en: The private SSH key for this service account
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此服务帐户的私钥
- en: The type of this account
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此帐户的类型
- en: '`Project_id`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Project_id`'
- en: '`Client_id`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Client_id`'
- en: '`client_email`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client_email`'
- en: We save this JSON file and copy it to our directory, since we will refer to
    it in all our playbooks in order to provision the resources on the GCP cloud.
    The final step is to enable the API in our GCP project; we need to enable the
    GCP compute engine API in order to start interacting with this API since, by default,
    the API access is disabled within the GCP project.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们保存这个JSON文件并将其复制到我们的目录中，因为我们将在所有的playbooks中引用它，以便在GCP云上配置资源。最后一步是在我们的GCP项目中启用API；我们需要启用GCP计算引擎API，以便开始与此API进行交互，因为默认情况下，在GCP项目中API访问是被禁用的。
- en: There's more...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The JSON file that holds all the identification information to authenticate
    the GCP API again is a critical file that should be secured, and so we are going
    to use an Ansible vault in order to secure this file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有身份验证信息以对GCP API进行身份验证的JSON文件是一个关键文件，应该进行安全保护，因此我们将使用Ansible vault来保护此文件。
- en: 'We create a new file called `vault_pass`, which holds our Ansible vault password
    and we update our `ansible.cfg` file to point to it, as shown in the following
    code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个名为`vault_pass`的新文件，其中包含我们的Ansible vault密码，并更新我们的`ansible.cfg`文件以指向它，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We encrypt the JSON file using Ansible vault, as shown in the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Ansible vault加密JSON文件，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: At this stage, we have our JSON file secure and all its contents encrypted using
    the password declared in the `vault_pass` file.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们的JSON文件是安全的，所有内容都使用`vault_pass`文件中声明的密码进行加密。
- en: See also...
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: For more information regarding how to create a new service account in GCP, go
    to [https://cloud.google.com/iam/docs/creating-managing-service-accounts](https://cloud.google.com/iam/docs/creating-managing-service-accounts).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何在GCP中创建新服务账号的更多信息，请访问[https://cloud.google.com/iam/docs/creating-managing-service-accounts](https://cloud.google.com/iam/docs/creating-managing-service-accounts)。
- en: Creating GCP VPC networks
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建GCP VPC网络
- en: In the GCP, VPCs are the main networking construct that are used to group all
    our resources. We can think of them as a virtual data center in the cloud. We
    need to define our VPCs in order to prepare our cloud environment to host our
    applications. In this recipe, we will outline how to define and provision a VPC
    in GCP.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在GCP中，VPC是用于对所有资源进行分组的主要网络构造。我们可以将它们视为云中的虚拟数据中心。我们需要定义我们的VPC，以准备好我们的云环境来托管我们的应用程序。在这个示例中，我们将概述如何在GCP中定义和配置VPC。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible control machine must be connected to the internet with reachability
    to GCP public API endpoints, and the GCP account should be configured as outlined
    in the previous recipes.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible控制机必须连接到具有对GCP公共API端点的可达性的互联网，并且GCP帐户应按照前面的示例进行配置。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Create a new YAML file called `gcp_account_info.yml` and include the following
    data for our GCP login parameters:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`gcp_account_info.yml`的新的YAML文件，并包含我们的GCP登录参数的以下数据：
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a new Ansible role called `gcp_net_build`, as shown in the following
    code:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`gcp_net_build`的新Ansible角色，如下所示：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Update the `gcp_net_build/tasks/main.yml` file with the following task to create
    our VPC:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`gcp_net_build/tasks/main.yml`文件，添加以下任务以创建我们的VPC：
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create the `group_vars` folder and create the `gcp_vpc.yml` file with the following
    data for the VPC:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`group_vars`文件夹，并为VPC创建`gcp_vpc.yml`文件，包括以下数据：
- en: '[PRE13]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create the `pb_gcp_env_build.yml` playbook with the following task to read
    the vault-encrypted JSON file:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`pb_gcp_env_build.yml`剧本，包括以下任务以读取保险库加密的JSON文件：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Update the `pb_gcp_env_build.yml` playbook with the following task to create
    the required VPCs:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`pb_gcp_env_build.yml`剧本以创建所需的VPC：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Update the playbook with the following handlers to delete the temporary JSON
    credentials file, as shown in the following code:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新剧本，包括以下处理程序以删除临时JSON凭据文件，如下所示：
- en: '[PRE16]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we created and deployed the GCP VPC in the project that we created
    previously. We used an Ansible role in order to build all the components of the
    GCP network, and the first task was to create the VPC using the Ansible module
    `gcp_compute_network`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们在之前创建的项目中创建并部署了GCP VPC。我们使用了Ansible角色来构建GCP网络的所有组件，第一个任务是使用Ansible模块`gcp_compute_network`创建VPC。
- en: 'In order to use any Ansible GCP module, we needed to authenticate every API
    call triggered by each module and we needed to provide the following information
    in order to authenticate the API calls:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用任何Ansible GCP模块，我们需要对每个模块触发的每个API调用进行身份验证，并且我们需要提供以下信息以验证API调用：
- en: '`Auth_kind`: The type of authentication—in our case, `serviceaccount`.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Auth_kind`：身份验证类型—在我们的情况下是`serviceaccount`。'
- en: '`Project`: This is the project name for the current project that we created.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Project`：这是我们创建的当前项目的项目名称。'
- en: '`Service_account_file`: This is the JSON file that we downloaded when we created
    the service account.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Service_account_file`：这是我们创建服务账号时下载的JSON文件。'
- en: Since we are using an Ansible vault in order to encrypt all the contents of
    the JSON file that holds all the authentication information, we needed to decrypt
    this file during playbook execution in order to use the data within this file.
    Furthermore, since we are not directly reading the contents of this JSON file
    but rather pointing to it using the `serivce_account_file` parameter in all our
    GCP Ansible modules, we created a task to read the contents of this JSON file
    using the `lookup` module and store this data in a temporary file. With this approach,
    we can read the encrypted data in this JSON file and create a new temporary JSON
    file with the data in plaintext. We can also use this temporary JSON file as the
    input to `service_account_file`. We used a handler task in order to delete this
    temporary file at the end of the play. On the play level, we used `force_handlers`
    in order to ensure the run of all the tasks within the handler section, even if
    any of the tasks within our play fails. This means that we are sure that the plaintext
    JSON file that holds our credentials is always deleted.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用Ansible vault来加密保存所有身份验证信息的JSON文件的所有内容，因此我们需要在剧本执行期间解密此文件以使用该文件中的数据。此外，由于我们不直接读取此JSON文件的内容，而是使用所有GCP
    Ansible模块中的`serivce_account_file`参数指向它，我们创建了一个任务来使用`lookup`模块读取此JSON文件的内容，并将这些数据存储在临时文件中。通过这种方法，我们可以读取此JSON文件中的加密数据，并创建一个新的临时JSON文件，其中包含明文数据。我们还可以使用此临时JSON文件作为`service_account_file`的输入。我们使用了一个处理程序任务来在播放结束时删除此临时文件。在播放级别上，我们使用了`force_handlers`来确保运行处理程序部分内的所有任务，即使我们播放中的任何任务失败。这意味着我们确保保存我们的凭据的明文JSON文件始终被删除。
- en: 'We grouped all the preceding parameters and placed them in the `gcp_account_info.yml`
    file, and we included this file in our playbook. We created the VPC using the
    `gcp_compute_network` module and we supplied the following information in order
    to deploy the VPC:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将所有前述参数分组并放入`gcp_account_info.yml`文件中，并将此文件包含在我们的剧本中。我们使用`gcp_compute_network`模块创建了VPC，并提供了以下信息以部署VPC：
- en: '`Name`: The name of our new VPC.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Name`：我们新VPC的名称。'
- en: '`Auto_create_subnetwork`: Set it to `no`, since we want to create a custom
    VPC network, not an auto-mode VPC network.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Auto_create_subnetwork`：将其设置为`no`，因为我们想要创建自定义VPC网络，而不是自动模式VPC网络。'
- en: '`Routing_config`: Set it to `Regional` in order to stop route propagation between
    subnets in different regions.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Routing_config`：将其设置为`Regional`，以阻止不同区域子网之间的路由传播。'
- en: One clear point that we need to highlight is that VPCs within GCP have a global
    scope, which means that they are not bound to a specific region, but span all
    the regions in the GCP cloud. The subnets, on the other hand, are region-specific;
    however, since we created a custom VPC, no subnets are created by default in any
    region, and we have complete control over where to define our subnets. This logic
    is different when we compare it with AWS and GCP in terms of VPC scope.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要强调的一个明显的点是，GCP中的VPC具有全局范围，这意味着它们不绑定到特定区域，而是跨越GCP云中的所有区域。另一方面，子网是特定于区域的；然而，由于我们创建了自定义VPC，在任何区域默认情况下都不会创建子网，我们完全控制在哪里定义我们的子网。在VPC范围方面，这种逻辑与AWS和GCP的VPC范围有所不同。
- en: When creating the VPC using the `gcp_compute_network` module, we must supply
    the VPC name. In this task, we used the `regex_replace` Ansible filter in order
    to make sure that the VPC name doesn’t contain the underscore character (`_`),
    since it is not a valid character in the VPC name. We use this filter to replace
    any occurrence of the underscore with the dash (`-`) in order to make sure that
    the VPC name is compliant with GCP VPC naming standards.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`gcp_compute_network`模块创建VPC时，我们必须提供VPC名称。在这个任务中，我们使用了`regex_replace` Ansible过滤器，以确保VPC名称不包含下划线字符(`_`)，因为这不是VPC名称中的有效字符。我们使用这个过滤器来替换下划线的任何出现，用破折号(`-`)来确保VPC名称符合GCP
    VPC命名标准。
- en: 'Once we run our playbook with this single task, we can see that the VPC is
    created, as seen on the GCP console:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行我们的playbook，我们可以看到VPC已经创建，在GCP控制台上可以看到：
- en: '![](assets/bd8f757e-a201-4e5c-baef-9804eab8465b.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bd8f757e-a201-4e5c-baef-9804eab8465b.png)'
- en: 'The following snippet outlines the parameters returned by the Ansible module
    after creating the VPC:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下片段概述了Ansible模块在创建VPC后返回的参数：
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This information is important, and we will use it in subsequent recipes in order
    to create subnets so that we can register the output of this task in the `gcp_vpc`
    variable in order to be able to refer to it in later tasks.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息很重要，我们将在后续的教程中使用它来创建子网，以便我们可以注册此任务的输出到`gcp_vpc`变量中，以便在以后的任务中引用它。
- en: There is more...
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: By default, when we create a new project in GCP, an auto-mode VPC is created
    for this project named `default`. It is recommended that we delete this default
    network since we will rely on our custom VPC to house all of our compute workload.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当我们在GCP中创建一个新项目时，会为该项目创建一个名为`default`的自动模式VPC。建议我们删除这个默认网络，因为我们将依赖我们的自定义VPC来容纳所有的计算工作负载。
- en: 'We can see in our project that this default VPC is present and it has subnets
    in each region across the GCP cloud, as shown in the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在我们的项目中看到这个默认VPC是存在的，并且它在GCP云中的每个区域都有子网，如下面的截图所示：
- en: '![](assets/6d052d97-7467-4efa-83b1-c6e5304e3e78.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6d052d97-7467-4efa-83b1-c6e5304e3e78.png)'
- en: I have created a playbook called `pb_gcp_delete_default_vpc.yml` to delete this
    default VPC and all the default firewall rules attached to it.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个名为`pb_gcp_delete_default_vpc.yml`的playbook来删除默认VPC以及附加到它的所有默认防火墙规则。
- en: See also...
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: For more information regarding the GCP Virtual Private Cloud module in Ansible
    and all the other parameters supported by this module, go to [https://docs.ansible.com/ansible/latest/modules/gcp_compute_network_module.html#gcp-compute-network-module](https://docs.ansible.com/ansible/latest/modules/gcp_compute_network_module.html#gcp-compute-network-module).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Ansible中GCP虚拟私有云模块以及此模块支持的所有其他参数的更多信息，请访问[https://docs.ansible.com/ansible/latest/modules/gcp_compute_network_module.html#gcp-compute-network-module](https://docs.ansible.com/ansible/latest/modules/gcp_compute_network_module.html#gcp-compute-network-module)。
- en: Creating subnets
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建子网
- en: We segregate our GCP VPCs using subnets, which is the tool that allows us to
    place our compute workload into a specific region. Furthermore, subnets provide
    us with the tool to segregate our virtual network into distinct routing and security
    domains that we can control in order to provide differentiated routing and security
    behavior within each subnet. In this recipe, we will outline how to define and
    provision subnets within the GCP cloud.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用子网来分隔我们的GCP VPC，这是一个工具，允许我们将计算工作负载放入特定区域。此外，子网为我们提供了工具，将我们的虚拟网络分隔成不同的路由和安全域，我们可以控制以提供不同的路由和安全行为在每个子网内。在这个教程中，我们将概述如何在GCP云中定义和配置子网。
- en: Getting ready
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible control machine must be connected to the internet with reachability
    to the GCP public API endpoints and the GCP account should be configured as outlined
    in the previous recipes. Also, the GCP VPC needs to be created as outlined in
    the previous recipe.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible控制机必须连接到互联网，可以访问GCP公共API端点，并且GCP帐户应该按照前面的教程进行配置。此外，GCP VPC需要按照前面的教程进行创建。
- en: How to do it...
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Update the `group_vars/gcp_vpc.yml` file with the subnets data, as shown in
    the following code:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码更新`group_vars/gcp_vpc.yml`文件中的子网数据：
- en: '[PRE18]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Update the `gcp_net_build/tasks/main.yml` file with the following task to create
    our subnets:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`gcp_net_build/tasks/main.yml`文件来创建我们的子网：
- en: '[PRE19]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we created the subnets that we are going to use in our deployment.
    The first thing to notice in our subnet definition is that we defined a region
    for each subnet. This is mandatory since, as we discussed, a subnet in GCP has
    regional scope compared to VPCs, which have global scope. We defined a CIDR range
    for each subnet, along with its name.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们创建了我们将在部署中使用的子网。在我们的子网定义中需要注意的第一件事是，我们为每个子网定义了一个区域。这是强制性的，因为正如我们讨论的那样，在GCP中，子网具有区域范围，而VPC具有全局范围。我们为每个子网定义了一个CIDR范围，以及它的名称。
- en: 'We used the `gcp_compute_subnet` module in order to create all our subnets.
    We used the same parameters that we discussed before for authentication. To create
    the subnets, we specified the following parameters:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`gcp_compute_subnet`模块来创建所有子网。我们使用了之前讨论过的相同参数进行身份验证。为了创建子网，我们指定了以下参数：
- en: '`Name`: The name of our subnet.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`名称`：我们的子网名称。'
- en: '`Region`: The region where this subnet will be deployed.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`区域`：此子网将部署的区域。'
- en: '`Ip_cidr_range`: The CIDR block for this subnet.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ip_cidr_range`：此子网的CIDR块。'
- en: '`Network`: The reference for our VPC that we want this subnet to be part of.
    We get this parameter from the output of creating the VPC. We supply the `gcp_vpc`
    variable, which is the registered variable from our VPC creation task.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`网络`：我们希望此子网成为其中一部分的VPC的引用。我们从创建VPC的输出中获取此参数。我们提供`gcp_vpc`变量，这是来自我们VPC创建任务的注册变量。'
- en: 'Once we run the playbook, we can see that all subnets are created as shown
    in the following screenshot:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 运行playbook后，我们可以看到所有子网都已创建，如下截图所示：
- en: '![](assets/521c81aa-441c-497a-8940-f0ab24a28790.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/521c81aa-441c-497a-8940-f0ab24a28790.png)'
- en: See also...
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: For more information regarding the GCP subnets module in Ansible and all the
    other parameters supported by this module, go to [https://docs.ansible.com/ansible/latest/modules/gcp_compute_subnetwork_module.html](https://docs.ansible.com/ansible/latest/modules/gcp_compute_subnetwork_module.html).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Ansible中GCP子网模块以及此模块支持的所有其他参数的更多信息，请访问[https://docs.ansible.com/ansible/latest/modules/gcp_compute_subnetwork_module.html](https://docs.ansible.com/ansible/latest/modules/gcp_compute_subnetwork_module.html)。
- en: Deploying firewall rules in GCP
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GCP中部署防火墙规则
- en: GCP provides many tools in order to enforce security within the customer environment
    of the GCP cloud. Firewall rules are one of the most basic security tools supported
    in GCP in order to implement the first level of defense for all the workloads
    within a VPC. In this recipe, we will outline how to define and provision firewall
    rules on the GCP cloud.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: GCP提供了许多工具，以强制执行GCP云客户环境中的安全性。防火墙规则是GCP中支持的最基本的安全工具之一，以实施VPC中所有工作负载的第一级防御。在本配方中，我们将概述如何在GCP云中定义和配置防火墙规则。
- en: Getting ready
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible control machine must be connected to the internet with reachability
    to GCP public API endpoints, and the GCP account should be configured as outlined
    in the previous recipes. Also, VPC and subnets should be provisioned as outlined
    in the previous recipes.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible控制机必须连接到互联网，并能够访问GCP公共API端点，GCP帐户应按照前面的配方进行配置。此外，VPC和子网应按照前面的配方进行配置。
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Update `group_vars/gcp_vpc.yml` with the following firewall rules to secure
    traffic between the web and DB layers.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下防火墙规则更新`group_vars/gcp_vpc.yml`，以保护Web和DB层之间的流量。
- en: '[PRE20]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Update `group_vars/gcp_vpc.yml` with the following firewall rules to secure
    traffic toward the web layer:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下防火墙规则更新`group_vars/gcp_vpc.yml`，以保护流量到Web层：
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Update `group_vars/gcp_vpc.yml` with the following firewall rules to allow
    `ssh` to only bastion hosts:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下防火墙规则更新`group_vars/gcp_vpc.yml`，以允许`ssh`仅限于堡垒主机：
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Update the `roles/gcp_net_build/tasks.main.yml` file with the following task
    to create all the required firewall rules:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`roles/gcp_net_build/tasks.main.yml`文件以创建所有必需的防火墙规则：
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The firewall rules in GCP are stateful firewall rules that are applied to hosts
    within the VPC. Firewall rules within GCP can be applied on the ingress or the
    egress direction, and there are some default firewall rules that are defined and
    applied to all hosts within a VPC, as shown here:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: GCP中的防火墙规则是应用于VPC中的主机的有状态防火墙规则。GCP中的防火墙规则可以应用于入站或出站方向，并且有一些默认防火墙规则被定义并应用于VPC中的所有主机，如下所示：
- en: On the ingress direction, there is a default `deny all` for all traffic destined
    to any host within a new custom VPC.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在入站方向上，对于任何目标到新自定义VPC中的任何主机的所有流量，默认情况下会有一个`拒绝所有`。
- en: On the egress direction, there is a default `allow all` for all traffic from
    any host within a new custom VPC.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在出站方向上，对于新自定义VPC中的任何主机发出的所有流量，默认情况下会有一个`允许所有`。
- en: With the preceding default rules, and since all the firewall rules are stateful,
    any communication initiated from any host within the VPC to the outside world
    will be allowed; however, any initiated traffic from outside the VPC will be rejected.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 有了上述默认规则，并且由于所有防火墙规则都是有状态的，VPC中的任何主机发起的任何通信都将被允许；但是，来自VPC外部的任何发起的流量将被拒绝。
- en: 'GCP firewall rules can match traffic based on the following criteria:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: GCP防火墙规则可以根据以下标准匹配流量：
- en: Source/destination IPv4 ranges
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源/目标IPv4范围
- en: IP protocol numbers
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP协议号
- en: TCP/UDP port numbers
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TCP/UDP端口号
- en: Network tags
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络标记
- en: All the preceding criteria are quite obvious except for network tags. Network
    tags are special metadata that can be applied to any host within a VPC to identify
    and group these hosts. We can use these network tags in order to use them as match
    criteria in firewall rules, as well as to apply the firewall rules only to a subset
    of our hosts within the VPC.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 除了网络标记之外，所有前述标准都是相当明显的。网络标记是特殊的元数据，可应用于VPC中的任何主机，以标识和分组这些主机。我们可以使用这些网络标记来作为防火墙规则中的匹配标准，并且仅将防火墙规则应用于VPC中的一部分主机。
- en: 'With all this information, we want to implement the following security policy
    on our hosts within our sample network:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 有了所有这些信息，我们希望在示例网络中的主机上实施以下安全策略：
- en: All HTTP/HTTPs traffic should be allowed only to all our web servers.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有HTTP/HTTPs流量应仅允许到我们所有的Web服务器。
- en: SSH access from outside should be limited to only our bastion hosts.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部的SSH访问应该仅限于我们的堡垒主机。
- en: SSH access to our web and DB servers is limited to only bastion hosts.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对我们的Web和DB服务器的SSH访问仅限于堡垒主机。
- en: Only allow SQL traffic from the web to DB servers.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅允许来自Web到DB服务器的SQL流量。
- en: We defined our firewall rules in a new data structure, `fw_rules`, which is
    a list of all our rules that need to be applied to our VPC. We used the network
    tags in all our policies in order to apply the correct firewall rule to the hosts
    where this rule should be enforced.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在一个新的数据结构`fw_rules`中定义了我们的防火墙规则，这是我们需要应用于我们的VPC的所有规则的列表。我们在所有策略中使用网络标记，以便将正确的防火墙规则应用于应强制执行此规则的主机。
- en: We used the Ansible module `gcp_compute_firewall` in order to iterate over all
    the firewall policies and apply them. In this module, we can define the match
    criteria to be either based on source/destination IPv4 address ranges or based
    on source and target network tags. We defined our task so that if a parameter
    is not defined in our firewall rule (for example, source IPv4 ranges), we should
    remove this parameter from the list of parameters supplied to the module. We use
    the `omit` filter in order to accomplish this logic.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Ansible模块`gcp_compute_firewall`来迭代所有防火墙策略并应用它们。在此模块中，我们可以定义匹配条件，可以基于源/目标IPv4地址范围，也可以基于源和目标网络标记。我们定义了我们的任务，以便如果在我们的防火墙规则中未定义参数（例如，源IPv4范围），我们应该从提供给模块的参数列表中删除此参数。我们使用`omit`过滤器来实现此逻辑。
- en: All firewall rules within GCP have the priority field, which defines the priority
    of the rule compared to other rules and its precedence in terms of processing.
    Any rule with no specific priority gets the priority value of 1,000\. The default
    firewall rules applied by GCP to the VPC have the priority value of `65535`, so
    any rule we define will have precedence over them. In all our rules, we specify
    the priority value of `10`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: GCP中的所有防火墙规则都有优先级字段，该字段定义了规则相对于其他规则的优先级以及在处理方面的优先级。没有特定优先级的规则将获得优先级值1,000。GCP应用于VPC的默认防火墙规则具有优先级值`65535`，因此我们定义的任何规则都将优先于它们。在所有规则中，我们指定优先级值为`10`。
- en: 'Once we run the following task, we can see that the following rules are applied
    to our VPC, as shown in the following screenshot:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下任务后，我们可以看到以下规则应用于我们的VPC，如下截图所示：
- en: '![](assets/379efda5-40a4-47eb-a471-75cdcecdaa58.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/379efda5-40a4-47eb-a471-75cdcecdaa58.png)'
- en: See also...
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: For more information regarding the GCP firewall modules in Ansible and all the
    other parameters supported by this module, go to [https://docs.ansible.com/ansible/latest/modules/gcp_compute_firewall_module.html](https://docs.ansible.com/ansible/latest/modules/gcp_compute_firewall_module.html).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Ansible中GCP防火墙模块以及此模块支持的所有其他参数的更多信息，请访问[https://docs.ansible.com/ansible/latest/modules/gcp_compute_firewall_module.html](https://docs.ansible.com/ansible/latest/modules/gcp_compute_firewall_module.html)。
- en: Deploying VMs in GCP
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GCP中部署VMs
- en: In this recipe, we will outline how to deploy virtual machines (using Google
    Compute Engine) in GCP within our VPCs using the correct subnets that we have
    deployed. We will also assign the correct network tags in order to enforce the
    correct security policy on these machines.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将概述如何在GCP中的VPC中使用我们部署的正确子网部署虚拟机（使用Google Compute Engine）。我们还将分配正确的网络标记，以强制执行这些机器上的正确安全策略。
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible control machine must be connected to the internet with reachability
    to GCP public API endpoints, and the VPCs, subnets, and firewall rules need to
    be deployed as outlined in the previous chapters.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible控制机必须连接到具有对GCP公共API端点的可达性的互联网，并且VPC、子网和防火墙规则需要按照前几章中概述的方式部署。
- en: How to do it...
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Update the `group_vars/gcp_vpc.yml` file to include the required information
    to describe the flavor and OS that we will use on all our VMs:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`group_vars/gcp_vpc.yml`文件，包括描述我们将在所有VM上使用的flavor和OS的所需信息：
- en: '[PRE24]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Update the `group_vars/gcp_vpc.yml` file to include the required information
    that describes our compute nodes:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`group_vars/gcp_vpc.yml`文件，包括描述我们计算节点所需信息：
- en: '[PRE25]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a new Ansible role (`gcp_vm_build`) to deploy the VM workload on GCP:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Ansible角色（`gcp_vm_build`）来在GCP上部署VM工作负载：
- en: '[PRE26]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Update the `gcp_vm_build/tasks/main.yml` file with the following task to create
    the disks for the VMs:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`gcp_vm_build/tasks/main.yml`文件以创建VM的磁盘：
- en: '[PRE27]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Update the `gcp_vm_build/tasks/main.yml` file with the following task to create
    a VM with no public IP address:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`gcp_vm_build/tasks/main.yml`文件以创建没有公共IP地址的VM：
- en: '[PRE28]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Update the `gcp_vm_build/tasks/main.yml` file with the following task to create
    a VM with a public IP address:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`gcp_vm_build/tasks/main.yml`文件以创建具有公共IP地址的VM：
- en: '[PRE29]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Update the `pb_gcp_env_build.yml` playbook with the following task to create
    all the required VMs that we have defined:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`pb_gcp_env_build.yml`剧本以创建我们定义的所有所需VM：
- en: '[PRE30]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'As per our example network''s design, we will deploy two web servers and two
    database servers in two different availability zones. Then we will build a bastion
    host in a single AZ since it is only used for management. We defined all our required
    machines in the `compute_nodes` variable and, for each machine, we specified the
    following parameters, which we will use during the provisioning:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们示例网络的设计，我们将在两个不同的可用性区域中部署两个Web服务器和两个数据库服务器。然后，我们将在单个AZ中构建一个堡垒主机，因为它仅用于管理。我们在`compute_nodes`变量中定义了所有所需的机器，并且对于每台机器，我们指定了以下我们在规划期间将使用的参数：
- en: '`Name`: The name of the machine'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`名称`：机器的名称'
- en: '`Network`: Specifies the subnet in which we will deploy this machine and enforce
    the correct network tag'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`网络`：指定我们将部署此计算机的子网，并强制执行正确的网络标记'
- en: '`Zone`: Specifies the zone in which we want to deploy this machine'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`区域`：指定我们要部署此计算机的区域'
- en: '`has_internet`: Signifies whether this machine should get a public IP address'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`has_internet`：表示此计算机是否应获取公共IP地址'
- en: 'We created a new role to deploy our compute workload and we defined the following
    main sections:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个新的角色来部署我们的计算工作负载，并定义了以下主要部分：
- en: '**Create disk for VMs**: The initial task is to create the disk that will house
    the OS for these machines. We used the `gcp_compute_disk` Ansible module to define
    these disks and we specified the following parameters:'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为VM创建磁盘**：初始任务是创建将容纳这些机器的操作系统的磁盘。我们使用`gcp_compute_disk` Ansible模块来定义这些磁盘，并指定了以下参数：'
- en: '`Name`: This is the name of this disk.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`名称`：这是此磁盘的名称。'
- en: '`Image_source`: Specifies the OS that the machine will run—in our example,
    all our machines will run CentOS.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Image_source`：指定机器将运行的操作系统-在我们的示例中，所有机器都将运行CentOS。'
- en: '`Zone`: Specifies the availability zone where this disk will be created.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`区域`：指定将创建此磁盘的可用性区域。'
- en: '`Size_gb`: Specifies the disk size that will be deployed.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Size_gb`：指定将要部署的磁盘大小。'
- en: '**Create VMs**: After creating the disks, we created the VMs using the `gcp_compute_instance`
    module, which takes the following parameters in order to provision the VM:'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建VMs**：在创建磁盘之后，我们使用`gcp_compute_instance`模块创建了VMs，该模块使用以下参数来部署VM：'
- en: '`Name`: The name of this VM.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Name`：这个VM的名称。'
- en: '`Machine_type`: Specifies the instance type that we use for these machines.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Machine_type`：指定我们用于这些机器的实例类型。'
- en: '`Disks`: A dictionary that specifies the disk that we will use with this machine.
    We supply the `gcp_vm_disk` variable, which we obtained when we provisioned the
    disks in the previous task.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Disks`：一个字典，指定我们将与这台机器一起使用的磁盘。我们提供`gcp_vm_disk`变量，这是我们在前一个任务中部署磁盘时获得的。'
- en: '`Network_interfaces`: A dictionary that specifies which subnet and VPC that
    we need to deploy this instance on. For the VPC, we supply the `gcp_vpc` variable,
    which is the value that we get when we provision the VPC.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Network_interfaces`：一个字典，指定我们需要在哪个子网和VPC上部署这个实例。对于VPC，我们提供`gcp_vpc`变量，这是我们在部署VPC时获得的值。'
- en: '`Zone`: Specifies which availability zone we will deploy our VM in.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Zone`：指定我们将在哪个可用区部署我们的VM。'
- en: '`Tags`: Specifies the network tags that we will assign to these VMs. These
    are the same tags that we used in our firewall rules in order to reference our
    compute nodes.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`标签`：指定我们将分配给这些VM的网络标签。这些标签与我们在防火墙规则中使用的标签相同，以便引用我们的计算节点。'
- en: On top of the preceding parameters, we have the `access_configs` parameter (which
    is a dictionary), and it is used to specify whether a compute node will get a
    public IP address. If the VM gets a public IP address, we set the name parameter
    in `access_configs` as external NAT and the type parameter as `ONE_TO_ONE_NAT`.
    If the machine doesn't require a public IP address, we omit the `access_configs`
    dictionary.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面的参数，我们还有`access_configs`参数（它是一个字典），用于指定计算节点是否会获得公共IP地址。如果VM获得公共IP地址，我们将`access_configs`中的name参数设置为external
    NAT，type参数设置为`ONE_TO_ONE_NAT`。如果机器不需要公共IP地址，我们将省略`access_configs`字典。
- en: In our setup, all our web servers and bastion hosts should get a public IP address;
    however, our DB servers shouldn't have direct internet connectivity, and so no
    public IP address should be assigned to them. We differentiated this using the
    `has_internet` parameter in our compute node definition, and we used this parameter
    to choose the correct task to use during the VM provisioning.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的设置中，所有的Web服务器和堡垒主机都应该获得一个公共IP地址；然而，我们的数据库服务器不应该直接连接互联网，因此不应该为它们分配公共IP地址。我们使用`has_internet`参数来区分这一点，在计算节点定义中使用这个参数来选择在VM配置期间使用的正确任务。
- en: 'Once we run the playbook with the new role to create the VMs, we will see that
    all the disks for each VM are created, as shown in the following screenshot:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们使用新角色运行剧本来创建VMs，我们将看到每个VM的所有磁盘都已创建，如下截图所示：
- en: '![](assets/cbe1800d-ea8d-42b1-b0fc-e7bc02959f8b.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cbe1800d-ea8d-42b1-b0fc-e7bc02959f8b.png)'
- en: 'Also, all the VMs are created in the correct subnet, as shown in the following
    screenshot:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，所有的VM都是在正确的子网中创建的，如下截图所示：
- en: '![](assets/db3cc28c-7465-4b14-a4cf-fdcbfa89b0fe.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/db3cc28c-7465-4b14-a4cf-fdcbfa89b0fe.png)'
- en: 'Once our VMs are created with the correct network tags, we can verify that
    our firewall rules are applied only on those VMs that are based on the network
    tags assigned to those VMs. The following snippet outlines the firewall rule `allow-internet-to-anz-web`
    and how it is applied only to web servers:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的VM使用了正确的网络标签创建，我们可以验证我们的防火墙规则只应用于基于这些网络标签的VM。以下代码段概述了防火墙规则`allow-internet-to-anz-web`以及它是如何仅应用于Web服务器的：
- en: '![](assets/b9df588b-aaf3-474a-953b-d28d2a153088.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b9df588b-aaf3-474a-953b-d28d2a153088.png)'
- en: See also...
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'For more information regarding the GCP instance and disk modules in Ansible,
    and all the other parameters supported by these modules, please go to the following
    links:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Ansible中GCP实例和磁盘模块以及这些模块支持的所有其他参数的更多信息，请访问以下链接：
- en: '[https://docs.ansible.com/ansible/2.8/modules/gcp_compute_instance_module.html#gcp-compute-instance-module](https://docs.ansible.com/ansible/2.8/modules/gcp_compute_instance_module.html#gcp-compute-instance-module)'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible/2.8/modules/gcp_compute_instance_module.html#gcp-compute-instance-module](https://docs.ansible.com/ansible/2.8/modules/gcp_compute_instance_module.html#gcp-compute-instance-module)'
- en: '[https://docs.ansible.com/ansible/latest/modules/gcp_compute_disk_module.html#gcp-compute-disk-module](https://docs.ansible.com/ansible/latest/modules/gcp_compute_disk_module.html#gcp-compute-disk-module)'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible/latest/modules/gcp_compute_disk_module.html#gcp-compute-disk-module](https://docs.ansible.com/ansible/latest/modules/gcp_compute_disk_module.html#gcp-compute-disk-module)'
- en: Adjusting routing within a VPC
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整VPC内的路由
- en: In this recipe, we will outline how to control routing within the GCP VPC to
    enforce custom routing decisions for hosts. This allows us to have full control
    of the routing for our hosts within the VPC.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将概述如何控制GCP VPC内的路由，以强制执行主机的自定义路由决策。这使我们能够完全控制VPC内主机的路由。
- en: Getting ready
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible control machine must be connected to the internet with reachability
    to GCP public API endpoints and the GCP account should be configured as outlined
    in the previous recipes. In addition, the resource group, virtual networks, and
    subnets should be provisioned as outlined in the previous recipes.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible控制机必须连接到互联网，能够访问GCP公共API端点，并且GCP帐户应该按照前面的配方进行配置。此外，资源组、虚拟网络和子网应该按照前面的配方进行部署。
- en: How to do it...
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Update the `group_vars/gcp_vpc.yml` file to include the required routing data,
    as shown in the following code:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`group_vars/gcp_vpc.yml`文件，包括所需的路由数据，如下所示：
- en: '[PRE31]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Update the `pb_gcp_env_build.yml` playbook with the following task to create
    the routes in GCP:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`pb_gcp_env_build.yml`剧本，添加以下任务以在GCP中创建路由：
- en: '[PRE32]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works..
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理..
- en: In our example setup, with the current routing and firewall rules, our DB servers
    have no internet connectivity; however, we need to have the ability to access
    the internet from these servers in order to install software or perform patches.
    In order to achieve this goal, we are going to use our bastion hosts as NAT instances
    to provide internet access to our DB servers. In order to achieve this, we need
    to adjust the routing for all the DB servers in our VPC.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例设置中，根据当前的路由和防火墙规则，我们的数据库服务器无法连接到互联网；但是，我们需要能够从这些服务器访问互联网，以安装软件或执行补丁。为了实现这个目标，我们将使用我们的堡垒主机作为NAT实例，为我们的数据库服务器提供互联网访问。为了实现这一目标，我们需要调整VPC中所有数据库服务器的路由。
- en: 'In GCP, we have a default route that is pointing to our internet gateway in
    the VPC. This default route is present in the VPC and is applied to all the hosts
    within the VPC. The following is the routing table for our VPC:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在GCP中，我们有一个默认路由，指向VPC中的互联网网关。这个默认路由存在于VPC中，并应用于VPC内的所有主机。以下是我们VPC的路由表：
- en: '![](assets/27312aab-e7bc-44a6-a936-e265fd6807ea.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/27312aab-e7bc-44a6-a936-e265fd6807ea.png)'
- en: However, because of the firewall rules in place and the fact that all the DB
    servers have no external public IP addresses, the DB servers will not be able
    to access the internet. We need to adjust the routing for the DB servers to point
    to the bastion hosts (which are performing NAT). We also need to leave the original
    default route since this is the main path that is used by our web and bastion
    hosts in order to reach the internet.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于现有的防火墙规则以及所有数据库服务器都没有外部公共IP地址，数据库服务器将无法访问互联网。我们需要调整数据库服务器的路由，指向执行NAT的堡垒主机。我们还需要保留原始的默认路由，因为这是我们的Web和堡垒主机用来访问互联网的主要路径。
- en: 'We defined the custom routes that we need to apply using the `custom_routes`
    list data structure, and we used the `gcp_compute_route` Ansible module to loop
    across this data structure to create all the required routes. We used the network
    tag applied on the DB hosts in order to enforce this route only on the hosts with
    this network tag. Once we run this new task, the updating routing table for the
    VPC is as shown in the following screenshot:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`custom_routes`列表数据结构定义需要应用的自定义路由，并使用`gcp_compute_route` Ansible模块循环遍历这个数据结构，创建所有需要的路由。我们使用在DB主机上应用的网络标记，以强制仅在具有此网络标记的主机上应用此路由。运行这个新任务后，VPC的更新路由表如下截图所示：
- en: '![](assets/27312aab-e7bc-44a6-a936-e265fd6807ea.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/27312aab-e7bc-44a6-a936-e265fd6807ea.png)'
- en: We can set the next hop for the route to either an IP address or an instance
    identification; however, we used the IP address for simplicity, and in our VM
    definition, we selected a static IP address for our bastion host in order to make
    it easy to reference this IP address in our routing setup.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将路由的下一跳设置为IP地址或实例标识；但是，为了简单起见，我们使用了IP地址，并在VM定义中选择了堡垒主机的静态IP地址，以便在我们的路由设置中轻松引用这个IP地址。
- en: We created this routing task in the main playbook since we need to have the
    bastion VM provisioned in order to set up the route with the next hop set to its
    IP address. If we created the route before the VM is provisioned, the route will
    be created; however, the task will fail with a warning that the next hop IP address
    for our route is not present.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在主要playbook中创建了这个路由任务，因为我们需要有堡垒VM才能设置下一跳IP地址的路由。如果在VM被部署之前创建路由，路由将被创建；但是，任务将失败，并显示警告，指出我们的路由的下一跳IP地址不存在。
- en: See also...
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: For more information regarding the GCP routing modules in Ansible and all the
    other parameters supported by this module, go to [https://docs.ansible.com/ansible/latest/modules/gcp_compute_route_module.html#gcp-compute-route-module](https://docs.ansible.com/ansible/latest/modules/gcp_compute_route_module.html#gcp-compute-route-module).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Ansible中GCP路由模块和此模块支持的所有其他参数的更多信息，请转到[https://docs.ansible.com/ansible/latest/modules/gcp_compute_route_module.html#gcp-compute-route-module](https://docs.ansible.com/ansible/latest/modules/gcp_compute_route_module.html#gcp-compute-route-module)。
- en: Validating GCP deployment using Ansible
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible验证GCP部署
- en: Ansible provides multiple modules to collect the operational state of the different
    resources that we created in GCP, and we can use these modules to validate the
    current state of our network resources in the GCP cloud. This provides a programmatic
    approach for validating a deployment without the need to log in to the portal
    via the **Graphical User Interface** (**GUI**) to check the status of the different
    components provisioned in GCP. In this recipe, we will outline how to use some
    Ansible modules to validate the network subnets that we have deployed.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible提供了多个模块来收集我们在GCP中创建的不同资源的操作状态，我们可以使用这些模块来验证GCP云中我们网络资源的当前状态。这提供了一种编程方法来验证部署，而无需登录到**图形用户界面**（**GUI**）通过门户网站检查GCP中部署的不同组件的状态。在本示例中，我们将概述如何使用一些Ansible模块来验证我们部署的网络子网。
- en: Getting ready
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible control machine must be connected to the internet with the ability
    to reach GCP public API endpoints, and the GCP account should be configured as
    outlined in the previous recipes.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible控制机必须连接到互联网，并能够到达GCP公共API端点，GCP帐户应按照前面的示例进行配置。
- en: How to do it...
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new `pb_gcp_net_validate.yml` playbook and add the following task
    to collect VPC subnet information:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`pb_gcp_net_validate.yml` playbook，并添加以下任务以收集VPC子网信息：
- en: '[PRE33]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Update the playbook with the following task to validate the IP prefix provisioned
    on all the deployed subnets:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新playbook以验证部署的所有子网上的IP前缀：
- en: '[PRE34]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works...
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We created a new playbook that we will use to validate all the subnets that
    we have deployed in our GCP project. Ansible provides multiple modules to collects
    the operational state or facts for the different resources in GCP (subnets, VPC,
    virtual machines, and so on). In this example, we are using the `gcp_compute_subnetwork_facts`
    module in order to collect the subnet facts for our deployment. We registered
    all the data returned by this module in a new variable, `gcp_vpc_subnets`. Finally,
    we used the `assert` module to loop across all our subnet definitions to validate
    whether the IP prefixes provisioned on all these subnets are correct and aligned
    with our design.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个新的playbook，用于验证我们在GCP项目中部署的所有子网。Ansible提供多个模块来收集GCP中不同资源（子网、VPC、虚拟机等）的操作状态或事实。在本例中，我们使用`gcp_compute_subnetwork_facts`模块来收集我们部署的子网事实。我们将此模块返回的所有数据注册到一个新变量`gcp_vpc_subnets`中。最后，我们使用`assert`模块循环遍历所有子网定义，验证所有这些子网上分配的IP前缀是否正确并与我们的设计一致。
- en: We can use the other fact-gathering modules in order to validate the other aspect
    of our deployment and to use the same approach using multiple `assert` statements
    in order to make sure that all the resources deployed are aligned with our design.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用其他收集事实的模块来验证部署的其他方面，并使用多个`assert`语句来确保所有部署的资源与我们的设计一致。
- en: See also...
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'For more information regarding the other GCP fact-gathering modules, please
    visit the following links:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 有关其他GCP收集事实的模块的更多信息，请访问以下链接：
- en: '[https://docs.ansible.com/ansible/2.8/modules/gcp_compute_network_facts_module.html](https://docs.ansible.com/ansible/2.8/modules/gcp_compute_network_facts_module.html)'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible/2.8/modules/gcp_compute_network_facts_module.html](https://docs.ansible.com/ansible/2.8/modules/gcp_compute_network_facts_module.html)'
- en: '[https://docs.ansible.com/ansible/2.8/modules/gcp_compute_subnetwork_facts_module.html](https://docs.ansible.com/ansible/2.8/modules/gcp_compute_subnetwork_facts_module.html)'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible/2.8/modules/gcp_compute_subnetwork_facts_module.html](https://docs.ansible.com/ansible/2.8/modules/gcp_compute_subnetwork_facts_module.html)'
- en: Decommissioning GCP resources using Ansible
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible销毁GCP资源
- en: Similar to creating resources at scale using automation, we can destroy these
    resources once we decide we don’t need them. We use the same Ansible modules that
    we used to create the resources in GCP in order to destroy these resources.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用自动化规模创建资源类似，一旦决定不再需要这些资源，我们可以销毁这些资源。我们使用与在GCP中创建资源相同的Ansible模块来销毁这些资源。
- en: Getting ready
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible control machine must be connected to the internet and be able to
    reach GCP public API endpoints, and the GCP account should be configured as outlined
    in the previous recipes.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible控制机必须连接到互联网，并能够访问GCP公共API端点，GCP帐户应按照前面的示例进行配置。
- en: How to do it...
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Create a new `pb_gcp_env_destroy.yml` playbook and add the following task to
    read the vault-encrypted JSON file:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`pb_gcp_env_destroy.yml` playbook，并添加以下任务以读取保险柜加密的JSON文件：
- en: '[PRE35]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Update the `pb_gcp_env_destroy.yml` playbook and add the following task to
    collect VPC information:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`pb_gcp_env_destroy.yml` playbook，并添加以下任务以收集VPC信息：
- en: '[PRE36]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Update the playbook with the following task to delete all the VMs:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新playbook以删除所有VM：
- en: '[PRE37]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Update the playbook with the following task to delete all the disks that we
    created for all the VMs in our VPC:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新playbook以删除我们在VPC中为所有VM创建的所有磁盘：
- en: '[PRE38]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Update the playbook with the following task to delete all the firewall rules
    within our VPC:'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新playbook以删除VPC中的所有防火墙规则：
- en: '[PRE39]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Update the playbook with the following task to delete all the custom routes
    within our VPC:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新playbook以删除VPC中的所有自定义路由：
- en: '[PRE40]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Update the playbook with the following task to delete all the subnets within
    our VPC:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新playbook以删除VPC中的所有子网：
- en: '[PRE41]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Update the playbook with the following task to delete all the VPCs:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新playbook以删除所有VPC：
- en: '[PRE42]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How it works...
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'We created a new playbook that we will use to destroy all our resources within
    our sample network design. We used the same modules that we utilized to provision
    the resources across the GCP cloud; however, we used the `state: absent` in order
    to delete all these resources.'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '我们创建了一个新的playbook，用于销毁我们样本网络设计中的所有资源。我们使用了与在GCP云中部署资源相同的模块；但是，我们使用了`state:
    absent`来删除所有这些资源。'
- en: The only thing that we need to take care when decommissioning the resources
    is the order by which we delete these resources. We can’t delete any resource
    if there is a dependent resource still active that depends on the resource that
    we are trying to delete. For example, we can’t delete a disk without deleting
    the VM that utilizes this disk first.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在销毁资源时唯一需要注意的是删除这些资源的顺序。如果仍有依赖于要删除的资源的活动依赖资源，我们就不能删除任何资源。例如，我们不能在没有先删除使用此磁盘的VM的情况下删除磁盘。
- en: 'Once we run our playbook, we can see that all the VMs are deleted, as shown
    in the following screenshot:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 运行playbook后，我们可以看到所有VM都已删除，如下面的截图所示：
- en: '![](assets/e1086b33-0b3d-404c-baea-2c7a5a3664a9.png)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e1086b33-0b3d-404c-baea-2c7a5a3664a9.png)'
- en: 'Also, all our VPCs and subnets are deleted as well, as shown in the following
    screenshot:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，所有我们的VPC和子网也已删除，如下面的截图所示：
- en: '![](assets/569aa2b4-e3d7-4a16-9401-396c065c9240.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/569aa2b4-e3d7-4a16-9401-396c065c9240.png)'
- en: The preceding screenshot shows that there are no local VPC networks in the current
    project.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图显示当前项目中没有本地VPC网络。
