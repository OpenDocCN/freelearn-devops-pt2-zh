["```\n$ sudo docker pull batfish/batfish\n```", "```\n$ sudo docker run -d -p 9997:9997 -p 9996:9996 batfish/batfish\n```", "```\n$ sudo python3 -m pip install --upgrade git+https://github.com/batfish/pybatfish.git\n```", "```\n$ ansible-galaxy install batfish.base\n```", "```\n$ pip3 freeze | grep batfish\npybatfish==0.36.0\n```", "```\n$ ansible-galaxy list batfish.base\n# /home/ansible/.ansible/roles\n```", "```\n$tree ~/.ansible/roles/batfish.base/library/\n/home/ansible/.ansible/roles/batfish.base/library/\n\u251c\u2500\u2500 bf_assert.py\n\u251c\u2500\u2500 bf_extract_facts.py\n\u251c\u2500\u2500 bf_init_snapshot.py\n\u251c\u2500\u2500 bf_session.py\n\u251c\u2500\u2500 bf_set_snapshot.py\n\u251c\u2500\u2500 bf_upload_diagnostics.py\n\u2514\u2500\u2500 bf_validate_facts.py\n```", "```\n$ cd ch10_batfish\n$ ansible-galaxy init --init-path roles generate_fabric_config\n```", "```\n$ cat hosts [leaf] leaf01   ansible_host=172.20.1.41 leaf02    ansible_host=172.20.1.42 leaf03    ansible_host=172.20.1.43 leaf04    ansible_host=172.20.1.44 [spine] spine01     ansible_host=172.20.1.35 spine02     ansible_host=172.20.1.36\n[arista:children] leaf spine\n```", "```\n$ cat pb_build_fabric_config.yml\n---\n- name: Build DC Fabric Config\n hosts: all\n connection: local\n gather_facts: no\n vars:\n tmp_dir: tmp\n config_dir: configs\n roles:\n - generate_fabric_config\n```", "```\n$ tree roles/generate_fabric_config\nroles/generate_fabric_config\n\u251c\u2500\u2500 meta\n\u2502   \u2514\u2500\u2500 main.yml\n\u251c\u2500\u2500 tasks\n\u2502   \u2514\u2500\u2500 main.yml\n\u2514\u2500\u2500 templates\n \u251c\u2500\u2500 intf.j2\n \u251c\u2500\u2500 mgmt.j2\n \u251c\u2500\u2500 overlay_bgp.j2\n \u2514\u2500\u2500 underlay_bgp.j2\n```", "```\n$ tree ch10_batfish/configs\nconfigs\n\u251c\u2500\u2500 leaf01.cfg\n\u251c\u2500\u2500 leaf02.cfg\n\u251c\u2500\u2500 leaf03.cfg\n\u251c\u2500\u2500 leaf04.cfg\n\u251c\u2500\u2500 spine01.cfg\n\u2514\u2500\u2500 spine02.cfg\n```", "```\n$ cat pb_batfish_analyis.yml\n---\n- name: Extract network device facts using Batfish and Ansible\n hosts: all\n gather_facts: no\n roles:\n - batfish.base\n vars:\n ansible_connection: local\n batfish_host: 172.20.100.101\n config_dir: configs\n batfish_network_folder: batfish_net_snapshot\n batfish_analysis_folder: batfish_analysis\n tasks:\n\n - name: Create a Batfish Config Directory\n file:\n path: \"{{ batfish_network_folder }}\"\n state: directory    run_once: yes\n```", "```\n- name: copy All configs to Batfish Directory\n copy:\n src: \"{{ config_dir }}\"\n dest: \"{{ batfish_network_folder }}\"\n run_once: yes\n```", "```\n $ tree ch10_batfish/batfish_net_snapshot/\n\n batfish_net_snapshot\n\u2514\u2500\u2500 configs\n \u251c\u2500\u2500 leaf01.cfg\n \u251c\u2500\u2500 leaf02.cfg\n \u251c\u2500\u2500 leaf03.cfg\n \u251c\u2500\u2500 leaf04.cfg\n \u251c\u2500\u2500 spine01.cfg\n \u2514\u2500\u2500 spine02.cfg\n```", "```\n - name: Setup connection to Batfish service\n bf_session:\n host: \"{{ batfish_host }}\"\n name: local_batfish\n register: bf_session\n run_once: yes\n```", "```\n - name: Initialize the Network Snapshot\n bf_init_snapshot:\n network: arista_dc_fabric\n snapshot: arista_dc_fabric_config\n snapshot_data: \"{{ batfish_network_folder }}\"\n overwrite: true\n run_once: yes\n register: bf_snapshot\n```", "```\nok: [localhost] => {\n \"bf_snapshot\": {\n \"ansible_facts\": {\n\n \"bf_network\": \"arista_dc_fabric\",\n \"bf_snapshot\": \"arista_dc_fabric_config\"\n },\n \"result\": {\n \"network\": \"arista_dc_fabric\",\n \"snapshot\": \"arista_dc_fabric_config\"\n },\n \"summary\": \"Snapshot 'arista_dc_fabric_config' created in network\n'arista_dc_fabric'\",\n \"warnings\": [ \n \"Your snapshot was successfully initialized but Batfish failed to fully recognize some lines in one or more input files. Some unrecognized configuration lines are not uncommon for new networks, and it is often fine to proceed with further analysis.\n ]\n }\n}\n```", "```\n - name: Retrieve Batfish Facts\n bf_extract_facts:\n output_directory: \"{{ batfish_analysis_folder }}/bf_facts\"\n run_once: yes\n register: bf_facts\n```", "```\n - name: Validate all Interfaces are Operational and Have correct IP\n assert:\n that:\n - bf_facts.result.nodes[inventory_hostname].Interfaces[item.port].Active\n== true\n - bf_facts.result.nodes[inventory_hostname].Interfaces[item.port].Primary_Address ==\n item.ip + '/' + global.p2p_prefix | string\n loop: \"{{ p2p_ip[inventory_hostname] }}\"\n```", "```\nnodes:\n leaf01:\n Interfaces:\n Ethernet8:\n Active: true\n All_Prefixes:\n - 172.31.1.1/31\n < --- Output Omitted for brevity --->\n Declared_Names:\n - Ethernet8\n Description: '\"DC1 | Rpeer: spine01 | Rport: Ethernet1\"'\n < --- Output Omitted for brevity --->\n MTU: 1500\n < --- Output Omitted for brevity --->\n Primary_Address: 172.31.1.1/31\n Primary_Network: 172.31.1.0/31\n < --- Output Omitted for brevity --->\n Speed: 1000000000.0\n```", "```\n- name: Validate BGP Sessions and Undefined References\n bf_assert:\n assertions:\n - type: assert_no_undefined_references\n        name: Confirm we have no undefined references\n - type: assert_no_incompatible_bgp_sessions\n name: Confirm we have no incompatible BGP sessions\n run_once: yes\n```", "```\n$ cat configs/leaf01.cfg\n\n!\ninterface Ethernet8\n description \"DC1 | Rpeer: spine01 | Rport: Ethernet1\"\n no switchport\n *shutdown*   ip address 172.31.1.1/31\n!\n```", "```\nTASK [Validate BGP Sessions and Undefined References] ****************************************************************************************************        \"result\": [\n\n {\n \"details\": \"Assertion passed\",\n \"name\": \"Confirm we have no undefined references\",\n \"status\": \"Pass\",\n \"type\": \"assert_no_undefined_references\"\n },\n {\n \"details\": \"Found incompatible BGP session(s), when none were expected\\n[{'Node': 'leaf01', 'VRF': 'default', 'Local_AS': 65001, 'Local_Interface': None, 'Local_IP': '172.31.1.1', 'Remote_AS': '65100', 'Remote_Node': None, 'Remote_Interface': None, 'Remote_IP': '172.31.1.0', 'Session_Type': 'EBGP_SINGLEHOP', 'Configured_Status': 'INVALID_LOCAL_IP'}]\",\n \"name\": \"Confirm we have no incompatible BGP sessions\",\n \"status\": \"Fail\",\n \"type\": \"assert_no_incompatible_bgp_sessions\"\n }\n ],\n \"summary\": \"1 of 2 assertions failed\"\n }\n```", "```\n- name: Validate Traffic Forwarding in the Fabric\n bf_assert:\n assertions:\n - type: assert_all_flows_succeed\n name: confirm host is reachable for traffic received\n parameters:\n startLocation: \"{{ item.0 }}\"\n headers:\n dstIps: \"{{ item.1.value.ip }}\"\n srcIps: \"{{ lo_ip[item.0].ip }}\"\n with_nested:\n - \"{{ play_hosts }}\"\n - \"{{ lo_ip | dict2items }}\"\n run_once: yes\n```", "```\n*### Traffic from Spine01 to Spine02 Failing\n\n*                \"msg\": \"1 of 1 assertions failed\",\n \"result\": [\n {\n \"details\": \"Found a flow that failed, when expected to succeed\\n[{'Flow': Flow(dscp=0, dstIp='10.100.1.253', dstPort=0, ecn=0, fragmentOffset=0, icmpCode=0, icmpVar=8, ingressInterface=None, ingressNode='spine01', ingressVrf='default', ipProtocol='ICMP', packetLength=0, srcIp='10.100.1.254', srcPort=0, state='NEW', tag='BASE', tcpFlagsAck=0, tcpFlagsCwr=0, tcpFlagsEce=0, tcpFlagsFin=0, tcpFlagsPsh=0, tcpFlagsRst=0, tcpFlagsSyn=0, tcpFlagsUrg=0), 'Traces': ListWrapper([((ORIGINATED(default), NO_ROUTE))]), 'TraceCount': 1}]\",\n \"name\": \"confirm host is reachable for traffic received\",\n \"status\": \"Fail\",\n \"type\": \"assert_all_flows_succeed\"\n }\n ],\n \"summary\": \"1 of 1 assertions failed\"\n }\n```", "```\ndc1-spine01#sh ip route 10.100.1.253\n\nVRF: default\nCodes: C - connected, S - static, K - kernel,\n O - OSPF, IA - OSPF inter area, E1 - OSPF external type 1,\n E2 - OSPF external type 2, N1 - OSPF NSSA external type 1,\n N2 - OSPF NSSA external type2, B I - iBGP, B E - eBGP,\n R - RIP, I L1 - IS-IS level 1, I L2 - IS-IS level 2,\n O3 - OSPFv3, A B - BGP Aggregate, A O - OSPF Summary,\n NG - Nexthop Group Static Route, V - VXLAN Control Service,\n DH - Dhcp client installed default route\n\nGateway of last resort is not set\n```", "```\n- bf_assert:\n\n    assertions:\n      - type: assert_all_flows_succeed\n        name: confirm host is reachable for traffic received\n        parameters:\n          startLocation: \"{{ item.0 }}\"\n          headers:\n            dstIps: \"{{ item.1.value.ip }}\"\n            srcIps: \"{{ lo_ip[item.0].ip }}\"\n    with_nested:\n      - \"{{ play_hosts }}\"\n      - \"{{ lo_ip | dict2items }}\"\n    when: '\"spine\" not in item.0'\n    run_once: yes\n```", "```\n!\nip access-list WEB_VLAN_IN\n 10 deny ip host 172.20.10.10 any\n 20 permit tcp 172.20.10.0/24 any eq https\n\n!\nip access-list WEB_VLAN_OUT\n 10 permit tcp any 172.20.10.0/24 eq https\n!\n```", "```\n- name: Validate Internet to Web Servers\n bf_assert:\n assertions:\n - type: assert_filter_permits\n name: Confirm Internet Access to Web Servers\n parameters:\n filters: \"{{ web_acl }}\"\n headers:\n dstIps: \"{{ web_server_subnet}}\"\n srcIps: \"0.0.0.0/0\"\n dstPorts: '443'\n ipProtocols: 'TCP'\n vars:\n web_acl: WEB_VLAN_OUT\n web_server_subnet: 172.20.10.0/24\n run_once: yes\n```", "```\n- name: Validate Server {{ web_server }} is Denied\n bf_assert:\n assertions:\n - type: assert_filter_denies\n name: Confirm Traffic is Denied\n parameters:\n filters: \"{{ web_acl_in }}\"\n headers:\n dstIps: \"0.0.0.0/0\"\n srcIps: \"{{ web_server}}\"\n vars:\n web_acl_in: WEB_VLAN_IN\n web_server: 172.20.10.10\n run_once: yes\n```", "```\n!\nip access-list WEB_VLAN_IN\n 05 permit tcp host 172.20.10.10 any eq ssh\n 10 deny ip host 172.20.10.10 any\n 20 permit tcp 172.20.10.0/24 any eq https\n!\n```", "```\n \"result\": [\n {\n \"details\": \"Found a flow that was permitted, when expected to be denied\\n[{'Node': 'leaf03', 'Filter_Name': 'WEB_VLAN_IN', 'Flow': Flow(dscp=0, dstIp='0.0.0.0', dstPort=22, ecn=0, fragmentOffset=0, icmpCode=0, icmpVar=0, ingressInterface=None, ingressNode='leaf03', ingressVrf='default', ipProtocol='TCP', packetLength=0, srcIp='172.20.10.10', srcPort=0, state='NEW', tag='BASE', tcpFlagsAck=0, tcpFlagsCwr=0, tcpFlagsEce=0, tcpFlagsFin=0, tcpFlagsPsh=0, tcpFlagsRst=0, tcpFlagsSyn=0, tcpFlagsUrg=0), 'Action': 'PERMIT', 'Line_Content': '05 permit tcp host 172.20.10.10 any eq ssh', 'Trace': AclTrace(events=[AclTraceEvent(class_name='org.batfish.datamodel.acl.PermittedByIpAccessListLine', description='Flow permitted by extended ipv4 access-list named WEB_VLAN_IN, index 0: 05 permit tcp host 172.20.10.10 any eq ssh', lineDescription='05 permit tcp host 172.20.10.10 any eq ssh')])}]\",\n \"name\": \"Confirm Traffic is Denied\",\n \"status\": \"Fail\",\n \"type\": \"assert_filter_denies\"\n }\n ]\n```"]