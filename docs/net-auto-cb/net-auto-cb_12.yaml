- en: Simplifying Automation with AWX and Ansible
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWX和Ansible简化自动化
- en: In all the previous chapters in this book, we have been using Ansible and, more
    specifically, Ansible Engine, and we have carried out different automation tasks
    using the **command-line interface** (**CLI**) options provided by Ansible. However,
    consuming Ansible in this approach at a large scale, and in an IT enterprise across
    multiple teams, can be challenging. This is why we will introduce the **Ansible
    Web eXecutable** (**AWX**) framework. AWX is an open source project, and it is
    the upstream project from which Red Hat Ansible Tower is derived.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的所有先前章节中，我们一直在使用Ansible，更具体地说是Ansible Engine，并且使用Ansible提供的**命令行界面**（**CLI**）选项执行不同的自动化任务。然而，在跨多个团队的IT企业中大规模使用Ansible可能具有挑战性。这就是为什么我们将介绍**Ansible
    Web eXecutable**（**AWX**）框架。AWX是一个开源项目，是Red Hat Ansible Tower的上游项目。
- en: 'AWX is a wrapper around Ansible Engine, and it provides extra features in order
    to simplify running Ansible at scale in an enterprise, across different teams.
    It provides multiple additional features, the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: AWX是Ansible Engine的包装器，并提供了额外的功能，以简化在企业中跨不同团队规模运行Ansible。它提供了多个附加功能，如下：
- en: '**A graphical user interface (GUI)-based interface**'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于图形用户界面（GUI）的界面**'
- en: AWX provides a visual dashboard to execute Ansible playbooks and to monitor
    their status, as well as providing different statistics regarding the different
    objects within AWX.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: AWX提供了一个可视化仪表板来执行Ansible playbook并监视其状态，以及提供有关AWX中不同对象的不同统计信息。
- en: '**Role-based access control (RBAC)**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于角色的访问控制（RBAC）**'
- en: AWX provides RBAC over all the objects within the AWX interface, such as Ansible
    playbooks, Ansible inventories, and machine credentials. This RBAC provides fine-grained
    control regarding who can create/edit/delete the different components within AWX.
    This provides a very powerful framework for delegating simple automation tasks
    to operations teams, and design teams can focus on developing the playbooks and
    the workflows. AWX provides the ability to define different users and assign them
    privileges according to their job role.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: AWX在AWX界面中的所有对象上提供RBAC，例如Ansible playbook、Ansible清单和机器凭据。这种RBAC提供了对谁可以创建/编辑/删除AWX中不同组件的细粒度控制。这为将简单的自动化任务委托给运维团队提供了一个非常强大的框架，设计团队可以专注于开发playbook和工作流程。AWX提供了定义不同用户并根据其工作角色分配特权的能力。
- en: '**Inventory management**'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清单管理**'
- en: AWX provides a GUI to define inventories as either static or dynamic and has
    the ability to define hosts and groups, similar to the structure followed by Ansible.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: AWX提供了一个GUI来定义清单，可以将其定义为静态或动态，并且具有定义主机和组的能力，类似于Ansible遵循的结构。
- en: '**Credential management**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**凭据管理**'
- en: AWX provides central management for credentials such as passwords and **Secure
    Shell** (**SSH**) keys used to access the different systems in an organization,
    such as servers and network devices. All the credentials, once created, are encrypted,
    and can't be retrieved in plaintext format. This provides more security control
    regarding this sensitive information.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: AWX为凭据提供了集中管理，例如用于访问组织中不同系统（如服务器和网络设备）的密码和**安全外壳**（**SSH**）密钥。一旦创建了所有凭据，它们就会被加密，无法以纯文本格式检索。这提供了对这些敏感信息更多的安全控制。
- en: '**Centralized logging**'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集中式日志记录**'
- en: AWX collects logs for all the automation tasks run on the AWX node, thus audits
    can be completed to understand who runs which playbooks on which nodes, and what
    the status of these playbooks is.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: AWX在AWX节点上收集所有自动化任务的日志，因此可以进行审计以了解谁在哪些节点上运行了哪些playbook，以及这些playbook的状态如何。
- en: '**Representational State Transfer (RESTful) application programming interface
    (API)**'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表述状态转移（RESTful）应用程序编程接口（API）**'
- en: AWX provides a rich API, which allows us to execute automation tasks from the
    API; this simplifies integrating Ansible with other orchestration and ticketing
    systems that are already in place in a typical enterprise environment. Also, you
    can use the API to retrieve all the information accessible from the GUI, such
    as the inventory.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: AWX提供了丰富的API，允许我们从API执行自动化任务；这简化了将Ansible与已经存在于典型企业环境中的其他编排和工单系统集成。此外，您可以使用API检索从GUI访问的所有信息，例如清单。
- en: 'The AWX Project is comprised of multiple open source software projects bundled
    together to provide all the features listed previously and to construct the AWX
    automation framework. The following diagram outlines the different components
    that are inside the AWX framework:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: AWX项目由多个开源软件项目捆绑在一起，以提供先前列出的所有功能，并构建AWX自动化框架。以下图表概述了AWX框架内的不同组件：
- en: '![](assets/f163d476-8a5c-4369-b8de-6c169d3b2463.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f163d476-8a5c-4369-b8de-6c169d3b2463.png)'
- en: AWX can be deployed using different deployment tools, such as Docker Compose,
    Docker Swarm, or Kubernetes. It can be deployed as a standalone application or
    in a cluster (using Kubernetes or Docker Swarm). Using a cluster is more complex;
    however, it provides extra resiliency to the overall AWX deployment.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: AWX可以使用不同的部署工具部署，例如Docker Compose、Docker Swarm或Kubernetes。它可以作为独立应用程序部署，也可以作为集群部署（使用Kubernetes或Docker
    Swarm）。使用集群更复杂；然而，它可以为整个AWX部署提供额外的弹性。
- en: 'These are the main recipes covered in this chapter:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是本章涵盖的主要内容：
- en: Installing AWX
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装AWX
- en: Managing users and teams on AWX
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWX上管理用户和团队
- en: Creating a network inventory on AWX
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWX上创建网络清单
- en: Managing network credentials on AWX
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWX上管理网络凭据
- en: Creating projects on AWX
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWX上创建项目
- en: Creating templates on AWX
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWX上创建模板
- en: Creating workflow templates on AWX
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWX上创建工作流模板
- en: Running automation tasks using the AWX API
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AWX API运行自动化任务
- en: Technical requirements
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All the code presented in this chapter can be found at this URL:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中提供的所有代码都可以在以下网址找到：
- en: '[https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch12_awx](https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch12_awx)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch12_awx](https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch12_awx)'
- en: 'This chapter is based on the following software releases:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 本章基于以下软件版本：
- en: Ansible/AWX machine running Ubuntu 16.04
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行Ubuntu 16.04的Ansible/AWX机器
- en: Ansible 2.9
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 2.9
- en: AWX 9.0.0
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWX 9.0.0
- en: 'For more information regarding the AWX Project, please check the following
    links:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有关AWX项目的更多信息，请查看以下链接：
- en: '[https://www.ansible.com/products/awx-project](https://www.ansible.com/products/awx-project)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.ansible.com/products/awx-project](https://www.ansible.com/products/awx-project)'
- en: '[https://www.ansible.com/products/awx-project/faq](https://www.ansible.com/products/awx-project/faq)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.ansible.com/products/awx-project/faq](https://www.ansible.com/products/awx-project/faq)'
- en: '[https://www.redhat.com/en/resources/awx-and-ansible-tower-datasheet](https://www.redhat.com/en/resources/awx-and-ansible-tower-datasheet)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.redhat.com/en/resources/awx-and-ansible-tower-datasheet](https://www.redhat.com/en/resources/awx-and-ansible-tower-datasheet)'
- en: Installing AWX
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装AWX
- en: AWX can be deployed in multiple different ways; however, the most convenient
    way is to deploy it using containers. In this recipe, we will outline how to install
    AWS using Docker containers, in order to start to interact with the AWX interface.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: AWX可以以多种不同的方式部署；然而，最方便的方式是使用容器部署。在本文中，我们将概述如何使用Docker容器安装AWS，以便开始与AWX界面进行交互。
- en: Getting ready
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Prepare a fresh Ubuntu 16.04 machine, on which we will deploy AWX – it must
    have internet connectivity.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 准备一个新的Ubuntu 16.04机器，我们将在其上部署AWX-它必须具有互联网连接。
- en: How to do it…
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Ensure Python 3 is installed on the Ubuntu Linux machine and that pip is installed
    and upgraded to the latest version:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Python 3已安装在Ubuntu Linux机器上，并且pip已安装并升级到最新版本：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install Ansible on the Linux machine, as shown in the following code snippet:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Linux机器上安装Ansible，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Install Docker on the Ubuntu Linux machine, using the following URL: [https://docs.docker.com/install/linux/docker-ce/ubuntu/](https://docs.docker.com/install/linux/docker-ce/ubuntu/).'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Ubuntu Linux机器上安装Docker，使用以下URL：[https://docs.docker.com/install/linux/docker-ce/ubuntu/](https://docs.docker.com/install/linux/docker-ce/ubuntu/)。
- en: 'Install Docker Compose on the Ubuntu machine, using the following URL: [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/).'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Ubuntu机器上安装Docker Compose，使用以下URL：[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)。
- en: 'Install the `docker` and `docker-compose` Python modules, as shown in the following
    code snippet:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`docker`和`docker-compose` Python模块，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Install Node.js 10.x and **Node Package Manager** (**npm**) 6.x on the Ubuntu
    Linux machine as per the following URL, using the **Personal Package Archive**
    (**PPA***)* method to get the exact and updated version: [https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04](https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04).'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下URL在Ubuntu Linux机器上安装Node.js 10.x和**Node Package Manager**（**npm**）6.x，使用**Personal
    Package Archive**（**PPA**）方法获取确切和更新的版本：[https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04](https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04)。
- en: 'Create a new directory called `ch12_awx`, and clone the AWX project GitHub
    repository to a new directory called `awx_src`:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch12_awx`的新目录，并将AWX项目GitHub存储库克隆到一个名为`awx_src`的新目录中：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Change to the installation directory and run the installation playbook:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到安装目录并运行安装playbook：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: As outlined in the introduction, AWX consists of multiple components glued together
    in order to provide a complete framework. This means AWX can be deployed by installing
    each component and configuring them, then integrating all these distinct products
    to create the AWX framework. The other alternative is to use a container-based
    deployment, creating a container for each component, and gluing them together
    in a microservices architecture. The container-based approach is the recommended
    approach, and this is what we use to deploy AWX.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如介绍中所概述的，AWX由多个组件组合在一起以提供完整的框架。这意味着可以通过安装每个组件并对其进行配置来部署AWX，然后集成所有这些不同的产品以创建AWX框架。另一种选择是使用基于容器的部署，在微服务架构中为每个组件创建一个容器，并将它们组合在一起。基于容器的方法是推荐的方法，这也是我们用来部署AWX的方法。
- en: Since we are going to use containers, we need to orchestrate between these different
    components; thus, we need a container orchestration tool. AWX supports deployment
    over Kubernetes, OpenShift, and `docker-compose`, and the simplest of these is
    `docker-compose`. For this reason, this is the method outlined in this recipe.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用容器，因此需要在这些不同的组件之间进行编排；因此，我们需要一个容器编排工具。AWX支持在Kubernetes、OpenShift和`docker-compose`上部署，其中最简单的是`docker-compose`。因此，本文档中概述的方法就是这种方法。
- en: The AWX installer requires Ansible to be present on the deployment node since
    the installer is based on Ansible playbooks. These playbooks build/download the
    containers for the different components of AWX (PostgreSQL, NGINX, and so on),
    create the `docker-compose` declaration file, and start the containers. Thus,
    our first step is to install Ansible. Then, we need to install `docker` and `docker-compose`,
    as well as other required dependencies for the installation and the correct operation
    of the AWX containers.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: AWX安装程序要求在部署节点上存在Ansible，因为安装程序是基于Ansible playbooks的。这些playbooks构建/下载AWX不同组件的容器（PostgreSQL、NGINX等），创建`docker-compose`声明文件，并启动容器。因此，我们的第一步是安装Ansible。然后，我们需要安装`docker`和`docker-compose`，以及安装和正确运行AWX容器所需的其他依赖项。
- en: Once we install all these prerequisites, we are ready to install AWX. We clone
    the AWX project GitHub repo, and, in this repo, there is the `installer` directory,
    which has all the Ansible roles and playbooks to deploy the containers. The `installer`
    directory has the `inventory` file, which defines the host to which we will deploy
    the AWX framework; in this case, it is the localhost. The `inventory` file also
    lists other variables such as the admin password, as well as the passwords for
    the PostgreSQL and RabbitMQ databases. Since this is a demo deployment, we will
    not change these variables, and we will deploy using these default parameters.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们安装了所有这些先决条件，我们就准备安装AWX。我们克隆AWX项目的GitHub存储库，在这个存储库中，有一个`installer`目录，其中包含了部署容器的所有Ansible角色和playbook。`installer`目录有一个`inventory`文件，定义了我们将部署AWX框架的主机；在这种情况下，它是本地主机。`inventory`文件还列出了其他变量，如管理员密码，以及PostgreSQL和RabbitMQ数据库的密码。由于这是一个演示部署，我们不会更改这些变量，而是使用这些默认参数进行部署。
- en: 'Once the installation is complete, we can verify that all the Docker containers
    are up and running, as shown here:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以验证所有Docker容器是否正常运行，如下所示：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This gives us the following output:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们以下输出：
- en: '| **CONTAINER ID STATUS** | **IMAGE PORTS** | **COMMAND** | **CREATED NAMES**
    |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| **容器ID 状态** | **镜像 端口** | **命令** | **创建时间 名称** |'
- en: '| `225b95337b6d` Up 2 hours | `ansible/awx_task:7.0.0` `8052/tcp` | "`/tini
    -- /bin/sh -c…`" | 30 hours ago `awx_task` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| `225b95337b6d` Up 2 hours | `ansible/awx_task:7.0.0` `8052/tcp` | "`/tini
    -- /bin/sh -c…`" | 30 hours ago `awx_task` |'
- en: '| `2ca06bd1cd87` Up 2 hours | `ansible/awx_web:7.0.0` `0.0.0.0:80->8052/tcp`
    | "`/tini -- /bin/sh -c…`" | 30 hours ago `awx_web` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| `2ca06bd1cd87` Up 2 hours | `ansible/awx_web:7.0.0` `0.0.0.0:80->8052/tcp`
    | "`/tini -- /bin/sh -c…`" | 30 hours ago `awx_web` |'
- en: '| `66f560c62a9c` Up 2 hours | `memcached:alpine` `11211/tcp` | "`docker-entrypoint.s…`"
    | 30 hours ago `awx_memcached` |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| `66f560c62a9c` Up 2 hours | `memcached:alpine` `11211/tcp` | "`docker-entrypoint.s…`"
    | 30 hours ago `awx_memcached` |'
- en: '| `fe4ccccdb511` Up 2 hours | `postgres:10` `5432/tcp` | "`docker-entrypoint.s…`"
    | 30 hours ago `awx_postgres` |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `fe4ccccdb511` Up 2 hours | `postgres:10` `5432/tcp` | "`docker-entrypoint.s…`"
    | 30 hours ago `awx_postgres` |'
- en: '| `24c997d5991c` Up 2 hours | `ansible/awx_rabbitmq:3.7.4` `4369/tcp, 5671-5672/tcp,
    15671-15672/tcp, 25672/tcp` | "`docker-entrypoint.s…`" | 30 hours ago `awx_rabbitmq`
    |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `24c997d5991c` Up 2 hours | `ansible/awx_rabbitmq:3.7.4` `4369/tcp, 5671-5672/tcp,
    15671-15672/tcp, 25672/tcp` | "`docker-entrypoint.s…`" | 30 hours ago `awx_rabbitmq`
    |'
- en: 'We can log in to the AWX GUI by opening the web browser and connecting to the
    machine **internet protocol** (**IP**) address with the following credentials:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过打开Web浏览器并使用以下凭据连接到机器的**IP**地址来登录AWX GUI：
- en: 'USERNAME: `admin`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名：`admin`
- en: 'PASSWORD: `password`'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码：`password`
- en: 'This can be seen in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在下图中看到：
- en: '![](assets/2c21e2c1-ec7f-4fa6-8cdc-de994be62faf.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2c21e2c1-ec7f-4fa6-8cdc-de994be62faf.png)'
- en: 'Once we log in to AWX, we will see the main dashboard, along with all the options
    available for configuration on the left panel (Organizations, Teams, Projects,
    and so on):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们登录AWX，我们将看到主要的仪表板，以及左侧面板上可用于配置的所有选项（组织、团队、项目等）：
- en: '![](assets/a9730e4a-6dfe-4fc0-a641-1f6b71c56b8b.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a9730e4a-6dfe-4fc0-a641-1f6b71c56b8b.png)'
- en: There's more...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In order to simplify the deployment of all the prerequisites for AWX, I have
    included an Ansible playbook called `deploy_awx.yml`, along with multiple roles
    that are used to orchestrate the deployment of all the AWX components. We can
    deploy the AWX components using this playbook, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化AWX的所有先决条件的部署，我包含了一个名为`deploy_awx.yml`的Ansible playbook，以及用于编排所有AWX组件部署的多个角色。我们可以使用这个playbook来部署AWX组件，如下所示：
- en: Install Ansible on the machine, as outlined in this recipe.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照本教程在机器上安装Ansible。
- en: Clone the GitHub repo for this chapter.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆本章的GitHub存储库。
- en: 'Change to the `ch12_awx` folder, as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`ch12_awx`文件夹，如下所示：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'From inside this directory, run the playbook:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这个目录里面，运行playbook：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: See also...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'For more information regarding AWX installation, please check the following
    link:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 有关AWX安装的更多信息，请查看以下链接：
- en: '[https://github.com/ansible/awx/blob/devel/INSTALL.md](https://github.com/ansible/awx/blob/devel/INSTALL.md)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ansible/awx/blob/devel/INSTALL.md](https://github.com/ansible/awx/blob/devel/INSTALL.md)'
- en: Managing users and teams on AWX
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWX上管理用户和团队
- en: In this recipe, we will outline how to create users and teams in AWX. This is
    the way to implement RBAC and enforce privileges for the different teams within
    the organization, in order to provide more control over the different activities
    that can be carried out on the AWX platform.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将概述如何在AWX中创建用户和团队。这是实施RBAC并强制执行组织内不同团队的特权的方法，以便更好地控制可以在AWX平台上执行的不同活动。
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: AWX should be deployed as outlined in the previous recipe, and all the following
    tasks must be executed with the `admin` user account.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: AWX应按照前面的教程进行部署，并且所有以下任务必须使用`admin`用户帐户执行。
- en: How to do it…
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Create a new organization for all Network teams—as shown in the following screenshot—by
    selecting the organization from the left panel and pressing the SAVE button:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为所有网络团队创建一个新的组织，如下图所示，通过从左侧面板选择组织并按下保存按钮：
- en: '![](assets/20f55582-03bb-45e6-82d7-1ce39e830d02.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/20f55582-03bb-45e6-82d7-1ce39e830d02.png)'
- en: 'Create a new team within the Network organization for the Design team, by selecting
    the team from the left panel:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从左侧面板选择团队，在网络组织中为设计团队创建一个新团队：
- en: '![](assets/434fcf55-1a8d-4955-8702-ea070da6d810.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/434fcf55-1a8d-4955-8702-ea070da6d810.png)'
- en: 'Create another team within the Network organization for the Operation team,
    as shown in the following screenshot:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网络组织中为运维团队创建另一个团队，如下图所示：
- en: '![](assets/c118853f-0564-488e-a50f-f18801a768e4.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c118853f-0564-488e-a50f-f18801a768e4.png)'
- en: 'Create a `core` user within the Network organization by selecting the USERS button,
    as shown in the following screenshot:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择用户按钮，在网络组织中创建一个`core`用户，如下图所示：
- en: '![](assets/1edbe04d-44ff-403c-a308-74608d7ff9d2.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1edbe04d-44ff-403c-a308-74608d7ff9d2.png)'
- en: 'Assign this new user to the `Network_Design` team, click the TEAMS tab from the
    left panel, and then select the `Network_Design` team. Click on USERS and then
    add the `core` user to this team, as shown in the following screenshot:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这个新用户分配给`Network_Design`团队，从左侧面板点击TEAMS标签，然后选择`Network_Design`团队。点击USERS，然后将`core`用户添加到这个团队，如下截图所示：
- en: '![](assets/94a7237f-1553-4d2f-a5c0-ff2ecbc25d3e.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/94a7237f-1553-4d2f-a5c0-ff2ecbc25d3e.png)'
- en: Repeat the preceding steps to create a `noc` user, and assign them to the `Network_Operation`
    team.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复上述步骤，创建一个`noc`用户，并将其分配给`Network_Operation`团队。
- en: 'For the `Network_Design` team, assign the Project Admin, Credential Admin,
    and Inventory Admin permissions to the organization, as shown in the following
    screenshot:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`Network_Design`团队，将项目管理员、凭证管理员和库存管理员权限分配给组织，如下截图所示：
- en: '![](assets/20173148-37dd-4f2b-9d16-ae0064852fd3.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/20173148-37dd-4f2b-9d16-ae0064852fd3.png)'
- en: How it works…
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: One of the main features in AWX is its RBAC, which is achieved by different
    objects within AWX. These objects are mainly the organization, users, and teams.
    Since AWX should be the automation framework at an enterprise scale, different
    teams within the organization need to co-exist in AWX. Each of these teams manages
    its own devices and maintains its own playbooks, to manage its managed infrastructure.
    In AWX, the **Organization** is our method to differentiate these different organizations
    within the enterprise. In our sample example, we have created a Network organization
    to group all the teams and users responsible for the network infrastructure.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: AWX的主要特性之一是其RBAC，这是通过AWX内的不同对象实现的。这些对象主要是组织、用户和团队。由于AWX应该是企业规模的自动化框架，组织内的不同团队需要在AWX中共存。这些团队中的每一个都管理着自己的设备，并维护着自己的playbooks，以管理其受管基础设施。在AWX中，**组织**是我们区分企业内不同组织的方法。在我们的示例中，我们创建了一个网络组织，将负责网络基础设施的所有团队和用户分组在一起。
- en: 'Within the Organization, we have different users with different roles, who
    should have different levels of access to our central automation AWX framework.
    In order to simplify assigning the correct role to each user, we use the concept
    of **Teams** in order to group users with similar privileges/roles. So, in our
    case, we created two **Teams**: the `Network_Design` and `Network_Operation` teams.
    The roles and privileges for these two teams are described as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在组织内，我们有不同角色的不同用户，他们应该对我们的中央自动化AWX框架具有不同级别的访问权限。为了简化为每个用户分配正确角色的过程，我们使用**团队**的概念来将具有相似特权/角色的用户分组。因此，在我们的情况下，我们创建了两个**团队**：`Network_Design`和`Network_Operation`团队。这两个团队的角色和权限描述如下：
- en: The `Network_Design` team is responsible for creating the playbooks and creating
    the network inventories, along with the correct credentials to access these devices.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Network_Design`团队负责创建playbooks和创建网络清单，以及访问这些设备的正确凭据。'
- en: The `Network_Operation` team has the privilege to view these inventories and
    to execute the playbook developed by the Design team.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Network_Operation`团队有权查看这些清单，并执行由设计团队开发的playbook。'
- en: These different constructs work together to build a fine-grained RBAC for each
    user, utilizing the AWX framework.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这些不同的构造共同工作，为每个用户构建了精细的RBAC，利用了AWX框架。
- en: Since we have assigned to the `Network_Design` team the Project Admin, Inventory
    Admin, and Credential Admin roles, all the users within this team are able to
    create/edit/delete and use all these objects within the Network organization only.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经将项目管理员、库存管理员和凭证管理员角色分配给`Network_Design`团队，因此该团队内的所有用户都能够仅在Network组织内创建/编辑/删除和使用所有这些对象。
- en: See also...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'For more information regarding RBAC and how to use users and **Teams**, please
    check the following links for Ansible Tower:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有关RBAC和如何使用用户和**团队**的更多信息，请查看以下链接以了解Ansible Tower：
- en: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/organizations.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/organizations.html)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/organizations.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/organizations.html)'
- en: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/users.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/users.html)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/users.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/users.html)'
- en: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/teams.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/teams.html)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/teams.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/teams.html)'
- en: Creating a network inventory on AWX
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWX上创建网络清单
- en: In this recipe, we will outline how to create a network inventory in AWX. Inventories
    are fundamentals as they describe our network infrastructure and provide us with
    the capability to group our network devices efficiently.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将概述如何在AWX中创建网络清单。清单是基础，因为它们描述了我们的网络基础设施，并为我们提供了有效地对我们的网络设备进行分组的能力。
- en: Getting ready
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: AWX must be installed and reachable, and the user accounts must be deployed,
    as outlined in the previous recipe.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: AWX必须已安装并可访问，并且用户帐户必须按照前面的教程部署。
- en: How to do it…
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Create a new inventory called `mpls_core` by navigating to the INVENTORIES tab
    on the left navigation bar, as shown in the following screenshot:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到左侧导航栏上的INVENTORIES标签，创建一个名为`mpls_core`的新清单，如下截图所示：
- en: '![](assets/d302e4e9-afd3-4a1b-9234-87dfca828316.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d302e4e9-afd3-4a1b-9234-87dfca828316.png)'
- en: 'Create a new group called `junos`, as shown in the following screenshot:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`junos`的新组，如下截图所示：
- en: '![](assets/03259983-c8aa-4a75-86d7-dfd0fac7c3bd.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/03259983-c8aa-4a75-86d7-dfd0fac7c3bd.png)'
- en: 'Create the `iosxr`, `pe`, and `P `groups, using a similar approach. The final
    group structure under the mpls_core inventory should be similar to the one shown
    in the following screenshot:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用类似的方法创建`iosxr`、`pe`和`P`组。在mpls_core清单下的最终组结构应该类似于下面截图中显示的结构：
- en: '![](assets/dc6a55fd-4cc6-4467-a141-6f21536a4449.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dc6a55fd-4cc6-4467-a141-6f21536a4449.png)'
- en: 'Create the `mxpe01` host device under the HOSTS tab, and create the `ansible_host`
    variable under the VARIABLES section, as shown in the following screenshot:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HOSTS选项卡下创建`mxpe01`主机设备，并在VARIABLES部分创建`ansible_host`变量，如下截图所示：
- en: '![](assets/5ba6afcd-9ac2-4d8c-ad30-17e82a00dd82.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5ba6afcd-9ac2-4d8c-ad30-17e82a00dd82.png)'
- en: Repeat the same process to create the remaining hosts.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复相同的过程来创建剩余的主机。
- en: 'Go to the `junos` group that we have created and add the corresponding hosts,
    as shown in the following screenshot:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入我们创建的`junos`组，并添加相应的主机，如下截图所示：
- en: '![](assets/8a86349f-4d5a-47ee-858c-3c8164f189d6.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8a86349f-4d5a-47ee-858c-3c8164f189d6.png)'
- en: Repeat this for all the remaining groups.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对所有剩余的组重复这个步骤。
- en: 'After creating the `mpls_core` inventory, we will grant read access to the
    `Network_Operation` group for this inventory, as shown in the following screenshot:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`mpls_core`清单后，我们将为`Network_Operation`组授予对该清单的读取权限，如下截图所示：
- en: '![](assets/4208d9fb-5c73-4445-aae8-c0456ee38679.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4208d9fb-5c73-4445-aae8-c0456ee38679.png)'
- en: How it works…
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'In this recipe, we are building the inventory for our network. This is the
    exact step of defining an inventory file that we use with all our Ansible playbooks.
    The following code block shows the static inventory file that we normally define
    when we work with Ansible, and we outline how we can define the same exact structure
    using inventories in AWX:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们正在为我们的网络建立清单。这是定义我们所有Ansible playbooks中使用的清单文件的确切步骤。下面的代码块显示了我们通常在使用Ansible时定义的静态清单文件，以及我们如何使用AWX中的清单定义相同的结构：
- en: '[PRE8]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can define variables for our inventory on the group or host level. In our
    case, we are defining the `ansible_host` variable for each host, in order to tell
    AWX how to reach each host in our inventory.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在组或主机级别为我们的清单定义变量。在我们的情况下，我们为每个主机定义了`ansible_host`变量，以便告诉AWX如何访问清单中的每个主机。
- en: 'We update the permissions on our inventory so that the operations team has
    read access to it, in order to view its components. Since the design team has
    the inventory admin privilege, the design team has full administrative rights
    on all the inventories created within the network organization. The permissions
    on our inventory can be viewed as shown in the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们更新清单的权限，以便运维团队可以对其进行读取，以查看其组件。由于设计团队拥有清单管理员权限，设计团队对网络组织中创建的所有清单都拥有完全的管理权限。我们可以查看清单的权限，如下截图所示：
- en: '![](assets/55580aa8-7647-4709-9438-928a18fb8586.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/55580aa8-7647-4709-9438-928a18fb8586.png)'
- en: Managing network credentials on AWX
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWX上管理网络凭据
- en: In order for AWX to start to interact with our infrastructure and run the required
    playbook, we need to define the correct network credentials to log in to our network
    infrastructure. In this recipe, we outline how to create the required network
    credentials in order for AWX to log in to network devices and start executing
    playbooks on our managed network inventory. We will also outline how we can use
    RBAC within AWX to make it easy to share this sensitive data between different
    teams within the organization.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让AWX开始与我们的基础设施进行交互并运行所需的playbook，我们需要定义正确的网络凭据来登录到我们的网络基础设施。在这个配方中，我们概述了如何创建所需的网络凭据，以便AWX登录到网络设备并开始在我们管理的网络清单上执行playbook。我们还将概述如何在AWX中使用RBAC，以便在组织内不同团队之间轻松共享这些敏感数据。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作…
- en: AWX must be installed and reachable, and the User accounts must be deployed,
    as outlined in the previous recipe.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: AWX必须被安装并且可达，用户账户必须被部署，就像在之前的配方中所概述的那样。
- en: How to do it…
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'From the CREDENTIALS tab in the left navigation bar, create the login credentials
    required to access the network devices. We will use the Machine credential type
    since we will access the devices using new connection modules such as `network_cli`,
    `NETCONF`, or `httpapi`. Specify the username and password used to log in to the
    devices:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航栏的CREDENTIALS选项卡中，创建访问网络设备所需的登录凭据。我们将使用Machine凭据类型，因为我们将使用新的连接模块，如`network_cli`、`NETCONF`或`httpapi`来访问设备。指定用于登录设备的用户名和密码：
- en: '![](assets/37df1d65-58fe-4285-af23-db07ecce9236.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/37df1d65-58fe-4285-af23-db07ecce9236.png)'
- en: 'Update the permissions for the credentials that we have created so that the
    `Network_Design` team is the credential Administrator and the `Network_Operation`
    team has read-only access. Here is how the permissions on the credential are applied:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新我们创建的凭据的权限，以便`Network_Design`团队是凭据管理员，`Network_Operation`团队具有只读权限。以下是凭据权限的应用方式：
- en: '![](assets/eff00385-dd66-4465-be79-c862c34c12f9.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eff00385-dd66-4465-be79-c862c34c12f9.png)'
- en: How it works…
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In this recipe, we created the network credentials needed to access our network
    devices, and we specified the username and password required to log in to the
    devices on the AWX GUI interface. When we entered the password on the AWX interface,
    it was encrypted and then stored on the PostgreSQL database in an encrypted format
    that we can't view in plaintext. This provides extra security in terms of password
    handling within the AWX framework and also provides a simple procedure to share
    and utilize sensitive information within the organization, so the `Admin` or authorized
    user can create and edit the credential and can grant user permissions on those
    credentials to the required users/teams. These users only use the credentials
    but they don't have any admin rights to view or change them. This greatly simplifies
    password management when compared with using Ansible and `ansible-vault`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们创建了访问网络设备所需的网络凭据，并在AWX GUI界面上指定了登录到设备所需的用户名和密码。当我们在AWX界面上输入密码时，它会被加密，然后以加密格式存储在PostgreSQL数据库中，我们无法以明文查看。这在AWX框架内提供了额外的密码处理安全性，并提供了一个简单的程序来在组织内共享和利用敏感信息，因此`Admin`或授权用户可以创建和编辑凭据，并可以向所需的用户/团队授予对这些凭据的用户权限。这些用户只使用凭据，但他们没有任何管理权限来查看或更改它们。与使用Ansible和`ansible-vault`相比，这大大简化了密码管理。
- en: AWX provides different credential types to access different resources such as
    physical infrastructure, cloud providers, and **version control systems** (**VCS**).
    In our case, we use the Machine credential type, since we are connecting to our
    network infrastructure using SSH with a username and password.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: AWX提供不同的凭据类型来访问不同的资源，如物理基础设施、云提供商和版本控制系统（VCS）。在我们的情况下，我们使用机器凭据类型，因为我们使用SSH连接到我们的网络基础设施，需要用户名和密码。
- en: See also...
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'For more information regarding AWX credentials, please check the following
    URL:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 有关AWX凭据的更多信息，请查看以下URL：
- en: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/credentials.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/credentials.html)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/credentials.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/credentials.html)'
- en: Creating projects on AWX
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWX上创建项目
- en: In this recipe, we will outline how to create projects on AWX. A project in
    AWX is an object that represents an Ansible playbook (or playbooks), with all
    the related files and folders required for this playbook to execute.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将概述如何在AWX上创建项目。在AWX中，项目是一个表示Ansible剧本（或剧本）的对象，其中包括执行此剧本所需的所有相关文件和文件夹。
- en: Getting ready
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: AWX must be installed and reachable, and the User accounts must be deployed,
    as outlined in the previous recipe.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: AWX必须已安装并可访问，并且必须部署用户帐户，如前一教程中所述。
- en: How to do it…
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: Create a new directory, `awx_sample_project`, to hold all the files and folders
    for our AWX project.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新目录`awx_sample_project`，用于保存我们的AWX项目的所有文件和文件夹。
- en: 'Create a `group_vars/all.yml` playbook with the following content:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`group_vars/all.yml`剧本，内容如下：
- en: '[PRE9]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a `group_vars/iosxr.yml` playbook with the following content:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`group_vars/iosxr.yml`剧本，内容如下：
- en: '[PRE10]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a `group_vars/junos.yml` playbook with the following content:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`group_vars/junos.yml`剧本，内容如下：
- en: '[PRE11]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Create a `pb_deploy_interfaces.yml` playbook with the following content:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`pb_deploy_interfaces.yml`剧本，内容如下：
- en: '[PRE12]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a `pb_validate_interfaces.yml` playbook with the following content:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`pb_validate_interfaces.yml`剧本，内容如下：
- en: '[PRE13]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Our new folder will have the following directory structure:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的新文件夹将具有以下目录结构：
- en: '[PRE14]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'On your GitHub account, create a new public repository named `awx_sample_project`:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的GitHub帐户上，创建一个名为`awx_sample_project`的新公共仓库：
- en: '![](assets/613e55c0-8212-42e8-85f6-f1f5e8c7a1ef.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/613e55c0-8212-42e8-85f6-f1f5e8c7a1ef.png)'
- en: 'Inside our `awx_sample_repo` project folder, initialize a Git repository and
    link it to the GitHub repository that we created in the previous step, as shown
    in the following code block:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`awx_sample_repo`项目文件夹中，初始化一个Git仓库并将其链接到我们在上一步创建的GitHub仓库，如下代码块所示：
- en: '[PRE15]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'On the AWX interface, create a new project based on Git, as shown in the following
    screenshot:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWX界面上，根据Git创建一个新项目，如下截图所示：
- en: '![](assets/4bde454c-0624-40b4-bc68-60341b722383.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4bde454c-0624-40b4-bc68-60341b722383.png)'
- en: How it works…
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: One of the main goals of AWX is to simplify how to collaborate with Ansible
    playbooks, as well as to simplify how to run and execute Ansible playbooks. In
    order to achieve these goals, the best and most common approach to work with Ansible
    playbooks within AWX is using AWX projects stored and tracked in Git version control.
    This approach allows us to separate code development for our Ansible playbooks
    (which is stored and versioned using Git) and playbook execution (which will be
    handled by AWX).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: AWX的主要目标之一是简化与Ansible剧本的协作，以及简化运行和执行Ansible剧本的方式。为了实现这些目标，与AWX一起使用Ansible剧本的最佳和最常见方法是使用存储和跟踪在Git版本控制中的AWX项目。这种方法允许我们将用于我们的Ansible剧本的代码开发（存储和版本控制使用Git）与剧本执行（将由AWX处理）分开。
- en: We follow the same logic for developing a project with Ansible by creating a
    folder to hold all our folders and files that are part of our project. This includes
    `group_vars` and `host_vars` folders to specify our variables, and we also define
    the different playbooks needed for our project. We keep all these files and folders
    in a Git repository and host them on a Git VCS such as GitHub or GitLab.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们遵循与使用Ansible开发项目相同的逻辑，通过创建一个文件夹来保存我们项目的所有文件和文件夹。这包括`group_vars`和`host_vars`文件夹，用于指定我们的变量，我们还定义了项目所需的不同剧本。我们将所有这些文件和文件夹保存在一个Git仓库中，并将它们托管在GitHub或GitLab等Git
    VCS上。
- en: In order for AWX to start using the playbooks that we have developed, we create
    a new project within AWX and we choose for it to be based on Git, and we provide
    the URL for the Git repository that houses this project. We also supply any additional
    information needed, such as which branch to use; and if this is a private Git
    repository, we supply the credentials needed to access it.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让AWX开始使用我们开发的剧本，我们在AWX中创建一个新项目，并选择基于Git，然后提供包含此项目的Git仓库的URL。我们还提供所需的任何其他信息，例如要使用哪个分支；如果这是一个私有Git仓库，我们提供访问它所需的凭据。
- en: Once we complete this step, the AWX interface will fetch all the content for
    this Git repository and download it to this location—by default, `/var/lib/awx/projects`.
    At this stage, we have all the content for this repository locally stored on the
    AWX node, to start running our playbooks against our network nodes.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，AWX界面将获取此Git仓库的所有内容并将其下载到此位置，默认情况下为`/var/lib/awx/projects`。在此阶段，我们在AWX节点上本地存储了此仓库的所有内容，以便开始运行我们的剧本来针对我们的网络节点。
- en: See also...
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'For more information regarding AWX projects, please check the following URL:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 有关AWX项目的更多信息，请查看以下URL：
- en: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/projects.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/projects.html)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/projects.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/projects.html)'
- en: Creating templates on AWX
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWX上创建模板
- en: In this recipe, we will outline how to combine inventories, credentials, and
    projects in order to create templates in AWX. Templates in AWX allow us to create
    a standard running environment for our Ansible playbooks, which can be executed
    by different users according to their roles.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将概述如何在AWX中组合清单、凭据和项目，以创建模板。AWX中的模板允许我们为Ansible playbooks创建标准的运行环境，可以根据用户的角色执行不同的用户。
- en: Getting ready
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The AWX interface must be installed and credentials, inventories, and projects
    must be created, as outlined in the previous recipes.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: AWX界面必须安装，并且必须创建凭据、清单和项目，如前面的配方中所述。
- en: How to do it…
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'Create a new template in AWX called `provision_interfaces`, and assign to it
    the inventory and credentials that we created. We will use the `awx_sample_project`
    directory, as shown in the following screenshot:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWX中创建一个名为`provision_interfaces`的新模板，并为其分配我们创建的清单和凭据。我们将使用`awx_sample_project`目录，如下截图所示：
- en: '![](assets/04de2911-a8a0-4736-848b-edd21c7bbae8.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/04de2911-a8a0-4736-848b-edd21c7bbae8.png)'
- en: 'We update the permissions for this template so that the `Network_Design` team
    is `ADMIN` and `Network_Operation` team has the EXECUTE role, as shown in the
    following screenshot:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们更新了此模板的权限，以便`Network_Design`团队是`ADMIN`，`Network_Operation`团队具有EXECUTE角色，如下截图所示：
- en: '![](assets/86656c8b-4dd9-45cf-85ea-6f99146c7ebb.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/86656c8b-4dd9-45cf-85ea-6f99146c7ebb.png)'
- en: Use the same procedures again to create a template called `interface_validation`,
    using the `pb_validate_interfaces.yml` playbook.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用相同的步骤再次创建一个名为`interface_validation`的模板，使用`pb_validate_interfaces.yml` playbook。
- en: How it works…
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this recipe, we outlined how we combine all the different parts that we have
    previously configured in order to execute our playbooks on AWX. AWX uses templates
    in order to create this standard execution environment, which we can use in order
    to run our Ansible playbooks from AWX.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们概述了如何组合我们之前配置的所有不同部分，以便在AWX上执行我们的playbooks。AWX使用模板来创建这种标准的执行环境，我们可以使用它来从AWX运行我们的Ansible
    playbooks。
- en: 'We created the template with a given name, and we specified the different parameters
    in order to create this environment to execute our playbook, as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用给定名称创建了模板，并指定了不同的参数，以创建此环境以执行我们的playbook，如下所示：
- en: We provided the inventory against which we want to execute our playbooks.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们提供了我们要执行playbook的清单。
- en: We provided all the required credentials that we need in order to execute our
    playbooks (this can be one or multiple credentials).
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们提供了执行playbook所需的所有必要凭据（可以是一个或多个凭据）。
- en: We provided the project from which we will choose the playbook to run.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们提供了我们将选择要运行的playbook的项目。
- en: We selected the playbook from this project.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们从这个项目中选择了playbook。
- en: 'There are other optional parameters that we can specify in our templates, such
    as the following:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在我们的模板中指定其他可选参数，例如以下内容：
- en: Whether to run this playbook or use check mode when we execute this playbook.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行此playbook时，是否运行此playbook或使用检查模式。
- en: Whether we want to provide a limit on our inventory in order to target a subset
    of it.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们是否要在清单上设置限制，以便针对其的子集进行目标定位。
- en: Any Ansible tags we want to specify.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们想要指定的任何Ansible标记。
- en: Finally, we can tailor the permissions for this template for all the users within
    the organization, and, in our case, we provide the ADMIN role for the `Network_Design`
    team and the EXECUTE role for the `Network_Operation` team. In this case, the
    `Network_Operation` team can execute this playbook, while the `Network_Design`
    team has the ability to edit and change the different parameters for this template.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以为组织中的所有用户定制此模板的权限，在我们的情况下，我们为`Network_Design`团队提供ADMIN角色，为`Network_Operation`团队提供EXECUTE角色。在这种情况下，`Network_Operation`团队可以执行此playbook，而`Network_Design`团队可以编辑和更改此模板的不同参数。
- en: 'Once we save this template, we can launch a job from it and monitor its result
    from the JOBS tab on the left side in the navigation bar:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们保存了这个模板，我们可以从中启动一个作业，并从导航栏左侧的JOBS选项卡监视其结果：
- en: '![](assets/1caac378-4354-4374-a436-2d5ad9ebb140.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1caac378-4354-4374-a436-2d5ad9ebb140.png)'
- en: 'We can also see the details for this playbook run as we do normally in Ansible
    by clicking on the respective job, as shown in the following screenshot:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以像在Ansible中一样，通过单击相应的作业来查看此playbook运行的详细信息，如下截图所示：
- en: '![](assets/6d950ec9-fb9b-4809-a71d-84b5148b66f5.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6d950ec9-fb9b-4809-a71d-84b5148b66f5.png)'
- en: See also...
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅…
- en: 'For more information regarding AWX templates and the different options available
    to customize the templates, please check the following URL:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 有关AWX模板以及可用于自定义模板的不同选项的更多信息，请查看以下URL：
- en: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/job_templates.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/job_templates.html)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/job_templates.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/job_templates.html)'
- en: Creating workflow templates on AWX
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWX上创建工作流模板
- en: In this recipe, we will outline how to create more complex templates on AWX
    using workflow templates, in order to run multiple playbooks to achieve a common
    goal. This is an advanced feature, whereby we combine multiple templates in AWX
    to achieve the task.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将概述如何使用工作流模板在AWX上创建更复杂的模板，以运行多个playbook以实现共同的目标。这是一个高级功能，我们在AWX中组合多个模板以完成任务。
- en: Getting ready
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: AWX templates are configured as outlined in the previous chapter.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: AWX模板按照前一章中的配置进行配置。
- en: How to do it…
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到…
- en: 'From the TEMPLATES tab, create a NEW WORKFLOW JOB TEMPLATE, as shown in the
    following screenshot:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从TEMPLATES选项卡中，创建一个NEW WORKFLOW JOB TEMPLATE，如下截图所示：
- en: '![](assets/4cc869f1-c341-4833-a7cb-e4136f65bbe4.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4cc869f1-c341-4833-a7cb-e4136f65bbe4.png)'
- en: 'Using the WORKFLOW VISUALIZER, create the workflow outlined in the following
    screenshot:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用工作流可视化器，创建如下截图中概述的工作流：
- en: '![](assets/73816efc-48d0-48b7-acc5-4f4c93442dfa.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/73816efc-48d0-48b7-acc5-4f4c93442dfa.png)'
- en: 'Assign the correct permission on the workflow template, as shown in the following
    screenshot:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据以下截图在工作流模板上分配正确的权限：
- en: '![](assets/76052748-b254-4820-9ed4-e24cfc2ff6a2.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/76052748-b254-4820-9ed4-e24cfc2ff6a2.png)'
- en: How it works…
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: If our automation task requires multiple playbooks to run in order to achieve
    our target, we can use the workflow template feature in AWX to orchestrate between
    multiple templates in order to achieve this goal. The templates can be combined
    together based on different criteria regarding the success and failure of the
    tasks contained in the workflow template.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的自动化任务需要运行多个playbook以实现我们的目标，我们可以使用AWX中的工作流模板功能来协调多个模板以实现此目标。模板可以根据工作流模板中包含的任务的成功和失败的不同标准进行组合。
- en: In our example, we use the workflow template in order to provision the interface
    on the IOS-XR nodes; then, we validate that all the configuration is applied correctly
    and that the current network state is as we desire. We combine the `provision_interface`
    template and the `validate_interfaces` template in order to achieve this. We start
    by provisioning the interface, and, on the success of this task, we run the validation
    playbook.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们使用工作流模板来在IOS-XR节点上配置接口；然后，我们验证所有配置是否正确应用，并且当前的网络状态是否符合我们的要求。我们将`provision_interface`模板和`validate_interfaces`模板组合在一起以实现这一目标。我们首先配置接口，在此任务成功后，我们运行验证playbook。
- en: 'We can check the status of the combined workflow in the JOBS tab, as shown
    in the following screenshot:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在“作业”选项卡中检查组合工作流的状态，如下截图所示：
- en: '![](assets/005e44a3-51ca-4592-8ca1-089c81f41ee0.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/005e44a3-51ca-4592-8ca1-089c81f41ee0.png)'
- en: 'Further, we can go into the details of this workflow by clicking on the workflow
    name in the JOBS tab and viewing the details of each task in this workflow:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以通过在“作业”选项卡中点击工作流名称并查看该工作流中每个任务的详细信息来深入了解此工作流的详细信息：
- en: '![](assets/ab3b3514-27a8-43cd-9e39-1d313ab6c313.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ab3b3514-27a8-43cd-9e39-1d313ab6c313.png)'
- en: See also...
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅…
- en: 'For more information regarding AWX workflow templates, please check the following
    URL:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 有关AWX工作流模板的更多信息，请查看以下URL：
- en: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/workflow_templates.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/workflow_templates.html)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible-tower/latest/html/userguide/workflow_templates.html](https://docs.ansible.com/ansible-tower/latest/html/userguide/workflow_templates.html)'
- en: Running automation tasks using the AWX API
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AWX API运行自动化任务
- en: In this recipe, we will outline how to initiate jobs on AWX, using the AWX API.
    One of the main features in AWX is that it provides a powerful API in order to
    interact with the AWX system, to query all the objects within AWX, and to execute
    automation tasks from the AWX framework, such as templates and workflow templates.
    We can also use the API to list all the users/teams, and all the different resources
    available and configured on the AWX interface.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将概述如何使用AWX API在AWX上启动作业。AWX的主要功能之一是提供强大的API，以便与AWX系统交互，查询AWX中的所有对象，并从AWX框架执行自动化任务，如模板和工作流模板。我们还可以使用API列出所有用户/团队以及在AWX界面上可用和配置的所有不同资源。
- en: Getting ready
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: The AWX interface must be installed and reachable, and the templates and workflow
    templates must be configured as outlined in the previous chapters.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: AWX界面必须已安装并可访问，并且必须根据前几章的概述配置模板和工作流模板。
- en: In order to execute the command to interact with the AWX API, we will use the
    `curl` command to initiate HTTP requests to the AWX endpoint. This requires cURL
    to be installed on the machine.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行与AWX API交互的命令，我们将使用`curl`命令来启动HTTP请求到AWX端点。这需要在机器上安装cURL。
- en: How to do it…
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Start by exploring the AWX API by listing all the resources available through
    this API, as shown in the following code snippet:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过列出通过此API可用的所有资源来开始探索AWX API，如下面的代码片段所示：
- en: '[PRE16]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Collect all the job templates configured on the AWX interface with the following
    REST API call, and get the ID for each job template:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下REST API调用收集在AWX界面上配置的所有作业模板，并获取每个作业模板的ID：
- en: '[PRE17]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Launch a job template configured on the AWX interface with the following REST
    API call. In this example, we are launching `job_Templates` with ID = `7`:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下REST API调用在AWX界面上配置的作业模板中启动作业模板。在此示例中，我们正在启动ID=`7`的`job_Templates`：
- en: '[PRE18]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Get the status of the job launched from the preceding API call with the following
    call. `ID=35` is retrieved from the previous API call for launching the job template:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下调用获取从前面的API调用启动的作业的状态。`ID=35`是从前面的API调用中检索到的，用于启动作业模板：
- en: '[PRE19]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Collect all workflow templates configured on the AWX interface with the following
    API call, and record the ID for each one:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下API调用收集在AWX界面上配置的所有工作流模板，并记录每个模板的ID：
- en: '[PRE20]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Launch the workflow job template using the ID retrieved from the previous API
    call:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用从前面的API调用中检索到的ID启动工作流作业模板：
- en: '[PRE21]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works…
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: AWX provides a simple and powerful REST API to retrieve and inspect all the
    objects and components of the AWX system. Using this API, we can interact with
    the AWX interface to launch automation tasks, as well as to retrieve the status
    of execution of these tasks. In this recipe, we outlined how we can interact with
    the AWX API using the cURL command-line tool; how we can use other tools such
    as Postman to interact with the API; and also, how we could use any programming
    language, such as Python or Go, to build more sophisticated scripts and applications,
    in order to consume the AWX API. In all our examples, we are using the `jq` Linux
    utility in order to output the JSON data returned from each API call in a nice
    format.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: AWX提供了一个简单而强大的REST API，用于检索和检查AWX系统的所有对象和组件。使用此API，我们可以与AWX界面交互，以启动自动化任务，并检索这些任务的执行状态。在本教程中，我们概述了如何使用cURL命令行工具与AWX
    API进行交互；如何使用其他工具如Postman与API进行交互；以及如何使用任何编程语言，如Python或Go，构建更复杂的脚本和应用程序，以消耗AWX
    API。在我们的所有示例中，我们都使用`jq` Linux实用程序，以便以良好的格式输出每个API调用返回的JSON数据。
- en: 'We start by exploring all the endpoints published through the AWX API by inspecting
    this `http://<AWX Node IP>/api/v2/` **Uniform Resource Identifier** (**URI**),
    which returns all the endpoints available through this API. The following is a
    snippet of this output:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过检查`http://<AWX Node IP>/api/v2/`的**统一资源标识符**（**URI**）来探索通过AWX API发布的所有端点，这将返回通过此API可用的所有端点。以下是这个输出的一部分：
- en: '[PRE22]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We then list all the job templates configured on the AWX interface by hitting
    the corresponding API endpoint. This API call is using the `GET` method, and it
    must be authenticated; that is why we use the `--user` option to pass in the username
    and password for the user. The following snippet outlines some of the returned
    values from this call:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过访问相应的API端点列出在AWX界面上配置的所有作业模板。这个API调用使用`GET`方法，并且必须经过身份验证；这就是为什么我们使用`--user`选项来传递用户的用户名和密码。以下代码片段概述了这个调用返回的一些值：
- en: '[PRE23]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This API call returns a list of all the job templates configured on the AWX
    interface; however, the most important item we care about is the `id` field for
    each job template. This is a unique primary key for each job template within the
    AWX database that identifies each job template; using this `id` field, we can
    start to interact with each job template, and in the examples outlined in this
    receipe, we launch a job template by using a `POST` request to this specific job
    template.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这个API调用返回了在AWX界面上配置的所有作业模板的列表；然而，我们关心的最重要的项目是每个作业模板的`id`字段。这是AWX数据库中每个作业模板的唯一主键，用于标识每个作业模板；使用这个`id`字段，我们可以开始与每个作业模板进行交互，在本文中概述的示例中，我们通过向特定的作业模板发出`POST`请求来启动作业模板。
- en: Once we launch the job template, this triggers a job on the AWX node, and we
    get the corresponding job ID as a result of the `POST` request that we have triggered.
    Using this job ID, we can check the status of the job that was executed by using
    a `GET` request to the Jobs API endpoints and supplying the corresponding job
    ID. We use a similar approach to launch workflow templates, only using a different
    URI endpoint for the workflows.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们启动作业模板，这将在AWX节点上触发一个作业，并且我们将获得相应的作业ID作为我们触发的`POST`请求的结果。使用这个作业ID，我们可以通过向作业API端点发出`GET`请求并提供相应的作业ID来检查执行的作业的状态。我们使用类似的方法来启动工作流模板，只是使用不同的URI端点来处理工作流。
- en: There's more…
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In order to list and launch a specific job template or a workflow template,
    we can use the name of the template in the API call instead of using the `id`
    field. For example, the API call to launch the `provision_interfaces` job template
    in our sample is shown in the following code snippet:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 为了列出和启动特定的作业模板或工作流模板，我们可以在API调用中使用模板的名称，而不是使用`id`字段。例如，我们示例中启动`provision_interfaces`作业模板的API调用如下所示：
- en: '[PRE24]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The same process can be followed to invoke a workflow template, using its name
    as the parameter.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按照相同的过程来调用工作流模板，使用它的名称作为参数。
- en: See also...
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'For more information regarding the AWX API, please check the following URL:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 有关AWX API的更多信息，请查看以下网址：
- en: '[https://docs.ansible.com/ansible-tower/latest/html/towerapi/index.html](https://docs.ansible.com/ansible-tower/latest/html/towerapi/index.html)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible-tower/latest/html/towerapi/index.html](https://docs.ansible.com/ansible-tower/latest/html/towerapi/index.html)'
