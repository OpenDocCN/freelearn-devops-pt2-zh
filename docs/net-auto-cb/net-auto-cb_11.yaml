- en: Building a Network Inventory with Ansible and NetBox
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible和NetBox构建网络库存
- en: In the previous chapters of this book, we described network infrastructure using
    Ansible variables stored in YAML files. While this approach is perfectly acceptable,
    it is not the optimal solution for adopting automation across an organization.
    We need to have our network inventory, IP addresses, and VLANs in a central system,
    which will act as the authoritative source of truth for our network. This system
    should have a robust and powerful API that can be queried by other automation
    and OSS/BSS systems to retrieve and update the network inventory.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前几章中，我们使用存储在YAML文件中的Ansible变量描述了网络基础设施。虽然这种方法完全可接受，但对于在整个组织中采用自动化来说并非最佳解决方案。我们需要将我们的网络库存、IP地址和VLAN放在一个中央系统中，这将作为我们网络的真相来源。该系统应具有强大而强大的API，其他自动化和OSS/BSS系统可以查询该API以检索和更新网络库存。
- en: '**NetBox** is an open source inventory system for network infrastructure, which
    was initially developed by the network engineering team at DigitalOcean to document
    their data center infrastructure. It is a simple yet powerful and highly extensible
    inventory system, which can act as a source of truth regarding our network. It
    allows us to document and describe the following features on any network infrastructure:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: NetBox是一个用于网络基础设施的开源库存系统，最初由DigitalOcean的网络工程团队开发，用于记录他们的数据中心基础设施。它是一个简单但功能强大且高度可扩展的库存系统，可以作为关于我们网络的真相来源。它允许我们记录和描述任何网络基础设施上的以下功能：
- en: '**IP address management (IPAM)**: IP networks and addresses, VRFs, and VLANs'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IP地址管理（IPAM）**：IP网络和地址、VRF和VLAN'
- en: '**Equipment racks**: Organized by groups and sites'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备机架**：按组和站点组织'
- en: '**Devices**: Types of devices and where they are installed'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备**：设备类型和安装位置'
- en: '**Connections**: Network, console, and power connections between devices'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接**：设备之间的网络、控制台和电源连接'
- en: '**Virtualization**: Virtual machines and clusters'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟化**：虚拟机和集群'
- en: '**Data circuits**: Long-haul communication circuits and providers'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据电路**：长途通信电路和供应商'
- en: '**Secrets**: Encrypted storage of sensitive credentials'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**秘密**：敏感凭据的加密存储'
- en: NetBox is a Django-based Python application that uses PostgreSQL as backend
    data storage and NGINX as a frontend web server, along with other optional components
    that work together to deliver the NetBox system. It has a powerful REST API, which
    can be used to retrieve or update the data stored in the NetBox database.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: NetBox是一个基于Django的Python应用程序，使用PostgreSQL作为后端数据存储和NGINX作为前端Web服务器，以及其他可选组件一起运行以提供NetBox系统。它有一个强大的REST
    API，可以用于检索或更新NetBox数据库中存储的数据。
- en: 'In this chapter, we will outline the following three main use cases for integration
    between Ansible and NetBox:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将概述Ansible和NetBox之间集成的以下三个主要用例：
- en: 'Ansible can be used to populate data in NetBox for the various types of network
    information that are modeled by NetBox, such as sites, devices, and IP addresses.
    The following diagram outlines the high-level integration between Ansible and
    NetBox in this use case:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible可用于在NetBox中填充各种类型的网络信息，例如站点、设备和IP地址。以下图表概述了在这种用例中Ansible和NetBox之间的高级集成：
- en: '![](assets/859de243-fe05-451c-9af7-60f949df6b4a.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/859de243-fe05-451c-9af7-60f949df6b4a.png)'
- en: 'NetBox can be used as the dynamic inventory source for Ansible to retrieve
    and build an Ansible inventory. The following diagram outlines this integration:'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NetBox可以作为Ansible的动态清单来源，用于检索和构建Ansible清单。以下图表概述了这种集成：
- en: '![](assets/fd507d70-2842-4cfe-8c32-6e70363e69fa.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fd507d70-2842-4cfe-8c32-6e70363e69fa.png)'
- en: 'NetBox can be used as the source of information for data required by Ansible
    to provision and configure network devices. The following diagram outlines this
    use case:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NetBox可以作为Ansible所需的数据信息的来源，用于配置和配置网络设备。以下图表概述了这种用例：
- en: '![](assets/5f38834f-b0fc-43be-b410-7325903f07f8.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5f38834f-b0fc-43be-b410-7325903f07f8.png)'
- en: 'We are going to use a sample network composed of two data center sites with
    a spine or leaf fabric in each site. We will model all the information and populate
    it in NetBox. The following table captures this sample network infrastructure:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用由两个数据中心站点组成的示例网络，每个站点都有脊柱或叶子结构。我们将对所有信息进行建模并填充到NetBox中。以下表格捕捉了这个示例网络基础设施：
- en: '| **Site** | **Device** | **Role** |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| **站点** | **设备** | **角色** |'
- en: '| DC1 | dc1-spine01 | Spine switch |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| DC1 | dc1-spine01 | 脊柱交换机 |'
- en: '| DC1 | dc1-spine02 | Spine switch |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| DC1 | dc1-spine02 | 脊柱交换机 |'
- en: '| DC1 | dc1-leaf01 | Leaf switch |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| DC1 | dc1-leaf01 | 叶子交换机 |'
- en: '| DC1 | dc1-leaf02 | Leaf switch |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| DC1 | dc1-leaf02 | 叶子交换机 |'
- en: '| DC2 | dc2-spine01 | Spine switch |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| DC2 | dc2-spine01 | 脊柱交换机 |'
- en: '| DC2 | dc2-spine02 | Spine Switch |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| DC2 | dc2-spine02 | 脊柱交换机 |'
- en: '| DC2 | dc2-leaf01 | Leaf switch |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| DC2 | dc2-leaf01 | 叶子交换机 |'
- en: '| DC2 | dc2-leaf02 | Leaf switch |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| DC2 | dc2-leaf02 | 叶子交换机 |'
- en: 'The main recipes covered in this chapter are as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主要内容如下：
- en: Installing NetBox
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装NetBox
- en: Integrating NetBox with Ansible
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将NetBox与Ansible集成
- en: Populating sites in NetBox
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在NetBox中填充站点
- en: Populating devices in NetBox
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在NetBox中填充设备
- en: Populating interfaces in NetBox
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在NetBox中填充接口
- en: Populating IP addresses in NetBox
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在NetBox中填充IP地址
- en: Populating IP prefixes in NetBox
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在NetBox中填充IP前缀
- en: Using NetBox as a dynamic inventory source for Ansible
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用NetBox作为Ansible的动态清单来源
- en: Generating a configuration using NetBox data
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用NetBox数据生成配置
- en: Technical requirements
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All of the code used in this chapter can be found in the following GitHub repository:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有代码都可以在以下GitHub存储库中找到：
- en: '[https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch11_netbox](https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch11_netbox)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch11_netbox](https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch11_netbox)'
- en: 'The following are the software releases that this chapter is based on:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本章基于以下软件版本发布：
- en: An Ansible machine running CentOS 7
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行CentOS 7的Ansible机器
- en: Ansible 2.9
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 2.9
- en: Python 3.6.8
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6.8
- en: Arista vEOS running EOS 4.20.1F
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arista vEOS运行EOS 4.20.1F
- en: NetBox v2.6.5 running on a CentOS 7 Linux machine
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NetBox v2.6.5在CentOS 7 Linux机器上运行
- en: Installing NetBox
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装NetBox
- en: In this recipe, we will outline how to install NetBox using Docker containers
    and how to start all the required containers to have a functional NetBox server.
    Using Docker containers to install NetBox is the simplest way of getting started.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将概述如何使用Docker容器安装NetBox，以及如何启动所有必需的容器，以使NetBox服务器正常运行。使用Docker容器安装NetBox是最简单的入门方式。
- en: Getting ready
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to start installing NetBox on a Linux machine, the machine needs to
    have internet connectivity to pull the required Docker image for NetBox operation
    from Docker Hub.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Linux机器上开始安装NetBox，机器需要具有互联网连接，以从Docker Hub拉取NetBox操作所需的Docker镜像。
- en: How to do it…
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Install Docker on your CentOS Linux machine using the following URL:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下URL在您的CentOS Linux机器上安装Docker：
- en: '[https://docs.docker.com/install/linux/docker-ce/centos/](https://docs.docker.com/install/linux/docker-ce/centos/)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.docker.com/install/linux/docker-ce/centos/](https://docs.docker.com/install/linux/docker-ce/centos/)'
- en: 'Install Docker Compose using the following URL:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下URL安装Docker Compose：
- en: '[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)'
- en: 'Clone the NetBox repository into a new directory (`netbox_src`), as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将NetBox存储库克隆到一个新目录（`netbox_src`）中，如下所示：
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Change to the `netbox_src` directory and pull all the required Docker images
    using `docker-compose`, as follows:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`netbox_src`目录，并使用`docker-compose`拉取所有必需的Docker镜像，如下所示：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update the `docker-compose.yml` file to set the correct port for the NGINX
    web server:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`docker-compose.yml`文件，设置NGINX Web服务器的正确端口：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Start all the Docker containers, as follows:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动所有Docker容器，如下所示：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'As outlined in this chapter''s introduction, NetBox is composed of multiple
    services that integrate together to deliver the required NetBox application. The
    simplest installation method for NetBox is by using Docker containers. We use
    a single `docker-compose` definition file to describe the interaction between
    the different Docker containers needed to deliver the NetBox application. The
    following diagram outlines the high-level architecture of NetBox and how each
    service runs in its own container:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章介绍的，NetBox由多个服务组成，这些服务集成在一起以提供所需的NetBox应用程序。使用Docker容器的最简单安装方法是使用Docker容器。我们使用一个`docker-compose`定义文件来描述不同Docker容器之间的交互，以提供NetBox应用程序。以下图表概述了NetBox的高级架构，以及每个服务如何在自己的容器中运行：
- en: '![](assets/fd502617-1ce0-45b8-b98d-9a738c847e12.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fd502617-1ce0-45b8-b98d-9a738c847e12.png)'
- en: In this recipe, we described the steps required to install NetBox using Docker
    and `docker-compose`, which greatly simplifies the installation steps that lead
    to a functional NetBox server. The developers behind NetBox created the Docker
    images required to run NetBox using Docker and the `docker-compose` file, which
    describes the overall interaction between the different NetBox components in order
    to set up a NetBox server. All the NetBox setup instructions, along with the Docker
    files and the `docker-compose` file to build and deploy NetBox using Docker containers,
    can be found at [https://github.com/netbox-community/netbox-docker](https://github.com/netbox-community/netbox-docker).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们描述了使用Docker和`docker-compose`安装NetBox所需的步骤，这大大简化了导致NetBox服务器正常运行的安装步骤。NetBox背后的开发人员创建了运行NetBox所需的Docker镜像，并使用`docker-compose`文件描述了不同NetBox组件之间的整体交互，以建立NetBox服务器。所有NetBox设置说明，以及使用Docker容器构建和部署NetBox的Docker文件和`docker-compose`文件，都可以在[https://github.com/netbox-community/netbox-docker](https://github.com/netbox-community/netbox-docker)找到。
- en: After installing Docker and `docker-compose` on our Linux machine, we cloned
    the GitHub repository and edited the `docker-compose.yml` file to set the port
    that the NGINX web server will listen to on the host machine. Finally, we ran
    the `docker-compose pull` command to download all the Docker containers defined
    in the `docker-compose.yml` file and we ran `docker-compose `to start up all the
    Docker containers.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Linux机器上安装了Docker和`docker-compose`后，我们克隆了GitHub存储库，并编辑了`docker-compose.yml`文件，以设置NGINX
    Web服务器在主机上监听的端口。最后，我们运行了`docker-compose pull`命令，下载了`docker-compose.yml`文件中定义的所有Docker容器，并运行了`docker-compose`来启动所有Docker容器。
- en: Once all the Docker containers are downloaded and started, we can access NetBox
    at `https://<netbox-server-ip>/`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有Docker容器都被下载并启动，我们可以在`https://<netbox-server-ip>/`访问NetBox。
- en: 'This will take us to the following page:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带我们到以下页面：
- en: '![](assets/0f7e77e6-3ee4-4977-bff7-02aa70bd807d.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0f7e77e6-3ee4-4977-bff7-02aa70bd807d.png)'
- en: The default username is `admin` and the password is `admin`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 默认用户名是`admin`，密码是`admin`。
- en: There's more
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有更多
- en: 'To simplify the installation of NetBox, I have created an Ansible role within
    this chapter''s code to deploy NetBox. To use this role, we need to perform the
    following steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化NetBox的安装，我在本章的代码中创建了一个Ansible角色来部署NetBox。要使用这个角色，我们需要执行以下步骤：
- en: 'On the Ansible control machine, clone the following chapter code:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Ansible控制机上，克隆以下章节代码：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Update the `hosts` file with the correct IP address for your NetBox server:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用正确的IP地址更新`hosts`文件，用于您的NetBox服务器：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the `pb_deploy_netbox.yml` Ansible playbook:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`pb_deploy_netbox.yml` Ansible playbook：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: See also...
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅…
- en: For more information about how to install NetBox using Docker containers, go
    to **[https://github.com/netbox-community/netbox-docker](https://github.com/netbox-community/netbox-docker)**.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何使用Docker容器安装NetBox的更多信息，请访问**[https://github.com/netbox-community/netbox-docker](https://github.com/netbox-community/netbox-docker)**。
- en: Integrating NetBox with Ansible
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将NetBox与Ansible集成
- en: In this recipe, we will outline how to integrate Ansible and NetBox via the
    NetBox API. This integration is mandatory as it will allow us to populate the
    NetBox database through Ansible playbooks, as well as to use NetBox as our dynamic
    inventory source to create an Ansible inventory in later recipes.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将概述如何通过NetBox API集成Ansible和NetBox。这种集成是强制性的，因为它将允许我们通过Ansible playbook填充NetBox数据库，并且在后续的步骤中使用NetBox作为我们的动态清单源来创建Ansible清单。
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: NetBox should be installed as outlined in the previous recipe, and the IP needs
    to stretch between the Ansible control machine and the NetBox server. Ansible
    will communicate with NetBox over port 80, so this port needs to be open on the
    NetBox server.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: NetBox应按照上一个步骤中的说明进行安装，并且IP需要在Ansible控制机和NetBox服务器之间进行延伸。Ansible将通过端口80与NetBox通信，因此NetBox服务器上需要打开此端口。
- en: How to do it…
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'On the Ansible control machine, install the `pynetbox`Python package:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Ansible控制机上安装`pynetbox`Python包：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Log in to the NetBox server using the admin user details and click on the Admin
    tab to create a new user, as shown here:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用管理员用户详细信息登录到NetBox服务器，然后单击“管理”选项卡创建一个新用户，如下所示：
- en: '![](assets/7f6e7559-6279-49ad-bb11-da663cbb4705.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7f6e7559-6279-49ad-bb11-da663cbb4705.png)'
- en: 'Create a new user and set its username and password:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新用户并设置其用户名和密码：
- en: '![](assets/fcfe90ed-95e5-4a44-99bb-fa4886ddbf7b.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fcfe90ed-95e5-4a44-99bb-fa4886ddbf7b.png)'
- en: 'Assign superuser privileges to this new user so that you will be able to write
    to the NetBox **Database** (**DB**):'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个新用户分配超级用户权限，以便您可以写入NetBox数据库：
- en: '![](assets/c443e44b-2204-4f9d-942b-d691791f68c8.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c443e44b-2204-4f9d-942b-d691791f68c8.png)'
- en: 'Create a new token for this new user:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个新用户创建一个新的令牌：
- en: '![](assets/9c284d6e-5684-476a-b1e5-aecc610de60b.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9c284d6e-5684-476a-b1e5-aecc610de60b.png)'
- en: 'Go to the Tokens screen to locate the new token that we created for the Ansible
    user:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到令牌屏幕，找到我们为Ansible用户创建的新令牌：
- en: '![](assets/5bc9af19-a48c-4475-8fa2-e16fc0a9c905.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5bc9af19-a48c-4475-8fa2-e16fc0a9c905.png)'
- en: 'In the `ch11_netbox` project directory, create our `hosts` Ansible inventory
    file, as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ch11_netbox`项目目录中，创建我们的`hosts`Ansible清单文件，如下所示：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create the `group_vars` folder and the `all.yml` file and populate the file,
    as follows:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`group_vars`文件夹和`all.yml`文件，并填充文件，如下所示：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works…
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何工作...
- en: In this recipe, we are setting up the integration between Ansible and NetBox.
    In order to start using Ansible modules to populate the NetBox DB, we installed
    the `pynetbox` Python module. This module is mandatory for all the NetBox Ansible
    modules that we are going to use in this chapter.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们正在设置Ansible和NetBox之间的集成。为了开始使用Ansible模块填充NetBox数据库，我们安装了`pynetbox`Python模块。这个模块对于我们在本章中将要使用的所有NetBox
    Ansible模块是必需的。
- en: On the NetBox site, we started by creating a new user with complete admin rights.
    This granted the user the full privileges to create, edit, or delete any object
    within the NetBox DB. Then, we created a token, which will be used to authenticate
    all the API requests from Ansible to NetBox.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在NetBox网站上，我们首先创建了一个具有完整管理员权限的新用户。这授予了用户在NetBox数据库中创建、编辑或删除任何对象的全部权限。然后，我们创建了一个令牌，该令牌将用于验证来自Ansible到NetBox的所有API请求。
- en: Finally, we created our Ansible inventory and declared two parameters in our
    Ansible variables,`netbox_url` and `netbox_token`, to hold the API endpoint and
    the token for the Ansible user on NetBox.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建了我们的Ansible清单，并在Ansible变量中声明了两个参数，`netbox_url`和`netbox_token`，用于保存API端点和NetBox上Ansible用户的令牌。
- en: See also...
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: For more information about the `pynetbox` Python library that interacts with
    NetBox, go to [https://pynetbox.readthedocs.io/en/latest/](https://pynetbox.readthedocs.io/en/latest/).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有关与NetBox交互的`pynetbox`Python库的更多信息，请访问[https://pynetbox.readthedocs.io/en/latest/](https://pynetbox.readthedocs.io/en/latest/)。
- en: Populating sites in NetBox
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在NetBox中填充站点
- en: In this recipe, we will outline how to create sites in NetBox. Sites are a logical
    construct within NetBox that allow us to group our infrastructure based on their
    physical location. We need to define our sites before we can start declaring our
    devices and place them in these sites.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将概述如何在NetBox中创建站点。站点是NetBox中的逻辑构造，允许我们根据它们的物理位置对基础设施进行分组。在我们开始声明设备并将它们放置在这些站点之前，我们需要定义我们的站点。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Ensure integration between Ansible and NetBox is in place, as outlined in the
    previous recipe.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 确保按照上一个步骤中的说明，建立Ansible和NetBox之间的集成。
- en: How to do it…
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Update the `group_vars/all.yml` file with the following data about our physical
    sites:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`group_vars/all.yml`文件，包含关于我们物理站点的以下数据：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Create a new `roles` directory under `ch11_netbox`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ch11_netbox`下创建一个新的`roles`目录。
- en: 'Create a new Ansible role, called `build_netbox_db`, and populate the `tasks/main.yml`
    file, as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`build_netbox_db`的新的Ansible角色，并填充`tasks/main.yml`文件，如下所示：
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Update the `defaults/main.yml` file with the following data:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`defaults/main.yml`文件，添加以下数据：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create a new playbook, called `pb_build_netbox_db.yml`, with the following
    contents:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`pb_build_netbox_db.yml`的新playbook，并添加以下内容：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works…
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we began by populating the sites in our sample network and defining
    the `sites` data structure, which describes the physical locations of our data
    centers in the `all.yml` file under `group_vars`. We created an Ansible role in
    order to populate the NetBox database and the first task we performed within this
    role was to use the `netbox_site` module to create all the sites within our network.
    We looped across all the sites defined in the `sites` data structure and pushed
    the data to NetBox using the `netbox_site` module.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们首先填充了样本网络中的站点，并在`group_vars`下的`all.yml`文件中定义了`sites`数据结构，描述了我们数据中心的物理位置。我们创建了一个Ansible角色，以便填充NetBox数据库，并且我们在这个角色中执行的第一个任务是使用`netbox_site`模块在我们的网络中创建所有站点。我们循环遍历了`sites`数据结构中定义的所有站点，并使用`netbox_site`模块将数据推送到NetBox。
- en: We created a new playbook, which will be our master playbook, to populate the
    contents of our network inventory into NetBox and we referenced the role that
    we created in order to start executing all the tasks within this role.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个新的playbook，这将是我们的主playbook，用来将我们的网络库存内容填充到NetBox中，并引用了我们创建的角色，以便开始执行该角色内的所有任务。
- en: 'Once we run this playbook, the sites are populated in NetBox, as shown here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们运行这个playbook，站点就会在NetBox中填充，如下所示：
- en: '![](assets/99aeb2d2-d2ad-46af-b01d-e057e2585d14.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/99aeb2d2-d2ad-46af-b01d-e057e2585d14.png)'
- en: See also...
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅…
- en: For more information about the `netbox_site` module, go to [https://docs.ansible.com/ansible/latest/modules/netbox_site_module.html](https://docs.ansible.com/ansible/latest/modules/netbox_site_module.html).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`netbox_site`模块的更多信息，请访问[https://docs.ansible.com/ansible/latest/modules/netbox_site_module.html](https://docs.ansible.com/ansible/latest/modules/netbox_site_module.html)。
- en: Populating devices in NetBox
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在NetBox中填充设备
- en: In this recipe, we will outline how to create and populate network devices in
    NetBox. This will include declaring the device model and manufacturer, along with
    their role in our network. This will help us to build an accurate inventory of
    our network infrastructure, which we can use later on in the last recipe of this
    chapter to build a dynamic inventory for Ansible using NetBox.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将概述如何在NetBox中创建和填充网络设备。这将包括声明设备型号和制造商，以及它们在我们网络中的角色。这将帮助我们建立我们网络基础设施的准确清单，我们可以在本章的最后一个配方中使用NetBox构建Ansible的动态清单。
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible and NetBox integration should be in place and the sites should be
    defined and populated in NetBox, as outlined in the previous recipe. This is critical
    since when we start to populate devices in NetBox, we need to tie them to an existing
    site.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible和NetBox的集成应该已经就位，并且站点应该在NetBox中定义和填充，如前一篇中所述。这是至关重要的，因为当我们开始在NetBox中填充设备时，我们需要将它们与现有站点联系起来。
- en: How to do it...
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Update the `group_vars/all.yml` file with the `devices` information, as follows:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`group_vars/all.yml`文件，包括`devices`信息，如下所示：
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create the `group_vars/leaf.yml` and `group_vars/spine.yml` files, then update
    them with the following information:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`group_vars/leaf.yml`和`group_vars/spine.yml`文件，然后用以下信息更新它们：
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a new task to create the manufacturer for all of the devices in our
    inventory under the `tasks/create_device_vendors.yml` file, as shown here:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新任务，为我们库存中的所有设备创建制造商，放在`tasks/create_device_vendors.yml`文件中，如下所示：
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Update the `tasks/main.yml` file to include the `create_device_vendors.yml `file,
    as follows:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`tasks/main.yml`文件，包括`create_device_vendors.yml`文件，如下所示：
- en: '[PRE17]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a new task to create all the device models for all of the network devices
    in our inventory under the `tasks/create_device_types.yml` file, as follows:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新任务，为我们库存中的所有网络设备创建所有设备型号，放在`tasks/create_device_types.yml`文件中，如下所示：
- en: '[PRE18]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Update the `tasks/main.yml` file to include the `create_device_types.yml`files,
    as follows:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`tasks/main.yml`文件，包括`create_device_types.yml`文件，如下所示：
- en: '[PRE19]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a new task to create all the device roles for all of the network devices
    in our inventory under the `tasks/create_device_roles.yml` file, as follows:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新任务，为我们库存中的所有网络设备创建所有设备角色，放在`tasks/create_device_roles.yml`文件中，如下所示：
- en: '[PRE20]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Update the `tasks/main.yml` file to include the `create_device_roles.yml `file,
    as follows:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`tasks/main.yml`文件，包括`create_device_roles.yml`文件，如下所示：
- en: '[PRE21]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a new task to populate all of the devices in our inventory under the
    `tasks/create_device.yml` file, as follows:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新任务，将我们库存中的所有设备填充到`tasks/create_device.yml`文件中，如下所示：
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Update the `tasks/main.yml` file to include the `create_device.yml `file, as
    follows:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`tasks/main.yml`文件，包括`create_device.yml`文件，如下所示：
- en: '[PRE23]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works…
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In order to populate our network devices in NetBox, we first need to populate
    the following parameters related to the devices in NetBox:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在NetBox中填充我们的网络设备，我们首先需要填充与NetBox中设备相关的以下参数：
- en: All the manufacturers for all of our network devices
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们所有网络设备的所有制造商
- en: All the device models for our network equipment
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的网络设备的所有设备型号
- en: All the device roles that will be assigned to each network device
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将分配给每个网络设备的所有设备角色
- en: 'There is no pre-built module in Ansible that will populate all of this information
    and build these objects in NetBox. So, in order to populate this information in
    NetBox, we need to use the `URI` module, which allows us to trigger REST API calls
    to the correct API endpoint responsible for each of these objects. To carry out
    all of these tasks, follow these steps:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible中没有预先构建的模块可以填充所有这些信息并在NetBox中构建这些对象。因此，为了在NetBox中填充这些信息，我们需要使用`URI`模块，它允许我们触发REST
    API调用到每个对象的正确API端点。要执行所有这些任务，请按照以下步骤进行：
- en: First, query the API endpoint using the `GET` method to get a matching object
    in the NetBox DB.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用`GET`方法查询API端点，以在NetBox DB中获取匹配的对象。
- en: If an object is not present, we can create one by using a `POST REST` call and
    supplying the necessary data.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果对象不存在，我们可以使用`POST REST`调用并提供必要的数据来创建一个。
- en: If an object is already present, we can skip the previous step.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果对象已经存在，我们可以跳过前面的步骤。
- en: 'Using the previous approach, we are simulating the idempotent nature of Ansible
    modules. When we run our playbook, we can see that all the device types have been
    populated in NetBox:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用先前的方法，我们正在模拟Ansible模块的幂等性特性。当我们运行我们的playbook时，我们可以看到所有的设备类型都已经填充到了NetBox中：
- en: '![](assets/6d59398f-dd9a-4760-8272-ef9945bcde8e.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6d59398f-dd9a-4760-8272-ef9945bcde8e.png)'
- en: 'Also, all the device roles for our equipment are populated, as shown here:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们设备的所有设备角色都已经填充，如下所示：
- en: '![](assets/9c53cdd7-e87b-4b70-9470-89f928f83fb5.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9c53cdd7-e87b-4b70-9470-89f928f83fb5.png)'
- en: 'Once we have built all the objects required to define a device in NetBox (such
    as the device role and device types), we can use the `netbox_device` Ansible built-in
    module to create all of the devices in our Ansible inventory. The following screenshot
    outlines all of the devices that have been correctly populated in the NetBox DB:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们已经构建了在NetBox中定义设备所需的所有对象（如设备角色和设备类型），我们可以使用`netbox_device` Ansible内置模块在我们的Ansible库存中创建所有设备。以下截图概述了在NetBox数据库中正确填充的所有设备：
- en: '![](assets/8a54fe36-6513-4e59-b76c-5ef9ef9f90db.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8a54fe36-6513-4e59-b76c-5ef9ef9f90db.png)'
- en: In this recipe, we used the `URI` module to trigger API calls to the NetBox
    API in order to create objects within its DB. In order to understand more about
    what APIs are available and which parameters need to be passed in each API call,
    we need to check the API documentation for NetBox. The documentation for the API
    is contained within the NetBox installation and can be accessed at `http:///api/docs/`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们使用`URI`模块触发API调用到NetBox API，以便在其数据库中创建对象。为了更多了解可用的API以及每个API调用需要传递哪些参数，我们需要查看NetBox的API文档。API的文档包含在NetBox安装中，可以通过`http:///api/docs/`访问。
- en: See also...
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: For more information about the NetBox API, go to[ https://netbox.readthedocs.io/en/stable/api/overview/](https://netbox.readthedocs.io/en/stable/api/overview/).
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关NetBox API的更多信息，请访问[https://netbox.readthedocs.io/en/stable/api/overview/](https://netbox.readthedocs.io/en/stable/api/overview/)。
- en: For more information about the Ansible module to create devices on NetBox, go
    to [https://docs.ansible.com/ansible/latest/modules/netbox_device_module.html](https://docs.ansible.com/ansible/latest/modules/netbox_device_module.html).
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关在NetBox上创建设备的Ansible模块的更多信息，请访问[https://docs.ansible.com/ansible/latest/modules/netbox_device_module.html](https://docs.ansible.com/ansible/latest/modules/netbox_device_module.html)。
- en: Populating interfaces in NetBox
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在NetBox中填充接口
- en: In this recipe, we will outline how to populate interfaces on network devices
    in NetBox. This provides us with a complete inventory for our devices and will
    allow us to assign IP addresses for each interface on our network device, as well
    as to model the network links within our network.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将概述如何在NetBox中填充网络设备的接口。这为我们提供了设备的完整清单，并将允许我们为网络设备上的每个接口分配IP地址，以及对我们的网络中的网络链接进行建模。
- en: Getting ready
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to create the network interfaces, the devices need to already be created,
    as outlined in the previous recipe.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建网络接口，设备需要已经在之前的教程中创建好。
- en: How to do it…
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Update the `group_vars/all.yml ` file with the point-to-point links within
    our network fabric in each data center, as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`group_vars/all.yml`文件，包括每个数据中心网络布局中的点对点链接，如下所示：
- en: '[PRE24]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a new task to create all the interfaces for all of the network devices
    in our inventory under the `tasks/create_device_intf.yml` file, as follows:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新任务来为我们库存中所有网络设备创建所有接口，在`tasks/create_device_intf.yml`文件中进行，如下所示：
- en: '[PRE25]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Update the `tasks/main.yml` file to include the `create_device_intfs.yml ` file,
    as follows:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`tasks/main.yml`文件，包括`create_device_intfs.yml`文件，如下所示：
- en: '[PRE26]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works…
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In order to populate all the point-to-point interfaces in our data center fabric,
    we first created the `p2p_ip` data structure, which holds all the parameters needed
    to model these point-to-point links. We then used the `netbox_interface` module
    to create all of these links in NetBox. Using the same module and following the
    exact same procedures, we can model the management (out-of-band management) and
    the loopback interface on our network devices.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为了填充我们数据中心布局中的所有点对点接口，我们首先创建了`p2p_ip`数据结构，其中包含建模这些点对点链接所需的所有参数。然后我们使用`netbox_interface`模块在NetBox中创建了所有这些链接。使用相同的模块并遵循完全相同的流程，我们可以在网络设备上建模管理（带外管理）和环回接口。
- en: 'The following screenshot shows the interfaces on one of our devices in NetBox
    and how the interfaces are populated:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了NetBox中一个设备的接口以及接口的填充情况：
- en: '![](assets/d7b0e9b8-44af-49c5-bfcc-cd1f8487490a.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d7b0e9b8-44af-49c5-bfcc-cd1f8487490a.png)'
- en: See also...
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: For more information about the Ansible module used to create interfaces on NetBox,
    go to [https://docs.ansible.com/ansible/latest/modules/netbox_interface_module.html#netbox-interface-module](https://docs.ansible.com/ansible/latest/modules/netbox_interface_module.html#netbox-interface-module).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 有关用于在NetBox上创建接口的Ansible模块的更多信息，请访问[https://docs.ansible.com/ansible/latest/modules/netbox_interface_module.html#netbox-interface-module](https://docs.ansible.com/ansible/latest/modules/netbox_interface_module.html#netbox-interface-module)。
- en: Populating IP addresses in NetBox
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在NetBox中填充IP地址
- en: In this recipe, we will outline how to create IP addresses in NetBox and how
    to bind these addresses to the interfaces on each of our network devices.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将概述如何在NetBox中创建IP地址，以及如何将这些地址绑定到每个网络设备的接口上。
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The network interfaces on each device within our inventory need to be defined
    and populated in NetBox, as outlined in the previous recipe.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们库存中每个设备上的网络接口需要在NetBox中定义和填充，如前一篇文章所述。
- en: How to do it…
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Create a new task to create all the IP addresses attached to the network interfaces.
    This is carried out for all of the network devices in our inventory under the
    `tasks/create_device_intf_ip.yml` file, as follows:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新任务来创建所有连接到网络接口的IP地址。这是针对我们库存中所有网络设备在`tasks/create_device_intf_ip.yml`文件中进行的，如下所示：
- en: '[PRE27]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Update the `tasks/main.yml` file to include the `create_device_intf_ip.yml `file,
    as follows:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`tasks/main.yml`文件，包括`create_device_intf_ip.yml`文件，如下所示：
- en: '[PRE28]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works…
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In order to populate all the point-to-point IP addresses used on each data center
    fabric, we captured this information in the `p2p_ip` data structure, which holds
    all of the IP addresses assigned on each interface within our data center fabric.
    We used the `netbox_ip_address` module to loop across this data structure and
    populate all the IP addresses assigned to each interface on each device within
    our data center fabric. The same process is used for the management and loopback
    interfaces.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 为了填充数据中心布线中使用的所有点对点IP地址，我们在`p2p_ip`数据结构中捕获了这些信息，该数据结构包含了我们数据中心布线中每个接口上分配的所有IP地址。我们使用`netbox_ip_address`模块循环遍历这个数据结构，并填充数据中心布线中每个设备上每个接口分配的所有IP地址。管理和环回接口也是同样的过程。
- en: 'The following screenshot shows the IP addresses assigned to the interfaces
    for one of our devices (dc1-leaf01):'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了我们的设备（dc1-leaf01）中接口分配的IP地址：
- en: '![](assets/1a6c4c89-c37e-401c-88e7-2e628ee8c985.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1a6c4c89-c37e-401c-88e7-2e628ee8c985.png)'
- en: See also...
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: For more information about the Ansible module used to create IP addresses on
    NetBox, go to [https://docs.ansible.com/ansible/latest/modules/netbox_ip_address_module.html#netbox-ip-address-module](https://docs.ansible.com/ansible/latest/modules/netbox_ip_address_module.html#netbox-ip-address-module).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 有关用于在NetBox上创建IP地址的Ansible模块的更多信息，请访问[https://docs.ansible.com/ansible/latest/modules/netbox_ip_address_module.html#netbox-ip-address-module](https://docs.ansible.com/ansible/latest/modules/netbox_ip_address_module.html#netbox-ip-address-module)。
- en: Populating IP prefixes in NetBox
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在NetBox中填充IP前缀
- en: In this recipe, we will look at how to create IP prefixes in NetBox. This allows
    us to utilize NetBox as our IPAM solution to manage IP address assignments within
    our network.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将看看如何在NetBox中创建IP前缀。这使我们能够利用NetBox作为我们的IPAM解决方案，管理网络中的IP地址分配。
- en: Getting ready
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: No specific requirements are needed to be able to populate IP subnets or prefixes
    in NetBox, as long as we don't bind these prefixes to a specific site. If we bind
    some subnets to a specific site, then these sites need to be defined in NetBox
    prior to this assignment.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在填充IP子网或前缀到NetBox时，不需要特定的要求，只要我们不将这些前缀绑定到特定站点。如果我们将一些子网绑定到特定站点，那么这些站点需要在分配之前在NetBox中定义。
- en: How to do it…
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Update the `group_vars/all.yml` file with the IP prefix information, as follows:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`group_vars/all.yml`文件，包括IP前缀信息，如下：
- en: '[PRE29]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Update the `tasks/main.yml` file in our role definition to include the following
    task:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新我们角色定义中的`tasks/main.yml`文件，包括以下任务：
- en: '[PRE30]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works…
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We defined our subnets in the `group_vars/all.yml` file under the `subnets`
    data structure and then used the `netbox_prefix` module to loop over this data
    structure and populate the prefixes in NetBox.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`group_vars/all.yml`文件中定义了我们的子网，位于`subnets`数据结构下，然后使用`netbox_prefix`模块循环遍历这个数据结构，并在NetBox中填充前缀。
- en: 'The following screenshot shows the populated prefixes within NetBox and their
    respective utilization:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了NetBox中填充的前缀及其各自的利用率：
- en: '![](assets/7478c453-1a0e-4cad-a377-5736bd62b923.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7478c453-1a0e-4cad-a377-5736bd62b923.png)'
- en: See also...
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: For more information about the Ansible module used to create IP prefixes on
    NetBox, go to [https://docs.ansible.com/ansible/latest/modules/netbox_prefix_module.html#netbox-prefix-module](https://docs.ansible.com/ansible/latest/modules/netbox_prefix_module.html#netbox-prefix-module).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 有关用于在NetBox上创建IP前缀的Ansible模块的更多信息，请访问[https://docs.ansible.com/ansible/latest/modules/netbox_prefix_module.html#netbox-prefix-module](https://docs.ansible.com/ansible/latest/modules/netbox_prefix_module.html#netbox-prefix-module)。
- en: Using NetBox as a dynamic inventory source for Ansible
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将NetBox用作Ansible的动态清单来源
- en: In this recipe, we will outline how to use NetBox as a dynamic inventory source.
    With this approach, NetBox will have the inventory for our network infrastructure
    and we will use the different groupings available (such as sites, device roles,
    and so on) to build a dynamic inventory for Ansible and group them according to
    NetBox.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将概述如何将NetBox用作动态清单来源。通过这种方法，NetBox将拥有我们网络基础设施的清单，我们将使用可用的不同分组（如站点、设备角色等）来为Ansible构建一个动态清单，并根据NetBox对它们进行分组。
- en: Getting ready
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Integration between NetBox and Ansible needs to be in place, as outlined in
    the previous recipes.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: NetBox和Ansible之间的集成需要按照前面的示例中所述的方式进行。
- en: How to do it…
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: In your main directory, create a new folder called `netbox_dynamic_inventory`.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的主目录中，创建一个名为`netbox_dynamic_inventory`的新文件夹。
- en: 'In this new directory, create a new YAML file, called `netbox_inventory_source.yml`,
    with the following content:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个新目录中，创建一个名为`netbox_inventory_source.yml`的新的YAML文件，内容如下：
- en: '[PRE31]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a new playbook, called `pb_create_report.yml`, with the following content:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`pb_create_report.yml`的新playbook，内容如下：
- en: '[PRE32]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works…
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In all of the examples and recipes that we have outlined in this book so far,
    we have used a static inventory file (in most cases `hosts`) where we defined
    our inventory, which Ansible will parse before executing our playbooks. In this
    recipe, we will use a different inventory source: a dynamic inventory. In this
    situation, we don''t have a static file that holds our inventory, but we will
    build our inventory dynamically when we run our playbooks at execution time. All
    of our inventories, in this example, are maintained in NetBox and we have used
    NetBox as our inventory source.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本书中我们所概述的所有示例和示例中，我们都使用了一个静态清单文件（在大多数情况下是`hosts`），在那里我们定义了我们的清单，Ansible在执行我们的playbook之前会解析它。在这个示例中，我们将使用不同的清单来源：动态清单。在这种情况下，我们没有一个保存我们清单的静态文件，但是我们将在执行时动态构建我们的清单。在这个示例中，我们的所有清单都在NetBox中维护，我们已经将NetBox用作我们的清单来源。
- en: 'For Ansible to use a dynamic inventory source, a plugin must be in place to
    talk to this inventory source in order to retrieve our inventory and any variables
    associated with it. Ansible, as of version 2.9, has introduced NetBox as a plugin
    that can be used as an inventory source. In order to use this plugin, we need
    to define a YAML file that outlines the different parameters needed by Ansible
    to communicate with the NetBox API. The mandatory parameters are as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Ansible来说，要使用动态清单源，必须有一个插件来与清单源通信，以检索我们的清单和与之相关的任何变量。从版本2.9开始，Ansible引入了NetBox作为可以用作清单源的插件。为了使用这个插件，我们需要定义一个YAML文件，概述Ansible与NetBox
    API通信所需的不同参数。强制性参数如下：
- en: 'The **Plugin** name: In our case, `NetBox`'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插件**名称：在我们的情况下，是`NetBox`'
- en: '`**Api_endpoint**`: The API endpoint for our NetBox server'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**Api_endpoint**`：我们的NetBox服务器的API端点'
- en: 'The **Token**: The authentication token that we have created to establish communication
    between Ansible and our NetBox server'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**令牌**：我们创建的用于在Ansible和我们的NetBox服务器之间建立通信的身份验证令牌'
- en: In the YAML declaration file, we can specify how we will group our inventory
    that is coming from NetBox. We can use the `group_by` attribute to outline the
    parameters that we will use to group our infrastructure. In our case, we are using
    `device_roles` and `sites` to group our infrastructure.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在YAML声明文件中，我们可以指定如何对来自NetBox的清单进行分组。我们可以使用`group_by`属性来概述我们将用于分组基础设施的参数。在我们的情况下，我们使用`device_roles`和`sites`来分组我们的基础设施。
- en: There's more
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多
- en: 'We can test our dynamic inventory by executing the following command to see
    how Ansible generates the inventory:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行以下命令来测试我们的动态清单，以查看Ansible如何生成清单：
- en: '[PRE33]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The following is a snippet of the output for the preceding command. It outlines
    the host variables that were retrieved from NetBox for a single device:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的输出片段。它概述了从NetBox检索的单个设备的主机变量：
- en: '[PRE34]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The following snippet shows the groups that Ansible built based on the grouping
    from NetBox:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了Ansible基于NetBox的分组构建的组：
- en: '[PRE35]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: We have created a new playbook to test the integration between Ansible and NetBox
    and ensured that we can use the data retrieved from NetBox as a dynamic inventory
    source. Using our new playbook, we can create a simple report for each device
    in the NetBox dynamic inventory along with some of the parameters sent from NetBox.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个新的剧本来测试Ansible和NetBox之间的集成，并确保我们可以使用从NetBox检索的数据作为动态清单源。使用我们的新剧本，我们可以为NetBox动态清单中的每个设备创建一个简单的报告，以及从NetBox发送的一些参数。
- en: 'When we run the playbook, we get the following report:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行剧本时，我们会得到以下报告：
- en: '[PRE36]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: See also...
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅…
- en: For more information about the NetBox plugin, go to [https://docs.ansible.com/ansible/latest/plugins/inventory/netbox.html](https://docs.ansible.com/ansible/latest/plugins/inventory/netbox.html).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 有关NetBox插件的更多信息，请访问[https://docs.ansible.com/ansible/latest/plugins/inventory/netbox.html](https://docs.ansible.com/ansible/latest/plugins/inventory/netbox.html)。
- en: To learn more about the Ansible dynamic inventory, go to [https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html](https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关Ansible动态清单的更多信息，请访问[https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html](https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html)。
- en: Generating a configuration using NetBox
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NetBox生成配置
- en: In this recipe, we will outline how to generate a configuration and push the
    configuration to network devices using the data retrieved from NetBox.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将概述如何使用从NetBox检索的数据生成配置并将配置推送到网络设备。
- en: Getting ready
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will continue to use NetBox as our dynamic inventory source,
    so all of the configurations outlined in the previous recipe need to be implemented.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将继续使用NetBox作为我们的动态清单源，因此需要实现前一个示例中概述的所有配置。
- en: How to do it…
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Under the `netbox_dynamic_inventory` directory, create the `netbox_data.yml`
    file with the following content:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`netbox_dynamic_inventory`目录下，创建`netbox_data.yml`文件，内容如下：
- en: '[PRE37]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create the `pb_build_config.yml `playbook with an initial task to read the
    `netbox_data.yml` file, as follows:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`pb_build_config.yml`剧本，其中包含一个初始任务，用于读取`netbox_data.yml`文件，如下所示：
- en: '[PRE38]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Update the `pb_build_config.yml` playbook to include a task to query NetBox
    for all interfaces in its DB for the current device:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`pb_build_config.yml`剧本，包括一个任务，查询NetBox当前设备的数据库中的所有接口：
- en: '[PRE39]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Update the playbook with the following task to push the configuration to the
    device:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新剧本，将配置推送到设备：
- en: '[PRE40]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: How it works…
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'In order to run our playbook, we need to use the NetBox dynamic inventory script
    as our inventory source and execute the playbook, as follows:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行我们的剧本，我们需要使用NetBox动态清单脚本作为我们的清单源，并执行剧本，如下所示：
- en: '[PRE41]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In this recipe, we will use NetBox as our source of truth to both construct
    our inventory as well as to retrieve interfaces on a given device. We will use
    a `GET API` call to the interface endpoints on NetBox and filter this API call
    by specifying only the interfaces for this specific device. The API call to achieve
    this is `api/dcim/interfaces/?device=<deivce-name>/`.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用NetBox作为我们的真相来源，用于构建我们的清单以及检索给定设备上的接口。我们将使用`GET API`调用NetBox上的接口端点，并通过指定仅针对此特定设备的接口来过滤此API调用。实现这一点的API调用是`api/dcim/interfaces/?device=<deivce-name>/`。
- en: 'The following snippet shows the response we get from NetBox:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段显示了我们从NetBox获取的响应：
- en: '[PRE42]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We will use the data retrieved from the API to configure the description on
    all the ports on all the devices in our network, as per the data in the NetBox
    DB. In this case, we will use `eos_config` to push this data to our Arista EOS
    boxes. We can loop over the data returned from NetBox, which is stored in `netbox_interfaces.json.results`,
    and extract the interface name and description from this data. We can also push
    this information using the `eos_config` module to set up the correct description
    on all the devices in our network.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用从API检索到的数据来配置网络中所有设备的所有端口的描述，根据NetBox数据库中的数据。在这种情况下，我们将使用`eos_config`将这些数据推送到我们的Arista
    EOS设备上。我们可以循环遍历从NetBox返回的数据，这些数据存储在`netbox_interfaces.json.results`中，并从中提取接口名称和描述。我们还可以使用`eos_config`模块推送这些信息，以在网络中的所有设备上设置正确的描述。
