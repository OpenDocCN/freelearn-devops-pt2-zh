- en: '7: Other important Kubernetes stuff'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7：其他重要的Kubernetes内容
- en: There’s a lot more to Kubernetes than can fit in a book. If we tried, we’d fill
    volumes!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes还有很多内容无法在一本书中涵盖。如果我们尝试，将填满整整一套书！
- en: 'In this chapter, we’ll briefly mention the following areas of Kubernetes that
    will take you to the next level:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要提及Kubernetes的以下领域，这将带您进入下一个级别：
- en: DaemonSets
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DaemonSets
- en: StatefulSets
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StatefulSets
- en: Jobs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作业
- en: CronJobs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定时作业
- en: Autoscaling
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动缩放
- en: RBAC
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RBAC
- en: Storage
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储
- en: Helm
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Helm
- en: Many of these will become their own chapters in future editions of the book.
    For now, let’s have a taste of each.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 其中许多内容将成为未来版本书籍中的独立章节。现在，让我们先尝尝每个领域。
- en: Obviously there’s even more than this, but like we already said - it could fill
    volumes!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，还有更多内容，但就像我们已经说过的 - 它可以填满整整一套书！
- en: DaemonSets
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DaemonSets
- en: DaemonSets are a resource in the `apps` API group, and they manage Pods. Their
    use-case is when you need a replica of a particular Pod running on every node
    in the cluster. Some examples include; *monitoring Pods* and *logging Pods* that
    you need to run on every node in the cluster.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: DaemonSets是`apps` API组中的一种资源，它们管理Pods。它们的用例是当您需要在集群中的每个节点上运行特定Pod的副本时。一些例子包括；*监控Pods*和*日志Pods*，您需要在集群中的每个节点上运行它们。
- en: As you’d expect, it implements a controller and a watch loop. This means that
    you can dynamically add and remove nodes from the cluster, and the DaemonSet will
    ensure you always have one Pod replica on each node.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所期望的，它实现了一个控制器和一个监视循环。这意味着您可以动态地向集群中添加和删除节点，而DaemonSet将确保您始终在每个节点上有一个Pod副本。
- en: The following command shows two DaemonSets in the `kube-system` namespace that
    exist on a newly installed 3-node cluster.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令显示了`kube-system`命名空间中存在的两个DaemonSets，在新安装的3节点集群上。
- en: The output is trimmed so that it fits the page.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 输出被修剪以适应页面。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice that *desired state* for each DaemonSet is 3 replicas. You do not need
    to specify this in the DaemonSet YAML file as it is automatically implied based
    on the number of nodes in the cluster.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个DaemonSet的*期望状态*为3个副本。您不需要在DaemonSet YAML文件中指定这一点，因为它是根据集群中的节点数自动暗示的。
- en: DaemonSets are stable in the `apps/v1` API group and can be managed with the
    usual `kubectl get` , and `kubectl describe` commands etc. If you already understand
    Pods and Deployments, you will find DaemonSets really simple.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: DaemonSets在`apps/v1` API组中是稳定的，并且可以通过通常的`kubectl get`和`kubectl describe`命令等进行管理。如果您已经了解Pods和部署，您会发现DaemonSets非常简单。
- en: StatefulSets
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: StatefulSets
- en: StatefulSets are a stable resource in the `apps/v1` API group. Their use-case
    is stateful Pods - i.e. Pods that are not intended to be ephemeral.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: StatefulSets是`apps/v1` API组中的稳定资源。它们的用例是有状态的Pods - 即不打算是短暂的Pods。
- en: Stateful components of a microservices application are usually the hardest to
    implement, and platforms like Kubernetes have been somewhat slow to implement
    features to handle them. StatefulSets are step towards improving this.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务应用程序的有状态组件通常是最难实现的，而像Kubernetes这样的平台在处理它们的功能方面进展缓慢。StatefulSets是改进这一点的一步。
- en: It’s useful to think of them as being like Deployments. For example, we define
    them in a YAML file that we `POST` to the API server as desired state. A controller
    implements the work on the cluster and a background watch loop makes sure current
    state matches desired state. However, there is one major difference between a
    StatefulSet and a Deployment - **Pods deployed via StatefulSet are not interchangeable**
    . This means that when a Pod managed by a StatefulSet fails, it is replaced by
    another Pod with the same ID and IP etc.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将它们视为类似于部署是有用的。例如，我们在YAML文件中定义它们，然后将其作为期望状态`POST`到API服务器。控制器在集群上实现工作，后台监视循环确保当前状态与期望状态匹配。然而，StatefulSet和Deployment之间有一个主要区别
    - **通过StatefulSet部署的Pod是不可互换的**。这意味着当StatefulSet管理的Pod失败时，会被具有相同ID和IP等的另一个Pod替换。
- en: 'Potential use-cases for StatefulSets are any services in your application that
    maintain state. These can include:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: StatefulSets的潜在用例是应用程序中维护状态的任何服务。这些可以包括：
- en: Pods that require access to specific named volumes
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要访问特定命名卷的Pod
- en: Pods that require a persistent network identity
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要持久网络标识的Pod
- en: Where Pods must come online in a particular order
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须按特定顺序上线Pod的情况
- en: A StatefulSet guarantees all of these will be maintained across Pod failures
    and subsequent rescheduling operations.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: StatefulSet保证所有这些在Pod失败和后续重新调度操作中都会被维护。
- en: Due to the more complex nature of stateful applications, StatefulSets can be
    complex to configure.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于有状态应用程序的更复杂性，StatefulSets的配置可能会很复杂。
- en: Jobs and CronJobs
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作业和CronJobs
- en: Jobs, a.k.a. batch jobs, are stable resources in the `batch/v1` API group. They
    are useful when you need to run a specific number of a particular Pod, and you
    need guarantees that they’ll all successfully complete.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 作业，又称批处理作业，是`batch/v1` API组中的稳定资源。当您需要运行特定数量的特定Pod，并且需要保证它们都能成功完成时，它们就会很有用。
- en: 'A couple of subtleties worth noting:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的一些微妙之处：
- en: Jobs don’t have the concept of desired state
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作业没有期望状态的概念
- en: Pods that are part of a Job are short-lived
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作业中的Pod是短暂的
- en: These two concepts separate *Jobs* from other objects like Deployments, DaemonSets,
    and StatefulSets. Whereas those objects keep a specified number of a certain Pod
    running indefinitely, *Jobs* manage a specified number of a certain Pod and make
    sure they complete and exit successfully.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个概念将*作业*与其他对象（如部署、守护进程集和StatefulSets）分开。而那些对象会持续运行指定数量的某个Pod，*作业*管理指定数量的某个Pod，并确保它们完成并成功退出。
- en: The *Job* object implements the usual controller and watch loop. If a Pod that
    the *Job* object spawns fails, the *Job* will create another in its place. The
    *Job* itself does not complete until the required number of Pods successfully
    complete.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*作业*对象实现了通常的控制器和监视循环。如果*作业*对象生成的Pod失败，*作业*将在其位置创建另一个。*作业*本身直到所需数量的Pod成功完成才会完成。'
- en: Use-cases include typical batch-type workloads.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 用例包括典型的批处理工作负载。
- en: Interestingly, *Jobs* can be useful even if you only need to run a single Pod
    through to completion. Basically, any time you need to run one or more short-lived
    Pods, and you need to guarantee they complete successfully, the *Job* object is
    your friend!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，*作业*即使只需要运行一个Pod完成也是有用的。基本上，每当您需要运行一个或多个短暂的Pod，并且需要保证它们成功完成时，*作业*对象就是您的朋友！
- en: '*CronJobs* are just *Jobs* that run against a time-based schedule.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*CronJobs*只是根据时间表运行的*作业*。'
- en: Autoscaling
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自动缩放
- en: The Deployments chapter showed us how to manually scale the number of Pod replicas.
    However, manually scaling a set of Pods does not scale (excuse the pun). As an
    example, if demand on your application spikes at 4:20 a.m. it’s far from ideal
    if you need to page an operator who will then log-on to the cluster and manually
    increase the number of replicas. The same applies if you need to scale the number
    of nodes to your cluster.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 部署章节向我们展示了如何手动扩展Pod副本的数量。然而，手动扩展一组Pod并不会扩展（原谅双关语）。例如，如果您的应用程序在凌晨4:20需求激增，如果您需要呼叫操作员，然后登录到集群并手动增加副本数量，这远非理想。如果您需要扩展集群中的节点数量，情况也是一样。
- en: With these challenges in mind, Kubernetes offers several auto-scaling technologies.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些挑战，Kubernetes提供了几种自动扩展技术。
- en: The **Horizontal Pod Autoscaler (HPA)** dynamically increases and decreases
    the number of *Pods* in a Deployment based on demand.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**水平Pod自动缩放器（HPA）**根据需求动态增加和减少部署中的*Pod*数量。'
- en: The **Cluster Autoscaler (CA)** dynamically increases and decreases the number
    of *nodes* in your cluster based on demand.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**集群自动缩放器（CA）**根据需求动态增加和减少集群中的*节点*数量。'
- en: The **Vertical Pod Autoscaler (VPA)** attempts to right-size your Pods. Currently
    an *alpha* product.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**垂直Pod自动缩放器（VPA）**试图调整Pod的大小。目前是一个*alpha*产品。'
- en: Horizontal Pod Autoscaler (HPA)
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 水平Pod自动缩放器（HPA）
- en: HPA’s are stable resources in the `autoscaling/v1` API group, and their job
    is to scale the number of replicas in a Deployment based on observed CPU metrics.
    At the time of writing, the `v2` API is being worked on, and will allow scaling
    based on more than just CPU.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: HPA是`autoscaling/v1` API组中的稳定资源，它的工作是根据观察到的CPU指标来扩展部署中副本的数量。在撰写本文时，`v2` API正在开发中，将允许根据不仅仅是CPU来进行扩展。
- en: 'It works like this… You define a Deployment that makes use of Pod resource
    requests - where each container in the Pod requests an amount of CPU. You deploy
    this to the cluster. You also create an HPA object that targets that Deployment
    and has a rule that says something like: *if any Pod in this Deployment uses more
    than 60% of its requested CPU, spin up an additional Pod.*'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作方式是这样的……您定义一个使用Pod资源请求的部署 - 其中Pod中的每个容器请求一定数量的CPU。您将其部署到集群中。您还创建一个目标该部署的HPA对象，并设置一个规则，比如：*如果该部署中的任何Pod使用超过其请求的CPU的60%，则增加一个额外的Pod。*
- en: Once the Deployment and HPA are deployed to the cluster, scaling operations
    become automatic.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦部署和HPA部署到集群中，扩展操作就会变得自动化。
- en: One thing worth noting, is that HPAs update the `.spec.replicas` field of the
    targeted Deployment. While this update is recorded against the Deployment object
    in the cluster store, it can lead to situations where your copy of the Deployment
    YAML file in your external version control system gets out of sync with what is
    currently observed on the cluster.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的一点是，HPA会更新目标部署的`.spec.replicas`字段。虽然此更新记录在集群存储中的部署对象中，但可能会导致您在外部版本控制系统中的部署YAML文件与当前在集群中观察到的内容不同步的情况。
- en: Cluster Autoscaler (CA)
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 集群自动缩放器（CA）
- en: CAs are all about right-sizing your Kubernetes cluster. At a high-level, they
    increase and decrease the number of nodes in your cluster based on demand.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: CA的目标是调整您的Kubernetes集群大小。在高层次上，它们根据需求增加和减少集群中的节点数量。
- en: Getting under the covers a little… CAs periodically check Kubernetes for any
    Pods that are in the *pending* state due to lack of node resources. If it finds
    any, it adds nodes to the cluster so that the pending Pod(s) can be scheduled.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 稍微深入一点……CA定期检查Kubernetes中由于节点资源不足而处于*挂起*状态的Pod。如果发现任何问题，它会向集群添加节点，以便可以安排挂起的Pod。
- en: This requires integrations with your cluster’s underlying infrastructure platform
    - a public API that allows Kubernetes to add and remove nodes. The major cloud
    platforms implement Cluster Autoscaler with varying levels of support. Check your
    cloud provider documentation for the latest support info.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要与集群的基础基础设施平台集成 - 一个公共API，允许Kubernetes添加和删除节点。主要的云平台实现了具有不同支持级别的集群自动缩放器。查看您的云提供商文档以获取最新的支持信息。
- en: Role-based access control (RBAC)
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于角色的访问控制（RBAC）
- en: Kubernetes implements a least-privilege RBAC subsystem. When enabled, it locks
    down a cluster and allows you to grant permissions based on specific users and
    groups.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes实现了最小特权RBAC子系统。启用后，它会锁定集群，并允许您基于特定用户和组授予权限。
- en: 'The model is based on three major components:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型基于三个主要组件：
- en: Subjects
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主体
- en: Operations
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作
- en: Resources
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源
- en: '*Subjects* are users and groups, and these must be managed outside of Kubernetes.
    *Operations* are what the subject is allowed to do (create, list, delete etc.).
    *Resources* are objects on the cluster such as Pods. Put the three together, and
    you have an RBAC rule. For example, **Abi** (subject) is allowed to **create**
    (operation) **Pods** (resource).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*主体*是用户和组，它们必须在Kubernetes之外进行管理。*操作*是主体被允许执行的操作（创建、列出、删除等）。*资源*是集群上的对象，如Pod。将这三者结合起来，就形成了一个RBAC规则。例如，**Abi**（主体）被允许**创建**（操作）**Pods**（资源）。'
- en: RBAC has been stable (`v1` ) since Kubernetes 1.8 and leverages two objects
    that are defined in the `authorization.rbac.k8s.io` API group. The two objects
    are `Roles` and `RoleBindings` . The `Role` is where you define the resource and
    the operation that you want to allow, and the `RoleBinding` connects it with a
    subject.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 自Kubernetes 1.8以来，RBAC一直稳定（`v1`），并利用在`authorization.rbac.k8s.io` API组中定义的两个对象。这两个对象是`Roles`和`RoleBindings`。`Role`是您定义要允许的资源和操作的地方，而`RoleBinding`将其与主体连接起来。
- en: Storage
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存储
- en: Storage is a vital component of most production applications. Fortunately, Kubernetes
    has a comprehensive storage subsystem.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 存储是大多数生产应用程序的重要组成部分。幸运的是，Kubernetes拥有全面的存储子系统。
- en: The high-level architecture of the model comprises storage providers, a plug-in
    interface, and the Kubernetes persistent volume subsystem.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型的高级架构包括存储提供程序、插件接口和Kubernetes持久卷子系统。
- en: The storage providers are responsible for creating the actual storage, and can
    be things like enterprise-class storage arrays and cloud storage services. The
    preferred way to connect them to Kubernetes is via Container Storage Interface
    (CSI) plug-ins. The Kubernetes persistent volume subsystem exposes the storage
    to the cluster and provides ways for it to be consumed. See Figure 7.1.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 存储提供程序负责创建实际的存储，可以是企业级存储阵列和云存储服务等。将它们连接到Kubernetes的首选方式是通过容器存储接口（CSI）插件。Kubernetes持久卷子系统将存储暴露给集群，并提供了消费方式。参见图7.1。
- en: '![Figure 7.1](Image00048.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1](Image00048.jpg)'
- en: Figure 7.1
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1
- en: Examples of storage providers include; enterprise-class storage arrays such
    as EMC and NetApp, as well as cloud storage services such as AWS Elastic Block
    Store (EBS). These connect to Kubernetes via CSI plug-ins, and Kubernetes provides
    objects that allow the storage to be accessed and used by Pods.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 存储提供程序的示例包括：企业级存储阵列，如EMC和NetApp，以及云存储服务，如AWS Elastic Block Store（EBS）。这些通过CSI插件连接到Kubernetes，Kubernetes提供了允许Pod访问和使用存储的对象。
- en: Storage resources are represented in Kubernetes via `PersistentVolume` (PV)
    objects, and Pods can access them using `PersistentVolmeClaim` (PVC) objects.
    Both are resources in `v1` of the core API group.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 存储资源通过`PersistentVolume`（PV）对象在Kubernetes中表示，Pod可以使用`PersistentVolumeClaim`（PVC）对象访问它们。这两者都是核心API组的`v1`中的资源。
- en: '`StorageClass` objects allow PVs to be dynamically created and are in the `storage.k8s.io/v1`
    API group.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`StorageClass`对象允许动态创建PV，并位于`storage.k8s.io/v1` API组中。'
- en: Helm
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Helm
- en: Helm is the de facto Kubernetes package manager and greatly simplifies installation
    and management of Kubernetes applications.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Helm是事实上的Kubernetes包管理器，极大地简化了Kubernetes应用的安装和管理。
- en: Helm was accepted into the Cloud Native Computing Foundation (CNCF) in 2018
    as an official top-level project. As such, it sits alongside Kubernetes, Prometheus,
    gRPC, and others.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Helm于2018年被接纳为云原生计算基金会（CNCF）的官方顶级项目。因此，它与Kubernetes、Prometheus、gRPC等并列。
- en: As a *package manager* , it’s like `apt` for Ubuntu and `brew` for Mac. In the
    case of Helm, it hides all the complexities of things like Deployments, Pods,
    and Persistent Volumes in a construct called a *chart* . Think of a chart as the
    Helm equivalent of a YUM, DEB, or homebrew package. As such, you can install,
    update, and delete Kubernetes applications via the application’s Helm chart.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 作为*包管理器*，它就像Ubuntu的`apt`和Mac的`brew`。在Helm的情况下，它隐藏了诸如部署、Pod和持久卷之类的复杂性，放在一个叫做*chart*的构造中。把chart想象成Helm版的YUM、DEB或homebrew包。因此，您可以通过应用的Helm
    chart安装、更新和删除Kubernetes应用。
- en: You can also share your charts with the community as well as re-use existing
    charts.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以与社区分享您的chart，并重复使用现有的chart。
- en: Chapter Summary
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 章节总结
- en: The idea of this chapter was to make you aware of *some* of the other important
    Kubernetes technologies so that you have an idea of where you might want to go
    next. However, Kubernetes is huge and we haven’t covered everything.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是让您了解*一些*其他重要的Kubernetes技术，以便您知道下一步可能要去哪里。但是，Kubernetes非常庞大，我们还没有涵盖所有内容。
- en: The plan going forward is to make some of these topics their own chapters in
    future versions of the book. If you can’t wait for that, I already cover *Autoscaling*
    , *RBAC* , and *Storage* in my **Kubernetes Deep Dive** video course on acloud.guru.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的计划是将其中一些主题作为书的未来版本中的独立章节。如果您等不及，我已经在acloud.guru的**Kubernetes深入探讨**视频课程中涵盖了*自动扩展*、*RBAC*和*存储*。
- en: https://acloud.guru/learn/kubernetes-deep-dive
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: https://acloud.guru/learn/kubernetes-deep-dive
- en: 读累了记得休息一会哦~
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读累了记得休息一会哦~
- en: '**公众号：古德猫宁李**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**公众号：古德猫宁李**'
- en: 电子书搜索下载
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 书单分享
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书单分享
- en: 书友学习交流
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书友学习交流
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
- en: 电子书搜索下载
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 电子书打包资源分享
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书打包资源分享
- en: 学习资源分享
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源分享
- en: 读累了记得休息一会哦~
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读累了记得休息一会哦~
- en: '**公众号：古德猫宁李**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**公众号：古德猫宁李**'
- en: 电子书搜索下载
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 书单分享
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书单分享
- en: 书友学习交流
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书友学习交流
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
- en: 电子书搜索下载
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书搜索下载
- en: 电子书打包资源分享
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子书打包资源分享
- en: 学习资源分享
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习资源分享
