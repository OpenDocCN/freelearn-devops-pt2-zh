- en: '1: Kubernetes Primer'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1：Kubernetes入门
- en: This chapter is split into two main sections.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章分为两个主要部分。
- en: Kubernetes background - where it came from etc.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes背景-它来自何处等等。
- en: The idea of Kubernetes as a data center OS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Kubernetes视为数据中心操作系统的想法
- en: Kubernetes background
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubernetes背景
- en: Kubernetes is an orchestrator. For the most part, it orchestrates containerized
    apps. However, there are projects that enable it to orchestrate virtual machines
    and functions (serverless workloads). All of this is adding up to Kubernetes being
    the de-facto orchestrator for *cloud-native applications* .
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是一个编排器。在大多数情况下，它编排容器化的应用程序。但是，有一些项目使其能够编排虚拟机和函数（无服务器工作负载）。所有这些都使Kubernetes成为*云原生应用程序*的事实上的编排器。
- en: So, what is an *orchestrator* and what is a *cloud-native app* ?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是*编排器*，什么是*云原生应用程序*？
- en: An *orchestrator* is a back-end system that deploys and manages applications.
    This means it helps you deploy your application, scale it up and down, perform
    updates and rollbacks, and more. And if it’s a good orchestrator, it does this
    without you having to supervise.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*编排器*是一个部署和管理应用程序的后端系统。这意味着它可以帮助您部署应用程序，扩展和缩小它，执行更新和回滚等操作。如果它是一个好的编排器，它可以在您不需要监督的情况下完成这些操作。'
- en: A *cloud-native application* is made from a set of small independent services
    that communicate and form into a useful application. As the name suggests, this
    design enables it to cope with cloud-like demands and run natively on cloud platforms.
    As an example, cloud-native applications are designed and written so that they
    can easily be scaled up and down as demand rises and falls. It’s also simple to
    update them and perform rollbacks. They can also self-heal.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*云原生应用程序*由一组小型独立服务组成，这些服务相互通信并形成一个有用的应用程序。正如其名称所示，这种设计使其能够应对类似云的需求并在云平台上本地运行。例如，云原生应用程序被设计和编写成可以轻松扩展和缩小以满足需求的变化。更新和回滚也很简单。它们还可以自我修复。'
- en: More on all these concepts throughout the book.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中将更多地涉及所有这些概念。
- en: '**Note:** Despite the name, *cloud-native* apps can also run on-premises. In
    fact, an attribute of a cloud-native app might be the ability to run anywhere
    - any cloud, or any on-prem datacenter.'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：**尽管名称如此，*云原生*应用程序也可以在本地运行。事实上，云原生应用程序的一个特性可能是能够在任何地方运行-任何云，或任何本地数据中心。'
- en: Where did Kubernetes come from
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubernetes源自何处
- en: Let’s start from the beginning… Kubernetes came out of Google! In the summer
    of 2014 it was open-sourced and handed over to the Cloud Native Computing Foundation
    (CNCF).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从头开始吧... Kubernetes源自Google！2014年夏天，它被开源并移交给了云原生计算基金会（CNCF）。
- en: '![Figure 1.1](Image00001.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1](Image00001.jpg)'
- en: Figure 1.1
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1
- en: Since then, it’s gone on to become the most important cloud-native technology
    on the planet.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从那时起，它已成为全球最重要的云原生技术。
- en: Like many of the modern cloud-native projects, it’s written in Go (Golang).
    It lives on Github at `kubernetes/kubernetes` . It’s actively discussed on the
    IRC channels, you can follow it on Twitter (@kubernetesio), and this is pretty
    good slack channel - slack.k8s.io. There are also regular meetups all over the
    planet!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多现代云原生项目一样，它是用Go（Golang）编写的。它在Github上的`kubernetes/kubernetes`上。它在IRC频道上活跃讨论，你可以在Twitter上关注它（@kubernetesio），还有一个很好的slack频道-slack.k8s.io。全球各地也定期举行聚会！
- en: Kubernetes and Docker
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Kubernetes和Docker
- en: Kubernetes and Docker are complementary technologies. For example, it’s common
    to develop your applications with Docker, and then use Kubernetes to orchestrate
    them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes和Docker是互补的技术。例如，通常会使用Docker开发应用程序，然后使用Kubernetes进行编排。
- en: In this model, you write your code in your favourite languages, and then use
    Docker to package it, test it, and ship it. But the final step of running it in
    test or production is handled by Kubernetes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个模型中，你可以用你喜欢的语言编写代码，然后使用Docker对其进行打包、测试和部署。但在测试或生产中运行的最后一步是由Kubernetes处理的。
- en: At a high-level, you might have a Kubernetes cluster with 10 nodes to run your
    production applications. Behind the scenes though, each node is running Docker
    as its container runtime. This means that Docker is the low-level technology that
    starts and stops containers etc., and Kubernetes is the higher-level technology
    that looks after the bigger picture things like; deciding which nodes to run certain
    parts of the app on, deciding when to scale up or down, and executing updates.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，你可能会有一个包含10个节点的Kubernetes集群来运行你的生产应用程序。然而，在幕后，每个节点都在运行Docker作为其容器运行时。这意味着Docker是启动和停止容器等低级技术，而Kubernetes是处理更大范围事务的高级技术，比如决定在哪些节点上运行应用程序的某些部分，何时扩展或缩减，以及执行更新。
- en: Figure 1.2 shows a simple Kubernetes cluster with nodes using Docker as the
    container runtime.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2显示了一个简单的Kubernetes集群，其中的节点使用Docker作为容器运行时。
- en: '![Figure 1.2](Image00002.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2](Image00002.jpg)'
- en: Figure 1.2
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2
- en: 'As can be seen in Figure 1.2, Docker isn’t the only container runtime that
    Kubernetes supports. In fact, Kubernetes has a couple of features that abstract
    the runtime:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如图1.2所示，Docker并不是Kubernetes支持的唯一容器运行时。事实上，Kubernetes有一些抽象运行时的特性：
- en: The Container Runtime Interface (CRI) is an abstraction layer that standardizes
    the way 3rd-party container runtimes interface with Kubernetes. It allows the
    container runtime code to exist outside of Kubernetes, but interface with it in
    a supported and standardized way.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器运行时接口（CRI）是一个抽象层，标准化第三方容器运行时与Kubernetes接口的方式。它允许容器运行时代码存在于Kubernetes之外，但以受支持和标准化的方式与其接口。
- en: '*Runtime Classes* are a new feature in Kubernetes 1.12 (alpha) that allow for
    different classes of runtimes. For example, *gVisor* might provide better isolation
    than something like Docker or containerd.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*运行时类*是Kubernetes 1.12（alpha）中的一个新功能，允许不同类别的运行时。例如，*gVisor*可能提供比Docker或containerd更好的隔离性。'
- en: At the time of writing, `containerd` is overtaking Docker as the most commonly
    used container runtime in Kubernetes. `containerd` is effectively a stripped-down
    version of Docker with just the stuff that Kubernetes needs.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，`containerd`正在超越Docker成为Kubernetes中最常用的容器运行时。`containerd`实际上是Docker的精简版本，只包含Kubernetes所需的内容。
- en: However, this is low-level stuff, and none of it should impact your experience
    as a Kubernetes user. Whichever container runtime you use, the regular Kubernetes
    commands and patterns will continue to work as normal.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这是低级的东西，不应该影响你作为Kubernetes用户的体验。无论你使用哪种容器运行时，常规的Kubernetes命令和模式将继续正常工作。
- en: What about Kubernetes vs Docker Swarm
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Kubernetes与Docker Swarm有什么不同
- en: In 2016 and 2017 we had the *orchestrator wars* where Docker Swarm, Mesosphere
    DCOS, and Kubernetes fought over which would be de-facto container orchestrator.
    To cut a long story short, Kubernetes won.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在2016年和2017年，我们经历了*编排器之战*，Docker Swarm、Mesosphere DCOS和Kubernetes争夺成为事实上的容器编排器。长话短说，Kubernetes获胜了。
- en: Yes, Docker Swarm and other container orchestrators still exist, but their development
    and market-share are tiny compared to Kubernetes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，Docker Swarm和其他容器编排器仍然存在，但它们的发展和市场份额与Kubernetes相比微不足道。
- en: 'Kubernetes and Borg: Resistance is futile!'
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Kubernetes和Borg：抵抗是徒劳的！
- en: There’s a pretty good chance you’ll hear people talk about how Kubernetes relates
    to Google’s *Borg* and *Omega* systems.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 很有可能你会听到人们谈论Kubernetes与谷歌的*Borg*和*Omega*系统的关系。
- en: It’s no secret that Google has been running many of its systems on containers
    for years. Legendary stories of them crunching through *billions of containers
    a week* are common. So yes, for a very long time – even before Docker came along
    - Google has been running things like *search* , *Gmail* , and *GFS* on containers
    - **lots** of containers!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌多年来一直在容器上运行许多系统并不是什么秘密。传说中他们每周处理*数十亿个容器*的故事很常见。所以是的，很长一段时间以来 - 甚至在Docker出现之前
    - 谷歌一直在容器上运行*搜索*、*Gmail*和*GFS*等东西 - **大量**的容器！
- en: Pulling the strings and keeping those billions of containers in check are a
    couple of in-house technologies and frameworks called *Borg* and *Omega* . So,
    it’s not a huge stretch to make the connection between these and Kubernetes -
    they’re all in the game of orchestrating containers at scale, and they’re all
    related to Google.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 控制这数十亿个容器并保持其正常运行的是一些内部技术和框架，称为*Borg*和*Omega*。因此，把它们与Kubernetes联系起来并不是什么大问题
    - 它们都在进行规模化容器编排的游戏，并且它们都与谷歌有关。
- en: This has occasionally led to people thinking Kubernetes is an open-sourced version
    of either *Borg* or *Omega* . But it’s not! It’s more like Kubernetes shares its
    DNA and family history with them. A bit like this… In the beginning was Borg…
    and Borg begat Omega. Omega *knew* the open-source community and begat her Kubernetes
    ;-)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这有时让人们误以为Kubernetes是Borg或Omega的开源版本。但事实并非如此！它更像是与它们共享DNA和家族史。就像这样...一开始是Borg...然后Borg产生了Omega。Omega
    *认识*了开源社区，然后产生了她的Kubernetes ;-)
- en: '![Figure 1.3 - Shared DNA](Image00003.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 - 共享的DNA](Image00003.jpg)'
- en: Figure 1.3 - Shared DNA
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 - 共享的DNA
- en: The point is, all three are separate, but all three are related. In fact, a
    lot of the people involved with building Borg and Omega were also involved in
    building Kubernetes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是，这三者是分开的，但又是相关的。事实上，许多参与建立Borg和Omega的人也参与了建立Kubernetes。
- en: So, although Kubernetes was built from scratch, it leverages much of what was
    learned at Google with Borg and Omega.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，尽管Kubernetes是从头开始构建的，但它利用了在谷歌与Borg和Omega学到的许多东西。
- en: As things stand, Kubernetes is an open-source project under the CNCF, licensed
    under the Apache 2.0 license, and version 1 shipped way back in July 2015.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Kubernetes是CNCF下的一个开源项目，根据Apache 2.0许可证授权，并且1.0版本早在2015年7月就发布了。
- en: Kubernetes - what’s in the name
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Kubernetes - 名字的含义
- en: The name **Kubernetes** comes from the Greek word meaning *Helmsman* - the person
    who steers a ship. This theme is reflected in the logo.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubernetes**这个名字来自希腊词，意思是*舵手* - 驾驶船只的人。这个主题反映在标志中。'
- en: '![Figure 1.4 - The Kubernetes logo](Image00004.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图1.4 - Kubernetes标志](Image00004.jpg)'
- en: Figure 1.4 - The Kubernetes logo
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4 - Kubernetes标志
- en: '**Rumor:** Kubernetes was originally going to be called *Seven of Nine* . If
    you know your Star Trek, you’ll know that *Seven of Nine* is a female **Borg**
    rescued by the crew of the USS Voyager under the command of Captain Catherine
    Janeway. The **7** spokes on the logo are also a reference to Seven of *Nine*
    .'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**传闻：** Kubernetes最初的名字是要叫*九号七*。如果你了解《星际迷航》，你会知道*九号七*是一位由凯瑟琳·詹妮薇船长指挥的USS航行者号救出的女性**Borg**。标志上的**7**个轮辐也是对*九号七*的一个参考。'
- en: One last thing about the name before moving on… You’ll often see Kubernetes
    shortened to **K8s** . The idea is that the number 8 replaces the 8 characters
    in between the K and the S – great for tweets and lazy typists like me ;-)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，关于名字的最后一件事...你经常会看到Kubernetes被缩写为**K8s**。这个想法是数字8替代了K和S之间的8个字符 - 对于推特和像我这样的懒惰打字者来说非常方便
    ;-)
- en: A data center OS
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据中心操作系统
- en: Generally speaking, containers make our previous scalability challenges look
    easy - we’ve just said that Google goes through billions of containers per week!!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，容器让我们以前的可扩展性挑战看起来很容易 - 我们刚刚说过谷歌每周处理数十亿个容器！
- en: OK… but not everybody is the size of Google. What about the rest of us?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧……但并非每个人都像谷歌那样大。那么我们其他人呢？
- en: As a general rule, if your legacy apps had hundreds of VMs, there’s a good chance
    your containerized cloud-native apps will have thousands of containers! With this
    in mind, we desperately need a way to manage them.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，如果你的传统应用程序有数百个虚拟机(VM)，那么你的容器化云原生应用程序很可能会有数千个容器！考虑到这一点，我们迫切需要一种管理它们的方法。
- en: Say hello to Kubernetes!
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对Kubernetes打个招呼！
- en: When getting your head around something like Kubernetes it’s important to get
    your head around modern data center architectures. For example, we’re abandoning
    the traditional view of the data center as collection of computers. Instead, we’re
    viewing it as a *single large computer* .
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始理解像Kubernetes这样的东西时，重要的是要理解现代数据中心架构。例如，我们正在放弃将数据中心视为计算机集合的传统观点。相反，我们将其视为*一个大型计算机*。
- en: But what does that mean?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但这意味着什么？
- en: A typical computer is a collection of CPU, RAM, storage, and networking. But
    we’ve done a great job of building operating systems (OS) that abstract away a
    lot of that detail. For example, it’s rare for a developer to care which CPU core
    or exact memory address their application uses – we let the OS decide all of that.
    And it’s a good thing, the world of application development is a far friendlier
    place for it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的计算机是由CPU、RAM、存储和网络组成的。但是我们已经很好地构建了抽象掉许多细节的操作系统(OS)。例如，开发人员很少关心他们的应用程序使用哪个CPU核心或确切的内存地址
    - 我们让操作系统决定所有这些。这是件好事，应用程序开发的世界因此变得更加友好。
- en: So, it’s natural to take this to the next level and apply those same abstractions
    to data center resources - to view the data center as just a pool of compute,
    network and storage, and have an over-arching system that abstracts it. This means
    we no longer need to care about which server or LUN our containers are running
    on - just leave this up to the data center OS.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将这一点提升到下一个级别，并将这些相同的抽象应用于数据中心资源 - 将数据中心视为计算、网络和存储的池，并具有一个总体系统来对其进行抽象化是很自然的。这意味着我们不再需要关心我们的容器运行在哪台服务器或LUN上
    - 只需将其留给数据中心操作系统处理。
- en: In some ways, Kubernetes is a data center OS. Others do exist, but they’re all
    in the *cattle business* . Forget about naming your servers, mapping LUNs in a
    spreadsheet, and otherwise treating them like *pets* . Systems like Kubernetes
    don’t care. Gone are the days of taking your app and saying *“Run this part of
    the app on this node, with this IP, on this specific LIUN…“* . In the cloud-native
    Kubernetes world, we’re more about saying *“Hey Kubernetes, I’ve got this app
    and it consists of these parts… just run it for me please”* . Kubernetes then
    goes off and does all the hard scheduling and orchestration work.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些方面，Kubernetes是一个数据中心操作系统。其他操作系统也存在，但它们都处于*牲畜业*中。忘掉给你的服务器命名，在电子表格中映射逻辑单元(LUN)，或者以其他方式像*宠物*一样对待它们。像Kubernetes这样的系统并不在乎。那种把你的应用程序拿出来然后说*“在这个节点上运行应用程序的这一部分，使用这个IP，在这个特定的LIUN上……“*的日子已经过去了。在云原生的Kubernetes世界中，我们更多地是说*“嘿，Kubernetes，我有这个应用程序，它由这些部分组成……请帮我运行它”*。然后Kubernetes会去做所有艰难的调度和编排工作。
- en: '**Note:** No offence is intended to anyone, or any animals, when using the
    terms *pets* and *cattle* .'
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：**在使用术语*宠物*和*牲畜*时，不是针对任何人或任何动物。'
- en: Let’s look at a quick analogy…
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个快速的类比……
- en: Think about the process of sending goods via a courier service. You package
    the goods in the courier’s standard packaging, put a label on it, and hand it
    over to the courier. The courier takes care of everything else – all the complex
    logistics of which planes and trucks it goes on, which drivers to use etc. They
    also provide services that let you do things like track your package. The point
    is, the only thing that the courier requires is that the goods are packaged and
    labelled according to their requirements.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下通过快递服务发送货物的过程。您将货物打包在快递公司的标准包装中，贴上标签，然后交给快递员。快递员会处理其他所有事情 - 所有复杂的物流，包括货物搭乘的飞机和卡车，使用哪些司机等等。他们还提供让您跟踪包裹的服务。关键是，快递员唯一需要的是货物按照他们的要求打包和贴标签。
- en: The same goes for apps in Kubernetes. Package them as containers, give them
    a declarative manifest, and let Kubernetes take care of running them and keeping
    them running. You also get a rich set of tools and APIs that let you see what’s
    going on. It’s a beautiful thing!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Kubernetes中的应用程序也是一样。将它们打包为容器，给它们一个声明性清单，然后让Kubernetes负责运行它们并保持运行。您还会获得丰富的工具和API，让您了解发生了什么。这是一件美好的事情！
- en: While all of this sounds great, don’t take this *data center OS* analogy too
    far. It’s not a DVD install, you don’t end up with a shell prompt to control your
    entire data center. And you definitely don’t get a solitaire card game included!
    We’re in the early stages, but Kubernetes is leading the way and I think you’ll
    love it.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些听起来都很棒，但不要把这个“数据中心操作系统”的比喻太过分。这不是一个DVD安装，你不会得到一个shell提示符来控制整个数据中心。而且你绝对不会得到一个纸牌游戏！我们还处于早期阶段，但Kubernetes正在引领潮流，我相信你会喜欢它。
- en: Chapter summary
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 章节总结
- en: Kubernetes is *the* leading orchestrator of cloud-native apps. We give it an
    app, tell it what we want the app to look like, and let Kubernetes make happen.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是云原生应用程序的领先编排器。我们给它一个应用程序，告诉它我们希望应用程序看起来像什么，然后让Kubernetes实现。
- en: It came out of Google, it’s open-sourced under the Apache 2.0 license, and lives
    within the Cloud Native Computing Foundation (CNCF).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 它来自谷歌，根据Apache 2.0许可开源，并且属于Cloud Native Computing Foundation（CNCF）。
- en: Tip!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 提示！
- en: Kubernetes is a fast-moving project under active development, so things are
    changing fast! But don’t let that put you off - embrace it! Rapid change is the
    new normal!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是一个快速发展的项目，正在积极开发中，所以事情变化很快！但不要因此而却步 - 拥抱它！快速变化是新常态！
- en: As well as reading this book, I suggest you follow @kubernetesio on Twitter,
    hit the various k8s slack channels, and attend your local meetups. These will
    all help to keep you up-to-date with the latest and greatest in the Kubernetes
    world. I’ll also be updating the book regularly and producing more video training
    courses! Keep an eye on pluralsight.com and acloud.guru for my latest courses!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 除了阅读本书，我建议您关注Twitter上的@kubernetesio，加入各种k8s的slack频道，并参加当地的聚会。这些都将帮助您了解Kubernetes世界中的最新和最伟大的事物。我还会定期更新这本书，并制作更多的视频培训课程！请关注pluralsight.com和acloud.guru获取我的最新课程！
