- en: The Serverless Landscape
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器景观
- en: 'Welcome to the first chapter of *Kubernetes for Serverless Applications*. In
    this chapter, we are going to be looking at and discussing the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到《用于无服务器应用的Kubernetes》的第一章。在本章中，我们将讨论以下内容：
- en: What do we mean by serverless and Functions as a Service?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们所说的无服务器和函数作为服务是什么意思？
- en: What services are out there?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有哪些服务？
- en: An example of Lambda by Amazon Web Services
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊网络服务的Lambda的一个例子。
- en: An example of Azure Functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Functions的一个例子
- en: Using the serverless toolkit
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用无服务器工具包
- en: What problems can we solve using serverless and Functions as a Service?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用无服务器和函数作为服务解决什么问题？
- en: I think it is important we start by addressing the elephant in the room, and
    that is the term serverless.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为重要的是我们首先要解决房间里的大象，那就是无服务器这个术语。
- en: Serverless and Functions as a Service
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器和函数作为服务
- en: When you say serverless to someone, the first conclusion they jump to is that
    you are running your code without any servers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当你对某人说无服务器时，他们首先得出的结论是你在没有任何服务器的情况下运行你的代码。
- en: This can be quite a valid conclusion if you are using one of the public cloud
    services we will be discussing later in this chapter. However, when it comes to
    running in your own environment, you can't avoid having to run on a server of
    some sort.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用我们将在本章后面讨论的公共云服务之一，这可能是一个相当合理的结论。然而，当在你自己的环境中运行时，你无法避免必须在某种服务器上运行。
- en: Before we discuss what we mean by serverless and Functions as a Service, we
    should discuss how we got here. As people who work with me will no doubt tell
    you, I like to use the *pets versus cattle* analogy a lot as this is quite an
    easy way to explain the differences in modern cloud infrastructures versus a more
    traditional approach.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论无服务器和函数作为服务的含义之前，我们应该讨论我们是如何到达这里的。和我一起工作的人无疑会告诉你，我经常使用“宠物与牛群”这个类比，因为这是一个很容易解释现代云基础设施与更传统方法之间差异的方式。
- en: Pets, cattle, chickens, insects, and snowflakes
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 宠物、牛群、鸡、昆虫和雪花
- en: I first came across the *pets versus cattle* analogy back in 2012 from a slide
    deck published by Randy Bias. The slide deck was used during a talk Randy Bias
    gave at the cloudscaling conference on architectures for open and scalable clouds.
    Towards the end of the talk, he introduced the concept of pets versus cattle,
    which Randy attributes to Bill Baker who at the time was an engineer at Microsoft.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我第一次接触“宠物与牛群”这个类比是在2012年，当时Randy Bias发布了一份幻灯片。这张幻灯片是在Randy Bias在云扩展会议上关于开放和可扩展云的架构的演讲中使用的。在演讲的最后，他介绍了宠物与牛群的概念，Randy将其归因于当时在微软担任工程师的Bill
    Baker。
- en: The slide deck primarily talks about scaling out and not up; let's go into this
    in a little more detail and discuss some of the additions that have been made
    since the presentation was first given five years ago.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 幻灯片主要讨论的是扩展而不是升级；让我们更详细地讨论一下，并讨论自五年前首次进行演示以来所做的一些补充。
- en: Randy's slide deck can be found at [https://www.slideshare.net/randybias/architectures-for-open-and-scalable-clouds](https://www.slideshare.net/randybias/architectures-for-open-and-scalable-clouds).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Randy的幻灯片可以在[https://www.slideshare.net/randybias/architectures-for-open-and-scalable-clouds](https://www.slideshare.net/randybias/architectures-for-open-and-scalable-clouds)找到。
- en: Pets
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 宠物
- en: 'Pets are typically what we, as system administrators, spend our time looking
    after. They are traditional bare metal servers or virtual machines:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 宠物通常是我们作为系统管理员花时间照顾的东西。它们是传统的裸金属服务器或虚拟机：
- en: We name each server as you would a pet. For example, `app-server01.domain.com`
    and `database-server01.domain.com`.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们像给宠物起名字一样给每台服务器起名字。例如，`app-server01.domain.com`和`database-server01.domain.com`。
- en: When our pets are ill, you will take them to the vets. This is much like you,
    as a system administrator, would reboot a server, check logs, and replace the
    faulty components of a server to ensure that it is running healthily.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们的宠物生病时，你会把它们带到兽医那里。这很像你作为系统管理员重新启动服务器，检查日志，并更换服务器的故障组件，以确保它正常运行。
- en: You pay close attention to your pets for years, much like a server. You monitor
    for issues, patch them, back them up, and ensure they are fully documented.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你多年来一直密切关注你的宠物，就像对待服务器一样。你监视问题，修补它们，备份它们，并确保它们有充分的文档记录。
- en: There is nothing much wrong with running pets. However, you will find that the
    majority of your time is spent caring for them—this may be alright if you have
    a few dozen servers, but it does start to become unmanageable if you have a few
    hundred servers.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 运行宠物并没有太大问题。然而，你会发现你大部分的时间都花在照顾它们上——如果你有几十台服务器，这可能还可以接受，但如果你有几百台服务器，情况就开始变得难以管理了。
- en: Cattle
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 牛
- en: Cattle are more representative of the instance types you should be running in
    public clouds such as **Amazon Web Services** (**AWS**) or Microsoft Azure, where
    you have auto scaling enabled.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 牛更能代表你应该在公共云中运行的实例类型，比如**亚马逊网络服务**（**AWS**）或微软Azure，在那里你启用了自动扩展。
- en: You have so many cattle in your herd you don't name them; instead they are given
    numbers and tagged so you can track them. In your instance cluster, you can also
    have too many to name so, like cattle, you give them numbers and tag them. For
    example, an instance could be called `ip123067099123.domain.com` and tagged as
    `app-server`.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的牛群里有很多牛，你不给它们起名字；相反，它们被编号和标记，这样你就可以追踪它们。在你的实例集群中，你也可能有太多实例需要命名，所以像牛一样，你给它们编号和标记。例如，一个实例可以被称为`ip123067099123.domain.com`，并标记为`app-server`。
- en: When a member of your herd gets sick, you shoot it, and if your herd requires
    it you replace it. In much the same way, if an instance in your cluster starts
    to have issues it is automatically terminated and replaced with a replica.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你的牛群中的一头生病时，你会射杀它，如果你的牛群需要，你会替换它。同样地，如果你集群中的一个实例开始出现问题，它会被自动终止并替换为一个副本。
- en: You do not expect the cattle in your herd to live as long as a pet typically
    would, likewise you do not expect your instances to have an uptime measured in
    years.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不指望牛群中的牛能活得像宠物一样长久，同样地，你也不指望你的实例的正常运行时间能以年为单位。
- en: Your herd lives in a field and you watch it from afar, much like you don't monitor
    individual instances within your cluster; instead, you monitor the overall health
    of your cluster. If your cluster requires additional resources, you launch more
    instances and when you no longer require a resource, the instances are automatically
    terminated, returning you to your desired state.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的牛群生活在一个牧场里，你从远处观察它，就像你不监视集群中的单个实例一样；相反，你监视集群的整体健康状况。如果你的集群需要额外的资源，你会启动更多的实例，当你不再需要资源时，实例会被自动终止，使你回到期望的状态。
- en: Chickens
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鸡
- en: 'In 2015, Bernard Golden added to the pets versus cattle analogy by introducing
    chickens to the mix in a blog post titled *Cloud Computing: Pets, Cattle* and
    *Chickens?* Bernard suggested that chickens were a good term for describing containers
    alongside pets and cattle:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 2015年，Bernard Golden在一篇名为《云计算：宠物、牛和鸡？》的博客文章中，将鸡引入到宠物与牛的比喻中。Bernard建议将鸡作为描述容器的一个好术语，与宠物和牛并列：
- en: Chickens are more efficient than cattle; you can fit a lot more of them into
    the same space your herd would use. In the same way, you can fit a lot more containers
    into your cluster as you can launch multiple containers per instance.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鸡比牛更有效率；你可以把更多的鸡放在你的牛群所占用的同样空间里。同样地，你可以在你的集群中放更多的容器，因为你可以在每个实例上启动多个容器。
- en: Each chicken requires fewer resources than a member of your herd when it comes
    to feeding. Likewise, containers are less resource-intensive than instances, they
    take seconds to launch, and can be configured to consume less CPU and RAM.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每只鸡在饲养时需要的资源比你的牧群成员少。同样，容器比实例需要的资源更少，它们只需要几秒钟就可以启动，并且可以配置为消耗更少的CPU和RAM。
- en: Chickens have a much lower life expectancy than members of your herd. While
    cluster instances can have an uptime of a few hours to a few days, it is more
    than possible that a container will have a lifespan of minutes.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鸡的寿命远低于你的牧群成员。虽然集群实例的正常运行时间可能是几小时到几天，但容器的寿命可能只有几分钟。
- en: Unfortunately, Bernard's original blog post is no longer available. However,
    The New Stack have republished a version of it. You can find the republished version
    at [https://thenewstack.io/pets-and-cattle-symbolize-servers-so-what-does-that-make-containers-chickens/](https://thenewstack.io/pets-and-cattle-symbolize-servers-so-what-does-that-make-containers-chickens/).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，伯纳德的原始博客文章已经不再可用。然而，The New Stack已经重新发布了一篇版本。你可以在[https://thenewstack.io/pets-and-cattle-symbolize-servers-so-what-does-that-make-containers-chickens/](https://thenewstack.io/pets-and-cattle-symbolize-servers-so-what-does-that-make-containers-chickens/)找到重新发布的版本。
- en: Insects
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 昆虫
- en: Keeping in line with the animal theme, Eric Johnson wrote a blog post for RackSpace
    which introduced insects. This term was introduced to describe serverless and
    Functions as a Service.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与动物主题保持一致，埃里克·约翰逊为RackSpace撰写了一篇介绍昆虫的博客文章。这个术语被用来描述无服务器和函数即服务。
- en: Insects have a much lower life expectancy than chickens; in fact, some insects
    only have a lifespan of a few hours. This fits in with serverless and Functions
    as a Service as these have a lifespan of seconds.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 昆虫的寿命远低于鸡；事实上，一些昆虫只有几小时的寿命。这符合无服务器和函数即服务的特点，因为它们的寿命只有几秒钟。
- en: Later in this chapter, we will be looking at public cloud services from AWS
    and Microsoft Azure which are billed in milliseconds, rather than hours or minutes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面，我们将看一下来自AWS和微软Azure的公共云服务，这些服务的计费是以毫秒为单位，而不是小时或分钟。
- en: Eric's blog post can be found at [https://blog.rackspace.com/pets-cattle-and-nowinsects/](https://blog.rackspace.com/pets-cattle-and-nowinsects/).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 埃里克的博客文章可以在[https://blog.rackspace.com/pets-cattle-and-nowinsects/](https://blog.rackspace.com/pets-cattle-and-nowinsects/)找到。
- en: Snowflakes
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 雪花
- en: 'Around the time Randy Bias gave his talk which mentioned pets versus cattle,
    Martin Fowler wrote a blog post titled *SnowflakeServer*. The post described every
    system administrator''s worst nightmare:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在兰迪·拜斯提到宠物与牛群的讲话时，马丁·福勒写了一篇名为*SnowflakeServer*的博客文章。这篇文章描述了每个系统管理员的噩梦：
- en: Every snowflake is unique and impossible to reproduce. Just like that one server
    in the office that was built and not documented by that one guy who left several
    years ago.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每片雪花都是独一无二的，无法复制。就像办公室里那台由几年前离开的那个人建造而没有记录的服务器一样。
- en: Snowflakes are delicate. Again, just like that one server—you dread it when
    you have to log in to it to diagnose a problem and you would never dream of rebooting
    it as it may never come back up.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 雪花是脆弱的。就像那台服务器一样——当你不得不登录诊断问题时，你会很害怕，你绝对不会想重新启动它，因为它可能永远不会再次启动。
- en: Martin's post is available at [https://martinfowler.com/bliki/SnowflakeServer.html](https://martinfowler.com/bliki/SnowflakeServer.html).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 马丁的帖子可以在[https://martinfowler.com/bliki/SnowflakeServer.html](https://martinfowler.com/bliki/SnowflakeServer.html)找到。
- en: Summing up
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'Once I have explained pets, cattle, chickens, insects, and snowflakes, I sum
    up by saying:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我解释了宠物、牛群、鸡、昆虫和雪花，我总结道：
- en: '*"Organizations who have **pets** are slowly moving their infrastructure to
    be more like **cattle**. Those who are already running their* *infrastructure
    as **cattle** are moving towards **chickens** to get the most out of their resources.
    Those running **chickens** are going to be looking at how much work is involved
    in moving their application to run as **insects** by completely decoupling their
    application into individually executable components."*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: “那些拥有**宠物**的组织正在慢慢将他们的基础设施变得更像**牛**。那些已经将他们的基础设施运行为**牛**的人正在向**鸡**转变，以充分利用他们的资源。那些运行**鸡**的人将会考虑将他们的应用程序转变为**昆虫**，通过将他们的应用程序完全解耦成可单独执行的组件来完成。”
- en: 'Then finally I say this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后我这样说：
- en: '*"No one wants to or should be running **snowflakes***."'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: “没有人想要或者应该运行**雪花**。”
- en: In this book, we will be discussing insects, and I will assume that you know
    a little about the services and concepts that cover cattle and chickens.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将讨论昆虫，我会假设你对覆盖牛和鸡的服务和概念有一些了解。
- en: Serverless and insects
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器和昆虫
- en: As already mentioned, using the word serverless gives the impression that servers
    will not be needed. Serverless is a term used to describe an execution model.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，使用“无服务器”这个词会给人一种不需要服务器的印象。无服务器是用来描述一种执行模型的术语。
- en: When executing this model you, as the end user, do not need to worry about which
    server your code is executed on as all of the decisions on placement, server management,
    and capacity are abstracted away from you—it does not mean that you literally
    do not need any servers.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行这个模型时，作为最终用户的你不需要担心你的代码在哪台服务器上执行，因为所有的决策都是由抽象出来的，与你无关——这并不意味着你真的不需要任何服务器。
- en: Now there are some public cloud offerings which abstract so much of the management
    of servers away from the end user that it is possible to write an application
    which does not rely on any user-deployed services and that the cloud provider
    will manage the compute resources needed to execute your code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有一些公共云服务提供了如此多的服务器管理抽象，以至于可以编写一个不依赖于任何用户部署服务的应用程序，并且云提供商将管理执行代码所需的计算资源。
- en: Typically these services, which we will look at in the next section, are billed
    for the resources used to execute your code in per second increments.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，这些服务，我们将在下一节中看到，是按每秒执行代码所使用的资源计费的。
- en: So how does that explanation fits in with the insect analogy?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这个解释如何与昆虫类比呢？
- en: Let's say I have a website that allows users to upload photos. As soon as the
    photos are uploaded they are cropped, creating several different sizes which will
    be used to display as thumbnails and mobile-optimized versions on the site.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我有一个网站，允许用户上传照片。一旦照片上传，它们就会被裁剪，创建几种不同的尺寸，用于在网站上显示缩略图和移动优化版本。
- en: In the pets and cattle world, this would be handled by a server which is powered
    on 24/7 waiting for users to upload images. Now this server probably is not just
    performing this one function; however, there is a risk that if several users all
    decide to upload a dozen photos each, then this will cause load issues on the
    server where this function is being executed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在宠物和牛的世界中，这将由一个24/7开机等待用户上传图像的服务器来处理。现在这台服务器可能不只是执行这一个功能；然而，如果几个用户都决定上传十几张照片，那么这将在执行该功能的服务器上引起负载问题。
- en: We could take the chickens approach, which has several containers running across
    several hosts to distribute the load. However, these containers would more than
    likely be running 24/7 as well; they will be watching for uploads to process.
    This approach could allow us to horizontally scale the number of containers out
    to deal with an influx of requests.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以采用鸡的方法，跨多台主机运行多个容器来分发负载。然而，这些容器很可能也会全天候运行；它们将会监视上传以进行处理。这种方法可以让我们水平扩展容器的数量来处理请求的激增。
- en: Using the insects approach, we would not have any services running at all. Instead,
    the function should be triggered by the upload process. Once triggered, the function
    will run, save the processed images, and then terminate. As the developer, you
    should not have to care how the service was called or where the service was executed,
    so long as you have your processed images at the end of it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用昆虫的方法，我们根本不需要运行任何服务。相反，函数应该由上传过程触发。一旦触发，函数将运行，保存处理过的图像，然后终止。作为开发人员，你不需要关心服务是如何被调用或在哪里执行的，只要最终得到处理过的图像即可。
- en: Public cloud offerings
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公共云服务
- en: Before we delve into the core subject of this book and start working with Kubernetes,
    we should have a look at the alternatives; after all, the services we are going
    to be covering in upcoming chapters are nearly all loosely based off these services.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨本书的核心主题并开始使用Kubernetes之前，我们应该看看其他选择；毕竟，我们将在接下来的章节中涵盖的服务几乎都是基于这些服务的。
- en: 'The three main public cloud providers all provide a serverless service:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 三大主要的公共云提供商都提供无服务器服务：
- en: AWS Lambda from AWS ([https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/))
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS的AWS Lambda（[https://aws.amazon.com/lambda/](https://aws.amazon.com/lambda/)）
- en: Azure Functions by Microsoft ([https://azure.microsoft.com/en-gb/services/functions/](https://azure.microsoft.com/en-gb/services/functions/))
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软的Azure Functions（[https://azure.microsoft.com/en-gb/services/functions/](https://azure.microsoft.com/en-gb/services/functions/)）
- en: Cloud Functions from Google ([https://cloud.google.com/functions/](https://cloud.google.com/functions/))
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谷歌的Cloud Functions（[https://cloud.google.com/functions/](https://cloud.google.com/functions/)）
- en: Each of these services has the support of several different code frameworks.
    For the purposes of this book, we will not be looking at the code frameworks in
    too much detail as using these is a design decision which has to based on your
    code.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些服务都支持几种不同的代码框架。对于本书的目的，我们不会过多地研究代码框架，因为使用这些框架是一个基于你的代码的设计决策。
- en: We are going to be looking at two of these services, Lambda from AWS and Functions
    by Microsoft Azure.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将研究这两种服务，AWS的Lambda和微软Azure的Functions。
- en: AWS Lambda
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Lambda
- en: 'The first service we are going to look at is AWS Lambda by AWS. The tagline
    for the service is quite a simple one:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要看的第一个服务是AWS的AWS Lambda。该服务的标语非常简单：
- en: '"Run code without thinking about servers."'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: “无需考虑服务器即可运行代码。”
- en: Now those of you who have used AWS before might be thinking the tagline makes
    it sound a lot like the AWS Elastic Beanstalk service. This service inspects your
    code base and then deploys it in a highly scalable and redundant configuration.
    Typically, this is the first step for most people in moving from pets to cattle
    as it abstracts away the configuration of the AWS services which provide the scalability
    and high availability.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，那些之前使用过AWS的人可能会认为这个标语听起来很像AWS的弹性Beanstalk服务。该服务会检查你的代码库，然后以高度可扩展和冗余的配置部署它。通常，这是大多数人从宠物到牲畜的第一步，因为它抽象了AWS服务的配置，提供了可扩展性和高可用性。
- en: Before we work through launching a hello world example, which we will be doing
    for all of the services, we will need an AWS account and its command-line tools
    installed.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始启动一个hello world示例之前，我们将需要一个AWS账户和其命令行工具安装。
- en: Prerequisites
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'First of all, you need an AWS account. If you don''t have an account, you can
    sign up for an account at [https://aws.amazon.com/](https://aws.amazon.com/):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要一个AWS账户。如果您没有账户，可以在[https://aws.amazon.com/](https://aws.amazon.com/)注册一个账户：
- en: '![](assets/490eef47-c9e6-4409-b7b3-7152208e8d41.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/490eef47-c9e6-4409-b7b3-7152208e8d41.png)'
- en: While clicking on the Create a Free Account and then following the onscreen
    instructions will give you 12 months' free access to several services, you will
    still need to provide credit or debit card details and it is possible that you
    could incur costs.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然单击“创建免费账户”，然后按照屏幕上的说明将为您提供12个月的免费访问多项服务，但您仍然需要提供信用卡或借记卡详细信息，并且可能会产生费用。
- en: For more information on the AWS free tier, please see [https://aws.amazon.com/free/](https://aws.amazon.com/free/).
    This page lets you know which instance sizes and services are covered by the 12
    months of free service, as well as letting you know about non-expiring offers
    on other services, which include AWS Lambda.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有关AWS免费套餐的更多信息，请参阅[https://aws.amazon.com/free/](https://aws.amazon.com/free/)。此页面让您了解12个月免费服务涵盖的实例大小和服务，以及其他服务的永久优惠，其中包括AWS
    Lambda。
- en: Once you have your AWS account, you should create a user using the AWS **Identity
    and Access Management** (**IAM**) service. This user can have administrator privileges
    and you should use that user to access both the AWS Console and the API.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您拥有AWS账户，您应该使用AWS **身份和访问管理**（**IAM**）服务创建一个用户。该用户可以拥有管理员权限，您应该使用该用户访问AWS控制台和API。
- en: 'For more details on creating an IAM user, see the following pages:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 有关创建IAM用户的更多详细信息，请参阅以下页面：
- en: '**Getting started with IAM**: [http://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started.html](http://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开始使用IAM**：[http://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started.html](http://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started.html)'
- en: '**IAM best practices**: [http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html](http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IAM最佳实践**：[http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html](http://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html)'
- en: Using your AWS root account to launch services and access the API is not recommended;
    if the credentials fall into the wrong hands you can lose all access to your account.
    Using an IAM rather than your root account, which you should also lock down using
    multi-factor authentication, means that you will always have access to your AWS
    account.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议使用AWS根账户启动服务和访问API；如果凭据落入错误的手中，您可能会失去对账户的所有访问权限。使用IAM而不是您的根账户，并且您还应该使用多因素身份验证锁定根账户，这意味着您将始终可以访问您的AWS账户。
- en: 'The final prerequisite is that you need access to the AWS command-line client,
    where I will be using macOS, but the client is also available for Linux and Windows.
    For information on how to install and configure the AWS command-line client, please
    see:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个先决条件是您需要访问AWS命令行客户端，我将使用macOS，但该客户端也适用于Linux和Windows。有关如何安装和配置AWS命令行客户端的信息，请参阅：
- en: '**Installing the AWS CLI**: [http://docs.aws.amazon.com/cli/latest/userguide/installing.html](http://docs.aws.amazon.com/cli/latest/userguide/installing.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装AWS CLI**：[http://docs.aws.amazon.com/cli/latest/userguide/installing.html](http://docs.aws.amazon.com/cli/latest/userguide/installing.html)'
- en: '**Configuring the AWS CLI**: [http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置AWS CLI**：[http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html](http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html)'
- en: When configuring the AWS CLI, make sure you configure the default region as
    the one you will be accessing in the AWS web console, as there is nothing more
    confusing than running a command using the CLI and then not seeing the results
    in the web console.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置AWS CLI时，请确保将默认区域配置为您将在AWS Web控制台中访问的区域，因为没有比在CLI中运行命令然后在Web控制台中看不到结果更令人困惑的事情了。
- en: 'Once installed, you can test that you can access AWS Lambda from the command-line
    client by running:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，您可以通过运行以下命令来测试您是否可以从命令行客户端访问AWS Lambda：
- en: '[PRE0]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This should return an empty list of functions like the one shown in the following
    screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该返回一个空的函数列表，就像下面的截图中所示：
- en: '![](assets/d1ca6867-43ce-4be1-b4c7-fb09317425c5.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d1ca6867-43ce-4be1-b4c7-fb09317425c5.png)'
- en: Now that we have an account set up, created, and logged in using a non-root
    user, and we have the AWS CLI installed and configured, we can look at launching
    our first serverless function.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置、创建并使用非根用户登录了帐户，并且已经安装和配置了AWS CLI，我们可以开始启动我们的第一个无服务器函数了。
- en: Creating a Lambda function
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Lambda函数
- en: 'In the AWS Console, click on the Services menu in the top-left of the screen
    and select Lambda by either using the filter box or clicking on the service in
    the list. When you first go to the Lambda service page within the AWS Console,
    you will be presented with a welcome page:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS控制台中，单击屏幕左上角的“服务”菜单，然后通过使用过滤框或单击列表中的服务来选择Lambda。当您首次转到AWS控制台中的Lambda服务页面时，您将看到一个欢迎页面：
- en: '![](assets/9af2ae92-b7f8-4e06-adb2-7b74b844b5cf.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9af2ae92-b7f8-4e06-adb2-7b74b844b5cf.png)'
- en: Clicking on the Create a function button will take us straight to the process
    of launching our first serverless function.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“创建函数”按钮将直接进入启动我们的第一个无服务器函数的过程。
- en: 'There are four steps to creating a function; the first thing we need to do
    is select a blueprint:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 创建函数有四个步骤；我们需要做的第一件事是选择一个蓝图：
- en: '![](assets/6383ef38-2b49-4ed2-b030-e618b1dab251.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6383ef38-2b49-4ed2-b030-e618b1dab251.png)'
- en: 'For the basic hello world function, we are going to be using a pre-built template
    called `hello-world-python`; enter this into the filter and you should be presented
    with two results, one is for Python 2.7 and the second uses Python 3.6:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基本的hello world函数，我们将使用一个名为`hello-world-python`的预构建模板；将其输入到过滤器中，您将看到两个结果，一个是Python
    2.7，另一个使用Python 3.6：
- en: '![](assets/d849d4c8-bb1f-4ba1-961f-eca27f408e18.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d849d4c8-bb1f-4ba1-961f-eca27f408e18.png)'
- en: Selecting `hello-world-python` and then clicking Export will give you the option
    of downloading the code used in the function in the `lambda_function.py` file
    and the template which is used by Lambda during step 3\. This can be found in
    the `template.yaml` file.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`hello-world-python`，然后单击“导出”将为您提供下载用于函数的代码的选项，该代码位于`lambda_function.py`文件中，以及Lambda在第3步中使用的模板。这可以在`template.yaml`文件中找到。
- en: 'The code itself, as you would imagine, is pretty basic. It does nothing other
    than return a value it is passed. If you are not following along, the contents
    of the `lambda_function.py` file are:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 代码本身非常基本，就像你想象的那样。它除了返回传递给它的值之外什么也不做。如果您没有跟随，`lambda_function.py`文件的内容如下：
- en: '[PRE1]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `template.yaml` file contains the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`template.yaml`文件包含以下内容：'
- en: '[PRE2]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, the template file configures both the `Runtime`, which in our
    case is `python2.7`, and some sensible settings for the `MemorySize` and `Timeout`
    values.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，模板文件配置了`Runtime`和一些合理的`MemorySize`和`Timeout`值。
- en: 'To continue to step 2, click on the function name, which for us is `hello-world-python`,
    and you will be taken to the page where we can choose how the function is triggered:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续到第2步，请单击函数名称，对我们来说是`hello-world-python`，您将进入页面，可以选择如何触发函数：
- en: '![](assets/f5f90a24-fbc4-4ee3-b6b0-99be4319790c.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f5f90a24-fbc4-4ee3-b6b0-99be4319790c.png)'
- en: We are not going to be using a trigger just yet and we will look at these in
    a little more detail in the next function we launch; so for now, click on Next.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们暂时不打算使用触发器，我们将在下一个启动的函数中更详细地了解这些内容；所以现在，请单击“下一步”。
- en: 'Step 3 is where we configure our function. There is quite a bit of information
    to enter here, but luckily a lot of the detail we need to enter has been pre-populated
    from the template we looked at earlier, as you can see from the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 第3步是我们配置函数的地方。这里有很多信息要输入，但幸运的是，我们需要输入的许多细节已经从我们之前查看的模板中预填充，如下截图所示：
- en: '![](assets/5d6396f6-b222-44b7-95e6-018b1ee71c9f.png)The details we need to
    enter are as follows: anything with a ***** is required and the *information*
    in italics was pre-populated and can be left as-is.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/5d6396f6-b222-44b7-95e6-018b1ee71c9f.png)我们需要输入的详细信息如下：带有*的是必填项，斜体中的*信息*是预填充的，可以保持不变。'
- en: 'The following list shows all of the form fields and what should be entered:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表显示了所有表单字段及其应输入的内容：
- en: '**Basic information**:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本信息：
- en: '**Name***: `myFirstFunction`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：myFirstFunction
- en: '**Description**: *A starter AWS Lambda function*'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：一个起始的AWS Lambda函数
- en: '**Runtime**: *Python 2.7*'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行时：Python 2.7
- en: '**Lambda function code**:'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda函数代码：
- en: '**Code entry type**: This contains the code for the function, there is no need
    to edit this'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码输入类型：这包含了函数的代码，无需编辑
- en: '**Enable encryption helpers**: Leave unticked'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用加密助手：不选中
- en: '**Environment variables**: Leave empty'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量：留空
- en: '**Lambda function handler and role**:'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda函数处理程序和角色：
- en: '**Handler***: *lambda_function.lambda_handler*'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序：lambda_function.lambda_handler
- en: '**Role***: Leave *Create new role from template(s)* selected'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色：保持选择“从模板创建新角色”
- en: '**Role name***: *myFirstFunctionRole*'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色名称：myFirstFunctionRole
- en: '**Policy templates**: We do not need a policy template for this function, leave
    blank'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略模板：我们不需要为此函数使用策略模板，保持空白
- en: Leave the Tags and Advanced settings at the default values. Once the preceding
    information has been entered, click on the Next button to take us to step 4, which
    is the final step before our function is created.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 将标签和高级设置保持默认值。输入前述信息后，单击“下一步”按钮，进入第4步，这是函数创建之前的最后一步。
- en: Review the details on the page. If you are happy that everything has been entered
    correctly, click on the Create function button at the bottom of the page; if you
    need to change any information, click on the Previous button.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 查看页面上的详细信息。如果您确认所有信息都已正确输入，请单击页面底部的“创建函数”按钮；如果需要更改任何信息，请单击“上一步”按钮。
- en: 'After a few seconds, you will receive a message confirming that your function
    has been created:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，您将收到一条消息，确认您的函数已创建：
- en: '![](assets/0f0cdf16-4af5-47f4-af8e-8ec797b71a31.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0f0cdf16-4af5-47f4-af8e-8ec797b71a31.png)'
- en: 'In the preceding screenshot, there is a Test button. Clicking this will allow
    you to invoke your function. Here you will be able to customize the values posted
    to the function. As you can see from the following screenshot, I have changed
    the values for `key1` and `key2`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，有一个“测试”按钮。单击此按钮将允许您调用函数。在这里，您可以自定义发送到函数的值。如下截图所示，我已更改了`key1`和`key2`的值：
- en: '![](assets/2b2ec257-f2e5-413d-b4e0-0ea12d245b26.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2b2ec257-f2e5-413d-b4e0-0ea12d245b26.png)'
- en: 'Once you have edited the input, clicking on Save and test will store your updated
    input and then invoke the function:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑完输入后，点击“保存并测试”将存储您更新的输入，然后调用该函数：
- en: '![](assets/bf6ec9e2-39d9-4b2c-82b3-6d9d4180daa1.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bf6ec9e2-39d9-4b2c-82b3-6d9d4180daa1.png)'
- en: 'Clicking on Details in the Execution result message will show you both the
    results of the function being invoked and also the resources used:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 点击执行结果消息中的“详细信息”将显示函数被调用的结果以及使用的资源：
- en: '[PRE3]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The report for the request with the `36b2103a-90bc-11e7-a32a-171ef5562e33`
    ID looks like this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 具有`36b2103a-90bc-11e7-a32a-171ef5562e33` ID的请求的报告如下：
- en: '`Duration: 0.26 ms`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`持续时间：0.26毫秒`'
- en: '`Billed Duration: 100 ms`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`计费持续时间：100毫秒`'
- en: '`Memory Size: 128 MB`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`内存大小：128 MB`'
- en: '`Max Memory Used: 19 MB`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`最大内存使用：19 MB`'
- en: As you can see, it took `0.26 ms` for the function to run and we were charged
    the minimum duration of `100 ms` for this. The function could consume up to `128
    MB` of RAM, but we only used `19 MB` during the execution.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，函数运行需要`0.26毫秒`，我们被收取了最低持续时间`100毫秒`。函数最多可以消耗`128 MB`的RAM，但在执行过程中我们只使用了`19
    MB`。
- en: 'Returning to the command line, running the following command again shows that
    our function is now listed:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到命令行，再次运行以下命令会显示我们的函数现在已列出：
- en: '[PRE4]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下：
- en: '![](assets/05a66f97-617a-4692-88b7-e7ebc8f62aac.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/05a66f97-617a-4692-88b7-e7ebc8f62aac.png)'
- en: 'We can also invoke our function from the command line by running the following
    command:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过运行以下命令从命令行调用我们的函数：
- en: '[PRE5]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As you can see from the preceding command, the `aws lambda invoke` command
    requires several flags:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从上述命令中所见，`aws lambda invoke`命令需要几个标志：
- en: '`--invocation-type`: There are three types of invocation:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--invocation-type`：有三种调用类型：'
- en: '`RequestResponse`: This is the default option; it sends the request, which
    in our case is defined in the `--payload` section of the command. Once the request
    has been made, the client waits for a response.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RequestResponse`：这是默认选项；它发送请求，在我们的情况下在命令的`--payload`部分中定义。一旦请求被发出，客户端就会等待响应。'
- en: '`Event`: This sends the request and triggers an event. The client does not
    wait for a response and instead you receive an event ID back.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`事件`：这会发送请求并触发事件。客户端不等待响应，而是会收到一个事件ID。'
- en: '`DryRun`: This calls the function, but never actually executes it—this is useful
    when testing that the details used to invoke the function actually have the correct
    permissions.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DryRun`：这会调用函数，但实际上不执行它——这在测试用于调用函数的详细信息是否具有正确的权限时非常有用。'
- en: '`--function-name`: This is the name of the function we want to invoke.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--function-name`：这是我们要调用的函数的名称。'
- en: '`--log-type`: There is currently a single option here, `Tail`. This returns
    the result of the `--payload`, which is the data we want to send the function;
    typically this will be JSON.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--log-type`：目前只有一个选项，`Tail`。这返回`--payload`的结果，这是我们要发送给函数的数据；通常这将是JSON。'
- en: '`outputfile.txt`: The final part of the command defines where we want to store
    the output of the command; in our case it is a file called `outputfile.txt` which
    is being stored in the current working directory.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputfile.txt`：命令的最后部分定义了我们要存储命令输出的位置；在我们的情况下，这是一个名为`outputfile.txt`的文件，它被存储在当前工作目录中。'
- en: 'When invoking the command from the command line, you should get something like
    the following result:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在从命令行调用命令时，您应该会得到以下结果：
- en: '![](assets/96133eac-6f74-456c-9e4c-a2b589b39a00.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/96133eac-6f74-456c-9e4c-a2b589b39a00.png)'
- en: 'Returning to the AWS Console and remaining on the `myFirstFunction` page, click
    on Monitoring and you will be presented with some basic statistics about your
    function:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到AWS控制台并保持在`myFirstFunction`页面上，点击“监控”将呈现有关函数的一些基本统计信息：
- en: '![](assets/7f872ac0-1026-4e5e-ac11-86d1c549ad0a.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7f872ac0-1026-4e5e-ac11-86d1c549ad0a.png)'
- en: As you can see from the preceding graphs, there are details on how many times
    your function has been invoked, how long it takes, and also if there are any errors.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的图表中可以看出，有关您的函数被调用的次数、所需时间以及是否存在任何错误的详细信息。
- en: 'Clicking on View logs in CloudWatch will open a new tab which lists the log
    streams for `myFirstFunction`. Clicking on the name of the log stream will then
    take you to a page which gives you the results for each time the function has
    been invoked both as testing in the AWS Console and also from the command-line
    client:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 单击CloudWatch中的查看日志将打开一个列出`myFirstFunction`日志流的新标签页。单击日志流的名称将带您到一个页面，该页面会显示每次函数被调用的结果，包括在AWS控制台中进行测试以及从命令行客户端进行调用。
- en: '![](assets/afe2bb09-fee8-448b-a967-23c0bb79cae9.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/afe2bb09-fee8-448b-a967-23c0bb79cae9.png)'
- en: Both the Monitoring page and logs are extremely useful when it comes to debugging
    your Lambda functions.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 监控页面和日志在调试Lambda函数时非常有用。
- en: Microsoft Azure Functions
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微软Azure Functions
- en: 'Next up, we are going to take a look at Microsoft''s serverless offering, Azure
    Functions. Microsoft describes this service as:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下微软的无服务器服务Azure Functions。微软将这项服务描述为：
- en: '"Azure Functions is a solution for easily running small pieces of code, or
    "functions," in the cloud. You can write just the code you need for the problem
    at hand, without worrying about a whole application or the infrastructure to run
    it."'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '"Azure Functions是一个解决方案，可以轻松在云中运行小段代码或“函数”。您可以仅编写您需要解决的问题的代码，而不必担心整个应用程序或运行它的基础架构。"'
- en: Like Lambda, there are several ways your Function can be invoked. In this quick
    walkthrough, we will be deploying a Function which is called using an HTTP request.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 与Lambda一样，您的Function可以通过多种方式被调用。在这个快速演示中，我们将部署一个通过HTTP请求调用的Function。
- en: Prerequisites
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'You will need an Azure account to follow along with this example. If you don''t
    have an account, you can sign up for a free account at [https://azure.microsoft.com/](https://azure.microsoft.com/):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个Azure账户来跟随这个示例。如果您没有账户，可以在[https://azure.microsoft.com/](https://azure.microsoft.com/)上注册一个免费账户：
- en: '![](assets/aaae171e-6f5e-436d-a525-4295a6f8ca25.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aaae171e-6f5e-436d-a525-4295a6f8ca25.png)'
- en: At the time of writing, Microsoft is crediting all new accounts with $200 to
    spend on Azure services, and like AWS, several services have a free tier.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，微软向所有新账户提供了200美元的Azure服务信用额度，就像AWS一样，有几项服务有免费套餐。
- en: While you are credited with $200, you will still need to provide credit card
    details for verification purposes. For more information on the services and limits
    in the free tier, please see [https://azure.microsoft.com/en-gb/free/pricing-offers/](https://azure.microsoft.com/en-gb/free/pricing-offers/).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然您可以获得200美元的信用额度，但您仍需要提供信用卡详细信息以进行验证。有关免费套餐中的服务和限制的更多信息，请参阅[https://azure.microsoft.com/en-gb/free/pricing-offers/](https://azure.microsoft.com/en-gb/free/pricing-offers/)。
- en: Creating a Function app
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Function应用程序
- en: 'All of the work we are going to be doing to create our first Function app will
    be using the web-based control panel. Once you have your account, you should see
    something like the following page:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用基于Web的控制面板来创建我们的第一个Function应用程序。一旦您拥有了账户，您应该会看到类似以下页面：
- en: '![](assets/385debf1-c35f-4010-a79c-7b80a48a9a70.png)One thing you should note
    about the Microsoft Azure control panel is that it scrolls horizontally, so if
    you lose where you are on a page you can typically find your way back to where
    you need to by scrolling to the right.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/385debf1-c35f-4010-a79c-7b80a48a9a70.png)关于微软Azure控制面板的一件事是，它可以水平滚动，因此如果您在页面上迷失了方向，通常可以通过向右滚动找回需要的位置。'
- en: As you can see from the preceding screenshot, there are quite a few options.
    To make a start creating your first Function, you should click on + New at the
    top of the left-hand side menu.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，有相当多的选项。要开始创建您的第一个函数，您应该在左侧菜单顶部单击“+新建”。
- en: 'From here, you will be taken to the Azure Marketplace. Click on Compute and
    then in the list of featured marketplace items you should see Function App. Click
    on this and you will be taken to a form which asks for some basic information
    about the Function you want to create:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，您将进入Azure市场。单击计算，然后在特色市场项目列表中，您应该看到函数应用程序。单击此处，您将进入一个表单，询问您想要创建的函数的一些基本信息：
- en: 'App name: Call this what you want; in my case I called it `russ-test-version`.
    This has to be a unique name and, if your desired App name has already been used
    by another user, you will receive a message that your chosen App name is not available.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序名称：随意命名；在我的案例中，我将其命名为`russ-test-version`。这必须是一个唯一的名称，如果您想要的应用程序名称已经被另一个用户使用，您将收到一条消息，告知您所选的应用程序名称不可用。
- en: 'Subscription: Choose the Azure subscription you would like your Function to
    be launched in.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订阅：选择要在其中启动您的函数的Azure订阅。
- en: 'Resource Group: This will be automatically populated as you type in the App
    name.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源组：在输入应用程序名称时，这将自动填充。
- en: 'Hosting Plan: Leave this at the default option.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管计划：将其保留为默认选项。
- en: 'Location: Choose the region which is closest to you.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置：选择离您最近的地区。
- en: 'Storage: This will automatically be populated based on the App name you give,
    for our purpose leave Create New selected.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储：这将根据您提供的应用程序名称自动填充，为了我们的目的，请保留选择“创建新”。
- en: 'Pin to dashboard: Tick this as it will allow us to quickly find our Function
    once it has been created.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固定到仪表板：选中此项，因为这将使我们能够快速找到我们创建的函数。
- en: 'If you are not following along in your account, my completed form looks like
    the following screenshot:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有在您的帐户中跟随，我的完成表格看起来像下面的屏幕截图：
- en: '![](assets/1e5b5baf-6ff7-407a-b73a-274b3d3f9b6e.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1e5b5baf-6ff7-407a-b73a-274b3d3f9b6e.png)'
- en: 'Once you have filled out the form, click on the Create button at the bottom
    of the form and you will be taken back to your Dashboard. You will receive a notification
    that your Function is being deployed as you can see from the box at the right-hand
    side in the following screenshot:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完表格后，单击表单底部的“创建”按钮，您将被带回到您的仪表板。您将收到一个通知，告知您的函数正在部署，如下图右侧的框中所示：
- en: '![](assets/7b63fff0-90ee-4180-90ce-27e105345252.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7b63fff0-90ee-4180-90ce-27e105345252.png)'
- en: 'Clicking on the square in the Dashboard or on the notification in the top menu
    (the bell icon with the 1 on it) will take you to an Overview page; here you can
    view the status of the deployment:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 单击仪表板中的方框或顶部菜单中的通知（带有数字1的铃铛图标）将带您到概述页面；在这里，您可以查看部署的状态：
- en: '![](assets/f0457e45-0048-4299-b1c0-41d1d882b679.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f0457e45-0048-4299-b1c0-41d1d882b679.png)'
- en: 'Once deployed, you should have an empty Function app ready for you to deploy
    your code into:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 部署后，您应该有一个空的函数应用程序，可以准备将代码部署到其中：
- en: '![](assets/74c2fe59-1540-45cd-a50a-5495c6cc2b05.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/74c2fe59-1540-45cd-a50a-5495c6cc2b05.png)'
- en: 'To deploy some test code, you need to click on the + icon next to Functions
    in the left-hand side menu; this will take you to the following page:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署一些测试代码，您需要在左侧菜单中的函数旁边单击“+”图标；这将带您到以下页面：
- en: '![](assets/b3aeb6d1-3b24-4424-936b-54eaa633c4bd.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b3aeb6d1-3b24-4424-936b-54eaa633c4bd.png)'
- en: 'With Webhook + API and CSharp selected, click on Create this function; this
    will add the following code to your Function app:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 选择Webhook + API和CSharp后，单击“创建此函数”；这将向您的函数应用程序添加以下代码：
- en: '[PRE6]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This code simply reads in the variable `name`, which it has passed via the URL
    and then prints back to the user as `Hello <name>`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码简单地读取变量`name`，它通过URL传递，然后作为`Hello <name>`打印回给用户。
- en: 'We can test this by clicking on the Run button at the top of the page. This
    will execute our Function as well as giving you the output and logs:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过单击页面顶部的“运行”按钮来测试这一点。这将执行我们的函数，并为您提供输出和日志：
- en: '![](assets/53a57b86-99be-44f4-8d83-650bbfdfff5f.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/53a57b86-99be-44f4-8d83-650bbfdfff5f.png)'
- en: 'The logs for the test run look like this:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 测试运行的日志如下：
- en: '[PRE7]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can also view more information on your Function app by clicking on Monitor
    in the inner left-hand side menu. As you can see from the following screenshot,
    we have details on how many times your Function has been called, as well as the
    status of each execution and the duration for each invocation:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过单击左侧菜单中的“监视”来查看有关函数应用的更多信息。从以下屏幕截图中可以看出，我们有关于函数调用次数的详细信息，以及每次执行的状态和持续时间：
- en: '![](assets/17005c7d-9339-4778-9427-4b1d9abc22f5.png)For more detailed information
    on the invocation of your Function app, you can enable Azure Application Insights,
    and for more information on this service, please see [https://azure.microsoft.com/en-gb/services/application-insights/](https://azure.microsoft.com/en-gb/services/application-insights/).'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/17005c7d-9339-4778-9427-4b1d9abc22f5.png)有关函数应用调用的更详细信息，您可以启用Azure应用程序洞察，并且有关此服务的更多信息，请参阅[https://azure.microsoft.com/en-gb/services/application-insights/](https://azure.microsoft.com/en-gb/services/application-insights/)。'
- en: Being able to test within the safety of the Azure Dashboard is all well and
    good, but how do you directly access your Function app?
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 能够在Azure仪表板的安全环境中进行测试是很好的，但是如何直接访问您的函数应用呢？
- en: 'If you click on HttpTriggerCSharp1, which will take you back to your code,
    above the code block you will have a button which says Get function URL, and clicking
    on this will pop up an overlay box with a URL in it. Copy this:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单击HttpTriggerCSharp1，它将带您回到您的代码，在代码块上方，您将有一个按钮，上面写着“获取函数URL”，单击此按钮将弹出一个包含URL的覆盖框。复制这个：
- en: '![](assets/a96cb806-1592-4675-9a54-4bc2b686e4b9.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a96cb806-1592-4675-9a54-4bc2b686e4b9.png)'
- en: 'For me, the URL was:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，URL是：
- en: '`https://russ-test-function.azurewebsites.net/api/HttpTriggerCSharp1?code=2kIZUVH8biwHjM3qzNYqwwaP6O6gPxSTHuybdNZaD36cq3HptD5OUw==`'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://russ-test-function.azurewebsites.net/api/HttpTriggerCSharp1?code=2kIZUVH8biwHjM3qzNYqwwaP6O6gPxSTHuybdNZaD36cq3HptD5OUw==`'
- en: The preceding URL will no longer work as the Function has been removed; it has
    been provided for illustration purposes only, and you should replace it with your
    URL.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的URL将不再起作用，因为函数已被移除；它仅用于说明目的，您应该用您的URL替换它。
- en: To interact with URLs on the command line, I am going to be using HTTPie, which
    is a command-line HTTP client. For more detail on HTTPie, see the project's homepage
    at [https://httpie.org/](https://httpie.org/).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在命令行上与URL交互，我将使用HTTPie，这是一个命令行HTTP客户端。有关HTTPie的更多详细信息，请参阅项目主页[https://httpie.org/](https://httpie.org/)。
- en: 'Call that URL on the command line using HTTPie with the following command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在命令行上调用该URL：
- en: '[PRE8]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This gives us the following result:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我们带来了以下结果：
- en: '![](assets/aef3a83d-dab4-475f-90db-e4af340aa111.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aef3a83d-dab4-475f-90db-e4af340aa111.png)'
- en: 'As you can see from what is returned, our Function app has returned the HttpStatusCode
    BadRequest message. This is because we are not passing the `name` variable. To
    do this, we need to update our command to:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 从返回的内容中可以看出，我们的函数应用返回了HttpStatusCode BadRequest消息。这是因为我们没有传递`name`变量。为了做到这一点，我们需要更新我们的命令为：
- en: '[PRE9]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you would expect, this returns the correct message:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所期望的那样，这将返回正确的消息：
- en: '![](assets/0c2d6785-a9f2-416e-97e5-0fd4ad62f7f9.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0c2d6785-a9f2-416e-97e5-0fd4ad62f7f9.png)'
- en: 'You can also enter the URL in your browser and see the message:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在浏览器中输入URL并查看消息：
- en: '![](assets/22f9d26d-137f-4e5c-a743-6677c6e52752.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/22f9d26d-137f-4e5c-a743-6677c6e52752.png)
- en: The serverless toolkit
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器工具包
- en: Before we finish this chapter, we are going to take a look at the serverless
    toolkit. This is an application that aims to provide a consistent experience when
    it comes to deploying your serverless functions across different cloud providers.
    You can find the service's homepage at [https://serverless.com/.](https://serverless.com/)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成本章之前，我们将看一下无服务器工具包。这是一个旨在在不同的云提供商之间部署无服务器函数时提供一致体验的应用程序。您可以在[https://serverless.com/.](https://serverless.com/)找到服务的主页。
- en: As you can see from the home page, it supports both AWS and Microsoft Azure,
    as well as the Google Cloud Platforms and IBM OpenWhisk. You will also notice
    that there is a Sign Up button; click on this and follow the onscreen prompts
    to create your account.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 从主页上可以看到，它支持AWS和Microsoft Azure，以及Google Cloud平台和IBM OpenWhisk。您还会注意到有一个注册按钮；单击此按钮并按照屏幕提示创建您的帐户。
- en: 'Once signed up, you will receive some very simple instructions on how to install
    the tool and also deploy your first application; let''s follow these now. First
    of all, we need to install the command-line tool by running:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 注册后，您将收到一些非常简单的关于如何安装工具和部署第一个应用程序的说明；让我们现在遵循这些。首先，我们需要通过运行来安装命令行工具：
- en: '[PRE10]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The installation will take a few minutes, and once it is installed you should
    be able to run:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 安装将需要几分钟，一旦安装完成，您应该能够运行：
- en: '[PRE11]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will confirm the version that was installed by the previous command:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这将确认上一个命令安装的版本：
- en: '![](assets/f8a53f70-7d32-454b-9f85-a1af8a3a2a77.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/f8a53f70-7d32-454b-9f85-a1af8a3a2a77.png)
- en: 'Now that the command-line tool is installed and we have confirmed that we can
    get the version number without any errors, we need to log in. To do this, run:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在命令行工具已安装并且我们已确认可以在没有任何错误的情况下获取版本号，我们需要登录。要做到这一点，请运行：
- en: '[PRE12]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This command will open a browser window and take you to a login page where
    you will need to select which account you wish to use:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将打开一个浏览器窗口，并带您到登录页面，您需要选择要使用的帐户：
- en: '![](assets/0a3f479e-2f81-4efa-b354-2b639b5048c0.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/0a3f479e-2f81-4efa-b354-2b639b5048c0.png)
- en: 'As you can see in the preceding screenshot, it knows I last logged into serverless
    using my GitHub account, so clicking this will generate a Verification Code:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，它知道我上次使用GitHub帐户登录到无服务器，因此单击这将生成一个验证码：
- en: '![](assets/9617b99a-c9b2-42ed-b3fd-e19630b3cd2d.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/9617b99a-c9b2-42ed-b3fd-e19630b3cd2d.png)
- en: 'Pasting the code into your Terminal at the prompt and pressing *Enter* on your
    keyboard will then log you in:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码粘贴到终端提示符中，然后按键盘上的*Enter*键将您登录：
- en: '![](assets/98f434e4-34a5-4944-86b8-bb0e3fc183d3.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/98f434e4-34a5-4944-86b8-bb0e3fc183d3.png)
- en: Now that we are logged in, we can create our first project, which is going to
    be another `hello-world` application.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经登录，我们可以创建我们的第一个项目，这将是另一个“hello-world”应用程序。
- en: 'To launch our `hello-world` function in AWS, we must first create a folder
    to hold the artifacts created by the serverless toolkit and change to it; I created
    mine on my `Desktop` using:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 要在AWS中启动我们的“hello-world”函数，我们必须首先创建一个文件夹来保存无服务器工具包创建的工件，并切换到该文件夹；我在我的“桌面”上创建了一个文件夹，使用：
- en: '[PRE13]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To generate the files needed to launch our `hello-world` application, we need
    to run:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成启动我们的“hello-world”应用程序所需的文件，我们需要运行：
- en: '[PRE14]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will return the following message:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回以下消息：
- en: '![](assets/95eebe4f-7ae4-44cb-a4fa-9fbbee44bb72.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/95eebe4f-7ae4-44cb-a4fa-9fbbee44bb72.png)
- en: 'Opening `serverless.yml` in my editor, I can see the following (I have removed
    the comments):'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的编辑器中打开`serverless.yml`，我可以看到以下内容（我已删除了注释）：
- en: '[PRE15]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'I updated the service to be `russ-test-serverless-hello-world`; you should
    choose something unique as well. Once I had saved my updated `serverless.yml`
    file, I ran:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我将服务更新为`russ-test-serverless-hello-world`；您也应该选择一个独特的名称。一旦我保存了更新的`serverless.yml`文件，我就运行了：
- en: '[PRE16]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This, as you may have already guessed, deployed the `hello-world` application
    to AWS:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经猜到，这将`hello-world`应用程序部署到了AWS：
- en: '![](assets/28247467-6cf2-4ed2-8c4d-44ae1e7e48f2.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/28247467-6cf2-4ed2-8c4d-44ae1e7e48f2.png)'
- en: 'Access the endpoint URL using HTTPie:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTTPie访问终端URL：
- en: '[PRE17]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This returns the following JSON:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回以下JSON：
- en: '[PRE18]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Entering the endpoint URL in your browser, (in my case as I am using Safari)
    shows you the RAW output:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中输入终端URL（在我的情况下，我正在使用Safari）会显示原始输出：
- en: '![](assets/9d4a4322-f408-4266-8db3-7f331506ad90.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9d4a4322-f408-4266-8db3-7f331506ad90.png)'
- en: 'Going to the URL mentioned at the very end of the `serverless deploy` command
    gives you an overview of the function you have deployed to Lambda using serverless:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 转到“serverless deploy”命令末尾提到的URL，可以概览您使用serverless部署到Lambda的函数：
- en: '![](assets/c4b72966-2f3f-4a82-8996-cedbb2196a46.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c4b72966-2f3f-4a82-8996-cedbb2196a46.png)'
- en: 'Open the AWS Console by going to [https://console.aws.amazon.com/](https://console.aws.amazon.com/),
    select Lambda from the Services menu, and then change to the region your function
    was launching in; this should show you your function:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 通过转到[https://console.aws.amazon.com/](https://console.aws.amazon.com/)打开AWS控制台，从服务菜单中选择Lambda，然后切换到您的函数启动的区域；这应该会显示您的函数：
- en: '![](assets/def45ba0-8167-4302-aea8-fbcdfcd45caf.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/def45ba0-8167-4302-aea8-fbcdfcd45caf.png)'
- en: At this point, you might scratch your head thinking, *How was it launched in
    my account? I didn't provide any credentials!* The serverless tool is designed
    to use the same credentials as the AWS CLI we installed before we launched our
    first Lambda function—these can be found at `~/.aws/credentials` on your machine.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可能会想，“我的帐户是如何启动的？我没有提供任何凭据！” 无服务器工具旨在使用与我们在启动第一个Lambda函数之前安装的AWS CLI相同的凭据-这些凭据可以在您的计算机上的`~/.aws/credentials`找到。
- en: 'To remove the function, simply run:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除函数，只需运行：
- en: '[PRE19]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: And this will remove everything in your AWS account that the serverless toolkit
    has created.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这将删除无服务器工具包在您的AWS帐户中创建的所有内容。
- en: For more information on how to use the serverless toolkit to launch an Azure
    Function, please see the quick-start guide which can be found at [https://serverless.com/framework/docs/providers/azure/guide/quick-start/](https://serverless.com/framework/docs/providers/azure/guide/quick-start/).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何使用无服务器工具包启动Azure函数的更多信息，请参阅快速入门指南，该指南可以在[https://serverless.com/framework/docs/providers/azure/guide/quick-start/](https://serverless.com/framework/docs/providers/azure/guide/quick-start/)找到。
- en: Problems solved by serverless and Functions as a Service
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器和函数作为服务解决的问题
- en: Even though we have only been launching the most basic applications so far,
    I hope you are starting to see how using serverless could help with the development
    of your applications.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管到目前为止我们只启动了最基本的应用程序，但我希望您开始看到使用无服务器如何有助于开发您的应用程序。
- en: Imagine you have a JavaScript application which is being hosted in an object
    store such as Amazon's S3 service. Your application could be written in, say,
    React ([https://facebook.github.io/react/](https://facebook.github.io/react/))
    or Angular ([https://angular.io/](https://angular.io/)), and both of these technologies
    allow you to load external data using JSON. This data can be requested and delivered
    using a serverless function—combining these technologies allows you to create
    an application that not only has no single point of failure, but also, when using
    public cloud offerings, is a true *you only pay for what you use* application.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你有一个JavaScript应用程序，它托管在像亚马逊的S3服务这样的对象存储中。你的应用程序可以用React（[https://facebook.github.io/react/](https://facebook.github.io/react/)）或Angular（[https://angular.io/](https://angular.io/)）编写，这两种技术都允许你使用JSON加载外部数据。这些数据可以通过无服务器函数请求和传递
    - 结合这些技术可以创建一个应用程序，不仅没有单点故障，而且在使用公共云服务时，是一个真正的*按需付费*应用程序。
- en: As the serverless function is being executed and then is immediately terminated,
    you should not have to worry about where or how it is executed, just that it is.
    This means that your application, in theory, should be scalable and also more
    fault-tolerant than a more traditional server-based application.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 由于无服务器函数被执行然后立即终止，你不应该担心它在哪里或者如何执行，只要它执行了。这意味着你的应用程序理论上应该是可伸缩的，也比传统的基于服务器的应用程序更容错。
- en: For example, if something goes wrong when one of your functions is called, for
    instance, if it crashes or there are resource issues and you know that when your
    function is next called it will be being launched afresh, you don't need to worry
    about your code being executed on a server which is having issues.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果在调用你的一个函数时出现问题，例如，如果它崩溃了或者有资源问题，并且你知道下次调用函数时它将被重新启动，你不需要担心你的代码在有问题的服务器上执行。
- en: Summary
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have taken a very quick look at what is meant by serverless,
    and we have launched and interacted with serverless functions in AWS and also
    Microsoft Azure as well as used a third-party tool, which just happens to be called
    serverless, to create a serverless function in AWS.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们快速了解了什么是无服务器，并在AWS和Microsoft Azure中启动和交互了无服务器函数，还使用了一个名为无服务器的第三方工具，在AWS中创建了一个无服务器函数。
- en: You will have noticed that so far we haven't mentioned Kubernetes at all, which
    you may be thinking for a book entitled *Kubernetes for Serverless Applications*
    is a little strange. Don't worry though; in the next chapter we will be looking
    at Kubernetes in more detail and all will become clear.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能已经注意到我们还没有提到Kubernetes，对于一本名为*用于无服务器应用程序的Kubernetes*的书来说，这可能有点奇怪。不过不用担心，在下一章中我们将更详细地了解Kubernetes，一切将变得清晰起来。
