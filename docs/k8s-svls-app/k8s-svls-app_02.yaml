- en: An Introduction to Kubernetes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes简介
- en: 'As mentioned at the end of the previous chapter, in this chapter we are going
    to look at Kubernetes. We will discuss:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前一章末尾提到的，本章将讨论Kubernetes。我们将讨论：
- en: A brief history of Kubernetes—where did it come from?
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes的简要历史-它从哪里来？
- en: How does it operate?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是如何运作的？
- en: What are the use cases for Kubernetes and who is using it?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes的用例是什么，谁在使用它？
- en: Why would you run serverless on servers?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要在服务器上运行无服务器？
- en: A brief history of Kubernetes
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes的简要历史
- en: 'Before we discuss where Kubernetes came from, we should quickly discuss what
    Kubernetes is. It is pronounced **koo-ber-net****-eez** and sometimes referred
    to as **K8s**. **Kubernetes** is the Greek name for a helmsman or pilot of a ship,
    which is apt when you consider what Kubernetes is designed to do. The project''s
    website, which you can find at [https://kubernetes.io/](https://kubernetes.io/),
    describes it as:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论Kubernetes的起源之前，我们应该快速讨论一下Kubernetes是什么。它的发音是**koo-ber-net****-eez**，有时被称为**K8s**。**Kubernetes**是希腊语，意思是船长或船舵手，考虑到Kubernetes的设计目的，这个名字非常贴切。该项目的网站位于[https://kubernetes.io/](https://kubernetes.io/)，描述了它是：
- en: '"An open-source system for automating deployment, scaling, and management of
    containerized applications."'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: “用于自动化部署、扩展和管理容器化应用的开源系统。”
- en: The project has its roots in an internal project at Google called **Borg**.
    Google has been a longtime user of container technology, long before Docker made
    a splash.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目起源于谷歌内部的一个名为**Borg**的项目。在Docker引起轰动之前，谷歌长期使用容器技术。
- en: Control groups
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制组
- en: Google's own container journey started in 2006 when two of their engineers made
    a start on the **control groups** (**cgroups**)project. This is the Linux kernel
    feature which makes it possible to isolate resources such as RAM, CPU, networking,
    and disk I/O for a collection of processes. cgroups was initially released in
    2007, and in early 2008 the functionality was merged into the Linux kernel mainline
    version 2.6.24.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌自己的容器之旅始于2006年，当时他们的两名工程师开始了**控制组**（**cgroups**）项目。这是Linux内核的一个功能，可以隔离诸如RAM、CPU、网络和磁盘I/O等资源，以供一组进程使用。cgroups最初是在2007年发布的，在2008年初，该功能被合并到Linux内核主线版本2.6.24中。
- en: You can find the release notes for version 2.6.24 of the Linux kernel at [https://kernelnewbies.org/Linux_2_6_24](https://kernelnewbies.org/Linux_2_6_24).
    You can find information about the introduction of cgroups at *point 10* in the
    *Important things* list where it discusses the framework that allows cgroups to
    hook into the kernel.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://kernelnewbies.org/Linux_2_6_24](https://kernelnewbies.org/Linux_2_6_24)找到Linux内核2.6.24版本的发布说明。您可以在*重要事项*列表中的*第10点*找到有关cgroups引入的信息，其中讨论了允许cgroups连接到内核的框架。
- en: lmctfy
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: lmctfy
- en: A few years later, in October 2013, Google released an open source version of
    their own container system called **lmctfy**, which is actually short for **Let
    Me Contain That For You**. This tool is actually what they used on their own servers
    to enable them to run Linux application containers, and it was designed as an
    alternative to LXC.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 几年后的2013年10月，谷歌发布了他们自己的容器系统的开源版本，名为**lmctfy**，实际上是**Let Me Contain That For
    You**的缩写。这个工具实际上是他们在自己的服务器上使用的，用于运行Linux应用容器，它被设计为LXC的替代品。
- en: lmctfy, LXC, and Docker all occupy the same space. To this end, Google actually
    stopped all development on lmctfy in 2015\. The project's GitHub page has an announcement
    that states that Google has been collaborating with Docker and they are porting
    the core concepts of lmctfy to libcontainer.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: lmctfy、LXC和Docker都占据着同样的领域。为此，谷歌实际上在2015年停止了lmctfy的所有开发。该项目的GitHub页面上有一则声明，谷歌一直在与Docker合作，他们正在将lmctfy的核心概念移植到libcontainer中。
- en: Borg
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Borg
- en: 'This is where the Borg project comes in. Google uses containers a lot, and
    when I say a lot I mean *a lot*. In May 2014, Joe Beda from Google gave a presentation
    at Gluecon entitled *Containers At Scale*. There were a few takeaway quotes from
    the presentation such as:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Borg项目的由来。谷歌大量使用容器，我说的是*大量*。2014年5月，谷歌的Joe Beda在Gluecon上做了一个名为*大规模容器*的演讲。演讲中有一些引人注目的引用，比如：
- en: '"Everything at Google runs in a container."'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “谷歌所有的东西都在容器中运行。”
- en: 'And the one that gets talked about the most is:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 而最常谈论的一个是：
- en: '"We start over 2 billion containers per week."'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “我们每周启动超过20亿个容器。”
- en: This works out at around 3,000 per second and, during the talk, it was mentioned
    that the number didn't include any long-running containers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于每秒大约3000个，在演讲中提到，这个数字不包括任何长时间运行的容器。
- en: While Joe went into some detail about how Google was using containers at that
    time, he did not mention anything directly about the Borg project; instead, it
    was simply referred to as a cluster scheduler.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Joe详细介绍了谷歌当时如何使用容器，但他并没有直接提到Borg项目；相反，它只是被称为一个集群调度器。
- en: 'The final takeaway from the presentation was the slide entitled *Declarative
    Over Imperative*, which introduced the following concepts:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 演讲的最后一个要点是题为*声明式优于命令式*的幻灯片，介绍了以下概念：
- en: '**Imperative**: Start this container on that server'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令式：在那台服务器上启动这个容器
- en: '**Declarative**: Run 100 copies of this container with a target of <= 2 tasks
    down at any time'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明式：运行100个此容器的副本，目标是同时最多有2个任务处于停机状态
- en: This concept explains how Google was able to launch those 2 billion containers
    per week without having to really manage well over 2 billion containers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念解释了谷歌是如何能够每周启动超过20亿个容器，而不必真正管理超过20亿个容器。
- en: It wasn't until Google published a paper entitled *Large-scale cluster management
    at Google with Borg* in 2015 that we really got an insight into the practices
    and design decisions that went into the cluster scheduler mentioned by Joe Beda
    the previous year.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 直到2015年谷歌发表了一篇名为《谷歌Borg的大规模集群管理》的论文，我们才真正了解到了Joe Beda在前一年提到的集群调度器的实践和设计决策。
- en: The paper talks about how Google's internal tooling, called Borg, runs thousands
    of jobs, which go to make up pretty much all of Google's applications across clusters
    made up of tens of thousands of machines.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 论文讨论了谷歌内部的工具Borg是如何运行成千上万的作业的，这些作业几乎构成了谷歌所有应用程序的集群，这些集群由成千上万台机器组成。
- en: It then goes on to reveal that customer-facing services such as Google Mail,
    Google Docs, and Google Search are all served from Borg-managed clusters as well
    as their own internal tools. It details the job specification language that users
    can use to declare their desired state, making it easy for users to deploy their
    applications without having to worry about all of the steps needed to deploy their
    application in a highly available configuration across Google's infrastructure.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它揭示了像Google Mail、Google Docs和Google Search这样的面向客户的服务也都是从Borg管理的集群中提供的，以及他们自己的内部工具。它详细介绍了用户可以使用的作业规范语言，以声明他们期望的状态，使用户能够轻松部署他们的应用程序，而不必担心在谷歌基础设施中部署应用程序所需的所有步骤。
- en: I would recommend reading through the paper as it gives an excellent overview
    of how Google approaches its own container services.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议阅读这篇论文，因为它很好地概述了谷歌是如何处理自己的容器服务的。
- en: 'Also, in case you are wondering, Borg was named after the alien race from the
    *Star Trek: The Next Generation* TV show.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果你在想，Borg是以《星际迷航：下一代》电视剧中的外星种族命名的。
- en: Project Seven
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目七
- en: In 2014 Joe Beda, Brendan Burns, and Craig McLuckie were joined by Brian Grant
    and Tim Hockin on Project Seven.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年，Joe Beda、Brendan Burns和Craig McLuckie加入了Brian Grant和Tim Hockin参与了第七号项目。
- en: This project, named after the *Star Trek* character *Seven of Nine*, aimed to
    make a friendlier version of Borg. By the time of the first commit, the project
    had an external name, Kubernetes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目以《星际迷航》中的角色“第七号九”命名，旨在制作一个更友好的Borg版本。在第一次提交时，该项目已经有了一个外部名称，即Kubernetes。
- en: You can see the first commit at [https://github.com/kubernetes/kubernetes/commit/2c4b3a562ce34cddc3f8218a2c4d11c7310e6d56](https://github.com/kubernetes/kubernetes/commit/2c4b3a562ce34cddc3f8218a2c4d11c7310e6d56)
    and the first really stable release, which came four months later, can be found
    at [https://github.com/kubernetes/kubernetes/releases/tag/v0.4](https://github.com/kubernetes/kubernetes/releases/tag/v0.4).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/kubernetes/kubernetes/commit/2c4b3a562ce34cddc3f8218a2c4d11c7310e6d56](https://github.com/kubernetes/kubernetes/commit/2c4b3a562ce34cddc3f8218a2c4d11c7310e6d56)看到第一次提交，第一个真正稳定的版本是在四个月后发布的，可以在[https://github.com/kubernetes/kubernetes/releases/tag/v0.4](https://github.com/kubernetes/kubernetes/releases/tag/v0.4)找到。
- en: Initially, the aim of Kubernetes was to take everything Google had learned from
    Borg and running its large container clusters and open source it as a way of attracting
    customers to Google's own public Cloud Platform—which is why you may still find
    reference to the project's original GitHub page at [https://github.com/GoogleCloudPlatform/kubernetes/](https://github.com/GoogleCloudPlatform/kubernetes/).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，Kubernetes的目标是将谷歌从Borg和运行其大型容器集群中学到的一切开源化，作为吸引客户使用谷歌自己的公共云平台的一种方式——这就是为什么你可能仍然会在项目的原始GitHub页面上找到对该项目的引用[https://github.com/GoogleCloudPlatform/kubernetes/](https://github.com/GoogleCloudPlatform/kubernetes/)。
- en: However, by the time of its 1.0 release in July 2015, Google had seen that it
    had quickly become much more than that and they joined the Linux Foundation, Twitter,
    Intel, Docker, and VMware (to name a few) in forming the Cloud Native Computing
    Foundation. As part of this new partnership, Google donated the Kubernetes project
    as the foundation of the new group.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，到了2015年7月的1.0版本发布时，谷歌已经意识到它已经远远超出了这个范畴，他们加入了Linux基金会、Twitter、英特尔、Docker和VMware（举几个例子），共同组建了云原生计算基金会。作为这一新合作的一部分，谷歌将Kubernetes项目捐赠为新组织的基础。
- en: 'Since then, other projects have joined Kubernetes, such as:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此后，其他项目也加入了Kubernetes，比如：
- en: Prometheus ([https://prometheus.io/](https://prometheus.io/)), originally developed
    by SoundCloud, is a time series database that can be used to store metrics
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prometheus（[https://prometheus.io/](https://prometheus.io/)），最初由SoundCloud开发，是一个可用于存储指标的时间序列数据库。
- en: Fluentd ([https://www.fluentd.org/](https://www.fluentd.org/)) is a data collector
    that allows you to take data from many different sources, filter or normalize
    it, and then route it to a storage engine such as Elasticsearch, MongoDB or Hadoop
    (to name a few)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fluentd（[https://www.fluentd.org/](https://www.fluentd.org/)）是一个数据收集器，允许你从许多不同的来源获取数据，对其进行过滤或规范化，然后将其路由到诸如Elasticsearch、MongoDB或Hadoop（举几个例子）这样的存储引擎。
- en: containerd ([http://containerd.io/](http://containerd.io/)) is an open-source
    container runtime originally developed by Docker to implement Open Container Initiative
    standards
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: containerd（[http://containerd.io/](http://containerd.io/)）是一个由Docker最初开发的开源容器运行时，用于实现Open
    Container Initiative标准。
- en: CoreDNS ([https://coredns.io/](https://coredns.io/)) is a DNS service built
    entirely on plugins, meaning that you can create DNS services that traditionally
    would be extremely complex to configure
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CoreDNS（[https://coredns.io/](https://coredns.io/)）是一个完全基于插件构建的DNS服务，这意味着你可以创建传统上配置极其复杂的DNS服务。
- en: As well as this, new members such as AWS, Microsoft, Red Hat, and Oracle are
    all lending their support and resources to the foundation's projects.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，像AWS、微软、红帽和甲骨文这样的新成员都在支持和为基金会的项目提供资源。
- en: An overview of Kubernetes
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes概述
- en: Now that we have an idea of how Kubernetes came to be, we should walk through
    all of the different components that go to make up a typical Kubernetes cluster.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对Kubernetes的起源有了一个概念，我们应该逐步了解构成典型Kubernetes集群的所有不同组件。
- en: Kubernetes itself is written in Go. While the project's GitHub page shows that
    the project is currently 84.9% Go, the rest, 5.8% HTML, 4.7% Python, and 3.3%
    Shell (with the remainder being configuration/spec files, and so on), are all
    documentation and helper scripts.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes本身是用Go编写的。虽然项目的GitHub页面显示该项目目前84.9%是Go，其余的5.8%是HTML，4.7%是Python，3.3%是Shell（其余是配置/规范文件等），都是文档和辅助脚本。
- en: Go is a programming language developed and open sourced by Google who describes
    it as *A fast, statically typed, compiled language that feels like a dynamically
    typed, interpreted language.* For more information, see [https://golang.org/](https://golang.org/).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Go是一种由Google开发并开源的编程语言，谷歌将其描述为*一种快速、静态类型、编译语言，感觉像一种动态类型、解释语言*。更多信息，请参见[https://golang.org/](https://golang.org/)。
- en: Components
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件
- en: 'There are two main server roles with Kubernetes: masters and nodes; each of
    these roles is made up of several components.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes有两个主要的服务器角色：主服务器和节点；每个角色都由多个组件组成。
- en: Master servers are the brains of the cluster and they make decisions on where
    pods (more on those in the next section) are deployed within the cluster, as well
    as acting on and looking at the health of not only the cluster, but also the pods
    themselves.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 主服务器是集群的大脑，它们决定pod（在下一节中更多介绍）在集群内部部署的位置，并且对集群的健康状况以及pod本身的健康状况进行操作和查看。
- en: 'The core components of a master server are:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 主服务器的核心组件包括：
- en: '`kube-apiserver`: This is the frontend to your Kubernetes control panel; no
    matter what you use to manage your cluster it will be talking directly to this
    API service.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-apiserver`：这是您的Kubernetes控制面板的前端；无论您使用什么来管理您的集群，它都将直接与此API服务通信。'
- en: '`etcd`: `etcd` is a distributed key-value store that Kubernetes uses to store
    the state of your cluster.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etcd`：`etcd`是Kubernetes用来存储集群状态的分布式键值存储。'
- en: '`kube-controller-manager`: This service does behind-the-scenes work to maintain
    your cluster. It looks for nodes joining and leaving the cluster, ensuring that
    the correct number of pods are running, and that they are healthy and so on.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-controller-manager`：此服务在后台工作，以维护您的集群。它查找加入和离开集群的节点，确保正在运行正确数量的pod，并且它们健康等等。'
- en: '`cloud-controller-manager`: This service is new to Kubernetes. It works alongside
    `kube-controller-manager` and its purpose is to interact with the APIs of cloud
    providers such as AWS, Google Cloud, and Microsoft Azure. An example of the tasks
    it performs would be that, if a node was to be removed from the cluster, it would
    check your cloud services API to see if the node still exists. If it does then
    there could be a problem; if not, then more than likely the node has been removed
    because of a scaling event.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloud-controller-manager`：这项服务是Kubernetes的新功能。它与`kube-controller-manager`一起工作，其目的是与AWS、Google
    Cloud和Microsoft Azure等云提供商的API进行交互。它执行的任务示例可能是，如果要从集群中删除一个节点，它将检查您的云服务API，看看节点是否仍然存在。如果存在，则可能会出现问题；如果不存在，则很可能是因为缩放事件而删除了节点。'
- en: '`kube-scheduler`: This chooses where pods should be launched based on a series
    of rules, utilization, and availability.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-scheduler`：根据一系列规则、利用率和可用性选择pod应该在哪里启动。'
- en: Next up we have nodes. Once deployed, the master interacts with components which
    are installed on the nodes to effect change within the cluster; these are where
    your pods run.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们有节点。一旦部署，主节点与安装在节点上的组件进行交互，以在集群内实现变化；这些是您的pod运行的地方。
- en: 'The components that go to make up the nodes are:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 组成节点的组件有：
- en: '`kubelet`: This is the main component that runs on the node. It is responsible
    for accepting instructions from and reporting back to the master servers.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubelet`：这是在节点上运行的主要组件。它负责接受来自主服务器的指令并报告回去。'
- en: '`kube-proxy`: This service helps the cluster communicate. It acts as a basic
    proxy for all network traffic on the nodes, and is capable of configuring TCP/UDP
    forwarding or acting as a TCP/UDP round-robin load balancer to a number of backends.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-proxy`：这项服务有助于集群通信。它充当节点上所有网络流量的基本代理，并能够配置TCP/UDP转发或充当TCP/UDP轮询负载均衡器到多个后端。'
- en: '`docker` or `rkt`: These are the actual container engines on the nodes. The
    `kubelet` service interacts with these to launch and manage the containers running
    on each of your cluster nodes. Throughout the following chapters, we will look
    at launching nodes running both.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker`或`rkt`：这些是节点上实际的容器引擎。`kubelet`服务与它们交互，以启动和管理运行在集群节点上的容器。在接下来的章节中，我们将看到运行这两种节点的示例。'
- en: '`supervisord`: This process manager and monitor maintains the availability
    of other services such as `kubelet`, `docker`, and `rkt` on the nodes.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`supervisord`：这个进程管理器和监视器维护着节点上其他服务的可用性，比如`kubelet`、`docker`和`rkt`。'
- en: '`fluentd`: This service helps with cluster-level logging.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fluentd`：这项服务有助于集群级别的日志记录。'
- en: You may have noticed that the only mention of containers in these services was
    `docker` and `rkt`. Kubernetes does not actually directly interact with your containers;
    instead, it communicates with a pod.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，这些服务中唯一提到容器的是`docker`和`rkt`。Kubernetes实际上并不直接与您的容器交互；相反，它与一个pod通信。
- en: Pods and services
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pods和服务
- en: As already mentioned, Kubernetes does not deploy containers; instead, it launches
    pods. In its most simple form, a pod can actually be a single container; however,
    typically a pod is made up of several containers, storage, and networking.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面提到的，Kubernetes不部署容器；相反，它启动pod。在其最简单的形式中，一个pod实际上可以是一个单一的容器；然而，通常一个pod由多个容器、存储和网络组成。
- en: The following is meant to be illustrative and not a practical example; we will
    be working through a practical example in the next chapter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容仅供说明，不是一个实际的例子；我们将在下一章中通过一个实际的例子来进行讲解。
- en: 'Think of a pod as a complete application; for example, if you were running
    a simple web application it would probably be running a single NGINX container—the
    pod definition file for this would look something like the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 把一个pod想象成一个完整的应用程序；例如，如果你运行一个简单的web应用程序，它可能只运行一个NGINX容器——这个pod的定义文件将看起来像下面这样：
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, we are providing some simple metadata about our pod, which in
    this case is just the name so we can identify it. We then have a single container
    defined, which is running the latest NGINX image from the Docker hub and port
    `8080` is exposed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们提供了关于我们的pod的一些简单元数据，这种情况下只是名称，这样我们就可以识别它。然后我们定义了一个单一的容器，它正在运行来自Docker
    hub的最新NGINX镜像，并且端口`8080`是开放的。
- en: 'As it stands, this pod is quite useless as we are only going to display a Welcome
    to nginx! page. Next up, we need to add a volume to store our website data in.
    To do this, our pod definition file would look like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 就目前而言，这个pod是相当无用的，因为我们只打算显示一个欢迎页面。接下来，我们需要添加一个卷来存储我们网站的数据。为了做到这一点，我们的pod定义文件将如下所示：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, we are now creating a volume called `web-data` and mounting
    it read-only at `/srv/www`, which is the default web root on our NGINX container.
    It is still a little pointless as our volume is empty, meaning that all our visitors
    will see is a 404 page.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们现在正在创建一个名为`web-data`的卷，并将其以只读方式挂载到`/srv/www`，这是我们NGINX容器上的默认网站根目录。但这还是有点毫无意义，因为我们的卷是空的，这意味着我们的所有访问者将只看到一个404页面。
- en: 'Let''s add a second container, which will sync our website''s HTML from an
    Amazon S3 bucket:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加第二个容器，它将从Amazon S3存储桶同步我们网站的HTML：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we have two containers: the NGINX one and now a container running the `s3
    sync` command ([https://github.com/ocastastudios/docker-sync-s3/](https://github.com/ocastastudios/docker-sync-s3/)).
    This will copy all of our website data from the Amazon S3 bucket called `my-awesome-website`
    to the volume that is also being shared with the NGINX container. This means we
    now have a website; note that this time, as we want to write to the volume, we
    are not mounting it read-only.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两个容器：一个是NGINX，现在还有一个运行`s3 sync`命令的容器（[https://github.com/ocastastudios/docker-sync-s3/](https://github.com/ocastastudios/docker-sync-s3/)）。这将把我们网站的所有数据从名为`my-awesome-website`的Amazon
    S3存储桶复制到与NGINX容器共享的卷中。这意味着我们现在有一个网站；请注意，这一次，因为我们想要写入卷，我们不会将其挂载为只读。
- en: So far, so good, you might be thinking to yourself; we have a pod serving our
    website that is being deployed from an Amazon S3 bucket, which is all true. However,
    we have not quite finished. We have a pod running, but we need to expose that
    pod to the network to be able to access it in a browser.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能会想到自己；我们有一个从Amazon S3存储桶部署的网站服务的pod，这一切都是真实的。然而，我们还没有完全完成。我们有一个正在运行的pod，但我们需要将该pod暴露给网络，以便在浏览器中访问它。
- en: 'To do this, we need to launch a service. For our example, the service file
    would look something like:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要启动一个服务。对于我们的示例，服务文件看起来可能是这样的：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the service definition looks similar to the pod one. We are
    setting a name using the metadata section. We are then selecting our NGINX pod
    and mapping port `80` to port `8080`, which is what our pod is listening on.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，服务定义看起来与pod的定义类似。我们使用元数据部分设置名称。然后我们选择我们的NGINX pod，并将端口`80`映射到端口`8080`，这是我们的pod正在侦听的端口。
- en: As already mentioned, we will look at this in more detail in the next chapter
    when we launch our first Kubernetes cluster, but for now, this should give you
    a good idea of how Kubernetes hangs together.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当我们启动第一个Kubernetes集群时，我们将在下一章更详细地讨论这个问题，但现在，这应该让你对Kubernetes的运作方式有一个很好的了解。
- en: Workloads
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作负载
- en: In the previous section, we looked at pods and services. While these can be
    launched manually, you also can use controllers to manage your pods. These controllers
    allow for different types of workload to be executed. We are going to take a quick
    look at the different types of controller and also discuss when you would use
    them.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们看了pod和服务。虽然这些可以手动启动，但你也可以使用控制器来管理你的pod。这些控制器允许执行不同类型的工作负载。我们将快速看一下不同类型的控制器，还讨论何时使用它们。
- en: ReplicaSet
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 副本集
- en: A ReplicaSet can be used to launch and maintain a number of copies of the the
    same pod. For example, using the NGINX pod we discussed in the previous section,
    we could create a ReplicaSet that launches three copies of the same pod. Traffic
    could then be load-balanced between the three pods.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ReplicaSet可用于启动和维护相同pod的多个副本。例如，使用我们在上一节中讨论的NGINX pod，我们可以创建一个ReplicaSet，启动三个相同pod的副本。然后可以在这三个pod之间进行负载均衡。
- en: Our three pods can be spread across multiple hosts, meaning that, if a host
    wants to disappear for any reason, taking one of our pods out of service, it will
    automatically be replaced on a healthy node. You can also use a ReplicaSet to
    both automatically and manually add and remove pods.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的三个pod可以分布在多个主机上，这意味着，如果一个主机因任何原因消失，将导致我们的一个pod停止服务，它将自动在健康节点上被替换。你还可以使用ReplicaSet来自动和手动地添加和删除pod。
- en: Deployments
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署
- en: One thing you may be thinking you will be able to do with a ReplicaSet is rolling
    upgrades and rollbacks. Unfortunately, ReplicaSets can only replicate the same
    version of a pod; luckily, this is where deployments come in.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会认为使用 ReplicaSet 可以进行滚动升级和回滚。不幸的是，ReplicaSets 只能复制相同版本的 pod；幸运的是，这就是部署的用武之地。
- en: 'A deployment controller is designed to update a ReplicaSet or pod. Lets use
    NGINX as an example. As you can see from the following definition, we have `3`
    replicas all running NGINX version `1.9.14`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 部署控制器旨在更新 ReplicaSet 或 pod。让我们以 NGINX 为例。正如您从以下定义中所看到的，我们有 `3` 个副本都在运行 NGINX
    版本 `1.9.14`：
- en: '[PRE4]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`kubectl` is the command-line client for Kubernetes; we will be looking at
    this in more detail in our next chapter.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubectl` 是 Kubernetes 的命令行客户端；我们将在下一章中更详细地讨论这个问题。'
- en: 'We could deploy this using the following command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令进行部署：
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now say we want to update the version of the NGINX image used. We simply need
    to run the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们想要更新使用的 NGINX 图像的版本。我们只需要运行以下命令：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will update each pod in turn until all of the pods are running the new
    version of NGINX.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这将逐个更新每个 pod，直到所有的 pod 都运行新版本的 NGINX。
- en: StatefulSets
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StatefulSets
- en: 'This controller is new to Kubernetes and has been designed to replace PetSets.
    As you may have guessed by the name, pods maintain their state as part of a deployment.
    They are designed to have:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这个控制器是 Kubernetes 中的新功能，旨在取代 PetSets。正如您可能从名称中猜到的那样，pod 作为部署的一部分维护其状态。它们被设计为具有：
- en: Consistent unique network identifiers throughout the pod's life cycle
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在整个 pod 生命周期中保持一致的唯一网络标识符
- en: Persistent storage
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久存储
- en: Graceful deployment and scaling executed in the order you define
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照您定义的顺序执行的优雅部署和扩展
- en: User-defined and controlled automated rolling updates
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户定义和控制的自动滚动更新
- en: So while there is a change in name, you should think of StatefulSets as pets
    and ReplicaSets as cattle.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，虽然名称有所变化，但您应该将 StatefulSets 视为宠物，将 ReplicaSets 视为牲畜。
- en: Kubernetes use cases
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes 使用案例
- en: As we have already touched upon in this chapter, Kubernetes can run pretty much
    anywhere, from just your local machine (which we will cover in our next chapter),
    from your on-premise hardware of virtual machine infrastructure to potential spanning
    hundreds of public cloud instances in AWS, Microsoft Azure, or Google Cloud. In
    fact, you could even span multiple environments with your Kubernetes cluster.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本章中已经提到的，Kubernetes 几乎可以在任何地方运行，从您的本地机器（我们将在下一章中介绍），到您的本地硬件或虚拟机基础设施，甚至可能跨越
    AWS、Microsoft Azure 或 Google Cloud 的数百个公共云实例。事实上，您甚至可以在 Kubernetes 集群中跨多个环境。
- en: This means that you get a consistent experience no matter where you are running
    your application, but also get to take advantage of your underlying platform's
    features, such as load balancing, persistent storage, and auto scaling, without
    have to really design your application to be aware it is running on, say, AWS
    or Microsoft Azure.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着无论您在何处运行应用程序，都会获得一致的体验，但也可以利用底层平台的功能，比如负载平衡、持久存储和自动扩展，而无需真正设计应用程序以意识到它是在运行，比如在
    AWS 或 Microsoft Azure 上。
- en: One of the common threads you will notice when reading through success stories
    is that people are talking about not being locked into one particular vendor.
    As Kubernetes is open source, they are not locked into any licensing costs. If
    they have a problem or want to add functionality, they are able to dive straight
    into the source code and make changes; they can also contribute any changes they
    make back to the project via a pull request.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读成功案例时你会注意到的一个共同点是，人们谈论的是不被锁定在一个特定的供应商上。由于Kubernetes是开源的，他们不会被任何许可成本所限制。如果他们遇到问题或想要添加功能，他们可以直接深入源代码进行更改；他们也可以通过拉取请求将他们所做的任何更改贡献回项目中。
- en: Also, as already discussed, using Kubernetes allows them to not get locked into
    any one particular platform vendor or architecture. This is because it is reasonable
    to assume Kubernetes will perform in exactly the same way when installed on other
    platforms. Because of this, all of a sudden you are able to take your application
    and move it between providers with relative ease.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，正如前面讨论的，使用Kubernetes使他们不会被锁定在任何一个特定的平台供应商或架构上。这是因为可以合理地假设Kubernetes在安装在其他平台时会以完全相同的方式运行。因此，突然之间，您可以相对轻松地将您的应用程序在不同提供商之间移动。
- en: Another common use case is operations teams using Kubernetes as an **Infrastructure
    as a Service** (**IaaS**) platform. This allows them to offer their developers
    resources they can consume via APIs, the web, and CLIs, meaning that they can
    easily hook into their own workflows. It also provides a consistent environment
    for local development, all the way from staging or **user acceptance testing**
    (**UAT**) to eventually running their applications in production.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的用例是运维团队将Kubernetes用作基础设施即服务（IaaS）平台。这使他们能够通过API、Web和CLI向开发人员提供资源，这意味着他们可以轻松地融入自己的工作流程。它还为本地开发提供了一个一致的环境，从暂存或用户验收测试（UAT）到最终在生产环境中运行他们的应用程序。
- en: This is part of the reason why using Kubernetes to execute your serverless workloads
    is a good idea. You are not locked in by any one provider, such as AWS or Microsoft
    Azure. In fact, you should think of Kubernetes as a cloud platform like the ones
    we looked at in [Chapter 1](37d92482-56fd-4329-8b81-01acc97e9c0c.xhtml), *The
    Serverless Landscape*; it has a web-based console, an API, and a command-line
    client.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是为什么使用Kubernetes执行无服务器工作负载是一个好主意的部分原因。您不会被任何一个提供商锁定，比如AWS或Microsoft Azure。事实上，您应该把Kubernetes看作是一个云平台，就像我们在[第1章](37d92482-56fd-4329-8b81-01acc97e9c0c.xhtml)中看到的那些；它有一个基于Web的控制台，一个API和一个命令行客户端。
- en: References
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'There are several case studies about Kubernetes where users go into detail
    on their journey with using Kubernetes:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Kubernetes的几个案例研究，用户详细介绍了他们在使用Kubernetes过程中的经历：
- en: '**Wink**: [https://kubernetes.io/case-studies/wink/](https://kubernetes.io/case-studies/wink/)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wink**：[https://kubernetes.io/case-studies/wink/](https://kubernetes.io/case-studies/wink/)'
- en: '**Buffer**: [https://kubernetes.io/case-studies/buffer/](https://kubernetes.io/case-studies/buffer/)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Buffer**：[https://kubernetes.io/case-studies/buffer/](https://kubernetes.io/case-studies/buffer/)'
- en: '**Ancestry**: [https://kubernetes.io/case-studies/ancestry/](https://kubernetes.io/case-studies/ancestry/)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ancestry**：[https://kubernetes.io/case-studies/ancestry/](https://kubernetes.io/case-studies/ancestry/)'
- en: '**Wikimedia Foundation**: [https://kubernetes.io/case-studies/wikimedia/](https://kubernetes.io/case-studies/wikimedia/)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wikimedia基金会**：[https://kubernetes.io/case-studies/wikimedia/](https://kubernetes.io/case-studies/wikimedia/)'
- en: 'There are also talks, interviews, and presentations from the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 还有来自以下内容的讨论、采访和演示：
- en: '**The New Times**: [https://www.youtube.com/watch?v=P5qfyv_zGcU](https://www.youtube.com/watch?v=P5qfyv_zGcU)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**The New Times**：[https://www.youtube.com/watch?v=P5qfyv_zGcU](https://www.youtube.com/watch?v=P5qfyv_zGcU)'
- en: '**Monzo**: [https://www.youtube.com/watch?v=YkOY7DgXKyw](https://www.youtube.com/watch?v=YkOY7DgXKyw)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蒙佐：[https://www.youtube.com/watch?v=YkOY7DgXKyw](https://www.youtube.com/watch?v=YkOY7DgXKyw)
- en: '**Goldman Sachs**: [https://blogs.wsj.com/cio/2016/02/24/big-changes-in-goldmans-software-emerge-from-small-containers/](https://blogs.wsj.com/cio/2016/02/24/big-changes-in-goldmans-software-emerge-from-small-containers/)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高盛：[https://blogs.wsj.com/cio/2016/02/24/big-changes-in-goldmans-software-emerge-from-small-containers/](https://blogs.wsj.com/cio/2016/02/24/big-changes-in-goldmans-software-emerge-from-small-containers/)
- en: Finally, you can read more about the Cloud Native Computing Foundation at  [https://www.cncf.io/](https://www.cncf.io/).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以在[https://www.cncf.io/](https://www.cncf.io/)了解更多关于Cloud Native Computing
    Foundation的信息。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we spoke a lot about where Kubernetes came from and we also  covered
    some of its use cases. We also looked at some of the basic functionality.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们谈到了Kubernetes的起源，并介绍了一些其使用案例。我们还了解了一些基本功能。
- en: In the next chapter, we are going to get hands-on with Kubernetes by installing
    Minikube locally. Once we have our local Kubernetes installation, we will be ready
    to proceed to [Chapter 4](f1b36345-157f-4e54-970c-5f948110ad0f.xhtml), *Introducing
    Kubeless Functioning*, where we will start to deploy our first serverless functions
    on Kubernetes.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过在本地安装Minikube来亲自体验Kubernetes。一旦我们安装好了本地的Kubernetes，我们就可以继续进行[第四章](f1b36345-157f-4e54-970c-5f948110ad0f.xhtml)，“介绍Kubeless功能”，在那里我们将开始在Kubernetes上部署我们的第一个无服务器函数。
