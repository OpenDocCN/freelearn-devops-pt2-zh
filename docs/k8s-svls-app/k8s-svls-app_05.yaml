- en: Using Funktion for Serverless Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Funktion进行无服务器应用程序
- en: 'Before we move on to launching a Kubernetes cluster in a public cloud, we are
    going to take a look at one more local example; this time we will be looking at
    Funktion. We will be covering the following subjects:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续在公共云中启动Kubernetes集群之前，我们将再看一个本地示例；这次我们将看一下Funktion。我们将涵盖以下主题：
- en: Introducing Funktion
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Funktion
- en: Installing and configuring Funktion
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置Funktion
- en: Running our first function using Funktion
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Funktion运行我们的第一个函数
- en: A Twitter flow
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter流
- en: Before we walk through installing and configuring Funktion, we should take a
    moment to discuss what it does, as it is a little different from the other frameworks
    covered in this book.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始安装和配置Funktion之前，我们应该花点时间讨论一下它的功能，因为它与本书中涵盖的其他框架有些不同。
- en: Introducing Funktion
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Funktion
- en: Funktion's tagline describes it as event-based Lambda programming for Kubernetes.
    On the face of it, Funktion seems pretty close to Kubeless and the other Serverless
    frameworks we have discussed in previous chapters. However, it has its own twist
    which sets it apart from the other frameworks we are looking at.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Funktion的标语将其描述为基于事件的Kubernetes Lambda编程。从表面上看，Funktion似乎与Kubeless和我们在前几章讨论过的其他无服务器框架非常接近。然而，它有自己的特色，使其与我们正在研究的其他框架有所不同。
- en: 'Most of the serverless functions we are looking at support two basic event
    types:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在研究的大多数无服务器函数都支持两种基本事件类型：
- en: '**HTTP**: This is where data is passed to the framework using a standard HTTP
    request; typically the data will be posted as a JSON object'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTTP**：这是通过标准HTTP请求将数据传递给框架的地方；通常数据将被发布为JSON对象'
- en: '**Subscription**: This is where the framework listens for topics in an event
    stream, for example, Kubeless uses Apache Kafka ([https://kafka.apache.org/](https://kafka.apache.org/))'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订阅**：这是框架监听事件流中的主题的地方，例如，Kubeless使用Apache Kafka ([https://kafka.apache.org/](https://kafka.apache.org/))'
- en: Funktion expands on the number of event types—in fact, it supports around 200
    different types of event. That is a quite a jump! It achieves this using Apache
    Camel ([https://camel.apache.org/](https://camel.apache.org/)). Apache Camel is
    an open source Java framework that acts as plumbing for developers, allowing them
    to both ingest and publish data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Funktion扩展了事件类型的数量 - 实际上，它支持大约200种不同类型的事件。这是一个相当大的飞跃！它使用Apache Camel ([https://camel.apache.org/](https://camel.apache.org/))
    来实现这一点。Apache Camel是一个开源的Java框架，作为开发人员的管道，允许他们摄取和发布数据。
- en: 'To give you an idea of some of the event streams that are supported by Apache
    Camel, and therefore Funktion, here are some of the highlights:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让您了解Apache Camel和因此Funktion支持的一些事件流，以下是一些亮点：
- en: AWS-SNS support for working with Amazon's **Simple Notification Service** (**SNS**)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS-SNS支持与亚马逊的**简单通知服务**（**SNS**）一起使用
- en: Braintree allows for interaction with the Braintree payment gateway service
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Braintree允许与Braintree支付网关服务进行交互
- en: etcd allows you to interact with the etcd key value store
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: etcd允许您与etcd键值存储进行交互
- en: Facebook opens up the full Facebook API
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Facebook开放了完整的Facebook API
- en: GitHub allows you to listen for events from GitHub
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub允许您监听来自GitHub的事件
- en: Kafka—like Kubeless, you can subscribe to Kafka streams
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kafka - 像Kubeless一样，您可以订阅Kafka流
- en: Twitter gives you the ability to listen out for hashtags, posts, and more
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twitter让您能够监听标签、帖子等
- en: There are numerous others such as LinkedIn, Slack, various SQL and NoSQL databases,
    file services such as S3 from AWS, Dropbox, and Box, to name but a few.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他服务，如LinkedIn、Slack、各种SQL和NoSQL数据库、来自AWS的S3的文件服务、Dropbox和Box等等。
- en: All of this choice makes it a very good proposition compared to the other frameworks
    we have been and will be looking at.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些选择使其与我们一直在研究和将要研究的其他框架相比，成为一个非常好的选择。
- en: There are several different components that make up a Funktion deployment. To
    start with we have a **function**; this is the code itself, which is managed by
    Kubernetes ConfigMap.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Funktion部署由几个不同的组件组成。首先是一个**函数**；这就是代码本身，由Kubernetes ConfigMap管理。
- en: A function by itself is not very useful as it only exists as data within a ConfigMap.
    Because of this, we need a **runtime**, a Kubernetes deployment that takes the
    function and executes it when called. Runtimes are automatically created when
    the Funktion operator (more on that in a little while) detects that a new function
    is added.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 单独的函数本身并不是很有用，因为它只存在于ConfigMap中。因此，我们需要一个**运行时**，一个在调用时执行函数的Kubernetes部署。当Funktion操作员（稍后会详细介绍）检测到添加了新函数时，将自动创建运行时。
- en: Next, we have a **connector**; this is a representation of an event source such
    as the ones we discussed earlier in this section—it contains information on the
    event type, the configuration (such as API credentials), and also data search
    parameters.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有一个**连接器**；这是一个事件源的表示，就像我们在本节前面讨论的那些一样——它包含有关事件类型、配置（如API凭据）以及数据搜索参数的信息。
- en: Then we have **flow**; this is a sequence of steps that could be consuming events
    from a connector that invokes a function.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有**流程**；这是一系列步骤，可以从调用函数的连接器中消耗事件。
- en: Finally, we have the **Funktion** operator. This is a pod running in Kubernetes
    that monitors all of the components that make up our Funktion deployments, such
    as function, runtime, connector, and flow. It is responsible for creating the
    Kubernetes services that provide the Funktion functionality.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有**Funktion**操作员。这是在Kubernetes中运行的一个pod，监视构成我们的Funktion部署的所有组件，如函数、运行时、连接器和流程。它负责创建提供Funktion功能的Kubernetes服务。
- en: Funktion is open source and is released under Apache License 2.0; it was developed
    by fabric8, which is an upstream project for Red Hat's JBoss Middleware platform.
    fabric8 itself is a Java-focused microservice platform based on Docker, Kubernetes,
    and Jenkins. It also works well with Red Hat's own OpenShift platform.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Funktion是开源的，根据Apache许可证2.0发布；它是由fabric8开发的，fabric8是Red Hat的JBoss中间件平台的上游项目。fabric8本身是一个基于Docker、Kubernetes和Jenkins的面向Java的微服务平台。它也与Red
    Hat自己的OpenShift平台很好地配合。
- en: Now that we have a little bit of background about how Funktion differs from
    the other frameworks, we can look at installing it on our single-node Kubernetes
    cluster.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对Funktion与其他框架的区别有了一些背景了，我们可以看看如何在我们的单节点Kubernetes集群上安装它。
- en: Installing and configuring Funktion
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Funktion
- en: There are three steps to get up-and-running with Funktion. First, we need to
    install the command line. This is where the bulk of the commands that deploy and
    manage our Funktion deployments will be entered. Once the command-line client
    is installed we can launch our single-node Kubernetes cluster using Minikube,
    before then using the Funktion CLI to bootstrap our environment.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Funktion有三个步骤。首先，我们需要安装命令行。这是大部分部署和管理我们的Funktion部署的命令将被输入的地方。一旦命令行客户端安装完成，我们可以使用Minikube启动我们的单节点Kubernetes集群，然后使用Funktion
    CLI引导我们的环境。
- en: The command-line client
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行客户端
- en: Like a lot of the frameworks we are covering, Funktion is written in Go. This
    means that there are standalone executables for our three platforms.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们正在介绍的许多框架一样，Funktion是用Go语言编写的。这意味着我们的三个平台都有独立的可执行文件。
- en: However, at the time of writing, there is no installer available using either
    Homebrew on macOS or Chocolatey on Windows 10 Professional, meaning that we will
    be doing a manual installation on all three platforms.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在撰写本文时，无论是在macOS上使用Homebrew还是在Windows 10专业版上使用Chocolatey，都没有可用的安装程序，这意味着我们将在所有三个平台上进行手动安装。
- en: The executables are available from the project's releases page on GitHub, which
    you can find at [https://github.com/funktionio/funktion/releases/](https://github.com/funktionio/funktion/releases/).
    At the time of writing, the current version is 1.0.14 so the following instructions
    will cover the installation of that version; if you need to install a later version
    then please replace the version number in the following commands.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 可从GitHub项目的发布页面上获取可执行文件，网址为[https://github.com/funktionio/funktion/releases/](https://github.com/funktionio/funktion/releases/)。在撰写本文时，当前版本为1.0.14，因此以下说明将涵盖该版本的安装；如果需要安装更新版本，请在以下命令中替换版本号。
- en: Let's start by working through how to install on macOS.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从如何在macOS上安装开始。
- en: macOS 10.13 High Sierra
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS 10.13 High Sierra
- en: 'Installing on macOS is simple, as the project has published uncompressed standalone
    executables. All we need to do is download the right package and make it executable.
    To do this, run the following commands:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上安装很简单，因为该项目已发布了未压缩的独立可执行文件。我们只需要下载正确的软件包并使其可执行。要做到这一点，请运行以下命令：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that the command-line tool is installed we can test it by running the following
    command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，命令行工具已安装，我们可以通过运行以下命令来测试它：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The Funktion version will be returned as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Funktion版本将返回如下：
- en: '![](assets/684fc742-aa4d-49c0-83bd-4ab22703661d.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/684fc742-aa4d-49c0-83bd-4ab22703661d.png)'
- en: 'As you can see, while the installation process is quite simple there is a downside
    to the package not being available within Homebrew. If it was, then it would be
    easier to update to later versions as Homebrew takes care of checking for and
    installing upgrades whenever you run:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，虽然安装过程非常简单，但软件包不在Homebrew中可用也有一个缺点。如果在Homebrew中可用，那么更新到较新版本将更容易，因为Homebrew会在您运行时负责检查和安装升级：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As it stands, you would have to remove the current version and download the
    new version in its place if you needed to upgrade.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，如果需要升级，您将不得不删除当前版本并下载新版本来替换它。
- en: Windows 10 Professional
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows 10专业版
- en: 'The process for installing the Funktion command-line client on Windows is similar
    to that of macOS. First of all, open a PowerShell window as the admin user by
    selecting Run as Administrator from the PowerShell menu in the taskbar. Once open,
    you should see that you are in the folder `C:\WINDOWS\system32`; if you aren''t,
    then run:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上安装Funktion命令行客户端的过程与macOS类似。首先，以管理员用户身份打开PowerShell窗口，方法是从任务栏中的PowerShell菜单中选择以管理员身份运行。一旦打开，您应该看到您在文件夹`C:\WINDOWS\system32`中；如果没有，请运行：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once you are in the in the `C:\WINDOWS\system32` folder run the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在`C:\WINDOWS\system32`文件夹中，请运行以下命令：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You should be able to then run the following command to check the version of
    the Funktion command-line client installed by running:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您应该能够通过运行以下命令来检查已安装的Funktion命令行客户端的版本：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The Funktion version will be returned as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Funktion版本将返回如下：
- en: '![](assets/ece541a5-0e24-42fb-83f1-c3578a9c610e.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ece541a5-0e24-42fb-83f1-c3578a9c610e.png)'
- en: Again, as we have not used a package manager to install Funktion upgrading,
    to do so you will have to remove the old executable and then repeat the installation
    process, making sure to update the version number in the URL to reflect your desired
    version.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，由于我们没有使用软件包管理器来安装Funktion，因此如果要升级，您将不得不删除旧的可执行文件，然后重复安装过程，并确保更新URL中的版本号以反映您所需的版本。
- en: Ubuntu 17.04
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu 17.04
- en: 'Lastly, we have Ubuntu 17.04\. The installation process is pretty much the
    same as the commands we executed for macOS. However, making sure that we download
    the correct executable and also that we use the `sudo` command as the permissions
    on the `/usr/local/bin` folder is slightly different between the operating systems:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有Ubuntu 17.04。安装过程与我们为macOS执行的命令基本相同。但是，要确保我们下载正确的可执行文件，并且在`/usr/local/bin`文件夹的权限在操作系统之间略有不同时，我们还需要使用`sudo`命令：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once downloaded and made executable you should be able to run:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下载并使其可执行后，您应该能够运行：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should see something like the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似以下的内容：
- en: '![](assets/05a226e2-1ff8-4f7a-8654-2beb75cd8fcd.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/05a226e2-1ff8-4f7a-8654-2beb75cd8fcd.png)'
- en: Now that we have the command-line client installed on our three operating systems
    we can progress with the deployment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在三个操作系统上都安装了命令行客户端，我们可以继续部署。
- en: Launching a single-node Kubernetes cluster
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动单节点Kubernetes集群
- en: You may have noticed that we have again found ourselves in a position where
    we can now use the same command on whichever operating system you have used. This
    means that the remainder of the commands in the chapter will be able to run on
    all three of our target operating systems.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们再次发现自己处于一个位置，现在可以在任何操作系统上使用相同的命令。这意味着本章剩余的命令将能够在我们的三个目标操作系统上运行。
- en: 'Before we launch our single-node Kubernetes cluster using Minikube, you can
    check to see if there are any updates by running the following commands. macOS
    10.13 High Sierra users can run:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Minikube启动我们的单节点Kubernetes集群之前，可以通过运行以下命令检查是否有任何更新。macOS 10.13 High Sierra用户可以运行：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then to check and update Minikube, run the following commands, starting with:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要检查和更新Minikube，请运行以下命令，从以下开始：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This will present you with a list of the packages that can be updated. If Minikube
    is listed, run the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将向您呈现可以更新的软件包列表。如果Minikube在列表中，请运行以下命令：
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Windows 10 Professional users can run:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 10专业版用户可以运行：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Ubuntu 17.04 users will need to check the release page details in [Chapter 3](7836cfd9-bce3-4d77-9331-f8dda5a31999.xhtml),
    *Installing Kubernetes Locally*, remove the old binaries, and repeat the installation
    process using the newer releases.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 17.04用户需要检查[第3章](7836cfd9-bce3-4d77-9331-f8dda5a31999.xhtml)中的发布页面详细信息，*在本地安装Kubernetes*，删除旧的二进制文件，并使用更新的版本重复安装过程。
- en: 'Once you have checked for updates to Minikube you can launch your cluster by
    running:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您检查了Minikube的更新，可以通过运行以下命令启动您的集群：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As per [Chapter 3](7836cfd9-bce3-4d77-9331-f8dda5a31999.xhtml), *Installing
    Kubernetes Locally* and [Chapter 4](f1b36345-157f-4e54-970c-5f948110ad0f.xhtml),
    *Introducing Kubeless Functioning*, this will launch the single-node Kubernetes
    cluster and configure your local Kubernetes client to interact with it. If you
    have updated Minikube, you may also notice that a more recent version of Kubernetes
    is downloaded and installed:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[第3章](7836cfd9-bce3-4d77-9331-f8dda5a31999.xhtml)，*在本地安装Kubernetes*和[第4章](f1b36345-157f-4e54-970c-5f948110ad0f.xhtml)，*介绍Kubeless功能*，这将启动单节点Kubernetes集群，并配置您的本地Kubernetes客户端与其交互。如果您已经更新了Minikube，您可能还会注意到下载并安装了一个更新版本的Kubernetes：
- en: '![](assets/ae41ec23-755c-4e99-817c-11ec3884c41d.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ae41ec23-755c-4e99-817c-11ec3884c41d.png)'
- en: 'If you have upgraded Minikube, you can check everything is running using the
    following commands:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经升级了Minikube，可以使用以下命令检查一切是否正常运行：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now we have our single-node Kubernetes cluster back up-and-running, the final
    stage in the Funktion installation is to bootstrap the deployment.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的单节点Kubernetes集群已经重新启动运行，Funktion安装的最后阶段是引导部署。
- en: Bootstrapping Funktion
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引导Funktion
- en: 'Installing Funktion is really straightforward—in fact, it is a single command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Funktion非常简单，事实上，只需要一个命令：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will give the following output:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出以下输出：
- en: '![](assets/8f6ea10f-3067-4c3d-a405-4c57cd5cc3dd.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8f6ea10f-3067-4c3d-a405-4c57cd5cc3dd.png)'
- en: 'After a minute or two you should be able to run:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一两分钟后，您应该能够运行：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding commands will check the status of the deployment:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将检查部署的状态：
- en: '![](assets/df639ea0-009b-40ca-a096-94488c7ea422.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/df639ea0-009b-40ca-a096-94488c7ea422.png)'
- en: 'You should also be able to see the Pods and Deployments in the Kubernetes dashboard:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该能够在Kubernetes仪表板中看到Pods和Deployments：
- en: '![](assets/b21219ed-9f41-4034-984f-8a4a82a2c85c.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b21219ed-9f41-4034-984f-8a4a82a2c85c.png)'
- en: 'Running the following command should return an empty list:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令应该返回一个空列表：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This proves that the Funktion command-line client can connect to your newly
    installed Funktion deployment and interact with it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这证明了Funktion命令行客户端可以连接到您新安装的Funktion部署并与其交互。
- en: Deploying a simple function
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署一个简单的函数
- en: 'Now that we have our Funktion deployment up-and-running, we can look at deploying
    a really simple hello world example. In the `/Chapter05/hello-world/src` folder
    in the GitHub repository that supports this book, you will find a file called
    `hello.js`. This file contains the following code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的Funktion部署已经运行起来了，我们可以看一下部署一个非常简单的hello world示例。在支持本书的GitHub存储库中的`/Chapter05/hello-world/src`文件夹中，您会找到一个名为`hello.js`的文件。这个文件包含以下代码：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Running the following command in the `/Chapter05/hello-world/` folder will
    create our first function using the preceding code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/Chapter05/hello-world/`文件夹中运行以下命令将使用上述代码创建我们的第一个函数：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output should look like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![](assets/600fedfc-5558-4f33-a151-a7981b66f6a5.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/600fedfc-5558-4f33-a151-a7981b66f6a5.png)'
- en: 'As you can see from the Terminal output, this has created a `function` called
    `hello`. Now, we have `function` running the following command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端输出中可以看出，这创建了一个名为`hello`的`function`。现在，我们运行以下命令：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This should return some results. As you can see from the following output,
    we can now see the `NAME`, `PODS`, and `URL` listed:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该返回一些结果。从以下输出中可以看出，我们现在可以看到`NAME`，`PODS`和`URL`列出：
- en: '![](assets/3ff904eb-5dd0-45c8-8d54-5a3cda0f18b0.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3ff904eb-5dd0-45c8-8d54-5a3cda0f18b0.png)'
- en: 'We can run the following commands to return just the `URL` of the function,
    or open it in our browser:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以运行以下命令来仅返回函数的`URL`，或在浏览器中打开它：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You should see the following results:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下结果：
- en: '![](assets/f9b79f93-0384-4443-b1d8-796a0f19eace.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f9b79f93-0384-4443-b1d8-796a0f19eace.png)'
- en: 'The browser window that opens displays the following. I am sure you will agree
    it is not the most exciting of pages:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 打开的浏览器窗口显示如下。我相信您会同意这不是最令人兴奋的页面：
- en: '![](assets/cdee65b3-4613-48ec-a18f-9d315546065c.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cdee65b3-4613-48ec-a18f-9d315546065c.png)'
- en: 'But it does demonstrate that our function is working and displaying content.
    You can display the logs for the function by running the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 但它确实证明了我们的函数正在工作并显示内容。您可以通过运行以下命令来显示函数的日志：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This will stream the log content in real-time to your Terminal window. You can
    see this by refreshing your browser a few times—you should see your page requests
    being logged alongside the internal health check requests.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这将实时将日志内容流式传输到您的终端窗口。您可以通过刷新浏览器几次来查看，您应该看到您的页面请求与内部健康检查请求一起被记录。
- en: 'Now that we have our first function created, we can install some connectors.
    To do so, run the following command:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的第一个函数，我们可以安装一些连接器。要这样做，请运行以下命令：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now that we have some connectors installed, we can create a flow. Our first
    flow will use the timer connector:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们安装了一些连接器，我们可以创建一个流程。我们的第一个流程将使用定时器连接器：
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This will create a flow called `foo` that will execute every `5000` milliseconds,
    targeting our function called `hello`. To get information on the flow you can
    run the following command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`foo`的流程，每`5000`毫秒执行一次，目标是我们称为`hello`的函数。要获取有关流程的信息，可以运行以下命令：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'You should see the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下内容：
- en: '![](assets/692c3065-80b5-4b34-957c-ada291af1fdf.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/692c3065-80b5-4b34-957c-ada291af1fdf.png)'
- en: 'As you can see, the flow is called `timer-foo1`; we will need to use this name
    when interacting with it. For example, you can check the logs for the flow by
    running the following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，流程称为`timer-foo1`；我们在与其交互时需要使用此名称。例如，您可以通过运行以下命令来检查流程的日志：
- en: '[PRE25]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Or in the Kubernetes dashboard you can find the pod called `timer-foo1` and
    check the logs there:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在Kubernetes仪表板中，您可以找到名为`timer-foo1`的pod，并在那里检查日志：
- en: '![](assets/6ae5d078-e47f-4af9-a05e-9d29cac3ef39.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6ae5d078-e47f-4af9-a05e-9d29cac3ef39.png)'
- en: 'Check the logs for the function by running the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令检查函数的日志：
- en: '[PRE26]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You should see that there is a page request every five seconds from a client
    with a user agent of `Apache-HttpClient/4.5.2`. This is the timer flow:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到每五秒有一个来自用户代理为`Apache-HttpClient/4.5.2`的客户端的页面请求。这是计时器流程：
- en: '![](assets/09ce6583-f8c7-45cf-8f48-c14acaa401e2.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/09ce6583-f8c7-45cf-8f48-c14acaa401e2.png)'
- en: 'To remove the flow simply run:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除流程，只需运行：
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This will remove the pod running the connector and your function will stop receiving
    automated requests.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这将删除运行连接器的pod，并且您的函数将停止接收自动请求。
- en: 'Going back to the Kubernetes dashboard and clicking on Config Maps should display
    a list of everything that Funktion has created. As you can see, most parts of
    Funktion have a ConfigMap:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Kubernetes仪表板，单击Config Maps应该显示Funktion创建的所有内容的列表。正如您所看到的，Funktion的大部分部分都有一个ConfigMap：
- en: '![](assets/9943de0f-e06d-4673-a155-c34fe2a1fc81.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9943de0f-e06d-4673-a155-c34fe2a1fc81.png)'
- en: 'Clicking on the Config Maps for `hello` will show you something that looks
    like the following page:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 单击`hello`的Config Maps将显示类似以下页面的内容：
- en: '![](assets/4ac40215-c69f-42c1-ba2f-8d7853c9f080.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4ac40215-c69f-42c1-ba2f-8d7853c9f080.png)'
- en: As you can see, this contains the code for our function and it has automatically
    detected that it is written in Node.js, and also that it was deployed from the
    `src` folder.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这包含了我们函数的代码，并且它已自动检测到它是用Node.js编写的，还有它是从`src`文件夹部署的。
- en: 'Before we look at more advanced examples, there is one more thing which you
    might find interesting, and that is the integration with the *Chrome Dev* tools.
    To do this, run the following command:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看更高级示例之前，还有一件可能会让您感兴趣的事情，那就是与*Chrome Dev*工具的集成。要做到这一点，请运行以下命令：
- en: '[PRE28]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This opens a process in the foreground and give you a URL to put into Google
    Chrome:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在前台打开一个进程，并为您提供一个URL放入Google Chrome中：
- en: '![](assets/62def47d-76d9-4c17-bfd8-08798e93ca02.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/62def47d-76d9-4c17-bfd8-08798e93ca02.png)'
- en: 'Once you have Google Chrome open and pointed at your function you can perform
    tasks such as editing the code directly within the browser:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您打开Google Chrome并指向您的函数，您可以执行诸如直接在浏览器中编辑代码之类的任务：
- en: '![](assets/1675f236-2d75-405f-af6c-cfc913783906.png)Any changes made using
    the Chrome Dev tools are made directly within the pod and they will not persist
    if you relaunch the pod; this should be used purely for testing.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/1675f236-2d75-405f-af6c-cfc913783906.png)使用Chrome Dev工具进行的任何更改都将直接在pod内进行，并且如果重新启动pod，这些更改将不会持久保存；这应该纯粹用于测试。'
- en: 'To remove our `hello` function we just need to run:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除我们的`hello`函数，我们只需要运行：
- en: '[PRE29]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This should leave us with a clean installation ready for a more advanced example.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该让我们得到一个干净的安装，准备进行更高级的示例。
- en: Twitter streams
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Twitter流
- en: 'As we installed the Twitter connector in the previous section, let''s take
    a look at configuring it to pull in some data. To start with, you can view all
    of the configurable options for the connector by running the following command:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中我们安装了Twitter连接器，让我们看看如何配置它来拉取一些数据。首先，您可以通过运行以下命令查看连接器的所有可配置选项：
- en: '[PRE30]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You should see something like the following Terminal output:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似以下的终端输出：
- en: '![](assets/8e704887-839f-4a85-b6e4-589f47c085c8.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8e704887-839f-4a85-b6e4-589f47c085c8.png)'
- en: As you can see, you can configure a proxy as well as providing an `accessToken`,
    `accessTokenSecret`, `consumerKey`, and `consumerSecret`. You should have these
    from the previous chapter. If not then regenerate them using the instructions
    in [Chapter 4](f1b36345-157f-4e54-970c-5f948110ad0f.xhtml), *Introducing Kubeless
    Functioning*.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您可以配置代理，并提供`accessToken`、`accessTokenSecret`、`consumerKey`和`consumerSecret`。您应该从上一章中获得这些信息。如果没有，那么请使用[第4章](f1b36345-157f-4e54-970c-5f948110ad0f.xhtml)中的说明重新生成它们，*介绍Kubeless功能*。
- en: Like the tokens and secrets I will be using to demonstrate the commands you
    need to run, the details listed in the preceding screenshot are the default dummy
    placeholder details and are not valid.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我将用来演示您需要运行的命令的令牌和密钥一样，前面截图中列出的详细信息是默认的虚拟占位符详细信息，不是有效的。
- en: 'To update the connector with your own details, run the following command, ensuring
    that you replace the details with your own:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用您自己的详细信息更新连接器，请运行以下命令，并确保用您自己的详细信息替换它们：
- en: '[PRE31]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You should receive confirmation that the connector has been updated. Now, we
    are able to launch a flow that uses the Twitter adapter. To do this we should
    run the following command:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该收到连接器已更新的确认。现在，我们可以启动使用Twitter适配器的流程。为此，我们应该运行以下命令：
- en: '[PRE32]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We will see the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到以下内容：
- en: '![](assets/8b8b8510-287d-44c3-bf45-0b177377ac3e.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8b8b8510-287d-44c3-bf45-0b177377ac3e.png)'
- en: 'Once you have started the pod, you can check the logs by running the following:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您启动了pod，您可以通过运行以下命令来检查日志：
- en: '[PRE33]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Or by viewing the logs for the `twitsearch` pod in the dashboard:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 或者通过在仪表板中查看`twitsearch` pod的日志：
- en: '![](assets/b28585bf-ed9d-461c-876f-5ba68769c7c6.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b28585bf-ed9d-461c-876f-5ba68769c7c6.png)'
- en: 'As you can see, Camel is printing a stream of tweets that contain the work
    Kubernetes. Your application can subscribe to this stream and you can then process
    the tweets. Finally, running the following command will delete the flow:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Camel正在打印包含单词Kubernetes的一系列推文。您的应用程序可以订阅此流，并对推文进行处理。最后，运行以下命令将删除流程：
- en: '[PRE34]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You can then remove your Minikube machine using the `minikube delete` command.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用`minikube delete`命令删除您的Minikube机器。
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have taken a brief look at Funktion. We installed the command-line
    client and then installed it on our single-node Kubernetes cluster. Once deployed
    we launched a test function and interacted with it before using one of the many
    event streams to search for tweets containing Kubernetes.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了Funktion。我们安装了命令行客户端，然后将其安装在我们的单节点Kubernetes集群上。部署后，我们启动了一个测试函数，并与其交互，然后使用其中的一个事件流来搜索包含Kubernetes的推文。
- en: Funktion is still in its early stages of development and it currently has a
    small, but active, community making contributions on the project's GitHub pages.
    Because of this, at the time of writing there are not too many practical examples
    of full-blown applications that take advantage of the many flows that Funktion
    supports via Apache Camel. I would recommend keeping an eye on Funktion if you
    are planning on writing any applications that ingest data and then process it.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Funktion仍处于早期开发阶段，目前拥有一个小而活跃的社区，他们在项目的GitHub页面上做出贡献。因此，在撰写本文时，还没有太多利用Funktion支持的Apache
    Camel的许多流程的完整应用实例。如果您计划编写任何摄取数据然后处理数据的应用程序，我建议您密切关注Funktion。
- en: In the next chapter we are going to look at taking our Kubernetes cluster from
    a single-node on our local machine to a multi-node cluster hosted on public clouds.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何将我们的Kubernetes集群从本地单节点扩展到托管在公共云上的多节点集群。
