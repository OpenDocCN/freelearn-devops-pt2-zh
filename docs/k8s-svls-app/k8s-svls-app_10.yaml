- en: Serverless Considerations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器考虑
- en: At the end of the last chapter, we touched upon securing our serverless installations—and
    the potential lack of security you get out of the box. In this chapter, we are
    going to approach that subject head-on and discuss what you should be looking
    out for when deploying your serverless function services on Kubernetes, as well
    as how to best monitor your clusters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章的最后，我们提到了保护我们的无服务器安装的问题，以及开箱即用的安全性可能存在的缺陷。在本章中，我们将直面这个问题，讨论在部署Kubernetes上的无服务器函数服务时应该注意的事项，以及如何最好地监视您的集群。
- en: 'We will be looking at:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将研究：
- en: Security best practices
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全最佳实践
- en: How do you monitor your Kubernetes cluster?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您如何监视您的Kubernetes集群？
- en: Let's make a start by discussing security.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从讨论安全性开始。
- en: Security best practices
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全最佳实践
- en: When talking about security best practices, our ultimate goal should be to ensure
    that no unauthorized third-party has to access to any part of either our application
    or infrastructure that we do not want them to have.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论安全最佳实践时，我们的最终目标应该是确保任何未经授权的第三方都无法访问我们的应用程序或基础架构的任何部分。
- en: For example, I would want an end user to be able to run a script that calls
    one of my serverless functions via an HTTP request made directly, by a webpage
    or mobile application. However, I would not want that same user to be able to
    access my Kubernetes dashboard, for example.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我希望最终用户能够运行一个脚本，通过直接的HTTP请求，由网页或移动应用程序调用我的无服务器函数之一。但是，我不希望同一用户能够访问我的Kubernetes仪表板，例如。
- en: Now, this may seem like a pretty obvious example, but, as we have seen over
    the past few years, out-of-the-box configurations do not always have this most
    basic security requirement in mind. A good example of this is MongoDB.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这可能看起来是一个非常明显的例子，但是，正如我们在过去几年中所看到的，开箱即用的配置并不总是考虑到这个最基本的安全要求。MongoDB就是一个很好的例子。
- en: Back in January, June, and September 2017, it was reported by several major
    news outlets that around 99,000 MongoDB installations were exposed to the internet;
    these installations were either unpatched or badly configured. This resulted in
    third parties accessing, copying, and deleting data from them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在2017年1月、6月和9月，有几家主要新闻媒体报道，大约有99,000个MongoDB安装暴露在互联网上；这些安装要么没有打补丁，要么配置不当。这导致第三方访问、复制和删除了其中的数据。
- en: 'In some cases, criminals were copying data, deleting it from the source database,
    and then sending the database owners a ransom demand for *safe* return of the
    deleted data—other attackers simply deleted the database and replaced it with
    an empty database called `PWNED_SECURE_YOUR_STUFF_SILLY` or `DELETED_BECAUSE_YOU_DIDNT_PASSWORD_PROTECT_YOUR_MONGODB`.
    You can find an example of the ransoms attached to the following tweet: [https://twitter.com/nmerrigan/status/818034565700849664](https://twitter.com/nmerrigan/status/818034565700849664).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，犯罪分子会复制数据，从源数据库中删除数据，然后向数据库所有者发送勒索要求，要求*安全*返回已删除的数据。其他攻击者只是删除了数据库，并用一个名为`PWNED_SECURE_YOUR_STUFF_SILLY`或`DELETED_BECAUSE_YOU_DIDNT_PASSWORD_PROTECT_YOUR_MONGODB`的空数据库替换它。您可以在以下推文中找到附加到赎金的示例：[https://twitter.com/nmerrigan/status/818034565700849664](https://twitter.com/nmerrigan/status/818034565700849664)。
- en: Niall Merrigan, the researcher who posted the previous tweet, pointed out in
    another tweet that in a single morning the number of compromised MongoDB installations
    went from 12,000 to around 27,000.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 之前发推文的研究人员Niall Merrigan在另一条推文中指出，在一个早晨，受损的MongoDB安装数量从12,000增加到了大约27,000。
- en: 'Companies such as Microsoft started to push their own NoSQL database services
    such as Azure DocumentDB, with blog posts with headings such as *First and foremost,
    security is our priority*, and images such as the ones in the following link:
    [https://azure.microsoft.com/en-in/blog/dear-mongodb-users-we-welcome-you-in-azure-documentdb/](https://azure.microsoft.com/en-in/blog/dear-mongodb-users-we-welcome-you-in-azure-documentdb/),
    where Microsoft have taken their own DocumentDB logo and the MongoDB logo and
    put them on rusted locks and modern safe doors.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 微软等公司开始推广他们自己的NoSQL数据库服务，比如Azure DocumentDB，发布了标题为“首先，安全是我们的首要任务”的博客文章，以及以下链接中的图片：[https://azure.microsoft.com/en-in/blog/dear-mongodb-users-we-welcome-you-in-azure-documentdb/](https://azure.microsoft.com/en-in/blog/dear-mongodb-users-we-welcome-you-in-azure-documentdb/)，微软将他们自己的DocumentDB标志和MongoDB标志放在生锈的锁和现代保险门上。
- en: So what does this have to do with securing our serverless functions? Well, to
    answer this we must first look at the root cause of the MongoDB problems.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这与保护我们的无服务器函数有什么关系呢？嗯，要回答这个问题，我们必须首先看一下MongoDB问题的根本原因。
- en: A lot of the versions of MongoDB that were being targeted by the attacks were
    initially configured out of the box to bind to `0.0.0.0`, which meant that the
    service attached itself to all IP addresses on a server. Now, this is not a problem
    if your MongoDB installation was launched on a server that ran only on a private
    network, but this was not the case for the installations that were being attacked
    as they were being hosted in public clouds, some of which only provided external
    IP addresses.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 许多受攻击的MongoDB版本最初被配置为绑定到`0.0.0.0`，这意味着服务附加到服务器上的所有IP地址。如果您的MongoDB安装是在仅在私有网络上运行的服务器上启动，这就不是问题，但是被攻击的安装并非如此，它们是在公共云中托管的，其中一些只提供外部IP地址。
- en: Now, you may be thinking to yourself, surely you would need some sort of authentication
    to access the database? Well, you would be wrong; authentication, at the time
    when MongoDB was still being shipped listening on all network interfaces (`0.0.0.0`),
    was an additional configuration step. This meant that, according to the website
    Shodan in July 2015, there was a total of 595.2 TB of MongoDB data exposed on
    the public internet with no authentication.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会想，访问数据库肯定需要某种身份验证吧？嗯，你错了；在MongoDB仍然在所有网络接口（`0.0.0.0`）上监听的时候，身份验证是一个额外的配置步骤。这意味着，根据网站Shodan在2015年7月的数据，公共互联网上共有595.2
    TB的MongoDB数据暴露在外，并且没有进行身份验证。
- en: Also, you read that date right, this was a problem in 2015, and a lot of installations
    remained unpatched and incorrectly configured.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你读对了日期，这是2015年的一个问题，很多安装仍然没有修补和配置正确。
- en: So how can we avoid these basic configuration issues in our Kubernetes and server
    function service installations? Let's start by looking at Kubernetes itself.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何避免在我们的Kubernetes和服务器功能服务安装中出现这些基本配置问题呢？让我们先看看Kubernetes本身。
- en: Securing Kubernetes
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护Kubernetes
- en: Kubernetes is quite secure by default. Both of the cloud providers that provide
    Kubernetes, Google Cloud and Microsoft Azure, work in a similar way.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes默认情况下是相当安全的。提供Kubernetes的两家云服务提供商，Google Cloud和Microsoft Azure，工作方式类似。
- en: 'A management node is deployed alongside your nodes; this management node controls
    your entire cluster, and is by default exposed to both the public internet and
    the cloud provider. We can test what an unauthenticated user sees by launching
    a cluster with the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个管理节点部署在您的节点旁边；这个管理节点控制整个集群，并且默认情况下暴露给公共互联网和云服务提供商。我们可以通过使用以下命令启动一个集群来测试未经身份验证的用户看到的内容：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, by default this command will launch the cluster, including the management
    node. All of the certificates used to authenticate your local copy of `kubectl`
    against the cluster are generated on the cloud, and then once the cluster has
    launched it will configure `kubectl` with all of the information needed to connect.
    If you have a look in the configuration file, which can be found at `~/.kube/config`,
    you should see something like the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，默认情况下，此命令将启动集群，包括管理节点。用于验证您的本地`kubectl`副本与集群的所有证书都是在云上生成的，一旦集群启动，它将配置`kubectl`以获取连接所需的所有信息。如果您查看配置文件，可以在`~/.kube/config`中找到，您应该会看到类似以下内容：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see, there is a certificate store in the `certificate-authority-data`
    section. This certificate is used to authenticate your cluster, meaning that whenever
    you run a command such as the following, it will return the list of nodes as expected:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`certificate-authority-data`部分中有一个证书存储。此证书用于验证您的集群，这意味着无论何时您运行诸如以下命令之类的命令，它都会返回预期的节点列表：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The nodes will appear as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 节点将显示如下：
- en: '![](assets/8e6ba5d4-4c2c-4ac3-8312-3fe9209e1a22.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8e6ba5d4-4c2c-4ac3-8312-3fe9209e1a22.png)'
- en: 'Now, open your `~/.kube/config` file and remove the certificate from the `certificate-authority-data`
    section. This will basically create an invalid certificate, meaning that when
    you run the following command, you will get an error:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开您的`~/.kube/config`文件，并从`certificate-authority-data`部分中删除证书。这基本上会创建一个无效的证书，这意味着当您运行以下命令时，您将收到一个错误：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The error will appear as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 错误将显示如下：
- en: '![](assets/d655c089-1b48-4488-a8fd-c4037c886e13.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d655c089-1b48-4488-a8fd-c4037c886e13.png)'
- en: 'So, unless you have a copy of the correct certificate, you cannot connect to
    the cluster. Don''t worry, you can still access your certificate by running the
    following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，除非您有正确证书的副本，否则无法连接到集群。不用担心，您仍然可以通过运行以下命令访问您的证书：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You will see the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下内容：
- en: '![](assets/ffb15955-c1fc-4a76-88ec-a5a539f45784.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ffb15955-c1fc-4a76-88ec-a5a539f45784.png)'
- en: 'This command will connect to your Google Cloud account, download the details,
    and update your `~/.kube/config` file with the certificate. You can test the freshly
    downloaded credentials by running:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将连接到您的Google Cloud帐户，下载详细信息，并使用证书更新您的`~/.kube/config`文件。您可以通过运行以下命令测试新下载的凭据：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will return details on all of your endpoints:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回有关所有终端的详细信息：
- en: '![](assets/2831a5e6-6aa9-488a-a67a-27355c7790fc.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2831a5e6-6aa9-488a-a67a-27355c7790fc.png)'
- en: You may notice that the last URL in the list is for the Kubernetes dashboard.
    How is that secured?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到列表中的最后一个URL是用于Kubernetes仪表板的。那么它是如何保护的呢？
- en: 'Let''s try entering the URL into a browser and see. I entered `https://35.202.202.37/api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy`
    (that URL will not be accessible by the time you read this) into my browser, hit
    return and was instantly greeted by a certificate warning; after accepting the
    certificates I was shown the following message:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试将URL输入到浏览器中并查看。我输入了`https://35.202.202.37/api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy`（在您阅读此内容时，该URL将无法访问）到我的浏览器中，然后按回车键，立即收到一个证书警告；在接受了证书后，我看到了以下消息：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is great, as it is exactly what we want to see—we do not want unauthenticated
    users to be able to directly access our dashboard. But, how do we access it? We
    do not have a username and password, only a certificate—even if we did have a
    username and password, where would we enter them, given that we were never prompted
    for any authentication?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好，因为这正是我们想要看到的——我们不希望未经身份验证的用户能够直接访问我们的仪表板。但是，我们如何访问它呢？我们没有用户名和密码，只有一个证书——即使我们有用户名和密码，我们会在哪里输入它们，考虑到我们从未被提示进行任何身份验证？
- en: 'Kubernetes has a built-in proxy server. When launched, the proxy server makes
    a connection to your Kubernetes cluster using the certificate. Once connected,
    all traffic that is passed through the proxy is authenticated and you will be
    able to use the services. To start the proxy we simply need to run the following
    command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes有一个内置的代理服务器。启动时，代理服务器使用证书连接到您的Kubernetes集群。一旦连接，通过代理传递的所有流量都经过身份验证，您将能够使用服务。要启动代理，我们只需要运行以下命令：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will see the proxy start as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到代理启动如下：
- en: '![](assets/c1d57a71-4a02-4e16-8fba-932416a4261d.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c1d57a71-4a02-4e16-8fba-932416a4261d.png)'
- en: 'This will start the proxy process in the foreground. As you can see from the
    preceding Terminal output, the proxy is listening on your local machine on port
    `8001`. All we need to do is replace the public part of the URL and put that into
    our browser. So in my case, I update the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在前台启动代理进程。从前面的终端输出中可以看到，代理正在本地机器的`8001`端口上监听。我们只需要替换URL的公共部分并将其放入浏览器中。所以在我的情况下，我更新如下：
- en: '`https://35.202.202.37/api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://35.202.202.37/api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy`'
- en: 'I change it instead to read as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我改为如下所示：
- en: '`http://127.0.0.1:8001/api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://127.0.0.1:8001/api/v1/namespaces/kube-system/services/kubernetes-dashboard/proxy`'
- en: 'This will take you straight to the dashboard:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这将直接带您进入仪表板：
- en: '![](assets/e645d90a-5f4d-4d0d-bea5-2806ad93acd5.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e645d90a-5f4d-4d0d-bea5-2806ad93acd5.png)'
- en: 'So far, we have demonstrated that Kubernetes on Google Cloud is configured
    securely. Microsoft Azure clusters work in a similar way—for example, we run the
    following command to update our local credentials once the cluster had been deployed:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经证明了Google Cloud上的Kubernetes配置是安全的。Microsoft Azure集群以类似的方式工作，例如，我们运行以下命令来更新一旦集群部署完成后的本地凭据：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When deploying using `kubeadm` and `kube-aws`, certificates are generated and
    copied to our configuration file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`kubeadm`和`kube-aws`部署时，证书会生成并复制到我们的配置文件中。
- en: So, what we have learnt so far is that by default Kubernetes enforces certificate-based
    authentication to secure your installation, meaning that you would have to go
    to quite a lot of effort to misconfigure your installation to the point where
    your installation is exposed to the world. There is, however, one exception to
    this. It has nothing to do with your installation; it is more about how you manage
    your `kubectl` configuration file.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，到目前为止，我们已经学到了，默认情况下Kubernetes强制执行基于证书的身份验证来保护您的安装，这意味着您必须付出相当大的努力来错误配置您的安装，以至于您的安装暴露给世界。然而，这有一个例外。这与您的安装无关；它更多地涉及您如何管理`kubectl`配置文件。
- en: Never publish it anywhere (that is, check it into GitHub, for example, or share
    with colleagues). If it falls into the wrong hands then not only does someone
    have a copy of your certificate, they also have the rest of your cluster information,
    meaning that all they have to do is drop it in place on their local machine and
    they are free to then start launching applications. Additionally, as most cloud-based
    Kubernetes installations have access to your cloud providers to launch supporting
    services such as load balancers, storage, and potentially additional nodes, you
    could find yourself with quite a large bill as well as a compromised cluster.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要在任何地方发布它（例如，将其提交到GitHub，或与同事共享）。如果它落入错误的手中，那么不仅有人拥有您的证书副本，他们还拥有您的集群其他信息，这意味着他们只需将其放置在本地机器上，就可以自由地开始启动应用程序。此外，由于大多数基于云的Kubernetes安装可以访问您的云提供商来启动支持服务，如负载均衡器、存储，以及可能的额外节点，您可能会发现自己面临相当大的账单，以及一个受损的集群。
- en: The `kubectl` configuration I shared earlier in this section has been edited
    making it invalid—also the cluster it is configured to connect to has been terminated.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本节前面分享的`kubectl`配置已被编辑，使其无效——还有它配置连接的集群已被终止。
- en: So, now that we know that our Kubernetes cluster should be secure, what about
    the serverless function services we have looked at?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我们知道我们的Kubernetes集群应该是安全的，那么我们所看到的无服务器函数服务呢？
- en: Securing serverless services
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护无服务器服务
- en: We have installed and connected each of our services on both our local Kubernetes
    cluster and the cloud. So far, though, we haven't really had to think about securing
    them—which is the question we raised at the end of the last chapter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在我们的本地Kubernetes集群和云上安装并连接了我们的每个服务。到目前为止，我们还没有真正考虑过如何保护它们——这是我们在上一章末提出的问题。
- en: The following sections will discuss how secure each tool is in its default configuration
    and what potential risks this configuration exposes you to. I won't be going into
    much detail about how to secure each tool, though where appropriate I will provide
    links to documentation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分将讨论每个工具在其默认配置中的安全性以及此配置可能给您带来的潜在风险。我不会详细讨论如何保护每个工具，但在适当的情况下，我会提供链接到文档。
- en: OpenFaaS
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenFaaS
- en: 'Let''s start by looking at OpenFaaS. I still have my Google Cloud cluster running,
    so I will deploy OpenFaaS there using the following command from within the `faas-netes`
    folder I cloned in the previous chapter:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从OpenFaaS开始。我仍然在运行我的Google Cloud集群，所以我将使用前一章中克隆的`faas-netes`文件夹中的以下命令在那里部署OpenFaaS：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As you can see, this time I have used just `kubectl` rather than `helm`. We
    can check the services deployed by running:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这次我只使用了`kubectl`而不是`helm`。我们可以通过运行以下命令来检查部署的服务：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will return the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回以下内容：
- en: '![](assets/cd10893a-b139-4434-99a2-9277f02cb5f1.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cd10893a-b139-4434-99a2-9277f02cb5f1.png)'
- en: 'The one thing to notice is that by default OpenFaaS uses the `NodePort` rather
    than load balancer to expose the gateway service. No problem, you may be thinking
    to yourself; we can just use the following commands to find out the deployment''s
    name and expose it:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一件事是，默认情况下OpenFaaS使用`NodePort`而不是负载均衡器来公开网关服务。没问题，你可能会想;我们可以使用以下命令来找到部署的名称并公开它：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now we know that the deployment is called gateway, we can run:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道部署被称为网关，我们可以运行：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After a minute or two, running the following command should give us the external
    IP address and port:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一两分钟后，运行以下命令应该给我们提供外部IP地址和端口：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The results will appear as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将如下所示：
- en: '![](assets/82c9e9da-b358-48d7-ad2b-de62e192315b.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/82c9e9da-b358-48d7-ad2b-de62e192315b.png)'
- en: Going to the external IP address and port `8080` in a browser—in my case `http://35.224.135.38:8080/ui/`—unfortunately
    takes us straight to the OpenFaaS UI, no authentication needed. The same goes
    for using the command-line interface. So, how can you secure your OpenFaaS installation?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中输入外部IP地址和端口`8080`——在我的情况下是`http://35.224.135.38:8080/ui/`——不幸的是，我们直接进入了OpenFaaS
    UI，无需进行身份验证。使用命令行界面也是一样。那么，你如何保护你的OpenFaaS安装呢？
- en: There are instructions on the OpenFaaS GitHub repository for using proxy services
    such as Traefik and Kong.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在OpenFaaS GitHub存储库上有关使用代理服务（如Traefik和Kong）的说明。
- en: Kong is an open source API gateway that adds functionality such as traffic control,
    logging, the transformation of data, analytics, and most importantly, authentication.
    For more information on the Kong Community Edition, see [https://konghq.com/kong-community-edition/](https://konghq.com/kong-community-edition/).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Kong是一个开源的API网关，它增加了诸如流量控制、日志记录、数据转换、分析以及最重要的身份验证等功能。有关Kong社区版的更多信息，请参阅[https://konghq.com/kong-community-edition/](https://konghq.com/kong-community-edition/)。
- en: Traefik (pronounced Traffic) is a reverse HTTP proxy which has been designed
    to work from the ground up with container orchestration tools like Kubernetes.
    It not only provides load balancing but also supports basic HTTP authentication
    and SSL termination. To find out more about Traefik, see its website at [https://traefik.io/](https://traefik.io/).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Traefik（发音为Traffic）是一个反向HTTP代理，它从头开始设计，与Kubernetes等容器编排工具一起工作。它不仅提供负载平衡，还支持基本的HTTP身份验证和SSL终止。要了解有关Traefik的更多信息，请访问其网站[https://traefik.io/](https://traefik.io/)。
- en: Both of these tools can be configured to sit in front of your OpenFaaS installation
    and intercept requests, and when configured, present the end user with a login
    prompt. The other way you can secure your OpenFaaS installation is by locking
    it down to your IP address using the networking tools within your public cloud
    service. The downside of this is that, depending on how your application calls
    the functions, you may not be able to lock it down completely.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种工具都可以配置为位于OpenFaaS安装的前端并拦截请求，并在配置时向最终用户呈现登录提示。您可以通过使用公共云服务中的网络工具将OpenFaaS安装限制在您的IP地址上来保护OpenFaaS安装。这样做的缺点是，根据应用程序调用函数的方式，您可能无法完全将其限制。
- en: So OpenFaaS, if just deployed, will expose parts of your Kubernetes cluster,
    meaning that a third party could potentially gain access to your resources if
    you do not secure them. For more information on securing your OpenFaaS cluster,
    see the official documentation at [https://github.com/openfaas/faas/tree/master/guide](https://github.com/openfaas/faas/tree/master/guide).
    Alternatively, you can use the openfaas-gke installation files by Stefan Prodan,
    which can be found at [https://github.com/stefanprodan/openfaas-gke/](https://github.com/stefanprodan/openfaas-gke/).
    It is also possible to access your OpenFaaS installation using the `kubectl proxy`
    command; however, this may limit its usefulness.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果只是部署OpenFaaS，将暴露Kubernetes集群的部分内容，这意味着第三方可能会潜在地访问您的资源，如果您不对其进行安全保护。有关保护OpenFaaS集群的更多信息，请参阅官方文档[https://github.com/openfaas/faas/tree/master/guide](https://github.com/openfaas/faas/tree/master/guide)。或者，您可以使用Stefan
    Prodan的openfaas-gke安装文件，该文件可以在[https://github.com/stefanprodan/openfaas-gke/](https://github.com/stefanprodan/openfaas-gke/)找到。还可以使用`kubectl
    proxy`命令访问OpenFaaS安装；但是，这可能会限制其实用性。
- en: There is one more potential security problem with using OpenFaaS, and if you
    are already a Docker user it should be one you are familiar with. As OpenFaaS
    uses Docker images and the Docker Hub as its primary delivery method, you need
    to be careful whenever you push an image, as the image could potentially contain
    password details, API credentials, custom code, and other information you may
    not want to access through a public container image repository—the solution to
    this would be to use a private repository or a private Docker registry.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OpenFaaS还存在另一个潜在的安全问题，如果您已经是Docker用户，这应该是您熟悉的问题。由于OpenFaaS使用Docker镜像和Docker
    Hub作为其主要交付方法，因此在推送镜像时需要小心，因为镜像可能潜在地包含密码详细信息、API凭据、自定义代码和其他您可能不希望通过公共容器镜像存储库访问的信息。解决此问题的方法是使用私有存储库或私有Docker注册表。
- en: Please do not see any of this as a negative; OpenFaaS is an excellent piece
    of software, and I am sure that over time, changes will be introduced by the community
    to ensure that the steps detailed previously will not be needed as part of the
    initial configuration for the Kubernetes-hosted version.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请不要将任何内容视为负面；OpenFaaS是一款优秀的软件，我相信随着时间的推移，社区将引入变化，以确保之前详细介绍的步骤不会成为Kubernetes托管版本初始配置的一部分。
- en: Kubeless
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubeless
- en: 'Next up, let''s take a look at Kubeless. To deploy the latest version in my
    Google Cloud Kubernetes cluster, I ran the following commands:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来看看Kubeless。为了在我的Google Cloud Kubernetes集群中部署最新版本，我运行了以下命令：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once deployed, I ran the following command to see what services had been exposed:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 部署后，我运行了以下命令来查看哪些服务已经被暴露：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As you can see from the following Terminal output, no services were publicly
    exposed:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从以下终端输出中所见，没有服务被公开暴露：
- en: '![](assets/c9c0fd91-d93f-4186-a348-85dfde326596.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c9c0fd91-d93f-4186-a348-85dfde326596.png)'
- en: 'So far, so good. Let''s quickly launch a test function and expose it. From
    within the `/Chapter04/hello-world/` folder, I ran the following command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切都很顺利。让我们快速启动一个测试函数并将其暴露出来。在`/Chapter04/hello-world/`文件夹中，我运行了以下命令：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This created the function as expected. Running the following commands confirms
    that the function is available and running:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这按预期创建了函数。运行以下命令确认函数可用且正在运行：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Running the following command exposes the function to the world:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令将该函数暴露给世界：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After a short time, I can see an IP address for the `hello-lb` service when
    it is running:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在短时间内，当`hello-lb`服务运行时，我可以看到一个IP地址：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: So far, we haven't had to really do anything to lock our installation down,
    so how secure is it? The short answer to that question is very, but what makes
    the default installation of Kubeless more secure than the default installation
    of OpenFaaS?
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们实际上并没有做任何事情来锁定我们的安装，那么它有多安全呢？对于这个问题的简短答案是非常安全，但是默认安装的Kubeless比默认安装的OpenFaaS更安全的原因是什么？
- en: 'On the face of it, both technologies are similar in architecture; their server
    components are deployed on our Kubernetes cluster and we interact with those components
    using a command-line interface from our local machine. For example, we used the
    following command for Kubeless:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从表面上看，这两种技术在架构上是相似的；它们的服务器组件都部署在我们的Kubernetes集群上，并且我们使用本地机器上的命令行界面与这些组件进行交互。例如，我们为Kubeless使用了以下命令：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the previous chapter, we used the following command to launch our function
    using OpenFaaS:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用以下命令来启动OpenFaaS中的函数：
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As you may have already spotted, at no point during our Kubeless configuration
    or use did we have to provide it with any of the details of our Kubernetes cluster,
    unlike OpenFaaS, where we had to explicitly tell the command-line interface the
    IP address and port of our OpenFaaS installation.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经注意到的那样，在Kubeless的配置或使用过程中，我们从未不得不提供任何关于我们Kubernetes集群的详细信息，而在OpenFaaS中，我们必须明确告诉命令行界面我们OpenFaaS安装的IP地址和端口。
- en: Kubeless knows exactly where our cluster is, and more importantly, it is authenticating
    whenever it needs to access it. As Kubeless is a native Kubernetes framework,
    rather than installing itself on top of Kubernetes, it is integrating itself into
    our cluster and adding additional functionality—in this case, functions—and is
    using other Kubernetes technologies, such as `kubectl` and custom resource definitions,
    to inject our function's code into the runtime on-demand, meaning that everything
    is contained within our Kubernetes cluster and all interaction with it is secure.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeless确切知道我们的集群在哪里，更重要的是，它在需要访问时进行身份验证。由于Kubeless是一个本地的Kubernetes框架，而不是安装在Kubernetes之上，它正在集成到我们的集群中，并添加额外的功能——在这种情况下是函数——并且正在使用其他Kubernetes技术，比如`kubectl`和自定义资源定义，来根据需要将我们函数的代码注入到运行时中，这意味着一切都包含在我们的Kubernetes集群中，与之的所有交互都是安全的。
- en: 'This can be demonstrated by removing the certificate from the `~/.kube/config`
    file and then trying to list the functions. You should see the following error:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过从`~/.kube/config`文件中删除证书，然后尝试列出函数来进行演示。您应该会看到以下错误：
- en: '![](assets/3f87d091-8396-4ce6-9758-9135ba882914.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3f87d091-8396-4ce6-9758-9135ba882914.png)'
- en: All of this means that your Kubeless installation is secure by default.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都意味着您的Kubeless安装默认情况下是安全的。
- en: Funktion
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能
- en: Funktion, like Kubeless, is secure by default, as it tightly integrates itself
    with your Kubernetes cluster and adds additional functionality, and its command-line
    interface piggybacks its calls on top of `kubectl`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Funktion，像Kubeless一样，默认情况下是安全的，因为它与您的Kubernetes集群紧密集成，并添加了额外的功能，其命令行界面在`kubectl`的基础上进行调用。
- en: Apache OpenWhisk
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apache OpenWhisk
- en: 'Apache OpenWhisk, like OpenFaaS, installs itself on top of your Kubernetes
    cluster rather than fully integrating itself. However, as we covered in [Chapter
    7](b3e0a002-3751-4ac1-9fdc-8bf0778fdacb.xhtml), *Apache OpenWhisk and Kubernetes*,
    the CLI needs to be configured to authenticate itself against the installation
    once the service is exposed to the public internet. In that chapter, we ran the
    following commands to expose the service and authenticate the client against the
    API host:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Apache OpenWhisk，像OpenFaaS一样，安装在您的Kubernetes集群之上，而不是完全集成自己。然而，正如我们在[第7章](b3e0a002-3751-4ac1-9fdc-8bf0778fdacb.xhtml)中所介绍的那样，*Apache
    OpenWhisk和Kubernetes*，一旦服务暴露到公共互联网，CLI需要配置以对安装进行身份验证。在那一章中，我们运行了以下命令来暴露服务并对客户端进行身份验证：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: So again, this service is secure by default, assuming that you do not publish
    or share the authentication key.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，再次强调，默认情况下此服务是安全的，假设您不发布或分享身份验证密钥。
- en: Fission
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fission
- en: 'During the Fission installation, we have to set two environment variables:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在Fission安装期间，我们必须设置两个环境变量：
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'There is one variable for the `FISSION_URL` and one for the `FISSION_ROUTER`.
    This would indicate that potentially not everything is secure. First of all, let''s
    take a look at what we get when we access the `FISSION_URL`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`FISSION_URL`和`FISSION_ROUTER`各有一个变量。这可能意味着不是所有的东西都是安全的。首先，让我们看看当我们访问`FISSION_URL`时我们得到了什么：'
- en: '![](assets/7da0005c-db13-44dd-a1c9-647d69ab2805.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7da0005c-db13-44dd-a1c9-647d69ab2805.png)'
- en: 'As you can see, we get a response identifying the Fission API and the version
    number. Remove the certificates from the `~/.kube/config` file and run the following
    command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们得到了一个标识Fission API和版本号的响应。从`~/.kube/config`文件中删除证书，并运行以下命令：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'We can still interact with our Fission installation; this means that by default
    Fission has no authentication, and that when we use the recommended installation
    procedure, the API is exposed to the internet by default:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然可以与我们的Fission安装进行交互；这意味着默认情况下Fission没有身份验证，并且当我们使用推荐的安装程序时，API默认暴露在互联网上：
- en: '![](assets/983249ac-e7b1-4e91-bd31-1afc0ba9d089.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/983249ac-e7b1-4e91-bd31-1afc0ba9d089.png)'
- en: 'Work is on-going to ship Fission with a more secure default; you can follow
    its progress at the following GitHub issue: [https://github.com/fission/fission/issues/22/](https://github.com/fission/fission/issues/22/).'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 正在进行工作，以使用更安全的默认设置来发布Fission；您可以在以下GitHub问题中跟踪其进展：[https://github.com/fission/fission/issues/22/](https://github.com/fission/fission/issues/22/)。
- en: 'Until then, it is recommend that you update the Helm chart to set the `serviceType`
    of `ClusterIP` for the controller service. As you can see from the following output,
    it is currently set to `LoadBalancer`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之前，建议您更新Helm图表，将控制器服务的`serviceType`设置为`ClusterIP`。从下面的输出中可以看到，它目前设置为`LoadBalancer`：
- en: '![](assets/0d8d0f86-b544-41d4-9871-66c2be3c1f23.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0d8d0f86-b544-41d4-9871-66c2be3c1f23.png)'
- en: 'Once you have configured the service to use `ClusterIP`, you can configure
    port forwarding from your localhost to the controller using the `kubectl` inbuilt
    proxy. The command to do this would look something like the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您配置服务使用`ClusterIP`，您可以使用`kubectl`内置的代理配置从本地主机到控制器的端口转发。执行此操作的命令看起来类似于以下内容：
- en: '[PRE25]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This would mean that your `FISSION_URL` would be something like `http://localhost:1234`,
    as opposed to an externally accessible URL with no authentication. The Fission
    developers are in the process of building this solution into Fission and it should
    become the default configuration in one of the early 2018 releases.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您的`FISSION_URL`将类似于`http://localhost:1234`，而不是一个没有身份验证的外部可访问的URL。Fission开发人员正在将这个解决方案集成到Fission中，并且它应该成为2018年早期版本的默认配置之一。
- en: Conclusions
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: As you can see, we have a pretty mixed bag when it comes to securing our serverless
    installations—some of the solutions we have covered are secure by default, while
    others, such as the old default MongoDB configuration, need a little more work
    to secure them and make them production-ready. Before you permanently deploy any
    of the tools we have covered in this book, please ensure that you have reviewed
    exactly what each tool is exposing and how you can best lock it down.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，当涉及到保护我们的无服务器安装时，我们有一个相当混杂的情况——我们涵盖的一些解决方案是默认安全的，而另一些解决方案，比如旧的默认MongoDB配置，需要更多的工作来保护它们并使其达到生产就绪状态。在永久部署本书中涵盖的任何工具之前，请确保您已经审查了每个工具暴露的内容以及如何最好地将其锁定。
- en: Monitoring Kubernetes
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控Kubernetes
- en: Before we start to look at various ways we can monitor our Kubernetes cluster
    we should quickly talk about what we mean by monitoring when it comes to a tool
    with potentially a lot of moving parts.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始研究各种监控Kubernetes集群的方法之前，我们应该快速谈谈当涉及到一个可能有很多移动部分的工具时，我们所说的监控是什么意思。
- en: Traditionally, monitoring servers has meant keeping a close eye on the availability
    of applications running on fixed servers. To do this, our monitoring tool would
    collate information on the CPU, RAM, and disk utilization, as well as which services
    were running, the number of processes, and also the availability of the services
    and the server itself.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，监控服务器意味着密切关注固定服务器上运行的应用程序的可用性。为了做到这一点，我们的监控工具将汇总有关CPU、RAM和磁盘利用率的信息，以及正在运行的服务、进程数量以及服务和服务器本身的可用性。
- en: We would set triggers at certain thresholds so that, for example, if there was
    an increase of CPU load, we could log in to the server and do some investigation
    before said CPU load starts to affect our application's performance.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在特定阈值处设置触发器，这样，例如，如果CPU负载增加，我们可以登录到服务器并在所述CPU负载开始影响我们应用程序性能之前进行一些调查。
- en: As you can image, monitoring a Kubernetes cluster is a lot different to this.
    By design, the applications running with the cluster should be fault tolerant
    and also highly available—in fact, the functions we have been running in previous
    chapters sometimes only have a lifespan of the time it takes to execute the function.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所能想象的，监控Kubernetes集群与此有很大不同。按设计，集群中运行的应用程序应具有容错性和高可用性——事实上，我们在之前章节中运行的函数有时只有执行函数所需的寿命。
- en: This changes the way that we monitor our clusters, as we trust that a lot of
    the things we would traditionally be monitoring for will be handled by Kubernetes
    itself, rather than needing us to log in and take preventative actions.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这改变了我们监控集群的方式，因为我们相信许多我们传统上要监控的事情将由Kubernetes本身处理，而不需要我们登录并采取预防措施。
- en: With this in mind, we do not need to go too deep into the ins and outs of monitoring
    your Kubernetes clusters—that is probably a whole different book. Instead, we
    are going to take a quick look at some of the options for reviewing service metrics
    for our Kubernetes clusters using first the dashboard and then Google Cloud and
    Microsoft Azure, as these both natively support Kubernetes clusters.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们不需要深入了解监视Kubernetes集群的细节——这可能需要一本完全不同的书。相反，我们将快速查看一下使用仪表板、Google Cloud和Microsoft
    Azure来审查我们Kubernetes集群的服务指标的一些选项，因为这两者都原生支持Kubernetes集群。
- en: The dashboard
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表板
- en: The Kubernetes dashboard is not just a great resource for managing your cluster;
    it also gives you a great visual overview of what you have running and how it
    is currently performing.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes仪表板不仅是管理集群的重要资源；它还为您提供了一个很好的视觉概述，显示您正在运行的内容以及当前的性能。
- en: 'For example, selecting All namespaces in the Namespaces drop-down menu and
    then clicking on Pods in the Workloads section of the left-hand side menu will
    give you a list of all the running pods, along with a breakdown of what each pod
    is currently using CPU and RAM-wise:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在命名空间下拉菜单中选择所有命名空间，然后在左侧菜单的工作负载部分点击Pods，将为您提供所有正在运行的Pod的列表，以及每个Pod当前使用CPU和RAM的详细情况：
- en: '![](assets/09a8a4d1-f07c-44f0-839f-dbc6a1472b93.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/09a8a4d1-f07c-44f0-839f-dbc6a1472b93.png)'
- en: 'Clicking on a pod—in this case, the heapster one—will give you a more detailed
    breakdown of the overall resources being used by the containers that make up that
    pod:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 点击一个Pod——在这种情况下是heapster——将为您提供该Pod中组成容器正在使用的资源的更详细的分解：
- en: '![](assets/259e480a-82b7-49bc-a65a-6e81050068b4.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/259e480a-82b7-49bc-a65a-6e81050068b4.png)'
- en: 'Scrolling down will show you the containers. In the case of heapster, there
    are three containers in the pod. From here, you can view the logs for each container
    in real time:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 向下滚动将显示容器。在heapster的情况下，Pod中有三个容器。从这里，您可以实时查看每个容器的日志：
- en: '![](assets/854cc086-f346-4748-966a-422112ead94e.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/854cc086-f346-4748-966a-422112ead94e.png)'
- en: This is, as I am sure you can imagine, an extremely useful feature when it comes
    to debugging a problem with a running container.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 可以想象，这是一个非常有用的功能，当您需要调试正在运行的容器时。
- en: However, you may have noticed when looking at the dashboard the CPU and RAM
    utilization that is being displayed is only for the last 15 minutes—you can not
    dig any deeper or go further back. Because of this, information on currently-running
    services is available through the dashboard.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，您可能已经注意到在查看仪表板时，显示的CPU和RAM利用率仅为过去15分钟的数据——您无法深入挖掘或查看更早的数据。因此，有关当前运行服务的信息可以通过仪表板获得。
- en: This makes the dashboard perfect for logging in and getting a very quick overview
    of your cluster—and what's good is that the dashboard is included with most Kubernetes
    clusters out of the box, making it very convenient.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得仪表板非常适合登录并快速了解集群的概况——而且仪表板已经默认包含在大多数Kubernetes集群中，非常方便。
- en: Google Cloud
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Google Cloud
- en: 'Next up we have Google Cloud. On the face of it, the Kubernetes section of
    the Google Cloud Console appears pretty much like the Kubernetes dashboard:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是Google Cloud。从外表看，Google Cloud控制台的Kubernetes部分看起来几乎与Kubernetes仪表板相似：
- en: '![](assets/78f675a5-8bc9-46d2-9093-cdbc29c7fb9d.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/78f675a5-8bc9-46d2-9093-cdbc29c7fb9d.png)'
- en: However, as you can see from the preceding screenshot, other than giving a status
    of OK it really doesn't tell you much about what is going on within your cluster.
    Instead, you need to use Stackdriver, which is accessible from the left-hand menu
    within the Google Cloud Console.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正如您从前面的截图中所看到的，除了显示OK状态之外，它实际上并没有告诉您有关集群内部发生了什么。相反，您需要使用Stackdriver，它可以从Google
    Cloud控制台的左侧菜单中访问。
- en: Google Stackdriver is a Google Cloud service which allows you to record metrics
    from several sources, including Google Cloud services, AWS, and also individual
    servers using an agent. The service is not free of charge; a detailed cost breakdown
    can be found at [https://cloud.google.com/stackdriver/pricing](https://cloud.google.com/stackdriver/pricing).
    We will be using the free trial, but if you have already used Google Stackdriver,
    the following steps may incur cost.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Google Stackdriver是一个Google Cloud服务，允许您记录来自多个来源的指标，包括Google Cloud服务、AWS，以及使用代理的个别服务器。该服务不是免费的；详细的成本分解可以在[https://cloud.google.com/stackdriver/pricing](https://cloud.google.com/stackdriver/pricing)找到。我们将使用免费试用版，但如果您已经使用过Google
    Stackdriver，则以下步骤可能会产生费用。
- en: 'When you first go to Stackdriver you will be asked several questions. Work
    through this process and at the end of it you should have a free trial up and
    collecting logs from your Kubernetes cluster. After a few minutes you should start
    to see information from your cluster starting to show in the metrics explorer.
    From here, you can start to build up dashboards such as the following one:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次进入Stackdriver时，将会被问到几个问题。通过这个过程，在结束时，您应该可以免费试用并收集来自您的Kubernetes集群的日志。几分钟后，您应该开始看到来自您的集群的信息显示在指标资源管理器中。从这里，您可以开始构建诸如以下仪表板之类的仪表板：
- en: '![](assets/cf1ed8fe-3167-4432-a455-f67c5983083e.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cf1ed8fe-3167-4432-a455-f67c5983083e.png)'
- en: As you can see from the preceding screenshot, we have the option to view more
    than 15 minutes worth of data—in fact, the dashboard is showing over an hour's
    worth of data, which is how old the cluster is.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从上述屏幕截图中所看到的，我们有选项查看超过15分钟的数据 - 实际上，仪表板显示了超过一个小时的数据，这就是集群的年龄。
- en: 'Not only does Stackdriver give you access to metrics about your cluster, you
    can also access the logs from both your Kubernetes cluster and the containers
    themselves:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Stackdriver不仅可以让您访问有关您的集群的指标，还可以访问来自您的Kubernetes集群和容器本身的日志：
- en: '![](assets/8942f633-40a4-4015-ba36-0cecd4453267.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8942f633-40a4-4015-ba36-0cecd4453267.png)'
- en: As the logs and metrics are being stored away from your cluster, historical
    information about your containers is also accessible. If you are running a function
    in a container which is only live for a few seconds, you will not only be able
    to see the RAM and CPU utilization for that container, you will also have access
    to the entire life of the container.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 由于日志和指标被存储在集群之外，您还可以访问有关容器的历史信息。如果您在一个只活动几秒钟的容器中运行一个函数，您不仅可以看到该容器的RAM和CPU利用率，还可以访问整个容器的生命周期。
- en: Other features of Stackdriver are daily, weekly, and monthly email reports about
    your overall usage, as well as the option to configure triggers for when metric
    thresholds are crossed or when events appear in log files—you can be notified
    about these via SMS, email, or even chat products such as Slack or Campfire.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Stackdriver的其他功能包括关于您整体使用情况的每日、每周和每月电子邮件报告，以及配置触发器的选项，用于当指标阈值被触发或日志文件中出现事件时通知您
    - 您可以通过短信、电子邮件甚至聊天产品（如Slack或Campfire）收到这些通知。
- en: Microsoft Azure
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Microsoft Azure
- en: 'Compared to Google Cloud, Microsoft Azure''s out-of-the-box insights into your
    Kubernetes cluster are not that great. You do not have views into what is going
    on within your cluster, and while there are metrics available they are only the
    for the host machines—for example, you can see the CPU utilization as in the following
    screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 与Google Cloud相比，Microsoft Azure对您的Kubernetes集群的开箱即用的洞察力并不是很好。您无法看到集群内部的运行情况，虽然有可用的指标，但它们只适用于主机机器
    - 例如，您可以在以下屏幕截图中看到CPU利用率：
- en: '![](assets/de6fda7a-8693-4819-9b67-7cae6826832d.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/de6fda7a-8693-4819-9b67-7cae6826832d.png)'
- en: 'Along the same lines, you can launch the Kubernetes dashboard using the following
    command (making sure you replace the resource group and name with your own):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以使用以下命令启动 Kubernetes 仪表板（确保用您自己的资源组和名称替换）：
- en: '[PRE26]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Fear not though, there is the Container Monitoring solution; this is an agent-based
    system that you can deploy on your Kubernetes cluster, which then feeds back information
    to the Azure portal.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 不过不用担心，还有容器监控解决方案；这是一个基于代理的系统，您可以部署在您的 Kubernetes 集群上，然后将信息反馈给 Azure 门户。
- en: To deploy it, you need to search for the Container Monitoring solution by Microsoft
    in the Azure Market, from within your Azure portal. Clicking on the Create button
    will ask you to create a workspace; I chose to create my workspace in the same
    resource group and region as my Kubernetes cluster. Make sure that Pin to dashboard
    is ticked and click on Deploy.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署它，您需要在 Azure 门户内搜索 Microsoft 的容器监控解决方案。单击“创建”按钮将要求您创建一个工作空间；我选择在与我的 Kubernetes
    集群相同的资源组和区域中创建我的工作空间。确保选中“固定到仪表板”，然后单击“部署”。
- en: 'This is where it gets a little complicated, as you need to get the WORKSPACE
    ID and PRIMARY KEY. These are buried quite deep inside a series of links. To get
    them, go to your dashboard and select your workspace—mine is labelled as Containers(russ-monitor).
    From there, click on OMS Workspace, and then Advanced settings. You should see
    something like the following screenshot:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这就有点复杂了，因为您需要获取工作空间 ID 和主密钥。这些信息深藏在一系列链接中。要获取它们，转到您的仪表板并选择您的工作空间—我的标记为 Containers(russ-monitor)。然后，单击“OMS
    工作区”，然后单击“高级设置”。您应该看到类似以下屏幕截图的内容：
- en: '![](assets/ff86ffce-445d-4808-8d6b-cc59aea78942.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ff86ffce-445d-4808-8d6b-cc59aea78942.png)'
- en: 'Make a note of the WORKSPACE ID and PRIMARY KEY(mine are blurred out in the
    preceding screenshot). In the `Chapter10` folder of the repository that accompanies
    this book there is a file called `oms-daemonset.yaml`; make a copy of it and update
    it so that the values in the following `env` section are updated with your actual
    WORKSPACE ID and PRIMARY KEY:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 记下工作空间 ID 和主密钥（在上述屏幕截图中我的已模糊处理）。在本书附带的存储库的`Chapter10`文件夹中有一个名为`oms-daemonset.yaml`的文件；复制该文件并更新其中的`env`部分的值，以便使用您实际的工作空间
    ID 和主密钥进行更新：
- en: '[PRE27]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Once you have updated the file, run the following command from the same folder
    where you saved the updated copy of the `oms-daemonset.yaml` file to deploy the
    `daemonset` into your cluster:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 更新文件后，从保存了更新后的`oms-daemonset.yaml`文件的同一文件夹中运行以下命令，将`daemonset`部署到您的集群中：
- en: '[PRE28]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Once deployed, you should be able to run the following command to confirm that
    everything is working as expected:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 部署后，您应该能够运行以下命令来确认一切是否按预期工作：
- en: '[PRE29]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You should see one `daemonset` for each node within your cluster. As my cluster
    has three nodes, the results look like the following:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在集群中的每个节点上看到一个`daemonset`。由于我的集群有三个节点，结果看起来像下面这样：
- en: '![](assets/902d95a1-6141-4cfc-a12c-1feebcd0d2a9.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/902d95a1-6141-4cfc-a12c-1feebcd0d2a9.png)'
- en: Once deployed, after about 15 minutes you should be able to revisit your workspace
    and see stats starting to be recorded. The following screens give you an idea
    of the information being recorded.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 部署后，大约 15 分钟后，您应该能够重新访问您的工作空间并开始记录统计信息。以下屏幕截图给出了您对记录的信息的一个概念。
- en: 'The first screen shows some basic information about the number of containers
    running within your Kubernetes cluster, with any errors and events recorded by
    Kubernetes:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个屏幕显示了有关在您的 Kubernetes 集群中运行的容器数量的一些基本信息，以及 Kubernetes 记录的任何错误和事件：
- en: '![](assets/62732e0d-9d73-4dc9-ab39-b7deab0edbc3.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/62732e0d-9d73-4dc9-ab39-b7deab0edbc3.png)'
- en: 'Scrolling to the right will show you more details about your cluster:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 向右滚动将向您显示有关集群的更多详细信息：
- en: '![](assets/4cb0cdb0-2be5-4155-ab9b-e18041dd8656.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4cb0cdb0-2be5-4155-ab9b-e18041dd8656.png)'
- en: As you can see, we have information pods running in the two namespaces my cluster
    has, and then we have nodes within the cluster. Following that, we have all of
    the images that have been downloaded, and details of all of the running containers.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们有信息在我集群中运行的两个命名空间中的pod，然后我们有集群中的节点。在此之后，我们有所有已下载的映像，以及所有正在运行的容器的详细信息。
- en: 'Scrolling right again will show you more information:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 再次向右滚动将显示更多信息：
- en: '![](assets/73f72675-6667-4e59-a23a-f9ed6d020dbf.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/73f72675-6667-4e59-a23a-f9ed6d020dbf.png)'
- en: Here we can see the number of processes across all of our containers, the CPU
    and Memory performance over our chosen time frame, and finally, some example queries
    we can run on the data we are collecting. Clicking on the link will execute the
    sample queries, and from there, you will have the option of saving the results
    as a Microsoft Excel file or exporting the data to Microsoft's Power BI service.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们所有容器中的进程数量，我们选择的时间范围内的CPU和内存性能，最后，我们可以运行在我们收集的数据上的一些示例查询。单击链接将执行示例查询，然后，您将有选项将结果保存为Microsoft
    Excel文件或将数据导出到Microsoft的Power BI服务。
- en: Power BI is a business analytics service provided by Microsoft. It allows you
    to create dashboards and run some quite complex calculations on your datasets—one
    of which is the metric data being exported from your Kubernetes cluster into your
    Microsoft Azure workspace.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Power BI是由Microsoft提供的业务分析服务。它允许您创建仪表板并对数据集进行一些相当复杂的计算，其中之一是将度量数据从Kubernetes集群导出到Microsoft
    Azure工作区。
- en: As you can see, we have gone from having very little information to being overwhelmed
    with stats and logs from our cluster. For more information on the Container Monitoring
    solution from Microsoft, see its product page at [https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-containers/](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-containers/).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们已经从几乎没有信息到被我们集群的统计数据和日志所淹没。有关Microsoft的容器监视解决方案的更多信息，请参阅其产品页面[https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-containers/](https://docs.microsoft.com/en-us/azure/log-analytics/log-analytics-containers/)。
- en: Summary
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have discussed how our Kubernetes cluster is secured and
    how to secure the default configuration for each of the serverless tools we have
    looked at in the previous chapters. We have looked at three ways we can get real-time
    stats from our Kubernetes clusters using the Kubernetes dashboard and also looked
    at the monitoring tools provided by Google Cloud and Microsoft Azure for storing
    and querying metrics from your clusters.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了我们的Kubernetes集群如何受到保护，以及如何保护我们在前几章中看到的每个无服务器工具的默认配置。我们已经看过三种方法，可以使用Kubernetes仪表板从我们的Kubernetes集群获取实时统计信息，并且还查看了Google
    Cloud和Microsoft Azure提供的监控工具，用于存储和查询来自您的集群的指标。
- en: In the next chapter, which is also the final chapter, we are going to be taking
    a look at how to best run your serverless workloads on Kubernetes, based on everything
    we have learnt in the previous chapters.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，也是最后一章，我们将看看如何基于我们在前几章中学到的知识最好地在Kubernetes上运行无服务器工作负载。
