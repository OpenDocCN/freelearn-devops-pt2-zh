["```\n$ brew install kubernetes-helm\n```", "```\n$ curl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash\n```", "```\n$ curl -Lo fission https://github.com/fission/fission/releases/download/0.3.0/fission-cli-osx && chmod +x fission && sudo mv fission /usr/local/bin/\n```", "```\n$ curl -Lo fission https://github.com/fission/fission/releases/download/0.3.0/fission-cli-linux && chmod +x fission && sudo mv fission /usr/local/bin/\n```", "```\n$ helm version\n$ fission --version\n```", "```\n$ minikube start\n$ kubectl get nodes\n```", "```\n$ helm init\n```", "```\n$ helm install --namespace fission --set serviceType=NodePort https://github.com/fission/fission/releases/download/0.4.0/fission-all-0.4.0.tgz\n```", "```\nNAME: lopsided-fox\nLAST DEPLOYED: Sat Dec 9 10:52:19 2017\nNAMESPACE: fission\nSTATUS: DEPLOYED\n```", "```\n==> v1/ServiceAccount\nNAME            SECRETS AGE\nfission-builder 1       1m\nfission-fetcher 1       1m\nfission-svc     1       1m\n```", "```\n==> v1beta1/ClusterRoleBinding\nNAME                 AGE\nfission-builder-crd  1m\nfission-crd          1m\nfission-fetcher-crd  1m\n```", "```\n==> v1/Service\nNAME           TYPE        CLUSTER-IP  EXTERNAL-IP PORT(S)        AGE\npoolmgr        ClusterIP   10.0.0.134  <none>      80/TCP         1m\nbuildermgr     ClusterIP   10.0.0.212  <none>      80/TCP         1m\ninfluxdb       ClusterIP   10.0.0.24   <none>      8086/TCP       1m\nnats-streaming NodePort    10.0.0.161  <none>      4222:31316/TCP 1m\nstoragesvc     ClusterIP   10.0.0.157  <none>      80/TCP         1m\ncontroller     NodePort    10.0.0.55   <none>      80:31313/TCP   1m\nrouter         NodePort    10.0.0.106  <none>      80:31314/TCP   1m\n```", "```\n==> v1beta1/Deployment\nNAME.           DESIRED CURRENT UP-TO-DATE AVAILABLE AGE\ntimer           1       1       1          1         1m\npoolmgr         1       1       1          1         1m\ninfluxdb        1       1       1          1         1m\nnats-streaming  1       1       1          1         1m\ncontroller      1       1       1          1         1m\nmqtrigger       1       1       1          1         1m\nrouter          1       1       1          0         1m\nstoragesvc      1       1       1          0         1m\nkubewatcher     1       1       1          1         1m\nbuildermgr      1       1       1          0         1m\n```", "```\n==> v1/Pod(related)\nNAME                            READY STATUS            RESTARTS AGE\nlogger-zp65r                    1/1   Running           0        1m\ntimer-57f75c486f-9ktbk          1/1   Running           2        1m\npoolmgr-69fcff7d7-hbq46         1/1   Running           1        1m\ninfluxdb-c5c6cfd86-wkwrs        1/1   Running           0        1m\nnats-streaming-85b9898784-h6j2v 1/1   Running           0        1m\ncontroller-5f964bc987-mmfrx     1/1   Running           0        1m\nmqtrigger-c85dd79f7-vj5p7       1/1   Running           0        1m\nrouter-7cfff6794b-gn5pw         0/1   ContainerCreating 0        1m\nstoragesvc-58d5c8f6-bnqc7       0/1   ContainerCreating 0        1m\nkubewatcher-6d784b9987-5wwhv    1/1   Running           0        1m\nbuildermgr-7ff69c8bb-pvtbx      0/1   ContainerCreating 0        1m\n```", "```\n==> v1/Namespace\nNAME.            STATUS AGE \nfission-builder  Active 1m\nfission-function Active 1m\n```", "```\n==> v1/Secret\nNAME     TYPE   DATA AGE \ninfluxdb Opaque 2    1m\n```", "```\n==> v1/PersistentVolumeClaim\nNAME.               STATUS VOLUME                                   CAPACITY ACCESS MODES STORAGECLASS AGE\nfission-storage-pvc Bound  pvc-082cf8d5-dccf-11e7-bfe6-080027e101f5 8Gi      RWO            standard     1m\n```", "```\n==> v1beta1/RoleBinding\nNAME                   AGE\nfission-function-admin 1m\nfission-admin          1m\n```", "```\n==> v1beta1/DaemonSet\nNAME   DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE\nlogger 1       1       1     1          1         <none>        1m\n```", "```\n$ export FISSION_URL=http://$(minikube ip):31313\n$ export FISSION_ROUTER=$(minikube ip):31314 \n```", "```\n$ for /f \"delims=\" %%a in ('minikube ip') do @set minikube_ip=%%a\n$ set FISSION_URL=http://%minikube_ip%:31313\n$ set FISSION_ROUTER=%minikube_ip%:31314\n```", "```\n$ fission env create --name nodejs --image fission/node-env\n```", "```\n$ curl https://raw.githubusercontent.com/fission/fission/master/examples/nodejs/hello.js > /tmp/hello.js\n```", "```\nmodule.exports = async function(context) {\n    return {\n        status: 200,\n        body: \"Hello, world!\\n\"\n    };\n}\n```", "```\n$ fission function create --name hello --env nodejs --code /tmp/hello.js\n```", "```\n$ fission route create --method GET --url /hello --function hello\n```", "```\n$ curl http://$FISSION_ROUTER/hello\n$ http http://$FISSION_ROUTER/hello \n```", "```\n$ explorer http://%FISSION_ROUTER%/hello \n```", "```\n$ kubectl create -f redis.yaml\n```", "```\n$ fission env create --name python --image fission/python-env\n```", "```\n$ fission function create --name guestbook-get --env python --code get.py --url /guestbook --method GET\n$ fission function create --name guestbook-add --env python --code add.py --url /guestbook --method POST\n```", "```\n$ open http://$FISSION_ROUTER/guestbook \n```", "```\n$ explorer http://%FISSION_ROUTER%/guestbook\n```", "```\n<form action=\"/guestbook\" method=\"POST\">\n  <input type=\"text\" name=\"text\">\n  <button type=\"submit\">Add</button>\n</form>\n```", "```\n#\n# Handles POST /guestbook -- adds item to guestbook \n#\n\nfrom flask import request, redirect\nimport redis\n\n# Connect to redis.\nredisConnection = redis.StrictRedis(host='redis.guestbook', port=6379, db=0)\n\ndef main():\n    # Read the item from POST params, add it to redis, and redirect\n    # back to the list\n    item = request.form['text']\n    redisConnection.rpush('guestbook', item)\n    return redirect('/guestbook', code=303)\n```", "```\n#\n# Handles GET /guestbook -- returns a list of items in the guestbook\n# with a form to add more.\n#\n\nfrom flask import current_app, escape\nimport redis\n\n# Connect to redis. This is run only when this file is loaded; as\n# long as the pod is alive, the connection is reused.\nredisConnection = redis.StrictRedis(host='redis.guestbook', port=6379, db=0)\n\ndef main():\n    messages = redisConnection.lrange('guestbook', 0, -1)\n\n    items = [(\"<li>%s</li>\" % escape(m.decode('utf-8'))) for m in messages]\n    ul = \"<ul>%s</ul>\" % \"\\n\".join(items)\n    return \"\"\"\n      <html><body style=\"font-family:sans-serif;font-size:2rem;padding:40px\">\n          <h1>Guestbook</h1> \n          <form action=\"/guestbook\" method=\"POST\">\n            <input type=\"text\" name=\"text\">\n            <button type=\"submit\">Add</button>\n          </form>\n          <hr/>\n          %s\n      </body></html>\n      \"\"\" % ul\n```", "```\n$ fission function create \\\n --name guestbook-get \\\n --env python \\\n --code get.py \\\n --url /guestbook \\\n --method GET\n```", "```\n$ fission function get --name hello \n```", "```\n$ fission function list\n```", "```\n$ fission function getmeta --name hello\n```", "```\n$ fission function logs --detail --follow --name hello\n```", "```\n$ fission function update \\\n --name hello \\\n --env nodejs \\\n --code hello-update.js \\\n```", "```\n$ fission function delete --name hello\n```", "```\n$ fission environment create \\\n --name python \\\n --image fission/python-env\n```", "```\n$ fission environment list\n```", "```\n$ fission environment get --name nodejs\n```", "```\n$ fission environment delete --name nodejs\n```", "```\n$ gcloud container clusters create kube-cluster\n```", "```\n$ kubectl get nodes\n```", "```\n$ helm init\n```", "```\n$ helm install --namespace fission https://github.com/fission/fission/releases/download/0.4.0/fission-all-0.4.0.tgz\n```", "```\nNAME: orange-shark\nLAST DEPLOYED: Sun Dec 10 13:46:02 2017\nNAMESPACE: fission\nSTATUS: DEPLOYED\n```", "```\n $ export FISSION_URL=http://$(kubectl --namespace fission get svc controller -o=jsonpath='{..ip}')\n $ export FISSION_ROUTER=$(kubectl --namespace fission get svc router -o=jsonpath='{..ip}')\n```", "```\n$ echo $FISSION_URL\n$ echo $FISSION_ROUTER\n```", "```\n$ fission env create --name nodejs --image fission/node-env\n$ curl https://raw.githubusercontent.com/fission/fission/master/examples/nodejs/hello.js > /tmp/hello.js\n$ fission function create --name hello --env nodejs --code /tmp/hello.js --url /hello --method GET\n```", "```\n$ curl http://$FISSION_ROUTER/hello\n$ http http://$FISSION_ROUTER/hello\n```", "```\n$ kubectl create -f redis.yaml\n$ fission env create --name python --image fission/python-env\n$ fission function create --name guestbook-get --env python --code get.py --url /guestbook --method GET\n$ fission function create --name guestbook-add --env python --code add.py --url /guestbook --method POST\n$ open http://$FISSION_ROUTER/guestbook\n```", "```\n'use strict';\n\nconst rp = require('request-promise-native');\n\nmodule.exports = async function (context) {\n    const stringBody = JSON.stringify(context.request.body);\n    const body = JSON.parse(stringBody);\n    const location = body.location;\n\n    if (!location) {\n        return {\n            status: 400,\n            body: {\n                text: 'You must provide a location.'\n            }\n        };\n    }\n\n    try {\n        const response = await rp(`https://query.yahooapis.com/v1/public/yql?q=select item.condition from weather.forecast where woeid in (select woeid from geo.places(1) where text=\"${location}\") and u=\"c\"&format=json`);\n        const condition = JSON.parse(response).query.results.channel.item.condition;\n        const text = condition.text;\n        const temperature = condition.temp;\n        return {\n            status: 200,\n            body: {\n                text: `It is ${temperature} celsius degrees in ${location} and ${text}`\n            },\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        };\n    } catch (e) {\n        console.error(e);\n        return {\n            status: 500,\n            body: e\n        };\n    }\n}\n```", "```\n$ fission env create --name nodejs --image fission/node-env\n$ fission function create --name weather --env nodejs --code weather.js --url /weather --method POST\n$ fission route create --method GET --url /weather --function weather\n```", "```\n$ http http://$FISSION_ROUTER/weather\n$ curl http://$FISSION_ROUTER/weather\n```", "```\n$ http POST http://$FISSION_ROUTER/weather location=\"Nottingham, England\"\n$ curl -H \"Content-Type: application/json\" -X POST -d '{\"location\":\"Nottingham, England\"}' http://$FISSION_ROUTER/weather \n```", "```\n'use strict';\n\nlet https = require('https');\n\nconst slackWebhookPath = \"/put/your/url/here\"; // Something like \"/services/XXX/YYY/zZz123\"\n\nfunction upcaseFirst(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\n}\n\nasync function sendSlackMessage(msg) {\n    let postData = `{\"text\": \"${msg}\"}`;\n    let options = {\n        hostname: \"hooks.slack.com\",\n        path: slackWebhookPath,\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    };\n\n    return new Promise(function(resolve, reject) {\n        let req = https.request(options, function(res) {\n            console.log(`slack request status = ${res.statusCode}`);\n            return resolve();\n        });\n        req.write(postData);\n        req.end();\n    });\n}\n\nmodule.exports = async function(context) {\n    console.log(context.request.headers);\n\n    let obj = context.request.body;\n    let version = obj.metadata.resourceVersion;\n    let eventType = context.request.get('X-Kubernetes-Event-Type');\n    let objType = context.request.get('X-Kubernetes-Object-Type');\n\n    let msg = `${upcaseFirst(eventType)} ${objType} ${obj.metadata.name}`;\n    console.log(msg, version);\n\n    if (eventType == 'DELETED' || eventType == 'ADDED') {\n        console.log(\"sending event to slack\")\n        await sendSlackMessage(msg);\n    }\n\n    return {\n        status: 200,\n        body: \"\"\n    }\n}\n```", "```\nconst slackWebhookPath = \"/services/T8F3CR4GG/B8FNRR3PC/wmLSDgS0fl5SGOcAgNjwr6pC\"; // Something like \"/services/XXX/YYY/zZz123\"\n```", "```\n$ fission function create --name kubeslack --env nodejs --code kubeEventsSlack.js\n```", "```\n$ fission watch create --function kubeslack --type service --ns default\n```", "```\n$ kubectl apply -f cli-hello-world.yml\n```", "```\n$ kubectl delete service cli-hello-world \n```", "```\n#!/bin/sh\n\nif ! hash cowsay 2> /dev/null; then\n    apk update > /dev/null\n    apk add curl perl > /dev/null\n    curl https://raw.githubusercontent.com/docker/whalesay/master/cowsay > /bin/cowsay 2> /dev/null\n    chmod +x /bin/cowsay\n    mkdir -p /usr/local/share/cows/\n    curl https://raw.githubusercontent.com/docker/whalesay/master/docker.cow > /usr/local/share/cows/default.cow 2> /dev/null\nfi\n\ncowsay\n```", "```\n$ fission env create --name binary --image fission/binary-env\n```", "```\n$ fission function create --name whalesay --env binary --deploy whalesay.sh --url /whale --method POST\n$ fission route create --method GET --url /whale --function whalesay\n```", "```\n$ http http://$FISSION_ROUTER/whale\n$ curl http://$FISSION_ROUTER/whale\n```", "```\n$ echo 'Hello from Whalesay !!!' | http POST http://$FISSION_ROUTER/whale\n$ curl -X POST -H \"Content-Type: text/plain\" --data 'Hello from Whalesay !!!' http://$FISSION_ROUTER/whale\n```"]