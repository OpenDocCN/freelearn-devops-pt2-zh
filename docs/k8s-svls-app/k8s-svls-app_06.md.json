["```\n$ ssh-keygen -t rsa\n```", "```\n$ cat /Users/russ/.ssh/id_rsa.pub\n```", "```\n$ choco install putty\n```", "```\n$ PUTTYGEN.exe\n```", "```\n$ ssh root@139.59.180.255\n```", "```\n$ apt-get update\n$ apt-get upgrade\n```", "```\n$ apt-get install docker.io curl apt-transport-https\n```", "```\n$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\n$ cat <<EOF >/etc/apt/sources.list.d/kubernetes.list\ndeb http://apt.kubernetes.io/ kubernetes-xenial main\nEOF\n```", "```\n$ apt-get update\n$ apt-get install kubelet kubeadm kubectl\n```", "```\n$ kubeadm version\n```", "```\n$ kubeadm init\n```", "```\n$ mkdir -p $HOME/.kube\n$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n$ sudo chown $(id -u):$(id -g) $HOME/.kube/config\n```", "```\n$ export kubever=$(kubectl version | base64 | tr -d '\\n')\n$ kubectl apply -f \"https://cloud.weave.works/k8s/net?k8s-version=$kubever\"\n```", "```\n$ apt-get update\n$ apt-get upgrade\n$ apt-get install docker.io curl apt-transport-https\n$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\n$ cat <<EOF >/etc/apt/sources.list.d/kubernetes.list\ndeb http://apt.kubernetes.io/ kubernetes-xenial main\nEOF\n$ apt-get update\n$ apt-get install kubelet kubeadm kubectl\n```", "```\n$ kubeadm join --token 0c74f5.4d5492bafe1e0bb9 139.59.180.255:6443 --discovery-token-ca-cert-hash sha256:3331ba91e4a3a887c99e59d792b9f031575619b4646f23d8fe2938dc50f89491\n```", "```\n$ kubectl get nodes\n```", "```\n$ scp root@139.59.180.255:/etc/kubernetes/admin.conf \n```", "```\n$ choco install winscp\n```", "```\n$ kubectl --kubeconfig ./admin.conf get nodes\n```", "```\n$ mv ~/.kube/config ~/.kube/config.mini\n$mv admin.conf ~/.kube/config\n```", "```\n$ kubectl get nodes\n```", "```\n$ aws ec2 describe-instances\n```", "```\n$ aws kms --region=eu-west-1 create-key --description=\"kube-aws assets\"\n```", "```\n$ aws s3api --region=eu-west-1 create-bucket --bucket kube-aws-russ --create-bucket-configuration LocationConstraint=eu-west-1\n```", "```\n$ brew install kube-aws\n```", "```\n$ cd /tmp\n$ wget https://github.com/kubernetes-incubator/kube-aws/releases/download/v0.9.8/kube-aws-linux-amd64.tar.gz\n$ tar zxvf kube-aws-linux-amd64.tar.gz\n$ sudo mv linux-amd64/kube-aws /usr/local/bin\n$ sudo chmod 755 /usr/local/bin/kube-aws\n```", "```\n$ kube-aws version\n```", "```\n$ mkdir kube-aws-cluster\n$ cd kube-aws-cluster\n```", "```\nkube-aws init \\\n --cluster-name=kube-aws-cluster \\\n --external-dns-name=kube.mckendrick.io \\\n --hosted-zone-id=Z2WSA56Y5ICKTT \\\n --region=eu-west-1 \\\n --availability-zone=eu-west-1a \\\n --key-name=russ \\\n --kms-key-arn=\"arn:aws:kms:eu-west-1:687011238589:key/2d54175d-41e1-4865-ac57-b3c40d0c4c3f\"\n```", "```\n$ kube-aws render credentials --generate-ca\n```", "```\n$ kube-aws render stack\n```", "```\n$ kube-aws validate --s3-uri s3://kube-aws-russ/kube-aws-cluster\n```", "```\n$ kube-aws up --s3-uri s3://kube-aws-russ/kube-aws-cluster\n```", "```\n$ kubectl --kubeconfig=kubeconfig get nodes\n```", "```\n$ kubectl --kubeconfig=kubeconfig create namespace sock-shop\n$ kubectl --kubeconfig=kubeconfig apply -n sock-shop -f \"https://github.com/microservices-demo/microservices-demo/blob/master/deploy/kubernetes/complete-demo.yaml?raw=true\"\n```", "```\n$ kubectl --kubeconfig=kubeconfig -n sock-shop get pods\n```", "```\n$ kubectl --kubeconfig=kubeconfig -n sock-shop expose deployment front-end --type=LoadBalancer --name=front-end-lb\n```", "```\n$ kubectl --kubeconfig=kubeconfig -n sock-shop get services front-end-lb\n```", "```\n$ kubectl --kubeconfig=kubeconfig -n sock-shop describe services front-end-lb\n```", "```\n$ kubectl --kubeconfig=kubeconfig delete namespace sock-shop\n```", "```\n$ kube-aws destroy\n```", "```\n$ aws s3 rb s3://kube-aws-russ --force\n$ aws kms --region=eu-west-1 disable-key --key-id 2d54175d-41e1-4865-ac57-b3c40d0c4c3f\n```", "```\n$ brew update\n$ brew install azure-cli\n```", "```\n$ echo \"deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ wheezy main\" | sudo tee /etc/apt/sources.list.d/azure-cli.list\n$ sudo apt-key adv --keyserver packages.microsoft.com --recv-keys 52E16F86FEE04B979B07E28DB02C46DF417A0893\n$ sudo apt-get install apt-transport-https\n$ sudo apt-get update && sudo apt-get install azure-cli\n```", "```\n$ az login\n```", "```\n$ az account show\n```", "```\n$ az provider register -n Microsoft.ContainerService\n```", "```\n$ az provider show -n Microsoft.ContainerService\n```", "```\n$ az group create --name KubeResourceGroup --location ukwest\n$ az aks create --resource-group KubeResourceGroup --name AzureKubeCluster --agent-count 1 --generate-ssh-keys\n```", "```\n$ az aks get-credentials --resource-group KubeResourceGroup --name AzureKubeCluster\n```", "```\n$ kubectl get nodes\n```", "```\n$ az aks scale --resource-group KubeResourceGroup --name AzureKubeCluster --agent-count 3\n$ kubectl get nodes\n```", "```\n$ kubectl create namespace sock-shop\n$ kubectl apply -n sock-shop -f \"https://github.com/microservices-demo/microservices-demo/blob/master/deploy/kubernetes/complete-demo.yaml?raw=true\"\n```", "```\n$ kubectl -n sock-shop get pods\n```", "```\n$ kubectl -n sock-shop expose deployment front-end --type=LoadBalancer --name=front-end-lb\n$ kubectl -n sock-shop get services front-end-lb\n$ kubectl -n sock-shop describe services front-end-lb\n```", "```\n$ kubectl delete namespace sock-shop\n```", "```\n$ az aks delete --resource-group KubeResourceGroup --name AzureKubeCluster\n$ az group delete --name KubeResourceGroup\n```", "```\n$ brew cask install google-cloud-sdk\n```", "```\n$ choco install gcloudsdk\n```", "```\n$ export CLOUD_SDK_REPO=\"cloud-sdk-$(lsb_release -c -s)\"\n$ echo \"deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\n$ curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\n$ sudo apt-get update && sudo apt-get install google-cloud-sdk\n```", "```\n$ gcloud init\n```", "```\n$ gcloud projects create russ-kubernetes-cluster\n```", "```\n$ gcloud config set project russ-kubernetes-cluster\n$ gcloud config set compute/zone us-central1-b\n```", "```\n$ gcloud container clusters create kube-cluster\n```", "```\n$ gcloud container clusters create kube-cluster\n```", "```\n$ kubectl create namespace sock-shop\n$ kubectl apply -n sock-shop -f \"https://github.com/microservices-demo/microservices-demo/blob/master/deploy/kubernetes/complete-demo.yaml?raw=true\"\n$ kubectl -n sock-shop get pods\n$ kubectl -n sock-shop expose deployment front-end --type=LoadBalancer --name=front-end-lb\n$ kubectl -n sock-shop get services front-end-lb\n$ kubectl -n sock-shop describe services front-end-lb\n```", "```\n$ kubectl delete namespace sock-shop\n```", "```\n$ kubectl create ns kubeless\n$ kubectl create -f https://github.com/kubeless/kubeless/releases/download/v0.2.3/kubeless-v0.2.3.yaml\n```", "```\n$ kubectl get pods -n kubeless\n$ kubectl get deployment -n kubeless\n$ kubectl get statefulset -n kubeless\n```", "```\n**$ kubeless function deploy hello \\**\n **--from-file hello.py \\**\n **--handler hello.handler \\**\n **--runtime python2.7 \\**\n **--trigger-http** \n```", "```\n$ kubectl get functions\n$ kubeless function ls\n```", "```\n$ kubeless function call hello \n```", "```\n$ kubectl expose deployment hello --type=LoadBalancer --name=hello-lb\n```", "```\n$ kubectl get services hello-lb\n```", "```\n$ gcloud container clusters delete kube-cluster\n```"]