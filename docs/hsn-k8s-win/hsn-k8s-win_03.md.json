["```\nFROM mcr.microsoft.com/windows/servercore/iis:windowsservercore-1903\n\nRUN powershell -NoProfile -Command Remove-Item -Recurse C:\\inetpub\\wwwroot\\*\nWORKDIR /inetpub/wwwroot\nCOPY index.html .\n```", "```\ndocker history <imageName>\n```", "```\ndocker volume create <volumeName>\n```", "```\ndocker run -it --rm `\n --isolation=process `\n --mount source=test-named-volume,target=C:\\Data `\n mcr.microsoft.com/powershell:windowsservercore-1903\n```", "```\necho \"Hello, Volume!\" > C:\\Data\\test.txt\n```", "```\nPS C:\\WINDOWS\\system32> cat C:\\ProgramData\\Docker\\volumes\\test-named-volume\\_data\\test.txt\nHello, Volume!\n```", "```\ndocker run -it --rm `\n --isolation=process `\n --mount source=test-named-volume,target=C:\\ServerData `\n mcr.microsoft.com/windows/servercore:1903\n```", "```\nC:\\>more C:\\ServerData\\test.txt\nHello, Volume!\n```", "```\ndocker stop <containerId>\ndocker rm <containerId>\ndocker volume rm <volumeId>\n```", "```\ndocker volume prune\n```", "```\ndocker run -it --rm `\n --isolation=process `\n --mount type=bind,source=C:\\Users,target=C:\\HostUsers `\n mcr.microsoft.com/powershell:windowsservercore-1903\n```", "```\nInvoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\\AzureCLI.msi\nStart-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'\nRemove-Item .\\AzureCLI.msi\n```", "```\naz login\n```", "```\naz account show\n```", "```\nInstall-Module -Name Az -AllowClobber -Scope CurrentUser\n```", "```\nSet-ExecutionPolicy RemoteSigned\n```", "```\nConnect-AzAccount\n```", "```\naz group create `\n --name docker-storage-resource-group `\n --location westeurope\n```", "```\naz storage account create `\n --name dockerstorageaccount `\n --resource-group docker-storage-resource-group `\n --location westeurope `\n --sku Standard_RAGRS `\n --kind StorageV2\n```", "```\n$azureStorageAccountConnString = az storage account show-connection-string `\n --name dockerstorageaccount `\n --resource-group docker-storage-resource-group `\n --query \"connectionString\" `\n --output tsv\n\nif (!$azureStorageAccountConnString) {\n Write-Error \"Couldn't retrieve the connection string.\"\n}\n```", "```\naz storage share create `\n --name docker-bind-mount-share `\n --quota 2 `\n --connection-string $azureStorageAccountConnString \n```", "```\n$resourceGroupName = \"docker-storage-resource-group\"\n$storageAccountName = \"dockerstorageaccount\"\n$fileShareName = \"docker-bind-mount-share\"\n```", "```\n$storageAccount = Get-AzStorageAccount `\n -ResourceGroupName $resourceGroupName `\n -Name $storageAccountName\n$storageAccountKeys = Get-AzStorageAccountKey `\n -ResourceGroupName $resourceGroupName `\n -Name $storageAccountName\n```", "```\nInvoke-Expression -Command `\n (\"cmdkey /add:$([System.Uri]::new($storageAccount.Context.FileEndPoint).Host) \" + `\n \"/user:AZURE\\$($storageAccount.StorageAccountName) /pass:$($storageAccountKeys[0].Value)\")\n```", "```\n$fileShare = Get-AzStorageShare -Context $storageAccount.Context | Where-Object { \n    $_.Name -eq $fileShareName -and $_.IsSnapshot -eq $false\n}\n```", "```\nif ($fileShare -eq $null) {\n    Write-Error \"Azure File share not found\"\n}\n```", "```\n$password = ConvertTo-SecureString `\n    -String $storageAccountKeys[0].Value `\n    -AsPlainText `\n    -Force\n$credential = New-Object System.Management.Automation.PSCredential `-ArgumentList \"AZURE\\$($storageAccount.StorageAccountName)\", $password\n```", "```\nNew-SmbGlobalMapping `\n -RemotePath \"\\\\$($fileShare.StorageUri.PrimaryUri.Host)\\$($fileShare.Name)\" `\n -Credential $credential `\n -Persistent $true `\n -LocalPath G:\n```", "```\n New-Item -ItemType Directory -Force -Path G:\\ContainerData\n```", "```\ndocker run -it --rm `\n --isolation=process `\n --mount type=bind,source=G:\\ContainerData,target=C:\\Data               `mcr.microsoft.com/powershell:windowsservercore-1903\n```", "```\nGet-Process > C:\\Data\\processes.txt\n```", "```\ndocker network create --driver nat mongo-cluster\n```", "```\nNew-Item -ItemType Directory -Force -Path G:\\MongoData1\\db\nNew-Item -ItemType Directory -Force -Path G:\\MongoData1\\configdb\nNew-Item -ItemType Directory -Force -Path G:\\MongoData2\\db\nNew-Item -ItemType Directory -Force -Path G:\\MongoData2\\configdb\nNew-Item -ItemType Directory -Force -Path G:\\MongoData3\\db\nNew-Item -ItemType Directory -Force -Path G:\\MongoData3\\configdb\n```", "```\ndocker build -t mongo-1903:latest .\n```", "```\ndocker run -d `\n --isolation=process `\n --volume G:\\MongoData1\\db:C:\\data\\db `\n --volume G:\\MongoData1\\configdb:C:\\data\\configdb `\n --name mongo-node1 `\n --net mongo-cluster `\n mongo-1903:latest `\n mongod --bind_ip_all --replSet replSet0\n```", "```\ndocker run -d `\n --isolation=process `\n --volume G:\\MongoData2\\db:C:\\data\\db `\n --volume G:\\MongoData2\\configdb:C:\\data\\configdb `\n --name mongo-node2 `\n --net mongo-cluster `\n mongo-1903:latest `\n mongod --bind_ip_all --replSet replSet0\n\ndocker run -d `\n --isolation=process `\n --volume G:\\MongoData3\\db:C:\\data\\db `\n --volume G:\\MongoData3\\configdb:C:\\data\\configdb `\n --name mongo-node3 `\n --net mongo-cluster `\n mongo-1903:latest `\n mongod --bind_ip_all --replSet replSet0\n```", "```\ndocker exec -it mongo-node1 mongo\n```", "```\nrs.initiate(\n  {\n    \"_id\" : \"replSet0\",\n    \"members\" : [\n      { \"_id\" : 0, \"host\" : \"mongo-node1:27017\" },\n      { \"_id\" : 1, \"host\" : \"mongo-node2:27017\" },\n      { \"_id\" : 2, \"host\" : \"mongo-node3:27017\" }\n    ]\n  }\n)\n```", "```\nfor (var i = 1; i <= 1000; i++) {\n db.demo.insert( { exampleValue : i } )\n}\n```", "```\ndb.demo.find()\n```", "```\ndocker build -t mongo-dotnet-sample:latest .\n```", "```\ndocker run --isolation=process `\n --rm `\n --net mongo-cluster `\n mongo-dotnet-sample:latest\n```"]