["```\nhttp_requests_total{method=\"post\",code=\"200\"} 190\nhttp_requests_total{method=\"post\",code=\"400\"} 5\n```", "```\nchoco install prometheus-wmi-exporter.install\n```", "```\nif ((Get-Command \"choco\" -ErrorAction SilentlyContinue) -eq $null) {\n Invoke-Expression ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1')) | Out-Null\n}\n\nchoco install prometheus-wmi-exporter.install -y --force --params \"`\"/EnabledCollectors:cpu,cs,container,dns,logical_disk,logon,memory,net,os,process,service,system,tcp`\"\"\n```", "```\nSet-Content -Value '{ \"metrics-addr\" : \"0.0.0.0:9323\", \"experimental\" : true }' -Path C:\\ProgramData\\docker\\config\\daemon.json\nRestart-Service Docker -Force\n```", "```\nParam(\n    [Parameter()]\n    [string]$PackageParameters = \"/EnabledCollectors:cpu,cs,container,dns,logical_disk,logon,memory,net,os,process,service,system,tcp\"\n)\n\nif ((Get-Command \"choco\" -ErrorAction SilentlyContinue) -eq $null) {\n    Invoke-Expression ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1')) | Out-Null\n}\n\nchoco install prometheus-wmi-exporter.install -y --force --params \"`\"$PackageParameters`\"\"\n\nSet-Content -Value '{ \"metrics-addr\" : \"0.0.0.0:9323\", \"experimental\" : true }' -Path C:\\ProgramData\\docker\\config\\daemon.json\nRestart-Service Docker -Force\n```", "```\n\"properties\": {\n     \"publisher\": \"Microsoft.Compute\",\n     \"type\": \"CustomScriptExtension\",\n     \"typeHandlerVersion\": \"1.8\",\n     \"autoUpgradeMinorVersion\": true,\n     \"settings\": {\n       \"fileUris\": [\n         \"[concat(parameters('artifactsLocation'), 'extensions/prometheus-exporters/v1/installExporters.ps1')]\"\n        ]\n     },\n     \"protectedSettings\": {\n       \"commandToExecute\": \"[concat('powershell.exe -ExecutionPolicy bypass \\\"& ./installExporters.ps1 -PackageParameters ', parameters('extensionParameters'), '\\\"')]\"\n     }\n}\n```", "```\n{\n  \"apiVersion\": \"vlabs\",\n  \"properties\": \n    ...\n    \"agentPoolProfiles\": [\n      {\n        \"name\": \"linuxpool1\",\n        \"vmSize\": \"Standard_D4_v3\"\n        ...\n      },\n      {        \n        \"name\": \"windowspool2\",\n        ...\n        \"extensions\": [\n            {\n                \"name\": \"prometheus-exporters\",\n                \"singleOrAll\": \"all\"\n            }\n        ]\n      }\n    ],\n    ...\n    \"extensionProfiles\": [\n      {\n        \"name\": \"prometheus-exporters\",\n        \"version\": \"v1\",\n        \"rootURL\": \"https://raw.githubusercontent.com/ptylenda/aks-engine-windows-extensions/master/\",\n        \"extensionParameters\": \"'/EnabledCollectors:cpu,cs,container,dns,logical_disk,logon,memory,net,os,process,service,system,tcp'\"\n      }\n    ]\n  }\n}\n```", "```\nazureuser@k8s-master-36012248-0:~$ curl http://10.240.0.65:9323/metrics\n# HELP builder_builds_failed_total Number of failed image builds\n# TYPE builder_builds_failed_total counter\nbuilder_builds_failed_total{reason=\"build_canceled\"} 0\nbuilder_builds_failed_total{reason=\"build_target_not_reachable_error\"} 0\nbuilder_builds_failed_total{reason=\"command_not_supported_error\"} 0\n...\nazureuser@k8s-master-36012248-0:~$ curl http://10.240.0.65:9182/metrics\n# HELP go_gc_duration_seconds A summary of the GC invocation durations.\n# TYPE go_gc_duration_seconds summary\ngo_gc_duration_seconds{quantile=\"0\"} 0\ngo_gc_duration_seconds{quantile=\"0.25\"} 0\ngo_gc_duration_seconds{quantile=\"0.5\"} 0\n...\n```", "```\n---\nkind: Namespace\napiVersion: v1\nmetadata:\n  name: monitoring\n  labels:\n    name: monitoring\n---\nkind: StorageClass\napiVersion: storage.k8s.io/v1beta1\nmetadata:\n  name: azure-disk\nprovisioner: kubernetes.io/azure-disk\nparameters:\n  storageaccounttype: Standard_LRS\n  kind: Managed\n```", "```\nserver:\n  enabled: true\n  global:\n scrape_interval: 50s\n scrape_timeout: 15s\n evaluation_interval: 1m\n  service:\n    type: LoadBalancer\n  nodeSelector:\n    \"kubernetes.io/os\": linux\n  persistentVolume:\n    storageClass: azure-disk\n\nalertmanager:\n  enabled: true\n  service:\n    type: LoadBalancer\n  nodeSelector:\n    \"kubernetes.io/os\": linux\n  persistentVolume:\n    storageClass: azure-disk\n\nnodeExporter:\n  enabled: true\n  nodeSelector:\n    \"kubernetes.io/os\": linux\n\npushgateway:\n  enabled: true\n  nodeSelector:\n    \"kubernetes.io/os\": linux\n\nkubeStateMetrics:\n  enabled: true\n  nodeSelector:\n    \"kubernetes.io/os\": linux\n```", "```\nextraScrapeConfigs: |\n   - job_name: windows-nodes-docker-metrics-server\n     kubernetes_sd_configs:\n       - role: node\n     scheme: http\n     relabel_configs:\n     - action: labelmap\n       regex: __meta_kubernetes_node_label_(.+)\n     - source_labels: [__address__]\n       action: replace\n       target_label: __address__\n       regex: ([^:;]+):(\\d+)\n       replacement: ${1}:9323\n     - source_labels: [kubernetes_io_os]\n       action: keep\n       regex: windows\n     - source_labels: [__meta_kubernetes_node_name]\n       regex: (.+)\n       target_label: __metrics_path__\n       replacement: /metrics\n     - source_labels: [__meta_kubernetes_node_name]\n       action: replace\n       target_label: node\n       regex: (.*)\n       replacement: ${1}\n...\n```", "```\nhelm install prometheus stable/prometheus -n monitoring --values .\\helm-values_prometheus.yaml --debug\n```", "```\nnodeSelector:\n  \"kubernetes.io/os\": linux\n\nservice:\n  type: LoadBalancer\n\npersistence:\n  enabled: true\n  storageClassName: azure-disk\n  size: 20Gi\n  accessModes:\n   - ReadWriteOnce\n\nadminUser: admin\nadminPassword: P@ssword\n\ndatasources:\n  datasources.yaml:\n    apiVersion: 1\n    datasources:\n    - name: Prometheus\n      type: prometheus\n      url: http://prometheus-server\n      access: proxy\n      isDefault: true\n```", "```\nhelm install grafana stable/grafana -n monitoring --values .\\helm-values_grafana.yaml --debug\n```", "```\nPS C:\\src> kubectl get pod,svc -n monitoring\n...\nNAME                                    TYPE           CLUSTER-IP     EXTERNAL-IP    PORT(S)        AGE\nservice/grafana                         LoadBalancer   10.0.28.94     104.40.19.54   80:30836/TCP   2h\nservice/prometheus-alertmanager         LoadBalancer   10.0.0.229     40.78.81.58    80:30073/TCP   2h\nservice/prometheus-server               LoadBalancer   10.0.219.93    40.78.42.14    80:32763/TCP   2h\n...\n```", "```\n...\n[[outputs.prometheus_client]]\n  listen = \"0.0.0.0:9273\"\n  path = \"/metrics\"\n...\n[inputs.win_perf_counters]]\n  UseWildcardsExpansion = false\n  PrintValid = false\n\n  [[inputs.win_perf_counters.object]]\n    # Processor usage, alternative to native, reports on a per core.\n    ObjectName = \"Processor\"\n    Instances = [\"*\"]\n    Counters = [\n      \"% Idle Time\",\n      \"% Interrupt Time\",\n      \"% Privileged Time\",\n      \"% User Time\",\n      \"% Processor Time\",\n      \"% DPC Time\",\n    ]\n    Measurement = \"win_cpu\"\n    # Set to true to include _Total instance when querying for all (*).\n    IncludeTotal=true\n...\n```", "```\n...\nFROM mcr.microsoft.com/dotnet/framework/aspnet:4.8-windowsservercore-ltsc2019 AS runtime\n\nWORKDIR /temp\nRUN powershell -Command \\\n    Invoke-WebRequest https://dl.influxdata.com/telegraf/releases/telegraf-1.12.6_windows_amd64.zip -OutFile telegraf.zip \\\n  ; powershell -Command Expand-Archive -Path telegraf.zip -DestinationPath C:\\temp \\\n  ; Remove-Item -Path telegraf.zip \\\n  ; mkdir c:\\telegraf \\\n  ; Move-Item -Path c:\\temp\\telegraf\\telegraf.exe -Destination c:\\telegraf\n\nWORKDIR /telegraf\nRUN powershell -Command \\\n    mkdir telegraf.d \\\n  ; .\\telegraf.exe --service install --config C:\\telegraf\\telegraf.conf --config-directory C:\\telegraf\\telegraf.d\nCOPY telegraf.conf .\nRUN powershell -Command \\\n    Start-Service telegraf\nEXPOSE 9273\n\n...\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: {{ include \"voting-application.fullname\" . }}\n  ...\n  annotations:\n    prometheus.io/scrape: \"true\"\n    prometheus.io/port: \"9273\"\n...\n```", "```\napiVersion: apps/v1\nkind: Deployment\n...\nspec:\n  ...\n  template:\n    ...\n    spec:\n    ...\n      containers:\n        - name: {{ .Chart.Name }}-frontend\n          ...\n          ports:\n            ...\n            - name: telegraf\n containerPort: 9273\n protocol: TCP\n          ...\n```", "```\nkind: Namespace\napiVersion: v1\nmetadata:\n  name: dev-helm\n  labels:\n    name: dev-helm\n```", "```\nhelm install voting-application . `\n --namespace dev-helm `\n --debug `\n --timeout 900s\n```", "```\nvar server = new MetricServer(port: 9274);\nserver.Start();\n```", "```\nRUN \"netsh http add urlacl url=http://+:9274/metrics user=\\\"IIS AppPool\\DefaultAppPool\\\"\"\nEXPOSE 9274\n```", "```\nprivate static readonly Counter DbAddedVotesCount = Metrics.CreateCounter(\n    \"votingapplication_db_added_votes\",\n    \"Number of votes added to the database.\");\n\nprivate static readonly Histogram GetSurveyResultOperationDuration = Metrics.CreateHistogram(\n    \"votingapplication_getsurveyresult_duration_seconds\",\n    \"Histogram for duration of GetSurveyResult operation.\",\n    new HistogramConfiguration { Buckets = Histogram.ExponentialBuckets(0.001, 1.5, 20) });\n```", "```\n...\n    this.voteLogManager.Append(vote);\n    this.db.Votes.Add(vote);\n    DbAddedVotesCount.Inc();\n}\n...\n```", "```\nSurveyResult result;\nusing (GetSurveyResultOperationDuration.NewTimer())\n{\n    result = this.GetSurveyResult(survey);\n}\n\nreturn this.View(result);\n```", "```\n# HELP votingapplication_db_added_votes Number of votes added to the database.\n# TYPE votingapplication_db_added_votes counter\nvotingapplication_db_added_votes 3\n...\n# HELP votingapplication_getsurveyresult_duration_seconds Histogram for duration of GetSurveyResult operation.\n# TYPE votingapplication_getsurveyresult_duration_seconds histogram\nvotingapplication_getsurveyresult_duration_seconds_sum 0.5531466\nvotingapplication_getsurveyresult_duration_seconds_count 7\nvotingapplication_getsurveyresult_duration_seconds_bucket{le=\"0.005\"} 0\nvotingapplication_getsurveyresult_duration_seconds_bucket{le=\"0.01\"} 0\n...\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: {{ include \"voting-application.fullname\" . }}\n  ...\n  annotations:\n    ...\n    prometheus.io/secondary-port: \"9274\"\n...\n```", "```\napiVersion: apps/v1\nkind: Deployment\n...\nspec:\n  ...\n  template:\n    ...\n    spec:\n    ...\n      containers:\n        - name: {{ .Chart.Name }}-frontend\n          ...\n          ports:\n            ...\n            - name: app-metrics\n containerPort: 9274\n protocol: TCP\n          ...\n```", "```\nhelm upgrade voting-application . `\n --namespace dev-helm `\n --debug `\n --timeout 900s\n```", "```\n   - job_name: kubernetes-service-endpoints-secondary-ports\n     kubernetes_sd_configs:\n     - role: endpoints\n     relabel_configs:\n     - action: keep\n       regex: true\n       source_labels:\n       - __meta_kubernetes_service_annotation_prometheus_io_scrape\n     - action: keep\n regex: (\\d+)\n source_labels:\n - __meta_kubernetes_service_annotation_prometheus_io_secondary_port\n     ...\n     - action: replace\n       regex: ([^:]+)(?::\\d+)?;(\\d+)\n       replacement: $1:$2\n       source_labels:\n       - __address__\n       - __meta_kubernetes_service_annotation_prometheus_io_secondary_port\n       target_label: __address__     \n```", "```\nhelm upgrade prometheus stable/prometheus -n monitoring --values .\\helm-values_prometheus.yaml --debug\n```", "```\ngrafana.ini:\n  smtp:\n    enabled: true\n    host: <smtpAddressAndPort>  # For Gmail: smtp.gmail.com:587\n    user: <smtpUser>\n    password: <smtpPassword>\n    skip_verify: true  # Needed for Gmail\n    from_address: <emailAddress>\n    from_name: <name>\n```", "```\nhelm upgrade grafana stable/grafana -n monitoring --values .\\helm-values_grafana.yaml --debug\n```"]