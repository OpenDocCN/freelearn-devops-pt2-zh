["```\nkubectl create namespace prod\n```", "```\n---\nkind: Namespace\napiVersion: v1\nmetadata:\n  name: prod\n  labels:\n    name: prod\n---\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  namespace: prod\n  name: default-resource-quota\nspec:\n  hard:\n    requests.cpu: 500m\n    requests.memory: 1Gi\n    limits.cpu: \"1\"\n    limits.memory: 2Gi\n```", "```\nkubectl apply -f .\\namespace-prod.yaml\n```", "```\nPS C:\\src> kubectl describe resourcequota -n prod\nName:            default-resource-quota\nNamespace:       prod\nResource         Used  Hard\n--------         ----  ----\nlimits.cpu       0     1\nlimits.memory    0     2Gi\nrequests.cpu     0     500m\nrequests.memory  0     1Gi\n```", "```\nkubectl get pods -n prod\n```", "```\nkubectl config set-context --current --namespace=prod\n```", "```\nkubectl delete namespace prod\n```", "```\npublic ActionResult CheckHealth()\n{\n    this.Response.TrySkipIisCustomErrors = true;\n\n    if (!this.db.Database.CompatibleWithModel(throwIfNoMetadata: true))\n    {\n        this.Response.StatusCode = (int)HttpStatusCode.ServiceUnavailable;\n        return this.Json(new { status = \"Database migrations pending\" }, JsonRequestBehavior.AllowGet);\n    }\n\n    return this.Json(new { status = \"Ok\" }, JsonRequestBehavior.AllowGet);\n}\n```", "```\nroutes.MapRoute(\n    name: \"Health\",\n    url: \"health\",\n    defaults: new { controller = \"Health\", action = \"CheckHealth\" });\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  namespace: dev\n  name: voting-application-frontend\n  ...\nspec:\n  ...\n  template:\n    ...\n    spec:\n      ...\n      containers:\n      - name: frontend\n        image: packtpubkubernetesonwindows/voting-application:1.1.0\n        ...\n        readinessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 40\n          successThreshold: 1\n          failureThreshold: 3\n        ...\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  namespace: dev\n  name: voting-application-frontend\n  ...\nspec:\n  ...\n  template:\n    ...\n    spec:\n    ...\n    containers:\n    - name: frontend\n    image: packtpubkubernetesonwindows/voting-application:1.1.0\n    ...\n    livenessProbe:\n      exec:\n        command:\n        - powershell.exe\n        - -Command\n        - if ((Get-WebAppPoolState DefaultAppPool).Value -ne \"Started\") { throw \"Default IIS App Pool is NOT started\" }\n        initialDelaySeconds: 45\n        periodSeconds: 10\n        timeoutSeconds: 10\n        successThreshold: 1\n        failureThreshold: 3\n        ...\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  namespace: dev\n  name: voting-application-frontend\n  ...\nspec:\n  ...\n  template:\n    ...\n    spec:\n      ...\n      containers:\n      - name: frontend\n        image: packtpubkubernetesonwindows/voting-application:1.1.0\n        ...\n        startupProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 60\n          timeoutSeconds: 40\n          successThreshold: 1\n          failureThreshold: 5\n        ...\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  namespace: dev\n  name: voting-application-frontend\n  ...\nspec:\n  replicas: 5\n  ...\n  # strategy:\n  ...\n  template:\n    ...\n    spec:\n      ...\n      containers:\n      - name: frontend\n        ...        \n        resources:\n          limits:\n            cpu: 1000m\n          requests:\n            cpu: 1000m\n            memory: 256Mi\n```", "```\nPS C:\\src> kubectl get pods -n dev\nNAME                                            READY   STATUS      RESTARTS   AGE\nvoting-application-frontend-54bbbbd655-nzt2n    1/1     Running     0          118s\nvoting-application-frontend-54bbbbd655-phdhr    0/1     Pending     0          118s\nvoting-application-frontend-54bbbbd655-qggc2    1/1     Running     0          118s\n...\n```", "```\nPS C:\\src> kubectl describe pod -n dev voting-application-frontend-54bbbbd655-phdhr\nEvents:\n Type     Reason            Age        From                 Message\n ----     ------            ----       ----                 -------\n Warning  FailedScheduling  <unknown>  default-scheduler    0/5 nodes are available: 2 Insufficient cpu, 3 node(s) didn't match node selector.\n```", "```\nprivate void StartCpuStress()\n{\n    this.logger.Info($\"Environment.ProcessorCount: {Environment.ProcessorCount}\");\n\n    for (int i = 0; i < Environment.ProcessorCount; i++)\n    {\n        var thread = new Thread(\n            () =>\n                {\n                    var watch = new Stopwatch();\n                    watch.Start();\n\n                    while (this.isEnabled)\n                    {\n                        if (watch.ElapsedMilliseconds <= this.targetCpuLoad)\n                        {\n                            continue;\n                        }\n\n                        Thread.Sleep(100 - this.targetCpuLoad);\n\n                        watch.Reset();\n                        watch.Start();\n                    }\n                });\n\n        thread.Start();\n    }\n}\n```", "```\npublic ActionResult StressCpu([FromUri] int value)\n{\n    this.Response.StatusCode = (int)HttpStatusCode.Accepted;\n    var host = Dns.GetHostEntry(string.Empty).HostName;\n\n    if (value < 0)\n    {\n        this.cpuStressWorker.Disable();\n        return this.Json(new { host, status = $\"Stressing CPU turned off\" }, JsonRequestBehavior.AllowGet);\n    }\n\n    if (value > 100)\n    {\n        value = 100;\n    }\n\n    this.cpuStressWorker.Enable(value);\n    return this.Json(new { host, status = $\"Stressing CPU at {value}% level\" }, JsonRequestBehavior.AllowGet);\n}\n```", "```\nkernel.Bind<ICpuStressWorker>().To<CpuStressWorker>().InSingletonScope();\n```", "```\nresources:\n  limits:\n    cpu: 500m\n  requests:\n    cpu: 400m\n    memory: 256Mi\n```", "```\nPS C:\\src> kubectl top pod -n dev\nNAME                                           CPU(cores)   MEMORY(bytes)\nmssql-deployment-58bcb8b89d-7f9xz              339m         903Mi\nvoting-application-frontend-6b6c9557f8-5wwln   117m         150Mi\nvoting-application-frontend-6b6c9557f8-f787m   221m         148Mi\nvoting-application-frontend-6b6c9557f8-rjwmj   144m         164Mi\nvoting-application-frontend-6b6c9557f8-txwl2   120m         191Mi\nvoting-application-frontend-6b6c9557f8-vw5r9   160m         151Mi\n```", "```\napiVersion: autoscaling/v1\nkind: HorizontalPodAutoscaler\nmetadata:\n  namespace: dev\n  name: voting-application-frontend\nspec:\n  minReplicas: 1\n  maxReplicas: 8\n  targetCPUUtilizationPercentage: 60\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: voting-application-frontend\n```", "```\nPS C:\\src> kubectl describe hpa -n dev voting-application-frontend\n...\nMetrics:                                               ( current / target )\n resource cpu on pods (as a percentage of request): 37% (150m) / 60%\nEvents:\n Type     Reason                        Age   From                       Message\n ----     ------                        ----  ----                       -------\n...\n Normal   SuccessfulRescale             8m6s  horizontal-Pod-autoscaler  New size: 4; reason: All metrics below target\n Normal   SuccessfulRescale             3m3s  horizontal-Pod-autoscaler  New size: 3; reason: All metrics below targetcpu\n```", "```\n Normal   SuccessfulRescale             7m44s            horizontal-Pod-autoscaler  New size: 4; reason: cpu resource utilization (percentage of request) above target\n Normal   SuccessfulRescale             7m29s               horizontal-Pod-autoscaler  New size: 5; reason: cpu resource utilization (percentage of request) above target\n Normal   SuccessfulRescale             2m25s               horizontal-Pod-autoscaler  New size: 8; reason: cpu resource utilization (percentage of request) above target\n```", "```\nkubectl create secret generic -n dev mssql --from-literal=SA_PASSWORD=\"S3cur3P@ssw0rd\"\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  namespace: dev\n  name: voting-application-frontend\n  ...\nspec:\n  ...\n  template:\n    ...\n    spec:\n      ...\n      containers:\n      - name: frontend\n        image: packtpubkubernetesonwindows/voting-application:1.2.0\n        env:\n        - name: MSSQL_SA_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mssql\n              key: SA_PASSWORD\n        - name: CONNECTIONSTRING_VotingApplication\n          value: \"Data Source=mssql-deployment;Initial Catalog=VotingApplication;MultipleActiveResultSets=true;User Id=sa;Password=$(MSSQL_SA_PASSWORD);\"\n```", "```\n  <system.web>\n    <compilation debug=\"true\" targetFramework=\"4.8\" />\n    <httpRuntime targetFramework=\"4.8\" />\n    <customErrors configSource=\"config\\customErrors.config\" />\n  </system.web>\n```", "```\n<customErrors mode=\"On\" />\n```", "```\nkind: ConfigMap \napiVersion: v1 \nmetadata: \n  namespace: dev \n  name: voting-application-customerrors-config\n  labels: \n    app: voting-application\ndata: \n  customErrors.config: |\n    <customErrors mode=\"On\" />\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  namespace: dev\n  name: voting-application-frontend\n  ...\nspec:\n  ...\n  template:\n    ...\n    spec:\n      ...\n      containers:\n      - name: frontend\n        image: packtpubkubernetesonwindows/voting-application:1.3.0\n        ...\n        volumeMounts:\n        - name: customerrors-config-volume\n          mountPath: C:\\inetpub\\wwwroot\\config\\\n        ...\n      volumes:\n      - name: customerrors-config-volume\n        configMap:\n          name: voting-application-customerrors-config\n```", "```\n  customErrors.config: |\n    <customErrors mode=\"Off\" />\n```", "```\nkubectl delete deployment -n dev voting-application-frontend\n```", "```\nkind: StorageClass\napiVersion: storage.k8s.io/v1beta1\nmetadata:\n  name: azure-disk\nprovisioner: kubernetes.io/azure-disk\nparameters:\n  storageaccounttype: Standard_LRS\n  kind: Managed\n```", "```\napiVersion: apps/v1\nkind: StatefulSet\n...\nspec:\n  replicas: 5\n  serviceName: voting-application-frontend  # (1)\n  ...\n  template:\n    ...\n    spec:\n      ...\n      initContainers:  # (2)\n      - name: volume-mount-permissions-fix\n        image: packtpubkubernetesonwindows/voting-application:1.4.0\n        command: [\"powershell.exe\", \"-Command\", \"iisreset.exe /START; icacls.exe c:\\\\data /grant '\\\"IIS AppPool\\\\DefaultAppPool\\\":RW'\"]\n        volumeMounts:\n        - mountPath: C:/data\n          name: voting-log-volume\n      containers:\n      - name: frontend\n        image: packtpubkubernetesonwindows/voting-application:1.4.0\n        ...\n        volumeMounts:  # (3)\n        - mountPath: C:/data\n          name: voting-log-volume\n  volumeClaimTemplates:  # (4)\n  - metadata:\n      name: voting-log-volume\n      labels:\n        app: voting-application\n    spec:\n      accessModes:\n        - ReadWriteOnce\n      resources:\n        requests:\n          storage: 100Mi\n      storageClassName: azure-disk\n```", "```\nkubectl scale statefulset/voting-application-frontend -n dev --replicas=0\n```", "```\nkubectl scale statefulset/voting-application-frontend -n dev --replicas=5\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  namespace: dev\n  name: voting-application-frontend\n  ...\nspec:\n  replicas: 5\n  minReadySeconds: 5\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: 1\n      maxSurge: 1\n  ...\n    spec:\n      ...\n      containers:\n      - name: frontend\n        image: packtpubkubernetesonwindows/voting-application:1.2.0\n        ...\n```", "```\nPS C:\\src> kubectl rollout status -n dev deployment/voting-application-frontend\nWaiting for deployment \"voting-application-frontend\" rollout to finish: 2 out of 5 new replicas have been updated...\nWaiting for deployment \"voting-application-frontend\" rollout to finish: 3 out of 5 new replicas have been updated...\nWaiting for deployment \"voting-application-frontend\" rollout to finish: 4 out of 5 new replicas have been updated...\nWaiting for deployment \"voting-application-frontend\" rollout to finish: 1 old replicas are pending termination...\nWaiting for deployment \"voting-application-frontend\" rollout to finish: 4 of 5 updated replicas are available...\ndeployment \"voting-application-frontend\" successfully rolled out\n```", "```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: voting-application\n  namespace: dev\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: dev\n  name: voting-application-data-reader\nrules:\n- apiGroups: [\"\"]\n  resources: [\"configmaps\"]\n  resourceNames: [\"voting-application-customerrors-config\"]\n  verbs: [\"get\"]\n- apiGroups: [\"\"]\n  resources: [\"secret\"]\n  resourceNames: [\"mssql\"]\n  verbs: [\"get\"]\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  namespace: dev\n  name: voting-application-data-reader\nsubjects:\n- kind: ServiceAccount\n  name: voting-application\nroleRef:\n  kind: Role\n  name: voting-application-data-reader\n  apiGroup: rbac.authorization.k8s.io\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  namespace: dev\n  name: voting-application-frontend\n  ...\nspec:\n  ...\n  template:\n    ...\n    spec:\n      serviceAccountName: voting-application\n      ...\n```"]