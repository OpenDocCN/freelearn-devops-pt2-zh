["```\n choco install kubernetes-helm\n```", "```\nPS C:\\src> helm version\nversion.BuildInfo{Version:\"v3.0.0\", GitCommit:\"e29ce2a54e96cd02ccfce88bee4f58bb6e2a28b6\", GitTreeState:\"clean\", GoVersion:\"go1.13.4\"}\n```", "```\nhelm repo add stable https://kubernetes-charts.storage.googleapis.com\nhelm repo update\n```", "```\nPS C:\\src> helm search hub mssql\nURL                                             CHART VERSION   APP VERSION     DESCRIPTION\nhttps://hub.helm.sh/charts/stable/mssql-linux   0.10.1          14.0.3023.8     SQL Server 2017 Linux Helm Chart\n```", "```\nacceptEula:\n  value: \"y\"\n\nedition:\n  value: Developer\n\nsapassword: \"S3cur3P@ssw0rd\"\n\nservice:\n  type: LoadBalancer\n\npersistence:\n  enabled: true\n  storageClass: azure-disk\n\nnodeSelector:\n  \"kubernetes.io/os\": linux\n```", "```\n---\nkind: Namespace\napiVersion: v1\nmetadata:\n  name: dev-helm\n  labels:\n    name: dev-helm\n---\nkind: StorageClass\napiVersion: storage.k8s.io/v1beta1\nmetadata:\n  name: azure-disk\nprovisioner: kubernetes.io/azure-disk\nparameters:\n  storageaccounttype: Standard_LRS\n  kind: Managed\n```", "```\nhelm install demo-mssql stable/mssql-linux `\n --namespace dev-helm `\n --values .\\values.yaml `\n --debug `\n --dry-run\n```", "```\nhelm install demo-mssql stable/mssql-linux `\n --namespace dev-helm `\n --values .\\values.yaml\n```", "```\nkubectl get all --all-namespaces -l release=demo-mssql\n```", "```\nhelm status -n dev-helm demo-mssql\n```", "```\nhelm uninstall -n dev-helm demo-mssql\n```", "```\nhelm create voting-application\n```", "```\napiVersion: v2\nname: voting-application\ndescription: Voting Application (Windows Containers) Helm chart\ntype: application\nversion: 0.1.0\nappVersion: 1.4.0\ndependencies:\n  - name: mssql-linux\n    version: 0.10.1\n    repository: https://kubernetes-charts.storage.googleapis.com\nsources:\n- https://github.com/hands-on-kubernetes-on-windows/voting-application\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ include \"voting-application.fullname\" . }}\n  labels:\n    {{- include \"voting-application.labels\" . | nindent 4 }}\nspec:\n  ...\n  template:\n    ...\n    spec:\n      ...\n      containers:\n        - name: {{ .Chart.Name }}-frontend\n          ...\n          image: \"{{ .Values.image.repository }}:{{ .Chart.AppVersion }}\"\n          imagePullPolicy: {{ .Values.image.pullPolicy }} \n          env:\n          - name: MSSQL_SA_PASSWORD\n            valueFrom:\n              secretKeyRef:\n                name: {{ .Release.Name }}-mssql-linux-secret\n                key: sapassword\n          - name: CONNECTIONSTRING_VotingApplication\n            value: \"Data Source={{ .Release.Name }}-mssql-linux;Initial Catalog=VotingApplication;MultipleActiveResultSets=true;User Id=sa;Password=$(MSSQL_SA_PASSWORD);\"\n```", "```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: {{ .Release.Name }}-ef6-database-migrate\n  ...\n  annotations:\n    \"helm.sh/hook\": post-install,post-upgrade\n    \"helm.sh/hook-weight\": \"-5\"\n    \"helm.sh/hook-delete-policy\": hook-succeeded\nspec:\n  backoffLimit: 10\n```", "```\n...\nimage:\n  repository: packtpubkubernetesonwindows/voting-application\n  pullPolicy: IfNotPresent\n...\nnodeSelector: \n  \"kubernetes.io/os\": windows\n...\nmssql-linux:\n  acceptEula:\n    value: \"y\"\n  edition:\n    value: Developer\n  sapassword: \"S3cur3P@ssw0rd\"\n  service:\n    type: LoadBalancer\n  persistence:\n    enabled: true\n    storageClass: azure-disk\n  nodeSelector:\n    \"kubernetes.io/os\": linux\n```", "```\nhelm dependency update\n```", "```\nhelm install voting-application . `\n --namespace dev-helm `\n --debug `\n --dry-run\n```", "```\nhelm install voting-application . `\n --namespace dev-helm `\n --debug `\n --timeout 900s\n```", "```\nkubectl get all -n dev-helm\n```", "```\n<InstrumentationKey>4e810bf1-58c4-4af7-a67d-36fcdcf24a2f</InstrumentationKey>\n```", "```\ninstrumentationKey: '@Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.Active.InstrumentationKey'\n```", "```\n<TelemetryProcessors>\n <Add Type=\"Microsoft.ApplicationInsights.SnapshotCollector.SnapshotCollectorTelemetryProcessor, Microsoft.ApplicationInsights.SnapshotCollector\">\n <IsEnabled>true</IsEnabled>\n <IsEnabledInDeveloperMode>false</IsEnabledInDeveloperMode>\n <ThresholdForSnapshotting>1</ThresholdForSnapshotting>\n <MaximumSnapshotsRequired>3</MaximumSnapshotsRequired>\n <MaximumCollectionPlanSize>50</MaximumCollectionPlanSize>\n <ReconnectInterval>00:15:00</ReconnectInterval>\n <ProblemCounterResetInterval>1.00:00:00</ProblemCounterResetInterval>\n <SnapshotsPerTenMinutesLimit>3</SnapshotsPerTenMinutesLimit>\n <SnapshotsPerDayLimit>30</SnapshotsPerDayLimit>\n <SnapshotInLowPriorityThread>true</SnapshotInLowPriorityThread>\n <ProvideAnonymousTelemetry>false</ProvideAnonymousTelemetry>\n <FailedRequestLimit>3</FailedRequestLimit>\n </Add>\n</TelemetryProcessors>\n```", "```\nLog.Logger = new LoggerConfiguration()\n                 .ReadFrom.AppSettings()\n                 .Enrich.FromLogContext()\n                 .WriteTo.EventLog(source: \"VotingApplication\", logName: \"VotingApplication\", manageEventSource: false)\n                 .WriteTo.Trace()\n                 .CreateLogger();\n```", "```\npublic ActionResult TestException()\n{\n    throw new InvalidOperationException(\"This action always throws an exception!\");\n}\n```", "```\nazureApplicationInsightsKey: 4e810bf1-58c4-4af7-a67d-36fcdcf24a2f\nreplicaCount: 5\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ include \"voting-application.fullname\" . }}\n  ...\nspec:\n  ...\n  template:\n    ...\n    spec:\n      ...\n      containers:\n        - name: {{ .Chart.Name }}-frontend\n          ...\n          env:\n          - name: APPINSIGHTS_INSTRUMENTATIONKEY\n            value: {{ .Values.azureApplicationInsightsKey }}\n          ...\n```", "```\nhelm upgrade voting-application . `\n --namespace dev-helm `\n --debug `\n --dry-run\n```", "```\nhelm upgrade voting-application . `\n --namespace dev-helm `\n --debug `\n --timeout 900s\n```", "```\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta6/aio/deploy/recommended.yaml\n```", "```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n name: admin-user\n namespace: kubernetes-dashboard\n```", "```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\n```", "```\nkubectl -n kubernetes-dashboard describe secrets ((kubectl -n kubernetes-dashboard get secrets | Select-String \"admin-user-token\") -Split \"\\s+\")[0]\n```", "```\n.\\05_CreateAKSWithWindowsNodes.ps1 `\n -windowsPassword \"S3cur3P@ssw0rd\" `\n -azureLocation \"westeurope\" `\n -kubernetesVersion \"1.15.4\"\n -aksClusterName \"devspaces-demo\"\n -skipAddingWindowsNodePool $true\n```", "```\naz aks use-dev-spaces `\n --resource-group \"aks-windows-resource-group\" `\n --name \"devspaces-demo\"\n```", "```\ningress:\n enabled: true\n```", "```\npublic static IHostBuilder CreateHostBuilder(string[] args) =>\n        Host.CreateDefaultBuilder(args)\n            .ConfigureWebHostDefaults(webBuilder =>\n            {\n                webBuilder\n                    .UseUrls(\"http://0.0.0.0:80\")\n                    .UseStartup<Startup>();\n            });\n```", "```\n<h1 class=\"display-4\">Welcome - Modified</h1>\n```"]