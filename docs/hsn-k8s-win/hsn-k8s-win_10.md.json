["```\nEnable-WindowsOptionalFeature -Online -FeatureName  Microsoft-Hyper-V -All\n```", "```\nNew-VMSwitch -SwitchName \"Kubernetes NAT Switch\" -SwitchType Internal\n```", "```\nGet-NetAdapter\n```", "```\nNew-NetIPAddress -IPAddress 10.0.0.1 -PrefixLength 8 -InterfaceIndex <ifIndex>\n```", "```\nNew-NetNAT -Name \"Kubernetes NAT Network\" -InternalIPInterfaceAddressPrefix 10.0.0.0/8\n```", "```\nsudo vim /etc/netplan/01-netcfg.yaml\n```", "```\nnetwork:\n  ethernets:\n    eth0:\n      dhcp4: no\n      addresses: [10.0.0.2/8]\n      gateway4: 10.0.0.1\n      nameservers:\n        addresses: [8.8.8.8,8.8.4.4]\n  version: 2\n```", "```\nnetwork:\n  ethernets:\n    eth0:\n      dhcp4: yes\n      dhcp-identifier: mac\n  version: 2\n```", "```\nsudo apt-get update\n```", "```\nsudo apt-get install -y --install-recommends linux-tools-virtual linux-cloud-tools-virtual\n```", "```\nPS C:\\WINDOWS\\system32> Get-WindowsCapability -Online | ? Name -like 'OpenSSH*'\nName : OpenSSH.Client~~~~0.0.1.0\nState : NotPresent\n\nName : OpenSSH.Server~~~~0.0.1.0\nState : NotPresent\n```", "```\nAdd-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0\n```", "```\nPS C:\\WINDOWS\\system32> ssh ubuntu@10.0.0.2\nThe authenticity of host '10.0.0.2 (10.0.0.2)' can't be established.\nECDSA key fingerprint is SHA256:X6iv9E7Xixl5GFvV+WxiP10Gbkvh1j3xPsBEV/4YcFo.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '10.0.0.2' (ECDSA) to the list of known hosts.\nubuntu@10.0.0.2's password:\nWelcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-65-generic x86_64)\n```", "```\nssh-keygen.exe\n```", "```\ncat ~/.ssh/id_rsa.pub | ssh ubuntu@10.0.0.2 \"cat >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys\"\n```", "```\nssh ubuntu@192.168.43.105\n# You should not be asked for password at this point!\n```", "```\nsudo vim /etc/ssh/sshd_config\n```", "```\n#PasswordAuthentication yes\n```", "```\nsudo service sshd restart\n```", "```\nssh ubuntu@10.0.0.2\n```", "```\nsudo apt-get update\nsudo apt-get dist-upgrade -y\n```", "```\nsudo apt-get install apt-transport-https ca-certificates curl software-properties-common ebtables ethtool -y \n```", "```\nsudo swapoff -a\n```", "```\n/swap.img       none    swap    sw      0       0\n```", "```\nswapon -s\n```", "```\nbr_netfilter\n```", "```\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.bridge.bridge-nf-call-arptables = 1\n```", "```\nsudo modprobe br_netfilter\nsudo sysctl --system\n```", "```\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n```", "```\nsudo add-apt-repository \\\n \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n $(lsb_release -cs) \\\n stable\"\n```", "```\nsudo apt-get update\n```", "```\nsudo apt-get install docker-ce=5:18.09.9~3-0~ubuntu-bionic -y\n```", "```\nsudo apt-mark hold docker-ce\n```", "```\n{\n \"exec-opts\": [\"native.cgroupdriver=systemd\"],\n \"log-driver\": \"json-file\",\n \"log-opts\": {\n \"max-size\": \"100m\"\n },\n \"storage-driver\": \"overlay2\"\n}\n```", "```\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n```", "```\nubuntu@kubernetes-master:~$ sudo docker run hello-world\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n1b930d010525: Pull complete Digest: sha256:c3b4ada4687bbaa170745b3e4dd8ac3f194ca95b2d0518b417fb47e5879d9b5f\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\nThis message shows that your installation appears to be working correctly.\n```", "```\ncurl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\n```", "```\ndeb https://apt.kubernetes.io/ kubernetes-xenial main\n```", "```\nsudo apt-get update\nsudo apt-get install kubelet kubeadm kubectl -y\n```", "```\nubuntu@kubernetes-master:~$ kubeadm version\nkubeadm version: &version.Info{Major:\"1\", Minor:\"16\", GitVersion:\"v1.16.1\", GitCommit:\"d647ddbd755faf07169599a625faf302ffc34458\", GitTreeState:\"clean\", BuildDate:\"2019-10-02T16:58:27Z\", GoVersion:\"go1.12.10\", Compiler:\"gc\", Platform:\"linux/amd64\"}\n```", "```\nsudo apt-mark hold kubelet kubeadm kubectl\n```", "```\nsudo kubeadm init --service-cidr \"10.96.0.0/12\" --pod-network-cidr \"10.244.0.0/16\"\n```", "```\nYour Kubernetes control-plane has initialized successfully!\n\nTo start using your cluster, you need to run the following as a regular user:\n\n mkdir -p $HOME/.kube\n sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n sudo chown $(id -u):$(id -g) $HOME/.kube/config\n\nYou should now deploy a pod network to the cluster.\nRun \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at:\n https://kubernetes.io/docs/concepts/cluster-administration/addons/\n\nThen you can join any number of worker nodes by running the following on each as root:\n\nkubeadm join 10.0.0.2:6443 --token c4kkga.50606d1zr7w0s2w8 \\\n --discovery-token-ca-cert-hash sha256:44b2f0f05f79970cc295ab1a7e7ebe299c05fcbbec9d0c08133d4c5ab7fadb0b\n```", "```\nkubeadm token create --print-join-command\n```", "```\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n```", "```\nscp ubuntu@10.0.0.2:.kube/config config\n$env:KUBECONFIG=\"config;$env:USERPROFILE\\.kube\\config\"\nkubectl config view --raw\n```", "```\n$env:KUBECONFIG=\"config;$env:USERPROFILE\\.kube\\config\"\nkubectl config view --raw > $env:USERPROFILE\\.kube\\config_new \nMove-Item -Force $env:USERPROFILE\\.kube\\config_new $env:USERPROFILE\\.kube\\config\n\nkubectl config use-context \"kubernetes-admin@kubernetes\"\n```", "```\nPS C:\\src> kubectl get nodes\nNAME                STATUS     ROLES    AGE   VERSION\nkubernetes-master   NotReady   master   22m   v1.16.1\n```", "```\nkubectl taint nodes --all node-role.kubernetes.io/master-\n```", "```\n# Bash\nwget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n\n# Powershell\nwget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml -OutFile kube-flannel.yml\n```", "```\nnet-conf.json: |\n {\n \"Network\": \"10.244.0.0/16\",\n \"Backend\": {\n \"Type\": \"host-gw\"\n }\n }\n```", "```\nkubectl apply -f kube-flannel.yml\n```", "```\nPS C:\\src> kubectl run --generator=run-pod/v1 busybox-debug -i --tty --image=busybox --rm --restart=Never -- sh\nIf you don't see a command prompt, try pressing enter.\n/ #\n```", "```\nSet-VMProcessor -VMName \"Kubernetes Windows Node 01\" -ExposeVirtualizationExtensions $true\n```", "```\nGet-NetAdapter\n```", "```\nNew-NetIPAddress \u2013IPAddress 10.0.0.3 -DefaultGateway 10.0.0.1 -PrefixLength 8 -InterfaceIndex <ifIndex>\n```", "```\nSet-DNSClientServerAddress \u2013InterfaceIndex <ifIndex> \u2013ServerAddresses 8.8.8.8,8.8.4.4\n```", "```\nGet-WindowsCapability -Online | ? Name -like 'OpenSSH*'\n\nName : OpenSSH.Client~~~~0.0.1.0\nState : NotPresent\n\nName : OpenSSH.Server~~~~0.0.1.0\nState : NotPresent\n```", "```\nAdd-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0\n```", "```\nStart-Service sshd\n```", "```\nSet-Service -Name sshd -StartupType 'Automatic'\n```", "```\nGet-NetFirewallRule -Name *ssh*\n```", "```\nNew-NetFirewallRule -Name sshd -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22\n```", "```\nPS C:\\src> ssh Administrator@10.0.0.3\nThe authenticity of host '10.0.0.3 (10.0.0.3)' can't be established.\nECDSA key fingerprint is SHA256:VYTfj0b1uZmVgHu9BY17q1wpINNEuzb4dsSGtMFQKw4.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added '10.0.0.3' (ECDSA) to the list of known hosts.\nAdministrator@10.0.0.3's password:\nMicrosoft Windows [Version 10.0.17763.737]\n(c) 2018 Microsoft Corporation. All rights reserved.\n\nadministrator@WIN-GJD24M0P8DA C:\\Users\\Administrator>\n```", "```\nNew-ItemProperty -Path \"HKLM:\\SOFTWARE\\OpenSSH\" -Name DefaultShell -Value \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -PropertyType String -Force\n```", "```\nSet-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))\n```", "```\n choco install vim -y\n```", "```\nicacls C:\\ProgramData\\ssh\\administrators_authorized_keys /remove \"NT AUTHORITY\\Authenticated Users\"\nicacls C:\\ProgramData\\ssh\\administrators_authorized_keys /inheritance:r\n```", "```\nRestart-Service -Name sshd -Force\n```", "```\nInstall-Module -Name PSWindowsUpdate\n```", "```\nGet-WUInstall -AcceptAll -Install\n```", "```\nssh Administrator@10.0.0.3\n```", "```\nmkdir .\\sig-windows-tools-kubeadm\ncd .\\sig-windows-tools-kubeadm\n```", "```\nInvoke-WebRequest -Uri https://github.com/kubernetes-sigs/sig-windo\nws-tools/archive/master.zip -OutFile .\\master.zip\ntar -xvf .\\master.zip --strip-components 3 sig-windows-tools-master/kubeadm/v1.15.0/*\nRemove-Item .\\master.zip\n```", "```\n{\n    \"Cri\" : {\n       \"Name\" : \"dockerd\",\n        \"Images\" : {\n            \"Pause\" : \"mcr.microsoft.com/k8s/core/pause:1.2.0\",\n            \"Nanoserver\" : \"mcr.microsoft.com/windows/nanoserver:1809\",\n            \"ServerCore\" : \"mcr.microsoft.com/windows/servercore:ltsc2019\"\n        }\n    },\n    \"Cni\" : {\n        \"Name\" : \"flannel\",\n        \"Source\" : [{ \n            \"Name\" : \"flanneld\",\n            \"Url\" : \"https://github.com/coreos/flannel/releases/download/v0.11.0/flanneld.exe\"\n            }\n        ],\n        \"Plugin\" : {\n            \"Name\": \"bridge\"\n        },\n        \"InterfaceName\" : \"Ethernet\"\n    },\n    \"Kubernetes\" : {\n        \"Source\" : {\n            \"Release\" : \"1.16.1\",\n            \"Url\" : \"https://dl.k8s.io/v1.16.1/kubernetes-node-windows-amd64.tar.gz\"\n        },\n        \"ControlPlane\" : {\n            \"IpAddress\" : \"10.0.0.2\",\n            \"Username\" : \"ubuntu\",\n            \"KubeadmToken\" : \"<token>\",\n            \"KubeadmCAHash\" : \"<discovery-token-ca-cert-hash>\"\n        },\n        \"KubeProxy\" : {\n            \"Gates\" : \"WinDSR=true\"\n        },\n        \"Network\" : {\n            \"ServiceCidr\" : \"10.96.0.0/12\",\n            \"ClusterCidr\" : \"10.244.0.0/16\"\n        }\n    },\n    \"Install\" : {\n        \"Destination\" : \"C:\\\\ProgramData\\\\Kubernetes\"\n    }\n}\n```", "```\ncd .\\sig-windows-tools-kubeadm\n.\\KubeCluster.ps1 -ConfigFile .\\Kubeclusterbridge.json -Install\n```", "```\n Unregister-ScheduledTask -TaskName \"ContainerBootstrap\"\n```", "```\ncd .\\sig-windows-tools-kubeadm\n```", "```\n.\\KubeCluster.ps1 -ConfigFile .\\Kubeclusterbridge.json -Join\n```", "```\nPS C:\\src> kubectl get nodes\nNAME                STATUS   ROLES    AGE   VERSION\nkubernetes-master   Ready    master   26h   v1.16.1\nwin-gjd24m0p8da     Ready    <none>   11m   v1.16.1\n```", "```\nkubectl run `\n --generator=run-pod/v1 powershell-debug `\n -i --tty `\n --image=mcr.microsoft.com/powershell:nanoserver-1809 `\n --restart=Never `\n --overrides='{\\\"apiVersion\\\": \\\"v1\\\", \\\"spec\\\": {\\\"nodeSelector\\\": { \\\"beta.kubernetes.io/os\\\": \\\"windows\\\" }}}'\n```", "```\nkubectl describe pod powershell-debug\n```", "```\nkubectl delete pod powershell-debug\n```", "```\n.\\KubeCluster.ps1 -ConfigFile .\\Kubeclusterbridge.json -Reset\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: windows-example\n  labels:\n    app: sample\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: windows-example\n  template:\n    metadata:\n      name: windows-example\n      labels:\n        app: windows-example\n    spec:\n      nodeSelector:\n        \"beta.kubernetes.io/os\": windows\n      containers:\n      - name: windows-example\n        image: mcr.microsoft.com/dotnet/core/samples:aspnetapp-nanoserver-1809\n        resources:\n          limits:\n            cpu: 1\n            memory: 800M\n          requests:\n            cpu: .1\n            memory: 300M\n        ports:\n          - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: windows-example\nspec:\n  type: NodePort\n  ports:\n  - protocol: TCP\n    port: 80\n    nodePort: 31001\n    targetPort: 80\n  selector:\n    app: windows-example\n```", "```\nkubectl apply -f .\\windows-example.yaml\n```", "```\nPS C:\\src> kubectl get pods --watch \nNAME                               READY STATUS   RESTARTS  AGE\nwindows-example-66cdf8c4bf-4472x   1/1   Running   0        9m17s\nwindows-example-66cdf8c4bf-647x8   1/1   Running   0        9m17s\nwindows-example-66cdf8c4bf-zxjdv   1/1   Running   0        9m17s\n```", "```\nPS C:\\src> kubectl logs windows-example-66cdf8c4bf-4472x\nwarn: Microsoft.AspNetCore.DataProtection.Repositories.FileSystemXmlRepository[60]\n Storing keys in a directory 'C:\\Users\\ContainerUser\\AppData\\Local\\ASP.NET\\DataProtection-Keys' that may not be persisted outside of the container. Protected data will be unavailable when container is destroyed.\ninfo: Microsoft.Hosting.Lifetime[0]\n Now listening on: http://[::]:80\ninfo: Microsoft.Hosting.Lifetime[0]\n Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n Hosting environment: Production\ninfo: Microsoft.Hosting.Lifetime[0]\n Content root path: C:\\app\nwarn: Microsoft.AspNetCore.HttpsPolicy.HttpsRedirectionMiddleware[3]\n Failed to determine the https port for redirect.\n```", "```\nPS C:\\src> kubectl exec -it windows-example-66cdf8c4bf-4472x cmd\nMicrosoft Windows [Version 10.0.17763.802]\n(c) 2018 Microsoft Corporation. All rights reserved.\n\nC:\\app>\n```", "```\nC:\\app>type appsettings.json\n{\n \"Logging\": {\n \"LogLevel\": {\n \"Default\": \"Information\",\n \"Microsoft\": \"Warning\",\n \"Microsoft.Hosting.Lifetime\": \"Information\"\n }\n },\n \"AllowedHosts\": \"*\"\n}\n```"]