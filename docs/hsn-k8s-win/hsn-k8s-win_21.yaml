- en: Assessments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: 'Chapter 1: Creating Containers'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章：创建容器
- en: Object Namespaces, Process Table, Job Objects, and Windows Container Isolation
    Filesystem. Additionally, on top of these low-level functionalities, **Host Compute
    Service** (**HCS**) and **Host Network Service** (**HNS**) abstract the public
    interface for running and managing containers.
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对象命名空间、进程表、作业对象和Windows容器隔离文件系统。此外，在这些低级功能之上，**主机计算服务**（**HCS**）和**主机网络服务**（**HNS**）抽象了运行和管理容器的公共接口。
- en: Windows Server containers require the host OS version to match the container
    base image OS version. Additionally, on Windows, you can use Hyper-V isolation,
    which enables running containers with a non-matching base image OS version.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows Server容器要求主机操作系统版本与容器基础镜像操作系统版本匹配。此外，在Windows上，您可以使用Hyper-V隔离，这使得可以使用与基础镜像操作系统版本不匹配的容器运行。
- en: In Hyper-V isolation, each container is running inside a dedicated, minimal
    Hyper-V virtual machine. Containers do not share the kernel with host OS; there
    are no compatibility limitations between the host OS version and the container
    base OS version. Use Hyper-V isolation if you need to run containers with a non-matching
    base image OS version and in multi-tenant environments with untrusted code execution
    scenarios.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Hyper-V隔离中，每个容器都在一个专用的、最小的Hyper-V虚拟机中运行。容器不与主机操作系统共享内核；主机操作系统版本与容器基础操作系统版本之间没有兼容性限制。如果需要在非匹配的基础镜像操作系统版本和不受信任的代码执行场景中运行容器，则使用Hyper-V隔离。
- en: To enable LCOW support in Docker Desktop (version 18.02 or later), you have
    to enable the experimental features option in Docker Settings | Daemon. Creating
    an LCOW container requires specifying the `--platform linux` parameter for the
    `docker run` command.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在Docker Desktop（版本18.02或更高版本）中启用LCOW支持，必须在Docker设置|守护程序中启用实验性功能选项。创建一个LCOW容器需要为`docker
    run`命令指定`--platform linux`参数。
- en: '`docker logs <containerId>`'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`docker logs <containerId>`'
- en: For Windows containers that have Powershell installed, you can use the following
    command: `docker exec -it <containerId> powershell.exe`.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于已安装Powershell的Windows容器，可以使用以下命令：`docker exec -it <containerId> powershell.exe`。
- en: 'Chapter 2: Managing State in Containers'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章：在容器中管理状态
- en: The container layer is the top writeable layer in the filesystem for each Docker
    container.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器层是每个Docker容器文件系统中的可写层的顶层。
- en: Bind mounts provide a simple functionality of mounting any file or directory
    from the container host to a given container. Volumes provide similar functionality
    but they are fully managed by Docker, so you do not have to worry about physical
    paths in the container host filesystem.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绑定挂载提供了一个简单的功能，可以将容器主机中的任何文件或目录挂载到给定的容器中。卷提供了类似的功能，但它们完全由Docker管理，因此您不必担心容器主机文件系统中的物理路径。
- en: The writeable container layer is coupled with the container host, which means
    it is not possible to easily move the data to a different host. Layer filesystems
    provide worse performance than direct access to the host filesystem (for example,
    using volumes). You cannot share the writeable layer between different containers.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可写容器层与容器主机耦合在一起，这意味着不可能轻松地将数据移动到不同的主机。层文件系统的性能比直接访问主机文件系统（例如使用卷）差。您不能在不同的容器之间共享可写层。
- en: Use the SMB Global Mapping feature on Windows host, which is provided to mount
    SMB shares visible to the containers. Then, you can mount the SMB share in a container
    as a regular directory from the host machine.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows主机上使用SMB全局映射功能，可以将SMB共享挂载到容器中可见。然后，您可以将SMB共享在容器中作为主机机器上的常规目录挂载。
- en: No. To persist your storage data for Hyper-V containers, you have to use Docker
    volumes. If you need to use bind mounts (for example, for SMB Global Mappings),
    you have to use process isolation.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不行。要持久保存Hyper-V容器的存储数据，您必须使用Docker卷。如果您需要使用绑定挂载（例如，用于SMB全局映射），您必须使用进程隔离。
- en: '`docker volume prune`'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`docker volume prune`'
- en: Volume drivers in Docker can be used to manage volumes that are hosted on remote
    machines or in cloud services.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker中的卷驱动程序可用于管理托管在远程计算机或云服务上的卷。
- en: 'Chapter 3: Working with Container Images'
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：使用容器映像
- en: A Docker registry is an organized, hierarchical system for storing Docker images,
    providing scalable distribution of images. Docker Hub is the official, public
    Docker registry hosted and managed by Docker, Inc.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker注册表是一个有组织的、分层的系统，用于存储Docker映像，提供可伸缩的映像分发。Docker Hub是由Docker，Inc.托管和管理的官方公共Docker注册表。
- en: A tag is a versioning label for a single image in a repository.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标签是存储库中单个图像的版本标签。
- en: '`<dockerId>/<repositoryName>:<tag>`'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<dockerId>/<repositoryName>:<tag>`'
- en: '**Azure Container Registry** (**ACR**) is a fully managed private Docker registry
    provided by the Azure cloud. In the case of ACR, you store the images using your
    own Azure storage account and you can make the registry fully private, for your
    own infrastructure needs.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Azure容器注册表**（**ACR**）是由Azure云提供的完全托管的私有Docker注册表。在ACR的情况下，您可以使用自己的Azure存储帐户存储图像，并且可以使注册表完全私有，以满足您自己的基础设施需求。'
- en: '`latest` is the default tag used when you pull or build images (if you do not
    specify an explicit tag). In general, you should not use the `latest` tag apart
    from in development scenarios. In production, always specify an explicit tag for
    your Kubernetes manifests or in the Dockerfile instructions.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`latest`是在拉取或构建图像时使用的默认标签（如果您没有指定显式标签）。一般来说，除了在开发场景中，您不应该使用`latest`标签。在生产环境中，始终为您的Kubernetes清单或Dockerfile指令指定显式标签。'
- en: 'Semver suggests the following scheme of using three numbers, major, minor,
    and patch, separated with dots: `<major>.<minor>.<patch>`, where each number is
    incremented as needed.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Semver建议使用三个数字的以下方案，即主要版本、次要版本和修补版本，用点分隔：`<major>.<minor>.<patch>`，根据需要递增每个数字。
- en: '**Docker Content Trust** (**DCT**) provides a means of verifying digital signatures
    of data being transferred between Docker engine and the Docker registry. This
    verification allows the publishers to sign their images and the consumer (Docker
    engine) to verify the signatures to ensure the integrity and source of the images.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Docker内容信任**（**DCT**）提供了一种验证数据数字签名的方法，该数据在Docker引擎和Docker注册表之间传输。此验证允许发布者对其图像进行签名，并且消费者（Docker引擎）验证签名以确保图像的完整性和来源。'
- en: 'Chapter 4: Kubernetes Concepts and Windows Support'
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章：Kubernetes概念和Windows支持
- en: The control plane (master) consists of a set of components that are responsible
    for global decisions regarding the cluster, such as the scheduling and deployment
    of application instances to worker nodes and managing cluster events. The data
    plane consists of worker nodes that are responsible for running container workloads
    scheduled by the master.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制平面（主控）由一组组件组成，负责关于集群的全局决策，例如将应用实例的调度和部署到工作节点以及管理集群事件。数据平面由负责运行主控安排的容器工作负载的工作节点组成。
- en: Cluster management is performed using a declarative model, which makes Kubernetes
    very powerful—you describe the desired state and Kubernetes does all of the heavy
    lifting to transform the current state of the cluster to the desired state.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集群管理使用声明性模型执行，这使得Kubernetes非常强大 - 您描述所需的状态，Kubernetes会完成所有繁重的工作，将集群的当前状态转换为所需的状态。
- en: A Kubernetes Pod consists of one or more containers that share kernel namespaces,
    IPC, a network stack (so you address them by the same cluster IP and they can
    communicate via localhost), and storage. In other words, Pods can contain multiple
    containers that share some resources.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes Pod由一个或多个共享内核命名空间、IPC、网络堆栈（因此您可以通过相同的集群IP地址对其进行寻址，并且它们可以通过本地主机进行通信）和存储的容器组成。换句话说，Pod可以包含共享某些资源的多个容器。
- en: A Deployment API object is used for the declarative management of ReplicaSet
    rollouts and scaling. This is the key API object for ensuring the smooth rollout
    of a new version of your application.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Deployment API对象用于声明式管理ReplicaSet的部署和扩展。这是确保新版本应用平稳部署的关键API对象。
- en: Windows machines can only join the cluster as worker nodes. There is no possibility
    and no plans for running master components on Windows. The setup of a local Kubernetes
    development environment for hybrid Linux/Windows clusters is complex and currently
    no standard solutions, such as Minikube or Docker Desktop for Windows' support
    such a configuration.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows机器只能作为工作节点加入集群。无法在Windows上运行主组件，也没有在混合Linux/Windows集群的本地Kubernetes开发环境的设置，目前没有标准解决方案，例如Minikube或Docker
    Desktop for Windows支持这样的配置。
- en: Minikube aims at providing a stable environment for local development with Kubernetes.
    It is available on Windows, Linux, and macOS but can provide Linux clusters only.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Minikube旨在为Kubernetes的本地开发提供稳定的环境。它可用于Windows、Linux和macOS，但只能提供Linux集群。
- en: '**AKS** (short for **Azure Kubernetes Service**) is a fully managed Kubernetes
    cluster offering by Azure. AKS Engine is an official, open source tool for provisioning
    self-managed Kubernetes cluster on Azure. Internally, AKS uses AKS Engine but
    they cannot manage clusters created by one another.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**AKS**（**Azure Kubernetes Service**的缩写）是Azure提供的完全托管的Kubernetes集群。AKS Engine是Azure官方的开源工具，用于在Azure上提供自管理的Kubernetes集群。在内部，AKS使用AKS
    Engine，但它们不能管理彼此创建的集群。'
- en: 'Chapter 5: Kubernetes Networking'
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章：Kubernetes网络
- en: Pods running on a node must be able to communicate with all Pods on all nodes
    (including the Pod's node) without NAT and explicit port mapping. All Kubernetes
    components running on a node, for example, kubelet or system daemons/services,
    must be able to communicate with all Pods on that node.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行在节点上的Pod必须能够与所有节点上的所有Pod（包括Pod的节点）进行通信，而无需NAT和显式端口映射。例如，运行在节点上的所有Kubernetes组件，如kubelet或系统守护程序/服务，必须能够与该节点上的所有Pod进行通信。
- en: You can use Flannel with host-gw only if there is Layer 2 (L2) connectivity
    between the nodes in the cluster. In other words, there cannot be any L3 routers
    between the nodes.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在集群节点之间存在二层（L2）连接时，仅使用host-gw来使用Flannel。换句话说，在节点之间不能有任何L3路由器。
- en: A NodePort Service is implemented as a ClusterIP Service with the additional
    capability of being reachable using any cluster node IP address and a specified
    port. To achieve that, kube-proxy exposes the same port on each node from the
    range of 30000–32767 (which is configurable) and sets up forwarding so that any
    connections to this port will be forwarded to ClusterIP.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NodePort服务是作为ClusterIP服务实现的，具有使用任何集群节点IP地址和指定端口可达的额外功能。为实现这一点，kube-proxy在30000-32767范围内（可配置）的每个节点上公开相同的端口，并设置转发，以便将对该端口的任何连接转发到ClusterIP。
- en: Reduced cost (you use only one cloud load balancer to serve the incoming traffic)
    and L7 load balancing capabilities
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 降低成本（您只使用一个云负载均衡器来提供传入流量）和L7负载均衡功能
- en: A container runtime uses CNI plugins to connect containers to the network and
    remove them from the network when needed.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器运行时使用CNI插件将容器连接到网络，并在需要时从网络中移除它们。
- en: An internal vSwitch is not connected to a network adapter on the container host,
    whereas an external vSwitch is connected and provides connectivity with external
    networks.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内部vSwitch未连接到容器主机上的网络适配器，而外部vSwitch连接并提供与外部网络的连接。
- en: Docker network modes (drivers) are a concept coming from Docker that is part
    of the **Container Network Model** (**CNM**). This specification was proposed
    by Docker to solve container networking setup and management challenges in a modular,
    pluginable way. CNI is a CNCF project aiming at providing a simple and clear interface
    between any container runtime and network implementation. They solve almost the
    same problem but in different ways. On Windows, the implementation of Docker network
    modes and CNI plugins is the same—they are lightweight adapters for HNS.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker网络模式（驱动程序）是来自Docker的概念，是**容器网络模型**（**CNM**）的一部分。这个规范是Docker提出的，旨在以模块化、可插拔的方式解决容器网络设置和管理挑战。CNI是一个CNCF项目，旨在为任何容器运行时和网络实现提供一个简单明了的接口。它们以不同的方式解决了几乎相同的问题。在Windows上，Docker网络模式和CNI插件的实现是相同的——它们都是HNS的轻量级适配器。
- en: On Windows, overlay network mode creates a VXLAN overlay network using VFP at
    an external Hyper-V vSwitch. Each overlay network has its own IP subnet, determined
    by a customizable IP prefix.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows上，覆盖网络模式使用外部Hyper-V vSwitch创建一个VXLAN覆盖网络。每个覆盖网络都有自己的IP子网，由可定制的IP前缀确定。
- en: 'Chapter 6: Interacting with Kubernetes Clusters'
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章：与Kubernetes集群交互
- en: kubectl uses the kubeconfig file, which is located in `~\.kube\config`. This
    YAML configuration file contains all of the parameters required for kubectl to
    connect to the Kubernetes API for your cluster
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: kubectl使用位于`~\.kube\config`的kubeconfig文件。这个YAML配置文件包含了kubectl连接到Kubernetes API所需的所有参数。
- en: You can use a `KUBECONFIG` environment variable or the `--kubeconfig` flag for
    individual commands to force kubectl to use a different kubeconfig.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用`KUBECONFIG`环境变量或`--kubeconfig`标志来强制kubectl在个别命令中使用不同的kubeconfig。
- en: Contexts are used for organizing and coordinating access to multiple Kubernetes
    clusters.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上下文用于组织和协调对多个Kubernetes集群的访问。
- en: '`kubectl create` is an imperative command to create new API resources, whereas
    `kubectl apply` is a declarative management command for managing API resources.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kubectl create`是一个命令，用于创建新的API资源，而`kubectl apply`是一个声明性管理命令，用于管理API资源。'
- en: '`kubectl patch` updates a resource by merging the current resource state and
    a patch that contains only the modified properties. A common use case for patching
    is when you need to enforce a node selector for an existing DaemonSet in hybrid
    Linux/Windows clusters.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kubectl patch`通过合并当前资源状态和仅包含修改属性的补丁来更新资源。补丁的常见用例是在混合Linux/Windows集群中需要强制执行现有DaemonSet的节点选择器时。'
- en: '`kubectl logs <podName>`'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kubectl logs <podName>`'
- en: '`kubectl cp <podName>:<sourceRemotePath> <destinationLocalPath>`'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kubectl cp <podName>:<sourceRemotePath> <destinationLocalPath>`'
- en: 'Chapter 7: Deploying a Hybrid On-Premises Kubernetes Cluster'
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章：部署混合本地Kubernetes集群
- en: Use an internal NAT Hyper-V vSwitch if you plan to use the cluster for local
    development only. Any external inbound communication (apart from your Hyper-V
    host machine) will require NAT. Use an external Hyper-V vSwitch if your network
    has DHCP and DNS servers that you (or the network administrator) can manage. This
    will be the case in most production deployments.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您只计划将集群用于本地开发，请使用内部NAT Hyper-V vSwitch。任何外部入站通信（除了您的Hyper-V主机机器）都需要NAT。如果您的网络有DHCP和DNS服务器，您（或网络管理员）可以管理，那么请使用外部Hyper-V
    vSwitch。这在大多数生产部署中都是这样的情况。
- en: In short, changing operating system configuration, such as disabling swap, installing
    a Docker container runtime, installing Kubernetes packages, and performing `kubeadm
    init`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简而言之，更改操作系统配置，比如禁用交换空间，安装Docker容器运行时，安装Kubernetes软件包，执行`kubeadm init`。
- en: The Service subnet is a virtual subnet (non-routable) used by Pods for accessing
    services. Routable address translation from virtual IPs is performed by kube-proxy
    running on nodes. The Pod subnet is a global subnet used by all Pods in the cluster.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务子网是一个虚拟子网（不可路由），用于Pod访问服务。虚拟IP的可路由地址转换由运行在节点上的kube-proxy执行。Pod子网是集群中所有Pod使用的全局子网。
- en: '`kubeadm token create --print-join-command`'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kubeadm token create --print-join-command`'
- en: '`kubectl taint nodes --all node-role.kubernetes.io/master-`'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kubectl taint nodes --all node-role.kubernetes.io/master-`'
- en: 'The Flannel network with a host-gw backend (win-bridge CNI plugin on Windows
    nodes): A host-gw backend is preferable as it is in a stable feature state, whereas
    an overlay backend is still in alpha feature state for Windows nodes.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Flannel网络使用host-gw后端（在Windows节点上使用win-bridge CNI插件）：host-gw后端更可取，因为它处于稳定的功能状态，而overlay后端对于Windows节点仍处于alpha功能状态。
- en: In short, download `sig-windows-tools` scripts, which install the Docker and
    Kubernetes packages; prepare JSON configuration file for the scripts; and execute
    them.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简而言之，下载`sig-windows-tools`脚本，安装Docker和Kubernetes软件包；为脚本准备JSON配置文件；并执行它们。
- en: '`kubectl logs <podName>`'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kubectl logs <podName>`'
- en: 'Chapter 8: Deploying a Hybrid Azure Kubernetes Service Engine Cluster'
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章：部署混合Azure Kubernetes服务引擎集群
- en: AKS is a fully managed Kubernetes cluster offering by Azure. AKS Engine is an
    official, open source tool for provisioning self-managed Kubernetes clusters on
    Azure. Internally, AKS uses AKS Engine, but they cannot manage clusters created
    by one another.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AKS是Azure提供的一个完全托管的Kubernetes集群。AKS Engine是Azure官方的开源工具，用于在Azure上为自管理的Kubernetes集群进行配置。在内部，AKS使用AKS
    Engine，但它们不能管理彼此创建的集群。
- en: AKS Engine generates an **Azure Resource Manager** (**ARM**) template based
    on a supplied configuration file (cluster apimodel). Then, you can use this ARM
    template to deploy a fully functional, self-managed Kubernetes cluster on Azure
    infrastructure.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AKS Engine根据提供的配置文件（集群apimodel）生成**Azure资源管理器**（ARM）模板。然后，您可以使用此ARM模板在Azure基础架构上部署一个完全功能的自管理Kubernetes集群。
- en: No. Even if AKS internally uses AKS Engine, it is not possible to use AKS Engine
    to manage AKS and vice versa.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不可以。即使AKS在内部使用AKS Engine，也不能使用AKS Engine来管理AKS，反之亦然。
- en: The Azure CLI, Azure Cloud Shell, kubectl, and optionally the SSH client for
    Windows if you would like to connect to the nodes using SSH.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure CLI，Azure Cloud Shell，kubectl，以及如果您想要使用SSH连接到节点，则还需要Windows的SSH客户端。
- en: AKS Engine uses the apimodel (or cluster definition) JSON file to generate ARM
    templates, which can be used for deploying Kubernetes clusters directly to Azure.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AKS Engine使用apimodel（或集群定义）JSON文件生成ARM模板，可用于直接部署Kubernetes集群到Azure。
- en: Use SSH and execute the following command: `ssh azureuser@<dnsPrefix>.<azureLocation>.cloudapp.azure.com`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用SSH并执行以下命令：`ssh azureuser@<dnsPrefix>.<azureLocation>.cloudapp.azure.com`。
- en: Assuming that `10.240.0.4` is the private IP of the Windows node, create an
    SSH connection to the master that forwards the RDP port to the Windows node using the `ssh
    -L 5500:10.240.0.4:3389 azureuser@<dnsPrefix>.<azureLocation>.cloudapp.azure.com` command.
    In a new command-line window, start an RDP session using the `mstsc /v:localhost:5500`
    command.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设`10.240.0.4`是Windows节点的私有IP，创建一个SSH连接到主节点，将RDP端口转发到Windows节点，使用`ssh -L 5500:10.240.0.4:3389
    azureuser@<dnsPrefix>.<azureLocation>.cloudapp.azure.com`命令。在一个新的命令行窗口中，使用`mstsc
    /v:localhost:5500`命令启动一个RDP会话。
- en: 'Chapter 9: Deploying Your First Application'
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章：部署您的第一个应用程序
- en: The imperative approach consists of executing imperative kubectl commands, such
    as `kubectl run` or `kubectl expo``se`. In the declarative approach, you always
    modify object configurations (manifest files) and create or update them in the
    cluster using the `kubectl apply` command (alternatively, you can use Kustomization
    files).
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令式方法包括执行命令式的kubectl命令，例如`kubectl run`或`kubectl expose`。在声明性方法中，您始终修改对象配置（清单文件），并使用`kubectl
    apply`命令在集群中创建或更新它们（或者，您可以使用Kustomization文件）。
- en: The imperative `kubectl delete` command is preferred over declarative deletion
    as it gives predictable results.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令式的`kubectl delete`命令优于声明式删除，因为它提供可预测的结果。
- en: '`kubectl diff -f <file/directory>`'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kubectl diff -f <file/directory>`'
- en: The recommended practice is using `nodeSelector` for the predictable scheduling
    of your Pods for both Windows and Linux containers.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推荐的做法是使用`nodeSelector`来可预测地调度您的Pod，无论是Windows还是Linux容器。
- en: You can use `kubectl proxy` to access any Service API object. `kubectl port-forward`
    is a more low-level command that you can use for accessing individual Pods or
    Pods running in a deployment or behind a service.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用`kubectl proxy`访问任何Service API对象。`kubectl port-forward`是一个更低级别的命令，您可以使用它来访问单个Pod或部署中运行的Pod或服务后面的Pod。
- en: Using an Ingress Controller is possible only if you have nodes that are capable
    of running Ingress Controller Pods. For example, for ingress-nginx, the deployment
    of an Ingress Controller is possible for Linux nodes only—you will be able to
    create Ingress objects for services running on Windows nodes but all of the load
    balancing will be performed on Linux nodes.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有当您有能够运行Ingress Controller Pods的节点时，才可以使用Ingress Controller。例如，对于ingress-nginx，只有Linux节点才能部署Ingress
    Controller，您将能够为运行在Windows节点上的服务创建Ingress对象，但所有负载均衡都将在Linux节点上执行。
- en: '`kubectl scale deployment/<deploymentName> --replicas=<targetNumberOfReplicas>`'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`kubectl scale deployment/<deploymentName> --replicas=<targetNumberOfReplicas>`'
- en: 'Chapter 10: Deploying Microsoft SQL Server 2019 and ASP.NET MVC Applications'
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章：部署Microsoft SQL Server 2019和ASP.NET MVC应用程序
- en: 'You can choose from the following: passing arguments to the container commands,
    defining system environment variables for the container, mounting ConfigMaps or
    Secrets as container volumes, and optionally wrapping everything up using PodPresets.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以从以下选项中选择：将参数传递给容器命令，为容器定义系统环境变量，将ConfigMaps或Secrets挂载为容器卷，并可选择使用PodPresets将所有内容包装起来。
- en: '`LogMonitor.exe` acts as a supervisor for your application process and prints
    logs to standard output, which are gathered from different sources based on the
    configuration file. There are plans to further extend this solution to be used
    in the sidecar container pattern.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`LogMonitor.exe`充当应用程序进程的监督者，并将日志打印到标准输出，这些日志是根据配置文件从不同来源收集的。计划进一步扩展此解决方案，以用于侧车容器模式。'
- en: You need to ensure that the migrations can be rolled back and that the database
    schema is fully compatible with the old and new application versions. In other
    words, backward-incompatible changes such as renames have to be handled specially
    to make things backward compatible between the individual steps.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要确保迁移可以回滚，并且数据库架构与旧版本和新版本的应用程序完全兼容。换句话说，不兼容的更改（例如重命名）必须特别处理，以使各个步骤之间保持向后兼容。
- en: This guarantees data persistence when the Pod is terminated and ensures SQL
    Server failover, even if the new Pod is scheduled on a different node.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这可以确保在Pod终止时数据持久性，并确保SQL Server故障转移，即使新的Pod被调度到不同的节点上。
- en: You need to use the `ef6.exe` command to apply the migrations. This can be executed
    using the Kubernetes Job object.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要使用`ef6.exe`命令来应用迁移。这可以使用Kubernetes Job对象执行。
- en: If you use a `requests` value for resources that is lower than the `limits`
    value, you can enter the state of resource overcommitting. This makes it possible
    for Pods to temporarily use more resources than they have requested and enables
    the more effective bin-packing of Pod workloads.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您为资源使用低于“限制”值的“请求”值，您可能会进入资源超额分配状态。这使得Pod可以临时使用比它们请求的资源更多的资源，并实现了更有效的Pod工作负载的装箱。
- en: The VS remote debugger is exposed at the `4020` TCP port from your container.
    To connect to it, without exposing it as a Service object, you need to use kubectl
    port forwarding.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VS远程调试器在容器中的`4020` TCP端口上公开。要连接到它，而不将其公开为服务对象，您需要使用kubectl端口转发。
- en: 'Chapter 11: Configuring Applications to Use Kubernetes Features'
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章：配置应用程序以使用Kubernetes功能
- en: The general principle of namespaces is providing resource quotas and a scope
    for object names. You will organize the namespaces depending on the size of your
    cluster and your team.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名空间的一般原则是提供资源配额和对象名称的范围。您将根据集群的大小和团队的大小来组织命名空间。
- en: The readiness probe is used to determine whether a given container is ready
    to accept traffic. The liveness probe is used to detect whether a container needs
    to be restarted.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就绪探针用于确定给定容器是否准备好接受流量。存活探针用于检测容器是否需要重新启动。
- en: The wrong configuration of this probe can result in cascading failures in your
    services and container restart loops.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个探针的错误配置可能导致您的服务和容器重新启动循环中的级联故障。
- en: '`requests` specifies the guaranteed amount of a given resource provided by
    the system. `limits` specifies the maximum amount of a given resource provided
    by the system.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`requests`指定系统提供的给定资源的保证数量。`limits`指定系统提供的给定资源的最大数量。'
- en: Avoiding thrashing (replica count fluctuating frequently).
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 避免抖动（副本计数频繁波动）。
- en: ConfigMaps and Secrets can hold technically any type of data consisting of key-value
    pairs. The purpose of Secrets is keeping sensitive information for accessing dependencies,
    whereas ConfigMaps should be used for general application configuration purposes.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ConfigMaps和Secrets可以容纳技术上任何类型的由键值对组成的数据。Secrets的目的是保留访问依赖项的敏感信息，而ConfigMaps应该用于一般应用程序配置目的。
- en: '`volumeClaimTemplates` is used for creating a dedicated PersistentVolumeClaim
    for each Pod replica in this StatefulSet.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`volumeClaimTemplates`用于为此StatefulSet中的每个Pod副本创建专用的PersistentVolumeClaim。'
- en: To ensure real zero-downtime updates of your deployments in Kubernetes, you
    need to configure proper probes, especially readiness. In this way, the user will
    be redirected to a replica only if this replica can properly respond to the request.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确保在Kubernetes中对部署进行真正的零停机更新，您需要配置适当的探针，特别是就绪探针。这样，用户只有在该副本能够正确响应请求时才会被重定向到副本。
- en: 'The principle of least privilege: Your applications should have access to their
    own resources only (it is recommended that you run each application using a dedicated
    service account that has access to Secrets or ConfigMaps for the very application),
    and users should have restricted access depending on their role in the project
    (for example, a QA engineer may be fine with just read-only access to the cluster).'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最小权限原则：您的应用程序应仅访问其自己的资源（建议您使用专用服务帐户运行每个应用程序，该帐户可以访问该应用程序的Secrets或ConfigMaps），用户应根据其在项目中的角色拥有受限制的访问权限（例如，QA工程师可能只需要对集群具有只读访问权限）。
- en: 'Chapter 12: Development Workflow with Kubernetes'
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章：使用Kubernetes进行开发工作流程
- en: Helm is used to create redistributable packages for your Kubernetes application.
    You can use it to deploy applications provided by others or use it for your own
    applications as an internal package and dependency manager for microservices in
    your system.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm 用于为您的 Kubernetes 应用程序创建可再分发的软件包。您可以使用它来部署其他人提供的应用程序，也可以将其用作您自己应用程序的内部软件包和微服务系统的依赖管理器。
- en: Helm 2 required a dedicated service deployed on Kubernetes named Tiller, which
    was responsible for actual communication with Kubernetes API. This has caused
    various problems, including security and RBAC issues. As of Helm 3.0.0, Tiller
    is no longer needed and chart management is done by the client.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm 2 需要在 Kubernetes 上部署一个名为 Tiller 的专用服务，它负责与 Kubernetes API 的实际通信。这引起了各种问题，包括安全和
    RBAC 问题。从 Helm 3.0.0 开始，不再需要 Tiller，图表管理由客户端完成。
- en: Use a Kubernetes Job object as a post-installation hook in Helm.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Helm 中使用 Kubernetes Job 对象作为安装后钩子。
- en: Use a new Docker image in the Helm chart manifest or values file and perform `helm
    upgrade`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Helm 图表清单或值文件中使用新的 Docker 镜像，并执行 `helm upgrade`。
- en: The Snapshot Debugger is a feature of Azure Application Insights that monitors
    exception telemetry from your application, including production scenarios. Whenever
    there is an unhandled exception (top-throwing), the Snapshot Debugger collects
    managed memory dumps, which can be analyzed directly in the Azure portal or, for
    more advanced scenarios, using Visual Studio 2019 Enterprise edition.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 快照调试器是 Azure 应用程序洞察的一个功能，它监视您的应用程序的异常遥测，包括生产场景。每当出现未处理的异常（顶部抛出），快照调试器都会收集托管内存转储，可以直接在
    Azure 门户中进行分析，或者对于更高级的场景，可以使用 Visual Studio 2019 企业版。
- en: You should prefer proper declarative management of Kubernetes.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该更喜欢 Kubernetes 的适当声明式管理。
- en: The Azure Dev Spaces service provides a rapid and iterative development experience
    for teams using AKS clusters.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure Dev Spaces 服务为使用 AKS 集群的团队提供了快速迭代的开发体验。
- en: 'Chapter 13: Securing Kubernetes Clusters and Applications'
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 13 章：保护 Kubernetes 集群和应用程序
- en: Kubernetes itself does not provide a means for managing normal external users
    who access the cluster. This should be delegated to an external authentication
    provider that can integrate with Kubernetes, for example, via Authenticating Proxy.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes 本身不提供管理访问集群的普通外部用户的手段。这应该委托给一个可以与 Kubernetes 集成的外部身份验证提供程序，例如，通过认证代理。
- en: To reduce the attack vector, the recommended practice is to never expose Kubernetes
    Dashboard using a LoadBalancer service and always use a kubectl proxy for accessing
    the page.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了减少攻击向量，建议的做法是永远不要使用 LoadBalancer 服务公开 Kubernetes 仪表板，并始终使用 kubectl 代理来访问页面。
- en: This will provide an extra layer of security for your API resources and Secrets,
    which otherwise would be kept in etcd in unencrypted form.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将为您的 API 资源和 Secrets 提供额外的安全层，否则它们将以未加密的形式保存在 etcd 中。
- en: No, this feature is supported only in Linux containers.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不，此功能仅在 Linux 容器中受支持。
- en: NetworkPolicy objects define how groups of Pods can communicate with each other
    and network endpoints in general—think of them as a basic firewall for enforcing
    network segmentation at Layer 3 of the OSI model. To use network policies, you
    need to use one of the network providers that support network policies.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NetworkPolicy 对象定义了 Pod 组如何相互通信以及一般网络端点的通信方式 - 将它们视为 OSI 模型第 3 层的网络分割的基本防火墙。要使用网络策略，您需要使用支持网络策略的网络提供程序之一。
- en: On Windows, Kubernetes Secrets that are mounted to Pods as volumes are written
    in cleartext on node disk storage (not RAM). The reason for this is that Windows
    currently does not support mounting an in-memory filesystem to Pod containers.
    This may pose security risks and entails additional actions to secure the cluster.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows上，作为卷挂载到Pods的Kubernetes Secrets以明文形式写入节点磁盘存储（而不是RAM）。这是因为Windows目前不支持将内存文件系统挂载到Pod容器。这可能带来安全风险，并需要额外的操作来保护集群。
- en: When you have root privileges, you can enumerate all environment variables for
    a process from `/proc/<pid>/environ`, including Secrets injected in that way.
    For Secrets mounted as volumes, it is not possible as you use `tmpfs`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您拥有根权限时，您可以从`/proc/<pid>/environ`枚举出进程的所有环境变量，包括以这种方式注入的Secrets。对于作为卷挂载的Secrets，由于使用了`tmpfs`，这是不可能的。
- en: 'Chapter 14: Monitoring Kubernetes Applications Using Prometheus'
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第14章：使用Prometheus监控Kubernetes应用程序
- en: Providing observability for your components means exposing information about
    their inner state so that you can access the data easily and reason about the
    actual state of your components. In other words, if something is observable, you
    can understand it.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的组件提供可观察性意味着公开有关其内部状态的信息，以便您可以轻松访问数据并推断出组件的实际状态。换句话说，如果某物是可观察的，您就可以理解它。
- en: WMI Exporter can be used to monitor a Windows node host OS and hardware. For
    monitoring the Docker Engine itself, you can use the experimental metrics server
    exposed by the Engine.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WMI Exporter可用于监视Windows节点主机操作系统和硬件。要监视Docker引擎本身，可以使用引擎公开的实验性指标服务器。
- en: In production environments running at a large scale, you can use Prometheus
    Operator to easily deploy and manage multiple Prometheus clusters for different
    needs.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大规模运行的生产环境中，您可以使用Prometheus Operator轻松部署和管理多个不同需求的Prometheus集群。
- en: WMI Exporter and the Docker Engine metrics server are exposing the metrics on
    dedicated ports on each node. We need two extra scraping jobs that handle them
    individually.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WMI Exporter和Docker引擎指标服务器在每个节点上的专用端口上公开指标。我们需要两个额外的抓取作业来单独处理它们。
- en: Use the Telegraf service hosted directly in your container.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Telegraf服务直接托管在您的容器中使用。
- en: Providing additional instrumentation and insights into business logic for your
    applications.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的应用程序提供额外的仪器和对业务逻辑的洞察。
- en: In your Service Object manifest, define an additional annotation, for example, `prometheus.io/secondary-port`.
    After that, you have to create a dedicated scraping job, which will consume the
    new annotation, in a similar way to `prometheus.io/port`.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的服务对象清单中，定义一个额外的注释，例如`prometheus.io/secondary-port`。之后，您必须创建一个专用的抓取作业，它将以类似的方式消耗新的注释，就像`prometheus.io/port`一样。
- en: Heatmaps are the most effective way of visualizing histogram changes over time
    and recently Grafana was extended with native support for heatmaps for Prometheus
    histogram metrics.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 热图是可视化直方图随时间变化的最有效方式，最近Grafana已扩展了对Prometheus直方图指标的热图本地支持。
- en: 'Chapter 15: Disaster Recovery'
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章：灾难恢复
- en: The main difference between DR and BC is that DR focuses on getting the infrastructure
    up and running following an outage, whereas BC covers keeping the business scenarios
    running during a major incident.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DR和BC之间的主要区别在于，DR侧重于在停机后使基础设施恢复运行，而BC涵盖了在重大事件期间保持业务场景运行。
- en: The `etcd` cluster is used by the master and persistent volumes are used by
    Pods.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`etcd`集群由主节点和持久卷使用。'
- en: A snapshot is a backup file provided by the v3 API of etcd.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 快照是由etcd的v3 API提供的备份文件。
- en: Velero can perform `etcd` snapshots, manage them in external storage, and restore
    if needed. Additionally, it can be used for performing backups of persistent volumes
    using Restic integration. Etcd-operator is used for provisioning of multiple `etcd`
    clusters on top of Kubernetes. You can easily manage the `etcd` clusters and perform
    backup-restore operations. Use this approach if you plan to manage multiple Kubernetes
    clusters in your environment.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Velero可以执行`etcd`快照，将其管理在外部存储中，并在需要时进行恢复。此外，它还可以用于使用Restic集成执行持久卷的备份。Etcd-operator用于在Kubernetes之上提供多个`etcd`集群。您可以轻松管理`etcd`集群并执行备份恢复操作。如果您计划在您的环境中管理多个Kubernetes集群，请使用此方法。
- en: 'Access all Kubernetes master nodes and, on all machines, perform the same steps
    in parallel: download the target snapshot file, restore it to a local directory,
    stop Kubernetes master components, stop the `etcd` service, stop the kubelet service,
    swap the `etcd` data directory, start the `etcd` service, and finally start the
    kubelet service.'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问所有Kubernetes主节点，并在所有机器上并行执行相同的步骤：下载目标快照文件，将其恢复到本地目录，停止Kubernetes主组件，停止`etcd`服务，停止kubelet服务，交换`etcd`数据目录，启动`etcd`服务，最后启动kubelet服务。
- en: A Kubernetes CronJob gives you the ability to schedule Kubernetes Jobs at a
    fixed schedule, similar to cron in Linux systems.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes CronJob使您能够按固定计划安排Kubernetes作业，类似于Linux系统中的cron。
- en: Remove the failed member from the cluster, add a new replacement member, and
    if there is more than one failed member, replace the members sequentially.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从集群中删除失败的成员，添加新的替代成员，如果有多个失败的成员，则依次替换成员。
- en: 'Chapter 16: Production Considerations for Running Kubernetes'
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第16章：运行Kubernetes的生产考虑
- en: In immutable infrastructure, you additionally do not perform any modifications
    to the configuration of machines once they are provisioned. If you need a configuration
    change or a hotfix, you need to build a new machine image and provision new machines.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在不可变基础设施中，一旦机器被配置，您还不会执行任何修改。如果您需要进行配置更改或热修复，您需要构建新的机器映像并配置新的机器。
- en: Kubernetes can be seen as a platform for managing your immutable container infrastructure
    for your application workloads—whenever you create a new Docker image and roll
    out a new version of deployment, you are just creating new containers and throwing
    away the old ones. If you use a declarative approach for managing your Kubernetes
    Objects, you end up with neat Infrastructure-as-Code.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes可以被视为管理您的不可变容器基础设施和应用程序工作负载的平台——每当您创建一个新的Docker映像并部署新版本时，您只是创建新的容器并丢弃旧的容器。如果您使用声明性方法来管理您的Kubernetes对象，您最终会得到整洁的基础设施即代码。
- en: GitOps is a way of managing the Kubernetes cluster and your applications, proposed
    by WeaveWorks, where the Git repository is the single source of truth for the
    declarative infrastructure and your application workloads. This approach fully
    complies with the Infrastructure-as-Code paradigm.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitOps是一种由WeaveWorks提出的管理Kubernetes集群和应用程序的方式，其中Git存储库是声明性基础架构和应用程序工作负载的唯一真相来源。这种方法完全符合基础设施即代码范式。
- en: Flux can be used for easily implementing GitOps for your Kubernetes clusters.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Flux可以用于轻松实现GitOps，用于您的Kubernetes集群。
- en: Upgrade the components running on the primary master node, upgrade the components
    running on the additional master nodes, and upgrade the worker nodes.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 升级运行在主主节点上的组件，升级运行在其他主节点上的组件，以及升级工作节点。
- en: Cordon (mark the node as unschedulable) the node and drain the existing Pods,
    then apply the required updates and reboot the machine, and uncordon the node
    to make it schedulable again.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将节点标记为不可调度，并排空现有的Pod，然后应用所需的更新并重新启动机器，然后取消节点标记，使其再次可调度。
