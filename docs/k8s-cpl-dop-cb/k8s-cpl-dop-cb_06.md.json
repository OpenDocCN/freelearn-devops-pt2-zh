["```\n$ git clone https://github.com/k8sdevopscookbook/src.git\n$ cd src/chapter6\n```", "```\n$ kubectl apply -f minio.yaml\n```", "```\n$ kubectl get statefulsets\nNAME  READY AGE\nminio 4/4   2m17s\n```", "```\n$ kubectl get service\nNAME          TYPE         CLUSTER-IP EXTERNAL-IP                     PORT(S)  AGE\nminio         ClusterIP    None       <none>                          9000/TCP 2m49s\nminio-service LoadBalancer 10.3.0.4   abc.us-west-2.elb.amazonaws.com 9000:30345/TCP 2m49s\n```", "```\n$ git clone https://github.com/k8sdevopscookbook/src.git\n$ cd src/chapter6\n```", "```\n- --feature-gates=VolumeSnapshotDataSource=true\n- --feature-gates=KubeletPluginsWatcher=true\n- --feature-gates=CSINodeInfo=true\n- --feature-gates=CSIDriverRegistry=true\n- --feature-gates=BlockVolume=true\n- --feature-gates=CSIBlockVolume=true\n```", "```\n$ cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n name: csi-ebs-pvc\nspec:\n accessModes:\n - ReadWriteOnce\n storageClassName: aws-csi-ebs\n resources:\n requests:\n storage: 4Gi\nEOF\n```", "```\n$ cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n name: app\nspec:\n containers:\n - name: app\n image: centos\n command: [\"/bin/sh\"]\n args: [\"-c\", \"while true; do echo $(date -u) >> /data/out.txt; sleep 5; done\"]\n volumeMounts:\n - name: persistent-storage\n mountPath: /data\n volumes:\n - name: persistent-storage\n persistentVolumeClaim:\n claimName: csi-ebs-pvc\nEOF\n```", "```\n$ cat <<EOF | kubectl apply -f -\napiVersion: snapshot.storage.k8s.io/v1alpha1\nkind: VolumeSnapshotClass\nmetadata:\n name: csi-ebs-vsc\nsnapshotter: ebs.csi.aws.com\nEOF\n```", "```\n$ cat <<EOF | kubectl apply -f -\napiVersion: snapshot.storage.k8s.io/v1alpha1\nkind: VolumeSnapshot\nmetadata:\n name: ebs-volume-snapshot\nspec:\n snapshotClassName: csi-ebs-vsc\n source:\n name: csi-ebs-pvc\n kind: PersistentVolumeClaim\nEOF\n```", "```\n$ kubectl get volumesnapshot\nNAME AGE\nebs-volume-snapshot 18s\n```", "```\n$ kubectl describe volumesnapshot ebs-volume-snapshot\n```", "```\n$ cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n name: csi-ebs-pvc-restored\nspec:\n accessModes:\n - ReadWriteOnce\n storageClassName: aws-csi-ebs\n resources:\n requests:\n storage: 4Gi\n dataSource:\n name: ebs-volume-snapshot\n kind: VolumeSnapshot\n apiGroup: snapshot.storage.k8s.io\nEOF\n```", "```\n$ cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n name: newapp\nspec:\n containers:\n - name: app\n image: centos\n command: [\"/bin/sh\"]\n args: [\"-c\", \"while true; do echo $(date -u) >> /data/out.txt; sleep 5; done\"]\n volumeMounts:\n - name: persistent-storage\n mountPath: /data\n volumes:\n - name: persistent-storage\n persistentVolumeClaim:\n claimName: csi-ebs-pvc-restored\nEOF\n```", "```\n$ kubectl exec -it newapp cat /data/out.txt\n```", "```\n$ kubectl get pvc\nNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE\ncsi-ebs-pvc Bound pvc-574ed379-71e1-4548-b736-7137ab9cfd9d 4Gi RWO aws-csi-ebs 23h\n```", "```\n$ cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n name: clone-of-csi-ebs-pvc\nspec:\n accessModes:\n - ReadWriteOnce\n resources:\n requests:\n storage: 4Gi\n dataSource:\n kind: PersistentVolumeClaim\n name: csi-ebs-pvc\nEOF\n```", "```\n$ git clone https://github.com/k8sdevopscookbook/src.git\n$ cd src/chapter6\n```", "```\n$ wget https://github.com/vmware-tanzu/velero/releases/download/v1.1.0/velero-v1.1.0-linux-amd64.tar.gz\n```", "```\n$ tar -xvzf velero-v1.1.0-linux-amd64.tar.gz\n$ sudo mv velero-v1.1.0-linux-amd64/velero /usr/local/bin/ \n```", "```\n$ velero version\nClient:\n Version: v1.1.0\n Git commit: a357f21aec6b39a8244dd23e469cc4519f1fe608\n<error getting server version: the server could not find the requested resource (post serverstatusrequests.velero.io)>\n```", "```\n$ cat > credentials-velero <<EOF\n[default]\naws_access_key_id = minio\naws_secret_access_key = minio123\nEOF\n```", "```\n$ velero install \\\n --provider aws \\\n --bucket velero \\\n --secret-file ./credentials-velero \\\n --use-restic \\\n --backup-location-config region=minio,s3ForcePathStyle=\"true\",s3Url=http://ac76d4a1ac72c496299b17573ac4cf2d-512600720.us-west-2.elb.amazonaws.com:9000\n```", "```\n$ kubectl get deployments -l component=velero --namespace=velero\nNAME READY UP-TO-DATE AVAILABLE AGE\nvelero 1/1 1 1 62s\n```", "```\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n name: backup-example\n labels:\n app: app2backup\nEOF\n```", "```\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n name: pvc2backup\n namespace: backup-example\n labels:\n app: app2backup\nspec:\n accessModes:\n - ReadWriteOnce\n storageClassName: aws-csi-ebs\n resources:\n requests:\n storage: 4Gi\nEOF\n```", "```\n$ kubectl apply -f myapp.yaml\n```", "```\n$ kubectl exec -it myapp cat /data/out.txt -nbackup-example\nThu Sep 12 23:18:08 UTC 2019\n```", "```\n$ velero backup create myapp-backup --selector app=app2backup\n```", "```\n$ velero backup describe myapp-backup\nName: myapp-backup\nNamespace: velero\nLabels: velero.io/storage-location=default\nAnnotations: <none>\nPhase: Completed\n...\n```", "```\n$ velero backup get\nNAME         STATUS    CREATED                       EXPIRES STORAGE LOCATION SELECTOR\nmyapp-backup Completed 2019-09-13 05:55:08 +0000 UTC 29d     default app=app2backup\n```", "```\n$ kubectl delete pvc pvc2backup -nbackup-example\n$ kubectl delete pod myapp -nbackup-example\n```", "```\n$ velero restore create --from-backup myapp-backup\n```", "```\n$ kubectl get pod -nbackup-example\nNAME  READY STATUS  RESTARTS AGE\nmyapp 1/1   Running 0        10m\n```", "```\n$ kubectl exec -it myapp cat /data/out.txt -nbackup-example\n```", "```\n$ velero schedule create myapp-daily --schedule=\"0 0 1 * * ?\" --selector app=app2backup\n```", "```\n$ velero schedule get\n NAME        STATUS  CREATED                       SCHEDULE    BACKUP TTL LAST BACKUP SELECTOR\n myapp-daily Enabled 2019-09-13 21:38:36 +0000 UTC 0 0 1 * * ? 720h0m0s   2m ago      app=app2backup\n```", "```\n$ velero backup get\nNAME                       STATUS    CREATED                       EXPIRES STORAGE LOCATION SELECTOR\nmyapp-daily-20190913205123 Completed 2019-09-13 20:51:24 +0000 UTC 29d     default app=app2backup\n```", "```\n$ velero backup create fullnamespace --include-namespaces backup-example\n```", "```\n$ velero backup create fullnamespace --selector 'backup notin (false)'\n```", "```\n$ velero backup delete myapp-backup\n```", "```\n$ velero backup delete --all\n```", "```\n$ velero schedule delete myapp-daily\n```", "```\n$ git clone https://github.com/k8sdevopscookbook/src.git\n$ cd src/chapter6\n```", "```\n$ helm repo add kasten https://charts.kasten.io/\n```", "```\n$ curl https://docs.kasten.io/tools/k10_preflight.sh | bash\nChecking for tools\n --> Found kubectl --> Found helm\nChecking access to the Kubernetes context kubernetes-admin@net39dvo58\n --> Able to access the default Kubernetes namespace\nChecking for required Kubernetes version (>= v1.10.0)\n --> Kubernetes version (v1.15.3) meets minimum requirements\nChecking if Kubernetes RBAC is enabled\n --> Kubernetes RBAC is enabled\nChecking if the Aggregated Layer is enabled\n --> The Kubernetes Aggregated Layer is enabled\nChecking if the Kasten Helm repo is present\n --> The Kasten Helm repo was found\nChecking for required Helm Tiller version (>= v2.11.0)\n --> Tiller version (v2.14.3) meets minimum requirements\nAll pre-flight checks succeeded!\n```", "```\n$ helm install kasten/k10 --name=k10 --namespace=kasten-io \\\n --set persistence.storageClass=openebs-cstor-default \\\n --set persistence.size=20Gi \\\n --set secrets.awsAccessKeyId=\"AWS_ACCESS_KEY_ID\" \\\n --set secrets.awsSecretAccessKey=\"AWS_SECRET_ACCESS_KEY\"\n```", "```\n$ helm ls\nNAME REVISION UPDATED                  STATUS   CHART      APP    VERSION NAMESPACE\nk10  1        Tue Oct 29 07:36:19 2019 DEPLOYED k10-1.1.56 1.1.56         kasten-io\n```", "```\n$ export KASTENDASH_POD=$(kubectl get pods --namespace kasten-io -l \"service=gateway\" -o jsonpath=\"{.items[0].metadata.name}\")\n$ kubectl port-forward --namespace kasten-io $KASTENDASH_POD 8080:8000 >> /dev/null &\n```", "```\n$ firefox http://127.0.0.1:8080/k10/#\n```", "```\n$ cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n name: backup-example\n labels:\n app: app2backup\nEOF\n```", "```\n$ cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n name: pvc2backup\n namespace: backup-example\n labels:\n app: app2backup\nspec:\n accessModes:\n - ReadWriteOnce\n storageClassName: openebs-cstor-default\n resources:\n requests:\n storage: 4Gi\nEOF\n```", "```\n$ kubectl apply -f - kasten/myapp.yaml\n```", "```\n$ kubectl exec -it myapp cat /data/out.txt -nbackup-example\nThu Sep 12 23:18:08 UTC 2019\n```", "```\n- name: kanister-sidecar\n  image: kanisterio/kanister-tools:0.20.0\n  command: [\"bash\", \"-c\"]\n  args:\n  - \"tail -f /dev/null\"\n  volumeMounts:\n  - name: data\n    mountPath: /data\n```"]