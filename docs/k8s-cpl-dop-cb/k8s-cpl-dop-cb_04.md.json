["```\n$ helm repo add stackstorm https://helm.stackstorm.com/\n```", "```\n$ helm install stackstorm/stackstorm-ha --name=st2 --namespace=stackstorm\n```", "```\n$ helm ls st2\nNAME REVISION  UPDATED                  STATUS   CHART                APP VERSION NAMESPACE\nst2  1         Wed Oct 30 23:06:34 2019 DEPLOYED stackstorm-ha-0.22.0 3.2dev      stackstorm\n```", "```\n$ cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Service\nmetadata:\n name: st2-service\n namespace: stackstorm\nspec:\n type: LoadBalancer\n ports:\n - port: 80\n targetPort: 80\n protocol: TCP\n selector:\n app: st2web\nEOF\n```", "```\n$ kubectl get svc st2-service -nstackstorm\nNAME        TYPE         CLUSTER-IP    EXTERNAL-IP PORT(S) AGE\nst2-service LoadBalancer 100.68.68.243 a022d6921df2411e9bd5e0a92289be87-2114318237.us-east-1.elb.amazonaws.com 80:31874/TCP 6m38s\n```", "```\n$ export ST2CLIENT=$(kubectl get --namespace stackstorm pod -l app=st2client -o jsonpath=\"{.items[0].metadata.name}\")\n```", "```\n$ kubectl exec -it ${ST2CLIENT} -n stackstorm -- st2 --version\nst2 3.2dev (a643ba7), on Python 2.7.12\n```", "```\n$ kubectl exec -it ${ST2CLIENT} -n stackstorm -- st2 login st2admin -p 'Ch@ngeMe' -w\nLogged in as st2admin\n```", "```\n$ kubectl exec -it ${ST2CLIENT} -n stackstorm -- st2 action list --pack=core\n```", "```\n$ kubectl exec -it ${ST2CLIENT} -n stackstorm -- st2 action list --pack=core\n```", "```\n$ kubectl exec -it ${ST2CLIENT} -n stackstorm -- st2 trigger list\n```", "```\n$ kubectl exec -it ${ST2CLIENT} -n stackstorm -- st2 trigger get core.st2.webhook\n...\n| parameters_schema | {                                   |\n|                   |      \"additionalProperties\": false, |\n|                   |      \"type\": \"object\",              |\n|                   |      \"properties\": {                |\n|                   |          \"url\": {                   |\n|                   |              \"required\": true,      |\n|                   |              \"type\": \"string\"       |\n...\n```", "```\n$ kubectl exec -it ${ST2CLIENT} -n stackstorm -- st2 action list\n```", "```\n$ kubectl exec -it ${ST2CLIENT} -n stackstorm -- st2 action get core.local\n...\n| parameters    | {                                               |\n|               | \"cmd\": {                                        |\n|               |     \"required\": true,                           |\n|               |     \"type\": \"string\",                           |\n|               |     \"description\": \"Arbitrary Linux command to  |\n|               | be executed on the local host.\"                 |\n|               |     },                                          |\n|               |     \"sudo\": {                                   |\n|               |         \"immutable\": true                       |\n|               |     }                                           |\n|               | }                                               |\n| metadata_file | actions/local.yaml                              |\n...\n```", "```\n$ cat > first_rule.yaml <<EOF\n name: \"sample_rule_with_webhook\"\n pack: \"examples\"\n description: \"Sample rule dumping webhook payload to a file.\"\n enabled: true\n trigger:\n type: \"core.st2.webhook\"\n parameters:\n url: \"sample\"\n criteria:\n trigger.body.name:\n pattern: \"st2\"\n type: \"equals\"\n action:\n ref: \"core.local\"\n parameters:\n cmd: \"echo \\\"{{trigger.body}}\\\" >> ~/st2.webhook_sample.out ; sync\"\nEOF\n```", "```\n$ kubectl exec -it ${ST2CLIENT} -n stackstorm -- st2 rule create first_rule.yaml\n```", "```\n$ kubectl exec -it ${ST2CLIENT} -n stackstorm -- st2 rule list\n+------------------+----------+-------------------------+---------+\n| ref | pack | description | enabled |\n+------------------+----------+-------------------------+---------+\n| chatops.notify | chatops | Notification rule to | True |\n| | | send results of action | |\n| | | executions to stream | |\n| | | for chatops | |\n| examples.sample | examples | Sample rule dumping | True |\n| rule_with_webhook| | webhook payload to a | |\n| | | file. | |\n+------------------+----------+-------------------------+---------+\n```", "```\n$ git clone https://github.com/k8sdevopscookbook/src.git\n$ cd src/chapter4\n```", "```\n$ kubectl apply -f https://litmuschaos.github.io/pages/litmus-operator-latest.yaml\n```", "```\n$ kubectl get pods -n litmus\nNAME                               READY STATUS  RESTARTS AGE\nchaos-operator-ce-554d6c8f9f-46kf6 1/1   Running 0        50s\n```", "```\n$ kubectl get clusterroles,clusterrolebinding,crds | grep \"litmus\\|chaos\"\n```", "```\n$ kubectl create -f https://hub.litmuschaos.io/api/chaos?file=charts/generic/experiments.yaml\n```", "```\n$ kubectl get chaosexperiments\nNAME                 AGE\ncontainer-kill       19s\npod-delete           19s\npod-network-latency  19s\npod-network-loss     19s\n```", "```\n$ kubectl apply -f litmus/nginx/nginx.yaml\n```", "```\n$ kubectl get pods |grep nginx\nnginx-deployment-5c689d88bb-24n4m 1/1 Running 0 4m31s\nnginx-deployment-5c689d88bb-qtvsx 1/1 Running 0 4m31s\n```", "```\n$ kubectl annotate deploy nginx-deployment litmuschaos.io/chaos=\"true\"\ndeployment.extensions/nginx-deployment annotated\n```", "```\n$ cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n name: nginx\n labels:\n app: nginx\nEOF\n```", "```\n$ cat <<EOF | kubectl apply -f -\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n name: nginx\nrules:\n- apiGroups: [\"\", \"extensions\", \"apps\", \"batch\", \"litmuschaos.io\"]\n resources: [\"daemonsets\", \"deployments\", \"replicasets\", \"jobs\", \"pods\", \"pods/exec\", \"events\", \"chaosengines\", \"chaosexperiments\", \"chaosresults\"]\n verbs: [\"*\"]\nEOF\n```", "```\n$ cat <<EOF | kubectl apply -f -\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n name: nginx\nsubjects:\n- kind: ServiceAccount\n name: nginx\n namespace: default\nroleRef:\n kind: ClusterRole\n name: nginx\n apiGroup: rbac.authorization.k8s.io\nEOF\n```", "```\n$ kubectl get chaosexperiment pod-delete -o yaml\n$ kubectl get chaosexperiment container-kill -o yaml\n```", "```\ncat <<EOF | kubectl apply -f -\napiVersion: litmuschaos.io/v1alpha1\nkind: ChaosEngine\nmetadata:\n name: engine-nginx\nspec:\n appinfo: \n appns: default\n applabel: \"app=nginx\"\n appkind: deployment\n chaosServiceAccount: nginx\n experiments:\n - name: pod-delete\n spec:\n rank: 1\n - name: container-kill\n spec:\n components:\nEOF\n```", "```\n$ watch kubectl get pods\nEvery 2.0s: kubectl get pods ip-172-20-50-43: Wed Sep 25 05:17:55 2019\nNAME                              READY STATUS       RESTARTS AGE\ncontainer-kill-klfr5-rgddd        0/1   Completed    0        2m39s\nengine-nginx-runner               1/2   Running      0        4m53s\nnginx-deployment-5c689d88bb-qtvsx 1/1   Terminating  1        23m\nnginx-deployment-5c689d88bb-rwtk9 1/1   Running      0        3m12s\npod-delete-wzj6w-x6k5t            0/1   Completed    0        4m8s\n```", "```\n$ kubectl get chaosresults\nNAME                        AGE\nengine-nginx-container-kill 9m\nengine-nginx-pod-delete     10m\n```", "```\n$ kubectl describe chaosresults engine-nginx-container-kill\n...\nSpec:\n Experimentstatus:\n Phase: <nil>\n Verdict: pass\nEvents: <none>\n\n```", "```\n$ kubectl describe chaosresults engine-nginx-pod-delete\n...\nSpec:\n Experimentstatus:\n Phase: <nil>\n Verdict: pass\nEvents: <none>\n```", "```\n$ kubectl get pods |grep Completed\ncontainer-kill-klfr5-rgddd 0/1 Completed 0 35m\npod-delete-wzj6w-x6k5t     0/1 Completed 0 37m\n```", "```\n$ kubectl logs container-kill-klfr5-rgddd\n...\nTASK [Force kill the application pod using pumba] ******************************\n...\nTASK [Verify restartCount] ***************************************************\n...\nPLAY RECAP *******************************************************************\n127.0.0.1 : ok=29 changed=18 unreachable=0 failed=0\n2019-09-25T05:15:56.151497 (delta: 1.254396) elapsed: 35.944704 *******\n```", "```\n$ unzip certificate.zip\n```", "```\n$ mv Me-client.pub_cert.pem gremlin.cert && mv Me-client.priv_key.pem gremlin.key\n```", "```\n$ kubectl create secret generic gremlin-team-cert --from-file=./gremlin.cert --from-file=./gremlin.key\n```", "```\n$ helm repo add gremlin https://helm.gremlin.com\n```", "```\n$ helm repo update\n```", "```\n$ helm install --name gremlin --set gremlin.teamID=abc1234-a12b-1234-1234-abcdefgh gremlin/gremlin\n```", "```\n$ kubectl get daemonsets\nNAME    DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE\ngremlin 3       3       3     3          3         <none>        11m\n```", "```\n$ kubectl apply -f ./src/chapter4/gremlin/nginx.yaml\n```", "```\n$ kubectl get pods |grep nginx\nnginx-deployment-5c689d88bb-24n4m 1/1 Running 0 4m31s\nnginx-deployment-5c689d88bb-rwtk9 1/1 Running 0 4m31s\n```", "```\n$ kubectl get pod nginx-deployment-5c689d88bb-rwtk9 -o jsonpath=\"{.spec.nodeName}\"\nip-172-20-50-43.ec2.internal\n```", "```\n$ watch kubectl get pods\n```", "```\n$ kubectl get pod -owide |grep ip-172-20-50-43.ec2.internal\nNAME                READY STATUS  RESTARTS AGE IP          NODE NOMINATED NODE\nengine-nginx-runner 1/2   Running 1        24h 100.96.0.65 ip-172-20-50-43.ec2.internal <none>\ngremlin-rpp22       1/1   Running 1        88m 100.96.0.60 ip-172-20-50-43.ec2.internal <none>\nnginx-deployment-5c689d88bb-rwtk9 1/1 Running 1 24h 100.96.0.63 ip-172-20-50-43.ec2.internal <none>\n```", "```\n$ helm ls |grep gremlin\ngremlin 1 Thu Sep 26 04:37:05 2019 DEPLOYED gremlin-0.1.3 2.11.8\n```", "```\n$ helm delete gremlin --purge\n```", "```\n$ git clone https://github.com/k8sdevopscookbook/src.git\n$ cd src/chapter4\n```", "```\n$ helm repo update\n```", "```\n$ helm install stable/sonarqube --name sonar --namespace sonarqube\n```", "```\n$ kubectl get pods -n sonarqube\nNAME                              READY STATUS  RESTARTS AGE\nsonar-postgresql-68b88ddc77-l46wc 1/1   Running 0        16m\nsonar-sonarqube-995b9cc79-9vzjn   1/1   Running 1        16m\n```", "```\n$ export SONAR_SVC=$(kubectl get svc --namespace sonarqube sonar-sonarqube -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')\n$ echo http://$SONAR_SVC:9000\n```", "```\n$ git clone https://github.com/javajon/code-analysis.git\n$ cd code-analysis/microservice/\n```", "```\n$ sudo apt install openjdk-8-jre-headless default-jdk\n```", "```\n$ java -version openjdk version \"1.8.0_222\"\nOpenJDK Runtime Environment (build 1.8.0_222-8u222-b10-1~deb9u1-b10)\nOpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode)\n```", "```\n$ export SONAR_SVC=$(kubectl get svc --namespace sonarqube sonar-sonarqube -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')\n```", "```\n$ ./gradlew -Dsonar.host.url=http://$SONAR_SVC:9000 sonarqube\n....\nBUILD SUCCESSFUL in 13s\n6 actionable tasks: 1 executed, 5 up-to-date\n```", "```\n$ helm ls |grep sonarqube\nsonar 1 Thu Sep 26 22:01:24 2019 DEPLOYED sonarqube-2.3.0 7.9 sonarqube\n```", "```\n$ helm delete sonar --purge\n```"]