["```\n$ sudo apt-get update && sudo apt-get install awscli\n```", "```\n$ aws configure\n```", "```\n$ curl --silent --location \"https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz\" | tar xz -C /tmp\n$ sudo mv /tmp/eksctl /usr/local/bin\n```", "```\n$ eksctl version\n```", "```\n$ curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '\"' -f 4)/kops-linux-amd64\n$ chmod +x kops-linux-amd64 && sudo mv kops-linux-amd64 /usr/local/bin/kops\n```", "```\n$ kops version\n```", "```\n$ curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl\n$ chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl\n```", "```\n$ kubectl version --short\n```", "```\n$ aws route53 create-hosted-zone --name k8s.containerized.me \\\n--caller-reference k8s-devops-cookbook \\\n--hosted-zone-config Comment=\"Hosted Zone for my K8s Cluster\" \n```", "```\n$ aws s3api create-bucket --bucket s3.k8s.containerized.me \\\n--region us-east-1\n```", "```\n$ aws s3 ls\n2019-07-21 22:02:58 s3.k8s.containerized.me\n```", "```\n$ aws s3api put-bucket-versioning --bucket s3.k8s.containerized.me \\\n--versioning-configuration Status=Enabled\n```", "```\n$ export KOPS_CLUSTER_NAME=useast1.k8s.containerized.me\n$ export KOPS_STATE_STORE=s3://s3.k8s.containerized.me\n```", "```\n$ ssh-keygen -t rsa\n```", "```\n$ kops create cluster --node-count=6 --node-size=t3.large \\\n --zones=us-east-1a,us-east-1b,us-east-1c \\\n --master-size=t3.large \\\n --master-zones=us-east-1a,us-east-1b,us-east-1c\n```", "```\n$ kops update cluster --name ${KOPS_CLUSTER_NAME} --yes\n```", "```\n$ kops validate cluster\n```", "```\n$ kubectl cluster-info\n```", "```\n$ eksctl create cluster\n...\n[\u221a] EKS cluster \"great-outfit-123\" in \"us-west-2\" region is ready\n```", "```\n$ kubectl cluster-info && kubectl get nodes\nKubernetes master is running at https://gr7.us-west-2.eks.amazonaws.com\nCoreDNS is running at https://gr7.us-west-2.eks.amazonaws.com/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\nNAME                                  STATUS ROLES  AGE   VERSION\nip-1-2-3-4.us-west-2.compute.internal Ready  <none> 5m42s v1.13.8-eks-cd3eb0\nip-1-2-3-4.us-west-2.compute.internal Ready  <none> 5m40s v1.13.8-eks-cd3eb0\n```", "```\n$ sudo apt-get install aws-shell && aws-shell\n```", "```\n$ export KOPS_CLUSTER_NAME=devopscookbook.k8s.local\n$ export KOPS_STATE_STORE=s3://devops-cookbook-state-store\n```", "```\n$ aws s3api create-bucket --bucket s3.k8s.containerized.me \\\n--region eu-west-1 --create-bucket-configuration \\\nLocationConstraint=eu-west-1\n```", "```\n$ kops edit ig nodes \n$ kops edit ig master-us-east-1a\n```", "```\n$ kops delete cluster --name ${KOPS_CLUSTER_NAME} --yes\n```", "```\n$ aws eks --region us-east-1 update-kubeconfig \\\n--name K8s-DevOps-Cookbook  \n```", "```\n$ kubectl get nodes\n```", "```\n$ kubectl delete ns kubernetes-dashboard\n# Use the latest version link from https://github.com/kubernetes/dashboard/releases\n$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta5/aio/deploy/recommended.yaml\n```", "```\n$ kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard\n```", "```\n$ kubectl get svc kubernetes-dashboard -n kubernetes-dashboard\nNAME                 TYPE          CLUSTER-IP    EXTERNAL-IP PORT(S) AGE\nkubernetes-dashboard LoadBalancer 100.66.234.228 myaddress.us-east-1.elb.amazonaws.com 443:30221/TCP 5m46s\n```", "```\n$ kubectl get secrets -A | grep dashboard-token\nkubernetes-dashboard kubernetes-dashboard-token-bc2w5 kubernetes.io/service-account-token 3 17m\n```", "```\n$ kubectl describe secrets kubernetes-dashboard-token-bc2w5 -nkubernetes-dashboard\n```", "```\n$ curl https://sdk.cloud.google.com | bash\n```", "```\n$ gcloud init\n```", "```\n$ gcloud services enable compute.googleapis.com\nOperation \"operations/acf.07e3e23a-77a0-4fb3-8d30-ef20adb2986a\" finished successfully.\n```", "```\n$ gcloud config set compute/zone us-central1-a\n```", "```\n$ gcloud compute instances create \"devops-cookbook\" \\\n--zone \"us-central1-a\" --machine-type \"f1-micro\"\n```", "```\n$ gcloud compute instances delete \"devops-cookbook\"\n```", "```\n$ gcloud container clusters create k8s-devops-cookbook-1 \\\n--cluster-version latest --machine-type n1-standard-2 \\\n--image-type UBUNTU --disk-type pd-standard --disk-size 100 \\\n--no-enable-basic-auth --metadata disable-legacy-endpoints=true \\\n--scopes compute-rw,storage-ro,service-management,service-control,logging-write,monitoring \\\n--num-nodes \"3\" --enable-stackdriver-kubernetes \\ --no-enable-ip-alias --enable-autoscaling --min-nodes 1 \\\n--max-nodes 5 --enable-network-policy \\\n--addons HorizontalPodAutoscaling,HttpLoadBalancing \\\n--enable-autoupgrade --enable-autorepair --maintenance-window \"10:00\"\n```", "```\n$ gcloud container clusters get-credentials k8s-devops-cookbook-1\n```", "```\n$ kubectl get nodes\n```", "```\n$ gcloud compute networks create k8s-devops-cookbook \\\n--subnet-mode custom\n```", "```\n$ gcloud compute networks subnets create kubernetes \\\n--network k8s-devops-cookbook --range 10.240.0.0/16\n```", "```\n$ gcloud compute firewall-rules create k8s-devops-cookbook-allow-int \\\n--allow tcp,udp,icmp --network k8s-devops-cookbook \\\n--source-ranges 10.240.0.0/16,10.200.0.0/16\n```", "```\n$ gcloud compute firewall-rules create k8s-devops-cookbook-allow-ext \\\n--allow tcp:22,tcp:6443,icmp --network k8s-devops-cookbook \\\n--source-ranges 0.0.0.0/0\n```", "```\n$ gcloud compute firewall-rules list\n NAME                          NETWORK             DIRECTION PRIORITY ALLOW  DENY    DISABLED\n ...\n k8s-devops-cookbook-allow-ext k8s-devops-cookbook INGRESS   1000     tcp:22,tcp:6443,icmp      False\n k8s-devops-cookbook-allow-int k8s-devops-cookbook INGRESS   1000     tcp,udp,icmp              False\n```", "```\n$ gcloud container clusters delete k8s-devops-cookbook-1\n```", "```\n$ sudo apt-get update && sudo apt-get install -y libssl-dev \\\nlibffi-dev python-dev build-essential\n```", "```\n$ curl -L https://aka.ms/InstallAzureCli | bash\n```", "```\n$ az --version\n```", "```\n$ az aks install-cli\n```", "```\n$ az login\n```", "```\n$ az group create --name k8sdevopscookbook --location eastus\n```", "```\n$ az ad sp create-for-rbac --skip-assignment\n{\n \"appId\": \"12345678-1234-1234-1234-123456789012\",\n \"displayName\": \"azure-cli-2019-05-11-20-43-47\",\n \"name\": \"http://azure-cli-2019-05-11-20-43-47\",\n \"password\": \"12345678-1234-1234-1234-123456789012\",\n \"tenant\": \"12345678-1234-1234-1234-123456789012\"\n```", "```\n$ az aks create  --resource-group k8sdevopscookbook \\  --name AKSCluster \\ --kubernetes-version 1.15.4 \\\n --node-vm-size Standard_DS2_v2 \\ --node-count 3 \\ --service-principal <appId> \\ --client-secret <password> \\ --generate-ssh-keys\n```", "```\n$ az aks get-credentials --resource-group k8sdevopscookbook \\\n--name AKSCluster\n```", "```\n$ kubectl get nodes\n```", "```\n$ az aks delete --resource-group k8sdevopscookbook --name AKSCluster\n```", "```\n$ az aks browse --resource-group k8sdevopscookbook --name AKSCluster\n```", "```\n$ kubectl create clusterrolebinding kubernetes-dashboard \\\n--clusterrole=cluster-admin \\\n--serviceaccount=kube-system:kubernetes-dashboard\n```", "```\n$ curl -O https://aliyuncli.alicdn.com/aliyun-cli-linux-3.0.15-amd64.tgz\n```", "```\n$ tar \u2013zxvf aliyun-cli*.tgz && sudo mv aliyun /usr/local/bin/.\n```", "```\n$ aliyun --version\n```", "```\n$ aliyun configure\nConfiguring profile '' in '' authenticate mode...\nAccess Key Id []: <Your AccessKey ID>\nAccess Key Secret []: <Your AccessKey Secret>\nDefault Region Id []: us-west-1\nDefault Output Format [json]: json (Only support json))\nDefault Language [zh|en] en: en\nSaving profile[] ...Done.\n```", "```\n$ aliyun auto-completion\n```", "```\n$ kubectl get nodes\n```", "```\n$ aliyun cs POST /clusters --header \"Content-Type=application/json\" \\\n--body \"$(cat cscreate.json)\"\n```", "```\n$ sudo apt-get -y install apt-transport-https ca-certificates curl \\\nsoftware-properties-common\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n$ sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n$ sudo apt-get -y install docker-ce && docker --version\n```", "```\n$ sudo usermod -a -G docker $USER\n```", "```\ndocker run -d --restart=unless-stopped \\\n-p 80:80 -p 443:443 rancher/rancher:latest\n```", "```\n$ docker run -d --restart=unless-stopped \\\n -p 80:80 -p 443:443 \\\n -v /<CERTDIRECTORY>/<FULLCHAIN.pem>:/etc/rancher/ssl/cert.pem \\\n -v /<CERTDIRECTORY>/<PRIVATEKEY.pem>:/etc/rancher/ssl/key.pem \\\n rancher/rancher:latest --no-cacerts\n```", "```\n$ docker run -d --restart=unless-stopped \\\n -p 80:80 -p 443:443 \\\n -v /opt/rancher:/var/lib/rancher \\\n -v /var/log/rancher/auditlog:/var/log/auditlog \\\n rancher/rancher:latest \n```", "```\n$ ros config set rancher.services.user-volumes.volumes \\[/home:/home,/opt:/opt,/var/lib/kubelet:/var/lib/kubelet,/etc/kubernetes:/etc/kubernetes,/var/openebs]\n$ system-docker rm all-volumes\n$ reboot\n```", "```\n$ docker run -d --restart=unless-stopped \\\n -p 8080:80 -p 8443:443 rancher/rancher:latest\n```", "```\n$ tar -xzf openshift-install-linux-*.tar.gz\n```", "```\n$ ./openshift-install create cluster\n```", "```\nINFO Install complete!\nINFO To access the cluster as the system:admin user when using 'oc', run 'export KUBECONFIG=/home/ubuntu/auth/kubeconfig'\nINFO Access the OpenShift web-console here: https://console-openshift-console.apps.os.k8s.containerized.me\nINFO Login to the console with user: kubeadmin, password: ABCDE-ABCDE-ABCDE-ABCDE\n```", "```\n$ tar -xzf openshift-client-linux-*.tar.gz && sudo mv oc /usr/local/bin\n```", "```\n$ export KUBECONFIG=~/auth/kubeconfig\n```", "```\n$ oc login -u kubeadmin -p ABCDE-ABCDE-ABCDE-ABCDE \\\nhttps://api.openshift.k8s.containerized.me:6443 \\\n--insecure-skip-tls-verify=true\n```", "```\n$ ./openshift-install create install-config && cat install-config.yaml\n```", "```\napiVersion: v1\nbaseDomain: k8s.containerized.me\ncompute:\n- hyperthreading: Enabled\n name: worker\n platform: {}\n replicas: 3\ncontrolPlane:\n hyperthreading: Enabled\n name: master\n platform: {}\n replicas: 3\n...\n```", "```\n$ ./openshift-install destroy cluster\n```", "```\n$ git clone https://github.com/k8sdevopscookbook/src.git\n```", "```\n$ sudo apt-get install software-properties-common\n$ sudo apt-add-repository --yes --update ppa:ansible/ansible\n```", "```\n$ sudo apt-get update && *sudo apt-get install ansible -y*\n```", "```\n$ ansible --version\n```", "```\n$ cd src/chapter1/ansible/ && vim hosts.ini\n```", "```\n[master]\n192.168.1.10\n[node]\n192.168.1.[11:13]\n[kube-cluster:children]\nmaster\nnode\n```", "```\nkube_version: v1.14.0\ntoken: b0f7b8.8d1767876297d85c\ninit_opts: \"\"\nkubeadm_opts: \"\"\nservice_cidr: \"10.96.0.0/12\"\npod_network_cidr: \"10.244.0.0/16\"\ncalico_etcd_service: \"10.96.232.136\"\nnetwork: calico\nnetwork_interface: \"\"\nenable_dashboard: yes\ninsecure_registries: []\nsystemd_dir: /lib/systemd/system\nsystem_env_dir: /etc/sysconfig\nnetwork_dir: /etc/kubernetes/network\nkubeadmin_config: /etc/kubernetes/admin.conf\nkube_addon_dir: /etc/kubernetes/addon\n```", "```\n$ ansible-playbook site.yaml\n```", "```\n$ scp root@master:/etc/kubernetes/admin.conf ~/.kube/config\n```", "```\n$ kubectl cluster-info dump --all-namespaces \\\n --output-directory=$PWD/cluster-state\n```", "```\n$ kubectl cluster-info\nKubernetes master is running at https://172.23.1.110:6443\nHeapster is running at https://172.23.1.110:6443/api/v1/namespaces/kube-system/services/heapster/proxy\nKubeDNS is running at https://172.23.1.110:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n```", "```\n$ kubectl top node us-west-2.compute.internal\nNAME CPU(cores) CPU% MEMORY(bytes) MEMORY%\nus-west-2.compute.internal 42m 2% 1690Mi 43%\n```", "```\n$ kubectl cordon us-west-2.compute.internal\n```", "```\n$ kubectl drain us-west-2.compute.internal\n```", "```\n$ kubectl uncordon us-west-2.compute.internal\n```", "```\n$ tree ./cluster-state\n./cluster-state\n\u251c\u2500\u2500 default\n\u2502 \u251c\u2500\u2500 daemonsets.json\n\u2502 \u251c\u2500\u2500 deployments.json\n\u2502 \u251c\u2500\u2500 events.json\n\u2502 \u251c\u2500\u2500 pods.json\n\u2502....\n```", "```\n$ kubectl get nodes -owide\nNAME STATUS ROLES AGE VERSION INTERNAL-IP EXTERNAL-IP OS-IMAGE KERNEL-VERSION CONTAINER-RUNTIME\nip-192-168-41-120.us-west-2.compute.internal Ready <none> 84m v1.13.8-eks-cd3eb0 192.168.41.120 34.210.108.135 Amazon Linux 2 4.14.133-113.112.amzn2.x86_64 docker://18.6.1\nip-192-168-6-128.us-west-2.compute.internal Ready <none> 84m v1.13.8-eks-cd3eb0 192.168.6.128 18.236.119.52 Amazon Linux 2 4.14.133-113.112.amzn2.x86_64 docker://18.6.1\n```", "```\n$ kubectl get pod nginx-deployment-5c689d88bb-qtvsx -oyaml\napiVersion: v1\nkind: Pod\nmetadata:\n annotations:\n kubernetes.io/limit-ranger: 'LimitRanger plugin set: cpu request for container\n nginx'\n creationTimestamp: 2019-09-25T04:54:20Z\n generateName: nginx-deployment-5c689d88bb-\n labels:\n app: nginx\n pod-template-hash: 5c689d88bb\n name: nginx-deployment-5c689d88bb-qtvsx\n namespace: default\n...\n```"]