["```\n$ jx ns\n? Change namespace: [Use arrows to move, space to select, type to filter]\n default\n> jx\n jx-production\n jx-staging\n kube-public\n kube-system\n```", "```\n$ jx console\nJenkins Console: http://jenkins.jx.your_ip.nip.io/blue\n```", "```\n$ git clone https://github.com/your_github_username/python-flask-docker.git\n```", "```\n$ cd python-flask-docker\n$ jx import\n```", "```\n$ jx get activity -f python-flask-docker -w\nSTEP STARTED AGO DURATION STATUS\nmuratkars/python-flask-docker/master #1 1m3s Running\n Checkout Source 22s 5s Succeeded\n CI Build and push snapshot 17s NotExecuted\n Build Release 17s Pending\n...\n Promoted 2m5s 2m0s Succeeded Application is at: http://python-flask-docker.jx-staging.35.188.140.152.nip.io\n Clean up 1s 0s Succeeded\n```", "```\n$ jx get applications\nAPPLICATION STAGING PODS URL\npython-flask-docker 0.0.1 1/1 http://python-flask-docker.jx-staging.35.188.140.152.nip.io\n```", "```\n$ kubectl get pods -n jx-staging\nNAME READY STATUS RESTARTS AGE\njx-python-flask-docker-8564f5b4cb-ff97f 1/1 Running 0 21m\n$ kubectl get pods -n jx-production\nNo resources found.\n```", "```\n$ jx promote python-flask-docker --version 0.0.1 --env production\n```", "```\n$ jx get activity -f python-flask-docker -w\n```", "```\n$ kubectl get pods -n jx-production\nNAME                                    READY STATUS  RESTARTS AGE\njx-python-flask-docker-8564f5b4cb-fhcpm 1/1   Running 0        104m\n```", "```\n$ jx get applications\nAPPLICATION         STAGING PODS URL                                                         PRODUCTION PODS URL\npython-flask-docker 0.0.1   1/1  http://python-flask-docker.jx-staging.35.188.140.152.nip.io 0.0.1      1/1  http://python-flask-docker.jx-production.35.188.140.152.nip.io\n```", "```\n$ jx create quickstart\n```", "```\n? Git user name? \n? Which organisation do you want to use?\n```", "```\nEnter the new repository name: chapter2-jx-tutorial\n```", "```\nWould you like to initialise git now? (Y/n) y\n```", "```\n$ jx get pipelines\n```", "```\nStarting build... Building [devopscookbook/python-flask-docker]...\nSending build context to Docker daemon    127kB Step 1/8 : FR\nOM python:3.6 3.6: Pulling from library/python \n4ae16bd47783: Pulling fs layer \nbbab4ec87ac4: Pulling fs layer \n...\n```", "```\n$ helm search python-flask-docker\nNAME CHART VERSION APP VERSION DESCRIPTION\njenkins-x-chartmuseum/python-flask-docker 0.0.1 0.0.1 A Helm chart for Kubernetes\n```", "```\n$ kubectl cluster-info | grep 'Kubernetes master' | awk '/http/ {print $NF}'\n```", "```\n$ kubectl get secrets | grep default-token\ndefault-token-75958 kubernetes.io/service-account-token 3 4d12h\n```", "```\n$ kubectl get secret <secret name> -o jsonpath=\"{['data']['ca\\.crt']}\" | base64 --decode\n-----BEGIN CERTIFICATE-----\nMID...h5x\n-----END CERTIFICATE-----\n```", "```\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n name: gitlab-admin\n namespace: kube-system\nEOF\n```", "```\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n name: gitlab-admin\nroleRef:\n apiGroup: rbac.authorization.k8s.io\n kind: ClusterRole\n name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n name: gitlab-admin\n namespace: kube-system\nEOF\n```", "```\n$ kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep gitlab-admin | awk '{print $1}')\n\nName: gitlab-admin-token-xkvss\n...\nData\n====\nca.crt: 1119 bytes\nnamespace: 11 bytes\ntoken: \n<your_token_here>\n```", "```\n$ kubectl get pods -n gitlab-managed-apps\nNAME                                                   READY STATUS  RESTARTS AGE\ncertmanager-cert-manager-574b6d6cdd-s87kn              1/1   Running 0        3m39s\ningress-nginx-ingress-controller-7d44688bf-8x7ld       1/1   Running 0        4m39s\ningress-nginx-ingress-default-backend-66645696bf-sz545 1/1   Running 0        4m39s\nprometheus-kube-state-metrics-744949b679-2rwnh         1/1   Running 0        2m8s\nprometheus-prometheus-server-646888949c-j4wn7          2/2   Running 0        2m8s\nrunner-gitlab-runner-84fc959dcf-4wxfc                  1/1   Running 0        56s\ntiller-deploy-5d76d4796c-fdtxz                         1/1   Running 0        7m13s\n```", "```\n$ git clone https://github.com/k8sdevopscookbook/circleci-demo-aws-eks.git\n```", "```\nAWS_DEFAULT_REGION = us-east-2\nAWS_ACCESS_KEY_ID = [Enter your Access key ID here]\nAWS_SECRET_ACCESS_KEY = [Enter your Secret Access Key here]\nAWS_ECR_URL = [Enter your ECR URL here**]** \n```", "```\nHello World! (Version info: 63d25fd14ef8dfb1c718cf81a815b36d80138d19, build date: 20190820224253)\n```", "```\nname: My Application\non:\n pull_request:\n branches:\n - master\njobs:\n build:\n runs-on: ubuntu-16.04\n steps:\n - uses: actions/checkout@v1\n - name: Set up Python 3.7\n uses: actions/setup-python@v1\n with:\n python-version: 3.7\n```", "```\n - name: Install dependencies\n run: |\n python -m pip install --upgrade pip\n pip install -r requirements.txt \n```", "```\n - name: Lint with flake8\n run: |\n pip install flake8\n # stop the build if there are Python syntax errors or undefined names\n flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics\n # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide\n flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics\n```", "```\n- name: Test with pytest\n run: |\n pip install pytest\n pytest\n```", "```\nname: Docker Image CI\non: [push]\njobs:\n build: \n runs-on: ubuntu-latest \n steps:\n - uses: actions/checkout@v1\n - name: Build the Docker image\n run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)\n```", "```\nname: Build and Push to DockerHub\non: [push]\njobs:\n build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@master\n    - name: Publish to Registry\n      uses: elgohr/Publish-Docker-Github-Action@master\n      with:\n        name: MyDockerRepo/repository\n        username: ${{ secrets.DOCKER_USERNAME }}\n        password: ${{ secrets.DOCKER_PASSWORD }} \n```", "```\n[![Actions Status](https://github.com/muratkars/python-flask-docker/workflows/.github/workflows/dockerpush.yml/badge.svg)\n```", "```\n$ git clone <your_new_repo>\n```", "```\n$ wget https://github.com/k8sdevopscookbook/python-flask-docker/archive/master.zip && unzip master.zip\n```", "```\n$ cp -r python-flask-docker-master/. k8sdevopscookbook/.\n$ cd k8sdevopscookbook\n```", "```\n$ git add -A\n```", "```\n$ git commit -m \"Add example application files\"\n```", "```\n$ git push\n```", "```\nversion: 0.2\nphases:\n install:\n runtime-versions:\n docker: 18\n pre_build:\n commands:\n - echo Logging in to Amazon ECR...\n - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)\n build:\n commands:\n - echo Build started on `date`\n - echo Building the Docker image...\n - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .\n...\n```", "```\n{\n  \"Version\": \"2012-10-17\"\n  \"Statement\": [ *### BEGIN ADDING STATEMENT HERE ###* {       \"Action\": [\n         \"ecr:BatchCheckLayerAvailability\",\n         \"ecr:CompleteLayerUpload\",\n         \"ecr:GetAuthorizationToken\",\n         \"ecr:InitiateLayerUpload\",\n         \"ecr:PutImage\",\n         \"ecr:UploadLayerPart\"       ],\n       \"Resource\": \"*\",\n       \"Effect\": \"Allow\"\n     }, *### END ADDING STATEMENT HERE ###* ...   ],\n }\n```", "```\n$ git clone https://github.com/k8sdevopscookbook/src.git\n$ cd /src/chapter3\n```", "```\n$ curl https://sdk.cloud.google.com | bash\n```", "```\n$ gcloud init\n```", "```\n$ gcloud services enable compute.googleapis.com cloudapis.googleapis.com sourcerepo.googleapis.com\nOperation \"operations/acf.d1f2c714-9258-4784-a8a9-6648ab4c59fe\" finished successfully.\n```", "```\n$ curl -LO \\\nhttps://storage.googleapis.com/spinnaker-artifacts/spin/$(curl -s \\\nhttps://storage.googleapis.com/spinnaker-artifacts/spin/latest)/linux/amd64/spin\n$ chmod +x spin\n$ sudo mv spin /usr/local/bin/spin\n```", "```\n$ gcloud iam service-accounts create cicd-account \\\n--display-name \"My CICD Service Account\"\n```", "```\n$ gcloud projects \\\n add-iam-policy-binding \\\n devopscookbook --role \\\n roles/storage.admin --member \\\n serviceAccount:cicd-account@devopscookbook.iam.gserviceaccount.com\n```", "```\n$ gcloud iam service-accounts keys \\\n create cicd-key.json \\\n --iam-account cicd-account@devopscookbook.iam.gserviceaccount.com\n```", "```\n$ gcloud pubsub topics create projects/devopscookbook/topics/gcrgcloud pubsub topics create projects/devopscookbook/topics/gcr\nCreated topic [projects/devopscookbook/topics/gcrgcloud].\nCreated topic [projects/devopscookbook/topics/pubsub].\nCreated topic [projects/devopscookbook/topics/topics].\nCreated topic [projects/devopscookbook/topics/create].\nCreated topic [projects/devopscookbook/topics/gcr].\n```", "```\n$ gcloud pubsub subscriptions create gcr-triggers --topic projects/devopscookbook/topics/gcr\nCreated subscription [projects/devopscookbook/subscriptions/gcr-triggers].\n```", "```\n$ gcloud pubsub subscriptions add-iam-policy-binding \\\n gcr-triggers --role roles/pubsub.subscriber \\\n --member serviceAccount:cicd-account@devopscookbook.iam.gserviceaccount.com\n```", "```\n$ helm version --short\nClient: v2.14.3+g0e7f3b6\nServer: v2.14.3+g0e7f3b6\n```", "```\n$ kubectl create clusterrolebinding \\\n --clusterrole=cluster-admin \\\n --serviceaccount=default:default \\\n ci-admin\n```", "```\n$ gsutil mb -c regional -l us-central1 gs://devopscookbook-ci-config\n```", "```\n$ export CICDKEY_JSON=$(cat cicd-key.json)\n```", "```\ngcs:\n enabled: true\n bucket: devopscookbook-ci-config\n project: devopscookbok\n jsonKey: '$CICDKEY_JSON'\n...\n```", "```\n$ helm install -n cd stable/spinnaker -f \\\n spinnaker-config.yaml --timeout 600 --wait\n```", "```\n$ export DECK_POD=$(kubectl get pods --namespace default -l \"cluster=spin-deck\" -o jsonpath=\"{.items[0].metadata.name}\")\n$ kubectl port-forward --namespace default $DECK_POD 8080:9000 >> /dev/null &\n$ export GATE_POD=$(kubectl get pods --namespace default -l \"cluster=spin-gate\" -o jsonpath=\"{.items[0].metadata.name}\")\n$ kubectl port-forward --namespace default $GATE_POD 8084\n```", "```\n$ wget https://github.com/k8sdevopscookbook/src/raw/master/chapter3/gcp/sample-app-v2.tgz && tar xzfv sample-app-v2.tgz  \n```", "```\n$ cd sample-app\n```", "```\n$ git init && git add . && git commit -m \"Initial commit\"\n```", "```\n$ gcloud source repos create sample-app\n```", "```\n$ git config credential.helper gcloud.sh\n```", "```\n$ git remote add origin https://source.developers.google.com/p/devopscookbook/r/sample-app\n$ git push origin master\n```", "```\nName: devopscookbook-trigger-1\nTrigger type: Tag\nTag (regex): v.*\nBuild configuration: Cloud Build configuration file (yaml or json)\n```", "```\n$ gsutil mb -l us-central1 gs://devopscookbook-kubernetes-manifests\n```", "```\n$ gsutil versioning set on gs://devopscookbook-kubernetes-manifests\n```", "```\n$ cd sample-app\n```", "```\n$ sed -i s/PROJECT/devopscookbook/g k8s/deployments/*\n```", "```\n$ git commit -a -m \"Change placeholder project ID to devopscookbook\"\n```", "```\n$ git tag v1.0.0 && git push --tags\n```", "```\n$ spin application save \\\n--application-name sample \\\n--owner-email \\\nyouremail@domain.com \\\n--cloud-providers kubernetes \\\n--gate-endpoint \\\nhttp://localhost:8080/gate\n```", "```\n$ sed s/PROJECT/devopscookbook/g spinnaker/pipeline-deploy.json > pipeline.json\n$ spin pipeline save --gate-endpoint http://localhost:8080/gate -f pipeline.json\n```"]