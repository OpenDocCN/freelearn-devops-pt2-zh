- en: Disaster Recovery and Backup
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 灾难恢复和备份
- en: In this chapter, we will focus on the backup and disaster recovery scenarios
    that keep applications in production highly available and allow them to quickly
    recover services during cloud provider or basic Kubernetes node failures. After
    following the recipes in this chapter, you will have gained the skills to operate
    the tools that are used for **disaster recovery** (**DR**) and be able to live-migrate
    applications across clusters and clouds.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于备份和灾难恢复方案，以保持生产中的应用程序高度可用，并允许它们在云提供商或基本Kubernetes节点故障期间快速恢复服务。在本章中遵循配方后，您将掌握用于**灾难恢复**（**DR**）的工具，并能够在集群和云之间实时迁移应用程序。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将涵盖以下配方：
- en: Configuring and managing S3 object storage using MinIO
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MinIO配置和管理S3对象存储
- en: Managing Kubernetes Volume Snapshots and restore
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理Kubernetes卷快照和恢复
- en: Application backup and recovery using Velero
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Velero进行应用程序备份和恢复
- en: Application backup and recovery using Kasten
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Kasten进行应用程序备份和恢复
- en: Cross-cloud application migration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨云应用程序迁移
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The recipes in this chapter assume that you have a functional Kubernetes cluster
    deployed by following one of the recommended methods described in [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml),* Building
    Production-Ready Kubernetes Clusters*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的配方假定您已通过[第1章](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml)中描述的推荐方法之一部署了功能性Kubernetes集群，*构建生产就绪的Kubernetes集群*。
- en: The Kubernetes Operations tool `kubectl` will be used for the rest of the recipes
    in this chapter since it's the main command-line interface for running commands
    against Kubernetes clusters. If you are using a Red Hat OpenShift cluster, you
    can replace `kubectl` with `oc`. All the commands are expected to function in
    a similar fashion.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes操作工具`kubectl`将在本章的其余配方中使用，因为它是针对Kubernetes集群运行命令的主要命令行界面。如果您正在使用Red
    Hat OpenShift集群，可以用`oc`替换`kubectl`。所有命令都预计以类似的方式运行。
- en: Configuring and managing S3 object storage using MinIO
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MinIO配置和管理S3对象存储
- en: In this section, we will create an S3 object storage using MinIO to store artifacts
    or configuration files created by your applications in Kubernetes. You will learn
    how to create deployment manifest files, deploy an S3 service, and provide an
    external IP address for other applications or users to consume the service.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用MinIO创建S3对象存储，以存储Kubernetes中您的应用程序创建的工件或配置文件。您将学习如何创建部署清单文件，部署S3服务，并为其他应用程序或用户提供外部IP地址以使用该服务。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation to use manifest
    files under the `chapter6` directory, as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将`k8sdevopscookbook/src`存储库克隆到您的工作站，以便在`chapter6`目录下使用清单文件，如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Make sure you have a Kubernetes cluster ready and `kubectl` configured so that
    you can manage the cluster resources.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已准备好一个Kubernetes集群，并配置了`kubectl`，以便您可以管理集群资源。
- en: How to do it…
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本节进一步分为以下子节，以使此过程更容易：
- en: Creating a deployment YAML manifest
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建部署YAML清单
- en: Creating a MinIO S3 service
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建MinIO S3服务
- en: Accessing the MinIO web user interface
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问MinIO Web用户界面
- en: Creating a deployment YAML manifest
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建部署YAML清单
- en: 'All Kubernetes resources are created in a declarative way by using YAML manifest
    files. Let''s perform the following steps to create an example file we will use
    later to deploy an application in Kubernetes:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Kubernetes资源都是通过使用YAML清单文件以声明方式创建的。让我们执行以下步骤来创建一个示例文件，稍后我们将在Kubernetes中部署应用程序时使用它：
- en: For this recipe, we will use MinIO to create a couple of resources that we can
    use to understand the file format and later help us deploy the fully functional
    application. Open the MinIO download website by going to [https://min.io/download#/kubernetes](https://min.io/download#/kubernetes).
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将使用MinIO创建一些资源，以便我们可以了解文件格式，并在以后帮助我们部署完全功能的应用程序。通过访问[https://min.io/download#/kubernetes](https://min.io/download#/kubernetes)打开MinIO下载网站。
- en: 'On the MinIO website from the list of available download options, click on
    the Kubernetes button and select the Kubernetes CLI tab. This page will help us
    generate the YAML content required for the MinIO application based on our preferences:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在MinIO网站上，从可用下载选项列表中，单击Kubernetes按钮，然后选择Kubernetes CLI选项卡。此页面将帮助我们根据我们的偏好生成MinIO应用程序所需的YAML内容：
- en: '![](assets/f6c098f2-e477-4d54-9dcb-c06d82636bbe.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f6c098f2-e477-4d54-9dcb-c06d82636bbe.png)'
- en: 'Enter your access key and secret key pair. In our example, we used `minio`/`minio123`.
    This will be used in place of a username and password when you access your MinIO
    service. Select Distributed as the deployment model and enter `4` for the number
    of nodes. This option will create a StatefulSet with four replicas. Enter `10`
    GB as the size. In our example, we''ll use the values shown on the following configuration
    screen:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的访问密钥和秘密密钥对。在我们的示例中，我们使用了`minio`/`minio123`。当您访问MinIO服务时，这将代替用户名和密码。选择分布式作为部署模型，并输入`4`作为节点数。此选项将创建一个具有四个副本的StatefulSet。输入`10`GB作为大小。在我们的示例中，我们将使用以下配置屏幕上显示的值：
- en: '![](assets/ac4ca547-45a4-49e1-8abb-850c0d5f480c.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ac4ca547-45a4-49e1-8abb-850c0d5f480c.png)'
- en: Click on the Generate button and examine the file's content. You will notice
    three different resources stored in the YAML manifest, including service, StatefulSet,
    and second service, which will create a cloud load balancer to expose the first
    service ports to the external access.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“生成”按钮并检查文件内容。您将注意到存储在YAML清单中的三种不同资源，包括服务、StatefulSet和第二个服务，它将创建一个云负载均衡器来将第一个服务端口暴露给外部访问。
- en: Copy the content and save it as `minio.yaml` on your workstation.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制内容，并将其保存为`minio.yaml`在您的工作站上。
- en: Creating a MinIO S3 service
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建MinIO S3服务
- en: 'Let''s perform the following steps to create the necessary resources to get
    a functional S3 service using MinIO:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来创建必要的资源，以使用MinIO获得功能齐全的S3服务：
- en: 'Deploy MinIO using the YAML manifest you created in the *Creating a deployment
    YAML manifest* recipe:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您在*创建部署YAML清单*配方中创建的YAML清单部署MinIO：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As an alternative method, you can use the sample YAML file saved under the `/src/chapter6/minio`
    directory in the example repository using the `$ kubectl apply -f minio/minio.yaml`
    command.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 作为替代方法，您可以使用示例存储库中`/src/chapter6/minio`目录下保存的示例YAML文件，使用`$ kubectl apply -f
    minio/minio.yaml`命令。
- en: 'Verify StatefulSet. You should see 4 out of 4 replicas deployed, similar to
    the following output. Note that if you deployed as standalone, you will not have
    StatefulSets:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证StatefulSet。您应该看到4个4个副本部署，类似于以下输出。请注意，如果您以独立方式部署，您将没有StatefulSets：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, you have a MinIO application that's been deployed. In the next recipe,
    we will learn how to discover its external address to access the service.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经部署了一个MinIO应用程序。在下一个配方中，我们将学习如何发现其外部地址以访问该服务。
- en: Accessing the MinIO web user interface
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问MinIO Web用户界面
- en: 'As part of the deployment process, we have MinIO create a cloud load balancer
    to expose the service to external access. In this recipe, we will learn how to
    access the MinIO interface to upload and download files to the S3 backend. To
    do so, we will perform the following steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 作为部署过程的一部分，我们让MinIO创建一个云负载均衡器来将服务暴露给外部访问。在这个配方中，我们将学习如何访问MinIO界面，以上传和下载文件到S3后端。为此，我们将执行以下步骤：
- en: 'Get the `minio-service` LoadBalancer''s external IP using the following command.
    You will see the exposed service address under the `EXTERNAL-IP` column, similar
    to the following output:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令获取`minio-service` LoadBalancer的外部IP。您将在`EXTERNAL-IP`列下看到公开的服务地址，类似于以下输出：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the output service is exposed via port `9000`. To access the
    service, we also need to add port `9000` to the end of the address (`http://[externalIP]:9000`)
    and open the public address of the MinIO service in our browser.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如您所看到的，输出服务是通过端口`9000`公开的。要访问该服务，我们还需要将端口`9000`添加到地址的末尾（`http://[externalIP]:9000`），并在浏览器中打开MinIO服务的公共地址。
- en: 'You need to have permissions to access the Dashboard. Use the default username
    of `minio` and the default password of `minio123` we created earlier to log in
    to the Minio deployment. After you''ve logged in, you will be able to access the
    MinIO Browser, as shown in the following screenshot:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要有权限访问仪表板。使用我们之前创建的默认用户名`minio`和默认密码`minio123`登录到Minio部署。登录后，您将能够访问MinIO浏览器，如下面的屏幕截图所示：
- en: '![](assets/b5a51dc2-c1e4-4258-9fce-11333ec2342f.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b5a51dc2-c1e4-4258-9fce-11333ec2342f.png)'
- en: MinIO is compatible with the Amazon S3 cloud storage service and is best suited
    for storing unstructured data such as photos, log files, and backups. Now that
    you have access to the MinIO user interface, you can create bucks, upload your
    files, and access them through S3 APIs, similar to how you would access a standard
    Amazon S3 service to store your backups. You can learn more about MinIO by going
    to the *MinIO Documentation* link in the *See also* section.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: MinIO与亚马逊S3云存储服务兼容，最适合存储照片、日志文件和备份等非结构化数据。现在您可以访问MinIO用户界面，创建buckets，上传文件，并通过S3
    API访问它们，类似于访问标准的亚马逊S3服务来存储您的备份。您可以通过转到*另请参阅*部分中的*MinIO文档*链接来了解更多关于MinIO的信息。
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe showed you how to provision a completely Amazon S3 API-compatible
    service using MinIO deployed on Kubernetes. This service will be used later for
    disaster recovery and backing up applications running on Kubernetes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方向您展示了如何在Kubernetes上部署MinIO来提供完全兼容Amazon S3 API的服务。此服务将在以后用于灾难恢复和备份在Kubernetes上运行的应用程序。
- en: In the *Creating a MinIO S3 service* recipe, in *Step 1*, when we deploy MinIO,
    it creates a LoadBalancer service at port `9000`. Since we set the number of nodes
    to `4`, a StatefulSet will be created with four replicas. Each will use the information
    set under the `volumeClaimTemplates` section to create a PVC. If `storageClassName`
    is not defined specifically, then the default storage class will be used. As a
    result, you will see four instance of **PersistentVolumesClaim** (**PVC**) created
    on the cluster to provide a highly available MinIO service.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在*创建MinIO S3服务*配方中，在*步骤1*中，当我们部署MinIO时，它会在端口`9000`创建一个LoadBalancer服务。由于我们将节点数设置为`4`，将创建一个具有四个副本的StatefulSet。每个副本将使用`volumeClaimTemplates`部分设置的信息来创建PVC。如果未明确定义`storageClassName`，则将使用默认存储类。结果，您将在集群上看到创建了四个**PersistentVolumesClaim**（PVC）实例，以提供高可用的MinIO服务。
- en: See also
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The MinIO documentation,at: [https://docs.min.io/docs/minio-quickstart-guide.html](https://docs.min.io/docs/minio-quickstart-guide.html)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MinIO文档网址：[https://docs.min.io/docs/minio-quickstart-guide.html](https://docs.min.io/docs/minio-quickstart-guide.html)
- en: MinIO Operator for Kubernetes at: [https://github.com/minio/minio-operator](https://github.com/minio/minio-operator)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes的MinIO Operator网址：[https://github.com/minio/minio-operator](https://github.com/minio/minio-operator)
- en: The MinIO Erasure Code QuickStart Guide at: [https://docs.min.io/docs/minio-erasure-code-quickstart-guide](https://docs.min.io/docs/minio-erasure-code-quickstart-guide)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MinIO Erasure Code QuickStart Guide网址：[https://docs.min.io/docs/minio-erasure-code-quickstart-guide](https://docs.min.io/docs/minio-erasure-code-quickstart-guide)
- en: Using MinIO Client, at: [https://docs.min.io/docs/minio-client-quickstart-guide](https://docs.min.io/docs/minio-client-quickstart-guide)
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MinIO客户端，网址：[https://docs.min.io/docs/minio-client-quickstart-guide](https://docs.min.io/docs/minio-client-quickstart-guide)
- en: Managing Kubernetes Volume Snapshots and restore
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理Kubernetes卷快照和恢复
- en: In this section, we will create Volume Snapshots from our persistent volumes
    in Kubernetes. By following this recipe, you will learn how to enable the Volume
    Snapshot functionality, create snapshot storage classes, and restore from existing
    Volume Snapshots.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在Kubernetes中从我们的持久卷创建卷快照。通过按照这个步骤，您将学习如何启用卷快照功能，创建快照存储类，并从现有的卷快照中恢复。
- en: Getting ready
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have a Kubernetes cluster ready and `kubectl` configured to manage
    the cluster resources.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您有一个准备好的Kubernetes集群，并配置`kubectl`来管理集群资源。
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation to use the
    manifest files under the `chapter6` directory, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将`k8sdevopscookbook/src`存储库克隆到您的工作站，以便使用`chapter6`目录下的清单文件，如下所示：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Make sure the **Container Storage Interface** (**CSI**) driver from your preferred
    storage vendor is installed on your Kubernetes cluster and has implemented the
    snapshot functionality. We covered the installation of the AWS EBS, GCP PD, Azure
    Disk, Rook, and OpenEBS CSI drivers in [Chapter 5](22439381-89a7-4cee-8aa1-77c63cb8a014.xhtml),
    *Preparing for Stateful Workloads*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您首选存储供应商的**容器存储接口**（**CSI**）驱动程序已安装在您的Kubernetes集群上，并且已实现了快照功能。我们在[第5章](22439381-89a7-4cee-8aa1-77c63cb8a014.xhtml)中介绍了AWS
    EBS、GCP PD、Azure Disk、Rook和OpenEBS CSI驱动程序的安装，*为有状态的工作负载做准备*。
- en: The instructions in this section work similarly with other vendors that support
    snapshots via CSI. You can find these additional drivers on the Kubernetes CSI
    documentation site at: [https://kubernetes-csi.github.io/docs/drivers.html](https://kubernetes-csi.github.io/docs/drivers.html).[ ](https://kubernetes-csi.github.io/docs/drivers.html)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的说明与其他支持通过CSI进行快照的供应商类似。您可以在Kubernetes CSI文档网站上找到这些额外的驱动程序：[https://kubernetes-csi.github.io/docs/drivers.html](https://kubernetes-csi.github.io/docs/drivers.html)。
- en: How to do it…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本节进一步分为以下子节，以使这个过程更容易：
- en: Enabling feature gates
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用功能门
- en: Creating a volume snapshot via CSI
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过CSI创建卷快照
- en: Restoring a volume from a snapshot via CSI
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过CSI从快照还原卷
- en: Cloning a volume via CSI
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过CSI克隆卷
- en: Enabling feature gates
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用功能门
- en: 'Some of the features that will be discussed here may be at different stages
    (alpha, beta, or GA) at the moment. If you run into an issue, perform the following
    step:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里将讨论的一些功能目前可能处于不同的阶段（alpha、beta或GA）。如果遇到问题，请执行以下步骤：
- en: 'Set the following `feature-gates` flags to `true` for both `kube-apiserver`
    and `kubelet`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`kube-apiserver`和`kubelet`设置以下`feature-gates`标志为`true`：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can find the latest statuses for features and their states by going to the
    *Kubernetes Feature Gates* link in the *See also* section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过转到*参见*部分中的*Kubernetes功能门*链接，找到功能及其状态的最新状态。
- en: Creating a volume snapshot via CSI
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过CSI创建卷快照
- en: 'A volume snapshot is a copy of the state taken from a PVC in the Kubernetes
    cluster. It is a useful resource for bringing up a stateful application using
    existing data. Let''s perform the following steps to create a volume snapshot
    using CSI:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 卷快照是从Kubernetes集群中的PVC中获取的状态的副本。它是一个有用的资源，可以使用现有数据启动有状态的应用程序。让我们按照以下步骤使用CSI创建卷快照：
- en: 'Create a PVC or select an existing one. In our recipe, we''ll use the AWS EBS
    CSI driver and the `aws-csi-ebs` storage class we created in [Chapter 5](22439381-89a7-4cee-8aa1-77c63cb8a014.xhtml),
    *Preparin**g for Stateful Workloads*, in the *Installing an EBS CSI driver to
    manage EBS volumes* recipe:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建PVC或选择现有的PVC。在我们的食谱中，我们将使用AWS EBS CSI驱动程序和我们在[第5章](22439381-89a7-4cee-8aa1-77c63cb8a014.xhtml)中创建的`aws-csi-ebs`存储类，*为有状态的工作负载做准备*，在*安装EBS
    CSI驱动程序来管理EBS卷*食谱中：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a pod that will write to the `/data/out.txt` file inside the **PersistentVolume**
    (**PV**):'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个pod，它将写入**PersistentVolume**（**PV**）内的`/data/out.txt`文件：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a `VolumeSnapshotClass`. Make sure that the snapshot provider is set
    to your CSI driver name. In this recipe, this is `ebs.csi.aws.com`:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`VolumeSnapshotClass`。确保快照提供程序设置为您的CSI驱动程序名称。在这个食谱中，这是`ebs.csi.aws.com`：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'A PVC must be created using the CSI driver of a storage vendor. In our recipe,
    we will use the PVC we created in the *Installing EBS CSI driver to manage EBS
    volumes* recipe. Now, create a `VolumeSnapshot` using the PVC name (`csi-ebs-pvc`)
    we set in *Step 1*:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 必须使用存储供应商的CSI驱动程序创建PVC。在我们的食谱中，我们将使用我们在*安装EBS CSI驱动程序来管理EBS卷*食谱中创建的PVC。现在，使用我们在*步骤1*中设置的PVC名称（`csi-ebs-pvc`）创建`VolumeSnapshot`：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'List the Volume Snapshots:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出卷快照：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Validate that the status is `Ready To Use: true` when checking the output of
    the following command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在检查以下命令的输出时，验证状态是否为`Ready To Use: true`：'
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Restoring a volume from a snapshot via CSI
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过CSI从快照还原卷
- en: 'We can create snapshots in an attempt to restore other snapshots. Let''s perform
    the following steps to restore the snapshot we created in the previous recipe:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建快照以尝试还原其他快照。让我们执行以下步骤来还原我们在上一个食谱中创建的快照：
- en: 'Restore the volume from the snapshot with a PVC using the following command.
    As you can see, a new PVC named `csi-ebs-pvc-restored` will be created based on
    the `ebs-volume-snapshot` snapshot:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从快照中还原卷，并使用PVC。如您所见，将基于`ebs-volume-snapshot`快照创建一个名为`csi-ebs-pvc-restored`的新PVC：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create another pod that will continue to write to the `/data/out.txt` file
    inside the PV. This step will ensure that the volume is still accessible after
    it''s been created:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个pod，它将继续写入PV内的`/data/out.txt`文件。此步骤将确保卷在创建后仍然可以访问：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Confirm that the `newapp` pod contains the restored data and the timestamps
    from the *Creating a volume snapshot* recipe:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认`newapp` pod包含恢复的数据和*创建卷快照*食谱中的时间戳：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: With this, you've learned how to provision persistent volumes from an existing
    snapshot. This is a very useful step in a CI/CD pipeline so that you can save time
    troubleshooting failed pipelines.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，您已经学会了如何从现有快照中提供持久卷。这是CI/CD流水线中非常有用的一步，这样您就可以节省时间来排查失败的流水线。
- en: Cloning a volume via CSI
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过CSI克隆卷
- en: 'While snapshots are a copy of a certain state of PVs, it is not the only way
    to create a copy of data. CSI also allows new volumes to be created from existing
    volumes. In this recipe, we will create a PVC using an existing PVC by performing
    the following steps:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然快照是PV的某个状态的副本，但这并不是创建数据副本的唯一方法。CSI还允许从现有卷创建新卷。在这个食谱中，我们将执行以下步骤，使用现有PVC创建一个PVC：
- en: 'Get the list of PVCs. You may have more than one PVC. In this example, we will
    use the PVC we created in the *Creating a volume snapshot* recipe. You can use
    another PVC as long as it has been created using the CSI driver that supports
    `VolumePVCDataSource` APIs:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取PVC列表。您可能有多个PVC。在这个例子中，我们将使用我们在*创建卷快照*食谱中创建的PVC。只要已经使用支持`VolumePVCDataSource`
    API的CSI驱动程序创建了另一个PVC，您就可以使用另一个PVC：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a PVC using an existing PVC (in this recipe, this is `csi-ebs-pvc`)
    as the `dataSource`. The data source can be either a `VolumeSnapshot` or PVC.
    In this example, we used `PersistentVolumeClaim` to clone the data:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用现有的PVC（在本示例中为`csi-ebs-pvc`）作为`dataSource`创建PVC。数据源可以是`VolumeSnapshot`或PVC。在本例中，我们使用`PersistentVolumeClaim`来克隆数据：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With that, you've learned a simple way of cloning persistent data from an existing
    data source.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，您已经学会了从现有数据源克隆持久数据的简单方法。
- en: How it works...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe showed you how to create snapshots, bring data back from a snapshot,
    and how to instantly clone persistent volumes on Kubernetes.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例向您展示了如何创建快照，从快照中恢复数据，以及如何在Kubernetes上立即克隆持久卷。
- en: In the *Restoring a volume from a snapshot* *via CSI* and *Cloning a volume
    via CSI* recipes, we added a `dataSource` to our PVC that references an existing
    PVC so that a completely independent, new PVC is created. The resulting PVC can
    be attached, cloned, snapshotted, or deleted independently if the source is deleted. The
    main difference is that right after provisioning the PVC, instead of an empty
    PV, the backend device provisions an exact duplicate of the specified volume.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在*通过CSI从快照还原卷*和*通过CSI克隆卷*的示例中，我们向PVC添加了`dataSource`，引用了现有的PVC，以便创建一个完全独立的新PVC。生成的PVC可以独立附加、克隆、快照或删除，即使源被删除。主要区别在于，在为PVC进行供应之后，后端设备会提供指定卷的精确副本，而不是空PV。
- en: It's important to note that native cloning support is available for dynamic
    provisioners using CSI drivers that have already implemented this feature. The
    CSI project is continuing to evolve and mature, so not every storage vendor provides
    full CSI capabilities.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，对于已经实现了这一功能的CSI驱动程序，动态供应商可以使用本地克隆支持。CSI项目正在不断发展和成熟，因此并非每个存储供应商都提供完整的CSI功能。
- en: See also
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: List of Kubernetes CSI drivers, at [https://kubernetes-csi.github.io/docs/drivers.html](https://kubernetes-csi.github.io/docs/drivers.html)
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes CSI驱动程序列表，请参见[https://kubernetes-csi.github.io/docs/drivers.html](https://kubernetes-csi.github.io/docs/drivers.html)
- en: '**Container Storage Interface** (**CSI**) documentation , at [https://kubernetes-csi.github.io](https://kubernetes-csi.github.io)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器存储接口**（**CSI**）文档，请参见[https://kubernetes-csi.github.io](https://kubernetes-csi.github.io)'
- en: The CSI spec, at [https://github.com/container-storage-interface/spec](https://github.com/container-storage-interface/spec)
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSI规范，请参见[https://github.com/container-storage-interface/spec](https://github.com/container-storage-interface/spec)
- en: Kubernetes Feature Gates, at [https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes功能门，参见[https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/](https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/)
- en: Kubernetes Volume Cloning documentation, at [https://kubernetes.io/docs/concepts/storage/volume-pvc-datasource/](https://kubernetes.io/docs/concepts/storage/volume-pvc-datasource/)
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes卷克隆文档，请参见[https://kubernetes.io/docs/concepts/storage/volume-pvc-datasource/](https://kubernetes.io/docs/concepts/storage/volume-pvc-datasource/)
- en: Kubernetes Volume Snapshots documentation, at [https://kubernetes.io/docs/concepts/storage/volume-snapshots/](https://kubernetes.io/docs/concepts/storage/volume-snapshots/)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes卷快照文档，请参见[https://kubernetes.io/docs/concepts/storage/volume-snapshots/](https://kubernetes.io/docs/concepts/storage/volume-snapshots/)
- en: Application backup and recovery using Velero
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Velero进行应用程序备份和恢复
- en: In this section, we will create disaster recovery backups and migrate Kubernetes
    applications and their persistent volumes in Kubernetes using VMware Velero (formerly
    Heptio Ark).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用VMware Velero（前身为Heptio Ark）在Kubernetes中创建灾难恢复备份，并迁移Kubernetes应用程序及其持久卷。
- en: You will learn how to install Velero, create standard and scheduled backups
    of applications with an S3 target, and restore them back to the Kubernetes clusters.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学习如何安装Velero，创建标准和计划备份，并将它们恢复到Kubernetes集群中的S3目标。
- en: Getting ready
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have a Kubernetes cluster ready and `kubectl` configured to manage
    the cluster resources.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您有一个准备好的Kubernetes集群，并且`kubectl`配置为管理集群资源。
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation to use the
    manifest files under the `chapter6` directory, as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆`k8sdevopscookbook/src`存储库到您的工作站，以便在`chapter6`目录下使用清单文件，如下所示：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This recipe requires an existing stateful workload with presentable data so
    that we can simulate a disaster and then restore the data. To do this, we will
    use the `mytestapp` application we created during the *Installing EBS CSI driver
    to manage EBS volumes* recipe in [Chapter 5](22439381-89a7-4cee-8aa1-77c63cb8a014.xhtml),
    *Preparing for Stateful Workloads*.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方需要一个具有可呈现数据的现有有状态工作负载，以便我们可以模拟灾难，然后恢复数据。为此，我们将使用在[第5章](22439381-89a7-4cee-8aa1-77c63cb8a014.xhtml)的*安装EBS
    CSI驱动程序来管理EBS卷*配方中创建的`mytestapp`应用程序，*为有状态的工作负载做准备*。
- en: Velero also requires S3-compatible object storage to store the backups. In this
    recipe, we will use the MinIO S3 target we deployed during the *Configuring and
    managing S3 object storage using MinIO* recipe for storing our backups.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Velero还需要S3兼容的对象存储来存储备份。在这个配方中，我们将使用在*使用Minio配置和管理S3对象存储*配方中部署的MinIO S3目标来存储我们的备份。
- en: How to do it…
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分进一步分为以下子部分，以使这个过程更容易：
- en: Installing Velero
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Velero
- en: Backing up an application
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份应用程序
- en: Restoring an application
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恢复应用程序
- en: Creating a scheduled backup
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建计划备份
- en: Taking a backup of an entire namespace
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份整个命名空间
- en: Viewing backups with MinIO
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用MinIO查看备份
- en: Deleting backups and schedules
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除备份和计划
- en: Installing Velero
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Velero
- en: 'Velero is an open source project that''s used to make backups, perform disaster
    recovery, restore, and migrate Kubernetes resources and persistent volumes. In
    this recipe, we will learn how to deploy Velero in our Kubernetes cluster by following
    these steps:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Velero是一个开源项目，用于备份、执行灾难恢复、恢复和迁移Kubernetes资源和持久卷。在这个配方中，我们将学习如何通过以下步骤在我们的Kubernetes集群中部署Velero：
- en: 'Download the latest version of Velero:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载Velero的最新版本：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: At the time of writing this book, the latest version of Velero was v1.1.0\.
    Check the Velero repository at [https://github.com/vmware-tanzu/velero/releases](https://github.com/vmware-tanzu/velero/releases) and
    update the link with the latest download link if it's changed since this book's
    release.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，Velero的最新版本是v1.1.0。检查Velero存储库[https://github.com/vmware-tanzu/velero/releases](https://github.com/vmware-tanzu/velero/releases)，如果自本书发布以来已更改，请使用最新的下载链接更新链接。
- en: 'Extract the tarball:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取tarball：
- en: '[PRE19]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Confirm that the `velero` command is executable:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认`velero`命令可执行：
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create the `credentials-velero` file with the access key and secret key you
    used in the *Configuring and managing S3 object storage using Minio* recipe:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`credentials-velero`文件，其中包含您在*使用Minio配置和管理S3对象存储*配方中使用的访问密钥和秘钥：
- en: '[PRE21]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Update the `s3Url` with the external IP of your MinIO service and install Velero
    Server:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用MinIO服务的外部IP更新`s3Url`并安装Velero服务器：
- en: '[PRE22]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Confirm that the deployment was successful:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认部署成功：
- en: '[PRE23]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: With that, Velero has been configured on your Kubernetes cluster using MinIO
    as the backup target.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，Velero已经在您的Kubernetes集群上使用MinIO作为备份目标进行配置。
- en: Backing up an application
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备份应用程序
- en: 'Let''s perform the following steps to take a backup of an application and its
    volumes using Velero. All the YAML manifest files we create here can be found
    under the `/src/chapter6/velero` directory:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤，使用Velero备份应用程序及其卷。我们在这里创建的所有YAML清单文件都可以在`/src/chapter6/velero`目录下找到：
- en: 'If you have an application and volumes to back up labeled already, you can
    skip to *Step 5*. Otherwise, create a namespace and a PVC with the following commands:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经为要备份的应用程序和卷打上标签，可以跳到*步骤5*。否则，使用以下命令创建一个命名空间和一个PVC：
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create a PVC  in the `backup-example` namespace using your preferred `storageClass`.
    In our example this is `aws-csi-ebs`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`backup-example`命名空间中使用您首选的`storageClass`创建一个PVC。在我们的示例中，这是`aws-csi-ebs`：
- en: '[PRE25]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Review the `myapp.yaml` file in the `src/chapter6/velero` directory and use
    it to create a pod that will use the PVC and write to the `/data/out.txt` file
    inside the pod:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/chapter6/velero`目录中查看`myapp.yaml`文件，并使用它创建一个将使用PVC并写入`/data/out.txt`文件的pod：
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Verify that our `myapp` pod writes data to the volume:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证我们的`myapp` pod是否将数据写入卷：
- en: '[PRE27]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a backup for all the objects with the `app=app2backup` label:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为所有具有`app=app2backup`标签的对象创建备份：
- en: '[PRE28]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Confirm that the backup phase is completed:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认备份阶段已经完成：
- en: '[PRE29]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'List all the available backups:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出所有可用的备份：
- en: '[PRE30]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: With that, you've learned how to create a backup of an application using labels.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，您已经学会了如何使用标签创建应用程序的备份。
- en: Restoring an application
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 恢复应用程序
- en: 'Let''s perform the following steps to restore the application from its backup:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来从备份中恢复应用程序：
- en: 'Delete the application and its PVC to simulate a data loss scenario:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除应用程序及其PVC以模拟数据丢失的情况：
- en: '[PRE31]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Restore your application from your previous backup called `myapp-backup`:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从名为`myapp-backup`的先前备份中恢复您的应用程序：
- en: '[PRE32]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Confirm your application is running:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认您的应用程序正在运行：
- en: '[PRE33]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Confirm that our `myapp` pod writes data to the volume:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认我们的`myapp` pod将数据写入卷：
- en: '[PRE34]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: With that, you've learned how to restore an application and its volumes from
    its backup using Velero.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，您已经学会了如何使用Velero从备份中恢复应用程序及其卷。
- en: Creating a scheduled backup
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建定期备份
- en: 'Velero supports cron expressions to schedule backup tasks. Let''s perform the
    following steps to schedule backups for our application:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Velero支持cron表达式来安排备份任务。让我们执行以下步骤来为我们的应用程序安排备份：
- en: 'Create a scheduled daily backup:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个定期的每日备份：
- en: '[PRE35]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: If you are not familiar with cron expressions, you can create a different schedule
    using the *Cron expression generator* link in the *See also* section.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉cron表达式，可以使用*另请参阅*部分中的*Cron表达式生成器*链接创建不同的计划。
- en: Note that the preceding schedule uses a cron expression. As an alternative,
    you can use a shorthand expression such as `--schedule="@daily"` or use an online
    cron maker to create a cron expression.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，前面的计划使用了cron表达式。作为替代，您可以使用简写表达式，如`--schedule="@daily"`，或者使用在线cron生成器创建cron表达式。
- en: 'Get a list of the currently scheduled backup jobs:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取当前已安排的备份作业列表：
- en: '[PRE36]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Confirm that a backup has been created by the scheduled backup job:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认已经通过定期备份作业创建了备份：
- en: '[PRE37]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: With that, you've learned how to create scheduled backups of an application
    using Velero.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，您已经学会了如何使用Velero创建应用程序的定期备份。
- en: Taking a backup of an entire namespace
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备份整个命名空间
- en: 'When you take backups, you can use different types of selectors or even complete
    sources in a selected namespace. In this recipe, we will include resources in
    a namespace by performing the following steps:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行备份时，您可以使用不同类型的选择器，甚至可以在所选命名空间中使用完整的资源。在本教程中，我们将通过以下步骤包括命名空间中的资源：
- en: 'Take a backup of the entire namespace using the following command. This example
    includes the `backup-example` namespace. Replace this namespace if needed. The
    namespace and resources should exist before you can execute the following command:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令对整个命名空间进行备份。此示例包括`backup-example`命名空间。如果需要，请替换此命名空间。在执行以下命令之前，命名空间和资源应该存在：
- en: '[PRE38]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If you need to exclude specific resources from the backup, add the `backup:
    "false"` label to them and run the following command:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '如果需要从备份中排除特定资源，请向它们添加`backup: "false"`标签，并运行以下命令：'
- en: '[PRE39]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: With that, you've learned how to create backups of resources in a given namespace
    using Velero.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，你学会了如何使用Velero在给定命名空间中创建资源备份。
- en: Viewing backups with MinIO
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用MinIO查看备份
- en: 'Let''s perform the following steps to view the content of the backups on the
    MinIO interface:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来查看MinIO界面上备份的内容：
- en: Follow the instructions in the *Accessing a MinIO web user interface *recipe
    and access the MinIO Browser.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照*访问MinIO Web用户界面*食谱中的说明，访问MinIO浏览器。
- en: 'Click on the `velero` bucket:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`velero`桶：
- en: '![](assets/efb51d77-7b1f-4a87-9833-cbf0d54a88a1.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/efb51d77-7b1f-4a87-9833-cbf0d54a88a1.png)'
- en: 'Open the `backups` directory to find a list of your Velero backups:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`backups`目录以查找Velero备份列表：
- en: '![](assets/06f1ed3a-b4c3-4dba-b7dd-ce13aa9cfdad.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/06f1ed3a-b4c3-4dba-b7dd-ce13aa9cfdad.png)'
- en: 'Click on a backup name to access the content of the backup:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击备份名称以访问备份的内容：
- en: '![](assets/69115a8e-713f-4681-8e96-cb338c9e438c.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/69115a8e-713f-4681-8e96-cb338c9e438c.png)'
- en: With that, you've learned how to locate and review the content of Velero backups.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，你学会了如何定位和查看Velero备份的内容。
- en: Deleting backups and schedules
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除备份和计划
- en: 'Velero backups can quickly grow in size if they''re not maintained correctly.
    Let''s perform the following steps to remove an existing backup resource and clean
    up scheduled backups:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有正确维护，Velero备份的大小会迅速增长。让我们执行以下步骤来删除现有的备份资源和清理定期备份：
- en: 'Delete the existing backup named `myapp-backup`:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除名为`myapp-backup`的现有备份：
- en: '[PRE40]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Delete all existing backups:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除所有现有备份：
- en: '[PRE41]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Delete the scheduled backup job named `myapp-daily`:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除名为`myapp-daily`的定期备份作业：
- en: '[PRE42]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How it works...
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe showed you how to create disaster recovery backups, restore your
    application and its data back from an S3 target, and how to create scheduled backup
    jobs on Kubernetes.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱向你展示了如何创建灾难恢复备份，从S3目标还原你的应用程序及其数据，以及如何在Kubernetes上创建定期备份作业。
- en: In the *Backing up an application* recipe, in *Step 4*, when you run `velero
    backup create myapp-backup --selector app=app2backup`, the Velero client calls
    the Kubernetes API server and creates a backup object.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在*备份应用程序*食谱中，在*步骤4*中，当你运行`velero backup create myapp-backup --selector app=app2backup`时，Velero客户端会调用Kubernetes
    API服务器并创建一个备份对象。
- en: You can get a list of **Custom Resource Definitions** (**CRDs**) that have been
    created by Velero by running the `kubectl get crds |grep velero` command.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行`kubectl get crds |grep velero`命令来获取Velero创建的**自定义资源定义**（**CRD**）列表。
- en: Velero's BackupController watches for a new object and when detected, it performs
    standard validation and processes the backup. Velero's BackupController collects
    the information to back up by asking resources from the API server. Then, it makes
    a call to the default storage provider and uploads the backup files.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Velero的BackupController会监视新对象，一旦检测到，它会执行标准验证并处理备份。Velero的BackupController通过向API服务器请求资源来收集备份信息。然后，它会调用默认存储提供程序并上传备份文件。
- en: See also
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The Velero project repository, at [https://github.com/vmware-tanzu/velero/](https://github.com/vmware-tanzu/velero/)
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Velero项目存储库位于[https://github.com/vmware-tanzu/velero/](https://github.com/vmware-tanzu/velero/)
- en: The Velero documentation, at [https://velero.io/docs/master/index.html](https://velero.io/docs/master/index.html)
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Velero文档，网址为[https://velero.io/docs/master/index.html](https://velero.io/docs/master/index.html)
- en: Velero support matrix, at [https://velero.io/docs/master/supported-providers/](https://velero.io/docs/master/supported-providers/)
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Velero支持矩阵，网址为[https://velero.io/docs/master/supported-providers/](https://velero.io/docs/master/supported-providers/)
- en: Velero podcasts and community articles, at [https://velero.io/resources/](https://velero.io/resources/)
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Velero播客和社区文章，网址为[https://velero.io/resources/](https://velero.io/resources/)
- en: Cron expression generator, at [https://www.freeformatter.com/cron-expression-generator-quartz.html](https://www.freeformatter.com/cron-expression-generator-quartz.html)
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cron表达式生成器，网址为[https://www.freeformatter.com/cron-expression-generator-quartz.html](https://www.freeformatter.com/cron-expression-generator-quartz.html)
- en: '**Application backup and recovery using Kasten**'
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**使用Kasten进行应用程序备份和恢复**'
- en: In this section, we will create disaster recovery backups and migrate Kubernetes
    applications and their persistent volumes in Kubernetes using **Kasten** (**K10**).
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Kasten（K10）创建灾难恢复备份，并在Kubernetes中迁移Kubernetes应用程序及其持久卷。
- en: You will learn how to install and use K10, create standard and scheduled backups
    of applications to an S3 target, and restore them back to the Kubernetes clusters.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学习如何安装和使用K10，创建标准和定期备份到S3目标的应用程序，并将它们恢复到Kubernetes集群中。
- en: Getting ready
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have a Kubernetes cluster ready and `kubectl` and `helm` configured
    so that you can manage the cluster resources. In this recipe, we will use a three-node
    Kubernetes cluster on AWS.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已准备好一个Kubernetes集群，并配置了`kubectl`和`helm`，以便您可以管理集群资源。在这个教程中，我们将在AWS上使用一个三节点的Kubernetes集群。
- en: This recipe requires an existing stateful workload with presentable data to
    simulate a disaster. To restore the data, we will use the `mytestapp` application
    we created in the *Installing EBS CSI Driver to manage EBS volumes* recipe in [Chapter
    5](22439381-89a7-4cee-8aa1-77c63cb8a014.xhtml), *Preparing for Stateful Workloads*.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程需要一个现有的有状态工作负载，具有可呈现的数据来模拟灾难。为了恢复数据，我们将使用在[第5章](22439381-89a7-4cee-8aa1-77c63cb8a014.xhtml)的*安装EBS
    CSI驱动程序来管理EBS卷*教程中创建的`mytestapp`应用程序。
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation to use the
    manifest files under the `chapter6` directory, as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆`k8sdevopscookbook/src`存储库到您的工作站，以使用`chapter6`目录下的清单文件，如下所示：
- en: '[PRE43]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: K10, by default, comes with a Starter Edition license that allows you to use
    the software on a cluster with three worker nodes (at most) at no charge. K10 requires
    a backup target to be configured.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: K10默认配备了Starter Edition许可证，允许您在最多三个工作节点的集群上免费使用该软件。K10需要配置备份目标。
- en: How to do it…
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分进一步分为以下小节，以使这个过程更容易：
- en: Installing Kasten
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Kasten
- en: Accessing the Kasten dashboard
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问Kasten仪表板
- en: Backing up an application
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 备份应用程序
- en: Restoring an application
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恢复应用程序
- en: Installing Kasten
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Kasten
- en: 'Let''s perform the following steps to install Kasten as a backup solution in
    our Kubernetes cluster:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤，在我们的Kubernetes集群中安装Kasten作为备份解决方案：
- en: 'Add the K10 helm repository:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加K10 helm存储库：
- en: '[PRE44]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Before we start, let''s validate the environment. The following script will
    execute some pre-installation tests to verify your cluster:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始之前，让我们验证环境。以下脚本将执行一些预安装测试，以验证您的集群：
- en: '[PRE45]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Make sure your preferred storage class is set as the default; otherwise, define
    it by adding the `-set persistence.storageClass` parameters to the following command.
    In our example, we are using the `openebs-cstor-default` storage class. Also,
    add your AWS access key and secret and install K10:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的首选存储类设置为默认；否则，通过向以下命令添加`-set persistence.storageClass`参数来定义它。在我们的示例中，我们正在使用`openebs-cstor-default`存储类。还要添加您的AWS访问密钥和秘钥并安装K10：
- en: '[PRE46]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Confirm that the deployment status is `DEPLOYED` using the following `helm`
    command:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下`helm`命令确认部署状态为`DEPLOYED`：
- en: '[PRE47]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: All the pods should be deployed in around a minute after this step as Kasten exposes
    an API based on Kubernetes CRDs. You can either use `kubectl` with the new CRDs
    (refer to the *Kasten CLI commands* link in the *See also* section) or use the
    Kasten Dashboard by following the next recipe, that is, the *Accessing the Kasten
    Dashboard* recipe.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤后，所有的pod应该在大约一分钟内部署完成，因为Kasten基于Kubernetes CRDs提供了一个API。您可以使用带有新CRDs的`kubectl`（参考*相关链接*部分中的*Kasten
    CLI命令*链接），或者按照下一个步骤，即*访问Kasten仪表板*的步骤，使用Kasten仪表板。
- en: Accessing the Kasten Dashboard
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问Kasten仪表板
- en: 'Let''s perform the following steps to access the Kasten Dashboard. This is
    where we will be taking application backups and restoring them:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来访问Kasten仪表板。这是我们将进行应用程序备份和恢复的地方：
- en: 'Create port forwarding using the following command. This step will forward
    the Kasten Dashboard service on port `8000` to your local workstation on port
    `8080`:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建端口转发。这一步将Kasten仪表板服务的端口`8000`转发到本地工作站的端口`8080`：
- en: '[PRE48]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'On your workstation, open `http://127.0.0.1:8080/k10/#` with your browser:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的工作站上，使用浏览器打开`http://127.0.0.1:8080/k10/#`：
- en: '[PRE49]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Read and accept the end user license agreement:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读并接受最终用户许可协议：
- en: '![](assets/d9d57128-8bd7-4866-b89c-783f526ba6e0.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d9d57128-8bd7-4866-b89c-783f526ba6e0.png)'
- en: With that, you have accessed the Kasten Dashboard. You can familiarize yourself
    with it by clicking the main menus and referring to the *Kasten documentation*
    link in the *See also* section for additional settings if needed.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，您已经访问了Kasten仪表板。您可以通过单击主菜单并参考*相关链接*部分中的*Kasten文档*链接来熟悉它，以获取额外的设置（如果需要）。
- en: Backing up an application
  id: totrans-259
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备份应用程序
- en: 'Let''s perform the following steps to take a backup of our application:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来备份我们的应用程序：
- en: 'If you have an application and persistent volumes associated with the backup
    labeled already, you can skip to *Step 5*. Otherwise, create a namespace and a
    PVC using the following example code:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经有一个应用程序和与备份相关的持久卷，您可以跳过*步骤5*。否则，使用以下示例代码创建一个命名空间和PVC：
- en: '[PRE50]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Create a PVC in the `backup-example` namespace:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`backup-example`命名空间中创建一个PVC：
- en: '[PRE51]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Create a pod that will use the PVC and write to the `/data/out.txt` file inside
    the pod using the sample `myapp.yaml` manifest under the `src/chapter6/kasten`
    directory:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个将使用PVC并在`src/chapter6/kasten`目录下的示例`myapp.yaml`清单中写入`/data/out.txt`文件的pod：
- en: '[PRE52]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Verify that our `myapp` pod writes data to the volume:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证我们的`myapp` pod是否将数据写入卷：
- en: '[PRE53]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'On the Kasten Dashboard, click on Unmanaged applications:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Kasten仪表板上，点击未管理的应用程序：
- en: '![](assets/c5898a07-a42d-4519-882f-3b8df68b52fa.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c5898a07-a42d-4519-882f-3b8df68b52fa.png)'
- en: 'In the `backup-example` namespace, click on Create a policy:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`backup-example`命名空间中，点击创建策略：
- en: '![](assets/9a3b4e0b-e693-4c44-a086-9008ce33fae5.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9a3b4e0b-e693-4c44-a086-9008ce33fae5.png)'
- en: 'Enter a name and select the Snapshot action:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入名称并选择快照操作：
- en: '![](assets/361d0974-208f-40dd-b864-f1ad16f92c2f.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/361d0974-208f-40dd-b864-f1ad16f92c2f.png)'
- en: 'Select Daily as the Action Frequency:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择每日作为操作频率：
- en: '![](assets/e3748fc4-ecf5-4ffc-9c0d-c015fc813595.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e3748fc4-ecf5-4ffc-9c0d-c015fc813595.png)'
- en: 'Click on Create Policy:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建策略：
- en: '![](assets/005f07e8-82a9-43fc-ba5c-939c8ba0cfbc.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/005f07e8-82a9-43fc-ba5c-939c8ba0cfbc.png)'
- en: By following these steps, you will have created your first backup using the
    policy, as well as a schedule for the following backup jobs.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这些步骤，您将使用策略创建第一个备份，以及以下备份作业的时间表。
- en: Restoring an application
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 恢复应用程序
- en: 'Let''s perform the following steps to restore the application from an existing
    backup:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来从现有备份中恢复应用程序：
- en: 'Under Applications, from the list of compliant applications, click the arrow
    icon next to `backup-example` and select Restore Application. If the application
    was deleted, then the Removed option needs to be selected:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序下，从符合应用程序的列表中，单击`backup-example`旁边的箭头图标，然后选择还原应用程序。如果应用程序已被删除，则需要选择“已删除”选项：
- en: '![](assets/6622c618-54a4-4a76-a590-c6712d3fb734.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6622c618-54a4-4a76-a590-c6712d3fb734.png)'
- en: 'Select a restore point to recover to:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要恢复的还原点：
- en: '![](assets/96080433-08be-439f-8f64-7e5339a41259.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/96080433-08be-439f-8f64-7e5339a41259.png)'
- en: 'Select `backup-example` and click on Restore:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`backup-example`，然后单击还原：
- en: '![](assets/ff4d400e-a230-4881-bd0b-ada3983bc960.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ff4d400e-a230-4881-bd0b-ada3983bc960.png)'
- en: 'Confirm that you want this to be restored:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认您希望进行还原：
- en: '![](assets/03d1059c-9b06-4377-b123-798fe2c3654a.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/03d1059c-9b06-4377-b123-798fe2c3654a.png)'
- en: With that, you've learned how to restore an application and its volumes from
    its backup using Kasten.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，您已经学会了如何使用Kasten从备份中还原应用程序及其卷。
- en: How it works...
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe showed you how to create disaster recovery backups, restore your
    application and its data back from an S3 target, and how to create scheduled backups
    on Kubernetes.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程向您展示了如何创建灾难恢复备份，从S3目标还原应用程序及其数据，并在Kubernetes上创建定期备份。
- en: 'In the *Backing up an application* recipe, in *Step 2*, we created a pod that
    uses OpenEBS as a storage vendor. In this case, Kasten uses a generic backup method
    that requires a sidecar to your application that can mount the application data
    volume. The following is an example that you can add to your pods and deployment
    when using non-standard storage options:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在*备份应用程序*教程中，在*步骤2*中，我们创建了一个使用OpenEBS作为存储供应商的pod。在这种情况下，Kasten使用一种通用备份方法，该方法需要一个能够挂载应用程序数据卷的sidecar到您的应用程序。以下是一个示例，您可以在使用非标准存储选项时添加到您的pod和部署中：
- en: '[PRE54]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: See also
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The Kasten documentation , at [https://docs.kasten.io/](https://docs.kasten.io/)
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kasten文档，网址为[https://docs.kasten.io/](https://docs.kasten.io/)
- en: Kasten CLI commands, at [https://docs.kasten.io/api/cli.html](https://docs.kasten.io/api/cli.html)
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kasten CLI命令，网址为[https://docs.kasten.io/api/cli.html](https://docs.kasten.io/api/cli.html)
- en: More on generic backup and restore using Kanister, at [https://docs.kasten.io/kanister/generic.html#generic-kanister](https://docs.kasten.io/kanister/generic.html#generic-kanister)
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关使用Kanister进行通用备份和还原的更多信息，请访问[https://docs.kasten.io/kanister/generic.html#generic-kanister](https://docs.kasten.io/kanister/generic.html#generic-kanister)
- en: Cross-cloud application migration
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨云应用程序迁移
- en: When running applications on the cloud, it is important to have a plan in case
    cloud vendor service outages occur, as well as to avoid possible cloud lock-ins,
    by abstracting the storage layer using a cloud-native storage solution similar
    to the OpenEBS management layer that allows you to manage your exposure to each
    cloud or data center. In this section, we will migrate a cloud-native application
    from one Kubernetes cluster to another cluster running on a different cloud vendor
    to simulate a migration scenario. You will learn how to use backups to migrate
    applications using Kasten and OpenEBS Director.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在云上运行应用程序时，重要的是要有一个计划，以防云供应商服务中断发生，以及避免可能的云锁定，通过使用类似于OpenEBS管理层的云原生存储解决方案来抽象存储层，该解决方案允许您管理对每个云或数据中心的暴露。在本节中，我们将从一个Kubernetes集群迁移一个云原生应用程序到另一个在不同云供应商上运行的集群，以模拟迁移场景。您将学习如何使用Kasten和OpenEBS
    Director来使用备份来迁移应用程序。
- en: Getting ready
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure you have two Kubernetes clusters ready and `kubectl` configured to
    manage the cluster resources.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您有两个准备好的Kubernetes集群，并且已配置`kubectl`以管理集群资源。
- en: In this recipe, we will use a cluster on AWS that's been deployed and managed
    by D2iQ `Konvoy` and a cluster that's been deployed using `kops`. As an example,
    we will migrate an existing `minio` application.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用由D2iQ `Konvoy`部署和管理的AWS集群以及使用`kops`部署的集群。例如，我们将迁移一个现有的`minio`应用程序。
- en: The instructions provided here require an AWS account and an AWS user with a
    policy that has permission to use the related services. If you don't have one,
    go to [https://aws.amazon.com/account/](https://aws.amazon.com/account/) and create
    one.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提供的说明需要一个AWS账户和一个具有使用相关服务权限的AWS用户策略。如果您没有，请访问[https://aws.amazon.com/account/](https://aws.amazon.com/account/)并创建一个。
- en: How to do it…
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 该部分进一步分为以下子部分，以使该过程更加简单：
- en: Creating an export profile in Kasten
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kasten中创建导出配置文件
- en: Exporting a restore point in Kasten
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kasten中导出还原点
- en: Creating an import profile in Kasten
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kasten中创建导入配置文件
- en: Migrating an application in Kasten
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kasten中迁移应用程序
- en: Importing clusters in OpenEBS Director
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在OpenEBS Director中导入集群
- en: Migrating an application in OpenEBS Director
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在OpenEBS Director中迁移应用程序
- en: Creating an export profile in Kasten
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Kasten中创建导出配置文件
- en: 'First, we will use Kasten and create an export profile to store a remote copy
    of an example application to be used in the migration scenario. To do this, follow
    these steps:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用Kasten创建一个导出配置文件，以存储迁移场景中要使用的示例应用程序的远程副本。要做到这一点，请按照以下步骤操作：
- en: 'Under Settings, select the Mobility tab and click on New Profile:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置下，选择移动性选项卡，然后单击新配置文件：
- en: '![](assets/cdd97ec7-a6f5-4a3d-a36b-1262632e6a9c.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cdd97ec7-a6f5-4a3d-a36b-1262632e6a9c.png)'
- en: To create a destination profile, select Export, check the Enable data portability
    box, select Amazon S3, and enter your user credentials.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建目标配置文件，请选择导出，勾选启用数据可移植性框，选择Amazon S3，并输入您的用户凭据。
- en: 'Click on Validate and Save:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击验证并保存：
- en: '![](assets/b581e6be-bde1-4f00-aa14-8b4076f1eb8c.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b581e6be-bde1-4f00-aa14-8b4076f1eb8c.png)'
- en: The export profile we created in this recipe will be used later to move data
    to another cluster.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本教程中创建的导出配置文件将在以后用于将数据移动到另一个集群。
- en: Exporting a restore point in Kasten
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Kasten中导出还原点
- en: 'Let''s perform the following steps to create an application restore point:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来创建应用程序还原点：
- en: Under Applications, from the list of compliant applications, click the arrow
    icon next to minio and select Export Application.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序下，从符合应用程序的列表中，单击minio旁边的箭头图标，并选择导出应用程序。
- en: 'Select a restore point to export:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要导出的还原点：
- en: '![](assets/3468839f-77dd-457a-8c9e-14bf94a24125.png)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3468839f-77dd-457a-8c9e-14bf94a24125.png)'
- en: 'Select your export profile and click on Export:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的导出配置文件，然后点击导出：
- en: '![](assets/3678bee2-6415-4002-82ef-458056c586e1.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3678bee2-6415-4002-82ef-458056c586e1.png)'
- en: Confirm the restore.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认还原。
- en: 'Copy the text block to the clipboard:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本块复制到剪贴板中。
- en: '![](assets/28bee252-28bc-4e74-9466-0d484c8fc8a6.png)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/28bee252-28bc-4e74-9466-0d484c8fc8a6.png)'
- en: Creating an import profile in Kasten
  id: totrans-331
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Kasten中创建一个导入配置文件
- en: 'Let''s perform the following steps on our second cluster, which is where we
    want to migrate our application:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们想要迁移应用程序的第二个集群上执行以下步骤：
- en: 'Under Settings, select the Mobility tab and click on New Profile:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置下，选择移动性选项卡，然后点击新配置文件：
- en: '![](assets/cdd97ec7-a6f5-4a3d-a36b-1262632e6a9c.png)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cdd97ec7-a6f5-4a3d-a36b-1262632e6a9c.png)'
- en: To create a destination profile, select Import, select Amazon S3, and enter
    your user credentials.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建目标配置文件，选择导入，选择Amazon S3，并输入您的用户凭据。
- en: Use the bucket name you created for the export profile on the source cluster.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您在源集群上为导出配置文件创建的存储桶名称。
- en: 'Click on Validate and Save:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击验证并保存：
- en: '![](assets/45b04dbd-3d44-4082-ada0-2cf2de272c04.png)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/45b04dbd-3d44-4082-ada0-2cf2de272c04.png)'
- en: The import profile we created in this recipe will be used later to import data
    from another cluster.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个教程中创建的导入配置文件将在以后用于从另一个集群导入数据。
- en: Migrating an application in Kasten
  id: totrans-340
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Kasten中迁移应用程序
- en: 'Finally, let''s perform the following steps to use the import profile and migrate
    an application from another cluster:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们执行以下步骤来使用导入配置文件并从另一个集群迁移应用程序：
- en: 'Under Policies, click on new policies:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在策略下，点击新策略：
- en: '![](assets/f677f96a-db96-4ea1-91c3-b4e6781a06c2.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f677f96a-db96-4ea1-91c3-b4e6781a06c2.png)'
- en: Select Import and check the Restore after import box.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择导入并勾选导入后恢复框。
- en: Select Daily as Action Frequency and paste the Config Data text block from the *Exporting
    a restore point* recipe.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择每日作为操作频率，并粘贴来自*导出还原点*教程的配置数据文本块。
- en: 'Select the import profile you created in the *Creating import profile* recipe:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您在*创建导入配置文件*教程中创建的导入配置文件：
- en: '![](assets/d1ed6e91-6514-4442-ade2-c957aad5d211.png)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d1ed6e91-6514-4442-ade2-c957aad5d211.png)'
- en: Click the Create Policy button.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建策略按钮。
- en: After this step, Kasten will recover the application and its data from the restore
    point into the new cluster.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，Kasten将从还原点中恢复应用程序及其数据到新集群中。
- en: Importing clusters into OpenEBS Director
  id: totrans-350
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将集群导入OpenEBS Director
- en: 'OpenEBS Director Online is a free-to-use **SaaS (Software as a Service)** solution
    (with the OnPrem option available for Enterprise users) for managing stateful
    applications in Kubernetes. In addition to its logging and monitoring capabilities,
    it provides **Data Migration as a Service** (**DMaaS**). In this recipe, we will
    learn how to add our existing clusters to the platform and then perform DMaaS
    in the following recipe:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: OpenEBS Director Online是一个免费使用的**SaaS（软件即服务）**解决方案（企业用户可用OnPrem选项）用于管理Kubernetes中的有状态应用程序。除了其日志记录和监控功能外，它还提供**数据迁移即服务**（**DMaaS**）。在这个教程中，我们将学习如何将现有的集群添加到平台，然后在下一个教程中执行DMaaS：
- en: 'Go to [www.mayadata.io](http://www.mayadata.io) to sign in to your OpenEBS
    Enterprise Platform at [https://portal.mayadata.io/home](https://portal.mayadata.io/home):'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[www.mayadata.io](http://www.mayadata.io)登录到您的OpenEBS企业平台[https://portal.mayadata.io/home](https://portal.mayadata.io/home)：
- en: '![](assets/7093385d-3d37-4b90-b9f9-dd24f2b32231.png)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7093385d-3d37-4b90-b9f9-dd24f2b32231.png)'
- en: 'Click on the Connect your Cluster button:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击连接您的集群按钮：
- en: '![](assets/5e7893ef-d6d6-43d4-beaf-35082cda9d66.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5e7893ef-d6d6-43d4-beaf-35082cda9d66.png)'
- en: 'Name your project. Here, we used the name `GKECluster`:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名您的项目。在这里，我们使用了名称`GKECluster`：
- en: '![](assets/94b19b9e-61be-4208-9714-10974dad61f3.png)'
  id: totrans-357
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/94b19b9e-61be-4208-9714-10974dad61f3.png)'
- en: 'Choose your Kubernetes cluster location. Here, we used a cluster on `GKE`:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的Kubernetes集群位置。在这里，我们使用了`GKE`上的一个集群：
- en: '![](assets/d7724b3a-c711-4007-b16b-67d6d2feef3d.png)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d7724b3a-c711-4007-b16b-67d6d2feef3d.png)'
- en: 'Copy and execute the command on your first cluster:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的第一个集群上复制并执行该命令：
- en: '![](assets/5f7b4124-5ce5-4881-a11d-83724a277151.png)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5f7b4124-5ce5-4881-a11d-83724a277151.png)'
- en: 'From the left-hand menu, click on Clusters:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中，点击“集群”：
- en: '![](assets/a221c7bb-1686-4715-acc2-ee1ed179c406.png)'
  id: totrans-363
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a221c7bb-1686-4715-acc2-ee1ed179c406.png)'
- en: 'On the Clusters view, click on Connect a new Cluster and repeat *Steps 4* and
    *5* for the second cluster:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“集群”视图中，点击“连接新集群”，然后为第二个集群重复*步骤4*和*步骤5*：
- en: '![](assets/d644a1cf-abc7-4c0f-84d4-045a43c33ed9.png)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d644a1cf-abc7-4c0f-84d4-045a43c33ed9.png)'
- en: Once you are done, you will have both clusters visible on the platform.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，您将在平台上看到两个集群。
- en: Migrating an application in OpenEBS Director
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在OpenEBS Director中迁移应用程序
- en: 'Let''s perform data migration (DMaaS) by following these steps:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤执行数据迁移（DMaaS）：
- en: 'On the Clusters view, click on Free under the Subscription column and start
    your premium plan evaluation for both clusters:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“集群”视图中，点击订阅列下的“免费”，并开始为两个集群进行高级计划评估：
- en: '![](assets/d187fb83-83e1-4ee4-a682-8c3ae95d2e01.png)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d187fb83-83e1-4ee4-a682-8c3ae95d2e01.png)'
- en: 'On your source cluster''s Overview page, click on the workload you want to
    migrate. In this recipe, we will migrate the MinIO workload:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在源集群的概述页面上，点击您想要迁移的工作负载。在这个示例中，我们将迁移MinIO工作负载：
- en: '![](assets/a95bcc41-65d4-4b85-8814-c5f77804a451.png)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a95bcc41-65d4-4b85-8814-c5f77804a451.png)'
- en: 'On the Application view, select the DMaaS tab and click on the New schedule
    button:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序视图中，选择DMaaS选项卡，然后点击“新建计划”按钮：
- en: '![](assets/570b09c3-d9ed-4780-956f-979ff6bb4ed1.png)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/570b09c3-d9ed-4780-956f-979ff6bb4ed1.png)'
- en: 'On the New Schedule view, select AWS as an S3 provider and select your credentials
    and region. Finally, select the backup interval as Daily and click on the Schedule
    Now button to create a backup. As an alternative, you can also use GCP or MinIO
    as an S3 target:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新计划”视图中，选择AWS作为S3提供商，并选择您的凭据和地区。最后，选择备份间隔为每天，然后点击“立即计划”按钮创建备份。作为替代，您也可以使用GCP或MinIO作为S3目标：
- en: '![](assets/8954c3ca-0aff-46f4-8a7d-57179332ae2c.png)'
  id: totrans-376
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8954c3ca-0aff-46f4-8a7d-57179332ae2c.png)'
- en: 'From the left-hand menu, select DMaaS and click on the Restore button next
    to the schedule you created:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中，选择DMaaS，然后点击您创建的计划旁边的“恢复”按钮：
- en: '![](assets/f338c82a-6c2c-4c34-b141-eb0cd12fce7a.png)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f338c82a-6c2c-4c34-b141-eb0cd12fce7a.png)'
- en: 'Select your target cluster from the list of managed clusters and click on Start
    Restore:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从托管集群列表中选择目标集群，然后点击“开始恢复”：
- en: '![](assets/ef0ee5f3-bc54-4107-a064-f3f64d09fd2f.png)'
  id: totrans-380
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ef0ee5f3-bc54-4107-a064-f3f64d09fd2f.png)'
- en: Your workload will be restored to the second cluster.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 您的工作负载将被恢复到第二个集群。
- en: See also
  id: totrans-382
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: OpenEBS Director documentation, at [https://help.mayadata.io/hc/en-us](https://help.mayadata.io/hc/en-us)
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenEBS Director文档，请访问[https://help.mayadata.io/hc/en-us](https://help.mayadata.io/hc/en-us)
- en: Using OpenEBS Director in Auto DevOps usecase, at [https://youtu.be/AOSUZxUs5BE?t=1210](https://youtu.be/AOSUZxUs5BE?t=1210)
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Auto DevOps用例中使用OpenEBS Director，请访问[https://youtu.be/AOSUZxUs5BE?t=1210](https://youtu.be/AOSUZxUs5BE?t=1210)
- en: Connecting to OpenEBS Director Online, at [https://docs.openebs.io/docs/next/directoronline.html](https://docs.openebs.io/docs/next/directoronline.html)
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到OpenEBS Director Online，请访问[https://docs.openebs.io/docs/next/directoronline.html](https://docs.openebs.io/docs/next/directoronline.html)
