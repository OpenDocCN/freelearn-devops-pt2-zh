- en: Building CI/CD Pipelines
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 构建CI/CD流水线
- en: In this chapter, we will discuss the configuration of end-to-end **Continuous
    Integration/Continuous Delivery** (**CI/CD**) pipelines using the most popular
    CI/CD tools on both self-managed public clouds and SaaS solutions using Kubernetes.
    After following the recipes in this chapter, you will have gained the skills needed
    to build, deploy, and promote applications from development to a production environment.
    You will be able to use the tools that we will implement in these recipes to detect
    bugs, anti-patterns, and license concerns during the continuous integration process.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论使用最流行的CI/CD工具在自托管公共云和Kubernetes的SaaS解决方案上配置端到端**持续集成/持续交付**（**CI/CD**）流水线。在遵循本章的配方之后，您将掌握构建、部署和推广应用程序从开发到生产环境所需的技能。您将能够使用我们在这些配方中实施的工具来在持续集成过程中检测错误、反模式和许可问题。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下的配方：
- en: Creating a CI/CD pipeline in Jenkins X
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Jenkins X中创建CI/CD流水线
- en: Creating a CI/CD pipeline in GitLab
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GitLab中创建CI/CD流水线
- en: Creating a CI/CD pipeline using CircleCI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CircleCI创建CI/CD流水线
- en: Setting up a CI/CD pipeline using GitHub Actions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GitHub Actions设置CI/CD流水线
- en: Setting up a CI/CD pipeline on Amazon Web Services
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Amazon Web Services上设置CI/CD流水线
- en: Setting up a CI/CD pipeline with Spinnaker on Google Cloud Build
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Google Cloud Build上使用Spinnaker设置CI/CD流水线
- en: Setting up a CI/CD pipeline on Azure DevOps
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Azure DevOps上设置CI/CD流水线
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The recipes in this section assume that you have a functional Kubernetes cluster
    deployed after following one of the recommended methods described in [Chapter
    1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml), *Building Production-Ready Kubernetes
    Clusters*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的配方假定您在遵循[第1章](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml)中描述的推荐方法之一后部署了一个功能性的Kubernetes集群，*构建生产就绪的Kubernetes集群*。
- en: Kubernetes' command-line interface, `kubectl`, will be used for the rest of
    the recipes in this section since it's the main command-line interface for running
    commands against Kubernetes clusters. If you are using a Red Hat OpenShift cluster,
    you can replace `kubectl` with `oc`. All the commands are expected to function
    similarly.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes的命令行界面`kubectl`将在本节的其余配方中使用，因为它是针对Kubernetes集群运行命令的主要命令行界面。如果您使用的是Red
    Hat OpenShift集群，您可以用`oc`替换`kubectl`。所有命令都预计会有类似的功能。
- en: The recipes in this section require a Git repository with a containerized project.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的配方需要一个带有容器化项目的Git存储库。
- en: Creating a CI/CD pipeline in Jenkins X
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Jenkins X中创建CI/CD流水线
- en: Jenkins X is a fairly new open source solution that extends the Jenkins ecosystem
    and solves the problem of automating CI/CD in the cloud using Kubernetes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins X是一个相当新的开源解决方案，它扩展了Jenkins生态系统，并解决了在使用Kubernetes在云中自动化CI/CD的问题。
- en: In this section, we will learn how to get your application as a pipeline into
    Jenkins X, which you will have deployed by following the *Deploying and managing
    the life cycle of Jenkins X* recipe instructions in [Chapter 2](51383d70-c744-4dba-adf3-b6e6e1b8b2a2.xhtml)*,
    Operating Applications on Kubernetes*. With that, you will learn how to create
    a CI/CD pipeline with automated GitOps and promote an application from staging
    to production, all by using simple commands.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何将您的应用程序作为一个流水线进入Jenkins X，您可以通过遵循[第2章](51383d70-c744-4dba-adf3-b6e6e1b8b2a2.xhtml)中的*部署和管理Jenkins
    X的生命周期*配方说明来部署。有了这个，您将学会如何使用简单的命令创建具有自动化GitOps的CI/CD流水线，并将应用程序从暂存推广到生产。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have followed the instructions in [Chapter 2](51383d70-c744-4dba-adf3-b6e6e1b8b2a2.xhtml)*,
    Operating Applications on Kubernetes*, in the *Deploying and managing the life
    cycle of Jenkins X* recipe and have a functional Kubernetes cluster with a Jenkins
    X deployment ready. You can find the instructions to install `helm` in that chapter
    as well.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经按照[第2章](51383d70-c744-4dba-adf3-b6e6e1b8b2a2.xhtml)*，在Kubernetes上操作应用程序*中的说明，并且已经准备好一个功能齐全的Kubernetes集群和一个部署好的Jenkins
    X。你也可以在那一章中找到安装`helm`的说明。
- en: In the following recipe, you will learn how to create a pipeline with GitOps
    promotion.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，你将学习如何使用GitOps推广创建流水线。
- en: This recipe requires `kubectl`, `helm`, the Jenkins X CLI, `jx`, and your preferred
    cloud provider CLI where you installed your Kubernetes cluster using Jenkins X.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例需要`kubectl`、`helm`、Jenkins X CLI、`jx`以及你安装Kubernetes集群的首选云提供商CLI。
- en: Jenkins X supports Azure, AWS, GCP, IBM Cloud, Oracle Cloud, minikube, minishift,
    and OpenShift as providers for the deployment process. You also need to have a
    GitHub organization and GitHub account.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins X支持Azure、AWS、GCP、IBM Cloud、Oracle Cloud、minikube、minishift和OpenShift作为部署过程的提供商。你还需要拥有一个GitHub组织和GitHub账户。
- en: How to do it…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分进一步分为以下子部分，以使这个过程更容易：
- en: Connecting to the Jenkins pipeline console
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到Jenkins流水线控制台
- en: Importing an application as a pipeline
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序导入为流水线
- en: Checking application status
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查应用程序状态
- en: Promoting an application to production
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序推广到生产环境
- en: Creating a pipeline using a quick-start application
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用快速启动应用程序创建流水线
- en: Connecting to Jenkins Pipeline Console
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到Jenkins流水线控制台
- en: 'Let''s perform the following steps to access the Jenkins Pipeline Console web
    interface:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来访问Jenkins流水线控制台Web界面：
- en: 'Switch to the `jx` namespace where Jenkins X is deployed:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到部署了Jenkins X的`jx`命名空间：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Using the following command to get the Jenkins (Blue Ocean) console address
    and open the link in your browser. In this recipe, the console address is the
    output to the following `jx console` command, that is, `http://jenkins.jx.your_ip.nip.io/blue`:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令获取Jenkins（Blue Ocean）控制台地址，并在浏览器中打开链接。在这个示例中，控制台地址是以下`jx console`命令的输出，即`http://jenkins.jx.your_ip.nip.io/blue`：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After you''ve opened the Jenkins Console link from the output of *step 2*,
    click on one of the pipelines from the list. As an example, you can see two pipelines
    in our following demo environment:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你从*步骤2*的输出中打开Jenkins控制台链接后，点击列表中的一个流水线。例如，你可以在我们的演示环境中看到两个流水线：
- en: '![](assets/69c4c935-7c12-4d8b-9401-f87e64fd6e62.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/69c4c935-7c12-4d8b-9401-f87e64fd6e62.png)'
- en: 'Select the last run and make sure both pipelines are healthy, meaning that
    your environment works. Similar to the following screenshot, you should see green
    check marks at the Validate Environment and Update Environment stages:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择最后一次运行，并确保两个流水线都正常，这意味着你的环境是正常工作的。类似于以下截图，你应该在验证环境和更新环境阶段看到绿色的勾号：
- en: '![](assets/f9ea4bbf-dbb5-4690-be85-ecfdf8d7c43c.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f9ea4bbf-dbb5-4690-be85-ecfdf8d7c43c.png)'
- en: Now that we've validated that the environment is functional, we can start adding
    a new pipeline for our own application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经验证了环境是正常的，我们可以开始为我们自己的应用程序添加新的流水线。
- en: Importing an application as a pipeline
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将应用程序导入为流水线
- en: 'Most of the time, you will be required to import a local project or Git repository
    into Jenkins. Let''s perform the following steps to create a local clone of an
    existing repository and import it as a pipeline:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数情况下，你需要将本地项目或Git仓库导入到Jenkins中。让我们执行以下步骤来创建现有仓库的本地克隆并将其导入为流水线：
- en: First, fork your copy of the example code to your account. Go to [https://github.com/k8sdevopscookbook/python-flask-docker](https://github.com/k8sdevopscookbook/python-flask-docker)
    in your browser and click on the Fork button in the upper-right corner.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将示例代码的副本分叉到您的帐户。在浏览器中转到[https://github.com/k8sdevopscookbook/python-flask-docker](https://github.com/k8sdevopscookbook/python-flask-docker)，并单击右上角的Fork按钮。
- en: 'Clone the repository to your local machine. Make sure that you replace `your_github_username`
    with your GitHub username where you forked the example:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将存储库克隆到本地计算机。确保您将`your_github_username`替换为您分叉示例的GitHub用户名：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, you should have a local copy of the `python-flash-docker` application.
    Use the following commands to import the project:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您应该有`python-flash-docker`应用程序的本地副本。使用以下命令导入项目：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, you can watch the pipeline activity either from the Jenkins Blue Ocean
    view or the CLI. The following screenshot shows the pipeline activity on the Jenkins
    Blue Ocean dashboard:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以从Jenkins Blue Ocean视图或CLI观察流水线活动。以下屏幕截图显示了Jenkins Blue Ocean仪表板上的流水线活动：
- en: '![](assets/aacf84fe-bcd1-4381-bc65-b18ac4a6872d.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aacf84fe-bcd1-4381-bc65-b18ac4a6872d.png)'
- en: 'As an alternative, you can watch the activity on the CLI using the `jx get
    activity` command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为替代方案，您可以使用`jx get activity`命令在CLI上观察活动：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Checking application status
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查应用程序状态
- en: 'After you''ve created the pipeline, you need to confirm its status. Let''s
    perform the following steps make sure the application has been deployed in staging
    before we move it into production:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了流水线后，您需要确认其状态。在将应用程序移入生产之前，让我们执行以下步骤确保应用程序已在暂存中部署：
- en: 'If the pipeline has been built successfully, you should have version 0.0.1
    in your staging environment. List the applications when the pipeline is complete:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果流水线构建成功，您应该在暂存环境中有版本0.0.1。在流水线完成时列出应用程序：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, you can see that the application has been deployed. Visit the URL to
    see the application:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，您可以看到应用程序已部署。访问URL以查看应用程序：
- en: '![](assets/cba167d5-f104-4339-81d7-3c0a76ac35ac.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cba167d5-f104-4339-81d7-3c0a76ac35ac.png)'
- en: 'Our pod is currently running in the `jx-staging` namespace. Confirm the pods
    in the `jx-staging` and `jx-production` namespaces. The second namespace shouldn''t
    return anything until we promote our application to production:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的pod当前正在`jx-staging`命名空间中运行。确认`jx-staging`和`jx-production`命名空间中的pod。在将应用程序推广到生产之前，第二个命名空间不应返回任何内容：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Promoting an application to production
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将应用程序推广到生产
- en: 'Once an application has been deployed in staging, the next step is to promote
    it into the production environment. Let''s perform the following steps to promote
    an application from staging to production:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序在暂存中部署，下一步就是将其推广到生产环境。让我们执行以下步骤，将应用程序从暂存推广到生产：
- en: 'After you''ve confirmed that an application is stable, the next step is to
    promote it into production. Let''s use the following command to push the current
    version from `staging` to `production`:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认应用程序稳定后，下一步是将其推广到生产。让我们使用以下命令将当前版本从`staging`推送到`production`：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For various reasons, mostly environmental limitations, the successful deployment
    of an application into staging doesn''t guarantee successful deployment into production.
    After promoting the application, use the following command to check the progress
    of the production deployment. You need to see a `Succeeded` message after you
    run this command:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出于各种原因，主要是环境限制，成功将应用程序部署到暂存中并不保证成功将其部署到生产中。在推广应用程序后，使用以下命令检查生产部署的进度。运行此命令后，您需要看到`Succeeded`消息：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Our pod has been promoted to the `jx-production` namespace. Confirm that the
    pods are now running in the `jx-production` namespace as well:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的pod已经被提升到`jx-production`命名空间。确认pod现在也在`jx-production`命名空间中运行：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'List the applications. You will get both staging and production links for the
    same application:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出应用程序。您将获得相同应用程序的暂存和生产链接：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating a pipeline using a QuickStart application
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用QuickStart应用程序创建管道
- en: 'If you don''t have a project to import, then you can create a new app from
    QuickStart and import the newly generated code into Git and Jenkins for CI/CD
    by performing the following steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有要导入的项目，则可以从QuickStart创建一个新应用程序，并通过以下步骤将新生成的代码导入Git和Jenkins进行CI/CD：
- en: 'Create a build from a standardized template. This command will show you application
    templates that you can use to create a new application:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从标准化模板创建一个构建。此命令将显示您可以使用的应用程序模板来创建新应用程序：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Select your GitHub username and organization:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的GitHub用户名和组织：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Enter a new repository name. In this recipe, this is `chapter2-jx-tutorial`
    :'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个新的仓库名称。在本示例中，这是`chapter2-jx-tutorial`：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Select the QuickStart example you wish to create. In our recipe, this is `golang-http`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您希望创建的QuickStart示例。在我们的示例中，这是`golang-http`。
- en: 'Specify `Yes` to the following question:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对以下问题指定`是`：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The pipelines will take some time to complete. List the available pipelines
    with the following command:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管道需要一些时间才能完成。使用以下命令列出可用的管道：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The second recipe of this section, *Importing an application as* *a pipeline*,
    showed you how to create a Jenkins pipeline using an existing project.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的第二个示例，*将应用程序导入为管道*，向您展示了如何使用现有项目创建Jenkins管道。
- en: 'In *step 3*, the following happens when you import the application using the
    `jx import` command:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤3*中，当您使用`jx import`命令导入应用程序时，会发生以下情况：
- en: First, the project source is checked out from the repository and a new semantic
    version number is applied. Then, with the help of Skaffold, a command-line tool
    that facilitates continuous development for Kubernetes applications, Git tag v0.0.1
    is created and unit tests are executed (in our example, there were no unit tests).
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，从仓库检出项目源代码并应用新的语义版本号。然后，借助Skaffold，一个便于Kubernetes应用程序持续开发的命令行工具，创建Git标签v0.0.1并执行单元测试（在我们的示例中，没有单元测试）。
- en: 'After the unit tests have been executed, a Docker image is created and pushed
    to the local Container Registry. You can see this process on the following code:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单元测试执行完毕后，将创建一个Docker镜像并推送到本地容器注册表。您可以在以下代码中看到这个过程：
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After the container image has been pushed to the registry, you can find it
    in your Docker Registry:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器镜像推送到注册表后，您可以在Docker注册表中找到它：
- en: '![](assets/ffce0dde-84b6-461c-a1e8-d4ab1d2886ee.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ffce0dde-84b6-461c-a1e8-d4ab1d2886ee.png)'
- en: 'During the Promote to Environments stage, a Helm build will be executed. After
    the charts have been pushed to the local `chartmuseum` repository, you can find
    the Helm chart in the repository:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在推广到环境阶段，将执行Helm构建。在图表被推送到本地的`chartmuseum`仓库后，您可以在仓库中找到Helm图表：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Finally, the staging pipeline runs from the master branch and deploys our pod
    from the Helm repository into the `jx-staging` namespace. Both the staging and
    application pipelines will be completed after this step.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，暂存管道从主分支运行，并将我们的pod从Helm仓库部署到`jx-staging`命名空间。在此步骤之后，暂存和应用程序管道将完成。
- en: Creating a CI/CD pipeline in GitLab
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GitLab中创建一个CI/CD管道
- en: GitLab is a complete DevOps toolchain that's delivered in a single application
    platform. GitLab provides all the necessary tooling you need to manage, plan,
    create, verify, package, release, configure, monitor, and secure your applications.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab是一个完整的DevOps工具链，以单一应用程序平台的形式提供。GitLab提供了您管理、规划、创建、验证、打包、发布、配置、监控和保护应用程序所需的所有必要工具。
- en: In this section, we will focus on the CI/CD pipeline features of GitLab that
    can be consumed as SaaS or self-hosted service. We will import an application
    and create a pipeline in GitLab. You will learn how to create a CI/CD pipeline
    with Auto DevOps and promote an application from staging into production.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将专注于GitLab的CI/CD流水线功能，这些功能可以作为SaaS或自托管服务使用。我们将导入一个应用程序并在GitLab中创建一个流水线。您将学习如何使用Auto
    DevOps创建一个CI/CD流水线，并将一个应用程序从暂存推广到生产环境。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In the following recipe, you will learn how to create a pipeline with Auto DevOps.
    This recipe requires GitLab (self-managed or SaaS) and an account with your preferred
    cloud vendor where you installed your Kubernetes cluster using GitLab.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的步骤中，您将学习如何使用Auto DevOps创建一个流水线。这个步骤需要GitLab（自托管或SaaS）和您在GitLab中安装Kubernetes集群的首选云供应商的帐户。
- en: The Community Edition of GitLab includes the Auto Build, Auto Test, Auto Review
    Apps, Auto Deploy, and Auto Monitoring features. In addition to these features,
    the subscription-based SaaS version of GitLab also provides Auto Code Quality,
    Auto **Static Application Security Testing** (**SAST**), Auto Dependency Scanning,
    Auto License Compliance, Auto Container Scanning, Auto **Dynamic Application Security
    Testing** (**DAST**), and Auto Browser Performance Testing functionalities, depending
    on your subscription plan.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab的社区版包括自动构建、自动测试、自动审阅应用程序、自动部署和自动监控功能。除了这些功能之外，基于订阅的GitLab的SaaS版本还根据您的订阅计划提供自动代码质量、自动静态应用程序安全测试（SAST）、自动依赖扫描、自动许可合规性、自动容器扫描、自动动态应用程序安全测试（DAST）和自动浏览器性能测试功能。
- en: Make sure you have followed the instructions in [Chapter 2](51383d70-c744-4dba-adf3-b6e6e1b8b2a2.xhtml)*,
    Operating Applications on Kubernetes*, in the *Deploying and managing the life
    cycle of GitLab* recipe and deployed a self-hosted GitLab.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经按照[第2章](51383d70-c744-4dba-adf3-b6e6e1b8b2a2.xhtml)*在Kubernetes上操作应用程序*中的说明进行操作，并部署了自托管的GitLab。
- en: If you prefer, you can also use the SaaS offering hosted by GitLab. In that
    case, visit the GitLab website at [https://about.gitlab.com/free-trial/](https://about.gitlab.com/free-trial/)
    and sign in to your account.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，您也可以使用GitLab提供的SaaS服务。在这种情况下，请访问GitLab网站[https://about.gitlab.com/free-trial/](https://about.gitlab.com/free-trial/)并登录您的帐户。
- en: GitLab Auto DevOps supports GKE for creating new Kubernetes clusters, as well
    as existing clusters, on any public or private clouds.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab Auto DevOps支持GKE在任何公共或私有云上创建新的Kubernetes集群，以及现有集群。
- en: How to do it…
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分进一步分为以下子部分，以使这个过程更容易：
- en: Creating a project using templates
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用模板创建项目
- en: Importing an existing project from GitHub
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从GitHub导入现有项目
- en: Enabling Auto DevOps
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用Auto DevOps
- en: Enabling Kubernetes cluster integration
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用Kubernetes集群集成
- en: Creating a pipeline using Auto DevOps
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Auto DevOps创建流水线
- en: Incrementally rolling out applications to production
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逐步将应用程序推向生产环境
- en: Creating a project using templates
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用模板创建项目
- en: 'Most of the actions on GitLab are done on projects. When you start a project
    for the first time, you have a couple of options. You can create a project using
    one of the project templates, import an existing project, or start a blank project.
    In this recipe, you will learn how to create a project using the project templates
    by performing the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab上的大部分操作都是在项目上完成的。当您第一次启动项目时，您有几个选项。您可以使用项目模板之一创建项目，导入现有项目，或者启动一个空白项目。在本教程中，您将学习如何使用项目模板创建项目，具体步骤如下：
- en: Log in to GitLab with a non-root user account.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用非根用户账户登录GitLab。
- en: 'Click the Create a project button on the Welcome to GitLab screen:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在欢迎使用GitLab屏幕上点击“创建项目”按钮：
- en: '![](assets/22f35ad9-7757-4b2a-a0d9-fd8e2c688dfe.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/22f35ad9-7757-4b2a-a0d9-fd8e2c688dfe.png)'
- en: 'Select the Create from template tab and choose one of the code templates listed
    by clicking on the Use template button. For this example, we will use the following
    Pages/GitBook template:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“从模板创建”选项卡，并通过点击“使用模板”按钮选择列出的代码模板之一。在本例中，我们将使用以下Pages/GitBook模板：
- en: '![](assets/4ab95022-7432-4fb8-89b5-2fca72cd5c06.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4ab95022-7432-4fb8-89b5-2fca72cd5c06.png)'
- en: 'GitLab projects can be either Private, Internal, or Public. This project access
    level is determined by the visibility field in the project. Give your new project
    a name and set the Visibility Level to Public:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitLab项目可以是私有的、内部的或公开的。项目访问级别由项目中的可见性字段确定。给您的新项目命名，并将可见性级别设置为公开：
- en: '![](assets/eab5306b-2e63-4ccd-beb2-c2ca425c55cd.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eab5306b-2e63-4ccd-beb2-c2ca425c55cd.png)'
- en: Click on the Create project button.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建项目”按钮。
- en: Now, you will see that the template project has been successfully imported.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将看到模板项目已成功导入。
- en: Importing an existing project from GitHub
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从GitHub导入现有项目
- en: 'It is not always possible to start with clean project templates. Often, you
    will need to create a pipeline for an existing project. Let''s perform the following
    steps to add some existing project source code into a GitLab environment:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 并非总是可以从干净的项目模板开始。通常情况下，您需要为现有项目创建一个流水线。让我们执行以下步骤，将一些现有项目源代码添加到GitLab环境中：
- en: Log in to GitLab with a non-root user account.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用非根用户账户登录GitLab。
- en: 'If you don''t have a project yet, click the Create a project button on the
    Welcome to GitLab screen. If you have created projects before, click the New project
    button in the top right-hand corner of the following view:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有项目，请在欢迎使用GitLab屏幕上点击“创建项目”按钮。如果您之前创建过项目，请在以下视图的右上角点击“新项目”按钮：
- en: '![](assets/9148d352-0200-459a-b211-aed1e27eea19.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9148d352-0200-459a-b211-aed1e27eea19.png)'
- en: 'GitLab can import projects from various Git repositories, including GitHub,
    Bitbucket, Google Code, Fogbugz, Gitea, and GitLab itself. Here, select the Import
    project tab and choose GitHub:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitLab可以从各种Git仓库导入项目，包括GitHub、Bitbucket、Google Code、Fogbugz、Gitea和GitLab本身。在这里，选择“导入项目”选项卡，并选择GitHub：
- en: '![](assets/df895047-8ab3-4daf-96f3-e4d2ffd86b95.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/df895047-8ab3-4daf-96f3-e4d2ffd86b95.png)'
- en: Open [https://github.com/settings/tokens](https://github.com/settings/tokens)
    in a new window and go to your GitHub account.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新窗口中打开[https://github.com/settings/tokens](https://github.com/settings/tokens)，然后转到您的GitHub账户。
- en: Click on Generate new Token on your GitHub account.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的GitHub账户上点击“生成新令牌”。
- en: 'For GitLab to be able to access your GitHub account, an access token needs
    to be created. On the New personal access token page, select the repo scope and
    click on the Generate Token button. This page shows the permissions that you can
    assign with the token:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让GitLab能够访问您的GitHub账户，需要创建一个访问令牌。在新的个人访问令牌页面上，选择repo范围，然后点击“生成令牌”按钮。该页面显示了您可以使用令牌分配的权限：
- en: '![](assets/a54fc842-717e-43a5-8b15-00cd694274a0.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a54fc842-717e-43a5-8b15-00cd694274a0.png)'
- en: 'Copy the new personal access token created on GitHub, paste it into GitLab,
    and click on the List your GitHub repositories button:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制在GitHub上创建的新个人访问令牌，粘贴到GitLab中，并单击“列出您的GitHub存储库”按钮：
- en: '![](assets/8425a2b9-58ad-4ca9-8262-cd54cdd4c0ad.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8425a2b9-58ad-4ca9-8262-cd54cdd4c0ad.png)'
- en: 'GitLab will access and discover projects in your GitHub repository location.
    Import the repository that you want to use with this recipe. In this example,
    we will use the project from the [https://github.com/k8sdevopscookbook/auto-devops-example](https://github.com/k8sdevopscookbook/auto-devops-example)
    repository. This is where all the examples in this book are located:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitLab将访问并发现您的GitHub存储库位置中的项目。导入您想要与此配方一起使用的存储库。在此示例中，我们将使用来自[https://github.com/k8sdevopscookbook/auto-devops-example](https://github.com/k8sdevopscookbook/auto-devops-example)存储库的项目。这是本书中所有示例的位置：
- en: '![](assets/02912d98-1e4d-4011-9306-fb093fc6a5c7.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/02912d98-1e4d-4011-9306-fb093fc6a5c7.png)'
- en: When importing is complete, the status will show Done. Finally, click on the
    Go to project button to see your project in GitLab.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 导入完成后，状态将显示“完成”。最后，单击“转到项目”按钮以在GitLab中查看您的项目。
- en: Enabling Auto DevOps
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用Auto DevOps
- en: 'GitLab''s Auto DevOps functionality provides predefined CI/CD configuration
    that automatically detects, builds, tests, deploys, and monitors your applications.
    Let''s perform the following steps to enable the Auto DevOps option for your existing
    project:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab的Auto DevOps功能提供了预定义的CI/CD配置，可以自动检测、构建、测试、部署和监控您的应用程序。让我们执行以下步骤，为现有项目启用Auto
    DevOps选项：
- en: Log in with your project user account.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的项目用户帐户登录。
- en: 'On the Welcome to GitLab screen, you will see links that will help you get
    started. Here, click the Configure GitLab button to access the configuration options:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在GitLab欢迎屏幕上，您将看到一些链接，可以帮助您入门。在这里，单击“配置GitLab”按钮以访问配置选项：
- en: '![](assets/e7799990-596f-438a-a937-cc1ff550bed8.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e7799990-596f-438a-a937-cc1ff550bed8.png)'
- en: 'Only the project users with Maintainers and Admin permissions have access to
    the project settings. From the Admin Area menu on the left-hand side of the screen,
    select the Settings | CI/CD menu to access the CI/CD options. The following screenshot
    shows where the CI/CD settings are located:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只有具有维护者和管理员权限的项目用户才能访问项目设置。从屏幕左侧的管理区域菜单中，选择设置|CI/CD菜单以访问CI/CD选项。以下屏幕截图显示了CI/CD设置的位置：
- en: '![](assets/62fa3c42-5405-40ea-a5db-079e27789537.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/62fa3c42-5405-40ea-a5db-079e27789537.png)'
- en: 'Under the following Continuous Integration and Deployment page, make sure that
    the Default to Auto DevOps pipeline for all projects checkbox is checked. Optionally,
    enter your base domain if you want to use the Auto Review Apps and Auto Deploy
    features:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下持续集成和部署页面下，确保为所有项目默认使用Auto DevOps流水线的复选框已被选中。如果要使用自动审阅应用程序和自动部署功能，可以选择输入基本域：
- en: '![](assets/63e62143-9824-49b2-af92-8e7000428c0d.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/63e62143-9824-49b2-af92-8e7000428c0d.png)'
- en: Click on the Save changes button.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“保存更改”按钮。
- en: Enabling Kubernetes cluster integration
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用Kubernetes集成
- en: 'GitLab works with or within Kubernetes in multiple ways. Let''s perform the
    following steps and add Kubernetes automation so that we can share the cluster
    across multiple projects:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab与Kubernetes一起工作或在其中以多种方式。让我们执行以下步骤，并添加Kubernetes自动化，以便我们可以在多个项目之间共享集群：
- en: Log in as root user.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以root用户身份登录。
- en: Select a project under the Your Projects page.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“您的项目”页面下选择一个项目。
- en: 'From the project''s Details page, click on the Add Kubernetes cluster button:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目的详细信息页面，单击“添加Kubernetes集群”按钮：
- en: '![](assets/27d3edb2-a583-4a50-b67f-dcd0d887272c.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/27d3edb2-a583-4a50-b67f-dcd0d887272c.png)'
- en: 'You can either Create a new cluster on GKE or Add an existing cluster. Assuming
    that you have created a cluster by following the recipes in [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml)*,
    Building Production-Ready Kubernetes Clusters*, we will add an existing cluster.
    On the view shown in the following screenshot, select the Add existing cluster
    tab:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在GKE上创建一个新的集群，也可以添加一个现有的集群。假设您已经按照[第1章](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml)中的配方创建了一个集群，*构建生产就绪的Kubernetes集群*，我们将添加一个现有的集群。在下面截图中显示的视图上，选择“添加现有集群”选项卡：
- en: '![](assets/ec4b483e-7057-47ef-95d4-a5d74c6d1b7a.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ec4b483e-7057-47ef-95d4-a5d74c6d1b7a.png)'
- en: Enter a Kubernetes cluster name. In our example, this is `AWSCluster`.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入Kubernetes集群名称。在我们的示例中，这是`AWSCluster`。
- en: 'From the command line where your `kubectl` instance has been configured so
    that you can access your existing Kubernetes cluster, use the following command
    to get the API URL:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从已配置`kubectl`实例的命令行中，以便您可以访问现有的Kubernetes集群，使用以下命令获取API URL：
- en: '[PRE18]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For GitLab to be able to access your cluster using APIs, an authentication
    token is required. Kubernetes stores the `default-token` as a secret. To find
    that token, list the secrets on your cluster using the following command:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让GitLab能够使用API访问您的集群，需要一个认证令牌。Kubernetes将`default-token`存储为一个秘密。使用以下命令列出您集群上的秘密来找到该令牌：
- en: '[PRE19]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Use the token name that was returned by the preceding command and get the CA
    certificate:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前一个命令返回的令牌名称并获取CA证书：
- en: '[PRE20]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a GitLab admin called `ServiceAccount` on your cluster:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的集群上创建名为`ServiceAccount`的GitLab管理员：
- en: '[PRE21]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create a GitLab admin called `ClusterRoleBinding` on your cluster:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的集群上创建名为`ClusterRoleBinding`的GitLab管理员：
- en: '[PRE22]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Get the service account token. The following command will return your token
    in the Token section:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取服务账户令牌。以下命令将在“令牌”部分返回您的令牌：
- en: '[PRE23]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Once you''ve copied the token information from the output of *step 11*, click
    on the Add Kubernetes cluster button on the same window. You should see something
    similar to the following view, which is where we add our cluster into GitLab:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您从*步骤11*的输出中复制了令牌信息，请在同一窗口上点击“添加Kubernetes集群”按钮。您应该看到类似以下视图的东西，这是我们将集群添加到GitLab的地方：
- en: '![](assets/9fbb26e9-aa9f-41d8-84f4-d4a926a140ca.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9fbb26e9-aa9f-41d8-84f4-d4a926a140ca.png)'
- en: Next, enter your Base domain name. In our example, we use the `k8s.containerized.me`
    subdomain as our hosted zone, which we created in [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml),
    *Building Production-Ready Kubernetes Clusters*, in the *Provisioning a Kubernetes
    cluster on Amazon EC2* recipe.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，输入您的基础域名。在我们的示例中，我们使用`k8s.containerized.me`子域作为我们托管区域，我们在[第1章](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml)中创建了*构建生产就绪的Kubernetes集群*中的*在Amazon
    EC2上配置Kubernetes集群*配方。
- en: 'Click on the Install button next to Helm Tiller. This option will deploy the
    Helm server into your cluster:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击Helm Tiller旁边的“安装”按钮。此选项将在您的集群中部署Helm服务器：
- en: '![](assets/6b5f39d4-7ca6-45cb-a1fb-4fab2602ae3c.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6b5f39d4-7ca6-45cb-a1fb-4fab2602ae3c.png)'
- en: Once Helm has been installed, install Ingress, Cert-Manager, Prometheus, and
    GitLab Runner by clicking the Install buttons next to those options.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Helm后，通过单击这些选项旁边的“安装”按钮来安装Ingress、Cert-Manager、Prometheus和GitLab Runner。
- en: 'All GitLab managed applications are installed under the `gitlab-managed-apps`
    namespace. Validate that they are in the `Running` state on your Kubernetes cluster.
    You should see a list of pods similar to the following:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有GitLab管理的应用都安装在`gitlab-managed-apps`命名空间下。验证它们在您的Kubernetes集群上处于`Running`状态。您应该看到类似以下的Pod列表：
- en: '[PRE24]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Creating a pipeline using Auto DevOps
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Auto DevOps创建流水线
- en: 'Once it''s enabled, Auto DevOps simplifies the setup and execution of the software
    development life cycle. Let''s perform the following steps to take advantage of
    Auto DevOps and create our first automated pipeline:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 启用Auto DevOps后，它简化了软件开发生命周期的设置和执行。让我们执行以下步骤来利用Auto DevOps并创建我们的第一个自动化流水线：
- en: If you have more than one project, you need to select the target project where
    you would like to run your pipeline. First, select your project in the Your Projects
    page.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您有多个项目，您需要选择目标项目，您想要在其中运行您的流水线。首先，在“您的项目”页面中选择您的项目。
- en: 'Click on Pipelines under the CI/CD menu. This option will take you to the page
    where existing pipelines can be viewed. On this page, click on the Run Pipeline
    button. This option will help us manually run the pipeline:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CI/CD菜单下点击流水线。此选项将带您到可以查看现有流水线的页面。在此页面上，单击“运行流水线”按钮。此选项将帮助我们手动运行流水线：
- en: '![](assets/fb5bd1cf-27f7-45ca-8ef3-7465687394b3.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fb5bd1cf-27f7-45ca-8ef3-7465687394b3.png)'
- en: 'Here, you have the option to run the pipeline on different branches. For this
    example, select the master branch to run the pipeline on. In the following screenshot,
    you see the pipeline stages being completed:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，您可以选择在不同分支上运行流水线的选项。在本例中，选择主分支来运行流水线。在下面的截图中，您可以看到流水线阶段已完成：
- en: '![](assets/2ee16e18-c286-4d58-a0a6-dcb825fa518c.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2ee16e18-c286-4d58-a0a6-dcb825fa518c.png)'
- en: When the pipeline is complete, you will see the results for every job that was
    executed and your application should be accessible at `http://application_name.your_domain.com`.
    In our case, this address is `http://murat-auto-devops.k8s.containerized.me`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当流水线完成时，您将看到已执行的每个作业的结果，并且您的应用程序应该可以在`http://application_name.your_domain.com`访问。在我们的案例中，这个地址是`http://murat-auto-devops.k8s.containerized.me`。
- en: Incrementally rolling out applications to production
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逐步将应用程序部署到生产环境
- en: 'By default, Auto DevOps uses a Continuous Deployment to production strategy.
    If you would like to change that setting to perform incremental rollouts, perform
    the following steps:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Auto DevOps使用连续部署到生产策略。如果您想将该设置更改为执行增量部署，请执行以下步骤：
- en: Select your project in the Your Projects page.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“您的项目”页面中选择您的项目。
- en: Click on CI/CD in the Settings menu.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置菜单中点击CI/CD。
- en: Expand the Auto DevOps section by clicking on the Expand button.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击“展开”按钮展开Auto DevOps部分。
- en: 'Change the Deployment strategy to Automatic deployment to staging, manual deployment
    to production and click on the Save changes button. You will see the other Auto
    DevOps options as well:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将部署策略更改为自动部署到暂存，手动部署到生产，并单击“保存更改”按钮。您还将看到其他Auto DevOps选项：
- en: '![](assets/213ead72-96d4-49af-aa4c-25bdce9ae166.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/213ead72-96d4-49af-aa4c-25bdce9ae166.png)'
- en: Click on Pipelines under the CI/CD menu. Click on the Run Pipeline button to
    manually run the pipeline.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CI/CD菜单下点击流水线。单击“运行流水线”按钮手动运行流水线。
- en: When the staging job is complete, the pipeline will be paused. You will see
    the results for every job that has been executed and your application should be
    accessible at `http://application-name-staging.your_domain.com`. In our case,
    this address is `http://murat-auto-devops-staging.k8s.containerized.me`
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当暂存作业完成时，流水线将被暂停。您将看到已执行的每个作业的结果，并且您的应用程序应该可以在`http://application-name-staging.your_domain.com`访问。在我们的案例中，这个地址是`http://murat-auto-devops-staging.k8s.containerized.me`
- en: Now, click on Environments in the Operations menu.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在运维菜单下点击“环境”。
- en: 'Once your application is in the staging environment, you can gradually move
    it into production. To be able to do that while in the staging environment, click
    on the Deploy to button (the one that looks like a play button) and choose a percentage
    to roll out to, as shown in the following view. In the dropdown menu, you will
    see options for 10%, 25%, 50%, and 100%:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您的应用程序处于暂存环境中，您可以逐渐将其移入生产环境。在暂存环境中，单击“部署到”按钮（看起来像播放按钮的那个）并选择要推出的百分比，如下视图所示。在下拉菜单中，您将看到10%、25%、50%和100%的选项：
- en: '![](assets/4658f06c-9173-4724-8812-6131666c6928.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4658f06c-9173-4724-8812-6131666c6928.png)'
- en: How it works...
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The preceding recipe, *Creating a pipeline using Auto DevOps*, showed you how
    to take advantage of the functionality of Auto DevOps to simplify the creation
    of pipelines.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的教程*使用Auto DevOps创建流水线*向您展示了如何利用Auto DevOps的功能来简化流水线的创建。
- en: In *step 2*, after you run the pipeline, GitLab Auto DevOps saves you time and
    effort from creating the stages and jobs manually when no `.gitlab-ci.yml` files
    are found in the project. This file is created by GitLab and provides CI/CD configuration
    for all the projects that don't have one.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，运行流水线后，当项目中找不到`.gitlab-ci.yml`文件时，GitLab Auto DevOps会为您节省时间和精力，因为它会自动创建阶段和作业。这个文件由GitLab创建，为所有没有该文件的项目提供CI/CD配置。
- en: If you like to use the `.gitlab-ci.yaml` file instead, disable Auto DevOps and
    use the Set up CI/CD button on your project to create your GitLab CI/CD YAML file
    from a template. Follow the link regarding the *Creating a simple* *.gitlab-ci.yaml*
    *file* instructions in the *See also* section to learn more about creating the
    YAML file.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢使用`.gitlab-ci.yaml`文件，可以禁用Auto DevOps，并在项目上使用“设置CI/CD”按钮来从模板创建您的GitLab
    CI/CD YAML文件。请参阅*创建一个简单的*.gitlab-ci.yaml*文件*部分中的链接，以了解更多关于创建YAML文件的信息。
- en: During *step 3*, Auto DevOps uses Herokuish Buildpacks, a tool for emulating
    Heroku build and runtime tasks in containers. By using Herokuish, GitLab detects
    the language your project is written in and automatically creates the pipeline.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤3*中，Auto DevOps使用Herokuish Buildpacks，这是一个在容器中模拟Heroku构建和运行任务的工具。通过使用Herokuish，GitLab可以检测项目所使用的语言，并自动创建流水线。
- en: There's more...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You will also benefit from learning about the following:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 您还将受益于了解以下内容：
- en: GitLab Web IDE
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab Web IDE
- en: Monitoring environments
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控环境
- en: GitLab Web IDE
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitLab Web IDE
- en: 'GitLab is not just a CI/CD solution, it has many other functionalities and
    provides you with a private code repository similar to GitHub. You can use GitLab
    Web IDE to edit and commit your changes and push them to production. To edit your
    code without cloning to your own machine, perform the following steps:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab不仅是一个CI/CD解决方案，它还具有许多其他功能，并为您提供类似GitHub的私人代码存储库。您可以使用GitLab Web IDE来编辑和提交更改，并将其推送到生产环境。要在不克隆到自己的机器上编辑代码，请执行以下步骤：
- en: Select your project on the Your Projects page.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“您的项目”页面上选择您的项目。
- en: Click on the Web IDE button.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击Web IDE按钮。
- en: Select a file from the repository to edit.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从存储库中选择一个文件进行编辑。
- en: 'Edit the file and once done, click on the Commit... button, as shown in the
    following screenshot:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑文件，完成后，单击“提交...”按钮，如下截图所示：
- en: '![](assets/b20131eb-5202-4630-a137-9fef992bf525.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b20131eb-5202-4630-a137-9fef992bf525.png)'
- en: 'Create a commit message and click on the Stage & Commit button, as shown in
    the following screenshot:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建提交消息，然后单击“暂存并提交”按钮，如下截图所示：
- en: '![](assets/95a2c828-d495-48ff-8045-58f24f44e3d3.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/95a2c828-d495-48ff-8045-58f24f44e3d3.png)'
- en: Your commit will trigger a new pipeline. As a result, GitLab will build, test,
    and stage your changes.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您的提交将触发新的流水线。因此，GitLab将构建、测试和部署您的更改。
- en: Monitoring environments
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监控环境
- en: 'Using GitLab, you can monitor Kubernetes cluster resource usage and application
    response metrics. If you haven''t enabled Prometheus on your Kubernetes cluster,
    follow the instructions in the *Enabling Kubernetes cluster integration* recipe
    and then perform the following steps:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GitLab，您可以监控Kubernetes集群资源使用情况和应用程序响应指标。如果您还没有在Kubernetes集群上启用Prometheus，请按照*启用Kubernetes集群集成*的说明进行操作，然后执行以下步骤：
- en: Select your project on the Your Projects page.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Your Projects页面上选择您的项目。
- en: Click on Metrics in the Operations menu.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在操作菜单中点击Metrics。
- en: 'Select the Production environment from the drop-down menu. On the dropdown
    menu, you will have production and staging environments:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择Production环境。在下拉菜单上，您将有生产和暂存环境：
- en: '![](assets/c3f01d5e-d5b5-4002-8f08-33306fbc3518.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c3f01d5e-d5b5-4002-8f08-33306fbc3518.png)'
- en: 'GitLab will show a page similar to the following with the last 8 hours of your
    application performance data and Kubernetes resource utilization metrics. In this
    view, you will be able to see the historical average and total CPU and memory
    utilization of the applications:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitLab将显示一个类似以下内容的页面，其中包含您的应用程序性能数据和Kubernetes资源利用率指标的最近8小时。在这个视图中，您将能够看到应用程序的历史平均CPU和内存利用率以及总利用率：
- en: '![](assets/433a735d-2073-4e60-8100-4b18de8adf82.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/433a735d-2073-4e60-8100-4b18de8adf82.png)'
- en: Now, you know how to create projects on GitLab and use Auto DevOps functionality
    to automate the creation of CI/CD pipelines.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您知道如何在GitLab上创建项目，并使用Auto DevOps功能来自动创建CI/CD流水线。
- en: See also
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'If you would like to learn more about GitLab, the Quick Start Guide by Adam
    O''Grady is a great resource: [https://www.packtpub.com/virtualization-and-cloud/gitlab-quick-start-guide](https://www.packtpub.com/virtualization-and-cloud/gitlab-quick-start-guide)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于GitLab的信息，Adam O'Grady的《快速入门指南》是一个很好的资源：[https://www.packtpub.com/virtualization-and-cloud/gitlab-quick-start-guide](https://www.packtpub.com/virtualization-and-cloud/gitlab-quick-start-guide)
- en: 'GitLab Training Tracks: [https://about.gitlab.com/training/](https://about.gitlab.com/training/)'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab培训课程：[https://about.gitlab.com/training/](https://about.gitlab.com/training/)
- en: 'GitLab Git cheat sheet: [https://about.gitlab.com/images/press/git-cheat-sheet.pdf](https://about.gitlab.com/images/press/git-cheat-sheet.pdf)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab Git速查表：[https://about.gitlab.com/images/press/git-cheat-sheet.pdf](https://about.gitlab.com/images/press/git-cheat-sheet.pdf)
- en: 'Learning GitLab: [https://www.packtpub.com/application-development/learning-gitlab-video](https://www.packtpub.com/application-development/learning-gitlab-video)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习GitLab：[https://www.packtpub.com/application-development/learning-gitlab-video](https://www.packtpub.com/application-development/learning-gitlab-video)
- en: 'Hands-On Auto DevOps with the GitLab CI: [https://github.com/PacktPublishing/Hands-On-Auto-DevOps-with-GitLab-CI](https://github.com/PacktPublishing/Hands-On-Auto-DevOps-with-GitLab-CI)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GitLab CI进行Auto DevOps实践：[https://github.com/PacktPublishing/Hands-On-Auto-DevOps-with-GitLab-CI](https://github.com/PacktPublishing/Hands-On-Auto-DevOps-with-GitLab-CI)
- en: 'Creating a simple `.gitlab-ci.yaml` file: [https://docs.gitlab.com/ee/ci/quick_start/#creating-a-simple-gitlab-ciyml-file](https://docs.gitlab.com/ee/ci/quick_start/#creating-a-simple-gitlab-ciyml-file)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个简单的`.gitlab-ci.yaml`文件：[https://docs.gitlab.com/ee/ci/quick_start/#creating-a-simple-gitlab-ciyml-file](https://docs.gitlab.com/ee/ci/quick_start/#creating-a-simple-gitlab-ciyml-file)
- en: Creating a CI/CD pipeline in CircleCI
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在CircleCI中创建CI/CD流水线
- en: In this section, we will cover the initial configuration and requirements to
    deploy and manage Kubernetes services using CircleCI. You will learn how to create
    a pipeline so that you can build container images and store them in a Container
    Registry.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍使用CircleCI部署和管理Kubernetes服务的初始配置和要求。您将学习如何创建一个流水线，以便构建容器镜像并将其存储在容器注册表中。
- en: Getting ready
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires an active GitHub account with a project to build. We will
    use AWS EKS to demonstrate CI with CircleCI.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程需要一个活跃的GitHub账户和一个要构建的项目。我们将使用AWS EKS来演示与CircleCI的CI。
- en: 'First, visit the following GitHub page of our demo application project and
    fork your copy to your GitHub account:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，访问我们的演示应用程序项目的以下GitHub页面，并将其复制到您的GitHub帐户中：
- en: '[PRE25]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Clone the `k8sdevopscookbook/circleci-demo-aws-eks` repository to your workstation
    in order to use the `circleci-demo-aws-eks` example at [https://github.com/k8sdevopscookbook/circleci-demo-aws-eks](https://github.com/k8sdevopscookbook/circleci-demo-aws-eks).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆`k8sdevopscookbook/circleci-demo-aws-eks`存储库到您的工作站，以便在[https://github.com/k8sdevopscookbook/circleci-demo-aws-eks](https://github.com/k8sdevopscookbook/circleci-demo-aws-eks)上使用`circleci-demo-aws-eks`示例。
- en: How to do it...
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 该部分进一步分为以下子部分，以使该过程更容易：
- en: Getting started with CircleCI
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用CircleCI
- en: Deploying changes to a Kubernetes cluster on Amazon EKS
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将更改部署到Amazon EKS上的Kubernetes集群
- en: Getting started with CircleCI
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开始使用CircleCI
- en: 'Circle CI is a continuous integration platform that automatically runs your
    build in a clean container or virtual machine, allowing the code stored on your
    repository to be directly tested for every commit. CircleCI can be used in the
    cloud as a SaaS solution or installed as a self-hosted solution on your environment.
    Let''s perform the following steps to get started using the cloud version of CircleCI:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Circle CI是一个持续集成平台，可以在干净的容器或虚拟机中自动运行您的构建，从而可以直接测试存储在您的存储库中的代码以进行每次提交。 CircleCI可以作为SaaS解决方案在云中使用，也可以作为自托管解决方案安装在您的环境中。让我们执行以下步骤来开始使用CircleCI的云版本：
- en: Sign up for CircleCI using your GitHub account by going to [https://circleci.com/signup/](https://circleci.com/signup/).
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的GitHub帐户在[https://circleci.com/signup/](https://circleci.com/signup/)注册CircleCI。
- en: 'After you''ve signed up, click on the ADD PROJECTS button on the left-hand
    side of the Dashboard view:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册后，在仪表板视图的左侧点击“添加项目”按钮：
- en: '![](assets/220ef634-823b-4dc8-9808-a8ae01cdfc8b.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/220ef634-823b-4dc8-9808-a8ae01cdfc8b.png)'
- en: From the upper-left drop-down menu, select the GitHub account where you want
    to build your projects.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左上角的下拉菜单中，选择要构建项目的GitHub帐户。
- en: Deploying changes to a Kubernetes cluster on EKS
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将更改部署到EKS上的Kubernetes集群
- en: 'In this recipe, we will use Amazon EKS. Let''s perform the following steps
    to get started:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用Amazon EKS。让我们执行以下步骤来开始：
- en: Create a new AWS IAM user specifically for CircleCI and take note of your new
    user's access key ID and secret access key.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为CircleCI创建一个新的AWS IAM用户，并注意您的新用户的访问密钥ID和秘密访问密钥。
- en: Create a repository named `eks_orb_demo_app` on the AWS Elastic Container Registry
    ECR. Take note of your ECR URL. It should look similar to `1234567890.dkr.ecr.us-east-2.amazonaws.com`.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWS弹性容器注册表ECR上创建名为`eks_orb_demo_app`的存储库。注意您的ECR URL。它应该类似于`1234567890.dkr.ecr.us-east-2.amazonaws.com`。
- en: 'Make sure you are signed in to Circle CI. Click on the Add Projects button,
    search for the `demo-aws` keyword, and click on the Set Up Project button next
    to it:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已登录Circle CI。点击“添加项目”按钮，搜索“demo-aws”关键字，然后点击其旁边的“设置项目”按钮：
- en: '![](assets/2b28d5e0-dc29-41e8-ad8e-d6ca958557b9.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2b28d5e0-dc29-41e8-ad8e-d6ca958557b9.png)'
- en: Click on build. The build will fail since it is missing the environment variables
    to access your AWS account.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击构建。构建将失败，因为缺少访问您的AWS帐户的环境变量。
- en: 'Click on Project Settings. Go to the Environmental Variables page under Build
    Settings. Create the following four variables by clicking the Add Variable button:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击项目设置。转到“构建设置”下的“环境变量”页面。通过单击“添加变量”按钮创建以下四个变量：
- en: '[PRE26]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output of this can be seen in the following screenshot:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出可以在以下截图中看到：
- en: '![](assets/0dbbb56f-6391-42a5-aac8-1b1854926ae6.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0dbbb56f-6391-42a5-aac8-1b1854926ae6.png)'
- en: Setting environmental variables will allow your pipeline to access AWS resources.
    After the cloud variables have been defined, click on the Build button to start
    the build.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置环境变量将允许您的流水线访问AWS资源。在定义了云变量之后，点击“构建”按钮开始构建。
- en: The build may fail if your AWS user does not have the required permissions;
    otherwise, this should be completed successfully in 35-40 mins.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的AWS用户没有所需的权限，构建可能会失败；否则，这应该在35-40分钟内成功完成。
- en: How it works...
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe showed you how to quickly create a CI/CD pipeline using a demo application
    running on a Kubernetes cluster.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程向您展示了如何快速创建一个在Kubernetes集群上运行的演示应用程序的CI/CD流水线。
- en: In *s**tep 2* of the *Deploying changes to a Kubernetes cluster on EKS* recipe,
    we created a repository on AWS ECR to push our container images that were built
    by CircleCI. After a successful build, the images will be saved and accessible
    through the private registry location.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中的*在EKS上部署Kubernetes集群的更改*教程中，我们在AWS ECR上创建了一个存储库，用于推送由CircleCI构建的容器映像。构建成功后，这些映像将被保存并可以通过私有注册表位置访问。
- en: 'In *step 6*, when we run the pipeline, CircleCI will execute six jobs in order.
    The first job (`build-and-push-image`) will bring up a VM, check out our code,
    install any prerequisites, and build the image from the code. The second job (`aws-eks/create-cluster`)
    will create an EKS cluster using the CloudFormation stack and verify the cluster.
    The third job (`deploy-application`) will roll out the application. The fourth
    job (`test-application`) will get the external IP of the service using the `kubectl
    get service demoapp` command and connect to the service to validate the return.
    The service will return a page similar to the following:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤6*中，当我们运行流水线时，CircleCI将按顺序执行六个作业。第一个作业（`build-and-push-image`）将启动一个虚拟机，检出我们的代码，安装任何先决条件，并从代码构建镜像。第二个作业（`aws-eks/create-cluster`）将使用CloudFormation堆栈创建一个EKS集群，并验证该集群。第三个作业（`deploy-application`）将部署应用程序。第四个作业（`test-application`）将使用`kubectl
    get service demoapp`命令获取服务的外部IP，并连接到服务以验证返回。服务将返回一个类似于以下内容的页面：
- en: '[PRE27]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Finally, the fifth (`undeploy-application`) and sixth (`aws-eks/delete-cluster`)
    jobs will remove the application and use CloudFormation again to destroy the EKS
    cluster, respectively.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第五个（`undeploy-application`）和第六个（`aws-eks/delete-cluster`）作业将分别删除应用程序并再次使用CloudFormation销毁EKS集群。
- en: With that, you've learned how to easily build your application using predefined
    container environments that have been deployed on CircleCI.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，您已经学会了如何使用在CircleCI上部署的预定义容器环境轻松构建您的应用程序。
- en: See also
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Circle CI documentation: [https://circleci.com/docs/](https://circleci.com/docs/)'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Circle CI文档：[https://circleci.com/docs/](https://circleci.com/docs/)
- en: 'Circle CI Hello World examples: [https://circleci.com/docs/2.0/hello-world/](https://circleci.com/docs/2.0/hello-world/)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Circle CI Hello World示例：[https://circleci.com/docs/2.0/hello-world/](https://circleci.com/docs/2.0/hello-world/)
- en: 'Circle CI AWS EKS demo application: [https://github.com/k8sdevopscookbook/circleci-demo-aws-eks](https://github.com/k8sdevopscookbook/circleci-demo-aws-eks)'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Circle CI AWS EKS演示应用程序：[https://github.com/k8sdevopscookbook/circleci-demo-aws-eks](https://github.com/k8sdevopscookbook/circleci-demo-aws-eks)
- en: 'Circle CI GCP demo application: [https://github.com/k8sdevopscookbook/circleci-demo-k8s-gcp-hello-app](https://github.com/k8sdevopscookbook/circleci-demo-k8s-gcp-hello-app)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Circle CI GCP演示应用程序：[https://github.com/k8sdevopscookbook/circleci-demo-k8s-gcp-hello-app](https://github.com/k8sdevopscookbook/circleci-demo-k8s-gcp-hello-app)
- en: Setting up a CI/CD pipeline using GitHub Actions
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GitHub Actions设置CI/CD流水线
- en: GitHub Actions enable you to create custom software development workflows directly
    in your GitHub repository. If you are already using GitHub as your code repository,
    built-in CI/CD capabilities make this option very compelling.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions使您能够直接在GitHub存储库中创建自定义软件开发工作流程。如果您已经将GitHub作为您的代码存储库，内置的CI/CD功能使这个选项非常具有吸引力。
- en: In this section, we will cover the GitHub Actions workflow configuration and
    built-in CI/CD capabilities. You will learn how to manage workflows and create
    new GitHub Actions.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍GitHub Actions工作流配置和内置的CI/CD功能。您将学习如何管理工作流程并创建新的GitHub Actions。
- en: Getting ready
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In the following recipe, you will learn how to create a basic action example
    in a repository you own by adding a Dockerfile. This recipe requires an active
    GitHub account with a project to build. We will use AWS EKS to demonstrate CI
    with GitHub.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，您将学习如何通过添加Dockerfile在您拥有的存储库中创建一个基本的操作示例。此示例需要一个活跃的GitHub帐户和一个要构建的项目。我们将使用AWS
    EKS来演示与GitHub的CI。
- en: How to do it...
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...：
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分进一步分为以下子部分，以使此过程更加简单：
- en: Creating a workflow file
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建工作流文件
- en: Creating a basic Docker build workflow
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建基本的Docker构建工作流程
- en: Building and publishing images to Docker Registry
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建并将镜像发布到Docker Registry
- en: Adding a workflow status badge
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加工作流状态徽章
- en: Creating a workflow file
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个工作流文件
- en: 'GitHub flow is a lightweight branch that was recently introduced by GitHub.
    Let''s perform the following steps to create our first workflow:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub flow是GitHub最近推出的一个轻量级分支。让我们执行以下步骤来创建我们的第一个工作流程：
- en: Sign in to your GitHub account at [https://github.com/](https://github.com/).
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到[https://github.com/](https://github.com/)的GitHub帐户。
- en: Select a repository where you have maintainer access. In our example, we are
    using the fork of the `k8sdevopscookbook/python-flask-docker` project.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个您拥有维护者访问权限的存储库。在我们的示例中，我们正在使用`k8sdevopscookbook/python-flask-docker`项目的分支。
- en: 'Create a `ci.yml` file in the `.github/workflows` directory with the following
    content:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`.github/workflows`目录中创建一个`ci.yml`文件，内容如下：
- en: '[PRE28]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add the following lines to install any dependencies:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下行以安装任何依赖项：
- en: '[PRE29]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'When using computer programming languages, lint tools are used to perform static
    analysis of source code to check for semantic discrepancies. In our example, we
    will use `flake8` to lint our Python code using the following command:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用计算机编程语言时，会使用lint工具对源代码进行静态分析，以检查语义差异。在我们的示例中，我们将使用`flake8`来使用以下命令对我们的Python代码进行lint：
- en: '[PRE30]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'If you have unit tests, add the following lines to test your application with
    `pytest`, a framework that''s used in Python programming to write small tests:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您有单元测试，请添加以下行来使用`pytest`测试您的应用程序，`pytest`是Python编程中用于编写小型测试的框架：
- en: '[PRE31]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'After the configuration is complete, send a pull request to your repository
    to trigger the pipeline:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置完成后，向存储库发送拉取请求以触发流水线：
- en: '![](assets/0810e8f2-2648-4674-8d22-a728945e0938.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0810e8f2-2648-4674-8d22-a728945e0938.png)'
- en: After the pipeline is complete, you will be able to see a green checkmark on
    your **Pull Request** (**PR**). In the preceding screenshot, you can see that
    all the checks have passed and that the pull request was successful.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线完成后，您将能够在**拉取请求**（**PR**）上看到一个绿色的复选标记。在上面的屏幕截图中，您可以看到所有检查都已通过，并且拉取请求成功。
- en: Creating a basic Docker build workflow
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建基本的Docker构建工作流程
- en: 'Let''s perform the following steps to automate the Docker image build directly
    from our GitHub repository:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤，直接从我们的GitHub存储库自动化Docker镜像构建：
- en: Sign in to your GitHub account.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的GitHub帐户。
- en: Select a repository where you have maintainer access. In our example, we are
    using the fork of the `k8sdevopscookbook/python-flask-docker` project.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个你有维护者访问权限的存储库。在我们的示例中，我们正在使用`k8sdevopscookbook/python-flask-docker`项目的分支。
- en: Click the Actionstab.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“Actions”选项卡。
- en: From here, click on Add a new workflow.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，点击“添加新的工作流程”。
- en: 'Create a `dockerimage.yml` file under the `.github/workflows` directory with
    the following content:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`.github/workflows`目录下创建一个`dockerimage.yml`文件，内容如下：
- en: '[PRE32]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The workflow will create a new Docker image every time new code is pushed to
    the repository.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 每次将新代码推送到存储库时，工作流都会创建一个新的Docker图像。
- en: Building and publishing images to Docker Registry
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建并发布图像到Docker Registry
- en: 'Instead of creating multiple actions to build, tag, login, and push to Docker
    Repository, you can use one action to achieve all at once. Let''s perform the
    following steps:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用一个操作一次性完成构建、标记、登录和推送到Docker存储库，而不是创建多个操作。让我们执行以下步骤：
- en: Sign in to your GitHub account.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的GitHub帐户。
- en: Select a repository where you have maintainer access. In our example, we are
    using the fork of the `k8sdevopscookbook/python-flask-docker` project.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个你有维护者访问权限的存储库。在我们的示例中，我们正在使用`k8sdevopscookbook/python-flask-docker`项目的分支。
- en: Click the Actionstab.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“Actions”选项卡。
- en: From here, click on Add a new workflow.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里，点击“添加新的工作流程”。
- en: 'Create a `dockerpush.yml` file under the `.github/workflows` directory with
    the following content. Make sure to change `MyDockerRepo/repository` so that it
    uses the name of the image you would like to push:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`.github/workflows`目录下创建一个`dockerpush.yml`文件，内容如下。确保更改`MyDockerRepo/repository`，以便使用您想要推送的图像的名称：
- en: '[PRE33]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Click on the Settings tab and go to the Secrets menu.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“Settings”选项卡，转到“Secrets”菜单。
- en: Create a `DOCKER_USERNAME` secret with the value equals to the username you
    used to log in to your Docker Registry.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`DOCKER_USERNAME`秘密，其值等于您用于登录到Docker Registry的用户名。
- en: 'Create `DOCKER_PASSWORD` secrets with a value equals to the password you used
    to log in to your Docker Registry. After both secrets have been created, you should
    be able to see them in the Secrets menu, as shown in the following screenshot:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`DOCKER_PASSWORD`秘密，其值等于您用于登录到Docker Registry的密码。创建了这两个秘密后，您应该能够在“Secrets”菜单中看到它们，如下截图所示：
- en: '![](assets/be592aef-a334-4db1-95bc-16feff6b480b.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/be592aef-a334-4db1-95bc-16feff6b480b.png)'
- en: Environmental variables stored as secrets will be encrypted and are only available
    for selected actions.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 作为秘密存储的环境变量将被加密，并且仅对选定的操作可用。
- en: Adding a workflow status badge
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加工作流状态徽章
- en: 'Many good source code repositories on GitHub use badges on their main page
    to display the status of various tests that have been completed on the repositories.
    Similarly, in this recipe, we will add an action status summary to our repository
    to inform our visitors and users about the current workflow status:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 许多在GitHub上的优秀源代码存储库在其主页上使用徽章来显示已在存储库上完成的各种测试的状态。同样，在这个教程中，我们将向我们的存储库添加一个操作状态摘要，以通知我们的访问者和用户当前的工作流状态：
- en: Sign in to your GitHub account and select a repository where you have maintainer
    access. In our example, we are using the fork of the `k8sdevopscookbook/python-flask-docker`
    project.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的GitHub帐户，并选择一个您有维护者访问权限的存储库。在我们的示例中，我们正在使用`k8sdevopscookbook/python-flask-docker`项目的分支。
- en: Edit the `README.md` file in the top directory of your repository.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑存储库顶级目录中的`README.md`文件。
- en: 'Add the link to the badge by following the format `https://github.com/{owner}/{repo}/workflows/{workflow_name}/badge.svg`,
    as shown in the following example:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下示例中显示的格式`https://github.com/{owner}/{repo}/workflows/{workflow_name}/badge.svg`添加徽章的链接：
- en: '[PRE34]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: See also
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: GitHub Actions for interacting with Docker: [https://github.com/docker-actions](https://github.com/docker-actions)
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Docker交互的GitHub操作：[https://github.com/docker-actions](https://github.com/docker-actions)
- en: GitHub Actions for AWS: [https://github.com/aws-actions](https://github.com/aws-actions)
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS的GitHub操作：[https://github.com/aws-actions](https://github.com/aws-actions)
- en: 'GitHub Actions for Azure: [https://github.com/Azure/k8s-actions](https://github.com/Azure/k8s-actions)'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure的GitHub操作：[https://github.com/Azure/k8s-actions](https://github.com/Azure/k8s-actions)
- en: GitHub Actions for GCP: [https://github.com/GoogleCloudPlatform/github-actions](https://github.com/GoogleCloudPlatform/github-actions)
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub GCP的操作：[https://github.com/GoogleCloudPlatform/github-actions](https://github.com/GoogleCloudPlatform/github-actions)
- en: Setting up a CI/CD pipeline on Amazon Web Services
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在亚马逊网络服务上设置CI/CD流水线
- en: In this section, we will cover the CI/CD pipeline construction workflow on AWS
    and built-in CI/CD capabilities. You will learn how to manage pipelines, how to
    run build commands during the pipeline steps, and how to store build result images
    on the Amazon **Elastic Container Registry** (**ECR**).
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍AWS上的CI/CD流水线构建工作流程和内置的CI/CD功能。您将学习如何管理流水线，如何在流水线步骤中运行构建命令，以及如何将构建结果图像存储在Amazon弹性容器注册表（ECR）上。
- en: Getting ready
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In the following recipe, you will learn how to build, test, and deploy an example
    service based on AWS services. All the operations mentioned here require an AWS
    account and an AWS user with a policy that has permission to use the related services,
    have HTTPS Git credentials for CodeCommit assigned, and a Kubernetes cluster deployed
    using AWS EKS. If you don't have one, go to [https://aws.amazon.com/account/](https://aws.amazon.com/account/)
    and create one.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下食谱中，您将学习如何基于AWS服务构建、测试和部署示例服务。这里提到的所有操作都需要一个AWS账户和一个具有使用相关服务权限的AWS用户策略，分配了CodeCommit的HTTPS
    Git凭据，并使用AWS EKS部署了Kubernetes集群。如果您没有，请访问[https://aws.amazon.com/account/](https://aws.amazon.com/account/)并创建一个。
- en: How to do it...
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 本节进一步分为以下子节，以使此过程更容易：
- en: Creating an AWS CodeCommit code repository
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建AWS CodeCommit代码存储库
- en: Building projects with AWS CodeBuild
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AWS CodeBuild构建项目
- en: Creating an AWS CodeDeploy deployment
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建AWS CodeDeploy部署
- en: Creating a pipeline with AWS CodePipeline
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AWS CodePipeline创建流水线
- en: Creating an AWS CodeCommit code repository
  id: totrans-342
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建AWS CodeCommit代码存储库
- en: 'The AWS CodeCommit service is a managed source control service that hosts secure
    Git-based repositories on the AWS platform. In this recipe, we will learn how
    to create our first repository on CodeCommit:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CodeCommit服务是一个托管的源代码控制服务，它在AWS平台上托管安全的基于Git的存储库。在这个食谱中，我们将学习如何在CodeCommit上创建我们的第一个存储库：
- en: Sign in to your AWS account and open AWS Developer Tools at [https://us-west-2.console.aws.amazon.com/codesuite](https://us-west-2.console.aws.amazon.com/codesuite).
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的AWS账户，并在[https://us-west-2.console.aws.amazon.com/codesuite](https://us-west-2.console.aws.amazon.com/codesuite)上打开AWS开发人员工具。
- en: 'From the Developer Tools menu, expand the Source menu and click on Repositories.
    You can see the complete menu content in the following screenshot:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从开发人员工具菜单中，展开“源”菜单，然后单击“存储库”。您可以在以下截图中看到完整的菜单内容：
- en: '![](assets/9fae4253-3496-4711-a6cf-78311a0c4bd4.png)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9fae4253-3496-4711-a6cf-78311a0c4bd4.png)'
- en: On the Repositories page, click on the Create repository button to start your
    code repository on CodeCommit.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在存储库页面，单击“创建存储库”按钮，以在CodeCommit上启动您的代码存储库。
- en: 'Enter a Repository name and click on the Create button. In this example, the
    repository name is `k8sdevopscookbook`:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入存储库名称，然后单击“创建”按钮。在本示例中，存储库名称为`k8sdevopscookbook`：
- en: '![](assets/271a39b0-baa2-4542-aba5-41762c9de778.png)'
  id: totrans-349
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/271a39b0-baa2-4542-aba5-41762c9de778.png)'
- en: From the AWS Management Console, go to the IAM service.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从AWS管理控制台，转到IAM服务。
- en: From the list of existing users, select an IAM user that you would like to use.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从现有用户列表中，选择一个您想要使用的IAM用户。
- en: 'On the user summary page, click on the Security credentials tab. The following
    screenshot shows the location of the tab:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在用户摘要页面上，点击安全凭据选项卡。以下截图显示了选项卡的位置：
- en: '![](assets/b31e3807-08f6-4af9-8cba-f00c0dd82a0b.png)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b31e3807-08f6-4af9-8cba-f00c0dd82a0b.png)'
- en: 'Under HTTPS Git credentials for AWS CodeCommit, click on the Generate button.
    This will create a username and password that we will use for authentication later:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWS CodeCommit的HTTPS Git凭据下，点击生成按钮。这将创建一个我们稍后用于身份验证的用户名和密码：
- en: '![](assets/073cf86f-a4ec-430a-9fd7-79a385d52e27.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/073cf86f-a4ec-430a-9fd7-79a385d52e27.png)'
- en: 'On the Git credentials generated window, click on the Download credentials
    button to record your CodeCommit credentials. The following screenshot shows the
    username and password that was created for me. This is the only chance you will
    get to view or copy your credentials:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生成的Git凭据窗口中，点击下载凭据按钮以记录您的CodeCommit凭据。以下截图显示了为我创建的用户名和密码。这是您查看或复制凭据的唯一机会：
- en: '![](assets/8c830744-3a91-46f1-adcb-3d35aa0a696e.png)'
  id: totrans-357
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8c830744-3a91-46f1-adcb-3d35aa0a696e.png)'
- en: From the AWS Management Console, go to the CodeCommit service.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从AWS管理控制台，转到CodeCommit服务。
- en: Under the Clone URL column, select HTTPS. In this recipe, our example repository
    is located at [https://git-codecommit.us-west-2.amazonaws.com/v1/repos/k8sdevopscookbook](https://git-codecommit.us-west-2.amazonaws.com/v1/repos/k8sdevopscookbook).
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在克隆URL列下，选择HTTPS。在本教程中，我们的示例存储库位于[https://git-codecommit.us-west-2.amazonaws.com/v1/repos/k8sdevopscookbook](https://git-codecommit.us-west-2.amazonaws.com/v1/repos/k8sdevopscookbook)。
- en: 'On your Linux workstation, clone the empty repository:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Linux工作站上，克隆空的存储库：
- en: '[PRE35]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Clone the repository using your CodeCommit credentials.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的CodeCommit凭据克隆存储库。
- en: 'Download our example application and extract it:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载我们的示例应用程序并解压缩：
- en: '[PRE36]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Now, copy the example application to your clone of the repository:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将示例应用程序复制到您的存储库克隆中：
- en: '[PRE37]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Stage all your files. The following command will find all the new and updated
    files on the project directory and add them to the staging area before it is pushed
    to the target repository:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有文件进行分阶段。以下命令将在项目目录中找到所有新的和更新的文件，并将它们添加到暂存区，然后将其推送到目标存储库之前：
- en: '[PRE38]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Commit the files with a message. The following command, when used with the
    `-m` parameter, adds the commit:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用消息提交文件。以下命令在使用`-m`参数时添加提交：
- en: '[PRE39]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Push the files from your local repository folder to your CodeCommit repository:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件从本地存储库文件夹推送到CodeCommit存储库：
- en: '[PRE40]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Now, you will be able to view files in your CodeCommit repository.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将能够查看CodeCommit存储库中的文件。
- en: Building projects with AWS CodeBuild
  id: totrans-374
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用AWS CodeBuild构建项目
- en: 'Let''s perform the following steps to build a project from the CodeCommit repository
    that we created in the previous recipe:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤，从前面的教程中创建的CodeCommit存储库构建项目：
- en: Sign in to your AWS account and open AWS Developer Tools at [https://us-west-2.console.aws.amazon.com/codesuite](https://us-west-2.console.aws.amazon.com/codesuite).
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的AWS账户并打开AWS开发者工具[https://us-west-2.console.aws.amazon.com/codesuite](https://us-west-2.console.aws.amazon.com/codesuite)。
- en: 'From the Developer Tools menu, expand the Build menu and click on Build Projects.
    The following screenshot shows the menu''s location:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从开发者工具菜单中，展开构建菜单并点击构建项目。以下截图显示了菜单的位置：
- en: '![](assets/21b521d3-d7b2-4901-9a62-92656a5d44b0.png)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/21b521d3-d7b2-4901-9a62-92656a5d44b0.png)'
- en: 'On the Build projects page, click on the Create build project button. The following
    screenshot shows the other available menu options and the location of the Create
    build project button:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建项目页面上，点击创建构建项目按钮。以下截图显示了其他可用菜单选项和创建构建项目按钮的位置：
- en: '![](assets/4771692c-ef47-4219-b8a2-ff4d132d5526.png)'
  id: totrans-380
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4771692c-ef47-4219-b8a2-ff4d132d5526.png)'
- en: Enter a project name.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入项目名称。
- en: 'Now, we will set the primary source of the project. In the Source box, select
    AWS CodeCommit as a source provider. Select the repository you created in the
    *Creating an AWS CodeCommit code repository* recipe. Select the master branch.
    In our example, the repository''s name is `k8sdevopscookbook`:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将设置项目的主要来源。在源框中，选择AWS CodeCommit作为源提供程序。选择您在*创建AWS CodeCommit代码存储库*中创建的存储库。选择主分支。在我们的示例中，存储库的名称是`k8sdevopscookbook`：
- en: '![](assets/97080e65-b5d3-4a31-87e9-d1b77b832578.png)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/97080e65-b5d3-4a31-87e9-d1b77b832578.png)'
- en: In the Environment box, select Managed image and Ubuntu as your OS.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在环境框中，选择托管映像和Ubuntu作为您的操作系统。
- en: 'Select New service role:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择新服务角色：
- en: '![](assets/12b6a212-36bd-4299-94db-7cf731616d0d.png)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/12b6a212-36bd-4299-94db-7cf731616d0d.png)'
- en: 'Expand the additional configuration settings. Add the `AWS_DEFAULT_REGION`,
    `AWS_ACCOUNT_ID`, `IMAGE_TAG`, and `IMAGE_REPO_NAME` environment variables, as
    shown in the following screenshot:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开附加配置设置。添加`AWS_DEFAULT_REGION`、`AWS_ACCOUNT_ID`、`IMAGE_TAG`和`IMAGE_REPO_NAME`环境变量，如下截图所示：
- en: '![](assets/8bfa7308-3c60-4afb-996d-ffe56f0aadd8.png)'
  id: totrans-388
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8bfa7308-3c60-4afb-996d-ffe56f0aadd8.png)'
- en: Never store environmental variables in a repository location. Always use environmental
    parameters to provide the values during the build process.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要将环境变量存储在存储库位置。在构建过程中始终使用环境参数来提供值。
- en: 'In the Buildspec box, select Use a buildspec file. Make sure the `buildspec.yaml`
    file exists in the root of your code repository. This file should look something
    like this:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Buildspec框中，选择使用buildspec文件。确保`buildspec.yaml`文件存在于代码存储库的根目录中。此文件应该看起来像这样：
- en: '[PRE41]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Finally, click on Create build project.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，单击创建构建项目。
- en: 'Find the Service Role you created in *step 7* in **Identity and Access Management**
    (**IAM**) and add this statement to the policy attached to the CodeBuild service
    role:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**身份和访问管理**（IAM）中找到您在*步骤7*中创建的服务角色，并将此语句添加到附加到CodeBuild服务角色的策略中：
- en: '[PRE42]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now that the project is ready, click on the Start build button on the upper
    right-hand corner of the page. In the following screenshot, you can view its status
    under the Build history tab, after it''s been started. In our example, it shows
    that the build Succeeded:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在项目准备就绪，单击页面右上角的开始构建按钮。在下图中，您可以在启动后的构建历史选项卡下查看其状态。在我们的示例中，它显示构建成功：
- en: '![](assets/e9ab7445-b080-47cf-a627-60478cfd5a41.png)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e9ab7445-b080-47cf-a627-60478cfd5a41.png)'
- en: If your builds fail, make sure that the `AmazonEC2ContainerRegistryPowerUser`
    policy is assigned to your IAM role.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的构建失败，请确保`AmazonEC2ContainerRegistryPowerUser`策略已分配给您的IAM角色。
- en: Creating an AWS CodeDeploy deployment
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建AWS CodeDeploy部署
- en: 'Let''s perform the following steps to create a deployment from the CodeBuild
    builds:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来从CodeBuild构建创建部署：
- en: Sign in to your AWS account and open the AWS Developer Tools at [https://us-west-2.console.aws.amazon.com/codesuite](https://us-west-2.console.aws.amazon.com/codesuite).
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的AWS帐户，并在[https://us-west-2.console.aws.amazon.com/codesuite](https://us-west-2.console.aws.amazon.com/codesuite)上打开AWS开发人员工具。
- en: From the Developer Tools menu, expand the Deploy menu and click on Applications.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从开发者工具菜单中，展开部署菜单，然后单击应用程序。
- en: 'Click on the Create application button:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击创建应用程序按钮：
- en: '![](assets/5ed43060-aef1-43f2-bd99-84e3406cc5c4.png)'
  id: totrans-403
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5ed43060-aef1-43f2-bd99-84e3406cc5c4.png)'
- en: Enter an application name.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入应用程序名称。
- en: Choose AWS Lambda as a compute platform.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择AWS Lambda作为计算平台。
- en: Building a pipeline with AWS CodePipeline
  id: totrans-406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用AWS CodePipeline构建流水线
- en: 'Finally, we have reached the last stage of AWS Developer Tools. Let''s perform
    the following steps to build a pipeline using the AWS CodePipeline service:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们已经到达了AWS开发人员工具的最后阶段。让我们执行以下步骤，使用AWS CodePipeline服务构建管道：
- en: Sign in to your AWS account and open the AWS Developer Tools at [https://us-west-2.console.aws.amazon.com/codesuite](https://us-west-2.console.aws.amazon.com/codesuite).
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的AWS帐户，并在[https://us-west-2.console.aws.amazon.com/codesuite](https://us-west-2.console.aws.amazon.com/codesuite)中打开AWS开发人员工具。
- en: From the Developer Tools menu, expand the Pipeline menu and click on Pipelines.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从开发人员工具菜单中，展开“管道”菜单，然后单击“管道”。
- en: Enter a pipeline name.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入管道名称。
- en: Select New service role and click on Next.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“新服务角色”，然后单击“下一步”。
- en: 'Now, we will set the primary source of the pipeline. Select AWS CodeCommit
    as a source provider. Select the repository you created in the *Creating an AWS
    CodeCommit code repository* recipe. Click on the Next button to confirm these
    changes. The following screenshot shows that, in our example, the source is `k8sdevopscookbook`:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将设置管道的主要来源。选择AWS CodeCommit作为源提供程序。选择您在“创建AWS CodeCommit代码存储库”配方中创建的存储库。单击“下一步”以确认这些更改。以下屏幕截图显示，在我们的示例中，源是“k8sdevopscookbook”：
- en: '![](assets/03852d6f-bc48-4512-bcf2-f18b9ddbc92b.png)'
  id: totrans-413
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/03852d6f-bc48-4512-bcf2-f18b9ddbc92b.png)
- en: 'Select AWS CodeBuild as the Build provider. Select the project name you created
    in the *Building projects with AWS CodeBuild* recipe (or create a new project).
    Click on Next to confirm these changes. The following screenshot shows that, in
    our example, the region is `US West` and that the project name is DevOpsCookbookExample:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择AWS CodeBuild作为构建提供程序。选择您在“使用AWS CodeBuild构建项目”配方中创建的项目名称（或创建一个新项目）。单击“下一步”以确认这些更改。以下屏幕截图显示，在我们的示例中，区域是“美国西部”，项目名称是DevOpsCookbookExample：
- en: '![](assets/b678c7f3-fab8-466c-8e17-a19e2bbb58b7.png)'
  id: totrans-415
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/b678c7f3-fab8-466c-8e17-a19e2bbb58b7.png)
- en: Click on Skip deploy stage. As a deployment alternative, you can invoke a Lambda
    function to call the CloudFormation template and deploy a Kubernetes cluster.
    You can find the AWS CodeSuite example that shows how to do this in the *See also*
    section.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“跳过部署阶段”。作为部署替代方案，您可以调用一个Lambda函数来调用CloudFormation模板并部署Kubernetes集群。您可以在“另请参阅”部分中找到显示如何执行此操作的AWS
    CodeSuite示例。
- en: Click on Create Pipeline.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“创建管道”。
- en: 'When the pipeline has been executed, you will see a build similar to the following:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当管道执行完毕时，您将看到类似以下的构建：
- en: '![](assets/77496350-5504-451a-aa6a-1f7c9af63562.png)'
  id: totrans-419
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/77496350-5504-451a-aa6a-1f7c9af63562.png)
- en: With that, you have successfully built a pipeline using the AWS CodePipeline
    service.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，您已成功使用AWS CodePipeline服务构建了一个管道。
- en: How it works...
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe showed you how to quickly create a pipeline using AWS Developer
    Tools.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方向您展示了如何快速使用AWS开发人员工具创建管道。
- en: In the *Building a pipeline with AWS CodePipeline* recipe, after you create
    the pipeline, AWS CodePipeline watches for changes in AWS CodeCommit. When a new
    PR is merged into the master branch stored in your CodeCommit repository, CodePipeline
    automatically detects the changes to the branch and triggers the pipeline.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 在“使用AWS CodePipeline构建管道”配方中，在创建管道之后，AWS CodePipeline会监视AWS CodeCommit中的更改。当新的PR合并到存储在您的CodeCommit存储库中的主分支时，CodePipeline会自动检测到分支的更改并触发管道。
- en: During the build job, CodeBuild packages the code and any dependencies described
    in the Docker file into a Docker image. This Docker image is pushed to the Amazon
    ECR container registry you specified during the recipe.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建作业期间，CodeBuild将代码和Docker文件中描述的任何依赖项打包到Docker镜像中。此Docker镜像将推送到您在配方中指定的Amazon
    ECR容器注册表中。
- en: This pipeline is also fully extensible. In fact, you have the option to also
    invoke a serverless function through AWS Lambda to either create a Kubernetes
    cluster or deploy the code on an existing Kubernetes cluster so that you can test
    it. You can find additional examples at the AWS Blog link provided in the *See
    also* section.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 该管道也是完全可扩展的。实际上，您还可以选择通过AWS Lambda调用无服务器函数，以创建Kubernetes集群或在现有Kubernetes集群上部署代码，以便进行测试。您可以在*另请参阅*部分提供的AWS博客链接中找到其他示例。
- en: See also
  id: totrans-426
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'AWS CodeCommit documentation: [https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html)'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CodeCommit文档：[https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html)
- en: 'AWS CodeBuild documentation: [https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html](https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html)'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CodeBuild文档：[https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html](https://docs.aws.amazon.com/codebuild/latest/userguide/welcome.html)
- en: 'AWS CodeDeploy documentation: [https://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html](https://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html)'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CodeDeploy文档：[https://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html](https://docs.aws.amazon.com/codedeploy/latest/userguide/welcome.html)
- en: 'AWS CodePipeline documentation: [https://docs.aws.amazon.com/codepipeline/latest/userguide/welcome.html](https://docs.aws.amazon.com/codepipeline/latest/userguide/welcome.html)'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CodePipeline文档：[https://docs.aws.amazon.com/codepipeline/latest/userguide/welcome.html](https://docs.aws.amazon.com/codepipeline/latest/userguide/welcome.html)
- en: 'AWS Blog on Continuous Deployment to Kubernetes using AWS Developer Tools:
    [https://aws.amazon.com/blogs/devops/continuous-deployment-to-kubernetes-using-aws-codepipeline-aws-codecommit-aws-codebuild-amazon-ecr-and-aws-lambda/](https://aws.amazon.com/blogs/devops/continuous-deployment-to-kubernetes-using-aws-codepipeline-aws-codecommit-aws-codebuild-amazon-ecr-and-aws-lambda/)'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS开发者工具在Kubernetes上的持续部署博客：[https://aws.amazon.com/blogs/devops/continuous-deployment-to-kubernetes-using-aws-codepipeline-aws-codecommit-aws-codebuild-amazon-ecr-and-aws-lambda/](https://aws.amazon.com/blogs/devops/continuous-deployment-to-kubernetes-using-aws-codepipeline-aws-codecommit-aws-codebuild-amazon-ecr-and-aws-lambda/)
- en: 'CodeSuite – Continuous Deployment Reference Architecture for Kubernetes: [https://github.com/aws-samples/aws-kube-codesuite](https://github.com/aws-samples/aws-kube-codesuite)'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CodeSuite - Kubernetes的持续部署参考架构：[https://github.com/aws-samples/aws-kube-codesuite](https://github.com/aws-samples/aws-kube-codesuite)
- en: 'A similar example of a Lambda function for EKS deployment: [https://github.com/muratkars/lambda-eks](https://github.com/muratkars/lambda-eks)'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于EKS部署的Lambda函数的类似示例：[https://github.com/muratkars/lambda-eks](https://github.com/muratkars/lambda-eks)
- en: Setting up a CI/CD pipeline with Spinnaker on Google Cloud Build
  id: totrans-434
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Google Cloud Build上使用Spinnaker设置CI/CD管道
- en: Google Cloud Build is a managed CI/CD and deployment platform that lets you
    build, test, and deploy in the cloud. In this section, we will cover the CI/CD
    pipeline with Google Cloud Build configuration using Spinnaker capabilities, an
    open source, multi-cloud continuous delivery platform.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud Build是一个托管的CI/CD和部署平台，可让您在云中构建，测试和部署。在本节中，我们将介绍使用Spinnaker功能的Google
    Cloud Build配置的CI/CD管道，Spinnaker是一个开源的多云持续交付平台。
- en: Getting ready
  id: totrans-436
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation to use the
    manifest files under the `chapter3` directory:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 将`k8sdevopscookbook/src`存储库克隆到您的工作站，以使用`chapter3`目录下的清单文件：
- en: '[PRE43]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Make sure you have the necessary credentials to use GCP services and have access
    to the current project. If you don't have one already, go to [https://console.cloud.google.com](https://console.cloud.google.com)
    and create an account.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您有使用GCP服务的必要凭据，并且可以访问当前项目。如果您还没有，请转到[https://console.cloud.google.com](https://console.cloud.google.com)并创建一个帐户。
- en: How to do it...
  id: totrans-440
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 本节进一步分为以下子节，以使这个过程更容易：
- en: Installing and configuring the Spin CLI
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置Spin CLI
- en: Configuring a service account for the CI/CD
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为CI/CD配置服务账户
- en: Configuring events to trigger the pipeline
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置事件以触发流水线
- en: Installing Spinnaker using Helm
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Helm安装Spinnaker
- en: Creating a Google Cloud Source code repository
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Google Cloud源代码仓库
- en: Building projects with Google Cloud Build
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Google Cloud Build构建项目
- en: Configuring a Spinnaker pipeline
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Spinnaker流水线
- en: Rolling out an application to production
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序部署到生产环境
- en: Installing and configuring the Spin CLI
  id: totrans-450
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装和配置Spin CLI
- en: 'The operations mentioned in the following recipes require the `spin` CLI, `gcloud`,
    and a GCP account with a project that has billing enabled. We will enable related
    APIs using the `gcloud` CLI:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配方中提到的操作需要`spin` CLI、`gcloud`和启用计费的GCP项目的账户。我们将使用`gcloud` CLI来启用相关的API：
- en: 'Run the following command to download the `gcloud` CLI. If you have the `gcloud`
    CLI installed and a project already, skip to *step 4*:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令下载`gcloud` CLI。如果您已经安装了`gcloud` CLI并且已经有一个项目，请跳到*步骤4*：
- en: '[PRE44]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Initialize the SDK and follow the instructions given:'
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化SDK并按照给定的说明进行操作：
- en: '[PRE45]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Select a project that you have permissions for or create a new one.
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您有权限的项目或创建一个新项目。
- en: 'Enable the Kubernetes Engine API, the Cloud Build API, and the Cloud Source
    Repositories API for the project:'
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为项目启用Kubernetes Engine API、Cloud Build API和Cloud Source Repositories API：
- en: '[PRE46]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Download and install the `spin` CLI:'
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装`spin` CLI：
- en: '[PRE47]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Now you have GCP services enabled and the `spin` CLI installed.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经启用了GCP服务并安装了`spin` CLI。
- en: Configuring a service account for the CI/CD
  id: totrans-462
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为CI/CD配置服务账户
- en: 'To use CI/CD services on Google Cloud, your user needs to have the right permissions
    assigned to them. Let''s perform the following steps to configure a service account
    for the CI/CD:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Google Cloud上使用CI/CD服务，您的用户需要被分配正确的权限。让我们执行以下步骤来为CI/CD配置服务账户：
- en: Follow the instructions in the *Provisioning a managed Kubernetes cluster on
    the GKE* recipe of [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml), *Building
    Production-Ready Kubernetes Clusters*, to deploy a GKE cluster. If you already
    have one, skip to *step 2* to create a service account that will be used by the
    pipeline later*:*
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照[第1章](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml)中*在GKE上配置托管的Kubernetes集群*配方中的说明，部署一个GKE集群。如果您已经有一个，请跳到*步骤2*创建一个稍后流水线将使用的服务账户*：*
- en: '[PRE48]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Replace the following `devopscookbook` in both places with your project name
    and add storage admin role binding to your service account:'
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在两个地方用您的项目名称替换以下的`devopscookbook`，并将存储管理员角色绑定到您的服务账户：
- en: '[PRE49]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Store your `cicd-account` key:'
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 存储您的`cicd-account`密钥：
- en: '[PRE50]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: With that, you have assigned the permissions to your service account.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，您已经为您的服务账户分配了权限。
- en: Configuring events to trigger a pipeline
  id: totrans-471
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置事件以触发流水线
- en: 'Google Pub/Sub is a cloud service best described as a managed version of Kafka
    or Rabbit MQ. We will use Google Pub/Sub to deliver notifications when a change
    is detected in our container registry. Let''s perform the following steps:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: Google Pub/Sub是一个云服务，最好描述为Kafka或Rabbit MQ的托管版本。我们将使用Google Pub/Sub在容器注册表中检测到变化时发送通知。让我们执行以下步骤：
- en: 'Use the following `gcloud` command to create a Cloud Pub/Sub topic:'
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下`gcloud`命令创建Cloud Pub/Sub主题：
- en: '[PRE51]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Create a `pubsub` subscription. The following command should return a `Created
    subscription` message, similar to the following:'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`pubsub`订阅。以下命令应返回一个类似于`Created subscription`的消息：
- en: '[PRE52]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Replace the following `devopscookbook` in both places with your project name
    and add permission to your CI/CD service account, that is, `cicd-account`:'
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在两个地方用您的项目名称替换以下的`devopscookbook`，并为您的CI/CD服务帐户`cicd-account`添加权限：
- en: '[PRE53]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: With that, you've learned how to configure events to trigger a pipeline.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，您已经学会了如何配置事件来触发管道。
- en: Deploying Spinnaker using Helm
  id: totrans-480
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Helm部署Spinnaker
- en: 'Let''s perform the following steps to deploy the Spinnaker tool using Helm
    charts:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤，使用Helm图表部署Spinnaker工具：
- en: 'Verify that `helm` is installed and initialized on your GKE cluster. If not,
    follow the instructions in [Chapter 2](51383d70-c744-4dba-adf3-b6e6e1b8b2a2.xhtml),
    *Operating Applications on Kubernetes*, in the *Deploying workloads using Helm
    charts* recipe to install Helm. The following command will return the client and
    server of Helm if it''s installed on your cluster:'
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`helm`是否已安装并在您的GKE集群上初始化。如果没有，请按照[第2章](51383d70-c744-4dba-adf3-b6e6e1b8b2a2.xhtml)中的说明，在*使用Helm图表部署工作负载*中安装Helm。如果在您的集群上安装了Helm，以下命令将返回Helm的客户端和服务器：
- en: '[PRE54]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Create `clusterrolebinding` for the `ci-admin` service account:'
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`ci-admin`服务帐户创建`clusterrolebinding`：
- en: '[PRE55]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Create a pipeline configuration bucket using the following command. Make sure
    to replace the `devopscookbook-ci-config` bucket name with a unique name. This
    will create an object storage bucket on Google Cloud Storage:'
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个管道配置存储桶。确保用唯一名称替换`devopscookbook-ci-config`存储桶名称。这将在Google Cloud存储上创建一个对象存储桶：
- en: '[PRE56]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Create a variable with the content of the `cicd-account` key:'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含`cicd-account`密钥内容的变量：
- en: '[PRE57]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Edit the `spinnaker-config.yaml` file in the `cd /src/chapter3/gcp` directory
    and replace the following bucket name with the bucket name you used in *step 3*:'
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`cd /src/chapter3/gcp`目录中的`spinnaker-config.yaml`文件，并用您在*步骤3*中使用的存储桶名称替换以下存储桶名称：
- en: '[PRE58]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Deploy Spinnaker on your Kubernetes cluster using the custom `spinnaker-config.yaml`
    file from *step 5*:'
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用自定义的`spinnaker-config.yaml`文件在*K步骤5*上部署Spinnaker到您的Kubernetes集群：
- en: '[PRE59]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Create port forwarding tunnels to access the Spinnaker UI:'
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建端口转发隧道以访问Spinnaker UI：
- en: '[PRE60]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: To be able to access the Spinnaker UI, we created port forwarding tunnels for
    our workstation. We could also create a cloud LoadBalancer to open ports to the
    internet, but port forwarding is safer.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够访问Spinnaker UI，我们为我们的工作站创建了端口转发隧道。我们也可以创建一个云负载均衡器来向互联网开放端口，但端口转发更安全。
- en: Creating a Google Cloud Source code repository
  id: totrans-497
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建Google Cloud源代码存储库
- en: 'Let''s perform the following steps to create a code repository on the Google
    Cloud Source Code service:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤，在Google Cloud源代码服务上创建一个代码存储库：
- en: 'Download our example application and extract it:'
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载我们的示例应用并提取它：
- en: '[PRE61]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'After the example code has been extracted, change directories to our source
    code directory:'
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取示例代码后，切换到我们的源代码目录：
- en: '[PRE62]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Make the initial commit to your repository using the following commands:'
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令对您的存储库进行初始提交：
- en: '[PRE63]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Create a Google Cloud Code repository named `sample-app`:'
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`sample-app`的Google Cloud代码存储库：
- en: '[PRE64]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Set `credential.helper` for the Google Cloud repository:'
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为Google Cloud存储库设置`credential.helper`：
- en: '[PRE65]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Replace `devopscookbook` with your project name. Add your new repository as
    `remote` and push your code:'
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用您的项目名称替换`devopscookbook`。将您的新存储库添加为`remote`并推送您的代码：
- en: '[PRE66]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Now, you will be able to view the files in your Google Cloud Source Code repository
    in the `sample-app` repository, as shown in the following screenshot:'
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将能够在Google Cloud源代码存储库中查看`sample-app`存储库中的文件，如下面的屏幕截图所示：
- en: '![](assets/dff17c2c-462c-4c90-851b-d3ed4ffac50e.png)'
  id: totrans-512
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dff17c2c-462c-4c90-851b-d3ed4ffac50e.png)'
- en: With that, you've learned how to create a code repository on Google Cloud Source.
    In the next recipe, we will use the Cloud Source repository location to build
    our project.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，您已经学会了如何在Google Cloud Source上创建代码存储库。在下一个步骤中，我们将使用Cloud Source存储库位置来构建我们的项目。
- en: Building projects with Google Cloud Build
  id: totrans-514
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Google Cloud Build构建项目
- en: 'Let''s perform the following steps to build the project from the Cloud Source
    repository that we created in the previous recipe:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤，从我们在上一个步骤中创建的Cloud Source存储库构建项目：
- en: 'Here, we are going to use the Cloud Build product to build our project. First,
    log in to your GCP account. From the main Products menu, click on Cloud Build.
    As shown in the following screenshot, it is located under TOOLS:'
  id: totrans-516
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们将使用Cloud Build产品来构建我们的项目。首先，登录到您的GCP帐户。从主产品菜单中，点击Cloud Build。如下截图所示，它位于TOOLS下：
- en: '![](assets/5841046d-5c6c-43f6-89be-7a7ca707ed48.png)'
  id: totrans-517
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5841046d-5c6c-43f6-89be-7a7ca707ed48.png)'
- en: 'In the Cloud Build menu, choose Triggers and click on the Create trigger button,
    as shown in the following screenshot:'
  id: totrans-518
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Cloud Build菜单中，选择“触发器”，然后点击“创建触发器”按钮，如下截图所示：
- en: '![](assets/98ab79e8-0aab-4955-b309-3eb7845924fe.png)'
  id: totrans-519
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/98ab79e8-0aab-4955-b309-3eb7845924fe.png)'
- en: 'Our code is in a Cloud Source repository, so select Cloud Source Repository
    and click on the Continue button. As you can see, the other options are Bitbucket
    and GitHub:'
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的代码在Cloud Source存储库中，所以选择Cloud Source存储库，然后点击“继续”按钮。如您所见，其他选项是Bitbucket和GitHub：
- en: '![](assets/e5599274-fde6-4d8f-8400-8fcaa4a4fcee.png)'
  id: totrans-521
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e5599274-fde6-4d8f-8400-8fcaa4a4fcee.png)'
- en: 'The repositories on your account will be detected automatically. Select the
    sample-app repository and click on the Continue button:'
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的帐户上的存储库将被自动检测到。选择sample-app存储库，然后点击“继续”按钮：
- en: '![](assets/103ed3ee-1202-4fac-b7f5-80b8464cff1b.png)'
  id: totrans-523
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/103ed3ee-1202-4fac-b7f5-80b8464cff1b.png)'
- en: 'Set the following settings and leave the others unchanged:'
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置以下设置，其他保持不变：
- en: '[PRE67]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Click on the Create trigger button.
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建触发器”按钮。
- en: 'Switch back to the command line where `kubectl` has been configured to access
    your Kubernetes cluster and create a bucket. Replace the `devopscookbook-kubernetes-manifests`
    bucket name with a unique bucket name before you create it:'
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回已配置为访问您的Kubernetes集群的`kubectl`命令行，并创建一个存储桶。在创建之前，请将`devopscookbook-kubernetes-manifests`存储桶名称更改为唯一的存储桶名称：
- en: '[PRE68]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Enable bucket versioning on the bucket you created in *step 6*. This following
    command will enable versioning on Cloud Storage and let the bucket keep old versions
    of objects:'
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在*步骤6*中创建的存储桶上启用存储桶版本控制。以下命令将在Cloud Storage上启用版本控制，并让存储桶保留对象的旧版本：
- en: '[PRE69]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'If you are not already in the source code folder, change directories to our
    source code:'
  id: totrans-531
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有在源代码文件夹中，切换到我们的源代码目录：
- en: '[PRE70]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Change the project ID in our Kubernetes deployment manifest files to your project:'
  id: totrans-533
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的Kubernetes部署清单文件中的项目ID更改为您的项目：
- en: '[PRE71]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Commit the changes with a meaningful commit message similar to the following:'
  id: totrans-535
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交更改，并使用类似以下的有意义的提交消息：
- en: '[PRE72]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Create a Git tag for the release and push the tag:'
  id: totrans-537
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为发布创建一个Git标签，并推送该标签：
- en: '[PRE73]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Switch back to the browser and click on History from the Cloud Code menu and
    confirm that the build has been triggered and successful:'
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回浏览器，点击Cloud Code菜单中的“历史”，确认构建已被触发并成功：
- en: '![](assets/2bb183cc-5340-4d4a-9607-caf97bcb73b3.png)'
  id: totrans-540
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2bb183cc-5340-4d4a-9607-caf97bcb73b3.png)'
- en: With that, you've learned how to build a project using Google Cloud Build.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，您已经学会了如何使用Google Cloud Build构建项目。
- en: Configuring a Spinnaker pipeline
  id: totrans-542
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置Spinnaker管道
- en: 'Let''s perform the following steps to upload your configuration to Spinnaker:'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤，将您的配置上传到Spinnaker：
- en: 'Replace the following email in the `owner-email` section with yours and create
    the provided application in Spinnaker using the following command:'
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`owner-email`部分用您的电子邮件替换以下电子邮件，并使用以下命令在Spinnaker中创建所提供的应用程序：
- en: '[PRE74]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Upload the example pipeline to Spinnaker:'
  id: totrans-546
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将示例流水线上传到Spinnaker：
- en: '[PRE75]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The preceding command will export the configuration into a file called `pipeline.json`
    and upload it to Spinnaker.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将配置导出到名为`pipeline.json`的文件中，并将其上传到Spinnaker。
- en: Rolling out an application to production
  id: totrans-549
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将应用程序部署到生产环境
- en: 'Once an application has been deployed to staging, the next step is to promote
    it into the production environment. Let''s perform the following steps to promote
    an application from staging to production on Spinnaker:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序部署到了暂存环境，下一步就是将其推广到生产环境。让我们执行以下步骤，将应用程序从暂存推广到Spinnaker上的生产环境：
- en: 'On the Spinnaker UI, select the `sample` application that we created in the
    *Configuring a Spinnaker pipeline* recipe:'
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spinnaker UI中，选择我们在*配置Spinnaker流水线*中创建的`sample`应用程序：
- en: '![](assets/d29888dd-c11b-4dfc-95ef-a86a60db443c.png)'
  id: totrans-552
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d29888dd-c11b-4dfc-95ef-a86a60db443c.png)'
- en: 'Click on the PIPELINES tab shown in the following screenshot:'
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击以下截图中显示的PIPELINES选项卡：
- en: '![](assets/ba2ae567-5703-449e-b53d-4bc8e649db4b.png)'
  id: totrans-554
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ba2ae567-5703-449e-b53d-4bc8e649db4b.png)'
- en: 'Hover your mouse over the orange box and click on the Continue button. As shown
    in the following screenshot, the green boxes represent completed parts of the
    pipeline, while the orange box shows where the pipeline has been paused:'
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标悬停在橙色框上，然后单击“继续”按钮。如下截图所示，绿色框表示流水线的已完成部分，而橙色框表示流水线暂停的位置：
- en: '![](assets/4a8de161-ecf9-44d4-9b1e-1784561fd2e1.png)'
  id: totrans-556
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4a8de161-ecf9-44d4-9b1e-1784561fd2e1.png)'
- en: 'Select LOAD BALANCERS under the INFRASTRUCTURE menu. The following screenshot
    shows the INFRASTRUCTURE menu:'
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在INFRASTRUCTURE菜单下选择LOAD BALANCERS。以下截图显示了INFRASTRUCTURE菜单：
- en: '![](assets/78cac1a3-e86f-4613-a862-3aadf18123de.png)'
  id: totrans-558
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/78cac1a3-e86f-4613-a862-3aadf18123de.png)'
- en: 'Click on the DEFAULT button under the service sample-frontend-production load
    balancer:'
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击服务sample-frontend-production负载均衡器下的DEFAULT按钮：
- en: '![](assets/0cf5bda7-9bfe-4442-bfd6-9b642bfac74f.png)'
  id: totrans-560
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0cf5bda7-9bfe-4442-bfd6-9b642bfac74f.png)'
- en: 'On the right-hand side of the details pane, find the Ingress IP and copy it
    to the clipboard by clicking the copy icon next to the IP address:'
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在详细信息窗格的右侧，找到Ingress IP，并通过单击IP地址旁边的复制图标将其复制到剪贴板：
- en: '![](assets/7cdabc5b-557d-4d4a-8c6a-747fd5f01cc4.png)'
  id: totrans-562
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7cdabc5b-557d-4d4a-8c6a-747fd5f01cc4.png)'
- en: 'Open the IP address in your browser to confirm that the production application
    is accessible. You will see a screen similar to the following view showing the
    Pod Name, Node Name, and its Version:'
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开IP地址，确认生产应用程序是否可访问。您将看到一个类似以下视图的屏幕，显示Pod名称、节点名称及其版本：
- en: '![](assets/a013b547-7880-4be6-b1c7-dd64edc1aa4c.png)'
  id: totrans-564
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a013b547-7880-4be6-b1c7-dd64edc1aa4c.png)'
- en: With that, you know how to use Google Cloud Platform services and Spinnaker
    to create your CI/CD pipeline on GKE.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，您就知道如何使用Google Cloud Platform服务和Spinnaker在GKE上创建您的CI/CD流水线。
- en: See also
  id: totrans-566
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'CI/CD on Google Cloud Quickstarts: [https://cloud.google.com/docs/ci-cd/](https://cloud.google.com/docs/ci-cd/)'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud上的CI/CD快速入门：[https://cloud.google.com/docs/ci-cd/](https://cloud.google.com/docs/ci-cd/)
- en: 'Cloud Source Repositories documentation: [https://cloud.google.com/source-repositories/docs/](https://cloud.google.com/source-repositories/docs/)'
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Source Repositories文档：[https://cloud.google.com/source-repositories/docs/](https://cloud.google.com/source-repositories/docs/)
- en: Setting up a CI/CD pipeline on Azure DevOps
  id: totrans-569
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Azure DevOps上设置CI/CD流水线
- en: Azure DevOps provides version control, reporting, automated builds, and project/lab/testing
    and release management capabilities. Azure DevOps is available as a SaaS or on-premises
    server product. In this section, we will cover the Azure DevOps workflow configuration
    and built-in CI/CD capabilities using the SaaS product. You will learn how to
    manage workflows and create Azure pipelines.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps提供版本控制、报告、自动构建以及项目/实验室/测试和发布管理功能。Azure DevOps可作为SaaS或本地服务器产品提供。在本节中，我们将介绍Azure
    DevOps工作流配置和使用SaaS产品的内置CI/CD功能。您将学习如何管理工作流程并创建Azure管道。
- en: Getting ready
  id: totrans-571
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 做好准备
- en: In the following recipe, you will learn how to create a pipeline example in
    a repository you own by adding a YAML file. This recipe requires an active GitHub
    account with a project ready to be built. We will use AKS to demonstrate continuous
    delivery with Azure Pipelines.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，您将学习如何通过添加一个YAML文件在您拥有的存储库中创建一个管道示例。此示例需要一个准备好进行构建的项目的活动GitHub帐户。我们将使用AKS来演示Azure管道的持续交付。
- en: All the operations mentioned here require an Azure DevOps account. If you don't
    have one, go to [https://azure.microsoft.com/services/devops/](https://azure.microsoft.com/services/devops/)
    and create one. Deploying the application on Azure Kubernetes Service also requires
    an active Azure Cloud subscription.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提到的所有操作都需要Azure DevOps帐户。如果您没有，请转到[https://azure.microsoft.com/services/devops/](https://azure.microsoft.com/services/devops/)并创建一个。在Azure
    Kubernetes服务上部署应用程序还需要活动的Azure云订阅。
- en: How to do it...
  id: totrans-574
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 本节进一步分为以下子节，以使此过程更加简单：
- en: Getting started with Azure DevOps
  id: totrans-576
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用Azure DevOps
- en: Configuring Azure Pipelines
  id: totrans-577
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Azure管道
- en: Deploying changes to an AKS cluster
  id: totrans-578
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将更改部署到AKS集群
- en: Getting started with Azure DevOps
  id: totrans-579
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开始使用Azure DevOps
- en: Azure DevOps is a set of DevOps tools provided by Microsoft that includes CI/CD
    and project management services such as Azure Pipelines, Azure Boards, Azure Artifacts,
    Azure Repos, and Azure Test Plans.
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps是由微软提供的一组DevOps工具，包括CI/CD和项目管理服务，如Azure管道、Azure看板、Azure工件、Azure存储库和Azure测试计划。
- en: 'Let''s perform the following steps to create our first project before we use
    Azure Pipelines:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Azure管道之前，让我们执行以下步骤来创建我们的第一个项目：
- en: Sign in to Azure DevOps at [https://azure.microsoft.com/en-us/services/devops/](https://azure.microsoft.com/en-us/services/devops/).
  id: totrans-582
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到[https://azure.microsoft.com/en-us/services/devops/](https://azure.microsoft.com/en-us/services/devops/)的Azure
    DevOps。
- en: Create a project name.
  id: totrans-583
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个项目名称。
- en: 'Choose Visibility. In our example, this is set to Public:'
  id: totrans-584
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择可见性。在我们的示例中，这被设置为公共：
- en: '![](assets/cc5619ec-043a-4528-b12a-89b4680442a8.png)'
  id: totrans-585
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cc5619ec-043a-4528-b12a-89b4680442a8.png)'
- en: Click on the Create project button.
  id: totrans-586
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“创建项目”按钮。
- en: Configuring Azure Pipelines
  id: totrans-587
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置Azure管道
- en: 'Azure Pipelines lets you build, test, and deploy with the CI/CD with any language,
    platform, and cloud provider. Let''s perform the following steps to configure
    Azure Pipelines for the first time:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: Azure管道允许您使用任何语言、平台和云提供商进行CI/CD构建、测试和部署。让我们执行以下步骤，首次配置Azure管道：
- en: 'After you log in to your Azure DevOps account, you will see the links to the
    main functionality on the left-hand Overview menu. From the Overview menu, click
    on the Pipelines menu. The following screenshot shows the Welcome to the project!
    page:'
  id: totrans-589
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到Azure DevOps帐户后，您将在左侧概述菜单中看到主要功能的链接。从概述菜单中，单击“管道”菜单。以下屏幕截图显示了“欢迎来到项目！”页面：
- en: '![](assets/fc5a7620-552f-4d7a-b743-f32dbaa88b4c.png)'
  id: totrans-590
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fc5a7620-552f-4d7a-b743-f32dbaa88b4c.png)'
- en: Click on the Create Pipeline button.
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“创建管道”按钮。
- en: 'As part of the pipeline creation process, you need to set your code repository
    location. You can import a project from any Git repository. In our example, we
    will use GitHub as our repository. The following screenshot shows all the other
    available options:'
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为管道创建过程的一部分，您需要设置代码存储库位置。您可以从任何Git存储库导入项目。在我们的示例中，我们将使用GitHub作为我们的存储库。以下截图显示了所有其他可用选项：
- en: '![](assets/f133f0fc-2927-47a2-ab1b-3bff450fce7a.png)'
  id: totrans-593
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f133f0fc-2927-47a2-ab1b-3bff450fce7a.png)'
- en: 'Click on Authorize AzurePipelines:'
  id: totrans-594
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“授权AzurePipelines”：
- en: '![](assets/80641ee3-4983-40c4-ab1f-cafdb9f06a2e.png)'
  id: totrans-595
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/80641ee3-4983-40c4-ab1f-cafdb9f06a2e.png)'
- en: 'Select a repository and click on Approve & Install:'
  id: totrans-596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个存储库并单击“批准并安装”：
- en: '![](assets/ea734a96-7cad-414e-a452-317e27999b7a.png)'
  id: totrans-597
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ea734a96-7cad-414e-a452-317e27999b7a.png)'
- en: Now, select the repository you would like to configure a pipeline.
  id: totrans-598
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择要配置管道的存储库。
- en: 'Choose Docker to build and push an image to Azure Container Registry. This
    option will upload the container artifact to the Azure Container Registry service.
    The following screenshot shows the Docker option that we will be using:'
  id: totrans-599
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Docker构建并推送镜像到Azure容器注册表。此选项将上传容器构件到Azure容器注册表服务。以下截图显示了我们将使用的Docker选项：
- en: '![](assets/6486d71c-dab1-4c37-9d8f-5acce591e232.png)'
  id: totrans-600
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6486d71c-dab1-4c37-9d8f-5acce591e232.png)'
- en: Review your pipeline YAML and click Save and run to approve it.
  id: totrans-601
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查您的管道YAML并单击“保存并运行”以批准它。
- en: 'You will see the pipeline. Click on the Build job to view its details:'
  id: totrans-602
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到管道。单击“构建作业”以查看其详细信息：
- en: '![](assets/6ec79d19-26a7-4c7f-b9ee-74245c139ec7.png)'
  id: totrans-603
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6ec79d19-26a7-4c7f-b9ee-74245c139ec7.png)'
- en: With that, you've learned how to configure an Azure Pipeline.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，您已经学会了如何配置Azure管道。
- en: Deploying changes to an AKS cluster
  id: totrans-605
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署更改到AKS集群
- en: 'Let''s perform the following steps:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤：
- en: 'After you log in to your Azure DevOps account, you will see the links to the
    main functionality on the left-hand Overview menu. This time, from the Overview
    menu, choose the Pipelines option. As shown in the following screenshot, it is
    the fourth option from the top:'
  id: totrans-607
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到Azure DevOps帐户后，您将在左侧概述菜单中看到主要功能的链接。这次，从概述菜单中选择“管道”选项。如下截图所示，它是从顶部数起的第四个选项：
- en: '![](assets/fc5a7620-552f-4d7a-b743-f32dbaa88b4c.png)'
  id: totrans-608
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fc5a7620-552f-4d7a-b743-f32dbaa88b4c.png)'
- en: 'Next, you need to create a pipeline. The following screenshot shows the Pipelines
    menu. Click on the New pipeline button located in the upper-right corner of the
    page:'
  id: totrans-609
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要创建一个管道。如下截图所示，显示了“管道”菜单。单击页面右上角的“新管道”按钮：
- en: '![](assets/dcbbcd9e-9e9e-4633-8c04-2e34e47a3f43.png)'
  id: totrans-610
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dcbbcd9e-9e9e-4633-8c04-2e34e47a3f43.png)'
- en: 'Choose GitHub as your repository. Again, all the other repository options are
    visible in the following screenshot:'
  id: totrans-611
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择GitHub作为您的存储库。同样，在以下截图中，所有其他存储库选项都是可见的：
- en: '![](assets/e351c53a-693a-4242-bd5e-a78ca46519d9.png)'
  id: totrans-612
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e351c53a-693a-4242-bd5e-a78ca46519d9.png)'
- en: 'Select a repository and click on Approve & Install. The following screenshot
    shows that my own repository is selected. In your case, the repository name will
    be different:'
  id: totrans-613
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个存储库并单击“批准并安装”。如下截图所示，我的存储库已被选中。在您的情况下，存储库名称将不同：
- en: '![](assets/ea734a96-7cad-414e-a452-317e27999b7a.png)'
  id: totrans-614
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ea734a96-7cad-414e-a452-317e27999b7a.png)'
- en: Now, select the repository you would like to configure a pipeline.
  id: totrans-615
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择要配置管道的存储库。
- en: 'As shown in the following screenshot, you will be offered predefined alternatives
    for configuring your pipelines. For this example, choose Deploy to Azure Kubernetes
    Service to build and push an image to Azure Container Registry and to deploy to
    AKS:'
  id: totrans-616
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下截图所示，您将获得预定义的配置管道的替代方案。在本例中，选择“部署到Azure Kubernetes服务”以构建并推送镜像到Azure容器注册表，并部署到AKS：
- en: '![](assets/410573a4-1b7f-4467-9883-18a1d673fb84.png)'
  id: totrans-617
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/410573a4-1b7f-4467-9883-18a1d673fb84.png)'
- en: Select your Azure Cloud subscription.
  id: totrans-618
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的Azure云订阅。
- en: Select an existing AKS cluster.
  id: totrans-619
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择现有的AKS集群。
- en: Choose Existing and select default in the Namespace field.
  id: totrans-620
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择现有并在命名空间字段中选择默认。
- en: 'Enter the name of your Container Registry. In the following screenshot, you
    can see the options that I have selected. In your case, Container registry and
    Image Name will be different:'
  id: totrans-621
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的容器注册表的名称。在下面的屏幕截图中，您可以看到我选择的选项。在您的情况下，容器注册表和镜像名称将不同：
- en: '![](assets/7a16daf7-6ec7-4906-b310-a2667ebe2639.png)'
  id: totrans-622
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7a16daf7-6ec7-4906-b310-a2667ebe2639.png)'
- en: Click on the Validate and configure button.
  id: totrans-623
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“验证和配置”按钮。
- en: Review your pipeline YAML and click Save and run to approve it.
  id: totrans-624
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查您的流水线YAML并单击“保存并运行”以批准它。
- en: 'You will see the pipeline. Click on the Build job to view its details:'
  id: totrans-625
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到流水线。单击“构建作业”以查看其详细信息：
- en: '![](assets/37374853-179a-4be0-a72b-a50677fbbc28.png)'
  id: totrans-626
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/37374853-179a-4be0-a72b-a50677fbbc28.png)'
- en: As shown in the preceding screenshot, our simple pipeline only includes only
    two stages. These will be explained in the *How it works...* section.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们简单的流水线只包括两个阶段。这些将在*它是如何工作的...*部分进行解释。
- en: How it works...
  id: totrans-628
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe showed you how to quickly create an Azure DevOps CI/CD pipeline
    using a demo application running on an AKS cluster.
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程向您展示了如何快速创建一个在AKS集群上运行的演示应用程序的Azure DevOps CI/CD流水线。
- en: 'In the *Deploying changes to an AKS cluster* recipe, after *step 9*, while
    we build the job, Azure Pipelines will create your pipeline. It will create the
    following two stages:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 在*将更改部署到AKS集群*教程中，在*步骤9*之后，当我们构建作业时，Azure Pipelines将创建您的流水线。它将创建以下两个阶段：
- en: 'In stage 1, which is the Build Stage, it creates a Docker image and pushes
    images into your Azure Container Registry. When it is successful, you can find
    the new image stored in your existing registry in Azure portal. As an example,
    the following screenshot shows the image that was created as a result of my pipeline
    under the Azure Container Registry and its details:'
  id: totrans-631
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第1阶段，即构建阶段，它创建一个Docker镜像并将图像推送到您的Azure容器注册表中。当成功时，您可以在Azure门户中找到存储在现有注册表中的新图像。例如，以下屏幕截图显示了作为我的流水线结果创建的图像在Azure容器注册表下以及其详细信息：
- en: '![](assets/93b68400-5524-40fc-a2e4-862bcf603f00.png)'
  id: totrans-632
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/93b68400-5524-40fc-a2e4-862bcf603f00.png)'
- en: In stage 2, which is the Deploy stage, it creates the image pull secrets to
    access your registry and rolls out your application as a deployment.
  id: totrans-633
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第2阶段，即部署阶段，它创建图像拉取凭据以访问您的注册表，并将您的应用程序部署为部署。
- en: The application will be deployed into the namespace you specified during the
    pipeline creation.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将部署到您在流水线创建期间指定的命名空间中。
- en: Later, you can create multiple environments that can be used for the different
    stages (preview, staging, and production) of your application and change where
    your application needs to be deployed in the pipelines.
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，您可以创建多个环境，用于应用程序的不同阶段（预览、暂存和生产），并更改应用程序需要部署到流水线中的位置。
- en: See also
  id: totrans-636
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Azure DevOps documentation: [https://docs.microsoft.com/en-us/azure/devops/?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/?view=azure-devops)'
  id: totrans-637
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure DevOps文档：[https://docs.microsoft.com/en-us/azure/devops/?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/?view=azure-devops)
- en: 'Azure Pipelines documentation: [https://docs.microsoft.com/en-us/azure/devops/pipelines/index?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/index?view=azure-devops)'
  id: totrans-638
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Pipelines文档：[https://docs.microsoft.com/en-us/azure/devops/pipelines/index?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/index?view=azure-devops)
- en: 'Canary deployment strategy for Kubernetes deployments: [https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/kubernetes/canary-demo?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/kubernetes/canary-demo?view=azure-devops)'
  id: totrans-639
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes部署的金丝雀部署策略：[https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/kubernetes/canary-demo?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/ecosystems/kubernetes/canary-demo?view=azure-devops)
