["```\n$ git clone https://github.com/k8sdevopscookbook/src.git\n$ cd src/chapter10\n```", "```\n$ kubectl get pods -n kube-system\nNAME                                             READY STATUS  RST AGE\ndns-controller-6577fb57f7-hx9wz                  1/1   Running 0   16d\netcd-manager-events-ip-172-20-8-2.ec2.internal   1/1   Running 0   16d\netcd-manager-main-ip-172-20-8-2.ec2.internal     1/1   Running 0   16d\nkube-apiserver-ip-172-20-8-2.ec2.internal        1/1   Running 2   16d\nkube-controller-manager-ip-172-20-8-2.ec2.int... 1/1   Running 0   16d\nkube-dns-66d58c65d5-mw6n5                        3/3   Running 0   16d\nkube-dns-66d58c65d5-rntmj                        3/3   Running 0   16d\nkube-dns-autoscaler-6567f59ccb-c9rmv             1/1   Running 0   16d\nkube-proxy-ip-172-20-32-123.ec2.internal         1/1   Running 0   16d\nkube-proxy-ip-172-20-38-218.ec2.internal         1/1   Running 1   16d\nkube-proxy-ip-172-20-45-93.ec2.internal          1/1   Running 0   16d\nkube-scheduler-ip-172-20-58-244.ec2.internal     1/1   Running 0  3d6h\n```", "```\n$ kubectl logs kube-apiserver-ip-172-20-58-244.ec2.internal -n kube-system\n...\nE1112 08:11:05.662027 1 authentication.go:65] Unable to authenticate the request due to an error: [invalid bearer token, Token has been invalidated]\nI1112 09:09:39.448428 1 log.go:172] http: TLS handshake error from 124.84.242.10:49016: tls: first record does not look like a TLS handshake\nI1112 09:30:00.726871 1 trace.go:81] Trace[76921086]: \"GuaranteedUpdate etcd3: *coordination.Lease\" (started: 2019-11-12 09:30:00.177607414 +0000 UTC m=+1250671.527180434) (total time: 549.223921ms):\n```", "```\n$ kubectl -n kube-system logs kube-dns-66d58c65d5-mw6n5\nError from server (BadRequest): a container name must be specified for pod kube-dns-66d58c65d5-mw6n5, choose one of: [kubedns dnsmasq sidecar]\n$ kubectl -n kube-system logs kube-dns-66d58c65d5-mw6n5 kubedns\n```", "```\n$ kubectl -n kube-system logs kube-dns-66d58c65d5-mw6n5 kubedns --since-time=\"2019-11-14T04:59:40.417Z\"\n...\nI1114 05:09:13.309614 1 dns.go:601] Could not find endpoints for service \"minio\" in namespace \"default\". DNS records will be created once endpoints show up.\n```", "```\n$ kubectl -n kube-system logs -l k8s-app=kube-dns -c kubedns\n```", "```\n$ kubectl -n kube-system logs -l k8s-app=kube-dns -c kubedns -p\n```", "```\n$ brew cask install osxfuse\n$ brew install datawire/blackbird/telepresence\n```", "```\n$ curl -s https://packagecloud.io/install/repositories/datawireio/telepresence/script.deb.sh | sudo bash\n$ sudo apt install --no-install-recommends telepresence\n```", "```\n$ kubectl run hello-world --image=datawire/hello-world --port=8000\n```", "```\n$ kubectl expose deployment hello-world --type=LoadBalancer --name=hello-world\n$ kubectl get service hello-world\nNAME        TYPE         CLUSTER-IP     EXTERNAL-IP                                   PORT(S)        AGE\nhello-world LoadBalancer 100.71.246.234 a643ea7bc0f0311ea.us-east-1.elb.amazonaws.com 8000:30744/TCP 8s\n```", "```\n$ export HELLOWORLD=http://$(kubectl get svc hello-world -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'):8000\n```", "```\n$ curl $HELLOWORLD/\nHello, world!\n```", "```\n$ mkdir /tmp/local-test && cd /tmp/local-test\n$ echo \"hello this server runs locally on my laptop\" > index.html\n```", "```\n$ telepresence --swap-deployment hello-world --expose 8000 \\\n--run python3 -m http.server 8000 &\n\n...\nT: Forwarding remote port 8000 to local port 8000.\nT: Guessing that Services IP range is 100.64.0.0/13\\. Services started after this point will be inaccessible if are outside\nT: this range; restart telepresence if you can't access a new Service.\nT: Setup complete. Launching your command.\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n```", "```\n$ curl $HELLOWORLD/\nhello this server runs locally on my laptop\n```", "```\n$ git clone https://github.com/k8sdevopscookbook/src.git\n$ cd src/chapter10\n```", "```\n$ cd postgres\n$ cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n name: postgres-config\n labels:\n app: postgres\ndata:\n POSTGRES_DB: postgresdb\n POSTGRES_USER: testuser\n POSTGRES_PASSWORD: testpassword123\nEOF\n```", "```\n$ cat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Service\nmetadata:\n name: postgres\n labels:\n app: postgres\nspec:\n type: NodePort\n ports:\n - port: 5432\n selector:\n app: postgres\nEOF\n```", "```\n$ kubectl apply -f postgres.yaml\n```", "```\n$ kubectl get pods -l app=postgres\nNAME READY STATUS RESTARTS AGE\npostgres-0 1/1 Running 0 7m5s\npostgres-1 1/1 Running 0 6m58s\n```", "```\n$ kubectl exec -it postgres-0 -- /bin/bash\n```", "```\n$ psql --username testuser postgresdb\npsql (12.1 (Debian 12.1-1.pgdg100+1))\nType \"help\" for help.\n```", "```\nCREATE TABLE test (\n   id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n   a int NOT NULL,\n   created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP\n);\nINSERT INTO test (a) SELECT * FROM generate_series(-1, -1000, -1);\n```", "```\n$ cat /var/lib/postgresql/data/postgresql.conf |grep log\n```", "```\n$ ls /var/log/postgresql\n```", "```\n$ pg_dump --username testuser postgresdb > /tmp/backup.sql\n```", "```\n$ git clone https://github.com/k8sdevopscookbook/src.git\n$ cd src/chapter10\n```", "```\n$ kubectl apply -f https://download.elastic.co/downloads/eck/1.0.0/all-in-one.yaml\n```", "```\n$ kubectl get crds |grep elastic.co\napmservers.apm.k8s.elastic.co                2019-11-25T07:52:16Z\nelasticsearches.elasticsearch.k8s.elastic.co 2019-11-25T07:52:17Z\nkibanas.kibana.k8s.elastic.co                2019-11-25T07:52:17Z\n```", "```\n$ kubectl create ns logging\n```", "```\n$ cat <<EOF | kubectl apply -f -\napiVersion: elasticsearch.k8s.elastic.co/v1beta1\nkind: Elasticsearch\nmetadata:\n name: elasticsearch\n namespace: logging\nspec:\n version: 7.4.2\n nodeSets:\n - name: default\n count: 3\n config:\n node.master: true\n node.data: true\n node.ingest: true\n node.store.allow_mmap: false\nEOF\n```", "```\n$ kubectl get elasticsearch -n logging\nNAME HEALTH NODES VERSION PHASE AGE\nelasticsearch green 3 7.4.2 Ready 86s\n```", "```\n$ kubectl get pods -n logging\nNAME                       READY STATUS  RESTARTS AGE\nelasticsearch-es-default-0 1/1   Running 0        2m24s\nelasticsearch-es-default-1 1/1   Running 0        2m24s\nelasticsearch-es-default-2 1/1   Running 0        2m24s\n```", "```\n$ PASSWORD=$(kubectl get secret elasticsearch-es-elastic-user \\\n-n logging -o=jsonpath='{.data.elastic}' | base64 --decode)\n```", "```\n$ curl -u \"elastic:$PASSWORD\" -k \"https://elasticsearch-es-http:9200\"\n{\n \"name\" : \"elasticsearch-es-default-2\",\n \"cluster_name\" : \"elasticsearch\",\n \"cluster_uuid\" : \"E_ATzAz8Th6oMvd4D_QocA\",\n \"version\" : {...},\n \"tagline\" : \"You Know, for Search\"\n}\n```", "```\n$ kubectl port-forward service/quickstart-es-http 9200\n$ curl -u \"elastic:$PASSWORD\" -k \"https://localhost:9200\"\n```", "```\n$ cat <<EOF | kubectl apply -f -\napiVersion: kibana.k8s.elastic.co/v1beta1\nkind: Kibana\nmetadata:\n name: mykibana\n namespace: logging\nspec:\n version: 7.4.2\n count: 1\n elasticsearchRef:\n name: elasticsearch\nEOF\n```", "```\n$ kubectl get elasticsearch -n logging\nNAME     HEALTH NODES VERSION AGE\nmykibana green  1     7.4.2   2m27s\n```", "```\n$ kubectl get pods -n logging\nNAME                         READY STATUS  RESTARTS AGE\nelasticsearch-es-default-0   1/1   Running 0        37m\nelasticsearch-es-default-1   1/1   Running 0        37m\nelasticsearch-es-default-2   1/1   Running 0        37m\nmykibana-kb-7864bfdb45-26lpq 1/1   Running 0        3m36s\n```", "```\n$ kubectl get secret elasticsearch-es-elastic-user \\\n-n logging -o=jsonpath='{.data.elastic}' | base64 --decode; echo\n```", "```\nbackend:\n type: es\n es:\n host: elasticsearch-es-http\n port: 9200\n http_user: elastic\n http_passwd: m2zr9fz49zqbkbpksprf4r76\n # Optional TLS encryption to ElasticSearch instance\n tls: \"on\"\n tls_verify: \"off\"\n```", "```\n$ helm install stable/fluent-bit --name=fluent-bit --namespace=logging -f fluent-bit-values.yaml\n```", "```\n$ kubectl get pods -n logging\nNAME                         READY STATUS  RESTARTS AGE\nelasticsearch-es-default-0   1/1   Running 0        158m\nelasticsearch-es-default-1   1/1   Running 0        158m\nelasticsearch-es-default-2   1/1   Running 0        158m\nfluent-bit-249ct             1/1   Running 0        2m11s\nfluent-bit-4nb9k             1/1   Running 0        2m11s\nfluent-bit-fqtz9             1/1   Running 0        2m11s\nfluent-bit-lg9hn             1/1   Running 0        2m11s\nmykibana-kb-5596b888b5-qv8wn 1/1   Running 0        115m\n```", "```\n$ kubectl get service mykibana-kb-http -n logging\n```", "```\n$ kubectl get secret elasticsearch-es-elastic-user \\\n-n logging -o=jsonpath='{.data.elastic}' | base64 --decode; echo\n```", "```\n$ kubectl port-forward service/mykibana-kb-http 5601\n```", "```\n$ git clone https://github.com/k8sdevopscookbook/src.git\n$ cd src/chapter10\n```"]