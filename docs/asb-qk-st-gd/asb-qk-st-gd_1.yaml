- en: What is Ansible?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Ansible？
- en: Following the first industrial revolution, automation was introduced, making
    the already-efficient machinery that had been developed even more efficient. This
    led to the introduction of industrial constructions, vehicle steering and stabilization,
    and indoor environmental control, among many other developments. After this, the
    information revolution kicked in, initiating a new process of optimization. This
    phase is working to reduce human intervention in technological processes and raise
    productivity.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 工业革命之后，引入了自动化，使已经高效的机械更加高效。这导致了工业建筑、车辆转向和稳定以及室内环境控制等许多其他发展。之后，信息革命开始，启动了一个新的优化过程。这一阶段旨在减少技术过程中的人为干预，并提高生产率。
- en: Nowadays, automation has become the norm across all fields. It started with
    simple administrator scripts, written to simplify and speed up daily tasks, and
    quickly developed into fully-fledged configuration management tools. The reasons
    behind this rapid development were the increase in market demand, the expansion
    of infrastructure and applications, and the emergence of new technologies, such
    as continuous integration, continuous development, and machine provisioning, that
    require a much more complicated setup and configuration.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，自动化已经成为各个领域的常态。它始于简单的管理员脚本，旨在简化和加快日常任务，并迅速发展成为完整的配置管理工具。这种快速发展背后的原因是市场需求的增加、基础架构和应用程序的扩展，以及新技术的出现，如持续集成、持续开发和机器配置，这些都需要更复杂的设置和配置。
- en: By nature, systems and network administrators tend to want to reduce repetitive
    tasks, simplify complicated ones, and try to move on to the next task as quickly
    as possible. At first, there were a few simple scripts, such as Bash or PowerShell,
    that were able to optimize tasks in a standard environment. After that, longer
    and more complicated scripts that involved advanced programming languages such
    as Python or Ruby were developed. These aimed to address tasks across multiple
    platforms or in complex environments and to manage infrastructure using automation
    and orchestration tools, enabling businesses to grow dramatically overnight with
    more demanding and complicated services. The role of administrators is to manage
    this growth and act accordingly to ensure a seamless user experience.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 按照本质，系统和网络管理员倾向于减少重复任务，简化复杂任务，并尽快转移到下一个任务。起初，有一些简单的脚本，如Bash或PowerShell，能够优化标准环境中的任务。之后，出现了更长、更复杂的脚本，涉及Python或Ruby等高级编程语言。这些旨在解决跨多个平台或复杂环境中的任务，并使用自动化和编排工具来管理基础架构，使企业能够在一夜之间大幅增长，提供更多要求更高和更复杂的服务。管理员的角色是管理这种增长，并相应地采取行动，以确保无缝的用户体验。
- en: 'This chapter will provide an overview of Ansible. We will demonstrate that
    Ansible is now a must-have platform for managing a medium to large infrastructure,
    rather than having a physical, partially virtual or hybrid, private and public
    cloud. Other automation tools offer different benefits with regard to their installation,
    usage, speed, and flexibility, so it can be tricky for a first-time user to choose
    the most appropriate automation tool for their environment. Ansible, Chef, Puppet,
    and SaltStack are the major configuration management tools available on the market.
    Each of these follows a different method of deploying, configuring, and managing
    machines with reduced complexity and increased speed, reliability, and compliance. This
    chapter will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将概述Ansible。我们将演示Ansible现在是管理中大型基础架构的必备平台，而不是拥有物理、部分虚拟或混合的私有和公共云。其他自动化工具在安装、使用、速度和灵活性方面提供不同的优势，因此对于初次使用者来说，选择最合适的自动化工具可能会有些棘手。Ansible、Chef、Puppet和SaltStack是市场上可用的主要配置管理工具。每个工具都遵循不同的部署、配置和管理机器的方法，以降低复杂性，提高速度、可靠性和合规性。本章将涵盖以下主题：
- en: Market study of automation tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化工具的市场研究
- en: Introduction to Ansible as a configuration management and task orchestration
    tool
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Ansible作为配置管理和任务编排工具
- en: Exploration of Ansible's functionalities across operating systems, architectures,
    and cloud platforms
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Ansible在操作系统、架构和云平台上的功能
- en: Overview of the Ansible project and Tower
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible项目和Tower概述
- en: The IT configuration management market
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IT配置管理市场
- en: The major configuration management tools currently used in the market are Ansible,
    Chef, Puppet, and SaltStack. Each one of these has their own pros and cons, so
    finding the right one can be a bit challenging, depending on which features are
    valued or which programming language is preferred. In this section, we will briefly
    introduce each of the tools and explain why we have chosen Ansible in this book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目前市场上主要使用的配置管理工具是Ansible、Chef、Puppet和SaltStack。每个工具都有其优缺点，因此根据所重视的功能或首选的编程语言，找到合适的工具可能会有些挑战。在本节中，我们将简要介绍每个工具，并解释为什么我们在本书中选择了Ansible。
- en: Chef is an open source, client-server configuration management tool. It offers
    a flexible infrastructure automation framework using Ruby and **domain-specific
    language** (**DSL**) for the administration of hosts. This covers all types of
    hosts, including bare metal, virtual, or on the cloud. Chef is very common with
    code developers due to its flexibility, stability, and reliability in large cloud
    deployments. However, it can be challenging to set up and learn its functionalities,
    so it might take a new user some time before properly mastering it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Chef是一个开源的客户端-服务器配置管理工具。它使用Ruby和**特定领域语言**（**DSL**）提供灵活的基础设施自动化框架，用于管理主机。这涵盖了所有类型的主机，包括裸机、虚拟机或云上的主机。由于其在大型云部署中的灵活性、稳定性和可靠性，Chef在代码开发人员中非常常见。然而，设置和学习其功能可能会有一定挑战，因此新用户可能需要一些时间才能完全掌握它。
- en: Puppet is a Ruby-based configuration management and orchestration tool. It follows
    an agent/master architecture, where the hosts to be controlled require a Puppet
    agent to allow their management. Puppet features a strong automation and reporting
    capability, via its UI interface, for task submission and host real-time reporting.
    Like Chef, Puppet can be challenging for new users to set up and configure. A
    prior knowledge of Ruby and DSL is required to perform personalized and complex
    tasks.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet是一个基于Ruby的配置管理和编排工具。它遵循主代理架构，需要被控制的主机需要安装Puppet代理来进行管理。Puppet具有强大的自动化和报告功能，通过其用户界面，可以进行任务提交和主机实时报告。与Chef一样，Puppet对于新用户来说设置和配置可能具有挑战性。执行个性化和复杂任务需要对Ruby和DSL有所了解。
- en: Puppet and Chef are two of the oldest configuration management platforms. They
    both use Ruby and DSL to control their agents.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet和Chef是两个最古老的配置管理平台。它们都使用Ruby和DSL来控制其代理。
- en: SaltStack is a Python-coded platform built to allow high-speed, master-agent
    communication. Its configuration management tasks are coded in **Yet Another Markdown
    Language** (**YAML**). The master (or multiple masters) uses the SSH protocol
    to control the agents/minions. SaltStack is very scalable, meaning it can respond
    well to environmental changes, it is easy to use, and it has a strong community.
    On the other hand, its installation can be difficult for a new user, its UI is
    not well-developed, it focuses on Linux with an average cover of other operating
    systems, and its documentation lacks good management.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: SaltStack是一个用Python编写的平台，旨在实现高速主代理通信。它的配置管理任务是用**另一种标记语言**（**YAML**）编码的。主服务器（或多个主服务器）使用SSH协议来控制代理/从属服务器。SaltStack非常可扩展，意味着它可以很好地响应环境变化，易于使用，并且拥有强大的社区。另一方面，它的安装对于新用户来说可能很困难，其用户界面开发不够完善，它专注于Linux，对其他操作系统的覆盖率一般，并且其文档缺乏良好的管理。
- en: SaltStack is very similar to Ansible. They both employ easy-to-use coding languages,
    that is, Python and YAML. Also, both SaltStack and Ansible execute tasks very
    quickly because they rely on SSH to send comments to the hosts.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: SaltStack与Ansible非常相似。它们都使用易于使用的编程语言，即Python和YAML。此外，SaltStack和Ansible都能够快速执行任务，因为它们依赖SSH向主机发送命令。
- en: Ansible is a relatively new tool compared to the others. It was built to simplify
    the complexity of task automation and orchestration. It is built on Python and
    uses YAML for scripting its jobs, which is a language that is very simple and
    close to English. This allows new users to understand it easily and write it themselves.
    Ansible does not require an agent to be installed in the hosts. It supports both
    push and pull models to send commands to its Linux nodes via the SSH protocol,
    and the WinRM protocol to send commands to its Windows nodes. It allows for a
    seamless deployment and provisioning for both VMs, applications, and containers,
    and scales easily to match the environment growth. It is simple to install and
    configure, and it is fairly easy to learn how to use it and code its scripts.
    Ansible does not require agent installation, which improves its communication
    speed. It is predominantly advanced in configuration management tasks, but it
    can also behave as an infrastructure orchestration tool. However, it requires
    extra permission for the master nodes. Users can easily end up with multiple scripts
    for multiple tasks, which can get confusing, and it lacks a good GUI and a mature
    platform when compared to older tools.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他工具相比，Ansible是一个相对较新的工具。它旨在简化任务自动化和编排的复杂性。它基于Python构建，并使用YAML来编写其作业，这是一种非常简单且接近英语的语言。这使得新用户可以轻松理解并自己编写。Ansible不需要在主机上安装代理。它支持推送和拉取模型，通过SSH协议向其Linux节点发送命令，以及通过WinRM协议向其Windows节点发送命令。它可以无缝地部署和配置VM、应用程序和容器，并且可以轻松扩展以适应环境的增长。它安装和配置简单，学习如何使用和编写其脚本也相对容易。Ansible不需要安装代理，这提高了其通信速度。它在配置管理任务方面非常先进，但也可以作为基础设施编排工具。然而，它需要主节点的额外权限。用户很容易因多个任务而最终产生多个脚本，这可能会令人困惑，并且与较老的工具相比，它缺乏良好的GUI和成熟的平台。
- en: Each of these tools is built for a specific audience. They have many well-developed
    features to cover a user's unique requirements to either simplify their daily
    tasks, improve productivity, speed up a host configuration, or close the gap in
    a hybrid environment.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具每个都是为特定受众构建的。它们具有许多成熟的功能，以满足用户的独特需求，无论是简化其日常任务、提高生产率、加快主机配置，还是填补混合环境中的差距。
- en: We have chosen to cover Ansible in this book to make it future-proof. We can
    all agree that Ansible is a new platform, so it is not as well-designed and customizable
    as many of the other tools, but it is easy to see how fast Ansible is on the rise.
    We are not just talking about the number of new technologies it supports, the
    number of modules it is introducing and enhancing, the community support that
    is present on the Ansible Galaxy form, or the GitHub project forks and starred
    repositories. We are also following its popularity and its demand within the market.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择在本书中涵盖Ansible，以使其具有未来的可持续性。我们都可以同意，Ansible是一个新平台，因此它的设计和可定制性不如许多其他工具，但很容易看出Ansible的崛起速度。我们不仅谈论它支持的新技术数量，它正在引入和增强的模块数量，Ansible
    Galaxy论坛上存在的社区支持，或GitHub项目的分支和收藏库。我们还在关注它在市场上的受欢迎程度和需求。
- en: Red Hat acquired Ansible in October 2015 with the strong belief that Ansible
    is the leader in IT automation and DevOps delivery, with the ability to simplify
    management for hybrid clouds, OpenStack environments, and container-based services."Ansible
    is a clear leader in IT automation and DevOps, and helps Red Hat take a significant
    step forward in our goal of creating frictionless IT." –  Joe Fitzgerald, Vice
    President, Management, Red Hat
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Red Hat在2015年10月收购了Ansible，并坚信Ansible是IT自动化和DevOps交付的领导者，具有简化混合云、OpenStack环境和基于容器的服务管理的能力。“Ansible在IT自动化和DevOps方面是明显的领导者，并帮助Red
    Hat在我们创建无摩擦IT的目标中迈出了重要的一步。”- Joe Fitzgerald，Red Hat管理副总裁
- en: 'Ansible is being used more frequently than ever, as shown in the following
    diagram, which shows the number of downloads of the main package for each of the
    tools from the Debian repository per year:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，Ansible的使用频率比以往任何时候都要高，该图显示了每年从Debian存储库下载每个工具的主要软件包的数量：
- en: '![](assets/da553a37-4ff2-4e8c-aae3-a32d0e3c4ab2.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/da553a37-4ff2-4e8c-aae3-a32d0e3c4ab2.png)'
- en: The previous figure was an Ansible, Puppet, Chef, and SaltStack Popularity contest
    statistics on the Debian repository. It was generated using the following link [https://qa.debian.org/popcon-graph.php?packages=ansible%2C+puppetmaster%2C+salt-master%2C+libchef-ruby&show_installed=on&want_legend=on&want_ticks=on&from_date=2010&to_date=2018&hlght_date=&date_fmt=%25Y-%25m&beenhere=1.](https://qa.debian.org/popcon-graph.php?packages=ansible%2C+puppetmaster%2C+salt-master%2C+libchef-ruby&show_installed=on&want_legend=on&want_ticks=on&from_date=2010&to_date=2018&hlght_date=&date_fmt=%25Y-%25m&beenhere=1) This
    link can be used to generate time graphs about other Debian packages through time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 上图是Debian存储库上Ansible、Puppet、Chef和SaltStack受欢迎程度统计数据。它是使用以下链接生成的：[https://qa.debian.org/popcon-graph.php?packages=ansible%2C+puppetmaster%2C+salt-master%2C+libchef-ruby&show_installed=on&want_legend=on&want_ticks=on&from_date=2010&to_date=2018&hlght_date=&date_fmt=%25Y-%25m&beenhere=1.](https://qa.debian.org/popcon-graph.php?packages=ansible%2C+puppetmaster%2C+salt-master%2C+libchef-ruby&show_installed=on&want_legend=on&want_ticks=on&from_date=2010&to_date=2018&hlght_date=&date_fmt=%25Y-%25m&beenhere=1) 此链接可用于生成关于其他Debian软件包的时间图。
- en: 'Ansible: simple, lightweight, and powerful'
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible：简单、轻量、强大
- en: 'Ansible is a leading orchestration platform that allows for automation, host
    configuration management, and the deployment of applications and virtual machines.
    Ansible can automate a range of IT infrastructure features, from simple, daily,
    and repetitive tasks to machine provisioning or the continuous integration and
    deployment of DevOps applications. It is very flexible and can cover bare-metal
    machines, virtual machines and platforms, and public or private cloud environments.
    Ansible can also manage network devices from switches, routers, and firewalls.
    It can also cover the setup of applications, the configuration and behavior of
    database management systems, package managers, and simple user applications:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible是一种领先的编排平台，可以实现自动化、主机配置管理和应用程序和虚拟机的部署。Ansible可以自动化一系列IT基础设施功能，从简单的、日常的、重复的任务到机器配置或DevOps应用程序的持续集成和部署。它非常灵活，可以覆盖裸机、虚拟机和平台，以及公共或私有云环境。Ansible还可以管理交换机、路由器和防火墙等网络设备。它还可以覆盖应用程序的设置、数据库管理系统的配置和行为、软件包管理器和简单的用户应用程序：
- en: '![](assets/ee9b9318-5f50-4cdb-939b-207ff447e152.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ee9b9318-5f50-4cdb-939b-207ff447e152.png)'
- en: Ansible logoIf this is your first book about configuration management and you
    are looking for an easy and simple method to follow, you are in the right place.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible标志如果这是你第一本关于配置管理的书，你正在寻找一种简单易行的方法，那么你来对地方了。
- en: One command is enough to install Ansible on Linux using the system's package
    manager from the distribution repository. Another way is to use Python's PyPI
    package manager for a faster and simpler installation. After that, it can simply
    be used in a similar way to execute any command. We would recommend going an extra
    step for a more complex or larger environment by editing the Ansible configuration
    file, so that it reads `/etc/ansible/ansible.conf`, filling in the inventory,
    and adding some group variables. Ansible does not require an agent installation
    on the client, but with a few extra steps, the connection can be made more secure.
    Ansible uses YAML, a simple configuration management language for Ansible playbooks,
    which is a human-readable coding language, so scripts can be written without much
    difficulty. When sending commands for specific tasks, the Ansible server translates
    the YAML code to the actual configuration code to the clients for immediate execution.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上使用系统的软件包管理器从发行存储库安装Ansible只需一条命令就足够了。另一种方法是使用Python的PyPI软件包管理器进行更快、更简单的安装。之后，它可以简单地用类似的方式执行任何命令。我们建议在更复杂或更大的环境中采取额外的步骤，编辑Ansible配置文件，使其读取`/etc/ansible/ansible.conf`，填写清单，并添加一些组变量。Ansible不需要在客户端安装代理，但通过一些额外的步骤，可以使连接更加安全。Ansible使用YAML，这是一种简单的配置管理语言，用于Ansible
    playbooks，它是一种人类可读的编码语言，因此可以轻松编写脚本。在发送特定任务的命令时，Ansible服务器将YAML代码转换为实际的配置代码，以便立即在客户端上执行。
- en: For most of the tutorials in this book, Debian-based systems will be used for
    the servers and Linux clients. The location and package names of the configuration
    files may vary between distributions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的大多数教程中，服务器和Linux客户端将使用基于Debian的系统。配置文件的位置和包名称可能会因发行版而异。
- en: The Ansible host server is the only machine where recommended computing resources
    are to be met in order to run the engine correctly. As it is agentless, the clients
    only receive tasks in the form of commands that get executed on the system directly.
    Some Ansible modules may consume a fair amount of the network traffic by sending
    data from one machine to another. This is the lowest amount of traffic required
    to carry out a task, since Ansible only uses a tiny portion of traffic to submit
    the command to the hosts.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible主机服务器是唯一的机器，必须满足推荐的计算资源，以便正确运行引擎。由于它是无代理的，客户端只接收以命令形式在系统上直接执行的任务。一些Ansible模块可能会通过从一台机器向另一台机器发送数据来消耗相当多的网络流量。这是执行任务所需的最低流量量，因为Ansible只使用了一小部分流量来将命令提交给主机。
- en: The rapid growth of Ansible has made it a very powerful tool. It is now considered
    the leading automation engine in the market. With its huge community support (Ansible
    Galaxy and GitHub projects) and Red Hat's proprietary management add-ons (Ansible
    Tower), its users have a wide variety of roles, modules, and add-ons to choose
    from that can automate every conceivable IT task.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible的快速增长使其成为一个非常强大的工具。它现在被认为是市场上领先的自动化引擎。通过其庞大的社区支持（Ansible Galaxy和GitHub项目）和红帽公司的专有管理附加组件（Ansible
    Tower），用户可以选择各种角色、模块和附加组件，可以自动化每一个可以想象的IT任务。
- en: 'Ansible offers its users the following features:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible为其用户提供以下功能：
- en: Systems configuration management
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统配置管理
- en: Agile application deployment following the best DevOps practices
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循最佳DevOps实践的敏捷应用部署
- en: Simplified orchestration and automation
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化的编排和自动化
- en: Zero-downtime, continuous deployment
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 零停机，持续部署
- en: Support for cloud-native applications
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云原生应用的支持
- en: Simple and optimized container adoption
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单且优化的容器采用
- en: Embedded security and compliance policy in automated tasks
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在自动化任务中嵌入安全性和合规性策略
- en: Streamlined host provisioning
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化的主机配置
- en: Support for multi-tier deployment
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多层部署
- en: Support for heterogenic IT infrastructures
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持异构IT基础设施
- en: Support for multi-layered computer architecture
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多层计算机架构
- en: Support for **infrastructure-as-a-service** (**IaaS**) deployment
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持基础设施即服务（IaaS）部署
- en: Support for **platform-as-a-service** (**PaaS**) deployment
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持平台即服务（PaaS）部署
- en: Support for scalability for a fast-growing environment
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持快速增长环境的可扩展性
- en: Support for push and pull models for task execution
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持推送和拉取模型进行任务执行
- en: Fast host fact-sharing between servers for better redundancy and performance
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器之间快速共享主机事实，以实现更好的冗余和性能
- en: Configuration for a variety of network devices
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置各种网络设备
- en: Management and monitoring of storage devices
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储设备的管理和监控
- en: Control of database management systems
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库管理系统的控制
- en: The Ansible module updates that come with each new release are a very good indication
    of the technologies and features that are officially supported. The modules allow
    the user to write simpler playbooks to perform more complex tasks.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每个新版本都附带的Ansible模块更新是对官方支持的技术和功能的很好指示。这些模块允许用户编写更简单的playbook来执行更复杂的任务。
- en: Ansible orchestration and automation
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible编排和自动化
- en: With the rapid growth of IT infrastructures and a shift in the way applications
    are being deployed, IT administrators' tasks have grown in scale and complexity.
    Ansible seamlessly merges orchestration and configuration management in a very
    handy platform that allows IT administrators to define a selected number of nodes,
    applications, and network devices to be configured in a desired state by making
    clear which actions should be taken to remove repetition and reduce complexity.
    Ansible can be used in a variety of ways, which we will cover in the next section.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 随着IT基础设施的快速增长和应用部署方式的转变，IT管理员的任务在规模和复杂性上都有所增加。Ansible无缝地将编排和配置管理合并在一个非常方便的平台中，使IT管理员能够定义一组选定的节点、应用程序和网络设备，以期望的状态进行配置，明确指出应采取哪些行动以消除重复和减少复杂性。Ansible可以以多种方式使用，我们将在下一节中介绍。
- en: Orchestration
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编排
- en: As well as configuration management, Ansible also offers high-end orchestration.
    This makes the organization and management of the interactions between multiple
    configuration tasks well-structured. It simplifies and orders complex and chaotic
    configuration management and administration tasks. According to the status of
    the infrastructure, and the users' demands, applications, and data-versioned behaviors,
    Ansible orchestration will generally bring the infrastructure back to the desired
    state by configuring the appropriate services and policies via the CM tool into
    the failed component and make it work properly.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 除了配置管理外，Ansible还提供高端编排。这使得多个配置任务之间的交互的组织和管理变得有条不紊。它简化和整理了复杂和混乱的配置管理和管理任务。根据基础设施的状态和用户的需求，应用程序和数据版本化的行为，Ansible编排通常会通过将适当的服务和策略配置到失败的组件中，使其正常工作，将基础设施恢复到期望的状态。
- en: IT orchestration can get very complex when dealing with DevOps class tasks,
    such as the **continuous integration and deployment** (**CI**/**CD**) of applications
    or **infrastructure as a code** (**IaC**). Ansible is capable of converting those
    tasks to automated workflows that run a number of playbooks in a well-defined
    structure, featuring all sorts of Ansible pre-defined modules, plugins, and APIs
    to communicate, execute commands, and report facts from any number of hosts, devices,
    and services.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理DevOps类任务时，如应用程序的持续集成和部署（CI/CD）或基础设施即代码（IaC），IT编排可能变得非常复杂。Ansible能够将这些任务转换为自动化工作流程，运行一系列以明确定义结构的playbook，包括各种Ansible预定义模块、插件和API，以与任意数量的主机、设备和服务通信、执行命令和报告事实。
- en: Automate everything
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化一切
- en: 'Ansible is the path to take for better infrastructure automation, application
    deployment, and provisioning. It is the open source approach to an automated and
    modernized IT environment. Ansible is the key to enabling IT administrators to
    automate their daily tasks, freeing up their time to allow them to focus on delivering
    quality services. This not only impacts the IT department, but the business as
    a whole. The following diagram shows the reach of Ansible''s multiple functionalities:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible是更好的基础设施自动化、应用部署和配置的途径。这是自动化和现代化IT环境的开源方法。Ansible是使IT管理员能够自动化其日常任务的关键，从而释放他们的时间，使他们能够专注于提供优质服务。这不仅影响IT部门，还影响整个业务。以下图表显示了Ansible多功能的影响范围：
- en: '![](assets/52e874c7-a3a9-4786-a3e5-0936b2438927.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/52e874c7-a3a9-4786-a3e5-0936b2438927.png)'
- en: Provisioning
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置
- en: Instance provisioning using Ansible covers the configuration and setup of bare-metal
    machines and servers. It relies on its predefined APIs to create and configure
    the local virtualized infrastructure. It can also manage hybrid, private, and
    public cloud instances, resources, and applications. Ansible can automatically
    install and configure an application and its libraries. It uses OS bootstrap and
    a kickstart script to initiate bare-metal machine provisioning using very simple
    playbooks and built-in modules. Using the same simple playbooks and different
    modules, Ansible can also provision instances, networking, and VMs in a public,
    private, or hybrid cloud very easily.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Ansible进行实例配置涵盖了裸金属机器和服务器的配置和设置。它依赖于其预定义的API来创建和配置本地虚拟化基础设施。它还可以管理混合、私有和公共云实例、资源和应用程序。Ansible可以自动安装和配置应用程序及其库。它使用OS引导程序和kickstart脚本来启动裸金属机器配置，使用非常简单的playbooks和内置模块。使用相同的简单playbooks和不同的模块，Ansible也可以非常轻松地在公共、私有或混合云中配置实例、网络和虚拟机。
- en: Configuration management
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置管理
- en: Using the power of playbooks and inventory, IT administrators can use Ansible
    to execute an update, patch, or configuration modification on a number of hosts,
    network devices, and applications. Playbooks describe the infrastructure in both
    simple, human-readable terms for other people to use, and machine-parsable code
    that can be used on any machine running Ansible. The execution of an Ansible configuration is
    state-driven, which means that it does not need to check the system or service
    state to know how to adapt in order to increase the task's reliability.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 利用playbooks和清单的功能，IT管理员可以使用Ansible在多个主机、网络设备和应用程序上执行更新、补丁或配置修改。Playbooks以简单的、人类可读的术语描述基础设施，供其他人使用，并且可以在运行Ansible的任何机器上使用的可机器解析的代码。Ansible配置的执行是状态驱动的，这意味着它不需要检查系统或服务状态来知道如何调整以增加任务的可靠性。
- en: Application deployment
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用部署
- en: When we talk about applications that are managed by Ansible, we are talking
    about full life cycle control. Any users who have access to the Ansible server
    node, from IT administrators to application developers and project managers, will
    be able to manage all aspects of the application. Ansible takes the application
    package, deploys it to all the production servers, sets it up, and configures
    and initiates it. It can even test the package and report its status. This feature
    covers multi-tier applications, allowing zero-downtime rolling for a seamless
    application update.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论由Ansible管理的应用程序时，我们谈论的是完整的生命周期控制。任何有权访问Ansible服务器节点的用户，从IT管理员到应用程序开发人员和项目经理，都可以管理应用程序的所有方面。Ansible接收应用程序包，将其部署到所有生产服务器上，设置并配置并启动它。它甚至可以测试该包并报告其状态。这个功能涵盖了多层应用程序，允许无停机滚动以实现无缝的应用程序更新。
- en: Continuous delivery and continuous integration
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付和持续集成
- en: Ansible ensures a stable environment for both developers and IT administrators
    for the continuous delivery and integration of applications. Automating as much
    as possible of the application turnaround means it is quick and unnoticeable to
    the application users. Ansible automation and orchestration is multi-tier and
    multi-step, which allows for finer control over operations and hosts. We can write
    Playbooks to manage the continuous integration and delivery of applications while
    ensuring the desired state of various components, such as load balancers and several
    server nodes.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible确保开发人员和IT管理员都能获得稳定的环境，以实现应用程序的持续交付和集成。尽可能自动化应用程序的周转意味着对应用程序用户来说，这是快速且不易察觉的。Ansible的自动化和编排是多层和多步骤的，这允许对操作和主机进行更精细的控制。我们可以编写Playbooks来管理应用程序的持续集成和交付，同时确保各种组件的期望状态，例如负载均衡器和多个服务器节点。
- en: Ansible project and Ansible Tower
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible项目和Ansible Tower
- en: After being bought by Red Hat, Ansible continued to offer a free open source
    platform, which is currently called the Ansible Project. Red Hat has created proprietary
    management add-ons that offer an advanced control and centralization of the infrastructure,
    called Ansible Tower. Red Hat runs the Ansible Automation platform, which is composed
    of the Ansible Engine and Ansible Tower. This product is fully supported by Red
    Hat as one of its lead projects.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在被Red Hat收购后，Ansible继续提供一个名为Ansible项目的免费开源平台。Red Hat创建了专有的管理附加组件，提供对基础设施的高级控制和集中管理，称为Ansible
    Tower。Red Hat运行着由Ansible Engine和Ansible Tower组成的Ansible自动化平台。这个产品是Red Hat的主要项目之一，得到了完全的支持。
- en: Ansible project
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible项目
- en: The Ansible project is a build-up of functionalities that come from the original
    company, AnsibleWorks. It is a community-built automation engine. It is free,
    open source, and available for anyone to download or install on any Linux OS,
    using the package manager, source compiling, or Python PyPI. It is very simple,
    powerful, and agentless.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible项目是来自原始公司AnsibleWorks的功能的积累。它是一个由社区构建的自动化引擎。它是免费的、开源的，任何人都可以在任何Linux操作系统上下载或安装，使用软件包管理器、源代码编译或Python
    PyPI。它非常简单、强大且无需代理。
- en: To use the Ansible automation engine, users do not need any third-party applications
    or interfaces. They can simply send a command or write a playbook and execute
    it directly to the engine. This allows the user to access a variety of predefined
    modules, plugins, and APIs working as building blocks for managing all kinds of
    IT tasks and network objects. As it is agentless, Ansible relies on SSH to manage
    the Linux hosts, and WinRM for the Windows hosts. The SSH protocol is also used
    to control some of the network devices. Some more unsual devices or cloud and
    virtualization services require the use of Ansible pre-defined APIs to help manage
    or access them.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Ansible自动化引擎，用户不需要任何第三方应用程序或接口。他们可以简单地发送命令或编写playbook并直接执行到引擎。这允许用户访问各种预定义的模块、插件和API，作为管理各种IT任务和网络对象的构建块。由于它是无代理的，Ansible依赖于SSH来管理Linux主机，以及WinRM来管理Windows主机。SSH协议也用于控制一些网络设备。一些更不寻常的设备或云和虚拟化服务需要使用Ansible预定义的API来帮助管理或访问它们。
- en: Nodes can be defined by their IP addresses or hostname; for the latter, we will
    have to rely on a DNS server or the local DNS file. APIs are used to communicate
    with third-party services, such as public or private clouds. Modules, which constitute Ansible's
    biggest pre-defined function library, allow the users to simplify long and complex
    tasks into a few lines in a playbook. They cover a large number of tasks, systems,
    packages, files, datastores, API calls, network device configurations, and so
    on. Finally, Ansible plugins are used to improve Ansible's core functionality,
    such as fast host caching, to avoid facts gathering on the network.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 节点可以根据其IP地址或主机名进行定义；对于后者，我们将不得不依赖DNS服务器或本地DNS文件。API用于与公共或私有云等第三方服务进行通信。模块构成了Ansible最大的预定义功能库，允许用户将长而复杂的任务简化为playbook中的几行。它们涵盖了大量的任务、系统、软件包、文件、数据存储、API调用、网络设备配置等。最后，Ansible插件用于改进Ansible的核心功能，例如快速主机缓存，以避免在网络上收集事实。
- en: Ansible Tower
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible Tower
- en: 'Ansible Tower is the Red Hat proprietary layer that sits on top of the Ansible
    project engine. It is made up of a number of add-ons and modules, composed of
    REST APIs and web services, that work together to create a friendly web interface
    that acts as an automation hub from which the IT administrator can select a number
    of tasks or playbooks to be executed on a number of machines. It still relies
    on the Ansible Engine to send commands and collect the reports. Ansible Tower
    cleverly collects the status of tasks and the reports that come back from hosts.
    All of this data is presented in the Ansible dashboard, showing hosts, the status
    of the inventory, and the recent jobs, activities, and snapshots:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower是坐落在Ansible项目引擎之上的Red Hat专有层。它由许多附加组件和模块组成，由REST API和Web服务组成，它们共同创建一个友好的Web界面，作为一个自动化中心，IT管理员可以从中选择要在多台机器上执行的一些任务或playbook。它仍然依赖于Ansible引擎发送命令和收集报告。Ansible
    Tower巧妙地收集任务的状态和来自主机的报告。所有这些数据都显示在Ansible仪表板上，显示主机、清单的状态以及最近的作业、活动和快照：
- en: '![](assets/149d79ca-1129-4060-9eb8-3115f435d77f.png)Ansible Tower can only
    be installed on Red Hat 7, CentOS 7, and Ubuntu 14.04/16.04 LTS.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/149d79ca-1129-4060-9eb8-3115f435d77f.png)Ansible Tower只能安装在Red Hat
    7、CentOS 7和Ubuntu 14.04/16.04 LTS上。'
- en: Ansible Tower scales as the environment grows, and acts accordingly by showing
    in real-time all the statuses of the hosts, tasks, and playbooks. It highlights
    the successful playbook jobs, as well as those that failed to run, in order to
    troubleshoot any issues. In its multi-playbook workflows, the user can create
    pipelines of playbooks to be executed in sequence on any type of inventory, using
    one or more users' credentials and on a personalized timescale. With pipelining
    enabled, an IT administrator can automate complex operations (application provisioning,
    continuous deployment with containers, running test workflows) by breaking them
    down into smaller tasks using pipelines and, depending on the output (success
    or failure), run a specific play.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 随着环境的增长，Ansible Tower可以扩展，并根据情况实时显示主机、任务和playbook的所有状态。它突出显示了成功的playbook作业，以及未能运行的作业，以便排除任何问题。在其多playbook工作流中，用户可以创建playbook的流水线，按顺序在任何类型的清单上使用一个或多个用户凭据，并在个性化的时间表上执行。启用流水线，IT管理员可以通过将复杂操作（应用程序提供、使用容器进行持续部署、运行测试工作流）分解为更小的任务，使用流水线，并根据输出（成功或失败）运行特定的play，从而自动化复杂操作。
- en: 'Ansible Tower offers a smart inventory platform that enables you to pull the
    host''s inventory from any source, including a public or private cloud, or a local
    CMDB. The smart inventory builds hosts caching, which allows the user to run playbooks
    based on the facts of the hosts, which are pieces of information and properties
    related to them and gathered by Ansible. It also allows you to set up built-in
    notifications about the status of tasks, workflows, and playbooks via email, SMS,
    and push notifications on third-party platforms, such as Slack or Hipchat. Ansible
    Tower also allows task scheduling for routine updates, device patching, and custom
    backup schedule options. The following diagram shows the layers of the full Ansible Engine
    provided by Red Hat:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower提供了一个智能清单平台，可以从任何来源获取主机清单，包括公共或私有云，或本地CMDB。智能清单构建主机缓存，允许用户根据主机的事实运行playbook，这些事实是与主机相关的信息和属性，由Ansible收集。它还允许您设置内置通知，通过电子邮件、短信和第三方平台（如Slack或Hipchat）上的推送通知，关于任务、工作流和playbook的状态。Ansible
    Tower还允许对例行更新、设备打补丁和自定义备份计划选项进行任务调度。下图显示了由Red Hat提供的完整Ansible引擎的层次结构：
- en: '![](assets/c4c8f129-a00d-4572-82e3-3f6aef853c42.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c4c8f129-a00d-4572-82e3-3f6aef853c42.png)'
- en: Currently, Red Hat Ansible Tower offers a 30-day trial license for a hands-on
    exploration and test of its features. Any user can use it to decide if their environment
    will benefit from it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Red Hat Ansible Tower提供了一个为期30天的试用许可证，供用户进行实践探索和测试其功能。任何用户都可以使用它来决定他们的环境是否会从中受益。
- en: In this book, we will mainly focus on the open source Ansible Engine, as it
    is free and accessible to everyone. We believe that learning Ansible has to be
    started with the basic no-UI version to better understand the inner mechanics
    of the tool. The reader can migrate easily to Ansible Tower with the engine skills that
    they have already acquired.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将主要关注开源的 Ansible Engine，因为它是免费的并且对每个人都是可访问的。我们认为学习 Ansible 必须从基本的无界面版本开始，以更好地理解工具的内部机制。读者可以轻松地通过已经掌握的引擎技能迁移到
    Ansible Tower。
- en: There are a number of open source solutions that provide some of the functionalities
    of Ansible Tower. The most common of these is Ansible Semaphore, which is available
    at [https://github.com/ansible-semaphore/semaphore](https://github.com/ansible-semaphore/semaphore).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多开源解决方案提供了一些 Ansible Tower 的功能。其中最常见的是 Ansible Semaphore，可以在 [https://github.com/ansible-semaphore/semaphore](https://github.com/ansible-semaphore/semaphore)
    上找到。
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we introduced Ansible and listed its key features and the advantages
    that it can offer to the user when employed properly. We have also discussed the
    enterprise version of Ansible Tower, which is developed and supported by RedHat.
    In [Chapter 2](cb196d17-b8ea-44f5-8114-4a91ae541566.xhtml), *Ansible Setup and
    Configuration*, we are going to start the real learning. We will begin by setting
    up Ansible and showing the best ways of configuring it to take it for a test drive.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 Ansible 并列出了其主要特性以及在正确使用时可以为用户提供的优势。我们还讨论了由 RedHat 开发和支持的 Ansible
    Tower 企业版。在[第2章](cb196d17-b8ea-44f5-8114-4a91ae541566.xhtml) *Ansible 设置和配置* 中，我们将开始真正的学习。我们将从设置
    Ansible 开始，并展示配置它的最佳方法，以便进行测试。
- en: References
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'This chapter''s references are as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的参考资料如下：
- en: Ansible website: [https://www.ansible.com/](https://www.ansible.com/)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 网站：[https://www.ansible.com/](https://www.ansible.com/)
- en: Red Hat website: [https://www.redhat.com/en/technologies/management/ansible](https://www.redhat.com/en/technologies/management/ansible)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat 网站：[https://www.redhat.com/en/technologies/management/ansible](https://www.redhat.com/en/technologies/management/ansible)
- en: Puppet website: [https://puppet.com/](https://puppet.com/)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet 网站：[https://puppet.com/](https://puppet.com/)
- en: Chef website: [https://www.chef.io/chef/](https://www.chef.io/chef/)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef 网站：[https://www.chef.io/chef/](https://www.chef.io/chef/)
- en: SaltStack website: [https://saltstack.com/](https://saltstack.com/)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SaltStack 网站：[https://saltstack.com/](https://saltstack.com/)
