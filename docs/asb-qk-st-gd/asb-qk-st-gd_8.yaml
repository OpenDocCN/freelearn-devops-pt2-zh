- en: Ansible Advanced Features
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible 高级功能
- en: 'Before finishing this book, we wanted to take a brief look at some of the more
    interesting and advanced functionalities of Ansible. These can be handy to further
    enhance your automation. In this chapter, we are going to cover three features:
    Ansible Vault, and its capacity to increase the security of playbooks and roles;
    Ansible Container, to enable full container automation with Ansible; and Ansible
    plugins, with their rich and flexible set of features.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成本书之前，我们想简要介绍一些 Ansible 更有趣和先进的功能。这些功能可以帮助进一步增强您的自动化。在本章中，我们将介绍三个功能：Ansible
    Vault，以及它增加 playbooks 和 roles 安全性的能力；Ansible Container，实现与 Ansible 的完全容器自动化；以及
    Ansible 插件，具有丰富和灵活的功能集。
- en: 'This chapter covers the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Overview of Ansible Vault
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible Vault 概述
- en: How to configure and use Ansible Vault
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置和使用 Ansible Vault
- en: Benefits of Ansible Container
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible Container 的好处
- en: Using Ansible Container
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible Container
- en: Overview of Ansible plugins and their features
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 插件及其功能概述
- en: Ansible Vault
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible Vault
- en: In this section, we are going to introduce the features, use cases, and best
    practices that are associated with Ansible Vault.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍与 Ansible Vault 相关的功能、用例和最佳实践。
- en: What is Ansible Vault?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Ansible Vault？
- en: Ansible Vault is a tool provided by Ansible that allows its users to encrypt
    secret variables, which can vary from authentication credentials and keys to sensitive
    and personal user information. Ansible Vault creates encrypted files to store
    variables, which can be moved to a secure location if necessary.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Vault 是 Ansible 提供的工具，允许用户加密秘密变量，这些变量可以是认证凭据和密钥，也可以是敏感和个人用户信息。Ansible
    Vault 创建加密文件来存储变量，如果需要，可以将其移动到安全位置。
- en: Ansible Vault is integrated transparently into the scripts of Ansible roles
    and playbooks. This means that Vault can encrypt any data structures that are
    located within those scripts. This includes host and group variables, either stored
    in the script or from another location imported using the `include_vars` option. They
    could also be located in the `defaults` or `vars` folder when dealing with an
    Ansible role. Vault can also encrypt task files when there is a need to hide the
    name of a particular variable.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Vault 透明地集成到 Ansible roles 和 playbooks 的脚本中。这意味着 Vault 可以加密位于这些脚本中的任何数据结构。这包括主机和组变量，无论是存储在脚本中还是使用
    `include_vars` 选项从另一个位置导入的变量。处理 Ansible role 时，它们也可以位于 `defaults` 或 `vars` 文件夹中。当需要隐藏特定变量的名称时，Vault
    也可以加密任务文件。
- en: Ansible Vault can also be extended to encrypt regular files that are binaries,
    archives, or text files. This feature is used with file management modules such
    as `copy`, `unarchive`, and `script`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Vault 还可以扩展到加密常规文件，如二进制文件、存档文件或文本文件。此功能与文件管理模块（如 `copy`、`unarchive`
    和 `script`）一起使用。
- en: Using Ansible Vault
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ansible Vault
- en: 'To be able to explore the features of Ansible Vault, we need to make sure we
    have created at least one encrypted file to store our variables in. For this,
    we need to use the `ansible-vault` tool as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够探索 Ansible Vault 的功能，我们需要确保至少创建了一个加密文件来存储我们的变量。为此，我们需要使用 `ansible-vault`
    工具，如下所示：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: A password entry prompt will appear, to ask for the password for the newly created
    Vault file. After typing in the password and confirming it, a new Vault file will
    be created in the specified location. A default text editor will open for us so
    that we can fill in the vault file.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将出现密码输入提示，询问新创建的 Vault 文件的密码。输入密码并确认后，将在指定位置创建一个新的 Vault 文件。默认文本编辑器将打开，以便我们填写
    vault 文件。
- en: 'Ansible Vault will look for the `EDITOR` environment variable to check which
    system default text editor is to be used when opening vault files. To use a specific
    text editor, we need to change the variable on the fly as follows: `export EDITOR=nano;
    ansible-vault create /home/admin/Vault/vault.yml`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Vault 将查找 `EDITOR` 环境变量，以检查打开 vault 文件时要使用的系统默认文本编辑器。要使用特定的文本编辑器，我们需要临时更改变量，如下所示：`export
    EDITOR=nano; ansible-vault create /home/admin/Vault/vault.yml`。
- en: 'Any data that is written in the vault file will be encrypted the moment the
    file gets closed. We can try plotting the content of the text file using the `cat` command–line
    tool as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 写入 vault 文件的任何数据在文件关闭时都将被加密。我们可以尝试使用 `cat` 命令行工具绘制文本文件的内容，如下所示：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of the tool will look as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 工具的输出如下所示：
- en: '![](assets/b17d63b4-210d-4464-8be8-cfed1888d951.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b17d63b4-210d-4464-8be8-cfed1888d951.png)'
- en: 'The Vault files can only be modified properly using the `ansible-vault` command–line
    tool. To do this, we need to use the `edit` option, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Vault 文件只能使用 `ansible-vault` 命令行工具正确修改。为此，我们需要使用 `edit` 选项，如下所示：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After entering the Vault file password chosen during file creation, the default
    text editor should take over to open the file and show its content in clear text
    to allow for easier editing. We can also open the vault file in read-only mode
    using the `view` option:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 输入文件创建时选择的 Vault 文件密码后，将默认文本编辑器打开文件并以明文显示其内容，以便更容易编辑。我们还可以使用 `view` 选项以只读模式打开
    vault 文件。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Running the `ansible-vault` command–line tool using any option will require
    you to type in the password of the vault file that the action is going to be performed.
    The vault file password can be edited using the `rekey` option: `ansible-vault
    rekey /home/admin/Vault/vault.yml`. We need to type in the original password,
    then the new password, and confirm it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `ansible-vault` 命令行工具时，使用任何选项都需要输入要执行操作的 vault 文件的密码。可以使用 `rekey` 选项编辑 vault
    文件密码：`ansible-vault rekey /home/admin/Vault/vault.yml`。我们需要输入原始密码，然后输入新密码并确认。
- en: As we mentioned earlier, Ansible Vault can encrypt and decrypt files when used
    with file modules. This feature can be used to encrypt files manually and transform
    them into vault files. It is always possible to manually decrypt them later when
    necessary. To perform file encryption, we need to use the `encrypt` option for the `ansible-vault` command–line
    tool.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，当与文件模块一起使用时，Ansible Vault可以加密和解密文件。这个功能可以用来手动加密文件，并将它们转换成vault文件。以后需要时，始终可以手动解密它们。要执行文件加密，我们需要使用`ansible-vault`命令行工具的`encrypt`选项。
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This command line will require a password and its confirmation to encrypt and
    secure the newly converted vault file. This file can be used directly in any playbook
    shown in the next subsection.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令行将需要一个密码和确认来加密和保护新转换的vault文件。这个文件可以直接在下一小节中的任何playbook中使用。
- en: 'To convert the vault file to a normal text file, we use the same command–line
    tool with a different option, `decrypt`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要将vault文件转换为普通文本文件，我们使用相同的命令行工具，只是使用不同的选项，`decrypt`：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After entering the password of the vault file, we should be able to view and
    edit the file using any tool.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 输入vault文件的密码后，我们应该能够使用任何工具查看和编辑文件。
- en: Best practices when using Ansible Vault
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在使用Ansible Vault时的最佳实践
- en: 'Now that we''ve learned how to create and encrypt vault files, let''s look
    at how to use them properly with Ansible playbooks and roles. To be able to use
    encrypted variables, we need to provide Ansible with the password for the Vault
    file. This can be done simply with an interactive prompt when executing the playbook,
    as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何创建和加密vault文件，让我们看看如何在Ansible playbooks和roles中正确使用它们。为了能够使用加密变量，我们需要为Vault文件提供密码。当执行playbook时，可以通过交互式提示来简单地完成这个操作，如下所示：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Alternatively, for a more automated method, you could point to the file where
    the vault password will be stored. This is done as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，对于更自动化的方法，您可以指向vault密码将被存储的文件。操作如下：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The file should be a one-line file containing the password as a string. If
    there is a site vault password, we can always set up a persistent vault password
    file within the Ansible global configuration file by adding the following line
    to the `[defaults]` section:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件应该是一个包含密码的一行文件。如果有站点vault密码，我们可以通过在Ansible全局配置文件中添加以下行到`[defaults]`部分来设置一个持久的vault密码文件：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: From version 2.3, Ansible has introduced a way to encrypt single vault variables.
    It requires you to use the `encrypt_string` option with the `ansible-vault` command–line
    tool.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 从2.3版本开始，Ansible引入了一种加密单个vault变量的方法。这需要您使用`ansible-vault`命令行工具的`encrypt_string`选项。
- en: 'As an example, we are going to use a vault file with a sensitive variable that
    will get called in a playbook. First, we need to make sure the vault file has
    the variable properly defined:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将使用一个包含敏感变量的vault文件，该变量将在playbook中调用。首先，我们需要确保vault文件正确定义了变量：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can verify the content of the vault file using the `view` option, as shown in
    the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`view`选项来验证vault文件的内容，如下图所示：
- en: '![](assets/2e20ed8b-ed16-46fe-8b84-1e466e4da441.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2e20ed8b-ed16-46fe-8b84-1e466e4da441.png)'
- en: 'Then, we need to verify that the vault file is included in the playbook and
    the variable is called:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要验证vault文件是否包含在playbook中，并且变量是否被调用：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Finally, we execute the playbook while pointing to the location of the vault
    password file:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们执行playbook时，指向vault密码文件的位置：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It is a good practice to have a set of two variable files located in the usual
    hosts or group variables folder. You should fill the first file with all the necessary
    variables, and fill the second one only with the variables that are to be encrypted,
    by adding a special prefix to their names. Then, adjust the variables in the first
    file so that they point to the matching prefixed variables in the second file,
    using Jinja2 syntax. Make sure your second file is encrypted using Ansible Vault.
    This method causes less hassle when managing many variables that need to be encrypted.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在通常的主机或组变量文件夹中，最好有一组两个变量文件。您应该在第一个文件中填写所有必要的变量，并且只在第二个文件中填写要加密的变量，通过给它们的名称添加特殊的前缀。然后，使用Jinja2语法调整第一个文件中的变量，使它们指向第二个文件中匹配的带前缀的变量。确保您的第二个文件使用Ansible
    Vault进行加密。这种方法在管理许多需要加密的变量时会更加方便。
- en: 'To enhance the encryption and decryption speed when using Ansible Vault, it
    is recommended that you have the Python `cryptography` package installed on the
    system. This can be installed easily using Python PyPI: `pip install cryptography`.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强使用Ansible Vault时的加密和解密速度，建议在系统上安装Python `cryptography`包。这可以通过Python PyPI轻松安装：`pip
    install cryptography`。
- en: Ansible Container
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible Container
- en: In this section, we are going to talk about this very handy feature, which is
    offered by Ansible for its container-focused users.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将讨论Ansible为其容器用户提供的非常方便的功能。
- en: What is Ansible Container?
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible Container是什么？
- en: Ansible Container is an open source project that helps Ansible users automate
    the building, deployment, and management of their containers. This feature allows
    for better container code management when building compose files and allows you
    to deploy containers on any public or private cloud registries.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Container是一个帮助Ansible用户自动构建、部署和管理他们的容器的开源项目。这个功能允许在构建compose文件时更好地管理容器代码，并允许您在任何公共或私有云注册表上部署容器。
- en: With Ansible Container, we can use Ansible features with containers the same
    way as we can with virtual machines and bare-metal hosts.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Ansible Container，我们可以像在虚拟机和裸机主机上一样使用Ansible功能与容器。
- en: Using Ansible Container
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible Container
- en: 'Ansible Container is not, by default, installed as part of the Ansible original
    installation. We need to install it separately on the container host. To simplify
    the installation, we are going to rely on Python PyPI to install the necessary
    packages. Ansible Container needs a container engine to work, so we need to specify
    one during the install process. The following command line shows how we can install
    Ansible Container with two engines, Docker and Kubernetes:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Container 默认情况下不作为 Ansible 原始安装的一部分安装。我们需要在容器主机上单独安装它。为了简化安装过程，我们将依赖于
    Python PyPI 来安装必要的软件包。Ansible Container 需要容器引擎才能工作，因此我们需要在安装过程中指定一个。以下命令显示了我们如何使用两个引擎
    Docker 和 Kubernetes 安装 Ansible Container：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Ansible Container has a special heavy-lifting container, called the Conductor,
    which is generated during the build process. The Conductor contains all the necessary
    dependencies to build a target container image.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Container 有一个特殊的重型容器，称为 Conductor，在构建过程中生成。Conductor 包含了构建目标容器镜像所需的所有依赖项。
- en: 'The Ansible command line for managing containers, `ansible-container`, offers
    several functionalities, from development level to testing and production. We
    use the `init` option to create the container folder and initial configuration
    files:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 用于管理容器的 Ansible 命令行 `ansible-container` 提供了从开发级别到测试和生产的多种功能。我们使用 `init` 选项来创建容器文件夹和初始配置文件：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following list of files should be present in the directory in which the
    command line was executed:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行命令的目录中应该存在以下文件列表：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `ansible-container` command line also initiates the container building
    process by launching the Conductor container to run the instances and base container
    images that are specified in the `container.yml` file. Then, the Ansible roles
    that are specified in the file are installed in multiple layers of the container.
    All of this is done via the container engine. The full command line should look
    as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`ansible-container` 命令行还通过启动 Conductor 容器来启动容器构建过程，以运行在 `container.yml` 文件中指定的实例和基础容器镜像。然后，在容器的多个层中安装了在文件中指定的
    Ansible 角色。所有这些都是通过容器引擎完成的。完整的命令行应该如下所示：'
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can also orchestrate a container modification that only updates the container
    image that is affected by the change, without rebuilding all the images, for faster
    development. Before running the following command, we need to make sure that the
    change has been made and saved in the `container.yml` file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以编排一个容器修改，只更新受更改影响的容器镜像，而不重新构建所有镜像，以加快开发速度。在运行以下命令之前，我们需要确保更改已经在 `container.yml`
    文件中进行了保存：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, to upload and build the container images in a cloud registry, we need
    to use the `deploy` option. This option also allows you to generate the Ansible
    code to orchestrate the building of the container images and a production container
    platform when using Kubernetes or Red Hat OpenShift. The full command line should
    look as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了上传和构建容器镜像到云注册表，我们需要使用 `deploy` 选项。这个选项还允许您生成 Ansible 代码来编排容器镜像的构建以及在使用
    Kubernetes 或 Red Hat OpenShift 时的生产容器平台。完整的命令行应该如下所示：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As for the files generated by the `init` option, we can identify the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 至于 `init` 选项生成的文件，我们可以识别出以下内容：
- en: '`container.yml`: This is a YAML file that describes the services of the container,
    how to build and run the container, and which repositories to push it to.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`container.yml`：这是一个描述容器服务、如何构建和运行容器以及要推送到哪些存储库的 YAML 文件。'
- en: '`meta.yml`: This contains the necessary information to enable the container
    project to be shared on Ansible Galaxy.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`meta.yml`：这个文件包含了使容器项目能够在 Ansible Galaxy 上共享所需的信息。'
- en: '`ansible-requirements.yml`: This stores the Python dependencies that are used
    by the Conductor container when it is built.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-requirements.yml`：这个文件存储了 Conductor 容器在构建时使用的 Python 依赖项。'
- en: '`requirements.yml`: This lists the roles to be used within the container.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requirements.yml`：这个文件列出了容器中要使用的角色。'
- en: '`ansible.cfg`: This contains the Ansible configuration to be followed in the
    Conductor container.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible.cfg`：这个文件包含了在 Conductor 容器中要遵循的 Ansible 配置。'
- en: '`.dockerignore`: This contains the list of files that are irrelevant to the
    container project. These should be ignored when building and uploading the container
    project.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.dockerignore`：这个文件包含与容器项目无关的文件列表。在构建和上传容器项目时应该忽略这些文件。'
- en: Example Ansible container
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 Ansible 容器
- en: 'As an example, we are going to create a simple web server. First, we need to
    create our Ansible Container folder and the initial configuration files:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将创建一个简单的 Web 服务器。首先，我们需要创建我们的 Ansible 容器文件夹和初始配置文件：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, we start editing the files that we have created. We start with the `container.yml`
    file and fill it with the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们开始编辑我们创建的文件。我们从 `container.yml` 文件开始，并填写以下代码：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, we fill in the `meta.yml` file in case we need to upload our container
    project to Ansible Galaxy. We need to add the following code to it:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们填写 `meta.yml` 文件，以防需要将我们的容器项目上传到 Ansible Galaxy。我们需要向其中添加以下代码：
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, we edit the `requirements.txt` file and add in the following requirements:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们编辑 `requirements.txt` 文件，并添加以下要求：
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We will leave the `ansible.cfg`, `.dockerignore`, and `ansible-requirements.yml` files
    as they are. We do not have anything to change in these files for this container
    project.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将保留 `ansible.cfg`、`.dockerignore` 和 `ansible-requirements.yml` 文件不变。对于这个容器项目，我们不需要改变这些文件中的任何内容。
- en: 'We can now build our container:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以构建我们的容器了：
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Ansible plugins
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible 插件
- en: In this section, we are going to briefly introduce Ansible plugins and talk
    about how we can develop our own.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将简要介绍 Ansible 插件，并讨论如何开发我们自己的插件。
- en: What are Ansible plugins?
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Ansible 插件？
- en: Ansible plugins are pieces of code and functions that add to Ansible's original
    core functionalities. These plugins enable Ansible to control several APIs and
    tools that enable the correct functioning of several modules.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible插件是一些代码和功能，它们增加了Ansible的原始核心功能。这些插件使Ansible能够控制几个API和工具，从而实现多个模块的正确功能。
- en: 'The default installation of Ansible includes several essential plugins, which
    are shown in the following list:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible的默认安装包括几个基本插件，如下列表所示：
- en: '**Action plugins:** These are frontend plugins for the modules. They can execute
    actions on the master host before calling the modules themselves.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动作插件：这些是模块的前端插件。它们可以在调用模块本身之前在主机上执行操作。
- en: '**Cache plugins:** These are background plugins that are used to cache host
    facts. This can help with optimizing fact gathering.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存插件：这些是用于缓存主机事实的后台插件。这有助于优化事实收集。
- en: '**Callback plugins:** These help the monitoring and log collection tools to
    work with Ansible for optimized monitoring.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回调插件：这些帮助监控和日志收集工具与Ansible一起进行优化监控。
- en: '**Connection plugins:** These are responsible for communication with remote
    hosts that support different types of connections.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接插件：这些负责与支持不同类型连接的远程主机进行通信。
- en: '**Inventory plugins:** These plugins help generate an inventory from specified hosts.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单插件：这些插件帮助从指定的主机生成清单。
- en: '**Shell plugins:** These are command controllers that are used to check whether
    commands are properly formatted and conform with the target machines.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Shell插件：这些是用于检查命令是否格式正确并符合目标机器的命令控制器。
- en: '**Strategy plugins:** These control the execution of Ansible plays and the
    pipelining of tasks and schedules.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略插件：这些控制Ansible plays的执行以及任务和计划的流水线化。
- en: '**Vars plugins:** These inject variables that are defined in the inventory
    or the group or host variables, but are required for the execution of the task.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vars插件：这些插入在清单或组或主机变量中定义但对任务执行所需的变量。
- en: Developing Ansible plugins
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发Ansible插件
- en: Ansible does come with many plugins included in its package, but it is always
    possible to develop our own plugins. This will help extend Ansible's features.
    Ansible does help developers create new plugins by providing base classes that
    host several pre-written methods and functions which can be used with new plugins
    to prevent unnecessary coding. Also, when we have finished writing a plugin, we
    can easily write a simple unit test for it using Ansible's plugin API.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible确实包含了许多插件在其软件包中，但总是可以开发我们自己的插件。这将有助于扩展Ansible的功能。Ansible通过提供托管多个预先编写的方法和函数的基类来帮助开发人员创建新的插件，这些方法和函数可以与新的插件一起使用，以防止不必要的编码。此外，当我们完成编写一个插件后，可以使用Ansible的插件API轻松地为其编写一个简单的单元测试。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have covered a few handy features offered by Ansible for
    more advanced uses. We first looked at Ansible Vault, which provides enhanced
    security during infrastructure automation. We then looked at Ansible Container,
    which covers the new trend of building and managing containers. Finally, we looked
    at Ansible plugins and how they allow us to personalize our automation.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Ansible提供的一些适用于更高级用途的便利功能。我们首先看了Ansible Vault，它在基础设施自动化过程中提供了增强的安全性。然后我们看了Ansible
    Container，它涵盖了构建和管理容器的新趋势。最后，我们看了Ansible插件以及它们如何允许我们个性化我们的自动化。
- en: With this chapter, we finish our *Ansible QuickStart Guide*. This is not, however,
    the end of the journey; Ansible has a lot more to offer and the best way to truly
    master it is to carry out as many projects as possible. There will always be other
    books, web forums, and blogs to help guide you.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们完成了*Ansible快速入门指南*。然而，这并不是旅程的终点；Ansible还有很多可以提供的，真正掌握它的最佳方法是尽可能多地进行项目。总会有其他书籍、网络论坛和博客来帮助指导您。
- en: References
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考
- en: 'Here is the Ansible documentation website: [https://docs.ansible.com/ansible/latest](https://docs.ansible.com/ansible/latest).'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Ansible文档网站：[https://docs.ansible.com/ansible/latest](https://docs.ansible.com/ansible/latest)。
