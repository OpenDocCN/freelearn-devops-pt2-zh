["```\n---\n- name: Update and clean up Linux OS \n  hosts: Linux\n  become: yes\n  gather_facts: yes\n  tasks:\n    - name: Update Debian Linux packages with Index \n      updated\n      apt: \n        upgrade: dist\n        update_cache: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Update Red Hat Linux packages with Index \n      updated\n      yum: \n        name: \"*\"\n        state: latest\n        update_cache: yes\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Clean up Debian Linux from cache and unused \n      packages\n      apt: \n        autoremove: yes \n        autoclean: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Clean up Red Hat Linux from cache and unused \n      packages\n      shell: yum clean all; yum autoremove\n      when: ansible_os_family == \"RedHat\"\n      ignore_errors: yes\n\n   - name: Check if Debian system requires a reboot\n     shell: \"[ -f /var/run/reboot-required ]\"\n     failed_when: False\n     register: reboot_required\n     changed_when: reboot_required.rc == 0\n     notify: reboot\n     when: ansible_os_family == \"Debian\"\n     ignore_errors: yes\n\n   - name: Check if Red Hat system requires a reboot\n     shell: \"[ $(rpm -q kernel|tail -n 1) != \n     kernel-$(uname -r) ]\"\n     failed_when: False\n     register: reboot_required\n     changed_when: reboot_required.rc == 0\n     notify: reboot\n     when: ansible_os_family == \"RedHat\" \n     ignore_errors: yes\n\n  handlers:\n   - name: reboot\n     command: shutdown -r 1 \"A system reboot triggered \n     after and Ansible automated system update\"\n     async: 0\n     poll: 0\n     ignore_errors: true\n```", "```\n---\n- name: Update and clean up Linux OS \n  hosts: Linux\n  max_fail_percentage: 20\n  serial: 5\n  become: yes\n  become_user: setup\n  gather_facts: yes\n  tasks: ...\n```", "```\n---\n- name: Create a dedicated remote management user \n  hosts: Linux\n  become: yes\n  gather_facts: yes\n  tasks:\n    - name: Create a now basic user\n      user: \n         name: 'ansuser' \n         password: \n   $6$C2rcmXJPhMAxLLEM$N.XOWkuukX7Rms7QlvclhWIOz6.MoQd/\n   jekgWRgDaDH5oU2OexNtRYPTWwQ2lcFRYYevM83wIqrK76sgnVqOX. \n         # A hash for generic password.\n         append: yes\n         groups: sudo\n         shell: /bin/bash\n         state: present\n\n    - name: Create the user folder to host the SSH key\n      file: \n         path: /home/ansuser/.ssh\n         state: directory\n         mode: 0700\n         owner: ansuser\n\n    - name: Copy server public SSH key to the newly \n      created folder\n      copy: \n         src: /home/admin/.ssh/ansible_rsa\n         dest: /home/ansuser/.ssh/id_rsa\n         mode: 0600\n         owner: ansuser\n\n    - name: Configure the sudo group to work without a \n       password\n      lineinfile: \n         dest: /etc/sudoers\n         regexp: '^%sudo\\s'\n         line: \"%sudo ALL=(ALL) NOPASSWD{{':'}} ALL\" \n         validate: 'visudo -cf %s'\n         state: present\n\n    - name: Install favourite text editor for Debian \n      family\n      apt: \n         name: nano\n         state: latest\n         update_cache: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Install favourite text editor for Red Hat \n      family\n      yum: \n         name: nano\n         state: latest\n      when: ansible_os_family == \"RedHat\"\n\n    - name: remove old editor configuration file\n      file: \n         path: /home/ansuser/.selected_editor\n         state: absent\n      ignore_errors: yes\n\n    - name: Create a new configuration file with the \n      favorite text editor\n      lineinfile: \n         dest: /home/ansuser/.selected_editor\n         line: \"SELECTED_EDITOR='/usr/bin/nano'\" \n         state: present\n         create: yes\n\n    - name: Make the user a system user to hide it from \n      login interface\n      blockinfile: \n         path: /var/lib/AccountsService/users/ansuser\n         state: present\n         create: yes\n         block: |\n             [User]\n             SystemAccount=true\n```", "```\n---\n- name: Setup and configured recommended Linux services\n  hosts: Linux\n  become: yes\n  gather_facts: yes\n  tasks:\n    - name: Install a list of services on Linux hosts\n      package: \n         name: '{{ item }}'\n         state: latest\n      with_items:\n         - ntp\n         - tzdate\n         - autofs\n\n    - name: Fix time zone on Red Hat 6\n      lineinfile: \n         path: /etc/sysconfig/clock\n         line: \"ZONE='Europe/London'\"\n         state: present\n         create: yes\n      when: ansible_os_family == 'RedHat' and \n      ansible_distribution_version.split('.')[0] == '6'\n\n    - name: Setup time zone on all local hosts\n      timezone: \n         name: \"Europe/London\"\n\n    - name: Fix time zone on Red Hat 6\n      blockinfile:\n         path: /etc/ntp.conf\n         block: |\n            server time.nist.gov iburst\n            server 0.uk.pool.ntp.org iburst\n            server 1.uk.pool.ntp.org iburst\n         insertafter: \"# Specify one or more NTP \n         servers.\"\n         state: present\n      when: ansible_os_family == 'RedHat'\n- name: Restart NTP service to apply change and enable    \n   it on Debian\n  systemd:\n  name: ntp\n  enabled: True\n  state: restarted\n  when: ansible_os_family == 'Debian'\n\n - name: Restart NTP service to apply change and enable \n  it on Red Hat\n  systemd:\n  name: ntpd\n  enabled: True\n  state: restarted\n  when: ansible_os_family == 'RedHat'\n\n - name: Add NFS and SMB support to automount\n  blockinfile: \n  path: /etc/auto.master\n  block: |\n  /nfs /etc/auto.nfs\n  /cifs /etc/auto.cifs \n  state: present\n\n - name: create the NFS and SMB AutoFS configuration    \n   files\n  file: \n  name: '{{ item }}'\n  state: touch\n  with_items:\n  - '/etc/auto.nfs'\n  - '/etc/auto.cifs'\n\n - name: Restart AutoFS service to apply a change and \n   enable it\n  systemd:\n  name: autofs\n  enabled: True\n  state: restarted \n```", "```\n---\n- name: Setup and connect network shared folders\n  hosts: Linux\n  become: yes\n  gather_facts: yes\n  tasks:\n    - name: Install the dependencies to enable NFS and \n      SMB clients on Linux Debian family\n      apt: \n         name: '{{ item }}'\n         state: latest\n      with_items:\n         - nfs-common\n         - rpcbind\n         - cifs-utils\n         - autofs\n      when: ansible_os_family == 'Debian'\n\n    - name: Install the dependencies to enable NFS and \n      SMB clients on Linux Red Hat family\n      yum: \n         name: '{{ item }}'\n         state: latest\n      with_items:\n         - nfs-common\n         - rpcbind\n         - cifs-utils\n         - nfs-utils\n         - nfs-utils-lib\n         - autofs\n      when: ansible_os_family == 'RedHat'\n\n    - name: Block none authorised NFS servers using \n      rpcbind\n      lineinfile: \n         path: /etc/hosts.deny\n         line: \"rpcbind: ALL\"\n         state: present\n         create: yes\n\n    - name: Allow the target NFS servers using rpcbind\n      lineinfile: \n         path: /etc/hosts.allow\n         line: \"rpcbind: 192.168.10.20\"\n         state: present\n         create: yes\n\n    - name: Configure NFS share on Fstab\n      mount: \n         name: nfs shared\n         path: /nfs/shared\n         src: \"192.168.10.20:/media/shared\"\n         fstype: nfs\n         opts: defaults\n         state: present\n\n    - name: Create the shared drive directories\n      file:\n         name: '{{ item }}'\n         state: directory\n         with_items:\n         - '/nfs/shared'\n         - '/cifs/winshared'\n\n    - name: Configure NFS share on AutoFS\n      lineinfile: \n         path: /etc/auto.nfs\n         line: \"shared -fstype=nfs,rw, \n         192.168.10.20:/media/shared\u201d\n         state: present\n\n    - name: Configure SMB share on AutoFS\n      lineinfile: \n         path: /etc/auto.cifs\n         line: \"winshared \n         -fstype=cifs,rw,noperm,credentials=/etc/crd.txt \n          ://192.168.11.20/winshared\u201d\n         state: present\n\n    - name: Restart AutoFS service to apply NFS and SMB \n      changes\n      systemd:\n         name: autofs\n         state: restarted\n```", "```\n---\n- name: Setup and connect network shared folders\n  hosts: Linux\n  become: yes\n  gather_facts: yes\n  tasks:\n    - name: Install the dependencies to for archiving the \n      backup\n      package: \n         name: '{{ item }}'\n         state: latest\n      with_items:\n         - zip\n         - unzip\n         - gunzip\n         - gzip\n         - bzip2\n         - rsync\n\n    - name: Backup the client folder to the vault \n      datastore server\n      synchronize:\n         mode: push \n         src: /home/client1\n         dest: client@vault.lab.edu:/media/vault1/client1\n         archive: yes\n         copy_links: yes\n         delete: no\n         compress: yes\n         recursive: yes\n         checksum: yes\n         links: yes\n         owner: yes\n         perms: yes\n         times: yes\n         set_remote_user: yes\n         private_key: /home/admin/users_SSH_Keys/id_rsa\n      delegate_to: \"{{ inventory_hostname }}\"\n```", "```\n---\n- name: Setup and connect network shared folders\n  hosts: Linux\n  become: yes\n  gather_facts: yes\n  tasks:\n    - name: Install OpenBox graphical interface\n      apt: \n         name: '{{ item }}'\n         state: latest\n         update_cache: yes\n      with_items:\n         - openbox\n         - nitrogen\n         - pnmixer\n         - conky\n         - obconf\n         - xcompmgr\n         - tint2\n\n    - name: Install basic tools for desktop Linux usage \n     and application build\n      apt: \n         name: '{{ item }}'\n         state: latest\n         update_cache: yes\n      with_items:\n         - htop\n         - screen\n         - libreoffice-base\n         - libreoffice-calc\n         - libreoffice-impress\n         - libreoffice-writer\n         - gnome-tweak-tool\n         - firefox\n         - thunderbird\n         - nautilus\n         - build-essential\n         - automake\n         - autoconf\n         - unzip\n         - python-pip\n         - default-jre\n         - cmake\n         - git\n         - wget\n         - cpanminus\n         - r-base\n         - r-base-core\n         - python3-dev\n         - python3-pip\n         - libgsl0-dev\n\n    - name: Install tools using Perl CPAN\n      cpanm:\n          name: '{{ item }}'\n      with_items:\n         - Data::Dumper\n         - File::Path\n         - Cwd\n\n    - name: Install tools using Python PyPip\n      shell: pip3 install -U '{{ item }}'\n      with_items:\n         - numpy \n         - cython\n         - scipy\n         - biopython\n         - pandas\n\n    - name: Install tools on R CRAN using Bioconductor as \n      source \n      shell: Rscript --vanilla -e   \n       \"source('https://bioconductor.org/biocLite.R'); \n        biocLite(c('ggplots2', 'edgeR','optparse'), \n        ask=FALSE);\"\n\n    - name: Download a tool to be compiled on each host\n      get_url: \n          url: http://cegg.unige.ch/pub/newick-utils-1.6-\n          Linux-x86_64-enabled-extra.tar.gz \n          dest: /usr/local/newick.tar.gz\n          mode: 0755\n\n    - name: Unarchive the downloaded tool on each host\n      unarchive: \n          src: /usr/local/newick.tar.gz\n          dest: /usr/local/\n          remote_src: yes\n          mode: 0755\n\n    - name: Configure the tool before to the host before \n      building\n      command: ./configure chdir=\"/usr/local/newick-\n      utils-1.6\"\n\n    - name: Build the tool on the hosts\n      make:\n          chdir: /usr/local/newick-utils-1.6\n          target: install\n\n    - name: Create Symlink to the tool\u2019s binary to be \n      executable from anywhere in the system \n      shell: ln -s -f /usr/local/newick-utils-1.6/src\n          /nw_display /usr/local/bin/nw_display\n\n    - name: Installing another tool located into a github \n      repo\n      git: \n          repo: https://github.com/chrisquince/DESMAN.git\n          dest: /usr/local/DESMAN\n          clone: yes\n\n    - name: Setup the application using python compiler\n      command: cd /usr/local/DESMAN; python3 setup.py install\n```", "```\n---\n- name: Install a LAMP on Linux hosts\n  hosts: webservers\n  become: yes\n  gather_facts: yes\n  tasks:\n    - name: Install Lamp packages\n      apt: \n         name: '{{ item }}'\n         state: latest\n         update_cache: yes\n      with_items:\n         - apache2\n         - mysql-server\n         - php\n         - libapache2-mod-php\n         - python-mysqldb\n\n    - name: Create the Apache2 web folder\n      file: \n         dest: \"/var/www\"\n         state: directory\n         mode: 0700\n         owner: \"www-data\"\n         group: \"www-data\"   \n\n    - name: Setup Apache2 modules\n      command: a2enmod {{ item }} creates=/etc/apache2\n      /mods-enabled/{{ item }}.load\n      with_items:\n         - deflate\n         - expires\n         - headers\n         - macro\n         - rewrite\n         - ssl\n\n    - name: Setup PHP modules\n      apt: \n         name: '{{ item }}'\n         state: latest\n         update_cache: yes\n      with_items:\n         - php-ssh2\n         - php-apcu\n         - php-pear\n         - php-curl\n         - php-gd\n         - php-imagick\n         - php-mcrypt\n         - php-mysql\n         - php-json\n\n    - name: Remove MySQL test database\n      mysql_db:  db=test state=absent login_user=root \n      login_password=\"DBp@55w0rd\"\n\n    - name: Restart mysql server\n      service: \n         name: mysql\n         state: restarted\n\n    - name: Restart Apache2\n      service: \n         name: apache2\n         state: restarted\n```", "```\n---\n- name: Windows updates management\n  hosts: windows\n  gather_facts: yes\n  tasks:\n   - name: Create the registry path for Windows Updates\n     win_regedit:\n       path: HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\n      \\WindowsUpdate\\AU\n       state: present\n     ignore_errors: yes\n\n   - name: Add register key to disable Windows AutoUpdate\n     win_regedit:\n       path: HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\n      \\WindowsUpdate\\AU\n       name: NoAutoUpdate\n       data: 1\n       type: dword\n     ignore_errors: yes\n\n    - name: Make sure that the Windows update service is \n      running\n      win_service:\n        name: wuauserv\n        start_mode: auto\n        state: started\n      ignore_errors: yes\n\n    - name: Executing Windows Updates on selected \n      categories\n      win_updates:\n        category_names:\n          - Connectors\n          - SecurityUpdates\n          - CriticalUpdates\n          - UpdateRollups\n          - DefinitionUpdates\n          - FeaturePacks\n          - Application\n          - ServicePacks\n          - Tools\n          - Updates\n          - Guidance\n        state: installed\n        reboot: yes\n      become: yes\n      become_method: runas\n      become_user: SYSTEM\n      ignore_errors: yes\n      register: update_result\n\n    - name: Restart Windows hosts in case of update \n      failure \n      win_reboot:\n      when: update_result.failed\n```", "```\n---\n- name: Windows system configuration and optimisation\n  hosts: windows\n  gather_facts: yes\n  vars:\n     macaddress: \"{{ \n     (ansible_interfaces|first).macaddress|default\n     (mac|default('')) }}\"\n      tasks:\n   - name: Send magic Wake-On-Lan packet to turn on    \n     individual systems\n     win_wakeonlan:\n       mac: '{{ macaddress }}'\n       broadcast: 192.168.11.255\n\n   - name: Wait for the host to start it WinRM service\n     wait_for_connection:\n       timeout: 20\n\n   - name: start a defragmentation of the C drive\n     win_defrag:\n       include_volumes: C\n       freespace_consolidation: yes\n\n   - name: Setup some registry optimization\n     win_regedit:\n       path: '{{ item.path }}'\n       name: '{{ item.name }}'\n       data: '{{ item.data|default(None) }}'\n       type: '{{ item.type|default(\"dword\") }}'\n       state: '{{ item.state|default(\"present\") }}'\n     with_items:\n\n    # Set primary keyboard layout to English (UK)\n    - path: HKU:\\.DEFAULT\\Keyboard Layout\\Preload\n      name: '1'\n      data: 00000809\n      type: string\n\n    # Show files extensions on Explorer\n    - path: HKCU:\\Software\\Microsoft\\Windows\n      \\CurrentVersion\\Explorer\\Advanced\n      name: HideFileExt\n      data: 0\n\n    # Make files and folders search faster on the \n      explorer\n    - path: HKCU:\\Software\\Microsoft\\Windows\n     \\CurrentVersion\\Explorer\\Advanced\n      name: Start_SearchFiles\n      data: 1\n\n  - name: Add Windows hosts to local domain\n    win_domain_membership:\n      hostname: '{{ inventory_hostname_short }}'\n      dns_domain_name: lab.edu\n      domain_ou_path: lab.edu\n      domain_admin_user: 'admin'\n      domain_admin_password: '@dm1nP@55'\n      state: domain\n```", "```\n---\n- name: Application management on Windows hosts\n  hosts: windows\n  gather_facts: yes\n  tasks:\n   - name: Install latest updated PowerShell for \n    optimized Chocolatey commands\n     win_chocolatey:\n       name: powershell\n       state: latest\n\n   - name: Update Chocolatey to its latest version\n     win_chocolatey:\n       name: chocolatey\n       state: latest\n\n   - name: Install a list of applications via Chocolatey\n     win_chocolatey:\n       name: \"{{ item }}\"\n       state: latest\n     with_items:\n         - javaruntime\n         - flashplayeractivex\n         - 7zip\n         - firefox\n         - googlechrome\n         - atom\n         - notepadplusplus\n         - vlc\n         - adblockplus-firefox\n         - adblockplus-chrome\n         - adobereader\n      ignore_errors: yes\n```", "```\n---\n- name: Setup Nagios agent on Windows hosts\n  hosts: windows\n  gather_facts: yes\n  tasks:\n   - name: Copy the MSI file for the NSClient to the \n     windows host\n     win_copy:\n       src: ~/win_apps/NSCP-0.5.0.62-x64.msi\n       dest: C:\\NSCP-0.5.0.62-x64.msi\n\n   - name: Install an NSClient with the appropriate \n     arguments\n     win_msi:\n       path: C:\\NSCP-0.5.0.62-x64.msi\n       extra_args: ADDLOCAL=FirewallConfig,LuaScript,DotNetPluginSupport,Documentation,CheckPlugins,NRPEPlugins,NSCPlugins,NSCAPlugin,PythonScript,ExtraClientPlugin,SampleScripts ALLOWED_HOSTS=127.0.0.1,192.168.10.10 CONF_NSCLIENT=1 CONF_NRPE=1 CONF_NSCA=1 CONF_CHECKS=1 CONF_NSCLIENT=1 CONF_SCHEDULER=1 CONF_CAN_CHANGE=1 MONITORING_TOOL=none NSCLIENT_PWD=\u201dN@g10sP@55w0rd\u201d\n        wait: true\n\n   - name: Copying NSClient personalised configuration \n     file\n     win_copy:\n       src: ~/win_apps/conf_files/nsclient.ini\n       dest: C:\\Program Files\\NSClient++\\nsclient.ini\n\n   - name: Change execution policy to allow the NSClient script remote Nagios execution\n     raw: Start-Process powershell -verb RunAs -ArgumentList 'Set-ExecutionPolicy RemoteSigned -Force'\n\n   - name: Restart the NSclient service to apply the \n     configuration change\n     win_service:\n       name: nscp\n       start_mode: auto\n       state: restarted\n\n   - name: Delete the MSI file\n     win_file: path=C:\\NSCP-0.5.0.62-x64.msi state=absent\n```", "```\n---\n- name: Patch CISCO network devices \n  hosts: ciscoswitches\n  remote_user: admin\n  strategy: debug\n  connection: ssh\n  serial: 1\n  gather_facts: yes\n  tasks:\n    - name: Backup the running-config and the startup-\n      config to the local machine\n      ntc_save_config:\n         local_file: \"images/{{ inventory_hostname \n         }}.cfg\"\n         platform: 'cisco_ios_ssh'\n         username: admin\n         password: \"P@55w0rd\"\n         secret: \"5ecretP@55\"\n         host: \"{{ inventory_hostname }}\"\n\n    - name: Upload binary file to the CISCO devices\n      ntc_file_copy:\n         local_file: \" images/ios.bin'\"\n         remote_file: 'cXXXX-adventerprisek9sna.bin'\n         platform: 'cisco_ios_ssh'\n         username: admin\n         password: \"P@55w0rd\"\n         secret: \"5ecretP@55\"\n         host: \"{{ inventory_hostname }}\"\n\n    - name: Reload CISCO device to apply new patch\n      ios_command:\n         commands:\n           - \"reload in 5\\ny\"\n         platform: 'cisco_ios_ssh'\n         username: admin\n         password: \"P@55w0rd\"\n         secret: \"5ecretP@55\"\n         host: \"{{ inventory_hostname }}\"\n```", "```\n---\n- name: Patch CISCO network devices \n  hosts: ciscoswitches\n  become: yes\n  become_method: enable\n  ansible_connection: network_cli\n  ansible_ssh_pass=admin\n  ansible_become_pass=\u201dP@55w0rd\u201d\n  ansible_network_os=ios\n  strategy: debug\n  connection: ssh\n  serial: 1\n  gather_facts: yes\n  tasks:\n    - name: Update network device hostname to match the \n      one used in the inventory\n      ios_config:\n         authorize: yes\n         lines: ['hostname {{ inventory_hostname }}'] \n         force: yes\n\n    - name: Change the CISCO devices login banner\n      ios_config:\n         authorize: yes\n         lines:\n            - banner motd ^This device is controlled via \n             Ansible. Please refrain from doing any \n             manual modification^\n\n    - name: upgrade SSh service to version2\n      ios_config:\n         authorize: yes\n         lines:\n            - ip ssh version 2\n\n    - name: Configure VTP to use transparent mode\n      ios_config:\n         authorize: yes\n         lines:\n            - vtp mode transparent\n\n    - name: Change DNS servers to point to the Google DNS\n      ios_config:\n         authorize: yes\n         lines:\n            - ip name-server 8.8.8.8\n            - ip name-server 8.8.4.4\n\n    - name: Configure some realisable NTP servers\n      ios_config:\n         authorize: yes\n         lines:\n            - ntp server time.nist.gov\n            - ntp server 0.uk.pool.ntp.org\n```", "```\n---\n- name: Create a virtual machine from a template\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create a virtual machine\n       vmware_guest:\n          hostname: 'vcenter.edu.lab'\n          username: 'vmadmin@lab.edu'\n          password: 'VMp@55w0rd'\n          datecenter: 'vcenter.edu.lab'\n          validate_certs: no\n          esxi_hostname: 'esxi1.lab.edu'\n          template: ubuntu1404Temp\n          folder: '/DeployedVMs'\n          name: '{{ item.hostname }}'\n          state: poweredon\n          disk:\n            - size_gb: 50\n               type: thin\n               datastore: 'datastore1'\n          networks:\n            - name: 'LabNetwork'\n                ip: '{{ item.ip }}'\n                netmask: '255.255.255.0'\n                gateway: '192.168.13.1'\n                dns_servers:\n                  - '8.8.8.8'\n                  - '8.8.4.4'\n          hardware:\n              memory_mb: '1024'\n              num_cpus: '2'\n          wait_for_ip_address: yes\n        delegate_to: localhost\n        with_items:\n            - { hostname: vm1, ip: 192.168.13.10 }\n            - { hostname: vm2, ip: 192.168.13.11 }\n            - { hostname: vm3, ip: 192.168.13.12 }\n\n    - name: add newly created VMs to the Ansible \n      inventory\n       add_host:\n          hostname: \"{{ item.hostname }}\"\n          ansible_host: \"{{ item.ip }}\"\n          ansible_ssh_user: setup\n          ansible_ssh_pass: \"L1nuxP@55w0rd\"\n          ansible_connection: ssh\n          groupname: Linux\n       with_items:\n            - { hostname: vm1, ip: 192.168.13.10 }\n            - { hostname: vm2, ip: 192.168.13.11 }\n            - { hostname: vm3, ip: 192.168.13.12 }\n```", "```\n---\n- name: Create a VMware cluster and populate it\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: Create a VMware virtual cluster\n      vmware_cluster:\n          hostname: 'vcenter.edu.lab'\n          username: 'vmadmin@lab.edu'\n          password: 'VMp@55w0rd'\n          datecenter: 'vcenter.edu.lab'\n          validate_certs: no\n          cluster_name: \"LabCluster\"\n          state: present\n          enable_ha: yes \n          enable_drs: yes\n          enable_vsan: no \n\n    - name: Add a VMware ESXi host to the newly created \n      Cluster\n      vmware_host:\n          hostname: 'vcenter.edu.lab'\n          username: 'vmadmin@lab.edu'\n          password: 'VMp@55w0rd'\n          datecenter: 'vcenter.edu.lab'\n          validate_certs: no\n          cluster_name: \" LabCluster \"\n          esxi_hostname: \"esxi1.lab.edu\"\n          esxi_username: \"root\"\n          esxi_password: \"E5X1P@55w0rd\"\n          state: present\n```"]