["```\nansible-doc apt\n```", "```\nansible-doc -l\n```", "```\nansible servers -m ping\n```", "```\n---\n- name: Ping module playbook usage\n  hosts: servers\n  gather_facts: false\n  tasks:\n    - name: ping the local servers\n      ping:\n```", "```\nansible winservers -m win_reboot\n\nansible win servers -m win_reboot \u2013args=\"msg='Reboot initiated by remote admin' pre_reboot_delay=5\"\n```", "```\n---\n- name: Reboot Windows hosts\n  hosts: winservers\n  fast_gathering: false\n  tasks:\n    - name: restart Windows hosts with default settings\n      win_reboot\n\n    - name: restart Windows hosts with personalized \n      settings\n      win_reboot:\n        msg: \"Reboot initiated by remote admin\"\n        pre_reboot_delay: 5\n```", "```\nansible servers -m copy --args=\"src=./file1.txt dest=~/file1.txt\"\n```", "```\n---\n- name: copy a file to hosts\n  hosts: servers\n  become: true\n  fast_gathering: false\n  tasks:\n    - name: copy a file to the home directory of a user\n      copy:\n         src: ./file1.txt\n         dest: ~/file1.txt\n         owner: setup\n         mode: 0766\n```", "```\n---\n- name: Restart Linux hosts if reboot is required after updates\n  hosts: servers\n  gather_facts: false\n  tasks:\n    - name: check for updates\n      become: yes\n      become_method: sudo\n      apt: update_cache=yes\n\n    - name: apply updates\n      become: yes\n      become_method: sudo\n      apt: upgrade=yes \n\n    - name: check if reboot is required\n      become: yes\n      become_method: sudo\n      shell: \"[ -f /var/run/reboot-required ]\"\n      failed_when: False\n      register: reboot_required\n      changed_when: reboot_required.rc == 0\n      notify: reboot\n\n  handlers:\n    - name: reboot\n      command: shutdown -r now \"Ansible triggered reboot after system updated\"\n      async: 0\n      poll: 0\n      ignore_errors: true\n```", "```\n    - name: apply updates\n      become: yes\n      become_method: sudo\n      apt: upgrade=yes\n      register: output\n\n    - name: print system update status return value\n      debug:\n           var: output.changed\n```", "```\n---\n- name: Linux Module running\n  hosts: servers\n  become: yes\n  gather_facts: false\n  tasks:\n    - name: create a system user to be used by Ansible\n      user:\n        name: install\n        state: present\n        shell: /bin/bash\n        group: sudo\n        system: yes\n        hidden: yes\n        ssh_key_file: .ssh/id_rsa\n        expires: -1\n```", "```\n    - name: create a new group\n      group:\n        name: clustergroup\n        state: present\n        gid: 1040\n```", "```\n[servers]\nserver0  ansible_host=192.168.10.10     \nserver1  ansible_host=192.168.10.11    \nserver2  ansible_host=192.168.10.12\n```", "```\n    - name: change hostname\n      hostname:\n        name: \"{{ inventory_hostname }}\"\n```", "```\nansible -m shell -a hostname servers\n```", "```\n    - name: enable IP forwarding on IP version 4\n      sysctl:\n         name: net.ipv4.ip_forward\n         value: 1\n        sysctrl_set: yes\n        state: present\n       reload: yes \n```", "```\n    - name: start and enable ntp service\n      service:\n          name: ntp\n          state: started\n          enabled: yes\n```", "```\n    - name: start and enable ntp service using systemd\n      systemd:\n        name: ntp\n        state: started\n        enabled: yes\n        masked: no\n        daemon_reload: yes\n      register: systemd\n\n    - debug:\n        var: systemd.status.Description\n```", "```\n    - name: addling nouveau nvidia driver to the kernel    \n      blaklist\n      kernel_blacklist:\n         name: nouveau\n         state: present\n```", "```\n    - name: setup a cron job\n      cron:\n         name: \"shared folder permission enforcer\"\n         hour: 0\n         minute: 0\n         day: *\n         job: \"chmod -R 777 /media/shared\"\n         state: present\n```", "```\n- name: link the cron PATH variable with a new binaries location\n  cron:\n    name: PATH\n    env: yes\n    value: /usr/local/app/bin\n```", "```\n    - name: add a new authorise SSH key to the user \n     install\n      authorized_key:\n          user: install\n          state: present\n          key: \"{{ lookup('file', '/home/install\n          /.ssh/id_rsa.pub') }}\"\n```", "```\n    - name: clone Ansible from github\n      git:\n        repo: https://github.com/ansible/ansible.git\n        dest: /usr/local/ansible\n        clone: yes\n        update: yes \n```", "```\n    - name: change SELinux to permissive\n      selinux:\n        policy: targeted\n        state: permissive\n```", "```\n    - name: run a simple command\n      raw: echo \"this was written by a raw Ansible \n      module!!\" >> ~/raw.txt\n```", "```\n    - name: run a simple command\n      command: cat ~/raw.txt\n      register: rawtxt\n\n    - debug: var=rawtxt.stdout\n```", "```\n    - name: run a simple shell script\n      shell: ./shell_script.sh >> ~/shell.txt\n      args:\n          chdir: /usr/local/\n          creates: ~/shell.txt\n          executable: /bin/csh\n```", "```\n    - name: execute a script on a remote host\n      script: ./shell_script.py \u2013some-argumets \"42\"\n      args:\n          creates: ~/shell.txt\n          executable: python\n```", "```\n    - name: change user1 password\n      expect:\n        command: passwd user1\n        responses:\n          (?i)password: \"Ju5tAn07herP@55w0rd\":\n```", "```\n    - name: install some packages on a Debian OS\n      apt:\n          name: \"{{ pkg }}\"\n          state: latest\n          update_cache: yes\n      vars:\n          pkg:\n          - aha\n          - htop\n```", "```\n    - name: install a package using dnf\n      dnf:\n          name: htop\n          state: latest\n```", "```\n    - name: add epel repo using yum\n      yum:\n           name: https://dl.fedoraproject.org/pub/epel\n           /epel-release-latest-7.noarch.rpm\n          state: present  \n        - name: install ansible using yum\n          yum:\n           name: ansible\n           state: present\n```", "```\n    - name: remove a package using homebrew\n      homebrew:\n         name: htop\n         state: absent\n         update_homebrew: yes\n```", "```\n    - name: install a python library from the default \n   repo\n      pip:\n         name: numpy\n         version: 0.3\n    - name: install a python library from a github\n      pip:\n         name: https://github.com/jakubroztocil/httpie\n         /archive/master.tar.gz \n```", "```\n    - name: install a Perl library on a Linux host\n      cpanm:\n         name: IO\n```", "```\n    - name: create a file with some specific acl\n      file:\n         path: /usr/local/script.py\n         state: touch\n         owner: user1\n         group: developers\n         mode: 0755\n\n    - name: change acl of a file\n      acl:\n         path: /usr/local/script.py\n         entity: user2\n         permission: w\n         state: present\n```", "```\n    - name: copy file from within a remote host\n      copy:\n         src: /usr/local/script.py\n         dest: /home/user1/script.py\n         remote_src: yes\n         owner: user1\n         group: developers\n         mode: 0755\n\n    - name: extract an archive into remote hosts\n      unarchive:\n         src: ~/archive.tar.gz\n         dest: /usr/local/\n         owner: user1\n         group: developers\n         mode: 0755\n\n    - name: download an ansible archive to remote hosts\n      get_url:\n         url: https://github.com/ansible/ansible/archive\n         /v2.6.1.tar.gz\n         dest: /usr/local/ansible_v2.6.1.tar.gz\n         mode: 0777\n```", "```\n    - name: Collect user files from remote hosts\n      fetch:\n         src: /home/user1/.profile\n         dest: /home/alibi/user1-profile-{{ \n          inventory_hostname }}\n         flat: yes \n```", "```\n     - name: change a sudo user to no longer need \n       password with config testing\n      lineinfile:\n         path: /etc/sudoers\n         regexp: '^%sudo\\s'\n         line: '%sudo ALL=(ALL) NOPASSWD: ALL'\n         state: present\n         validate: '/usr/sbin/visudo -cf %s'\n\n     - name: change all static ethernet config to use a \n       higher mtu\n      replace:\n         path: /etc/network/interfaces\n         regexp: '^mtu 1400$'\n         line: 'mtu 9000'\n         backup: yes\n         validate: 'systemd reload networking'\n\n     - name: change a static ethernet configuration\n      replace:\n         path: /etc/network/interfaces\n         block: |\n             iface eth1 inet dhcp\n                   dns-nameserver 8.8.8.8\n                   dns-nameserver 8.8.4.4\n                   mtu 9000\n         backup: yes\n         validate: 'systemd reload networking'\n```", "```\n    - name: Change mtu to 1500 for eth1 interface\n      Interfaces_file:\n         dest: /etc/network/interfaces\n         iface: eth1\n         option: mtu\n         value: 1500\n         backup: yes\n         state: present\n```", "```\n    - name: add port 5000 for iperf testing on all hosts\n      ufw:\n         rule: allow\n         port: 5000\n         proto: tcp\n```", "```\n    - name: disable a haproxy backend host\n      haproxy:\n         state: disabled\n         host: '{{ inventory_hostname }}'\n         socket: /usr/loca/haproxy/haproxy.sock\n         backend: www\n         wait: yes\n```", "```\n - name: start powered off hosts\n wakeonlan:\n mac: \"{{ hostvars[inventory_hostname].ansible_default_ipv4.macaddress }}\"\n port: 8\n delegate_to: localhost\n```", "```\n    - name: create a filesystem from a newly added disk\n      filesystem:\n         fstype: ext4\n         dev: /dev/sdc1\n```", "```\n    - name: mount the recently added volume to the system\n      mount:\n         path: /media/disk1\n         fstype: ext4\n         boot: yes\n         state: mounted\n         src: /dev/sdc1\n```", "```\n    - name: remove a no longer needed partition\n      mount:\n         device: /dev/sdc\n         number: 1\n         state: absent\n```", "```\n    - name: create a new GlusterFS volume\n      gluster_volume:\n         status: present\n         name: gluster1\n         bricks: /bridkes/brik1/g1\n         rebalance: yes\n         cluster:\n            - 192.168.10.10\n            - 192.168.10.11\n            - 192.168.10.12\n         run_once: true\n```", "```\n---\n- name: Windows Module running\n  hosts: winservers\n  gather_facts: false\n  tasks:\n    - name: create a new group dev\n      win_group:\n         name: developers\n         description: Development department group\n         state: present\n\n    - name: create a new user in the dev group\n      win_user:\n         name: winuser1\n         password: Ju5t@n0th3rP@55w0rd\n         state: present\n         groups:\n             - developers\n```", "```\n    - name: disable Windows auto-update\n      win_regedit:\n         path: HKLM:SOFTWARE\\Policies\\Microsoft\\Windows\n         \\WindowsUpdate\\AU\n         name: NoAutoUpdate\n         data: 1\n         type: binary\n```", "```\n    - name: disable Windows update service\n      win_service:\n         name: wuauserv\n         state: stopped\n         start_mode: disabled\n```", "```\n    - name: install updates for Windows related    \n    applications and tools\n      win_updates:\n         category_names: \n             - Applications\n             - Tools\n         state: installed\n         reboot: no\n      become: yes\n      become_user: SYSTEM\n\n    - name: install a specific Windows Hotfix\n      win_hotfix:\n         hotfix_kb: KB4088786 \n         source: C:\\hotfixes\\windows10.0-kb4088786-\n       x64_7e3897394a48d5a915b7fbf59ed451be4b07077c.msu\n         state: present\n\n    - name: enable Hyper-V and Write Filter features\n      win_feature:\n         name: \n             - Hyper-V\n             - Unified-Write-Filter\n         state: present\n```", "```\n    - name: start powered off Windows hosts\n      win_wakeonlan:\n         mac: \"{{  \nhostvars[inventory_hostname].ansible_default_ipv4.macaddress }}\"\n         port: 8\n      delegate_to: remote_system\n```", "```\n    - name: enable the VNC port on the host local \n      firewall\n      win_firewall_rule:\n         name: VNC\n         localport: 5900\n         protocol: udp\n         direction: in\n         action: allow\n         state: present\n         enabled: yes\n```", "```\n    - name: setup the latest version of firefox\n      win_chocolatey:\n         name: firefox\n         state: latest\n\n    - name: update all chocolatey installed tools\n      win_chocolatey:\n         name: all\n         state: latest\n\n    - name: remove 7zip\n      win_chocolatey:\n         name: 7zip\n         state: absent\n```", "```\n    - name: install atom editor on Windows hosts\n      win_package:\n         path: C:\\app\\atom.msi\n         arguments: /install /norestart\n         state: present\n```", "```\n    - name: run a PowerShell script on a working \n     directory\n      win_shell: C:\\scripts\\PSscript.ps1\n         args:\n            chdir: C:\\Users\\winuser1\\Workspace\n\n    - name: execute a PowerShell command on remote \n      Windows hosts\n      win_command: (get-service wuauserv | select status \n       | Format-Wide | Out-String).trim()\n      register: output\n\n    - debug: var=output.stdout\n```", "```\n    - name: schedule running a PowerShell script a \n     specific time\n      win_scheduled_task: \n         name: PowerShellscript\n         description: Run a script at a specific time\n         actions:\n         - path: C:\\Windows\\System32\\WindowsPowerShell\n           \\v1.0\\powershell.exe\n           arguments: -ExecutionPolicy Unrestricted \n        -NonInteractive -File\n         triggers:\n         - type: logon\n        state: present\n        enabled: yes\n```", "```\n    - name: add a new file\n      win_file: \n          path: C:\\scripts\\PSscript2.ps1\n          state: touch\n    - name: remove a folder\n      win_file: \n          path: C:\\scripts\\TestScripts\n          state: absent\n```", "```\n - name: add a new file\n win_share:\n name: devscript\n description: Developers scripts shared folder \n path: C:\\scripts\n list: yes\n full: developers\n read: devops\n deny: marketing\n```", "```\n    - name: remove a folder\n      win_lineinfile: \n          path: C:\\scripts\\PSscript.ps1\n          regexp: '^service='\n          line: 'service=wuauserv'\n```", "```\n    - name: copy a file from one location to other within \n      the Windows hosts\n      win_copy: \n          src: C:\\scripts\\PSscript.ps1\n          dest: C:\\applications\\PSscript.ps1\n          remote_src: yes\n\n    - name: backup scripts folder \n      win_copy: \n          src: C:\\scripts\\\n          dest: D:\\backup\\scripts\n          recurse: yes\n\n    - name: backup scripts folder \n      win_get_url: \n          url: https://www.github.com/scripts\n          /winscript2.ps1\n          dest: C:\\scripts\\ winscript2.ps1\n```", "```\n[ciscosw]\nswitch0            ansible_hosts=192.168.10.250\nswitch1            ansible_hosts=192.168.10.251\nswitch2            ansible_hosts=192.168.10.252\n\n[ciscosw:vars]\nansible_connection=network_cli\nansible_user=admin\nansible_become=yes\nansible_become_method=enable\nansible_network_os=ios\nansible_user=user1\nansible_ssh_pass= \"ju5t@n0th3rp@55\"\n```", "```\n---\n- name: Network Module running\n  hosts: ciscosw\n  tasks:\n    - name: backup a running configuration for a cisco \n     switch\n      net_get:\n          src: running_cfg_{{ inventory_hostname }}.txt\n```", "```\n- name: check on the switch network interfaces status\n  ios_command:\n      commands: show interfaces brief\n      wait_for: result[0] contains Loopback0\n```", "```\n- name: change switch hostname to match the one set in the inventory\n  ios_config:\n      ines: hostname {{ inventory_hostname }}\n\n- name: change IP helper config for DHCP requests sent into the device\n  ios_config:\n      lines: ip helper-address 192.168.10.1\n```", "```\n- name: configure a gigabit interface and make ready to use\n  ios_interface:\n      name: GigabitEthernet0/1\n      description: lab-network-link\n      duplex: full\n      speed: 1000\n      mtu: 9000\n      enabled: True\n      state: up        \n```", "```\n- name: setup a static route on CISCO switches\n  ios_static_route:\n      prefix: 192.168.11.0\n      mask: 255.255.255.0\n      next_hop: 192.168.10.1\n      state: present\n```", "```\n- name: Add new lab VLAN\n  ios_vlan:\n      vlan_id: 45\n      name: lab-vlan\n      state: present\n\n- name: Add network interface to the lab VLAN\n  ios_vlan:\n      vlan_id: 45\n      nterfaces:\n         - GigabitEthernet0/1\n         - GigabitEthernet0/2\n```", "```\npip install pyvmomi\n```", "```\n---\n[vms:vars]\ndatacenter: \"vcenter.lab.edu\"\nvcenter_hostname: \"vcenter.lab.edu\"\nvcenter_username: \"admin\"\nvcenter_password: \"@dm1np@55w0rd\"\n\n[vms]\nvm0\nvm1\nvm2\n\n[esxi_hostname]\nesxihost1         esxihost1.lab.edu\nesxihost2         esxihost2.lab.edu\n```", "```\n---\n- name: VMware Module running\n  hosts: vms\n  tasks:\n    - name: create a new virtual machine from a template\n      vmware_guest:\n          hostname: \"{{ vcenter_hostname }}\"\n          username: \"{{ vcenter_username }}\"\n          password: \"{{ vcenter_password }}\"\n          validate_certs: False\n          folder: /lab-folder\n         name: \"{{ inventory_hostname }}\"\n         state: poweredon\n         template: debian8_temp\n         disk:\n         - size_gb: 15\n           type: thin\n           datastore: labdatastore1\n         hardware:\n            memory_mb: 1024\n            num_cpus: 2\n            num_cpu_cores_per_socket: 2\n            scsi: paravirtual\n            max_connections: 5\n            hotadd_cpu: True\n            hotremove_cpu: True\n            hotadd_memory: True\n            hotremove_memory: True\n            version: 11\n         cdrom:\n             type: iso\n            iso_path: \"[ labdatastore1] /iso_folder/debian8.iso\"\n         networks:\n         - name: Lab Network\n         wait_for_ip_address: yes\n     delegate_to: localhost\n```", "```\n    - name: create a virtual machine snapshot\n      vmware_guest_snapshot:\n          hostname: \"{{ vcenter_hostname }}\"\n          username: \"{{ vcenter_username }}\"\n          password: \"{{ vcenter_password }}\"\n          datacentre: vcenter.lab.edu\n          validate_certs: False\n          folder: /lab-folder\n          name: \"{{ inventory_hostname }}\"\n          state: present\n          snapshot_name: Post_Fixes\n          description: Fixes_done_on_vm\n      delegate_to: localhost\n```", "```\n    - name: run a command on a running virtual machine\n      vmware_guest_snapshot:\n          hostname: \"{{ vcenter_hostname }}\"\n          username: \"{{ vcenter_username }}\"\n          password: \"{{ vcenter_password }}\"\n          datacentre: vcenter.lab.edu\n          validate_certs: False\n          folder: /lab-folder\n          vm_id: \"{{ inventory_hostname }}\"\n          vm_username: setup\n          vm_password: \"@P@55w0rd\"\n          vm_shell: /bin/service\n          vm_shell_args: networking restart\n      delegate_to: localhost\n```", "```\n    - name: restart ESXi host\n      vmware_guest_snapshot:\n          hostname: \"{{ vcenter_hostname }}\"\n          username: \"{{ vcenter_username }}\"\n          password: \"{{ vcenter_password }}\"\n          validate_certs: no\n          esxi_hostname: esxihost1.lab.edu\n          state: reboot-host\n      delegate_to: localhost\n```", "```\npip install 'docker-py>=1.7.0'\n\npip install 'docker-compose>=1.7.0'\n```", "```\n---\n- name: Docker Module running\n  hosts: local\n  tasks:\n    - name: create a container\n      docker_container:\n          name: debianlinux\n          image: debian:9\n          pull: yes\n          state: present\n\n    - name: start a container\n      docker_container:\n          name: debianlinux\n          state: started\n          devices:\n            - \"/dev/sda:/dev/xvda:rwm\"\n\n    - name: stop a container\n       docker_container:\n          name: debianlinux\n          state: stopped\n```", "```\n     - name: pull a container image\n       docker_image:\n          name: ubuntu:18.04\n          pull: yes\n\n     - name: push a container image to docker hub\n       docker_image:\n          name: labimages/ubuntu\n          repository: labimages/ubuntu\n          tag: lab18\n          push: yes\n\n     - name: remove a container image\n       docker_image:\n          name: labimages/ubuntu\n          state: absent\n          tag: lab16\n```", "```\n     - name: login to DockerHub\n       docker_login:\n          username: labuser1\n          password: \"L@bp@55w0rd\"\n          email: user1@lab.edu\n```", "```\n---\nec2_access_key: \"a_key\"\nec2_secret_key: \"another_key\"\n```", "```\npip install boto\n```", "```\n---\n- name: AWS Module running\n  hosts: localhost\n  gather_facts: False\n  tasks:\n    - name: create a new AWS EC2 instance\n      ec2:\n          key_name: ansible_key\n          instance_type: t2.micro\n          image: ami-6b3fd60c\n          wait: yes\n          group: labservers\n          count: 2\n          vpc_subnet_id: subnet-3ba41052\n          assign_public_ip: yes\n```", "```\n    - name: register an AWS AMI image\n      ec2_ami:\n          instance_id: i-6b3fd61c\n          wait: yes\n          name: labami\n          tags:\n             Name: LabortoryImage\n             Service: LabScripts\n```", "```\n    - name: create an EC@ key pair\n      ec2_key:\n          name: ansible2-key\n          key_material: \"{{ lookup('file', '/home/admin\n          /.ssh/id_rsa') }}\"\n          state: present\n```"]