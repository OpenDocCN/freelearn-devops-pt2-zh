- en: Ansible Setup and Configuration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible设置和配置
- en: As Ansible is agentless, unlike other configuration management platforms, it
    only requires a master node installation. Ansible is also particularly light due
    to its lack of daemons, database reliance, and keep-on-running services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Ansible是无代理的，与其他配置管理平台不同，它只需要在主节点上安装。由于它没有守护程序、数据库依赖和持续运行的服务，Ansible也特别轻量。
- en: 'Following our introduction to Ansible, we are now going to look at different
    ways of installing Ansible in your environment, such as bare-metal, in the cloud,
    and the use of Docker containers. We will also look at how to install Ansible
    on multiple Linux operating systems, both from a package manager and from the
    source. Finally, we will look at how to prepare and configure a host so that it
    is Ansible-controllable. This chapter will cover the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了Ansible之后，我们现在将看看在您的环境中安装Ansible的不同方法，比如裸机、云和使用Docker容器。我们还将看看如何在多个Linux操作系统上安装Ansible，包括从软件包管理器和源码安装。最后，我们将看看如何准备和配置主机，使其可以被Ansible控制。本章将涵盖以下内容：
- en: Ansible master nodes and basic Linux installation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible主节点和基本Linux安装
- en: Ansible container setup
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible容器设置
- en: Ansible source installation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible源码安装
- en: Ansible AWS instance setup
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible AWS实例设置
- en: Ansible configuration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible配置
- en: Ansible configuration on Linux and Windows clients
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux和Windows客户端上的Ansible配置
- en: Ansible master node installation
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible主节点安装
- en: 'Ansible uses **Secure Shell** (**SSH**) and WinRM to manage its host clients.
    All installation happens on either the management node or the master node, or
    possibly on multiple nodes when redundancy is needed. We will proceed into the
    installation of Ansible from source, as with Python PyPI on two major Linux families:
    Debian (which includes Debian, Linux Mint, Kali Linux, Ubuntu, and Ubuntu Mate)
    and Red Hat (which includes Red Hat, Fedora, CentOS, and Scientific Linux). We
    will also be looking at the Ansible installation process for Mac OS X, Python
    PyPI, and how to install it from the source. We will cover cloud usage and containerized
    Ansible.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible使用**安全外壳**（**SSH**）和WinRM来管理其主机客户端。所有安装都发生在管理节点或主节点上，或者在需要冗余时可能在多个节点上。我们将继续从源码安装Ansible，就像在两个主要的Linux系列上使用Python
    PyPI一样：Debian（包括Debian、Linux Mint、Kali Linux、Ubuntu和Ubuntu Mate）和Red Hat（包括Red
    Hat、Fedora、CentOS和Scientific Linux）。我们还将看看Mac OS X的Ansible安装过程，Python PyPI以及如何从源码安装。我们将涵盖云使用和容器化的Ansible。
- en: If you have a choice, we recommend using the default package manager for Red
    Hat, CentOS, Debian, Ubuntu, and Mac OS X. Using the package manager allows the
    installation of the latest stable version of Ansible. Python PyPI can also be
    relied on for its capacity to deliver the latest stable version of Ansible, especially
    when using an old LTS or a stable Linux version.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可以选择，我们建议在Red Hat、CentOS、Debian、Ubuntu和Mac OS X上使用默认的软件包管理器。使用软件包管理器可以安装最新稳定版本的Ansible。Python
    PyPI也可以依赖于其提供最新稳定版本的Ansible，特别是在使用旧的LTS或稳定的Linux版本时。
- en: For use in a cloud environment, there are many community instances of Ansible.
    We recommend using the most popular instance with the appropriate version.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在云环境中使用，有许多社区实例可供选择。我们建议使用最受欢迎的实例以及相应的版本。
- en: Prerequisites
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: In this respect, Ansible is awesome. For a Linux package installation, all you
    need is Python 2 (version 2.6 or higher) or Python 3 (version 3.5 or higher).
    For source installation, we may need the development suite, such as the `build-essential`
    package for the Debian family, or the `Development Tools` group package for the
    Red Hat family.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面，Ansible非常棒。对于Linux软件包安装，你只需要Python 2（版本2.6或更高）或Python 3（版本3.5或更高）。对于源码安装，我们可能需要开发套件，比如Debian系列的`build-essential`软件包，或者Red
    Hat系列的`Development Tools`组软件包。
- en: Most package managers of Linux operating systems will automatically download
    the appropriate Python version and its dependencies when asked to install Ansible.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Linux操作系统的软件包管理器在安装Ansible时会自动下载适当的Python版本及其依赖项。
- en: As for Mac OS X, having Homebrew and Xcode installed should do the job. Bear
    in mind that these are a requirement needed to install the Ansible package.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Mac OS X，安装Homebrew和Xcode应该就可以了。请记住，这些是安装Ansible软件包所需的要求。
- en: Before using Ansible Mac OS X, you need to run a command as a root user to allow
    yourself to control more than 15 hosts. This has something to do with the limit
    of files to be handled simultaneously. The command is `sudo launchctl limit maxfiles unlimited`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Mac OS X上的Ansible之前，您需要以root用户身份运行一个命令，以允许自己控制超过15个主机。这与同时处理文件的限制有关。命令是`sudo
    launchctl limit maxfiles unlimited`。
- en: With regard to the Ansible container installation, we need a container engine.
    In our case, we will be using Docker, or any equivalent platform, such as Singularity
    or Shifter. For the cloud installation, all we need is an SSH client to connect
    to the AWS instance. Other cloud providers, such as Google Cloud Platform or Microsoft
    Azure, also support Ansible instances.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Ansible容器安装，我们需要一个容器引擎。在我们的情况下，我们将使用Docker，或者任何等效平台，比如Singularity或Shifter。对于云安装，我们只需要一个SSH客户端来连接到AWS实例。其他云提供商，如Google
    Cloud Platform或Microsoft Azure，也支持Ansible实例。
- en: You can always create your own customized cloud instance on any platform. Our
    recommendations are for the vast majority of use cases where we believe that the
    AWS-supported and community instances are tested by many users, and they are as
    stable and reliable as they can be.Other requirements are not mentioned here because
    they are not strictly essential for the Ansible main functions and modules, but
    instead for very specific plugins and modules. We will cover these when we talk
    about those modules and plugins.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在任何平台上创建自己定制的云实例。我们的建议适用于绝大多数使用情况，我们相信AWS支持和社区实例经过了许多用户的测试，它们是尽可能稳定和可靠的。其他要求没有在这里提到，因为它们对于Ansible的主要功能和模块并不是严格必要的，而是针对非常特定的插件和模块。当我们讨论这些模块和插件时，我们会涵盖它们。
- en: Red Hat, CentOS, and Fedora package installation
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Red Hat、CentOS和Fedora软件包安装
- en: 'If you are using Yellowdog Updater, Modified (Yum), you will have an extra
    step, since Ansible is not located in the default RHEL repositories. As you may
    have experienced when installing tools in the past, the **Extra Package for Enterprise
    Linux** (**EPEL**) is often required to be installed before you can use the package
    manager to install the tools. This is a very straightforward step. We first need to
    download the `epel-release` `rpm` file from the Fedora Project website: [http://fedoraproject.org/wiki/EPE](http://fedoraproject.org/wiki/EPEL)[L](http://fedoraproject.org/wiki/EPEL).
    We then need to install it using `rpm` as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用Yellowdog Updater, Modified (Yum)，则需要额外的步骤，因为Ansible不位于默认的RHEL存储库中。正如您在过去安装工具时可能遇到的那样，通常需要在使用软件包管理器安装工具之前安装**企业Linux的额外软件包**（**EPEL**）。这是一个非常简单的步骤。我们首先需要从Fedora
    Project网站下载`epel-release` `rpm`文件：[http://fedoraproject.org/wiki/EPE](http://fedoraproject.org/wiki/EPEL)[L](http://fedoraproject.org/wiki/EPEL)。然后，我们需要使用`rpm`进行安装，如下所示：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tools downloaded from EPEL are not actually tested by Red Hat quality engineers,
    therefore extra care should be taken when downloading on production servers it
    as may disrupt support.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从EPEL下载的工具实际上并未经过Red Hat质量工程师的测试，因此在生产服务器上下载时需要额外小心，因为可能会影响支持。
- en: 'The Ansible engine repository (available at [https://access.redhat.com/articles/3174981](https://access.redhat.com/articles/3174981))
    is another valid repository to download the latest releases from Ansible. To access
    its packages using Red Hat Linux only, we first need to enable it as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible引擎存储库（可在[https://access.redhat.com/articles/3174981](https://access.redhat.com/articles/3174981)找到）是另一个有效的存储库，可用于下载Ansible的最新版本。要仅使用Red
    Hat Linux访问其软件包，我们首先需要启用它，如下所示：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After that, the package manager will need to update its cache, the package
    list. We use Yum to do so, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，软件包管理器将需要更新其缓存，即软件包列表。我们使用Yum来执行此操作，如下所示：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Just like installing any other package using Yum, we need to specify `ansible`
    as the input for the `install` option:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用Yum安装任何其他软件包一样，我们需要将`ansible`指定为`install`选项的输入：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Most of the Red Hat family operating systems should accept those commands to
    set up Ansible. Fedora 18 and later versions have a next-generation package manager,
    **Dandified Yum** (**DNF**). This is currently the default package manager from
    Fedora 22 and onwards. After installing the EPEL package using RPM, we need to
    run the following command to update the DNF package list:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Red Hat系列操作系统应该接受这些命令来设置Ansible。 Fedora 18及更高版本具有下一代软件包管理器**Dandified Yum**（**DNF**）。这是从Fedora
    22开始的默认软件包管理器。使用RPM安装EPEL软件包后，我们需要运行以下命令来更新DNF软件包列表：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We then install Ansible using the following command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用以下命令安装Ansible：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Using the Red Hat family of operating systems, Ansible installation can be
    done by getting the appropriate RPM file and installing it using RPM. First, we
    need to download the appropriate RPM file from the Ansible releases link: [https://releases.ansible.com/ansible/rpm/](https://releases.ansible.com/ansible/rpm/)*.*
    Download the RPM file with the desired Ansible version and install it as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Red Hat系列操作系统，可以通过获取适当的RPM文件并使用RPM进行安装来安装Ansible。首先，我们需要从Ansible发布链接下载适当的RPM文件：[https://releases.ansible.com/ansible/rpm/](https://releases.ansible.com/ansible/rpm/)。下载所需的Ansible版本的RPM文件，并按以下方式安装：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If needed, RPM files can also be built and installed from a source easily.
    We recommend using the official GitHub Ansible repository. Firstly, we need to
    get the project folder using Git. We may need to have Git installed already to
    be able to download it easily:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，RPM文件也可以轻松地从源代码构建并安装。我们建议使用官方GitHub Ansible存储库。首先，我们需要使用Git获取项目文件夹。我们可能需要已经安装了Git才能轻松下载它：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, we need to build the Ansible `rpm` file and install it using the same
    command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要构建Ansible的`rpm`文件，并使用相同的命令进行安装：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Debian package installation
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Debian软件包安装
- en: For Debian users, as you may already know, if you want to use the latest versions
    of a tool, you need to be running the latest stable or testing release of the
    Debian OS. The testing release is not recommended, but is used by some people.
    Because Debian is very reliable, operating system administrators tend to set up
    a Debian server and then forget about it for years and years, because it continues
    to do what it is supposed to do without a single problem. Often, administrators
    tend to have lots of old, stable Debian releases running. We don't recommend using
    these if you want to have the latest Ansible version, with all its perks, modules,
    and plugins, unless you do an alternative installation (with PyPI, a source installation,
    or via a container).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Debian用户，您可能已经知道，如果要使用工具的最新版本，需要运行最新的稳定或测试版本的Debian操作系统。不建议使用测试版本，但有些人使用。由于Debian非常可靠，操作系统管理员倾向于设置Debian服务器，然后多年多年地忘记它，因为它继续按照预期的方式运行，没有任何问题。通常，管理员倾向于运行许多旧的、稳定的Debian版本。如果您想要使用最新的Ansible版本及其所有优点、模块和插件，我们不建议使用这些旧版本，除非您进行替代安装（使用PyPI、源安装或通过容器）。
- en: 'We are going to be using Debian 9 (Stretch) as it is the latest Debian stable
    release. Debian 9 allows you to use many Ubuntu package sources for Ansible. We
    can either add the DEB line to the `source.list` file or add the **Personal Package
    Archives** (**PPA**) to the list. First, we need to install the software properties
    package:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Debian 9（Stretch），因为它是最新的Debian稳定版本。Debian 9允许您使用许多Ubuntu软件包源来安装Ansible。我们可以将DEB行添加到`source.list`文件中，也可以将**个人软件包存档**（**PPA**）添加到列表中。首先，我们需要安装软件属性包：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We then use a text editor and add the following DEB to `/etc/apt/source.list`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用文本编辑器并将以下DEB添加到`/etc/apt/source.list`中：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A faster way to add a DEB line at the end of the source file is as follows:
    `echo "deb http://ppa.launchpad.net/ansible/ansible/ubuntu trusty main" >> /etc/apt/source.list`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在源文件的末尾添加DEB行的更快方法如下：`echo "deb http://ppa.launchpad.net/ansible/ansible/ubuntu
    trusty main" >> /etc/apt/source.list`
- en: 'Then authenticate the link by adding its key to `apt`:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过将其密钥添加到`apt`来验证链接：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For the latest Debian release, the PPA repository can be used directly as well,
    by adding the link to the APT repository: `sudo apt-add-repository ppa:ansible/ansible`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最新的Debian版本，也可以直接使用PPA存储库，方法是将链接添加到APT存储库：`sudo apt-add-repository ppa:ansible/ansible`
- en: 'Usually, adding a repository requires you to update the package manager cache:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，添加存储库需要您更新软件包管理器缓存：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then we can install Ansible:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以安装Ansible：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Most of the tutorials in further chapters are carried out on Debian 8 (Jessie)
    with Ansible installed and updated using Python PyPI. This is just as stable,
    up to date, and reliable as any other standard way of installing Ansible on an
    operating system's latest release.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续章节中，大多数教程都是在已安装并使用Python PyPI更新的Debian 8（Jessie）上进行的。这与在操作系统的最新版本上安装Ansible的任何其他标准方式一样稳定，最新且可靠。
- en: Ubuntu package installation
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu软件包安装
- en: 'The best way to install Ansible on a recent release is to add the Ansible PPA
    for Ubuntu `ppa:ansible/ansible` (`launchpad.net/~ansible/+archive/ubuntu/ansible`).
    This should be added using the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在最新版本上安装Ansible的最佳方法是为Ubuntu添加Ansible PPA `ppa:ansible/ansible`（`launchpad.net/~ansible/+archive/ubuntu/ansible`）。这应该使用以下命令添加：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Adding a PPA repository requires you to confirm a key server setup. This is
    accepted by pressing *Enter*.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 添加PPA存储库需要您确认密钥服务器设置。通过按*Enter*键来接受。
- en: 'We then need to update the package manager cache, also called the system packages
    index, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要更新软件包管理器缓存，也称为系统软件包索引，如下所示：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we can install Ansible:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以安装Ansible：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: macOS X package installation
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS X软件包安装
- en: Installing Ansible on the MAC OS X system can be achieved using one of two tools.
    The first, which uses Python PyPI, is described in the following section. The
    second uses the Mac OS X open source package management system Homebrew (brew.sh).
    In this section, we will be describing how to install Ansible using Homebrew.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在MAC OS X系统上安装Ansible可以使用两种工具之一来实现。第一种使用Python PyPI，将在以下部分中描述。第二种使用Mac OS X开源软件包管理系统Homebrew（brew.sh）。在本节中，我们将描述如何使用Homebrew安装Ansible。
- en: 'To be able to use Homebrew, we first need to make sure it is installed, as
    it is not a default system application. You need to build it into the system using
    a Ruby compiler. For that, you also need to install Xcode (found here: [developer.apple.com/xcode/](http://developer.apple.com/xcode/))
    and accept its user license. We then run the following command on its Terminal:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够使用Homebrew，我们首先需要确保它已安装，因为它不是默认的系统应用程序。您需要使用Ruby编译器将其构建到系统中。为此，您还需要安装Xcode（在此处找到：[developer.apple.com/xcode/](http://developer.apple.com/xcode/)），并接受其用户许可协议。然后在其终端上运行以下命令：
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This command may take some time depending on your internet access and computer
    speed.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令可能需要一些时间，具体取决于您的互联网访问和计算机速度。
- en: 'We can then use Homebrew to install Ansible:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以使用Homebrew来安装Ansible：
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Python PyPI installation
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python PyPI安装
- en: To be able to install Ansible using PyPI, we first need to have PyPI installed.
    It can be easily installed using most package managers, some of which are outlined
    in the following section.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够使用PyPI安装Ansible，我们首先需要安装PyPI。它可以使用大多数软件包管理器轻松安装，其中一些在以下部分中概述。
- en: 'The Red Hat Yum installation is implemented as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Red Hat Yum安装如下实现：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The Debian APT installation uses the following command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Debian APT安装使用以下命令：
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For other Linux systems, using Python:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他Linux系统，使用Python：
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The Mac OS X Homebrew installation is as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Mac OS X Homebrew安装如下：
- en: '[PRE22]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'From the PyPI repository, by having PyPI installed:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从PyPI存储库中，通过安装PyPI：
- en: '[PRE23]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can also use a GitHub source to get the latest development version:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用GitHub源获取最新的开发版本：
- en: '[PRE24]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To choose a specific version of Ansible using PyPI, we can use the following
    command: `sudo pip install ansible==2.4.0`. To upgrade the latest version, we
    can add the `--upgrade` option so the command looks as follows: `sudo pip install
    ansible --upgrade`.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用PyPI选择特定版本的Ansible，我们可以使用以下命令：`sudo pip install ansible==2.4.0`。要升级到最新版本，我们可以添加`--upgrade`选项，使命令如下：`sudo
    pip install ansible --upgrade`。
- en: Source GitHub or tarball installation
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源GitHub或tarball安装
- en: Being able to build up Ansible from its source is helpful for users in an uncommon
    environment, or for those who have some special requirements, such as setting
    up Ansible without the need of a package manager or being limited to the latest
    stable version of Ansible. Using the development version of Ansible (or beta)
    always puts its user at risk of having unstable modules and plugins, but also
    allows for early access to future modules.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 能够从源代码构建Ansible对于在不常见的环境中使用的用户或者对于那些有一些特殊要求的用户是有帮助的，比如在不需要软件包管理器或者受限于Ansible的最新稳定版本的情况下设置Ansible。使用Ansible的开发版本（或beta版）总是会使用户面临不稳定的模块和插件的风险，但也允许提前访问未来的模块。
- en: 'To acquire Ansible''s source package, we can use two different methods: downloading
    the `.tar` file, or cloning the GitHub repository of the project. The Ansible
    project source files are located in its releases page (`releases.ansible.com/ansible/`),
    and the GitHub source can be cloned from the official GitHub project (`github.com/ansible/ansible`).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取Ansible的源包，我们可以使用两种不同的方法：下载`.tar`文件，或者克隆项目的GitHub存储库。Ansible项目源文件位于其发布页面（`releases.ansible.com/ansible/`）中，GitHub源可以从官方GitHub项目（`github.com/ansible/ansible`）中克隆。
- en: 'To download the tarball file, use your favorite file fetching tool (such as
    curl, wget, or axel):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载tarball文件，请使用您喜欢的文件获取工具（如curl、wget或axel）：
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We then need to un-archive the tarball:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要解压tarball：
- en: '[PRE26]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Alternatively, we can use Git to clone the GitHub project locally. We need to
    make sure that Git is installed on the system, and then we can start cloning.
    This process is shown for a number of systems in the following snippets.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用Git在本地克隆GitHub项目。我们需要确保系统上已安装Git，然后我们可以开始克隆。此过程在以下片段中显示了一些系统。
- en: 'The following command line shows how to install `git` on a Linux from the Red
    Hat family:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令行显示了如何在红帽系列的Linux上安装`git`：
- en: '[PRE27]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following command line shows how to install `git` on a Linux from the Debian
    family:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令行显示了如何在Debian系列的Linux上安装`git`：
- en: '[PRE28]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following command line shows how to install `git` on Mac OS X:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令行显示了如何在Mac OS X上安装`git`：
- en: '[PRE29]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'On all the systems, to clone the Ansible GitHub project:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有系统上，要克隆Ansible GitHub项目：
- en: '[PRE30]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We then need to start building Ansible, either by getting the tarball or the
    source from GitHub:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要开始构建Ansible，可以通过获取tarball或从GitHub获取源代码：
- en: '[PRE31]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To make sure that all the requirements for building Ansible are met easily, we
    will be using Python PyPI. The PyPI installation on multiple systems is covered
    in the preceding section. For this section, we will use `easy_install`, which
    only requires you to install a version of Python on the system:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保轻松满足构建Ansible的所有要求，我们将使用Python PyPI。在前面的部分中涵盖了多个系统上的PyPI安装。对于本节，我们将使用`easy_install`，它只需要您在系统上安装一个版本的Python：
- en: '[PRE32]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We now install the Python requirements:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们安装Python要求：
- en: '[PRE33]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We need to set up the environment as follows to be able to use Ansible:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要按照以下方式设置环境才能使用Ansible：
- en: '[PRE34]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Updating Ansible when using the GitHub project can be trickier. We need to
    pull the project and its submodules as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用GitHub项目时更新Ansible可能会更加棘手。我们需要按以下方式拉取项目及其子模块：
- en: '[PRE35]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Every time those commands are executed, we need to make sure that the environment
    is properly set up:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 每次执行这些命令时，我们需要确保环境已正确设置：
- en: '[PRE36]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The location of the environmental source can change whenever the Ansible source
    is located. The Ansible inventory (usually located in `/etc/ansible/hosts`) and
    its configuration file (usually located in `/etc/ansible/ansible.cfg`) can also
    be changed to accommodate permission restrictions or provide Ansible users with
    easier access to enable modifications or restrict them. This will be covered in
    more detail later in this chapter.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当Ansible源位于的位置时，环境源的位置可能会发生变化。Ansible清单（通常位于`/etc/ansible/hosts`）及其配置文件（通常位于`/etc/ansible/ansible.cfg`）也可以更改以适应权限限制或为Ansible用户提供更容易访问以启用修改或限制它们。这将在本章后面更详细地介绍。
- en: Ansible Docker container installation
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible Docker容器安装
- en: Using Ansible on a container requires a container engine to be running. There
    are multiple choices for which container to use, the most famous ones being Docker,
    Kubernetes, and Red Hat OpenShift. In this book, we will only cover Docker. We
    need to have a Docker engine running on the machine that is going to host the
    Ansible Container. The information about Docker installation can be found in its
    official documentation at: [https://docs.docker.com/install/](https://docs.docker.com/install/).
    This covers a large number of operating systems.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器上使用Ansible需要运行容器引擎。有多种选择可用的容器，最著名的是Docker、Kubernetes和Red Hat OpenShift。在本书中，我们只会涵盖Docker。我们需要在托管Ansible容器的机器上运行Docker引擎。Docker安装信息可以在其官方文档中找到：[https://docs.docker.com/install/](https://docs.docker.com/install/)。这涵盖了大量操作系统。
- en: 'Here, we will assume that the Docker engine is installed, and that the current
    user has been added to the Docker group so that they can manage the local Docker
    containers on the machine. You can also choose to build your own container by
    selecting any of the systems that you are familiar with for the source image.
    Make sure that you have all requirements installed. The following is an example
    of a basic Dockerfile on Linux Alpine, one of the lightest systems used on containers:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们假设Docker引擎已安装，并且当前用户已添加到Docker组，以便他们可以在机器上管理本地Docker容器。您还可以选择通过选择您熟悉的任何系统来构建自己的容器作为源镜像。确保您已安装所有要求。以下是Linux
    Alpine上的基本Dockerfile示例，这是容器中使用的最轻的系统之一：
- en: '[PRE37]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We then build the container using the `build` function on Docker:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用Docker上的`build`函数构建容器：
- en: '[PRE38]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The build might take some time to finish. We can then try and run our Ansible
    container in several different ways, depending on how we are going to use it.
    For example, we can verify the Ansible version on the container:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 构建可能需要一些时间来完成。然后我们可以尝试以几种不同的方式运行我们的Ansible容器，这取决于我们将如何使用它。例如，我们可以验证容器上的Ansible版本：
- en: '[PRE39]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We can also run a ping task:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以运行一个ping任务：
- en: '[PRE40]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'By changing the `ENTRYPOINT` of our Dockerfile code from `[ansible]` to `[ansible-playbook]`,
    we can create a script that can use our container to work as if `docker-playbook`
    is installed. This will be explained further in [Chapter 3](24ea3f87-4d88-4675-8f6d-b16dabf15da8.xhtml),
    *Ansible Inventory and Playbook*. Create a script called `ansible-playbook` and
    add it to the `PATH` environmental variable with the following code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将我们的Dockerfile代码的`ENTRYPOINT`从`[ansible]`更改为`[ansible-playbook]`，我们可以创建一个脚本，可以使用我们的容器来工作，就好像安装了`docker-playbook`一样。这将在[第3章](24ea3f87-4d88-4675-8f6d-b16dabf15da8.xhtml)中进一步解释，*Ansible清单和Playbook*。创建一个名为`ansible-playbook`的脚本，并使用以下代码将其添加到`PATH`环境变量中：
- en: '[PRE41]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Ensure that the script has execution permission by using the `chmod +x` command
    line. It can be copied or sym-linked to `/usr/local/bin/` to automatically add
    it to `PATH`.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 确保脚本具有执行权限，可以使用`chmod +x`命令行。它可以被复制或符号链接到`/usr/local/bin/`，以自动将其添加到`PATH`。
- en: 'This script can be used as follows to execute a playbook on a specific host
    located in the `inventory` folder:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下脚本在`inventory`文件夹中的特定主机上执行playbook：
- en: '[PRE42]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Ansible instance on AWS
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS上的Ansible实例
- en: There are multiple public cloud providers, such as Google Cloud Platform or
    Microsoft Azure, that offer the same service as **Amazon Web Services** (**AWS**).
    In this section, we aren't going to cover much of the installation process, since
    the instance is already pre-installed and configured.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个公共云提供商，例如Google Cloud Platform或Microsoft Azure，提供与**Amazon Web Services**（**AWS**）相同的服务。在本节中，我们不会涵盖安装过程的大部分，因为实例已经预安装和配置。
- en: 'Instead, this section will be a brief step-by-step guide to setting up an already
    existing Ansible instance on AWS. First, we need to access the EC2 Dashboard of
    our AWS account:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，本节将是一个简短的逐步指南，介绍如何在AWS上设置已经存在的Ansible实例。首先，我们需要访问AWS帐户的EC2仪表板：
- en: '![](assets/20266992-496c-41a4-96b5-155e4f81680e.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/20266992-496c-41a4-96b5-155e4f81680e.png)'
- en: 'We then choose to launch a new instance and look for the `Ansiblemaster` instance.
    Be careful not to choose one of the Ansible Tower instances:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们选择启动一个新实例并寻找`Ansiblemaster`实例。注意不要选择Ansible Tower实例之一：
- en: '![](assets/b1d11c61-095c-4ecd-9f4c-823a7ebe0b01.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b1d11c61-095c-4ecd-9f4c-823a7ebe0b01.png)'
- en: 'We then select the number of computer resources that we want to give to our
    instance:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们选择要分配给我们的实例的计算资源数量：
- en: '![](assets/311b2028-80f8-4ee7-ace2-2dd07da4c8b0.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/311b2028-80f8-4ee7-ace2-2dd07da4c8b0.png)'
- en: 'Then, we add in the disk space to be used by the instance, as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们添加要由实例使用的磁盘空间，如下所示：
- en: '![](assets/5c0bd940-f7b3-4449-a440-5172b9a14171.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5c0bd940-f7b3-4449-a440-5172b9a14171.png)'
- en: 'We then confirm and launch the instance:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 然后确认并启动实例：
- en: '![](assets/b6f01939-5d18-4a74-86b2-e3b3508b7c7f.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b6f01939-5d18-4a74-86b2-e3b3508b7c7f.png)'
- en: 'We can either create a new SSH access key or use an old one:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个新的SSH访问密钥，也可以使用旧的密钥：
- en: '![](assets/79fc442d-bc35-4748-966f-011f47a2959f.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/79fc442d-bc35-4748-966f-011f47a2959f.png)'
- en: 'On our local terminal, we set permissions into the key file and use SSH to
    access the instance:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的本地终端上，我们设置密钥文件的权限并使用SSH访问该实例：
- en: '![](assets/43dbae09-025a-426f-92fe-8c6f3a27508b.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/43dbae09-025a-426f-92fe-8c6f3a27508b.png)'
- en: 'We can check Ansible''s version and configuration. We can always update it
    to the necessary or the latest stable version. The following print screens show
    how to move from one Ansible version to another using the instance OS package
    manager. First, we identify the currently installed version:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以检查Ansible的版本和配置。我们可以随时将其更新到必要或最新的稳定版本。以下打印屏幕显示了如何使用实例OS包管理器从一个Ansible版本切换到另一个版本。首先，我们确定当前安装的版本：
- en: '![](assets/57ee3aca-6e76-441a-a19a-fdba3d65b761.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/57ee3aca-6e76-441a-a19a-fdba3d65b761.png)'
- en: 'Then, we run a full system software update:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们运行完整的系统软件更新：
- en: '![](assets/46d02e81-653e-4122-b071-b7b9af232453.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/46d02e81-653e-4122-b071-b7b9af232453.png)'
- en: 'Finally, with the completion of the update process, we re-identify the Ansible
    version:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，完成更新过程后，我们重新确认Ansible版本：
- en: '![](assets/b7ca36c7-981a-49d3-bc4e-f434cb50ba12.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b7ca36c7-981a-49d3-bc4e-f434cb50ba12.png)'
- en: Finally, we can use the newly installed Ansible to orchestrate the task within
    our AWS environment.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用新安装的Ansible在我们的AWS环境中协调任务。
- en: Master node essential configuration
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主节点基本配置
- en: The Ansible configuration is mainly stored in the `ansible.cfg` configuration
    file, which is usually located in `/etc/ansible/ansible.cfg` in most system package
    managers and the Python PyPI installation. It may also be located in the home
    directory of the user who installed Ansible, or whichever location the `ANSIBLE_CONFIG` environment
    variable is pointing to. In this section, we will be covering the most useful
    configuration that can be altered using Ansible to make your life easier.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible配置主要存储在`ansible.cfg`配置文件中，通常位于大多数系统包管理器和Python PyPI安装中的`/etc/ansible/ansible.cfg`。它也可以位于安装Ansible的用户的主目录中，或者`ANSIBLE_CONFIG`环境变量指向的任何位置。在本节中，我们将介绍可以使用Ansible修改的最有用的配置，以使您的生活更轻松。
- en: 'Open your `ansible.cfg` file using your favorite text editor, either in CLI
    mode (using vi or nano) or with a GUI (using Gedit or Atom):'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器打开您的`ansible.cfg`文件，可以是CLI模式（使用vi或nano）或GUI模式（使用Gedit或Atom）：
- en: '[PRE43]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: There is no need to worry about which text editor you are using—there will always
    be someone who disagrees with you. Use whichever one you are most comfortable
    with.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心使用哪种文本编辑器，总会有人不同意。使用您最舒适的那个。
- en: Many would agree that the default configuration of Ansible is fine for normal
    usage. Ansible is available to use as soon as it is installed.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人会同意，Ansible的默认配置对于正常使用是可以的。安装后可以立即使用Ansible。
- en: From Ansible version 2.4 onwards, there is a command line, `ansible-config`,
    that allows the users to list the enabled options and their values to check its
    configuration faster.The disabled configuration options are implemented either
    by using a hash sign, `#`, or a semicolon, `;`. The semicolon, `;`, is often used
    to introduce an enabled option.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 从Ansible 2.4版本开始，有一个命令行`ansible-config`，允许用户列出已启用的选项及其值，以更快地检查其配置。禁用的配置选项通过使用井号`#`或分号`;`来实现。分号`;`通常用于引入已启用的选项。
- en: 'You can always access the Ansible example configuration file to have a look
    at how the options are being used. The example can be found at the following link:
    [raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg](http://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg).'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以随时访问Ansible示例配置文件，查看选项的使用方式。示例可以在以下链接找到：[raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg](http://raw.githubusercontent.com/ansible/ansible/devel/examples/ansible.cfg)。
- en: Ansible's configuration file is divided into several sections. The main section
    that we will concentrate on is the `[defaults]` general section. We will start
    by introducing the basic parameters in this section.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible的配置文件分为几个部分。我们将集中在`[defaults]`一般部分。我们将从介绍此部分中的基本参数开始。
- en: '`inventory`**:** This is a parameter to indicate the file that is hosting the
    inventory for Ansible. On most systems, it points to `/etc/ansible/hosts`, as
    follows:'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单：这是指示Ansible托管清单的文件的参数。在大多数系统上，它指向`/etc/ansible/hosts`，如下所示：
- en: '[PRE44]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '`roles_path`: This is a parameter to indicate where the Ansible playbook should
    look for additional roles to the system default:'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`roles_path`：这是一个参数，用于指示Ansible playbook应该在系统默认位置之外查找附加角色：'
- en: '[PRE45]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '`log_path`: This a parameter to indicate where Ansible should be storing its
    log. Make sure that the user running Ansible has permission to write on the specified
    location. An example is as follows:'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_path`：这是一个参数，用于指示Ansible应该存储其日志的位置。确保运行Ansible的用户有权限在指定的位置上写入。示例如下：'
- en: '[PRE46]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '`retry_files_enabled`: This is a parameter to enable the retry feature, allowing
    Ansible to create a `.retry` file whenever a playbook fails. It is better to keep
    this disabled unless you really need it. This is because it creates multiple files
    and clogs your playbook folder with old failed tasks that are already logged in
    both the Ansible log and the dashboard''s playbook execution status section. Here
    is an example of the parameter disabled:'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`retry_files_enabled`：这是一个参数，用于启用重试功能，允许Ansible在播放书失败时创建一个`.retry`文件。最好保持此参数禁用，除非您确实需要它。这是因为它会创建多个文件，并且会在Ansible日志和仪表板的播放书执行状态部分中记录已经记录的旧失败任务。以下是禁用该参数的示例：'
- en: '[PRE47]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '`host_keychecking`: This is a parameter that changes its recommended value
    depending on the environment. Usually, it is used in a continuously changing environment,
    where old machines get deleted and new machines take their places. It is more
    frequently used in a cloud or a virtualized environment, where virtual machines
    and deployment instances take the IP addresses of older machines. Ansible holds
    a key for those machines to prevent security issues. Disabling this parameter
    will make Ansible ignore the error messages related to the `known_hosts` keys:'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host_keychecking`：这是一个参数，其推荐值取决于环境。通常，它用于不断变化的环境，旧机器被删除，新机器取代它们的位置。它更频繁地用于云或虚拟化环境，其中虚拟机和部署实例取代了旧机器的IP地址。Ansible为这些机器保存了一个密钥以防止安全问题。禁用此参数将使Ansible忽略与`known_hosts`密钥相关的错误消息：'
- en: '[PRE48]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '`forks`: This is a parameter to define the number of parallel tasks executed
    to the client hosts. The default number is five, to save on both resources and
    network bandwidth. If there are enough resources and a large bandwidth to serve
    many hosts, it can be raised to the maximum number of hosts as follows:'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`forks`：这是一个参数，用于定义对客户端主机执行的并行任务数量。默认数量为五，以节省资源和网络带宽。如果有足够的资源和大带宽来为许多主机提供服务，可以将其提高到最大主机数量，如下所示：'
- en: '[PRE49]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '`sudo_user and ask_sudo_pass`: These are both legacy parameters. It is still
    possible to use them with the current version of Ansible, but they are not reliable.
    It is recommended to set these parameters when creating groups in Ansible''s inventory—this
    is explained in more detail in the next chapter, but an example is as follows:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sudo_user`和`ask_sudo_pass`：这两个是遗留参数。在当前版本的Ansible中仍然可以使用它们，但它们不太可靠。建议在创建Ansible清单中的组时设置这些参数——这将在下一章节中详细解释，但示例如下：'
- en: '[PRE50]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '`remote_port`: This is a parameter to indicate which port is to be used by
    SSH on the client hosts. It is also a parameter that is better set in the inventory
    groups:'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remote_port`：这是一个参数，用于指示客户端主机上SSH要使用的端口。这也是一个最好在清单组中设置的参数：'
- en: '[PRE51]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '`nocolor`: This is an optional parameter. It allows you to show different colors
    for the Ansible tasks and playbook to indicate errors and successes:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nocolor`：这是一个可选参数。它允许您为Ansible任务和播放书显示不同的颜色，以指示错误和成功：'
- en: '[PRE52]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The following parameters relate to the SSH connection with the host `[ssh_connection]`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 以下参数涉及与主机`[ssh_connection]`的SSH连接。
- en: '`pipelining`: This parameter enables the feature of reducing the number of
    SSH operations required to execute a module. This happens by executing Ansible
    modules without an actual file transfer and can improve Ansible''s performance
    greatly. It requires having requiretty disabled in `/etc/sudoers` on all the managed
    hosts. An example of its use is as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`pipelining`：此参数启用了减少执行模块所需的SSH操作次数的功能。这是通过执行Ansible模块而无需实际文件传输来实现的，可以极大地提高Ansible的性能。它要求在所有受管主机的`/etc/sudoers`中禁用requiretty。其使用示例如下：'
- en: '[PRE53]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The `scp_if_ssh` and `transfer_method` parameters: Both of these are responsible
    for file transfers between the master node and the client hosts. Choosing the `smart`
    value allows Ansible to choose between SFTP and SCP to opt for the most suitable
    protocol when transferring files:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`scp_if_ssh`和`transfer_method`参数：这两个参数负责主节点和客户端主机之间的文件传输。选择`smart`值允许Ansible在传输文件时选择最合适的协议，从而在SFTP和SCP之间进行选择：'
- en: '[PRE54]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The following two examples relate to the persistence of the SSH connection, `[persistent_connection]`.
    We are only covering timeout for a connection and a retry for a failed one. The
    SSH timeout can be set by editing the value of those two parameters as follows,
    firstly:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个示例涉及到SSH连接的持久性，`[persistent_connection]`。我们只涵盖了连接的超时和失败重试。SSH超时可以通过编辑这两个参数的值来设置，首先是：
- en: '[PRE55]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'And secondly:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 其次：
- en: '[PRE56]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Finally, let''s look at the `[colors]` color selection. This section gets activated
    when enabling the color feature in the `[default]` section. It allows you to choose
    different colors for various output statuses. This may be helpful when using a
    special display or to help with color blindness:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们来看一下`[colors]`颜色选择。在`[default]`部分启用颜色功能时，此部分将被激活。它允许您为各种输出状态选择不同的颜色。在使用特殊显示或帮助解决色盲问题时可能会有所帮助：
- en: '[PRE57]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'On another note, we should never forget that Ansible relies on SSH to communicate
    with its clients. Configuration should be done on the master node to create an
    SSH key that is then copied to all the client hosts to enable passwordless remote
    access. This helps to remove passwords saved as plain text and enables full automation
    of the tasks. Creating an SSH key can either be simple or more complicated and
    more secure. We will go with the simple option:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们不应忘记Ansible依赖SSH与其客户端进行通信。在主节点上应进行配置，以创建一个SSH密钥，然后将其复制到所有客户端主机上，以实现无密码远程访问。这有助于消除明文保存的密码，并实现任务的完全自动化。创建SSH密钥可以是简单的，也可以是更复杂和更安全的。我们将选择简单的选项：
- en: '[PRE58]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Keep on pressing enter while accepting the key and leaving the passphrase empty:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在接受密钥并将密码留空时，继续按回车键：
- en: '[PRE59]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This task can be a bit dull and very manual. Scripting using the `expect` command
    can be very handy when trying to sort out SSH keys and authentication. First,
    we need to make sure that `expect` is installed, since it is not usually installed by
    default. The following examples show this process for a variety of operating systems.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务可能有点乏味和非常手动。在尝试解决SSH密钥和身份验证问题时，使用`expect`命令进行脚本编写可能非常方便。首先，我们需要确保`expect`已安装，因为它通常不是默认安装的。以下示例展示了各种操作系统的此过程。
- en: 'This command line shows how to install the tool Expect on a Linux from the
    Red Hat family:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令行显示了如何在红帽Linux系统上安装Expect工具：
- en: '[PRE60]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'This command line shows how to install the tool Expect on a Linux from the
    Debian family:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令行显示了如何在Debian家族的Linux上安装Expect工具：
- en: '[PRE61]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'This command line shows how to install the tool Expect on MAC OS X:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令行显示了如何在MAC OS X上安装Expect工具：
- en: '[PRE62]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We can then create a script file with the following:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以创建一个包含以下内容的脚本文件：
- en: '[PRE63]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'This script should have execution privileges to be executed. It can then be
    used with another loop script to be executed on several machines whose IP address
    range or hostnames are known:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本应该有执行权限才能执行。然后可以与另一个循环脚本一起使用，以在已知IP地址范围或主机名的多台机器上执行。
- en: '[PRE64]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Alternatively, we can use an orchestration tool to do the same task. Let''s use
    Ansible to help with client configuration by using the simple `copy` and `shell`
    modules:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用编排工具来执行相同的任务。让我们使用Ansible通过简单的`copy`和`shell`模块来帮助客户端配置：
- en: '[PRE65]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The user `install` can be a special user created on all client hosts to allow
    easy SSH remote access using Ansible. More details about how to set up this user
    can be found in the following title.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`install`用户可以是在所有客户端主机上创建的特殊用户，以允许使用Ansible进行简单的SSH远程访问。有关如何设置此用户的更多详细信息，请参见以下标题。'
- en: Linux client node configuration
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux客户端节点配置
- en: The only important tool that is required to be installed and running on the
    client machine is  the OpenSSH-server. All new releases of Linux use SSH as the
    main remote access method by default.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 客户机上唯一重要的工具是OpenSSH服务器。所有新版本的Linux默认使用SSH作为主要的远程访问方法。
- en: To make sure that everything is in place, the SSH service should always be running
    and the system's firewall should allow a port for SSH to service through. By default,
    this is port 22\. This can be changed, however, and this change should be also
    noted in the host Ansible inventory.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保一切就绪，SSH服务应始终运行，并且系统防火墙应允许SSH服务的端口通过。默认情况下，这是端口22。但是，这可以更改，而且这个更改也应该在主机Ansible清单中记录下来。
- en: For Linux clients, any extra configuration for Ansible management is more aimed
    at following best practice guidelines than being strictly necessary. Extra configuration
    can be a way to make sure that the remote clients managed by Ansible are fully
    automated, securely accessible, and do not require an admin intervention when
    running automated tasks.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux客户端，Ansible管理的任何额外配置更多地是遵循最佳实践准则，而不是严格必要的。额外的配置可以确保由Ansible管理的远程客户端是完全自动化的、安全可访问的，并且在运行自动化任务时不需要管理员干预。
- en: The following configuration is optional—you can choose what suits you. Add the
    configurations that you think will be useful and ignore the others.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配置是可选的 - 您可以选择适合您的配置。添加您认为有用的配置，忽略其他配置。
- en: Ansible can remotely manage a system using any privileged user when their credentials
    are at hand. However, mixing normal users, users with remote access, and management
    users can be messy. If a user is performing a task at the same time as Ansible
    is sending a task, traceback can be tricky. We recommend adding a new system user
    who has the sole purpose of being used by Ansible to control the host. We give
    this user superuser privileges and make their access passwordless to further enhance
    automation. This user can be the same on all the hosts of a certain inventory
    group to be configured at the inventory group level.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 当手头有凭据时，Ansible可以远程管理系统使用任何特权用户。然而，混合普通用户、具有远程访问权限的用户和管理用户可能会很混乱。如果用户在Ansible发送任务的同时执行任务，回溯可能会很棘手。我们建议添加一个新的系统用户，其唯一目的是被Ansible用来控制主机。我们赋予这个用户超级用户权限，并使其访问无密码，以进一步增强自动化。这个用户可以在特定清单组的所有主机上是相同的，以在清单组级别进行配置。
- en: You can also create a shared folder via NFS and SMB between the hosts and the
    Ansible server to reduce the load when transferring data to the hosts. This task
    makes the hosts take the job of copying the data from the mounted shared folder,
    while Ansible takes care of other tasks, especially when the value of the forks
    is set to a high number.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过NFS和SMB在主机和Ansible服务器之间创建共享文件夹，以减少向主机传输数据时的负载。这个任务使得主机负责从挂载的共享文件夹中复制数据，而Ansible负责其他任务，特别是当forks的值设置为一个较高的数字时。
- en: Windows client node configuration
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows客户端节点配置
- en: As well as Linux hosts, Ansible is capable of remotely managing Microsoft Windows
    hosts. This includes Windows Desktop 7, 8, and 10, and Windows Server 2008, 2008
    R2, 2012, 2012 R2, and 2016.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Linux主机，Ansible还能够远程管理Microsoft Windows主机。这包括Windows Desktop 7、8和10，以及Windows
    Server 2008、2008 R2、2012、2012 R2和2016。
- en: 'The Windows clients require you to have some specific versions of the following
    applications installed:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Windows客户端需要您安装以下应用程序的特定版本：
- en: PowerShell 3.0 or higher
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerShell 3.0或更高版本
- en: .NET 4.0
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET 4.0
- en: Those two requirements are met on most Windows releases, except for Window 7
    and Windows server 2008.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个要求在大多数Windows版本上都得到满足，除了Windows 7和Windows Server 2008。
- en: There is an Ansible-made PowerShell script that can carry out an automatic installation
    of the missing requirements that can be found at the following link: [https://github.com/PacktPublishing/Ansible-QuickStart-Guide/blob/master/Chapter2/Upgrade_Powershell.ps1](https://github.com/PacktPublishing/Ansible-QuickStart-Guide/blob/master/Chapter2/Upgrade_Powershell.ps1).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个由Ansible制作的PowerShell脚本，可以自动安装缺少的要求，可在以下链接找到：[https://github.com/PacktPublishing/Ansible-QuickStart-Guide/blob/master/Chapter2/Upgrade_Powershell.ps1](https://github.com/PacktPublishing/Ansible-QuickStart-Guide/blob/master/Chapter2/Upgrade_Powershell.ps1)。
- en: 'To be able to execute this script, or any other third-party script, we need
    to change the execution policy from restricted to unrestricted, run our script,
    and then turn the policy back to restricted. Using Windows PowerShell, run the
    following using local or domain administrator credentials:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够执行此脚本，或任何其他第三方脚本，我们需要将执行策略从受限制改为无限制，运行我们的脚本，然后将策略改回受限制。使用Windows PowerShell，使用本地或域管理员凭据运行以下命令：
- en: '[PRE66]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Then, on all the Windows systems, a second script is essential to configure
    WinRM to be active and listen to Ansible commands. This script can be downloaded
    from the following link: [https://github.com/PacktPublishing/Ansible-QuickStart-Guide/blob/master/Chapter2/ConfigureRemotingForAnsible.ps1](https://github.com/PacktPublishing/Ansible-QuickStart-Guide/blob/master/Chapter2/ConfigureRemotingForAnsible.ps1).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在所有Windows系统上，第二个脚本是必不可少的，用于配置WinRM以激活并监听Ansible命令。此脚本可从以下链接下载：[https://github.com/PacktPublishing/Ansible-QuickStart-Guide/blob/master/Chapter2/ConfigureRemotingForAnsible.ps1](https://github.com/PacktPublishing/Ansible-QuickStart-Guide/blob/master/Chapter2/ConfigureRemotingForAnsible.ps1)。
- en: 'Similarly, this script also requires privileged access and the execution policy
    should be unrestricted. Run the following code:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，此脚本也需要特权访问，并且执行策略应该是无限制的。运行以下代码：
- en: '[PRE67]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: If no errors appear, Ansible should now be able to manage these machines.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有出现错误，Ansible现在应该能够管理这些机器了。
- en: The same applies for the Windows hosts. We may need to create a local or domain
    administrator that is only used by Ansible to execute commands freely. Its credentials
    can be configured in the host inventory group as well. This can be secured using
    Ansible Vault to prevent having passwords written in plain text.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows主机也是一样的。我们可能需要创建一个仅由Ansible使用的本地或域管理员来自由执行命令。其凭据也可以在主机清单组中配置。这可以使用Ansible
    Vault进行安全保护，以防止密码以明文形式写入。
- en: Summary
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at how to prepare the environment for multiple systems
    in order to be able to install Ansible. We also considered which configuration
    options were most useful in either Linux or Windows. Now that we've learned how
    to set up and configure Ansible, we're ready to start learning about its functional
    features. In the following chapter, we will be covering Ansible playbooks and
    inventory to better understand how orchestration works.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了如何为多个系统准备环境，以便能够安装Ansible。我们还考虑了在Linux或Windows中哪些配置选项最有用。现在我们已经学会了如何设置和配置Ansible，我们准备开始学习其功能特性。在下一章中，我们将介绍Ansible
    playbook和清单，以更好地理解编排是如何工作的。
- en: References
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: Ansible documentation: [https://docs.ansible.com/](https://docs.ansible.com/)
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible文档：[https://docs.ansible.com/](https://docs.ansible.com/)
