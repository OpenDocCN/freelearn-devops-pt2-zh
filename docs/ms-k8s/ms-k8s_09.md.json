["```\napiVersion: v1 \nkind: ReplicationController \nmetadata: \n   name: nginx \nspec: \n   replicas: 3 \n   template: \n     metadata: \n       labels: \n         run: nginx \n     spec: \n       containers: \n       - name: nginx \n         image: nginx \n         ports: \n         - containerPort: 80 \n```", "```\napiVersion: autoscaling/v1 \nkind: HorizontalPodAutoscaler \nmetadata: \n  name: nginx \n  namespace: default \nspec: \n  maxReplicas: 4 \n  minReplicas: 2 \n  targetCPUUtilizationPercentage: 90 \n  scaleTargetRef: \n    apiVersion: v1 \n    kind: ReplicationController \n    name: nginx \n```", "```\n--horizontal-pod-autoscaler-use-rest-clients=true\n--kubeconfig <path-to-kubeconfig> OR --master <ip-address-of-apiserver>  \n```", "```\n> kubectl get pods --selector k8s-app=kube-apiserver --namespace kube-system -o jsonpath='{.items[0].status.podIP}'  \n```", "```\napiVersion: v1 \nkind: ReplicationController \nmetadata: \n   name: bash-loop-rc \nspec: \n   replicas: 3 \n   template: \n     metadata: \n       labels: \n         name: bash-loop-rc \n     spec: \n       containers: \n         - name: bash-loop \n           image: ubuntu \n           command: [\"/bin/bash\", \"-c\", \"while true; do sleep 10;   \n                      done\"] \n```", "```\n     > kubectl create -f bash-loop-rc.yaml\n     replicationcontroller \"bash-loop-rc\" created \n```", "```\n     > kubectl get rc\n     NAME              DESIRED   CURRENT   READY     AGE\n     bash-loop-rc        3          3       3         1m  \n```", "```\n     > kubectl get pods\n     NAME                     READY    STATUS    RESTARTS    AGE\n     bash-loop-rc-8h59t        1/1     Running    0          50s\n     bash-loop-rc-lsvtd        1/1     Running    0          50s\n     bash-loop-rc-z7wt5        1/1     Running    0          50s  \n```", "```\n > kubectl autoscale rc bash-loop-rc --min=4 --max=6 --cpu- percent=50\nreplicationcontroller \"bash-loop-rc\" autoscaled\n```", "```\n > kubectl get hpa\n NAME          REFERENCE    TARGETS  MINPODS  MAXPODS  REPLICAS  AGE bash-loop-rc  bash-loop-rc  50%     4        6         4        16m\n```", "```\n     > kubectl get rc\n     NAME              DESIRED  CURRENT  READY    AGE\n     bash-loop-rc       4       4        4        21m\n```", "```\n     > kubectl get pods\n     NAME                READY   STATUS    RESTARTS   AGE\n     bash-loop-rc-8h59t   1/1     Running   0         21m\n     bash-loop-rc-gjv4k   1/1     Running   0         17m\n     bash-loop-rc-lsvtd    1/1    Running   0         21m\n     bash-loop-rc-z7wt5   1/1     Running   0         21m\n```", "```\n     > kubectl  delete hpa bash-loop-rc\n     horizontalpodautoscaler \"bash-loop-rc\" deleted \n```", "```\n     > kubectl get rc\n     NAME              DESIRED   CURRENT   READY      AGE\n     bash-loop-rc       4           4       4         28m\n```", "```\n> kubectl autoscale rc bash-loop-rc --min=2 --max=6 --cpu-percent=50\n    replicationcontroller \"bash-loop-rc\" autoscaled  \n```", "```\n> kubectl get rc\nNAME           DESIRED   CURRENT   READY     AGE\nbash-loop-rc   4         4         4         29m  \n```", "```\napiVersion: extensions/v1beta1 \nkind: Deployment \nmetadata: \n  name: hue-reminders \nspec: \n  replicas: 2   \n  template: \n    metadata: \n      name: hue-reminders \n      labels: \n        app: hue-reminders \n    spec:     \n      containers: \n      - name: hue-reminders \n        image: g1g1/hue-reminders:v2.2     \n        ports: \n        - containerPort: 80  \n```", "```\napiVersion: autoscaling/v1 \n kind: HorizontalPodAutoscaler \n metadata: \n   name: hue-reminders \n   namespace: default \n spec: \n   maxReplicas: 15 \n   minReplicas: 10 \n   targetCPUUtilizationPercentage: 90 \n   scaleTargetRef: \n     apiVersion: v1 \n     kind: Deployment \n     name: hue-reminders \n```", "```\n> kubectl autoscale deployment hue-reminders --min=10--max=15\n--cpu-percent=90  \n```", "```\n> kubectl create namespace ns\nnamespace \"ns\" created  \n```", "```\n> kubectl config set-context ns --cluster=minikube --user=minikube --namespace=ns\nContext \"ns\" set.\n> kubectl config use-context ns\nSwitched to context \"ns\".  \n```", "```\n    apiVersion: v1\n    kind: ResourceQuota\n    metadata:\n      name: compute-quota\n    spec:\n      hard:\n        pods: \"2\"\n        requests.cpu: \"1\"\n        requests.memory: 20Mi\n        limits.cpu: \"2\"\n        limits.memory: 2Gi\n\n    > kubectl create -f compute-quota.yaml\n    resourcequota \"compute-quota\" created\n```", "```\n    apiVersion: v1\n    kind: ResourceQuota\n    metadata:\n      name: object-counts-quota\n    spec:\n      hard:\n        configmaps: \"10\"\n        persistentvolumeclaims: \"4\"\n        replicationcontrollers: \"20\"\n        secrets: \"10\"\n        services: \"10\"\n        services.loadbalancers: \"2\"\n\n    > kubectl create -f object-count-quota.yaml\n    resourcequota \"object-counts-quota\" created \n```", "```\n    > kubectl get quota\n    NAME                     AGE\n    compute-resources        17m\n    object-counts            15m\n```", "```\n    > kubectl describe quota compute-quota\n    Name:            compute-quota\n    Namespace:       ns\n    Resource         Used  Hard\n    --------          ----     ----\n    limits.cpu          0        2\n    limits.memory       0        2Gi\n    pods                0        2\n    requests.cpu        0        1\n    requests.memory     0        20Mi\n\n    > kubectl describe quota object-counts-quota\n    Name:                   object-counts-quota\n    Namespace:              ns\n    Resource                Used    Hard\n    --------                ----    ----\n    configmaps              0       10\n    persistentvolumeclaims  0       4\n    replicationcontrollers  0       20\n    secrets                 1       10\n    services                0       10\n    services.loadbalancers  0       2\n```", "```\n    > kubectl run nginx --image=nginx --replicas=1 \n    deployment \"nginx\" created\n    > kubectl get pods\n    No resources found.\n```", "```\n    > kubectl describe deployment nginx\n    Name:                   nginx\n    Namespace:              ns\n    CreationTimestamp:      Sun, 11 Feb 2018 16:04:42 -0800\n    Labels:                 run=nginx\n    Annotations:            deployment.kubernetes.io/revision=1\n    Selector:               run=nginx\n    Replicas:               1 desired | 0 updated | 0 total | 0 available | 1 unavailable\n    StrategyType:           RollingUpdate\n    MinReadySeconds:        0\n    RollingUpdateStrategy:  1 max unavailable, 1 max surge\n    Pod Template:\n      Labels:  run=nginx\n      Containers:\n       nginx:\n        Image:        nginx\n        Port:         <none>\n        Environment:  <none>\n        Mounts:       <none>\n      Volumes:        <none>\n    Conditions:\n      Type                   Status  Reason\n      ----                   ------     ------\n      Available            True     MinimumReplicasAvailable\n      ReplicaFailure       True     FailedCreate\n    OldReplicaSets:       <none>\n    NewReplicaSet:     nginx-8586cf59 (0/1 replicas created)\n    Events:\n      Type    Reason       Age  From                 Message\n      ----        ------               ----  ----              -------\nNormal  ScalingReplicaSet  16m  deployment-controller  Scaled up replica set nginx-8586cf59 to 1\n```", "```\n    > kubectl describe replicaset nginx-8586cf59\n    Name:           nginx-8586cf59\n    Namespace:      ns\n    Selector:       pod-template-hash=41427915,run=nginx\n    Labels:         pod-template-hash=41427915\n                    run=nginx\n    Annotations:    deployment.kubernetes.io/desired-replicas=1\n                    deployment.kubernetes.io/max-replicas=2\n                    deployment.kubernetes.io/revision=1\n    Controlled By:  Deployment/nginx\n    Replicas:       0 current / 1 desired\n    Pods Status:    0 Running / 0 Waiting / 0 Succeeded / 0 Failed\n    Conditions:\n      Type             Status  Reason\n      ----             ------  ------\n      ReplicaFailure   True    FailedCreate\n    Events:\n      Type     Reason        Age                From                   Message\n      ----     ------        ----               ----                   -------\n      Warning  FailedCreate  17m (x8 over 22m)  replicaset-controller  (combined from similar events): Error creating: pods \"nginx-8586cf59-sdwxj\" is forbidden: failed quota: compute-quota: must specify limits.cpu,limits.memory,requests.cpu,requests.memory  \n```", "```\n    > kubectl run nginx \\\n      --image=nginx \\\n      --replicas=1 \\\n      --requests=cpu=100m,memory=4Mi \\\n      --limits=cpu=200m,memory=8Mi \\\n      --namespace=ns\n```", "```\n    > kubectl get pods\n    NAME                     READY     STATUS    RESTARTS   AGE\n    nginx-2199160687-zkc2h   1/1       Running   0          2m \n```", "```\n    apiVersion: v1\n    kind: LimitRange\n    metadata:\n      name: limits\n    spec:\n      limits:\n      - default:\n          cpu: 200m\n          memory: 6Mi\n        defaultRequest:\n          cpu: 100m\n          memory: 5Mi\n    type: Container \n\n    > kubectl create -f limits.yaml\n    limitrange \"limits\" created  \n```", "```\n> kubectl describe limits limitsName:  limits\nNamespace:  ns\nType Resource Min Max Default Request Default Limit Max Limit/Request Ratio\n----          --------        ---     ---     ---------------            -------------     -----------------------\nContainer cpu     -   -   100m         200m       -\nContainer memory    -       -      5Mi      6Mi                 -\n```", "```\n > kubectl delete deployment nginx\n deployment \"nginx\" deleted\n > kubectl run nginx --image=nginx --replicas=1\n deployment \"nginx\" created\n```", "```\n         > kubectl get pods\n         NAME                   READY     STATUS    RESTARTS  AGE\n         nginx-8586cf59-p4dp4   1/1       Running    0        16m\n```"]