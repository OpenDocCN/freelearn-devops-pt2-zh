["```\napiVersion: v1 \nkind: ServiceAccount \nmetadata: \n  name: custom-service-account \nNow type the following: \nkubectl create -f custom-service-account.yaml \nThat will result in the following output: \nserviceaccount \"custom-service-account\" created \nHere is the service account listed alongside the default service account: \n> kubectl get serviceAccounts \nNAME                     SECRETS   AGE \ncustom-service-account   1         3m \ndefault                  1         29d \n```", "```\n> kubectl get serviceAccounts/custom-service-account -o yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  creationTimestamp: 2018-01-15T18:24:40Z\n  name: custom-service-account\n  namespace: default\n  resourceVersion: \"1974321\"\n  selfLink: /api/v1/namespaces/default/serviceaccounts/custom-service-account\n  uid: 59bc3515-fa21-11e7-beab-080027c94384\n  secrets:\n  - name: custom-service-account-token-w2v7v  \n```", "```\nkubectl get secrets/custom-service-account-token-w2v7v -o yaml  \n```", "```\n> cat ~/.kube/config | grep client\n\nclient-certificate: /Users/gigi.sayfan/.minikube/client.crt\nclient-key: /Users/gigi.sayfan/.minikube/client.key  \n```", "```\ntype Authorizer interface {\n  Authorize(a Attributes) (authorized bool, reason string, err error)\n    } \n```", "```\ntype Attributes interface {\n  GetUser() user.Info\n  GetVerb() string\n  IsReadOnly() bool\n  GetNamespace() string\n  GetResource() string\n  GetSubresource() string\n  GetName() string\n  GetAPIGroup() string\n  GetAPIVersion() string\n  IsResourceRequest() bool\n  GetPath() string\n} \n```", "```\n--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota,DefaultTolerationSeconds  \n```", "```\n> kubectl create secret the-registry-secret \n  --docker-server=<docker registry server> \n  --docker-username=<username> \n  --docker-password=<password> \n  --docker-email=<email>\nsecret \"docker-registry-secret\" created.  \n```", "```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: cool-pod \n  namespace: the-namespace \nspec: \n  containers: \n    - name: cool-container \n      image: cool/app:v1 \n  imagePullSecrets: \n    - name: the-registry-secret \n```", "```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: hello-world \nspec: \n  containers: \n    ... \n  securityContext: \n    fsGroup: 1234 \n    supplementalGroups: [5678] \n    seLinuxOptions: \n      level: \"s0:c123,c456\" \n```", "```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: hello-world \nspec: \n  containers: \n    - name: hello-world-container \n      # The container definition \n      # ... \n      securityContext: \n        privileged: true \n        seLinuxOptions: \n          level: \"s0:c123,c456\" \n```", "```\ncat /sys/module/apparmor/parameters/enabled\n Y \n```", "```\n/sys/kernel/security/apparmor/profiles  \n```", "```\ncontainer.apparmor.security.beta.kubernetes.io/<container-name>: <profile-ref>\n```", "```\n#include <tunables/global> \n\nprofile k8s-apparmor-example-deny-write flags=(attach_disconnected) { \n  #include <abstractions/base> \n\n  file, \n\n  # Deny all file writes. \n  deny /** w, \n} \n```", "```\nkubectl exec <pod-name> cat /proc/1/attr/current  \n```", "```\n    Name = \"nginx-sample\"\n    [Filesystem]\n    # read only paths for the container\n    ReadOnlyPaths = [\n      \"/bin/**\",\n      \"/boot/**\",\n      \"/dev/**\",\n    ]\n\n    # paths where you want to log on write\n    LogOnWritePaths = [\n      \"/**\"\n    ]\n\n    # allowed capabilities\n    [Capabilities]\n    Allow = [\n      \"chown\",\n      \"setuid\",\n    ]\n\n    [Network]\n    Raw = false\n    Packet = false\n    Protocols = [\n      \"tcp\",\n      \"udp\",\n      \"icmp\"\n    ] \n```", "```\n    {\n      \"kind\": \"PodSecurityPolicy\",\n      \"apiVersion\":\"policy/v1beta1\",\n      \"metadata\": {\n        \"name\": \"permissive\"\n      },\n      \"spec\": {\n          \"seLinux\": {\n              \"rule\": \"RunAsAny\"\n          },\n          \"supplementalGroups\": {\n              \"rule\": \"RunAsAny\"\n          },\n          \"runAsUser\": {\n              \"rule\": \"RunAsAny\"\n          },\n          \"fsGroup\": {\n              \"rule\": \"RunAsAny\"\n          },\n          \"volumes\": [\"*\"]\n      }\n    }\n```", "```\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n name: <role name>\nrules:\n- apiGroups: ['policy']\n resources: ['podsecuritypolicies']\n verbs: ['use']\n resourceNames:\n - <list of policies to authorize>\n```", "```\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n name: <binding name>\nroleRef:\n kind: ClusterRole\n name: <role name>\n apiGroup: rbac.authorization.k8s.io\nsubjects:\n# Authorize specific service accounts:\n- kind: ServiceAccount\n name: <authorized service account name>\n namespace: <authorized pod namespace>\n# Authorize specific users (not recommended):\n- kind: User\n apiGroup: rbac.authorization.k8s.io\n name: <authorized user name>\n```", "```\n# Authorize all service accounts in a namespace:\n- kind: Group\n apiGroup: rbac.authorization.k8s.io\n name: system:serviceaccounts\n# Or equivalently, all authenticated users in a namespace:\n- kind: Group\n apiGroup: rbac.authorization.k8s.io\n name: system:authenticated\n```", "```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n name: the-network-policy\n namespace: default\nspec:\n podSelector:\n matchLabels:\n role: db\n ingress:\n - from:\n - namespaceSelector:\n matchLabels:\n project: cool-project\n - podSelector:\n matchLabels:\n role: frontend\n ports:\n - protocol: tcp\n port: 6379\n```", "```\napiVersion: v1\nkind: policy\nmetadata:\n name: default-deny-egress\nspec:\n order: 999\n egress:\n - action: deny\n destination:\n net: 1.2.3.4\n source: {}\n```", "```\n--experimental-encryption-provider-config <encryption config file>   \n```", "```\nkind: EncryptionConfig\napiVersion: v1\nresources:\n - resources:\n - secrets\n providers:\n - identity: {}\n - aesgcm:\n keys:\n - name: key1\n secret: c2VjcmV0IGlzIHNlY3VyZQ==\n - name: key2\n secret: dGhpcyBpcyBwYXNzd29yZA==\n - aescbc:\n keys:\n - name: key1\n secret: c2VjcmV0IGlzIHNlY3VyZQ==\n - name: key2\n secret: dGhpcyBpcyBwYXNzd29yZA==\n - secretbox:\n keys:\n - name: key1\n secret: YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoxMjM0NTY=\n```", "```\nkubectl create secret. \n```", "```\n> kubectl create secret generic hush-hush --from-literal=username=tobias --from-literal=password=cutoffs \n```", "```\n> kubectl describe secrets/hush-hush\nName:           hush-hush\nNamespace:      default\nLabels:         <none>\nAnnotations:    <none>\n\nType:   Opaque\n\nData\n====\npassword:       7 bytes\nusername:       6 bytes\n```", "```\n> kubectl get secrets/hush-hush -o yaml\napiVersion: v1\ndata:\n password: Y3V0b2Zmcw==\n username: dG9iaWFz\nkind: Secret\nmetadata:\n creationTimestamp: 2018-01-15T23:43:50Z\n name: hush-hush\n namespace: default\n resourceVersion: \"2030851\"\n selfLink: /api/v1/namespaces/default/secrets/hush-hush\n uid: f04641ef-fa4d-11e7-beab-080027c94384\ntype: Opaque\nThe values are base64-encoded. You need to decode them yourself:\n> echo \"Y3V0b2Zmcw==\" | base64 --decode\ncutoofs\n```", "```\n> echo \"Y3V0b2Zmcw==\" | base64 --decode\ncutoofs \n```", "```\n{ \n \"apiVersion\": \"v1\", \n \"kind\": \"Pod\", \n  \"metadata\": { \n    \"name\": \"pod-with-secret\", \n    \"namespace\": \"default\" \n  }, \n  \"spec\": { \n    \"containers\": [{ \n      \"name\": \"the-container\", \n      \"image\": \"redis\", \n      \"volumeMounts\": [{ \n        \"name\": \"secret-volume\", \n        \"mountPath\": \"/mnt/secret-volume\", \n        \"readOnly\": true \n      }] \n    }], \n    \"volumes\": [{ \n      \"name\": \"secret-volume\", \n      \"secret\": { \n        \"secretName\": \"hush-hush\" \n      } \n    }] \n  } \n} \n```", "```\n> kubectl exec pod-with-secret cat /mnt/secret-volume/username\ntobias\n\n> kubectl exec pod-with-secret cat /mnt/secret-volume/password\ncutoffs  \n```", "```\napiVersion: v1 \nkind: Namespace \nmetadata: \n  name: custom-namespace \n```", "```\n> Kubectl create -f custom-namespace.yaml\nnamespace \"custom-namespace\" created\n\n> kubectl get namesapces\nNAME               STATUS    AGE\ncustom-namespace   Active    39s\ndefault            Active    32d\nkube-system        Active    32d\n```", "```\n> kubectl create -f some-pod.yaml --namespace=custom-namespace\npod \"some-pod\" created\n```", "```\n> kubectl get pods --namespace=custom-namespace\nNAME       READY     STATUS    RESTARTS   AGE\nsome-pod   1/1       Running   0          6m \n```", "```\n> Kubectl get pods\nNAME                           READY     STATUS    RESTARTS   AGE\necho-3580479493-n66n4          1/1       Running   16         32d\nleader-elector-191609294-lt95t 1/1       Running   4          9d\nleader-elector-191609294-m6fb6 1/1       Running   4          9d\nleader-elector-191609294-piu8p 1/1       Running   4          9d pod-with-secret                1/1       Running   1          1h\n```"]