["```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: hue-scheduler\nspec:\n  containers:\n  - image: the_g1g1/hue-global-listener\n    name: hue-global-listener\n    volumeMounts:\n    - mountPath: /notifications\n      name: shared-volume\n  - image: the_g1g1/hue-job-scheduler\n    name: hue-job-scheduler\n    volumeMounts:\n    - mountPath: /incoming\n      name: shared-volume\n  volumes:\n  - name: shared-volume\n    emptyDir: {}\n```", "```\nvolumes:\n- name: shared-volume\n  emptyDir:\n   medium: Memory \n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: hue-coupon-hunter\nspec:\n  containers:\n  - image: the_g1g1/hue-coupon-hunter\n    name: hue-coupon-hunter\n    volumeMounts:\n    - mountPath: /coupons\n      name: coupons-volume \n  volumes:\n  - name: coupons-volume\n    host-path: \n        path: /etc/hue/data/coupons\n```", "```\n- image: the_g1g1/hue-coupon-hunter\n   name: hue-coupon-hunter\n   volumeMounts:\n   - mountPath: /coupons\n     name: coupons-volume\n   securityContext:\n          privileged: true\n```", "```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: example-pv\n  annotations:\n        \"volume.alpha.kubernetes.io/node-affinity\": '{\n            \"requiredDuringSchedulingIgnoredDuringExecution\": {\n                \"nodeSelectorTerms\": [\n                    { \"matchExpressions\": [\n                        { \"key\": \"kubernetes.io/hostname\",\n                          \"operator\": \"In\",\n                          \"values\": [\"example-node\"]\n                        }\n                    ]}\n                 ]}\n              }'\nspec:\n    capacity:\n      storage: 100Gi\n    accessModes:\n    - ReadWriteOnce\n    persistentVolumeReclaimPolicy: Delete\n    storageClassName: local-storage\n    local:\n      path: /mnt/disks/ssd1\n```", "```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: pv-1\n  labels:\n     release: stable\n     capacity: 100Gi \nspec:\n  capacity:\n    storage: 100Gi\n  volumeMode: Filesystem\n  accessModes:\n    - ReadWriteOnce\n   - ReadOnlyMany\n  persistentVolumeReclaimPolicy: Recycle\n  storageClassName: normal\n  nfs:\n    path: /tmp\n    server: 172.17.0.8\n```", "```\ncapacity:\n    storage: 100Gi \n```", "```\naccessModes:\n    - ReadWriteMany\n   - ReadOnlyMany\n```", "```\nnfs:\n    path: /tmp\n    server: 172.17.0.8 \n```", "```\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: storage-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 80Gi\n  storageClassName: \"normal\"\n  selector:\n    matchLabels:\n      release: \"stable\"\n    matchExpressions:\n      - {key: capacity, operator: In, values: [80Gi, 100Gi]}\n```", "```\nkind: Pod\napiVersion: v1\nmetadata:\n  name: the-pod\nspec:\n  containers:\n    - name: the-container\n      image: some-image\n      volumeMounts:\n      - mountPath: \"/mnt/data\"\n        name: persistent-volume\n  volumes:\n    - name: persistent-volume\n      persistentVolumeClaim:\n        claimName: storage-claim\n```", "```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: block-pv\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n    - ReadWriteOnce\n  volumeMode: Block\n  persistentVolumeReclaimPolicy: Retain\n  fc:\n    targetWWNs: [\"50060e801049cfd1\"]\n    lun: 0\n    readOnly: false\n```", "```\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: block-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  volumeMode: Block\n  resources:\n    requests:\n      storage: 10Gi\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pod-with-block-volume\nspec:\n  containers:\n    - name: fc-container\n      image: fedora:26\n      command: [\"/bin/sh\", \"-c\"]\n      args: [ \"tail -f /dev/null\" ]\n      volumeDevices:\n        - name: data\n          devicePath: /dev/xvda\n  volumes:\n    - name: data\n      persistentVolumeClaim:\n        claimName: block-pvc\n```", "```\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: standard\nprovisioner: kubernetes.io/aws-ebs\nparameters:\n  type: gp2\n```", "```\nkind: PersistentVolume\napiVersion: v1\nmetadata:\n name: persistent-volume-1\nspec:\n StorageClassName: dir\n capacity:\n storage: 1Gi\n accessModes:\n - ReadWriteOnce\n hostPath:\n path: \"/tmp/data\"\n\n> kubectl create -f persistent-volume.yaml\npersistentvolume \"persistent-volume-1\" created\n```", "```\n> kubectl get pv\nNAME:             persistent-volume-1 \nCAPACITY:         1Gi\nACCESS MODES:     RWO \nRECLAIM POLICY:   Retain \nSTATUS:           Available \nCLAIM: \nSTORAGECLASS:    dir\nREASON: \nAGE:             17s \n```", "```\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n name: persistent-volume-claim\nspec:\n accessModes:\n - ReadWriteOnce\n resources:\n requests:\n storage: 1Gi\n```", "```\n> kubectl create -f  persistent-volume-claim.yaml\npersistentvolumeclaim \"persistent-volume-claim\" created  \n```", "```\n> kubectl get pvc\nNAME                                  STATUS  VOLUME                     CAPACITY   ACCESSMODES   AGE\npersistent-volume-claim   Bound     persistent-volume-1   1Gi        RWO            dir            1m\n\n> kubectl get pv\nNAME:                 persistent-volume-1\nCAPACITY:             1Gi\nACCESS MODES:         RWO \nRECLAIM POLICY:       Retain\nSTATUS:               Bound \nCLAIM:               default/persistent-volume-claim \nSTORAGECLASS:        dir\nREASON: \nAGE:                 3m  \n```", "```\nkind: Pod\napiVersion: v1\nmetadata:\n name: just-a-shell\n labels:\n name: just-a-shell\nspec:\n containers:\n - name: a-shell\n image: ubuntu\n command: [\"/bin/bash\", \"-c\", \"while true ; do sleep 10 ; done\"]\n volumeMounts:\n - mountPath: \"/data\"\n name: pv\n - name: another-shell\n image: ubuntu\n command: [\"/bin/bash\", \"-c\", \"while true ; do sleep 10 ; done\"]\n volumeMounts:\n - mountPath: \"/data\"\n name: pv\n volumes:\n - name: pv\n persistentVolumeClaim:\n claimName: persistent-volume-claim\n```", "```\n> kubectl create -f shell-pod.yaml\npod \"just-a-shell\" created\n\n> kubectl get pods\nNAME           READY     STATUS    RESTARTS   AGE\njust-a-shell   2/2       Running   0           1m \n```", "```\n> minikube ssh\n$\n```", "```\n$ docker ps -n 2 --format '{{.ID}}\\t{{.Image}}\\t{{.Command}}'\n820fc954fb96     ubuntu    \"/bin/bash -c 'whi...\"\ncf4502f14be5     ubuntu    \"/bin/bash -c 'whi...\"\n```", "```\n$ sudo touch /tmp/data/1.txt\n```", "```\n$ docker exec -it 820fc954fb96  /bin/bash\nroot@just-a-shell:/# ls /data\n1.txt\nroot@just-a-shell:/# touch /data/2.txt\nroot@just-a-shell:/# exit\nFinally, we can run a shell on the other container and verify that both 1.txt and 2.txt are visible:\ndocker@minikube:~$ docker exec -it cf4502f14be5 /bin/bash\nroot@just-a-shell:/# ls /data\n1.txt  2.txt\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n name: some-pod\nspec:\n containers:\n - image: some-container\n name: some-container\n volumeMounts:\n - mountPath: /ebs\n name: some-volume\n volumes:\n - name: some-volume\n awsElasticBlockStore:\n volumeID: <volume-id>\n fsType: ext4\n```", "```\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n name: efs\n annotations:\n volume.beta.kubernetes.io/storage-class: \"aws-efs\"\nspec:\n accessModes:\n - ReadWriteMany\n resources:\n requests:\n storage: 1Mi\n```", "```\nkind: Pod\napiVersion: v1\nmetadata:\n name: test-pod\nspec:\n containers:\n - name: test-pod\n image: gcr.io/google_containers/busybox:1.24\n command:\n - \"/bin/sh\"\n args:\n - \"-c\"\n - \"touch /mnt/SUCCESS exit 0 || exit 1\"\n volumeMounts:\n - name: efs-pvc\n mountPath: \"/mnt\"\n restartPolicy: \"Never\"\n volumes:\n - name: efs-pvc\n persistentVolumeClaim:\n claimName: efs\n\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n name: some-pod\nspec:\n containers:\n - image: some-container\n name: some-container\n volumeMounts:\n - mountPath: /pd\n name: some-volume\n volumes:\n - name: some-volume\n gcePersistentDisk:\n pdName: <persistent disk name>\n fsType: ext4 \n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n name: some-pod\nspec:\n containers:\n - image: some-container\n name: some-container\n volumeMounts:\n - name: some-volume\n mountPath: /azure\n volumes:\n - name: some-volume\n azureDisk:\n diskName: test.vhd\n diskURI: https://someaccount.blob.microsoft.net/vhds/test.vhd \n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n name: azure-file-secret\ntype: Opaque\ndata:\n azurestorageaccountname: <base64 encoded account name>\n azurestorageaccountkey: <base64 encoded account key>\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n name: some-pod\nspec:\n containers:\n  - image: some-container\n    name: some-container\n    volumeMounts:\n      - name: some-volume\n        mountPath: /azure\n volumes:\n      - name: some-volume\n        azureFile:\n          secretName: azure-file-secret\n         shareName: azure-share\n          readOnly: false\n```", "```\n{\n  \"kind\": \"Endpoints\",\n  \"apiVersion\": \"v1\",\n  \"metadata\": {\n    \"name\": \"glusterfs-cluster\"\n  },\n  \"subsets\": [\n    {\n      \"addresses\": [\n        {\n          \"ip\": \"10.240.106.152\"\n        }\n      ],\n      \"ports\": [\n        {\n          \"port\": 1\n        }\n      ]\n    },\n    {\n      \"addresses\": [\n        {\n          \"ip\": \"10.240.79.157\"\n        }\n      ],\n      \"ports\": [\n        {\n          \"port\": 1\n        }\n      ]\n    }\n  ]\n}\n```", "```\n{\n  \"kind\": \"Service\",\n  \"apiVersion\": \"v1\",\n  \"metadata\": {\n    \"name\": \"glusterfs-cluster\"\n  },\n  \"spec\": {\n    \"ports\": [\n      {\"port\": 1}\n    ]\n  }\n}\n```", "```\n\"volumes\": [\n            {\n                \"name\": \"glusterfsvol\",\n                \"glusterfs\": {\n                    \"endpoints\": \"glusterfs-cluster\",\n                    \"path\": \"kube_vol\",\n                    \"readOnly\": true\n                }\n            }\n        ] \n```", "```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: ceph-secret\ntype: \"kubernetes.io/rbd\" \ndata:\n  key: QVFCMTZWMVZvRjVtRXhBQTVrQ1FzN2JCajhWVUxSdzI2Qzg0SEE9PQ==\n```", "```\n\"volumes\": [\n    {\n        \"name\": \"rbdpd\",\n        \"rbd\": {\n            \"monitors\": [\n          \"10.16.154.78:6789\",\n      \"10.16.154.82:6789\",\n          \"10.16.154.83:6789\"\n        ],\n            \"pool\": \"kube\",\n            \"image\": \"foo\",\n            \"user\": \"admin\",\n            \"secretRef\": {\n      \"name\": \"ceph-secret\"\n      },\n            \"fsType\": \"ext4\",\n            \"readOnly\": true\n        }\n    }\n]\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: cephfs\nspec:\n  containers:\n  - name: cephfs-rw\n    image: kubernetes/pause\n    volumeMounts:\n    - mountPath: \"/mnt/cephfs\"\n      name: cephfs\n  volumes:\n  - name: cephfs\n    cephfs:\n      monitors:\n      - 10.16.154.78:6789\n      - 10.16.154.82:6789\n      - 10.16.154.83:6789\n      user: admin\n      secretFile: \"/etc/ceph/admin.secret\"\n      readOnly: true\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: some-pod\nspec:\n  containers:\n    - name: some-container\n      image: kubernetes/pause\n      volumeMounts:\n          # name must match the volume name below\n          - name: flocker-volume\n            mountPath: \"/flocker\"\n  volumes:\n    - name: flocker-volume\n      flocker:\n        datasetName: some-flocker-dataset\n```", "```\nvolumes:\n  - name: iscsi-volume\n    iscsi:\n      targetPortal: 10.0.2.34:3260\n      iqn: iqn.2001-04.com.example:storage.kube.sys1.xyz\n      lun: 0\n      fsType: ext4\n      readOnly: true  \n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: the-pod\nspec:\n  containers:\n  - name: the-container\n    image: busybox\n    volumeMounts:\n    - name: all-in-one\n      mountPath: \"/projected-volume\"\n      readOnly: true\n  volumes:\n  - name: all-in-one\n    projected:\n      sources:\n      - secret:\n          name: the-secret\n          items:\n            - key: username\n              path: the-group/the-user\n      - downwardAPI:\n          items:\n            - path: \"labels\"\n              fieldRef:\n                fieldPath: metadata.labels\n            - path: \"cpu_limit\"\n              resourceFieldRef:\n                containerName: the-container\n                resource: limits.cpu\n      - configMap:\n          name: the-configmap\n          items:\n            - key: config\n              path: the-group/the-config\n```", "```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-nfs\n  namespace: default\nspec:\n  containers:\n  - name: nginx-nfs\n    image: nginx\n    volumeMounts:\n    - name: test\n      mountPath: /data\n    ports:\n    - containerPort: 80\n  volumes:\n  - name: test\n    flexVolume:\n      driver: \"k8s/nfs\"\n      fsType: \"nfs\"\n      options:\n        server: \"172.16.0.25\"\n        share: \"dws_nas_scratch\"\n```"]