- en: Creating Kubernetes Clusters
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Kubernetes集群
- en: In the previous chapter, we learned what Kubernetes is all about, how it is
    designed, what concepts it supports, how to use its runtime engines, and how it
    fits within the CI/CD pipeline.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解了Kubernetes的全部内容，它的设计方式，支持的概念，如何使用其运行时引擎，以及它如何适用于CI/CD流水线。
- en: 'Creating a Kubernetes cluster is a non-trivial task. There are many options
    and tools to select from, and there are many factors to consider. In this chapter,
    we''ll roll up our sleeves and build some Kubernetes clusters. We will also discuss
    and evaluate tools such as Minikube, kubeadm, kube-spray, bootkube, and stackube.
    We will also look into deployment environments, such as local, cloud, and bare
    metal. The topics we will cover are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Kubernetes集群是一项非常重要的任务。有许多选择和工具可供选择，需要考虑许多因素。在本章中，我们将动手构建一些Kubernetes集群。我们还将讨论和评估诸如Minikube、kubeadm、kube-spray、bootkube和stackube等工具。我们还将研究部署环境，如本地、云和裸机。我们将涵盖的主题如下：
- en: Creating a single-node cluster with Minikube
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Minikube创建单节点集群
- en: Creating a multi-node cluster using kubeadm
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用kubeadm创建多节点集群
- en: Creating clusters in the cloud
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云中创建集群
- en: Creating bare-metal clusters from scratch
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从头开始创建裸机集群
- en: Reviewing other options for creating Kubernetes clusters
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查其他创建Kubernetes集群的选项
- en: At the end of this chapter, you will have a solid understanding of the various
    options to create Kubernetes clusters and knowledge of the best-of-breed tools
    to support the creation of Kubernetes clusters; you will also build a couple of
    clusters, both single-node and multi-node.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将对创建Kubernetes集群的各种选项有扎实的了解，并了解支持创建Kubernetes集群的最佳工具；您还将构建一些集群，包括单节点和多节点。
- en: A quick single-node cluster with Minikube
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Minikube快速创建单节点集群
- en: 'In this section, we will create a single-node cluster on Windows. The reason
    we will use Windows is that Minikube and single-node clusters are most useful
    for local developer machines. While Kubernetes is typically deployed on Linux
    in production, many developers work on Windows PCs or Macs. That said, there aren''t
    too many differences if you do want to install Minikube on Linux:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在Windows上创建一个单节点集群。我们之所以使用Windows，是因为Minikube和单节点集群对于本地开发者机器非常有用。虽然Kubernetes通常在生产环境中部署在Linux上，但许多开发人员使用Windows
    PC或Mac。也就是说，如果您确实想在Linux上安装Minikube，也没有太多区别：
- en: '![](Images/60646c29-b79f-4add-9880-40725cee6321.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/60646c29-b79f-4add-9880-40725cee6321.jpg)'
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'There are some prerequisites to install before you can create the cluster itself.
    These include VirtualBox, the `kubectl` command-line interface for Kubernetes,
    and, of course, Minikube itself. Here is a list of the latest versions at the
    time of writing:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建集群之前，有一些先决条件需要安装。这些包括VirtualBox，用于Kubernetes的`kubectl`命令行界面，当然还有Minikube本身。以下是撰写时的最新版本列表：
- en: '**VirtualBox**: [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VirtualBox**: [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)'
- en: '**Kubectl**: [https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubectl**: [https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)'
- en: '**Minikube**: [https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Minikube**: [https://kubernetes.io/docs/tasks/tools/install-minikube/](https://kubernetes.io/docs/tasks/tools/install-minikube/)'
- en: On Windows
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上
- en: Install VirtualBox and make sure kubectl and Minikube are on your path. I personally
    just throw all the command-line programs I use into `c:\windows`. You may prefer
    another approach. I use the excellent ConEMU to manage multiple consoles, terminals,
    and SSH sessions. It works with `cmd.exe`, PowerShell, PuTTY, Cygwin, msys, and
    Git-Bash. It doesn't get much better than that on Windows.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 VirtualBox 并确保 kubectl 和 Minikube 在你的路径上。我个人只是把我使用的所有命令行程序都放在 `c:\windows`
    中。你可能更喜欢另一种方法。我使用优秀的 ConEMU 来管理多个控制台、终端和 SSH 会话。它可以与 `cmd.exe`、PowerShell、PuTTY、Cygwin、msys
    和 Git-Bash 一起使用。在 Windows 上没有比这更好的了。
- en: With Windows 10 Pro, you have the option to use the Hyper-V hypervisor. This
    is technically a better solution than VirtualBox, but it requires the Pro version
    of Windows and is completely Windows-specific. When using VirtualBox, these instructions
    are universal and will be easy to adapt to other versions of Windows, or other
    operating systems altogether. If you have Hyper-V enabled, you must disable it
    because VirtualBox can't co-exist with Hyper-V.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 10 Pro 中，你可以选择使用 Hyper-V hypervisor。这在技术上是比 VirtualBox 更好的解决方案，但它需要
    Windows 的专业版，并且完全是 Windows 特有的。当使用 VirtualBox 时，这些说明是通用的，并且很容易适应其他版本的 Windows，或者其他操作系统。如果你已经启用了
    Hyper-V，你必须禁用它，因为 VirtualBox 无法与 Hyper-V 共存。
- en: 'I recommend using PowerShell in administrator mode. You can add the following
    alias and function to your PowerShell profile:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议在管理员模式下使用 PowerShell。你可以将以下别名和函数添加到你的 PowerShell 配置文件中：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: On macOS
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 上
- en: 'You can add aliases to your `.bashrc` file (similar to the PowerShell alias
    and function on Windows):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在你的 `.bashrc` 文件中添加别名（类似于 Windows 上的 PowerShell 别名和函数）：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now I can use `k` and `mk` and type less. The flags to Minikube in the `mk`
    function provide better logging that way, and direct the output to the console,
    as well as to the files (similar to tee).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我可以使用 `k` 和 `mk` 并且输入更少。`mk` 函数中的 Minikube 标志提供更好的日志记录方式，并将输出直接输出到控制台，以及文件中（类似于
    tee）。
- en: 'Type `mk version` to verify that Minikube is correctly installed and functioning:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 `mk version` 来验证 Minikube 是否正确安装并运行：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Type `k version` to verify that kubectl is correctly installed and functioning:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 `k version` 来验证 kubectl 是否正确安装并运行：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Don't worry about the error on the last line. There is no cluster running, so
    kubectl can't connect to anything. That's expected.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心最后一行的错误。没有运行的集群，所以 kubectl 无法连接到任何东西。这是预期的。
- en: You can explore the available commands and flags for both Minikube and kubectl.
    I will not go over each and every one, only the commands I use.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以探索 Minikube 和 kubectl 的可用命令和标志。我不会逐个介绍每一个，只介绍我使用的命令。
- en: Creating the cluster
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建集群
- en: 'The Minikube tool supports multiple versions of Kubernetes. At the time of
    writing, this is the list of supported versions:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube 工具支持多个版本的 Kubernetes。在撰写本文时，支持的版本列表如下：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I will go with 1.10.0, the latest stable release. Let's create the cluster by
    using the `start` command and specifying v1.10.0 as the version.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我将选择 1.10.0，最新的稳定版本。让我们使用 `start` 命令并指定 v1.10.0 作为版本来创建集群。
- en: 'This can take a while as Minikube may need to download an image and then set
    up the local cluster. Just let it run. Here is the expected output (on Mac):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要一段时间，因为 Minikube 可能需要下载镜像，然后设置本地集群。让它运行就好了。这是预期的输出（在 Mac 上）：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s review what Minikube does by following the output. You''ll need to do
    a lot of this when creating a cluster from scratch:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过跟踪输出来回顾 Minikube 的操作。当从头开始创建集群时，你需要做很多这样的操作：
- en: Start a VirtualBox VM
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 VirtualBox 虚拟机
- en: Create certificates for the local machine and the VM
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为本地机器和虚拟机创建证书
- en: Download images
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载镜像
- en: Set up networking between the local machine and the VM
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地机器和虚拟机之间设置网络
- en: Run the local Kubernetes cluster on the VM
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在虚拟机上运行本地 Kubernetes 集群
- en: Configure the cluster
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置集群
- en: Start all the Kubernetes control plane components
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动所有Kubernetes控制平面组件
- en: Configure kubectl to talk to the cluster
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置kubectl以与集群通信
- en: Troubleshooting
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'If something goes wrong during the process, try to follow the error messages.
    You can add the `--alsologtostderr` flag to get detailed error info from the console.
    Everything Minikube does is organized neatly under `~/.minikube`. Here is the
    directory structure:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在过程中出现问题，请尝试遵循错误消息。您可以添加`--alsologtostderr`标志以从控制台获取详细的错误信息。Minikube所做的一切都整齐地组织在`~/.minikube`下。以下是目录结构：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Checking out the cluster
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查集群
- en: Now that we have a cluster up and running, let's peek inside.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有一个运行中的集群，让我们来看看里面。
- en: 'First, let''s `ssh` into the VM:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们`ssh`进入虚拟机：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Great! That works. The weird symbols are ASCII art for `minikube`. Now, let's
    start using `kubectl`, because it is the Swiss Army knife of Kubernetes and will
    be useful for all clusters (including federated clusters).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！成功了。奇怪的符号是`minikube`的ASCII艺术。现在，让我们开始使用`kubectl`，因为它是Kubernetes的瑞士军刀，并且对所有集群（包括联合集群）都很有用。
- en: 'We will cover many of the `kubectl` commands on our journey. First, let''s
    check the cluster status using `cluster-info`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的旅程中涵盖许多`kubectl`命令。首先，让我们使用`cluster-info`检查集群状态：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The Kubernetes master is running at `https://192.168.99.101:8443`
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes主节点正在运行在`https://192.168.99.101:8443`
- en: KubeDNS is running at `https://192.168.99.1010:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy`
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: KubeDNS正在运行在`https://192.168.99.1010:8443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy`
- en: To further debug and diagnose cluster problems, use `kubectl cluster-info dump`.
    You can see that the master is running properly. To see a much more detailed view
    of all the objects in the cluster as a JSON type, use `k cluster-info dump`. The
    output can be a little daunting, so let's use more specific commands to explore
    the cluster.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要进一步调试和诊断集群问题，请使用`kubectl cluster-info dump`。您可以看到主节点正在正常运行。要以JSON类型查看集群中所有对象的更详细视图，请使用`k
    cluster-info dump`。输出可能有点令人生畏，因此让我们使用更具体的命令来探索集群。
- en: 'Let''s check out the nodes in the cluster using `get nodes`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`get nodes`检查集群中的节点：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: So, we have one node called `minikube`. To get a lot of information about it,
    type `k describe node minikube`. The output is verbose; I'll let you try it yourself.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们有一个名为`minikube`的节点。要获取有关它的大量信息，请输入`k describe node minikube`。输出是冗长的；我会让您自己尝试。
- en: Doing work
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做工作
- en: 'We have a nice empty cluster up and running (well, not completely empty, as
    the DNS service and dashboard run as pods in the `kube-system` namespace). It''s
    time to run some pods. Let''s use the `echo` server as an example:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个漂亮的空集群正在运行（好吧，不完全是空的，因为DNS服务和仪表板作为`kube-system`命名空间中的pod运行）。现在是时候运行一些pod了。让我们以`echo`服务器为例：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Kubernetes created a deployment and we have a pod running. Note the `echo`
    prefix:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes创建了一个部署，我们有一个正在运行的pod。注意`echo`前缀：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To expose our pod as a service, type the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要将我们的pod公开为服务，请输入以下内容：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Exposing the service as a `NodePort` type means that it is exposed to the host
    on a port, but it is not the `8080` port we ran the pod on. Ports get mapped in
    the cluster. To access the service, we need the cluster IP and exposed port:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 将服务公开为`NodePort`类型意味着它对主机公开端口，但它不是我们在其上运行pod的`8080`端口。端口在集群中映射。要访问服务，我们需要集群IP和公开的端口：
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we can access the `echo` service, which returns a lot of information:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以访问`echo`服务，它会返回大量信息：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Congratulations! You just created a local Kubernetes cluster and deployed a
    service.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您刚刚创建了一个本地Kubernetes集群并部署了一个服务。
- en: Examining the cluster with the dashboard
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用仪表板检查集群
- en: Kubernetes has a very nice web interface, which is deployed, of course, as a
    service in a pod. The dashboard is well designed, and provides a high-level overview
    of your cluster, and also drills down into individual resources, viewing logs,
    editing resource files, and more. It is the perfect weapon when you want to manually
    check out your cluster. To launch it, type `minikube dashboard`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes有一个非常好的web界面，当然是部署为一个pod中的服务。仪表板设计得很好，提供了对集群的高级概述，还可以深入到单个资源，查看日志，编辑资源文件等。当你想要手动检查你的集群时，它是一个完美的武器。要启动它，输入`minikube
    dashboard`。
- en: Minikube will open a browser window with the dashboard UI. Note that on Windows,
    Microsoft Edge can't display the dashboard. I had to run it myself on a different
    browser.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube将打开一个带有仪表板UI的浏览器窗口。请注意，在Windows上，Microsoft Edge无法显示仪表板。我不得不在不同的浏览器上运行它。
- en: 'Here is the workloads view, which displays Deployments, Replica Sets, Replication
    Controllers, and Pods:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是工作负载视图，显示部署、副本集、复制控制器和Pod：
- en: '![](Images/cc5421c1-7fb6-4997-993a-5b8f1e0f30dc.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cc5421c1-7fb6-4997-993a-5b8f1e0f30dc.png)'
- en: It can also display Daemon Sets, Stateful Sets, and Jobs, but we don't have
    any in this cluster.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 它还可以显示守护进程集、有状态集和作业，但在这个集群中我们没有这些。
- en: In this section, we created a local, single-node Kubernetes cluster on Windows,
    explored it a little bit using `kubectl`, deployed a service, and played with
    the web UI. In the next section, we'll move on to a multi-node cluster.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们在Windows上创建了一个本地的单节点Kubernetes集群，使用`kubectl`进行了一些探索，部署了一个服务，并尝试了web
    UI。在下一部分，我们将继续创建一个多节点集群。
- en: Creating a multinode cluster using kubeadm
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用kubeadm创建一个多节点集群
- en: In this section, I'll introduce you to `kubeadm`, the recommended tool for creating
    Kubernetes clusters on all environments. It is still under active development,
    but it is the way to go because it is part of Kubernetes, and will always embody
    best practices. To make it accessible for the entire cluster, we will base it
    on VMs. This section is for readers who want  a hands-on experience of deploying
    a multi-node cluster.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我将向您介绍`kubeadm`，这是在所有环境中创建Kubernetes集群的推荐工具。它仍在积极开发中，但这是因为它是Kubernetes的一部分，并且始终体现最佳实践。为了使其对整个集群可访问，我们将以虚拟机为基础。这一部分是为那些想要亲自部署多节点集群的读者准备的。
- en: Setting expectations
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设定期望
- en: 'Before embarking on this journey, I want to make it clear that it might *not*
    be a smooth ride. `kubeadm` has a difficult task: It has to follow the evolution
    of Kubernetes itself, which is a moving target. As a result, it is not always
    stable. When I wrote the first edition of *Mastering Kubernetes*, I had to dig
    deep and hunt for various workarounds to make it work. Guess what? I had to do
    the same thing for the second edition. Be prepared to make some adjustments and
    ask around. If you want a more streamlined solution, I will discuss some very
    good options later.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在踏上这段旅程之前，我想明确指出，这可能*不会*一帆风顺。`kubeadm`的任务很艰巨：它必须跟随Kubernetes本身的发展，而Kubernetes是一个不断变化的目标。因此，它并不总是稳定的。当我写第一版《精通Kubernetes》时，我不得不深入挖掘并寻找各种解决方法来使其正常工作。猜猜？我在第二版中也不得不做同样的事情。准备好做一些调整并寻求帮助。如果你想要一个更简化的解决方案，我将在后面讨论一些非常好的选择。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Kubeadm operates on preprovisioned hardware (physical or virtual). Before we
    create the Kubernetes cluster, we need to prepare a few VMs and install basic
    software, such as `docker`, `kubelet`, `kubeadm`, and `kubectl` (which is only
    needed on the master).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeadm在预配置的硬件（物理或虚拟）上运行。在创建Kubernetes集群之前，我们需要准备一些虚拟机并安装基本软件，如`docker`、`kubelet`、`kubeadm`和`kubectl`（仅在主节点上需要）。
- en: Preparing a cluster of vagrant VMs
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备一个vagrant虚拟机集群
- en: 'The following vagrant file will create a cluster of four VMs called `n1`, `n2`,
    `n3`, and `n4`. Type `vagrant up` to get the cluster up and running. It is based
    on Bento/Ubuntu versions 16.04 and not Ubuntu/Xenial, which suffers from various
    issues:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下vagrant文件将创建一个名为`n1`，`n2`，`n3`和`n4`的四个VM的集群。键入`vagrant up`以启动并运行集群。它基于Bento/Ubuntu版本16.04，而不是Ubuntu/Xenial，后者存在各种问题：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Installing the required software
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装所需的软件
- en: 'I like Ansible a lot for configuration management. I installed it on the `n4`
    VM (running Ubuntu 16.04). From now on I''ll use `n4` as my control machine, which
    means we''re operating in a Linux environment. I could use Ansible directly on
    my Mac, but since Ansible doesn''t run on Windows, I prefer a more universal approach:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常喜欢Ansible进行配置管理。我在运行Ubuntu 16.04的`n4` VM上安装了它。从现在开始，我将使用`n4`作为我的控制机器，这意味着我们正在在Linux环境中操作。我可以直接在我的Mac上使用Ansible，但由于Ansible无法在Windows上运行，我更喜欢更通用的方法：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'I used version 2.5.0\. You should be fine with the latest version:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用的是2.5.0版本。你应该使用最新版本：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `sshpass` program I installed will help `ansible` connect to all the vagrant
    VMs with the built-in vagrant user. This is important only for a local VM-based
    multi-node cluster.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我安装的`sshpass`程序将帮助`ansible`连接到所有带有内置vagrant用户的vagrant VM。这仅对本地基于VM的多节点集群重要。
- en: 'I created a directory called `ansible` and put three files in it: `hosts`,
    `vars.yml`, and `playbook.yml`.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个名为`ansible`的目录，并在其中放置了三个文件：`hosts`，`vars.yml`和`playbook.yml`。
- en: The host file
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主机文件
- en: 'The `host` file is the inventory file that tells the `ansible` directory what
    hosts to operate on. The hosts must be SSH-accessible from the controller machine.
    The following are the three VMs that the cluster will be installed on:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`host`文件是清单文件，告诉`ansible`目录要在哪些主机上操作。这些主机必须可以从控制机器进行SSH访问。以下是将安装集群的三个VM：'
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The vars.yml file
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: vars.yml文件
- en: 'The `vars.yml` file just keeps a list of the packages I want to install on
    each node. `vim`, `htop`, and `tmux` are my favorite packages to install on each
    machine I need to manage. The others are required by Kubernetes:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`vars.yml`文件只是保留了我想要在每个节点上安装的软件包列表。`vim`，`htop`和`tmux`是我在需要管理的每台机器上安装的喜爱软件包。其他软件包是Kubernetes所需的：'
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The playbook.yml file
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: playbook.yml文件
- en: 'The `playbook.yml` file is the file you run to install the packages on all
    hosts:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`playbook.yml`文件是您在所有主机上安装软件包时运行的文件：'
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Since some of the packages are from the Kubernetes APT repository, I need to
    add it, along with the Google signing key:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一些软件包来自Kubernetes APT存储库，我需要添加它，以及Google签名密钥：
- en: 'Connect to `n4`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到`n4`：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You may need to `ssh` once to each of the `n1`, `n2`, and `n3` nodes:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要对`n1`，`n2`和`n3`节点中的每一个进行一次`ssh`：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'A more permanent solution is to add a file called `~/.ansible.cfg` that contains
    the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更持久的解决方案是添加一个名为`~/.ansible.cfg`的文件，其中包含以下内容：
- en: '[PRE23]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the playbook from `n4` as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 从`n4`运行playbook如下：
- en: '[PRE24]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: If you run into connection failure, try again. The Kubernetes APT repository
    is sometimes slow to respond. You need to do this just once per node.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到连接失败，请重试。Kubernetes APT存储库有时会响应缓慢。您只需要对每个节点执行一次此操作。
- en: Creating the cluster
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建集群
- en: It's time to create the cluster itself. We'll initialize the master on the first
    VM, then set up networking and add the rest of the VMs as nodes.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是创建集群本身的时候了。我们将在第一个VM上初始化主节点，然后设置网络并将其余的VM添加为节点。
- en: Initializing the master
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化主节点
- en: 'Let''s initialize the master on `n1` (`192.168.77.10`). It is critical to use
    the `--apiserver-advertise-address` flag in case of a vagrant VM-based cloud:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`n1`（`192.168.77.10`）上初始化主节点。在基于vagrant VM的云环境中，使用`--apiserver-advertise-address`标志是至关重要的：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In Kubernetes 1.10.1, this results in the following error message:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes 1.10.1中，这导致了以下错误消息：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The reason is that the required cri-tools are not installed by default. We
    are dealing with the cutting edge of Kubernetes here. I created an additional
    playbook to install Go and cri-tools, turned off the swap, and fixed the hostname
    of the vagrant VMs:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是默认情况下未安装所需的cri-tools。我们正在处理Kubernetes的最前沿。我创建了一个额外的playbook来安装Go和cri-tools，关闭了交换，并修复了vagrant
    VM的主机名：
- en: '[PRE27]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Remember to run it on `n4` again to update all the nodes in the cluster.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 记得再次在`n4`上运行它，以更新集群中的所有节点。
- en: 'Here is some of the output of a successful launch of Kubernetes:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是成功启动Kubernetes的一些输出：
- en: '[PRE28]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'There will be a lot more information that you must write down to join other
    nodes to the cluster later. To start using your cluster, you need to run the following
    as a regular user:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以后加入其他节点到集群时，你需要写下更多的信息。要开始使用你的集群，你需要以普通用户身份运行以下命令：
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: You can now join any number of machines by running a command on each node as
    the root. Use the command returned from `kubeadm init cmmand:sudo kubeadm join
    --token << token>> --discovery-token-ca-cert-hash <<discvery token>> --skip-prflight-cheks`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以通过在每个节点上以root身份运行一个命令来加入任意数量的机器。使用从`kubeadm init`命令返回的命令：`sudo kubeadm
    join --token << token>> --discovery-token-ca-cert-hash <<discvery token>> --skip-prflight-cheks`。
- en: Setting up the pod network
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Pod网络
- en: The networking of the cluster is the big-ticket item. The pods need to be able
    to talk to each other. That requires a pod network add-on. There are several options
    for this. Clusters generated by `kubeadm`, require a CNI-based add-on. I chose
    to use the Weave Net add-on, which supports the Network Policy resource. Your
    can choose whatever you like.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 集群的网络是重中之重。Pod需要能够相互通信。这需要一个Pod网络插件。有几种选择。由`kubeadm`生成的集群需要基于CNI的插件。我选择使用Weave
    Net插件，它支持网络策略资源。你可以选择任何你喜欢的。
- en: 'Run the following commands on the master VM:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在主VM上运行以下命令：
- en: '[PRE30]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'You should see the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到以下内容：
- en: '[PRE31]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'To verify, use the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要验证，请使用以下命令：
- en: '[PRE32]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The last pod is our `weave-net-fl7wn`, which is what we're looking for, as well
    as the `kube-dns pod`. Both are running. All is well!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个Pod是我们的`weave-net-fl7wn`，这正是我们要找的，以及`kube-dns pod`。两者都在运行。一切都很好！
- en: Adding the worker nodes
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加工作节点
- en: 'Now we can add worker nodes to the cluster using the token we got earlier.
    On each node, run the following command (don''t forget `sudo`) with the tokens
    you got when initializing Kubernetes on the master node:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用之前获得的令牌将工作节点添加到集群中。在每个节点上，运行以下命令（不要忘记`sudo`）并使用在主节点上初始化Kubernetes时获得的令牌：
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'At the time of writing (using Kubernetes 1.10) some preflight checks fail,
    but this is a false negative. Everything is actually fine, and you can skip those
    preflight checks by adding `--ignore-preflight-errors=all`. I hope that when you
    read the book, these wrinkles will be ironed out. You should see the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时（使用Kubernetes 1.10），一些预检查失败，但这是一个错误的负面结果。实际上一切都很好，你可以通过添加`--ignore-preflight-errors=all`来跳过这些预检查。希望当你阅读本书时，这些问题已经解决。你应该看到以下内容：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'This node has joined the cluster:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此节点已加入集群：
- en: '[PRE35]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Run `kubectl get nodes` on the master to see this node join the cluster.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在主节点上运行`kubectl get nodes`，查看此节点加入集群。
- en: This might not work for some combinations because of an issue with CNI plugin
    initialization.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 由于CNI插件初始化的问题，某些组合可能无法正常工作。
- en: Creating clusters in the cloud (GCP, AWS, and Azure)
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在云中创建集群（GCP，AWS和Azure）
- en: Creating clusters locally is fun, and important during development and when
    trying to troubleshoot problems locally. But in the end, Kubernetes is designed
    for cloud-native applications (applications that run in the cloud). Kubernetes
    doesn't want to be aware of individual cloud environments because that doesn't
    scale. Instead, Kubernetes has the concept of a cloud-provider interface. Every
    cloud provider can implement this interface and then host Kubernetes. Note that,
    as of version 1.5, Kubernetes still maintains implementations for many cloud providers
    in its tree, but in the future, they will be refactored out.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地创建集群很有趣，在开发过程中以及在尝试在本地解决问题时很重要。但最终，Kubernetes是为云原生应用程序（在云中运行的应用程序）而设计的。Kubernetes不希望了解单个云环境，因为这不可扩展。相反，Kubernetes具有云提供程序接口的概念。每个云提供程序都可以实现此接口，然后托管Kubernetes。请注意，截至1.5版本，Kubernetes仍在其树中维护许多云提供程序的实现，但在将来，它们将被重构。
- en: The cloud-provider interface
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云提供程序接口
- en: 'The cloud-provider interface is a collection of Go data types and interfaces.
    It is defined in a file called `cloud.go`, available at [http://bit.ly/2fq4NbW](http://bit.ly/2fq4NbW).
    Here is the main interface:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 云提供程序接口是一组Go数据类型和接口。它在一个名为`cloud.go`的文件中定义，可在[http://bit.ly/2fq4NbW](http://bit.ly/2fq4NbW)上找到。这是主要接口：
- en: '[PRE36]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This is very clear. Kubernetes operates in terms of instances, `Zones`, `Clusters`,
    and `Routes`, and also requires access to a load balancer and provider name. The
    main interface is primarily a gateway. Most methods return other interfaces.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这很清楚。Kubernetes以实例，`区域`，`集群`和`路由`运行，并且需要访问负载均衡器和提供者名称。主要接口主要是一个网关。大多数方法返回其他接口。
- en: 'For example, the `Clusters` interface is very simple:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`Clusters`接口非常简单：
- en: '[PRE37]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `ListClusters()` method returns cluster names. The `Master()` method returns
    the IP address or DNS name of the master node.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListClusters()`方法返回集群名称。`Master()`方法返回主节点的IP地址或DNS名称。'
- en: The other interfaces are not much more complicated. The entire file is 214 lines
    long (at the time of writing) and includes a lot of comments. The take-home point
    is that it is not too complicated to implement a Kubernetes provider if your cloud
    utilizes those basic concepts.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 其他接口并不复杂。整个文件有214行（截至目前为止），包括很多注释。重点是，如果您的云平台使用这些基本概念，实现Kubernetes提供程序并不太复杂。
- en: Google Cloud Platform (GCP)
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谷歌云平台（GCP）
- en: The **Google Cloud Platform** (**GCP**) supports Kubernetes out of the box.
    The so-called **Google Kubernetes Engine** (**GKE**) is a container management
    solution built on Kubernetes. You don't need to install Kubernetes on GCP, and
    you can use the Google Cloud API to create Kubernetes clusters and provision them.
    The fact that Kubernetes is a built-in part of the GCP means it will always be
    well integrated and well tested, and you don't have to worry about changes to
    the underlying platform breaking the cloud-provider interface.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**谷歌云平台**（**GCP**）支持Kubernetes开箱即用。所谓的**谷歌Kubernetes引擎**（**GKE**）是建立在Kubernetes上的容器管理解决方案。您不需要在GCP上安装Kubernetes，可以使用Google
    Cloud API创建Kubernetes集群并进行配置。Kubernetes作为GCP的内置部分意味着它将始终被很好地集成和经过充分测试，您不必担心底层平台的更改会破坏云提供程序接口。'
- en: All in all, if you plan to base your system on Kubernetes and you don't have
    any existing code on other cloud platforms, then GCP is a solid choice.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，如果您计划基于Kubernetes构建系统，并且在其他云平台上没有任何现有代码，那么GCP是一个可靠的选择。
- en: Amazon Web Services (AWS)
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊网络服务（AWS）
- en: '**Amazon Web Services** (**AWS**) has its own container-management service
    called ECS, but it is not based on Kubernetes. You can run Kubernetes on AWS very
    well. It is a supported provider, and there is a lot of documentation on how to
    set it up. While you could provision some VMs yourself and use `kubeadm`, I recommend
    using the **Kubernetes operations** (**Kops**) project. Kops is a Kubernetes project
    available on GitHub ([http://bit.ly/2ft5KA5](http://bit.ly/2ft5KA5)). It is not
    part of Kubernetes itself, but it is developed and maintained by the Kubernetes
    developers.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚马逊网络服务**（**AWS**）有自己的容器管理服务叫做ECS，但它不是基于Kubernetes的。你可以在AWS上很好地运行Kubernetes。它是一个受支持的提供者，并且有很多关于如何设置它的文档。虽然你可以自己提供一些VM并使用`kubeadm`，但我建议使用**Kubernetes运维**（**Kops**）项目。Kops是一个在GitHub上可用的Kubernetes项目（[http://bit.ly/2ft5KA5](http://bit.ly/2ft5KA5)）。它不是Kubernetes本身的一部分，但是由Kubernetes开发人员开发和维护。'
- en: 'It supports the following features:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 它支持以下功能：
- en: Automated Kubernetes cluster CRUD for the cloud (AWS)
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云端（AWS）自动化Kubernetes集群CRUD
- en: Highly-available (HA) Kubernetes clusters
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高可用（HA）的Kubernetes集群
- en: It uses a state-sync model for dry-run and automatic idempotency
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用状态同步模型进行干运行和自动幂等性
- en: Custom support for `kubectl` add-ons
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl`的自定义支持插件'
- en: Kops can generate Terraform configuration
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kops可以生成Terraform配置
- en: It is based on a simple meta-model defined in a directory tree
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它基于一个在目录树中定义的简单元模型
- en: Easy command-line syntax
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单的命令行语法
- en: Community support
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社区支持
- en: 'To create a cluster, you need to do some minimal DNS configuration through
    `route53`, set up a S3 bucket to store the cluster configuration, and then run
    a single command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个集群，你需要通过`route53`进行一些最小的DNS配置，设置一个S3存储桶来存储集群配置，然后运行一个命令：
- en: '[PRE38]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The complete instructions can be found at [http://bit.ly/2f7r6EK](http://bit.ly/2f7r6EK).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的说明可以在[http://bit.ly/2f7r6EK](http://bit.ly/2f7r6EK)找到。
- en: 'At the end of 2017, AWS joined the CNCF and announced two big projects regarding
    Kubernetes: Its own Kubernetes-based container orchestration solution (EKS) and
    a container-on-demand solution (Fargate).'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在2017年底，AWS加入了CNCF，并宣布了两个关于Kubernetes的重大项目：自己的基于Kubernetes的容器编排解决方案（EKS）和一个按需的容器解决方案（Fargate）。
- en: Amazon Elastic Container Service for Kubernetes (EKS)
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊弹性容器服务用于Kubernetes（EKS）
- en: '**Amazon Elastic Container Service for Kubernetes** is a fully managed and
    highly available Kubernetes solution. It has three masters running in three AZs.
    EKS also takes care of upgrades and patching. The great thing about EKS is that
    it runs a stock Kubernetes without any changes. This means you can use all the
    standard plugins and tools developed by the community. It also opens the door
    to convenient cluster federation with other cloud providers and/or your own on-premises
    Kubernetes clusters.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚马逊弹性容器服务用于Kubernetes**是一个完全托管且高可用的Kubernetes解决方案。它有三个主节点在三个可用区运行。EKS还负责升级和打补丁。EKS的好处是它运行的是原始的Kubernetes，没有任何改动。这意味着你可以使用社区开发的所有标准插件和工具。它还为与其他云提供商和/或你自己的本地Kubernetes集群方便的集群联合开启了大门。'
- en: EKS provides deep integration with AWS infrastructure. IAM authentication is
    integrated with Kubernetes **role-based access control** (**RBAC**).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: EKS与AWS基础设施深度集成。IAM认证与Kubernetes的**基于角色的访问控制**（**RBAC**）集成。
- en: You can also use `PrivateLink` if you want to access your Kubernetes masters
    directly from your own Amazon VPC. With `PrivateLink`, your Kubernetes masters
    and the Amazon EKS service endpoint appear as elastic network interfaces with
    private IP addresses in your Amazon VPC.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想直接从你自己的Amazon VPC访问你的Kubernetes主节点，你也可以使用`PrivateLink`。使用`PrivateLink`，你的Kubernetes主节点和Amazon
    EKS服务端点将显示为弹性网络接口，具有Amazon VPC中的私有IP地址。
- en: Another important piece of the puzzle is a special CNI plugin that lets your
    Kubernetes components talk to each other using AWS networking.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 拼图的另一个重要部分是一个特殊的CNI插件，它让您的Kubernetes组件可以使用AWS网络相互通信。
- en: Fargate
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fargate
- en: '**Fargate** lets you run containers directly without worrying about provisioning
    hardware. It eliminates a huge part of the operational complexity at the cost
    of losing some control. When using Fargate, you package your application into
    a container, specify CPU and memory requirements, and define networking and IAM
    policies, and you''re off to the races. Fargate can run on top of ECS and EKS.
    It is a very interesting member of the serverless camp, although it''s not directly
    related to Kubernetes.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**Fargate**让您可以直接运行容器，而不必担心硬件配置。它消除了操作复杂性的很大一部分，但代价是失去了一些控制。使用Fargate时，您将应用程序打包到容器中，指定CPU和内存要求，并定义网络和IAM策略，然后就可以运行了。Fargate可以在ECS和EKS上运行。它是无服务器阵营中非常有趣的一员，尽管它与Kubernetes没有直接关联。'
- en: Azure
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure
- en: '**Azure** used to have its own container management service. You could use
    the Mesos-based DC/OS or Docker Swarm to manage them, but you could also use Kubernetes,
    of course. You could also provision the cluster yourself (for example, using Azure''s
    desired-state configuration) then create the Kubernetes cluster using `kubeadm`.
    The recommended approach used to be to use yet another non-core Kubernetes project
    called `kubernetes-anywhere` ([http://bit.ly/2eCS7Ps](http://bit.ly/2eCS7Ps)).
    The goal of `kubernetes-anywhere` is to provide a cross-platform way to create
    clusters in a cloud environment (at least for GCP, AWS, and Azure).'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure**曾经拥有自己的容器管理服务。您可以使用基于Mesos的DC/OS或Docker Swarm来管理它们，当然也可以使用Kubernetes。您也可以自己配置集群（例如，使用Azure的期望状态配置），然后使用`kubeadm`创建Kubernetes集群。推荐的方法曾经是使用另一个非核心的Kubernetes项目，称为`kubernetes-anywhere`（[http://bit.ly/2eCS7Ps](http://bit.ly/2eCS7Ps)）。`kubernetes-anywhere`的目标是提供一种在云环境中创建集群的跨平台方式（至少对于GCP、AWS和Azure）。'
- en: The process is pretty painless. You need to have Docker, `make`, and `kubectl`
    installed, and of course, your Azure subscription ID. Then, you clone the `kubernetes-anywhere`
    repository, run a couple of `make` commands, and your cluster is good to go.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程非常简单。您需要安装Docker、`make`和`kubectl`，当然还需要您的Azure订阅ID。然后，您克隆`kubernetes-anywhere`存储库，运行一些`make`命令，您的集群就可以运行了。
- en: The complete instructions to create an Azure cluster are at [http://bit.ly/2d56WdA](http://bit.ly/2d56WdA).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Azure集群的完整说明请参见[http://bit.ly/2d56WdA](http://bit.ly/2d56WdA)。
- en: However, in the second half of 2017, Azure jumped on the Kubernetes bandwagon
    too and introduced AKS-Azure Container Service. It is similar to Amazon EKS, although
    it's a little further ahead in its implementation.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在2017年下半年，Azure也跳上了Kubernetes的列车，并推出了AKS-Azure容器服务。它类似于Amazon EKS，尽管在实施上稍微领先一些。
- en: AKS provides a REST API, as well as a CLI, to manage your Kubernetes cluster,
    but you can use `kubectl` and any other Kubernetes tooling directly.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: AKS提供了一个REST API，以及一个CLI，用于管理您的Kubernetes集群，但您也可以直接使用`kubectl`和任何其他Kubernetes工具。
- en: 'Here are some of the benefits of using AKS:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用AKS的一些好处：
- en: Automated Kubernetes version upgrades and patching
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化的Kubernetes版本升级和修补
- en: Easy cluster scaling
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松扩展集群
- en: Self-healing hosted control plane (masters)
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自愈托管控制平面（主控）
- en: Cost savings—pay only for running agent pool nodes
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节省成本-只为运行的代理节点付费
- en: In this section, we covered the cloud-provider interface and looked at the various
    recommended ways to create Kubernetes clusters on various cloud providers. The
    scene is still young and the tools evolving quickly. I believe convergence will
    happen soon. Tools and projects such as `kubeadm`, `kops`, `Kargo`, and `kubernetes-anywhere`
    will eventually merge and provide a uniform and easy way to bootstrap Kubernetes
    clusters.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了云服务提供商接口，并介绍了在各种云服务提供商上创建Kubernetes集群的各种推荐方法。这个领域仍然很年轻，工具在迅速发展。我相信融合很快就会发生。诸如`kubeadm`、`kops`、`Kargo`和`kubernetes-anywhere`等工具和项目最终将合并，并提供一种统一且简单的方式来引导Kubernetes集群。
- en: Alibaba Cloud
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阿里巴巴云
- en: The Chinese **Alibaba** Cloud is an up-and-comer on the cloud platform scene.
    It mimics AWS pretty closely, although its English documentation leaves a lot
    to be desired. I deployed a production application on Ali Cloud, but not one that
    used Kubernetes clusters. There seems to be official support for Kubernetes on
    Ali Cloud, but the documentation is in Chinese. I found one forum post in English
    that details how to deploy a Kubernetes cluster on Ali Cloud at [https://www.alibabacloud.com/forum/read-830](https://www.alibabacloud.com/forum/read-830).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 中国的**阿里巴巴**云是云平台领域的新秀。它与AWS非常相似，尽管其英文文档还有很大的改进空间。我在阿里云上部署了一个生产应用，但没有使用Kubernetes集群。似乎阿里云对Kubernetes有官方支持，但文档是中文的。我在一个英文论坛帖子中找到了详细介绍如何在阿里云上部署Kubernetes集群的信息，链接为[https://www.alibabacloud.com/forum/read-830](https://www.alibabacloud.com/forum/read-830)。
- en: Creating a bare-metal cluster from scratch
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从头开始创建裸机集群
- en: In the previous section, we looked at running Kubernetes on cloud providers.
    This is the dominant deployment story for Kubernetes, but there are strong use
    cases for running Kubernetes on bare metal. I don't focus here on hosted versus
    on-premises; this is yet another dimension. If you already manage a lot of servers
    on-premises, you are in the best position to decide.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了在云服务提供商上运行Kubernetes。这是Kubernetes的主要部署方式，但在裸机上运行Kubernetes也有很强的用例。我在这里不关注托管与本地部署；这是另一个维度。如果您已经在本地管理了很多服务器，那么您就处于最佳决策位置。
- en: Use cases for bare metal
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 裸机的用例
- en: Bare-metal clusters are a beast especially if you manage them yourself. There
    are companies that provide commercial support for bare-metal Kubernetes clusters,
    such as Platform 9, but the offerings are not mature yet. A solid open-source
    option is Kubespray, which can deploy industrial-strength Kubernetes clusters
    on bare metal, AWS, GCE, Azure, and OpenStack.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 裸机集群是一种特殊情况，特别是如果您自己管理它们。有一些公司提供裸机Kubernetes集群的商业支持，比如Platform 9，但这些产品尚不成熟。一个坚实的开源选择是Kubespray，它可以在裸机、AWS、GCE、Azure和OpenStack上部署工业强度的Kubernetes集群。
- en: 'Here are some use cases where it makes sense:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些情况下使用裸机集群是有意义的：
- en: '**Budget concerns**: If you already manage large-scale bare clusters, it may
    be much cheaper to run Kubernetes clusters on your physical infrastructure'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预算问题**：如果您已经管理了大规模的裸机集群，那么在您的物理基础设施上运行Kubernetes集群可能会更便宜'
- en: '**Low network latency**: If you must have low latency between your nodes, then
    the VM overhead might be too much'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低网络延迟**：如果您的节点之间必须有低延迟，那么虚拟机的开销可能会太大'
- en: '**Regulatory requirements**: If you must comply with regulations, you may not
    be allowed to use cloud providers'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监管要求**：如果您必须遵守法规，可能不允许使用云服务提供商'
- en: '**You want total control over hardware**: Cloud providers give you many options,
    but you may have particular needs'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**您想要对硬件拥有完全控制权**：云服务提供商为您提供了许多选择，但您可能有特殊需求'
- en: When should you consider creating a bare-metal cluster?
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时应考虑创建裸机集群？
- en: The complexities of creating a cluster from scratch are significant. A Kubernetes
    cluster is not a trivial beast. There is a lot of documentation on the web about
    how to set up bare-metal clusters, but as the whole ecosystem moves forward, many
    of these guides get out of date quickly.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 从头开始创建集群的复杂性是显著的。Kubernetes集群并不是一个微不足道的东西。关于如何设置裸机集群的文档很多，但随着整个生态系统的不断发展，许多这些指南很快就会过时。
- en: You should consider going down this route if you have the operational capability
    to take the time to debug problems at every level of the stack. Most of the problems
    will probably be networking-related, but filesystems and storage drivers can bite
    you too, as well as general incompatibilities and version mismatches between components,
    such as Kubernetes itself, Docker (or rkt, if you brave it), Docker images, your
    OS, your OS kernel, and the various add-ons and tools you use.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有操作能力，可以花时间在堆栈的每个级别调试问题，那么您应该考虑走这条路。大部分问题可能与网络有关，但文件系统和存储驱动程序也可能会困扰您，还有一般的不兼容性和组件之间的版本不匹配，比如Kubernetes本身、Docker（或rkt，如果您敢尝试）、Docker镜像、您的操作系统、您的操作系统内核以及您使用的各种附加组件和工具。
- en: The process
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这个过程
- en: 'There is a lot to do. Here is a list of some of the concerns you''ll have to
    address:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多事情要做。以下是您需要解决的一些问题的列表：
- en: Implementing your own cloud provider's interface or sidestepping it
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现自己的云提供商接口或绕过它
- en: Choosing a networking model and how to implement it (using a CNI plugin or directly
    compiling)
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择网络模型以及如何实现它（使用CNI插件或直接编译）
- en: Whether or not to use a network policy
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否使用网络策略
- en: Select images for system components
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择系统组件的镜像
- en: Security models and SSL certificates
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全模型和SSL证书
- en: Admin credentials
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员凭据
- en: Templates for components such as an API server, replication controller, and
    scheduler
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件的模板，如API服务器、复制控制器和调度器
- en: Cluster services such as DNS, logging, monitoring, and GUI
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群服务，如DNS、日志记录、监控和GUI
- en: I recommend reading the guide at the Kubernetes site ([http://bit.ly/1ToR9EC](http://bit.ly/1ToR9EC))
    to get a deeper understanding of what it takes to create a cluster from scratch.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议阅读Kubernetes网站上的指南（[http://bit.ly/1ToR9EC](http://bit.ly/1ToR9EC)），以更深入地了解从头开始创建集群所需的步骤。
- en: Using virtual private cloud infrastructure
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用虚拟私有云基础设施
- en: If your use case falls under the bare-metal use cases, but you don't have the
    necessary skilled manpower or the inclination to deal with the infrastructure
    challenges of bare metal, you have the option of using a private cloud such as
    OpenStack (for example, with stackube). If you want to aim a little higher in
    the abstraction ladder, then Mirantis offers a cloud platform built on top of
    OpenStack and Kubernetes.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的用例属于裸机用例，但您没有必要的熟练人手或者不愿意处理裸机的基础设施挑战，您可以选择使用私有云，比如OpenStack（例如，使用stackube）。如果您想在抽象层次上再高一点，那么Mirantis提供了一个建立在OpenStack和Kubernetes之上的云平台。
- en: In this section, we considered the option of building a bare-metal cluster Kubernetes
    cluster. We looked into the use cases that require it and highlighted the challenges
    and difficulties.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们考虑了构建裸机集群Kubernetes集群的选项。我们研究了需要它的用例，并突出了挑战和困难。
- en: Bootkube
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bootkube
- en: '**Bootkube** is very interesting too. It can launch self-hosted Kubernetes
    clusters. Self-hosted means that most of the cluster components run as regular
    pods and can be managed, monitored, and upgraded using the same tools and processes
    you use for your containerized applications. There are significant benefits to
    this approach, which simplifies the development and operation of Kubernetes clusters.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bootkube**也非常有趣。它可以启动自托管的Kubernetes集群。自托管意味着大多数集群组件都作为常规pod运行，并且可以使用与您用于容器化应用程序相同的工具和流程进行管理、监控和升级。这种方法有显著的好处，简化了Kubernetes集群的开发和运行。'
- en: Summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we got into some hands-on cluster creation. We created a single-node
    cluster using Minikube and a multi-node cluster using `kubeadm`. Then we looked
    at the many options to create Kubernetes clusters using cloud providers. Finally,
    we touched on the complexities of creating Kubernetes clusters on bare metal.
    The current state of affairs is very dynamic. The basic components are changing
    rapidly, the tooling is still young, and there are different options for each
    environment. It's not completely trivial to set up a Kubernetes cluster, but with
    some effort and attention to detail, you can get it done quickly.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们进行了一些实际的集群创建。我们使用Minikube创建了一个单节点集群，使用`kubeadm`创建了一个多节点集群。然后我们看了很多使用云提供商创建Kubernetes集群的选项。最后，我们触及了在裸机上创建Kubernetes集群的复杂性。当前的情况非常动态。基本组件在迅速变化，工具仍然很年轻，每个环境都有不同的选择。建立Kubernetes集群并不是完全简单的，但通过一些努力和细节的关注，你可以快速完成。
- en: In the next chapter, we will explore the important topics of monitoring, logging,
    and troubleshooting. Once your cluster is up and running and you start deploying
    workloads, you need to make sure that it runs properly and satisfies requirements.
    This requires ongoing attention and responding to various failures that happen
    in the real world.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨监控、日志记录和故障排除等重要主题。一旦您的集群正常运行并开始部署工作负载，您需要确保它正常运行并满足要求。这需要持续关注和对现实世界中发生的各种故障做出响应。
