["```\nSet-Alias -Name k -Value kubectl \nfunction mk  \n{  \nminikube-windows-amd64 ` \n--show-libmachine-logs ` \n--alsologtostderr      ` \n@args \n} \n```", "```\nalias k='kubectl' \nalias mk='/usr/local/bin/minikube' \n```", "```\n> mk version \n\nminikube version: v0.26.0 \n```", "```\n> k version\nClient Version: version.Info{Major:\"1\", Minor:\"9\", GitVersion:\"v1.9.0\", GitCommit:\"925c127ec6b946659ad0fd596fa959be43f0cc05\", GitTreeState:\"clean\", BuildDate:\"2017-12-16T03:15:38Z\", GoVersion:\"go1.9.2\", Compiler:\"gc\", Platform:\"darwin/amd64\"}\nUnable to connect to the server: dial tcp 192.168.99.100:8443: getsockopt: operation timed out\n```", "```\n> mk get-k8s-versions \nThe following Kubernetes versions are available when using the localkube bootstrapper:  \n- v1.10.0\n- v1.9.4\n- v1.9.0 \n- v1.8.0 \n- v1.7.5 \n- v1.7.4 \n- v1.7.3 \n- v1.7.2 \n- v1.7.0 \n- v1.7.0-rc.1 \n- v1.7.0-alpha.2 \n- v1.6.4 \n- v1.6.3 \n- v1.6.0 \n- v1.6.0-rc.1 \n- v1.6.0-beta.4 \n- v1.6.0-beta.3 \n- v1.6.0-beta.2 \n- v1.6.0-alpha.1 \n- v1.6.0-alpha.0 \n- v1.5.3 \n- v1.5.2 \n- v1.5.1 \n- v1.4.5 \n- v1.4.3 \n- v1.4.2 \n- v1.4.1 \n- v1.4.0 \n- v1.3.7 \n- v1.3.6 \n- v1.3.5 \n- v1.3.4 \n- v1.3.3 \n- v1.3.0 \n```", "```\n> mk start --kubernetes-version=\"v1.10.0\" \nStarting local Kubernetes v1.10.0 cluster... \nStarting VM... \nGetting VM IP address... \nMoving files into cluster... \nFinished Downloading kubeadm v1.10.0 **Finished Downloading kubelet v1.10.0** Setting up certs... \nConnecting to cluster... \nSetting up kubeconfig... \nStarting cluster components... \nKubectl is now configured to use the cluster. \nLoading cached images from config file. \n```", "```\n> tree ~/.minikube -L 2\n/Users/gigi.sayfan/.minikube\n\u251c\u2500\u2500 addons\n\u251c\u2500\u2500 apiserver.crt\n\u251c\u2500\u2500 apiserver.key\n\u251c\u2500\u2500 ca.crt\n\u251c\u2500\u2500 ca.key\n\u251c\u2500\u2500 ca.pem\n\u251c\u2500\u2500 cache\n\u2502 \u251c\u2500\u2500 images\n\u2502 \u251c\u2500\u2500 iso\n\u2502 \u2514\u2500\u2500 localkube\n\u251c\u2500\u2500 cert.pem\n\u251c\u2500\u2500 certs\n\u2502 \u251c\u2500\u2500 ca-key.pem\n\u2502 \u251c\u2500\u2500 ca.pem\n\u2502 \u251c\u2500\u2500 cert.pem\n\u2502 \u2514\u2500\u2500 key.pem\n\u251c\u2500\u2500 client.crt\n\u251c\u2500\u2500 client.key\n\u251c\u2500\u2500 config\n\u2502 \u2514\u2500\u2500 config.json\n\u251c\u2500\u2500 files\n\u251c\u2500\u2500 key.pem\n\u251c\u2500\u2500 last_update_check\n\u251c\u2500\u2500 logs\n\u251c\u2500\u2500 machines\n\u2502 \u251c\u2500\u2500 minikube\n\u2502 \u251c\u2500\u2500 server-key.pem\n\u2502 \u2514\u2500\u2500 server.pem\n\u251c\u2500\u2500 profiles\n\u2502 \u2514\u2500\u2500 minikube\n\u251c\u2500\u2500 proxy-client-ca.crt\n\u251c\u2500\u2500 proxy-client-ca.key\n\u251c\u2500\u2500 proxy-client.crt\n\u2514\u2500\u2500 proxy-client.key\n\n13 directories, 21 files\n```", "```\n> mk ssh\n _ _\n _ _ ( ) ( )\n ___ ___ (_) ___ (_)| |/') _ _ | |_ __\n/' _ ` _ `\\| |/' _ `\\| || , < ( ) ( )| '_`\\ /'__`\\\n| ( ) ( ) || || ( ) || || |\\`\\ | (_) || |_) )( ___/\n(_) (_) (_)(_)(_) (_)(_)(_) (_)`\\___/'(_,__/'`\\____)\n\n$ uname -a\n\nLinux minikube 4.9.64 #1 SMP Fri Mar 30 21:27:22 UTC 2018 x86_64 GNU/Linux$ \n```", "```\n> k cluster-info    \n```", "```\n> k get nodes\nNAME       STATUS    ROLES     AGE       VERSION\n\nNAME       STATUS    ROLES     AGE       VERSION\nminikube   Ready      master   15m       v1.10.0  \n```", "```\nk run echo --image=gcr.io/google_containers/echoserver:1.8 --port=8080 deployment \"echo\" created  \n```", "```\n> k get pods  \nNAME                    READY    STATUS    RESTARTS    AGE echo-69f7cfb5bb-wqgkh    1/1     Running     0          18s  \n```", "```\n> k expose deployment echo --type=NodePort service \"echo\" exposed  \n```", "```\n> mk ip\n192.168.99.101\n> k get service echo --output='jsonpath=\"{.spec.ports[0].nodePort}\"'\n30388  \n```", "```\n> curl http://192.168.99.101:30388/hi  \n```", "```\n# -*- mode: ruby -*- \n# vi: set ft=ruby : \nhosts = { \n  \"n1\" => \"192.168.77.10\", \n  \"n2\" => \"192.168.77.11\", \n  \"n3\" => \"192.168.77.12\", \n  \"n4\" => \"192.168.77.13\" \n} \nVagrant.configure(\"2\") do |config| \n  # always use Vagrants insecure key \n  config.ssh.insert_key = false \n  # forward ssh agent to easily ssh into the different machines \n  config.ssh.forward_agent = true \n\n  check_guest_additions = false \n  functional_vboxsf     = false \n\n  config.vm.box = \"bento/ubuntu-16.04\" \n hosts.each do |name, ip| \n    config.vm.hostname = name \n    config.vm.define name do |machine| \n      machine.vm.network :private_network, ip: ip \n      machine.vm.provider \"virtualbox\" do |v| \n        v.name = name \n      end \n    end \n  end \nend \n\n```", "```\n> vagrant ssh n4\nWelcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-87-generic x86_64)\n\n* Documentation:  https://help.ubuntu.com\n* Management:     https://landscape.canonical.com\n* Support:        https://ubuntu.com/advantage\n\n0 packages can be updated.\n0 updates are security updates.\n   vagrant@vagrant:~$ sudo apt-get -y --fix-missing install python-pip \ufffcsshpass\nvagrant@vagrant:~$ sudo pip install  ansible   \n```", "```\nvagrant@vagrant:~$ ansible --version\nansible 2.5.0\n config file = None\n configured module search path = [u'/home/vagrant/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']\n ansible python module location = /home/vagrant/.local/lib/python2.7/site-packages/ansible\n executable location = /home/vagrant/.local/bin/ansible\n\n python version = 2.7.12 (default, Dec 4 2017, 14:50:18) [GCC 5.4.0 20160609] \npython version = 2.7.12 (default, Dec 4 2017, 14:50:18) [GCC 5.4.0 20160609]\n```", "```\n[all] \n192.168.77.10 ansible_user=vagrant ansible_ssh_pass=vagrant \n192.168.77.11 ansible_user=vagrant ansible_ssh_pass=vagrant \n192.168.77.12 ansible_user=vagrant ansible_ssh_pass=vagrant \n```", "```\n--- \nPACKAGES: \n  - vim  - htop  - tmux  - docker.io \n  - kubelet \n  - kubeadm \n  - kubectl \n  - kubernetes-cni\n```", "```\n---  \n- hosts: all  \n  become: true  \n  vars_files:  \n    - vars.yml  \n  strategy: free  \n\n  tasks: \n   - name: hack to resolve Problem with MergeList Issue \n     shell: 'find /var/lib/apt/lists -maxdepth 1 -type f -exec rm -v {} \\;' \n   - name: update apt cache directly (apt module not reliable) \n     shell: 'apt-get clean && apt-get update' \n   - name: Preliminary installation     \n     apt:  name=apt-transport-https force=yes \n   - name: Add the Google signing key  \n     apt_key: url=https://packages.cloud.google.com/apt/doc/apt-key.gpg  state=present  \n   - name: Add the k8s APT repo  \n     apt_repository: repo='deb http://apt.kubernetes.io/ kubernetes-xenial main' state=present  \n   - name: update apt cache directly (apt module not reliable) \n     shell: 'apt-get update'      \n   - name: Install packages  \n     apt: name={{ item }} state=installed force=yes \n     with_items: \"{{ PACKAGES }}\"  \n```", "```\n> vagrant ssh n4  \n```", "```\nvagrant@vagrant:~$ ssh 192.168.77.10\nvagrant@vagrant:~$ ssh 192.168.77.11\nvagrant@vagrant:~$ ssh 192.168.77.12 \n```", "```\n[defaults]\nhost_key_checking = False      \n```", "```\nvagrant@n4:~$ ansible-playbook -i hosts playbook.yml  \n```", "```\n> vagrant ssh n1\n\nvagrant@n1:~$ sudo kubeadm init --apiserver-advertise-address 192.168.77.10  \n```", "```\n[init] Using Kubernetes version: v1.10.1\n[init] Using Authorization modes: [Node RBAC]\n[preflight] Running pre-flight checks.\n [WARNING FileExisting-crictl]: crictl not found in system path\n[preflight] Some fatal errors occurred:\n [ERROR Swap]: running with swap on is not supported. Please disable swap\n[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`\n```", "```\n---\n- hosts: all\n become: true\n strategy: free\n tasks:\n - name: Add the longsleep repo for recent golang version\n apt_repository: repo='ppa:longsleep/golang-backports' state=present\n - name: update apt cache directly (apt module not reliable)\n shell: 'apt-get update'\n args:\n warn: False\n - name: Install Go\n apt: name=golang-go state=present force=yes\n - name: Install crictl\n shell: 'go get github.com/kubernetes-incubator/cri-tools/cmd/crictl'\n become_user: vagrant\n - name: Create symlink in /usr/local/bin for crictl\n file:\n src: /home/vagrant/go/bin/crictl\n dest: /usr/local/bin/crictl\n state: link\n - name: Set hostname properly\n shell: \"hostname n$((1 + $(ifconfig | grep 192.168 | awk '{print $2}' | tail -c 2)))\"\n - name: Turn off swap\n shell: 'swapoff -a'\n \u2013\n```", "```\nvagrant@n1:~$ sudo kubeadm init --apiserver-advertise-address 192.168.77.10\n[init] Using Kubernetes version: v1.10.1\n[init] Using Authorization modes: [Node RBAC]\n[certificates] Generated ca certificate and key.\n[certificates] Generated apiserver certificate and key.\n[certificates] Valid certificates and keys now exist in \"/etc/kubernetes/pki\"\n.\n.\n.\n[addons] Applied essential addon: kube-dns\n[addons] Applied essential addon: kube-proxy\nYour Kubernetes master has initialized successfully!\n```", "```\nvagrant@n1:~$ mkdir -p $HOME/.kube\nvagrant@n1:~$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nvagrant@n1:~$ sudo chown $(id -u):$(id -g) $HOME/.kube/config \n```", "```\nvagrant@n1:~$ sudo sysctl net.bridge.bridge-nf-call-iptables=1\nnet.bridge.bridge-nf-call-iptables = 1vagrant@n1:~$ kubectl apply -f \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\\n')\"      \n```", "```\nserviceaccount \"weave-net\" created\nclusterrole.rbac.authorization.k8s.io \"weave-net\" created\nclusterrolebinding.rbac.authorization.k8s.io \"weave-net\" created\nrole.rbac.authorization.k8s.io \"weave-net\" created\nrolebinding.rbac.authorization.k8s.io \"weave-net\" created\ndaemonset.extensions \"weave-net\" created  \n```", "```\nvagrant@n1:~$ kubectl get po --all-namespaces \nNAMESPACE NAME READY STATUS RESTARTS AGE\nkube-system etcd-n1 1/1 Running 0 2m\nkube-system kube-apiserver-n1 1/1 Running 0 2m\nkube-system kube-controller-manager-n1 1/1 Running 0 2m\nkube-system kube-dns-86f4d74b45-jqctg 3/3 Running 0 3m\nkube-system kube-proxy-l54s9 1/1 Running 0 3m\nkube-system kube-scheduler-n1 1/1 Running 0 2m\nkube-system weave-net-fl7wn 2/2 Running 0 31s\n```", "```\nsudo kubeadm join --token <<token>>  --discovery-token-ca-cert-hash  <<discovery token>> --ignore-preflight-errors=all  \n```", "```\n[discovery] Trying to connect to API Server \"192.168.77.10:6443\"\n[discovery] Created cluster-info discovery client, requesting info from \"https://192.168.77.10:6443\"\n[discovery] Requesting info from \"https://192.168.77.10:6443\" again to validate TLS against the pinned public key\n[discovery] Cluster info signature and contents are valid and TLS certificate validates against pinned roots, will use API Server \"192.168.77.10:6443\"\n[discovery] Successfully established connection with API Server \"192.168.77.10:6443\"     \n```", "```\n* Certificate signing request was sent to master and a response\n  was received.\n* The Kubelet was informed of the new secure connection details.  \n```", "```\ntype Interface interface { \n    Initialize(clientBuilder controller.ControllerClientBuilder) \n    LoadBalancer() (LoadBalancer, bool) \n    Instances() (Instances, bool) \n    Zones() (Zones, bool) \n    Clusters() (Clusters, bool) \n    Routes() (Routes, bool) \n    ProviderName() string \n    HasClusterID() bool \n} \n```", "```\ntype Clusters interface { \n  ListClusters() ([]string, error) \n  Master(clusterName string) (string, error) \n} \n```", "```\nkops create cluster --cloud=aws --zones=us-east-1c ${NAME}  \n```"]