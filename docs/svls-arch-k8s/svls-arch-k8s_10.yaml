- en: Appendix
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录
- en: About
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 关于
- en: This section is included to assist the students to perform the activities in
    the book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分是为了帮助学生在书中执行活动。
- en: It includes detailed steps that are to be performed by the students to achieve
    the objectives of the activities.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 其中包括学生执行的详细步骤，以实现活动的目标。
- en: 1\. Introduction to Serverless
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 介绍无服务器
- en: 'Activity 1: Twitter Bot Backend for Bike Points in London'
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动1：伦敦自行车积分的Twitter机器人后端
- en: '**Solution:**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Execute the following steps to complete this activity:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以完成此活动：
- en: Create a `main.go` file for registering function handlers, as in *Exercise 1*.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`main.go`文件来注册函数处理程序，就像*练习1*中一样。
- en: 'This code is the entry point of the application where functions are registered,
    and the main application is started:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码是应用程序的入口，其中函数被注册，并启动主应用程序：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a `function.go` file for the `FindBikes` function:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`FindBikes`函数创建一个`function.go`文件：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-13
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'The files required for the activity can be found on the link: [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson01/Activity1](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson01/Activity1).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 活动所需的文件可以在以下链接找到：[https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson01/Activity1](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson01/Activity1)。
- en: In this file, the actual function and its helpers should be implemented. `FindBikes`
    is responsible for getting data from the **TFL Unified API** for the bike point
    locations and then the number of available bikes. According to the collected information,
    this function returns complete sentences to be used as Twitter responses.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，应该实现实际的函数及其辅助函数。`FindBikes`负责从**TFL统一API**获取自行车积分位置的数据，然后获取可用自行车的数量。根据收集到的信息，该函数返回完整的句子，用作Twitter的响应。
- en: 'Create a `Dockerfile` for building and packaging the function, as in *Exercise
    2*:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Dockerfile`来构建和打包函数，就像*练习2*中一样：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this `Dockerfile`, the application is built in the first container and packaged
    in the second container for delivery.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`Dockerfile`中，应用程序在第一个容器中构建，并在第二个容器中打包以进行交付。
- en: 'Build the container image with Docker commands: `docker build . -t find-bikes`.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Docker命令构建容器镜像：`docker build . -t find-bikes`。
- en: 'It should look something like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该看起来像这样：
- en: '![Figure 1.27: Building the Docker image'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.27：构建Docker镜像'
- en: '](image/C12607_01_27.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_01_27.jpg)'
- en: 'Figure 1.27: Building the Docker image'
  id: totrans-23
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.27：构建Docker镜像
- en: 'Run the container image as a Docker container and make the ports available
    on the host system: `docker run -it --rm -p 8080:8080 find-bikes`.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行容器镜像作为Docker容器，并使端口在主机系统上可用：`docker run -it --rm -p 8080:8080 find-bikes`。
- en: 'Things should look as shown in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 事情应该看起来如下截图所示：
- en: '![Figure 1.28: Running the Docker container'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.28：运行Docker容器'
- en: '](image/C12607_01_28.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_01_28.jpg)'
- en: 'Figure 1.28: Running the Docker container'
  id: totrans-28
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.28：运行Docker容器
- en: Test the function's HTTP endpoint with different queries, such as **Oxford**,
    **Abbey**, or **Diagon Alley**.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用不同查询测试函数的HTTP端点，例如**牛津**、**修道院**或**对角巷**。
- en: 'We expect to get real responses for London streets and failure responses for
    imaginary streets from literature:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们期望得到伦敦街道的真实响应，以及来自文学作品的虚构街道的失败响应。
- en: '![Figure 1.29: Function responses for different streets'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.29：不同街道的函数响应'
- en: '](image/C12607_01_29.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_01_29.jpg)'
- en: 'Figure 1.29: Function responses for different streets'
  id: totrans-33
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.29：不同街道的函数响应
- en: 'Press *Ctrl + C* to exit the container:![Figure 1.30: Exiting the container'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Ctrl + C*退出容器：![图1.30：退出容器
- en: '](image/C12607_01_30.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_01_30.jpg)'
- en: 'Figure 1.30: Exiting the container'
  id: totrans-36
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.30：退出容器
- en: 2\. Introduction to Serverless in the Cloud
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2. 云中无服务器的介绍
- en: 'Activity 2: Daily Stand-Up Meeting Reminder Function for Slack'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动2：Slack的每日站立会议提醒功能
- en: '**Solution** – **Slack Setup:**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案** – **Slack设置：**'
- en: In the **Slack** workspace, click on your username and select **Customize Slack**,
    as shown in the following screenshot:![](image/C12607_02_49.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Slack**工作区中，单击您的用户名，然后选择**自定义Slack**，如下截图所示：![](图像/C12607_02_49.jpg)
- en: 'Figure 2.49: Slack menu'
  id: totrans-41
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.49：Slack菜单
- en: Click on **Configure apps** in the open window, as shown in the following screenshot:![](image/C12607_02_50.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开的窗口中单击**配置应用程序**，如下截图所示：![](图像/C12607_02_50.jpg)
- en: 'Fig 2.50: Slack configuration menu'
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.50：Slack配置菜单
- en: 'Click on **Browse the App Directory** to add a new application from the directory,
    as shown in the following screenshot:![Figure 2.51: Slack management'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**浏览应用程序目录**以从目录中添加新应用程序，如下截图所示：![图2.51：Slack管理
- en: '](image/C12607_02_51.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '](图像/C12607_02_51.jpg)'
- en: 'Figure 2.51: Slack management'
  id: totrans-46
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.51：Slack管理
- en: 'Find **Incoming WebHooks** from the search box in **App Directory**, as shown
    in the following screenshot:![Figure 2.52: App Directory'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**应用程序目录**的搜索框中找到**传入WebHooks**，如下截图所示：![图2.52：应用程序目录
- en: '](image/C12607_02_52.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '](图像/C12607_02_52.jpg)'
- en: 'Figure 2.52: App Directory'
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.52：应用程序目录
- en: 'Click on **Add Configuration** for the **Incoming WebHooks** application, as
    shown in the following screenshot:![Figure 2.53: Incoming Webhooks page'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**添加配置**以为**传入WebHooks**应用程序添加配置，如下截图所示：![图2.53：传入Webhooks页面
- en: '](image/C12607_02_53.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](图像/C12607_02_53.jpg)'
- en: 'Figure 2.53: Incoming Webhooks page'
  id: totrans-52
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.53：传入Webhooks页面
- en: 'Fill in the configuration for the incoming webhook by specifying your specific
    channel name and icon, as shown in the following screenshot:![Figure 2.54: Incoming
    webhook configuration'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写传入webhook的配置，指定您的特定频道名称和图标，如下截图所示：![图2.54：传入webhook配置
- en: '](image/C12607_02_54.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](图像/C12607_02_54.jpg)'
- en: 'Figure 2.54: Incoming webhook configuration'
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.54：传入webhook配置
- en: Copy the **Webhook URL** and click **Save Settings**, as shown in the preceding
    screenshot.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 复制**Webhook URL**，然后单击**保存设置**，如上图所示。
- en: 'Open the Slack workspace and channel we mentioned in step 6\. You will see
    an integration message:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Slack工作区和我们在步骤6中提到的频道。您将看到一个集成消息：
- en: '![Figure 2.55: Integration message in Slack'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.55：Slack中的集成消息'
- en: '](image/C12607_02_55.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](图像/C12607_02_55.jpg)'
- en: 'Figure 2.55: Integration message in Slack'
  id: totrans-60
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.55：Slack中的集成消息
- en: '**Activity Solution**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**活动解决方案**'
- en: 'Execute the following steps to complete this activity:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤完成此活动：
- en: Create a new function to call the Slack webhook when the function is invoked.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新函数，在调用函数时调用Slack webhook。
- en: In GCF, it can be defined with the name `StandupReminder`, 128 MB memory, and
    an HTTP trigger.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在GCF中，可以使用名称`StandupReminder`，128 MB内存和HTTP触发器来定义。
- en: 'This function can be implemented in any supported language, such as **Go 1.11**,
    as shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能可以在任何支持的语言中实现，例如**Go 1.11**，如下截图所示：
- en: '![Figure 2.56: Cloud function in Google Cloud Platform'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.56：Google Cloud平台中的云函数'
- en: '](image/C12607_02_56.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](图像/C12607_02_56.jpg)'
- en: 'Figure 2.56: Cloud function in Google Cloud Platform'
  id: totrans-68
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.56：Google Cloud平台中的云函数
- en: 'The code to be added is as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加的代码如下：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-71
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Do not forget to change the `url` value with the Slack URL for the incoming
    webhook configuration from step 6.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记使用步骤6中的Slack URL更改`url`值。
- en: 'You can find the complete `function.go` file in the activity solutions of this
    book''s GitHub repository: [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson02/Activity2/function.go](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson02/Activity2/function.go).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书GitHub存储库的活动解决方案中找到完整的`function.go`文件：[https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson02/Activity2/function.go](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson02/Activity2/function.go).
- en: Create a scheduler job with the trigger URL of the function and specify the
    schedule based on your stand-up meeting times.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个调度程序作业，使用函数的触发URL，并根据你的站立会议时间指定计划。
- en: 'The scheduler can be defined in Google Cloud Scheduler with the name `StartupReminder`
    and the URL of the function, as shown in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在Google Cloud Scheduler中定义调度程序的名称为`StartupReminder`，并且函数的URL，如下面的截图所示：
- en: '![Figure 2.57: Cloud scheduler in Google Cloud Platform'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.57：Google云平台中的云调度程序'
- en: '](image/C12607_02_57.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_02_57.jpg)'
- en: 'Figure 2.57: Cloud scheduler in Google Cloud Platform'
  id: totrans-78
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.57：Google云平台中的云调度程序
- en: With the schedule of `0 9 * * 1-5`, the reminder will invoke the function at
    09:00 on every day of the week from Monday through Friday.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`0 9 * * 1-5`的计划，提醒将在每周一至周五的09:00调用函数。
- en: Check the Slack channel when the time that was defined with the schedule has
    arrived for the reminder message.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提醒消息的计划时间到达时，检查Slack频道。
- en: 'For the schedule of `0 9 * * 1-5`, you will see a message on your selected
    Slack channel at 09:00 on workdays, as shown in the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`0 9 * * 1-5`的计划，您将在工作日的09:00在您选择的Slack频道上看到一条消息，如下面的截图所示：
- en: '![Figure 2.58: Slack reminder message'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.58：Slack提醒消息'
- en: '](image/C12607_02_58.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_02_58.jpg)'
- en: 'Figure 2.58: Slack reminder message'
  id: totrans-84
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.58：Slack提醒消息
- en: 'Delete the schedule job and function from the cloud provider, as shown in the
    following screenshot:![Figure 2.59: Deletion of the scheduler'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从云提供商中删除调度作业和函数，如下面的截图所示：![图2.59：删除调度程序
- en: '](image/C12607_02_59.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_02_59.jpg)'
- en: 'Figure 2.59: Deletion of the scheduler'
  id: totrans-87
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.59：调度程序的删除
- en: 'The function can be deleted like so:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 可以这样删除函数：
- en: '![Figure 2.60: Deletion of the function'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.60：删除函数'
- en: '](image/C12607_02_60.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_02_60.jpg)'
- en: 'Figure 2.60: Deletion of the function'
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图2.60：删除函数
- en: In this activity, we've built the backend of a Slack application using functions.
    We started by configuring Slack for incoming webhooks and then created a function
    to send data to the webhook. Since our function should be invoked at predefined
    times, we used the cloud scheduler services to invoke the function. With a successful
    reminder message in Slack, the integration of functions to other cloud services
    and external services was illustrated.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们使用函数构建了Slack应用程序的后端。我们首先为传入的webhook配置了Slack，然后创建了一个发送数据到webhook的函数。由于我们的函数应该在预定义的时间被调用，我们使用了云调度程序服务来调用函数。通过在Slack中成功发送提醒消息，展示了将函数集成到其他云服务和外部服务中。
- en: 3\. Introduction to Serverless Frameworks
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3. 无服务器框架简介
- en: 'Activity 3: Daily Weather Status Function for Slack'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动3：Slack的每日天气状态功能
- en: '**Solution - Slack Setup**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案- Slack设置**'
- en: 'Execute the following steps to configure Slack:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下步骤来配置Slack：
- en: 'In your Slack workspace, click on your username and select Customize Slack:![Figure
    3.44: Slack menu'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的Slack工作区中，点击您的用户名，然后选择自定义Slack：![图3.44：Slack菜单
- en: '](image/C12607_03_44.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_44.jpg)'
- en: 'Figure 3.44: Slack menu'
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.44：Slack菜单
- en: 'Click on Configure apps in the opened window:![Figure 3.45: Slack configuration
    menu'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击打开窗口中的配置应用程序：![图3.45：Slack配置菜单
- en: '](image/C12607_03_45.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_45.jpg)'
- en: 'Figure 3.45: Slack configuration menu'
  id: totrans-102
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.45：Slack配置菜单
- en: 'Click on Browse the App Directory to add a new application from the directory:![Figure
    3.46: Slack management'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“浏览应用程序目录”以从目录中添加新应用程序：![图3.46：Slack管理
- en: '](image/C12607_03_46.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_46.jpg)'
- en: 'Figure 3.46: Slack management'
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.46：Slack管理
- en: 'Find Incoming WebHooks from the search box in App Directory:![Figure 3.47:
    App Directory'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用目录的搜索框中找到传入的WebHooks：![图3.47：应用目录
- en: '](image/C12607_03_47.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_47.jpg)'
- en: 'Figure 3.47: App Directory'
  id: totrans-108
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.47：应用目录
- en: 'Click on Set Up for the Incoming WebHooks application:![Figure 3.48: Incoming
    WebHooks page'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“设置”传入的WebHooks应用程序：![图3.48：传入WebHooks页面
- en: '](image/C12607_03_48.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_48.jpg)'
- en: 'Figure 3.48: Incoming WebHooks page'
  id: totrans-111
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.48：传入WebHooks页面
- en: 'Choose a channel for posting joke messages and click on the Add Incoming WebHooks
    integration:![Figure 3.49: Channel selection'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个频道发布笑话消息，并单击“添加传入WebHooks集成”：![图3.49：频道选择
- en: '](image/C12607_03_49.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_49.jpg)'
- en: 'Figure 3.49: Channel selection'
  id: totrans-114
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.49：频道选择
- en: 'Fill in the configuration for the incoming webhook with your specific channel
    name and icon:![Figure 3.50: Incoming WebHook configuration'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您特定的频道名称和图标填写传入WebHook的配置：![图3.50：传入WebHook配置
- en: '](image/C12607_03_50.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_50.jpg)'
- en: 'Figure 3.50: Incoming WebHook configuration'
  id: totrans-117
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.50：传入WebHook配置
- en: Copy the Webhook URL and click Save Settings.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 复制Webhook URL并单击保存设置。
- en: 'Open your Slack workspace and the channel you configured in Step 6 to check
    the integration message:![Figure 3.51: Integration message in Slack'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的Slack工作区和您在第6步中配置的频道，以检查集成消息：![图3.51：Slack中的集成消息
- en: '](image/C12607_03_51.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_51.jpg)'
- en: 'Figure 3.51: Integration message in Slack'
  id: totrans-121
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.51：Slack中的集成消息
- en: '**Activity Solution**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 活动解决方案
- en: 'Execute the following steps to complete this activity:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下步骤完成此活动：
- en: 'In your Terminal, start the Serverless Framework development environment:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端中，启动Serverless Framework开发环境：
- en: '[PRE4]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This command will start a Docker container in interactive mode. In the upcoming
    steps, actions will be taken inside this Docker container:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将以交互模式启动Docker容器。在接下来的步骤中，将在此Docker容器内执行操作：
- en: '![Figure 3.52: Starting a Docker container for serverless'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.52：启动服务器无容器的Docker容器'
- en: '](image/C12607_03_52.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_52.jpg)'
- en: 'Figure 3.52: Starting a Docker container for serverless'
  id: totrans-129
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.52：启动服务器无容器的Docker容器
- en: In your Terminal, create a Serverless Framework application structure in a folder
    called daily-weather.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端中，在名为daily-weather的文件夹中创建一个Serverless Framework应用程序结构。
- en: 'Create a folder called daily-joker and change it into the following directory:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为daily-joker的文件夹，并将其更改为以下目录：
- en: '[PRE5]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-133
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: nano and vim are installed as text editors in the Serverless Framework development
    environment Docker container.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: nano和vim作为文本编辑器安装在Serverless Framework开发环境Docker容器中。
- en: 'Create a serverless.yaml file with the following content and replace the value
    of SLACK_WEBHOOK_URL with the URL you copied from Step 6 of the Slack Setup. Furthermore,
    update the CITY environment variable with the current office location to get the
    correct weather information. In addition, you can change the schedule section,
    which is currently triggering the function every workday at 08:00:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个serverless.yaml文件，并用以下内容替换SLACK_WEBHOOK_URL的值，该值是从Slack设置的第6步中复制的URL。此外，更新CITY环境变量为当前办公地点，以获取正确的天气信息。此外，您可以更改计划部分，该部分当前在工作日的08:00触发函数：
- en: '[PRE6]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-137
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: serverless.yaml is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/serverless.yaml](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/serverless.yaml).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: serverless.yaml可在[https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/serverless.yaml](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/serverless.yaml)找到。
- en: Create a package.json file to define the Node.js environment in the daily-weather
    folder.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在daily-weather文件夹中创建一个package.json文件来定义Node.js环境。
- en: 'package.json defines the function and its dependencies:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: package.json定义了函数及其依赖关系：
- en: '[PRE7]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-142
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: package.json is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/package.json](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/package.json).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: package.json可在[https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/package.json](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/package.json)找到。
- en: Create a handler.js file to implement the actual functionality in the daily-weather
    folder.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在daily-weather文件夹中创建一个handler.js文件来实现实际功能。
- en: 'handler.js consists of the actual Node.js function:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: handler.js包括实际的Node.js函数：
- en: '[PRE8]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-147
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: handler.js is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/handler.js](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/handler.js).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: handler.js可在[https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/handler.js](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson03/Activity3/handler.js)找到。
- en: 'At the end of the file''s creation, you will see the following file structure,
    with three files:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件创建结束时，您将看到以下文件结构，包括三个文件：
- en: '[PRE9]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output should be as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 3.53: Folder structure'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.53：文件夹结构'
- en: '](image/C12607_03_53.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_53.jpg)'
- en: 'Figure 3.53: Folder structure'
  id: totrans-154
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.53：文件夹结构
- en: 'Install the required Node.js dependencies for the serverless application. Run
    the following command to install the dependencies:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装serverless应用程序所需的Node.js依赖项。运行以下命令来安装依赖项：
- en: '[PRE10]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The output should be as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 3.54: Dependency installation'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.54：依赖安装'
- en: '](image/C12607_03_54.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_54.jpg)'
- en: 'Figure 3.54: Dependency installation'
  id: totrans-160
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.54：依赖安装
- en: 'Export the AWS credentials as environment variables. Export the following environment
    variables and AWS credentials from Exercise xx:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将AWS凭据导出为环境变量。从练习xx中导出以下环境变量和AWS凭据：
- en: '[PRE11]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output should be as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 3.55: AWS Credentials'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.55：AWS凭证'
- en: '](image/C12607_03_55.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_55.jpg)'
- en: 'Figure 3.55: AWS Credentials'
  id: totrans-166
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.55：AWS凭证
- en: 'Deploy the serverless application to AWS using the Serverless Framework. Run
    the following commands to deploy the function:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Serverless Framework将serverless应用程序部署到AWS。运行以下命令来部署函数：
- en: '[PRE12]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'These commands will make the Serverless Framework deploy the function into
    AWS. The output logs start by packaging the service and creating AWS resources
    for source code, artifacts, and functions. After all the resources have been created,
    the Service Information section provides a summary of the complete stack as you
    can see in the following figure:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将使Serverless Framework将函数部署到AWS。输出日志从打包服务和为源代码、工件和函数创建AWS资源开始。创建完所有资源后，服务信息部分提供了完整堆栈的摘要，如下图所示：
- en: '![Figure 3.56: Serverless Framework deployment output'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.56：Serverless Framework部署输出'
- en: '](image/C12607_03_56.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_56.jpg)'
- en: 'Figure 3.56: Serverless Framework deployment output'
  id: totrans-172
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.56：Serverless Framework部署输出
- en: 'Check AWS Lambda for the deployed functions in the AWS Console as shown in
    the following figure:![Figure 3.57: AWS Lambda in the AWS Console'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWS控制台中检查已部署函数的AWS Lambda，如下图所示：![图3.57：AWS控制台中的AWS Lambda
- en: '](image/C12607_03_57.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_57.jpg)'
- en: 'Figure 3.57: AWS Lambda in the AWS Console'
  id: totrans-175
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.57：AWS控制台中的AWS Lambda
- en: 'Invoke the function with the Serverless Framework''s client tools. Run the
    following command in your Terminal:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Serverless Framework的客户端工具调用该函数。在您的终端中运行以下命令：
- en: '[PRE13]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This command invokes the deployed function and prints out the response as you
    can see in the following figure:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令调用部署的函数并打印出响应，如下图所示：
- en: '![Figure 3.58: Function output'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.58：函数输出'
- en: '](image/C12607_03_58.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_58.jpg)'
- en: 'Figure 3.58: Function output'
  id: totrans-181
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.58：函数输出
- en: As we can see, statusCode is 200, and the body of the response also indicates
    that the function has responded successfully.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，statusCode为200，响应的主体也表明函数已成功响应。
- en: 'Check the Slack channel for the posted weather status:![FFigure 3.59: Slack
    message with weather status'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查Slack频道发布的天气状态：![图3.59：带有天气状态的Slack消息
- en: '](image/C12607_03_59.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_59.jpg)'
- en: 'Figure 3.59: Slack message with weather status'
  id: totrans-185
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.59：带有天气状态的Slack消息
- en: 'Return to your Terminal and delete the function with the Serverless Framework.
    Run the following command in your Terminal:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到您的终端，并使用Serverless Framework删除该函数。在您的终端中运行以下命令：
- en: '[PRE14]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This command will remove the deployed function, along with all its dependencies:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将删除部署的函数及其所有依赖项：
- en: '![Figure 3.60: Removing the function'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.60：移除函数'
- en: '](image/C12607_03_60.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_60.jpg)'
- en: 'Figure 3.60: Removing the function'
  id: totrans-191
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.60：移除函数
- en: 'Exit the Serverless Framework development environment container. Run exit in
    your Terminal:![Figure 3.61: Exiting the container'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出Serverless Framework开发环境容器。在您的终端中运行exit：
- en: '](image/C12607_03_61.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_03_61.jpg)'
- en: 'Figure 3.61: Exiting the container'
  id: totrans-194
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.61：退出容器
- en: In this activity, we have built the backend of a Slack application using a serverless
    framework. We started by configuring Slack for incoming webhooks and then created
    a serverless application to send data to the webhook. In order to invoke the function
    at predefined times, the configuration of the serverless framework was utilized
    instead of cloud-specific schedulers. Since serverless frameworks create an abstraction
    for the cloud providers, the serverless application that we developed in this
    activity is suitable for multi-cloud deployments.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们使用了一个无服务器框架构建了Slack应用的后端。我们首先配置了Slack以接收传入的webhooks，然后创建了一个无服务器应用程序来向webhook发送数据。为了在预定的时间调用函数，利用了无服务器框架的配置，而不是特定于云的调度程序。由于无服务器框架为云提供商创建了一个抽象，我们在这个活动中开发的无服务器应用程序适用于多云部署。
- en: 4\. Kubernetes Deep Dive
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. Kubernetes深入探讨
- en: 'Activity 4: Collect Gold Prices in a MySQL Database in Kubernetes'
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动4：在Kubernetes中将金价收集到MySQL数据库中
- en: '**Solution:**'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案：**'
- en: 'Execute the following steps to complete this activity:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以完成此活动：
- en: Create an application to retrieve the gold price from `CurrencyLayer` and insert
    it into the MySQL database.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个应用程序，从`CurrencyLayer`中检索金价并将其插入到MySQL数据库中。
- en: 'It is possible to implement this function in Go with the following main.go
    file:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下main.go文件在Go中实现此函数：
- en: '[PRE15]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The main function starts with database connection, followed by price retrieval
    from `CurrencyLayer`. Then it continues with creating a SQL statement and executing
    on the database connection.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 主要函数从数据库连接开始，然后从`CurrencyLayer`中检索价格。然后继续创建SQL语句并在数据库连接上执行。
- en: Note
  id: totrans-204
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: main.go is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/main.go](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/main.go).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: main.go可在[https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/main.go](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/main.go)找到。
- en: 'Build the application as a Docker container. It is possible to build the application
    from Step 1 with the following Dockerfile:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序构建为Docker容器。可以使用以下Dockerfile从第1步构建应用程序：
- en: '[PRE16]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-208
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Dockerfile is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/Dockerfile](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/Dockerfile).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile可在[https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/Dockerfile](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/Dockerfile)找到。
- en: 'Run the following command in your Terminal:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在终端中运行：
- en: '[PRE17]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This command builds the application as a Docker container, as shown in the
    following figure:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将应用程序构建为Docker容器，如下图所示：
- en: '![Figure 4.26: Docker build'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.26：Docker构建'
- en: '](image/C12607_04_26.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_04_26.jpg)'
- en: 'Figure 4.26: Docker build'
  id: totrans-215
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4.26：Docker构建
- en: Note
  id: totrans-216
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Do not forget to change `<USERNAME>` to your Docker Hub username.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将`<USERNAME>`更改为您的Docker Hub用户名。
- en: 'Push the Docker container to the Docker registry. Run the following command
    in your Terminal:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Docker容器推送到Docker注册表。在终端中运行以下命令：
- en: '[PRE18]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This command uploads the container image to the Docker Hub, as shown in the
    following figure:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将上传容器映像到Docker Hub，如下图所示：
- en: '![Figure 4.27: Docker push'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.27：Docker推送'
- en: '](image/C12607_04_27.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_04_27.jpg)'
- en: 'Figure 4.27: Docker push'
  id: totrans-223
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4.27：Docker推送
- en: Note
  id: totrans-224
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Do not forget to change `<USERNAME>` to your Docker Hub username.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将`<USERNAME>`更改为您的Docker Hub用户名。
- en: 'Deploy the MySQL database into the Kubernetes cluster. Create a mysql.yaml
    file with the MySQL StatefulSet definition:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将MySQL数据库部署到Kubernetes集群。创建一个mysql.yaml文件，其中包含MySQL StatefulSet的定义：
- en: '[PRE19]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-228
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: mysql.yaml is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/mysql.yaml](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/mysql.yaml).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: mysql.yaml可在[https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/mysql.yaml](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/mysql.yaml)找到。
- en: 'Deploy the StatefulSet with the following command in your Terminal:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中使用以下命令部署StatefulSet：
- en: '[PRE20]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This command submits the file to Kubernetes and creates the mysql StatefulSet,
    as shown in the following figure:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令提交文件到Kubernetes并创建mysql StatefulSet，如下图所示：
- en: '![Figure 4.28: StatefulSet creation'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.28：StatefulSet创建'
- en: '](image/C12607_04_28.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_04_28.jpg)'
- en: 'Figure 4.28: StatefulSet creation'
  id: totrans-235
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4.28：StatefulSet创建
- en: 'Deploy a Kubernetes service to expose MySQL database. Create a service.yaml
    file with the following Kubernetes Service definition:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署Kubernetes服务以公开MySQL数据库。创建一个service.yaml文件，其中包含以下Kubernetes服务定义：
- en: '[PRE21]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-238
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: service.yaml is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/service.yaml](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/service.yaml).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: service.yaml可在[https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/service.yaml](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/service.yaml)找到。
- en: 'Deploy the service with the following command in your Terminal:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在终端中部署服务：
- en: '[PRE22]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This command submits the file to Kubernetes and creates the gold-price-db service,
    as shown in the following figure:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将文件提交到Kubernetes并创建gold-price-db服务，如下图所示：
- en: '![Figure 4.29: Service creation'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.29：服务创建'
- en: '](image/C12607_04_29.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_04_29.jpg)'
- en: 'Figure 4.29: Service creation'
  id: totrans-245
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4.29：服务创建
- en: 'Deploy a CronJob to run every minute. Create an insert-gold-price.yaml file
    with the following Kubernetes CronJob definition:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署一个每分钟运行一次的CronJob。创建一个名为insert-gold-price.yaml的文件，其中包含以下Kubernetes CronJob定义：
- en: '[PRE23]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-248
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: insert-gold-price.yaml is available at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/insert-gold-price.yaml](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/insert-gold-price.yaml).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: insert-gold-price.yaml可在[https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/insert-gold-price.yaml](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson04/Activity4/insert-gold-price.yaml)找到。
- en: Do not forget to change `<USERNAME>` to your Docker Hub username and `<API-KEY>`
    to your CurrencyLayer API key.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将`<USERNAME>`更改为您的Docker Hub用户名，将`<API-KEY>`更改为您的CurrencyLayer API密钥。
- en: 'Deploy the CronJob with the following command in your Terminal:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端中使用以下命令部署CronJob：
- en: '[PRE24]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This command submits the file to Kubernetes and creates the gold-price-to-mysql
    CronJob, as shown in the following figure:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将文件提交到Kubernetes并创建gold-price-to-mysql CronJob，如下图所示：
- en: '![Figure 4.30: CronJob creation'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.30：CronJob创建'
- en: '](image/C12607_04_30.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_04_30.jpg)'
- en: 'Figure 4.30: CronJob creation'
  id: totrans-256
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4.30：CronJob创建
- en: 'Wait for a couple of minutes and check the instances of CronJob. Check the
    running pods with the following command in your Terminal:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几分钟并检查CronJob的实例。在您的终端中使用以下命令检查运行中的pod：
- en: '[PRE25]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This command lists the pods, and you should see a couple of instances whose
    names start with gold-price-to-mysql and with a STATUS of Completed, as shown
    in the following figure:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令列出了pod，并且您应该看到一些实例，其名称以gold-price-to-mysql开头，并且状态为已完成，如下图所示：
- en: '![Figure 4.31: Pod listing'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.31：Pod列表'
- en: '](image/C12607_04_31.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_04_31.jpg)'
- en: 'Figure 4.31: Pod listing'
  id: totrans-262
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4.31：Pod列表
- en: 'Connect to the database and check for the entries:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到数据库并检查条目：
- en: '[PRE26]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This command runs a temporary instance of the mysql:5.7 image and runs the
    SELECT * FROM GoldPrices command, as shown in the following figure:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令运行mysql:5.7镜像的临时实例，并运行SELECT * FROM GoldPrices命令，如下图所示：
- en: '![Figure 4.32: Table listing'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.32：表列表'
- en: '](image/C12607_04_32.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_04_32.jpg)'
- en: 'Figure 4.32: Table listing'
  id: totrans-268
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4.32：表列表
- en: In the GoldPrices MySQL table, there is price data collected every minute. It
    shows that MySQL StatefulSet is up and running the database successfully. In addition,
    the CronJob has been creating the pods every minute and is running successfully.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在GoldPrices MySQL表中，每分钟收集一次价格数据。它显示MySQL StatefulSet正在成功运行数据库。此外，CronJob每分钟创建一次pod并成功运行。
- en: 'Clean the database and automated tasks from Kubernetes. Clean the resources
    with the following command in your Terminal:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Kubernetes中清除数据库和自动化任务。在您的终端中使用以下命令清除资源：
- en: '[PRE27]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You should see the output shown in the following figure:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下图中显示的输出：
- en: '![Figure 4.33: Resource deletion'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.33：资源删除'
- en: '](image/C12607_04_33.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_04_33.jpg)'
- en: 'Figure 4.33: Resource deletion'
  id: totrans-275
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4.33：资源删除
- en: In this activity, we have created a MySQL database as a StatefulSet in Kubernetes.
    Kubernetes has created the required volume resource and attached to the MySQL
    containers. Following that, we have created and packaged our serverless function.
    The function is deployed to the Kubernetes cluster as a CronJob. Kubernetes ensures
    that the function is scheduled and running every minute. Running functions in
    Kubernetes provides two essential advantages. The first one is the reuse of Kubernetes
    clusters and resources. In other words, we are not using any extra cloud resources
    to run our serverless workloads. The second advantage is the proximity to the
    data. Since our microservices are already running on Kubernetes, it is recommended
    to have our databases in Kubernetes. When the serverless applications are also
    running in the same cluster, it is easier to operate, manage, and troubleshoot
    the applications.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们在Kubernetes中创建了一个MySQL数据库作为StatefulSet。Kubernetes已经创建了所需的卷资源并附加到MySQL容器上。接着，我们创建并打包了我们的无服务器函数。该函数被部署到Kubernetes集群作为CronJob。Kubernetes确保该函数每分钟都被调度和运行。在Kubernetes中运行函数提供了两个重要的优势。第一个是重用Kubernetes集群和资源。换句话说，我们不需要额外的云资源来运行我们的无服务器工作负载。第二个优势是与数据的接近。由于我们的微服务已经在Kubernetes上运行，建议将我们的数据库放在Kubernetes中。当无服务器应用程序也在同一集群中运行时，更容易操作、管理和排除故障应用程序。
- en: 5\. Production-Ready Kubernetes Clusters
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.生产就绪的Kubernetes集群
- en: 'Activity 5: Minimizing the Costs of Serverless Functions in a GKE Cluster'
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动5：在GKE集群中最小化无服务器函数的成本
- en: '**Solution**'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: Create a new node pool with preemptible servers.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有可抢占服务器的新节点池。
- en: 'Run the following and upcoming functions in your GCP cloud shell:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在GCP云shell中运行以下和即将到来的函数：
- en: '[PRE28]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-283
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Change the `zone` parameter if your cluster is running in another zone.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的集群在另一个区域运行，请更改`zone`参数。
- en: 'This function creates a new node pool named `preemptible` with an automatically
    scaled minimum of 1 node and a maximum of 10 nodes, as shown in the following
    figure:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数创建一个名为`preemptible`的新节点池，自动缩放的最小节点数为1个，最大节点数为10个，如下图所示：
- en: '![Figure 5.29: Node pool creation'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.29：节点池创建'
- en: '](image/C12607_05_29.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_05_29.jpg)'
- en: 'Figure 5.29: Node pool creation'
  id: totrans-288
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5.29：节点池创建
- en: 'Taint the preemptible servers to run only serverless functions:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给可抢占服务器施加污点，只能运行无服务器函数：
- en: '[PRE29]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This command will apply taints to all nodes with the label `cloud.google.com/node-pool
    = preemptible`. The taint key will be `preemptible`, and the value is `true`.
    The action of this limit is `NoSchedule`, which means only the pods with the matching
    toleration will be scheduled to these nodes, as shown in the following figure:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将对所有具有标签`cloud.google.com/node-pool = preemptible`的节点应用污点。污点键将是`preemptible`，值为`true`。此限制的操作是`NoSchedule`，这意味着只有具有匹配容忍性的pod才会被调度到这些节点上，如下图所示：
- en: '![Figure 5.30: Tainting the nodes'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.30：给节点施加污点'
- en: '](image/C12607_05_30.jpg)'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_05_30.jpg)'
- en: 'Figure 5.30: Tainting the nodes'
  id: totrans-294
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5.30：给节点施加污点
- en: 'Create a Kubernetes service to reach backend pods:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Kubernetes服务以访问后端pod：
- en: '[PRE30]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This command creates a service for the deployment backend on port `80`, as
    shown in the following figure:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令在端口`80`上为部署后端创建了一个服务，如下图所示：
- en: '![Figure 5.31: Exposing the deployment'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.31：暴露部署'
- en: '](image/C12607_05_31.jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_05_31.jpg)'
- en: 'Figure 5.31: Exposing the deployment'
  id: totrans-300
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5.31：暴露部署
- en: Create a `CronJob` to connect to the backend service every minute. The CronJob
    definition should have tolerations to run on preemptible servers.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`CronJob`，每分钟连接到后端服务。CronJob定义应该具有容忍性，以在可抢占服务器上运行。
- en: 'Create a `CronJob` definition with the following content inside a file named
    `cronjob.yaml`:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在名为`cronjob.yaml`的文件中创建一个包含以下内容的`CronJob`定义：
- en: '[PRE31]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The file has a `CronJob` definition for running the `curl -I backend` function
    every minute. `nodeSelector` indicates that the scheduler will choose to run on
    the nodes with the label key `cloud.google.com/gke-nodepool` and a value of `preemptible`.
    However, since there are taints on the preemptible nodes, tolerations are also
    added.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件包含了每分钟运行 `curl -I backend` 函数的 `CronJob` 定义。`nodeSelector` 表示调度器将选择在具有标签键
    `cloud.google.com/gke-nodepool` 和值 `preemptible` 的节点上运行。然而，由于可抢占节点上有污点，因此还添加了容忍。
- en: Note
  id: totrans-305
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: '`cronjob.yaml` is available on GitHub: [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson05/Activity5/cronjob.yaml](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson05/Activity5/cronjob.yaml).'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`cronjob.yaml` 可在 GitHub 上找到：[https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson05/Activity5/cronjob.yaml](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/blob/master/Lesson05/Activity5/cronjob.yaml)。'
- en: 'Deploy the CronJob with the following command:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令部署 CronJob：
- en: '[PRE32]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output should be as follows:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 5.32: CronJob creation'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.32：CronJob 创建'
- en: '](image/C12607_05_32.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_05_32.jpg)'
- en: 'Figure 5.32: CronJob creation'
  id: totrans-312
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5.32：CronJob 创建
- en: 'Check the node assignments of the `CronJob` functions:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `CronJob` 函数的节点分配：
- en: '[PRE33]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This command lists the pod with their corresponding nodes. As expected, there
    are exactly 10 instances of backend running on `high-memory` nodes. In addition,
    there are 3 instances of the CronJob function running on `preemptible` nodes,
    as shown in the following figure:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令列出了带有相应节点的 pod。如预期的那样，在 `high-memory` 节点上运行了确切的 10 个后端实例。此外，如下图所示，在 `preemptible`
    节点上运行了 3 个 `CronJob` 函数实例：
- en: '![Figure 5.33: Pod listing'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.33：Pod 列表'
- en: '](image/C12607_05_33.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_05_33.jpg)'
- en: 'Figure 5.33: Pod listing'
  id: totrans-318
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5.33：Pod 列表
- en: 'Check the logs of `CronJob` function instances:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `CronJob` 函数实例的日志：
- en: '[PRE34]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-321
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Replace `<ID>` with a pod name from *Step 5*.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 用 *步骤5* 中的 pod 名称替换 `<ID>`。
- en: 'The output of the function shows the trail of `curl` connecting to the `nginx`
    instance, as shown in the following figure:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的输出显示了 `curl` 连接到 `nginx` 实例的轨迹，如下图所示：
- en: '![Figure 5.34: curl output'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.34：curl 输出'
- en: '](image/C12607_05_34.jpg)'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_05_34.jpg)'
- en: 'Figure 5.34: curl output'
  id: totrans-326
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5.34：curl 输出
- en: 'Clean the backend deployment and serverless functions:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理后端部署和无服务器函数：
- en: '[PRE35]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This command deletes the `backend` deployment and `backend-checker` CronJob,
    as shown in the following figure:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将删除 `backend` 部署和 `backend-checker` CronJob，如下图所示：
- en: '![Figure 5.35: Cleanup'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.35：清理'
- en: '](image/C12607_05_35.jpg)'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_05_35.jpg)'
- en: 'Figure 5.35: Cleanup'
  id: totrans-332
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5.35：清理
- en: 'Remove the Kubernetes cluster if you do not need it anymore:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不再需要，删除 Kubernetes 集群：
- en: '[PRE36]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note
  id: totrans-335
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Change the `zone` parameter in the command if your cluster is running in another
    zone.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的集群在另一个区域运行，请在命令中更改 `zone` 参数。
- en: 'This command deletes the cluster from GKE, as shown in the following figure:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将从 GKE 中删除集群，如下图所示：
- en: '![Figure 5.36: Cluster removal'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.36：集群移除'
- en: '](image/C12607_05_36.jpg)'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_05_36.jpg)'
- en: 'Figure 5.36: Cluster removal'
  id: totrans-340
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图5.36：集群移除
- en: In this activity, we have undertaken administrative tasks on a live production
    cluster. Creating different types of nodes and running a heterogeneous set of
    nodes in a Kubernetes cluster helps to decrease the cost of the complete cluster.
    Besides, autoscaling is enabled to meet user demand automatically without human
    interaction.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在此活动中，我们对生产集群进行了管理任务。在 Kubernetes 集群中创建不同类型的节点并运行异构节点集有助于降低整个集群的成本。此外，启用了自动缩放以满足用户需求，无需人工干预。
- en: Autoscaling and migration of applications are the most common operational tasks
    on production clusters. These tasks enable better performance with minimal downtime
    and costs. However, the selected Kubernetes platform for your production environment
    should also meet such requirements of your daily operations. The capabilities
    of Kubernetes and cloud providers are essential to install, monitor, and operate
    applications running in the cloud.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 自动扩展和应用程序迁移是生产集群上最常见的运维任务。这些任务可以在最小的停机时间和成本下实现更好的性能。然而，用于生产环境的Kubernetes平台还应满足您日常运营的要求。Kubernetes和云提供商的能力对于安装、监视和操作在云中运行的应用程序至关重要。
- en: 6\. Upcoming Serverless Features in Kubernetes
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6. Kubernetes中即将推出的无服务器功能
- en: 'Activity 6: Deploy a Containerized Application in a Serverless Environment'
  id: totrans-344
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动6：在无服务器环境中部署容器化应用
- en: '**Solution**'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: 'First, create a new directory to store the files for this activity and change
    directory to the newly created directory:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个新目录来存储此活动的文件，并切换到新创建的目录：
- en: '[PRE37]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Create an application that can return the current date and time for the given
    timezone. We will be using PHP to write this function, but you can choose any
    language that you're comfortable with. Create an index.php file with the content
    given in step 1\.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个可以返回给定时区的当前日期和时间的应用程序。我们将使用PHP来编写这个函数，但您可以选择任何您熟悉的语言。创建一个名为index.php的文件，其中包含第1步中给出的内容。
- en: Now we need to create the Docker image according to the container runtime contract
    ([https://cloud.google.com/run/docs/reference/container-contract](https://cloud.google.com/run/docs/reference/container-contract))
    for Google Cloud Run. Create a new file named Dockerfile with the content in step
    2.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要根据Google Cloud Run的容器运行时合同（[https://cloud.google.com/run/docs/reference/container-contract](https://cloud.google.com/run/docs/reference/container-contract)）创建Docker镜像。创建一个名为Dockerfile的新文件，其中包含第2步中的内容。
- en: 'Once the Dockerfile is ready, we can build the Docker image. Replace `<your-gcp-project-name>`
    with the ID of your GCP project. Next, use the docker build command to build the
    Docker image. The `--tag` flag is used to tag the Docker image as per the `[HOSTNAME]/[GCP-PROJECT-ID]/[IMAGE-NAME]:[TAG]`
    format, as we will be pushing this to **Google Container Registry (GCR)** in the
    next step:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦Dockerfile准备好，我们就可以构建Docker镜像。用你的GCP项目的ID替换`<your-gcp-project-name>`。接下来，使用docker
    build命令构建Docker镜像。`--tag`标志用于按照`[HOSTNAME]/[GCP-PROJECT-ID]/[IMAGE-NAME]:[TAG]`格式标记Docker镜像，因为我们将在下一步将其推送到**Google容器注册表（GCR）**：
- en: '[PRE38]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The output should be as follows:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 6.57: Building the Docker image'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.57：构建Docker镜像'
- en: '](image/C12607_06_57.jpg)'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_06_57.jpg)'
- en: 'Figure 6.57: Building the Docker image'
  id: totrans-355
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.57：构建Docker镜像
- en: 'Next, we can push the docker image to GCR:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们可以将docker镜像推送到GCR：
- en: '[PRE39]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The output should be as follows:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 6.58: Pushing the Docker image'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.58：推送Docker镜像'
- en: '](image/C12607_06_58.jpg)'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_06_58.jpg)'
- en: 'Figure 6.58: Pushing the Docker image'
  id: totrans-361
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.58：推送Docker镜像
- en: 'Now we have a Docker image created and pushed to the registry. Now navigate
    to the GCP console and open the Cloud Run page. Click on the **CREATE SERVICE**
    button to create a new service with the following information:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建并推送了一个Docker镜像到注册表。现在转到GCP控制台，打开Cloud Run页面。单击**创建服务**按钮，使用以下信息创建一个新服务：
- en: 'Container Image URL: `gcr.io/<your-gcp-project-id>/clock:v1.0`'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 容器镜像URL：`gcr.io/<your-gcp-project-id>/clock:v1.0`
- en: 'Deployment platform: Cloud Run (fully managed)'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 部署平台：Cloud Run（完全托管）
- en: 'Location: Select any region you prefer from the available options'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 位置：从可用选项中选择任何您喜欢的区域
- en: 'Service name: clock'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 服务名称：clock
- en: 'Authentication: **Allow unauthenticated invocations**'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 认证：**允许未经身份验证的调用**
- en: 'The page would look as follows:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 页面将如下所示：
- en: '![Figure 6.59: Creating a service'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.59：创建服务'
- en: '](image/C12607_06_59.jpg)'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_06_59.jpg)'
- en: 'Figure 6.59: Creating a service'
  id: totrans-371
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.59：创建服务
- en: 'Click on the **CREATE** button and you will be navigated to the Service details
    page:![Figure 6.60: Service details'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**创建**按钮，您将被导航到服务详细信息页面：![图6.60：服务详细信息
- en: '](image/C12607_06_60.jpg)'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_06_60.jpg)'
- en: 'Figure 6.60: Service details'
  id: totrans-374
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.60：服务详细信息
- en: 'Open the provided URL from the Service details page. For me, this URL is `https://clock-awsve2jaoa-uc.a.run.app/`,
    but your URL will be different:![Figure 6.61: Timezone error'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从服务详细信息页面打开提供的URL。对我来说，这个URL是`https://clock-awsve2jaoa-uc.a.run.app/`，但您的URL将会不同：![图6.61：时区错误
- en: '](image/C12607_06_61.jpg)'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_06_61.jpg)'
- en: 'Figure 6.61: Timezone error'
  id: totrans-377
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.61：时区错误
- en: We are receiving this error as we have not provided the timezone parameter.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们没有提供时区参数，所以我们收到了这个错误。
- en: 'Let''s invoke the URL again with the timezone parameter, `https://clock-awsve2jaoa-uc.a.run.app/?timezone=Europe/London`![Figure
    6.62: Output with timezone'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再次使用带有时区参数的URL进行调用，`https://clock-awsve2jaoa-uc.a.run.app/?timezone=Europe/London`![图6.62：带时区的输出
- en: '](image/C12607_06_62.jpg)'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_06_62.jpg)'
- en: 'Figure 6.62: Output with timezone'
  id: totrans-381
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图6.62：带时区的输出
- en: In this activity, we have successfully deployed a containerized application
    on Google Cloud Run that can output the current date and time based on a provided
    `timezone` value.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们已成功在Google Cloud Run上部署了一个容器化应用程序，可以根据提供的`时区`值输出当前日期和时间。
- en: 7\. Kubernetes Serverless with Kubeless
  id: totrans-383
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7. 使用Kubeless的Kubernetes无服务器
- en: 'Activity 7: Publishing Messages to Slack with Kubeless'
  id: totrans-384
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动7：使用Kubeless将消息发布到Slack
- en: '**Solution - Slack Setup**'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案- Slack设置**'
- en: 'Visit https://slack.com/create to create a workspace. Enter your email address
    and click on Create:![Figure 7.77: Creating a new workspace'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问https://slack.com/create以创建一个工作区。输入您的电子邮件地址，然后单击“创建”：![图7.77：创建新工作区
- en: '](image/C12607_07_77.jpg)'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_77.jpg)'
- en: 'Figure 7.77: Creating a new workspace'
  id: totrans-388
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.77：创建新工作区
- en: 'Now, you will receive a six-digit confirmation code to the email that you entered
    on the previous page. Enter the received code on the following page:![Figure 7.78:
    Checking your email'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您将收到一个六位数的确认码，发送到您在上一页输入的电子邮件中。在下一页上输入收到的代码：![图7.78：检查您的电子邮件
- en: '](image/C12607_07_78.jpg)'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_78.jpg)'
- en: 'Figure 7.78: Checking your email'
  id: totrans-391
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.78：检查您的电子邮件
- en: 'Add a suitable name here. This will be your workspace name:![Figure 7.79: Adding
    a workspace name'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里添加一个合适的名称。这将是您的工作区名称：![图7.79：添加工作区名称
- en: '](image/C12607_07_79.jpg)'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_79.jpg)'
- en: 'Figure 7.79: Adding a workspace name'
  id: totrans-394
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.79：添加工作区名称
- en: 'Add a suitable name here. This will be your Slack channel name:![Figure 7.80:
    Adding a Slack channel name'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里添加一个合适的名称。这将是您的Slack频道名称：![图7.80：添加Slack频道名称
- en: '](image/C12607_07_80.jpg)'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_80.jpg)'
- en: 'Figure 7.80: Adding a Slack channel name'
  id: totrans-397
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.80：添加Slack频道名称
- en: 'You can skip the following section if you wish to:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，可以跳过以下部分：
- en: '![Figure 7.81: Filling in further details or choosing to skip'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.81：填写更多细节或选择跳过'
- en: '](image/C12607_07_81.jpg)'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_81.jpg)'
- en: 'Figure 7.81: Filling in further details or choosing to skip'
  id: totrans-401
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.81：填写更多细节或选择跳过
- en: 'Now your Slack channel is ready. Click on **See Your Channel in Slack**, as
    shown in the following screenshot:![Figure 7.82: Seeing the new Slack channel'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您的Slack频道已准备就绪。单击**在Slack中查看您的频道**，如下面的屏幕截图所示：![图7.82：查看新的Slack频道
- en: '](image/C12607_07_82.jpg)'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_82.jpg)'
- en: 'Figure 7.82: Seeing the new Slack channel'
  id: totrans-404
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.82：查看新的Slack频道
- en: 'Once clicked, we should see our channel as follows:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击，我们应该看到我们的频道如下：
- en: '![Figure 7.83: Your new Slack channel'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.83：您的新Slack频道'
- en: '](image/C12607_07_83.jpg)'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_83.jpg)'
- en: 'Figure 7.83: Your new Slack channel'
  id: totrans-408
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.83：您的新Slack频道
- en: 'Now we are going to add an Incoming Webhook app to our slack. From the left
    menu, select Add apps under the Apps section:![Figure 7.84: Adding apps under
    the Apps section'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们要向Slack添加一个传入的Webhook应用程序。从左侧菜单中，在应用程序部分下选择添加应用程序：![图7.84：在应用程序部分下添加应用程序
- en: '](image/C12607_07_84.jpg)'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_84.jpg)'
- en: 'Figure 7.84: Adding apps under the Apps section'
  id: totrans-411
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.84：在应用程序部分下添加应用程序
- en: 'Enter `Incoming Webhooks` in the search field and click on **Install** for
    the Incoming Webhook app:![Figure 7.85: Browsing apps'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索栏中输入`传入的Webhooks`，然后点击**安装**传入的Webhook应用程序：![图7.85：浏览应用程序
- en: '](image/C12607_07_85.jpg)'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_85.jpg)'
- en: 'Figure 7.85: Browsing apps'
  id: totrans-414
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.85：浏览应用程序
- en: 'Click on **Add Configuration**:![Figure 7.86: Adding configuration'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加配置**：![图7.86：添加配置
- en: '](image/C12607_07_86.jpg)'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_86.jpg)'
- en: 'Figure 7.86: Adding configuration'
  id: totrans-417
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.86：添加配置
- en: 'Click on **Add Incoming WebHooks Integration**:![Figure 7.87: Adding incoming
    webhooks'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加传入的WebHooks集成**：![图7.87：添加传入的webhooks
- en: '](image/C12607_07_87.jpg)'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_87.jpg)'
- en: 'Figure 7.87: Adding incoming webhooks'
  id: totrans-420
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.87：添加传入的webhooks
- en: Save the webhook URL. We will need this when we are writing the Kubeless function.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存webhook URL。在编写Kubeless函数时，我们将需要这个。
- en: 'Now, let''s create the function and deploy it. First, we need to create the
    requirements.txt file, which specifies the dependencies we need to install for
    the function''s runtime. These are the additional modules we need in order to
    run our function successfully. We will be using the requests package to send the
    HTTP POST request to the Slack webhook endpoint:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建函数并部署它。首先，我们需要创建requirements.txt文件，该文件指定了我们需要为函数的运行时安装的依赖项。这些是我们需要成功运行函数的额外模块。我们将使用requests包向Slack
    webhook端点发送HTTP POST请求：
- en: '[PRE40]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '**Activity Solution**'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '**活动解决方案**'
- en: Create the function as follows.
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤创建函数。
- en: '[PRE41]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Deploy the function:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署函数：
- en: '[PRE42]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Deploying the function will yield the following output:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 部署函数将产生以下输出：
- en: '![Figure 7.88: Deploying the function'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.88：部署函数'
- en: '](image/C12607_07_88.jpg)'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_88.jpg)'
- en: 'Figure 7.88: Deploying the function'
  id: totrans-432
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.88：部署函数
- en: We are passing the requirements.txt file that we created in the previous step
    as a dependency while deploying the slack function. This will ensure that the
    Kubeless runtime contains the required Python packages for function execution.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署slack函数时，我们将传递我们在上一步中创建的requirements.txt文件作为依赖项。这将确保Kubeless运行时包含函数执行所需的Python包。
- en: 'Invoke the kubeless function:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用kubeless函数：
- en: '[PRE43]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This yields the following output:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![Figure 7.89: Invoking the function'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.89：调用函数'
- en: '](image/C12607_07_89.jpg)'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_89.jpg)'
- en: 'Figure 7.89: Invoking the function'
  id: totrans-439
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.89：调用函数
- en: 'Go to your Slack workspace and verify that the message was successfully posted
    to the Slack channel:![Figure 7.90: Verifying whether the message was successfully
    posted'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到您的Slack工作区，并验证消息是否成功发布到Slack频道：![图7.90：验证消息是否成功发布
- en: '](image/C12607_07_90.jpg)'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_90.jpg)'
- en: 'Figure 7.90: Verifying whether the message was successfully posted'
  id: totrans-442
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.90：验证消息是否成功发布
- en: In this activity, we created a Slack space and created an incoming webhook.
    Next, we created and deployed a Kubeless function that can post messages to the
    Slack channel.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们创建了一个Slack空间并创建了一个传入的webhook。接下来，我们创建并部署了一个Kubeless函数，可以向Slack频道发布消息。
- en: 8\. Introduction to Apache OpenWhisk
  id: totrans-444
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8. Apache OpenWhisk简介
- en: 'Activity 8: Receive Daily Weather Updates via Email'
  id: totrans-445
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动8：通过电子邮件接收每日天气更新
- en: 'Steps to create an OpenWeather and SendGrid account:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 创建OpenWeather和SendGrid帐户的步骤：
- en: 'Create an **OpenWeather** account at [https://home.openweathermap.org/users/sign_up](https://home.openweathermap.org/users/sign_up):![Figure
    8.72: Creating an OpenWeather account'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://home.openweathermap.org/users/sign_up](https://home.openweathermap.org/users/sign_up)创建一个**OpenWeather**账户：![图8.72：创建OpenWeather账户
- en: '](image/C12607_08_72.jpg)'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_72.jpg)'
- en: 'Figure 8.72: Creating an OpenWeather account'
  id: totrans-449
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.72：创建OpenWeather账户
- en: 'Once you have signed up to **OpenWeather**, an API key will be generated automatically
    for you. Go to the **API keys** tab ([https://home.openweathermap.org/api_keys](https://home.openweathermap.org/api_keys))
    and save the API key because this key is required to fetch the data from OpenWeather
    API:![Figure 8.73: OpenWeather API key'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您注册到**OpenWeather**，API密钥将自动生成。转到**API密钥**选项卡（[https://home.openweathermap.org/api_keys](https://home.openweathermap.org/api_keys)）并保存API密钥，因为这个密钥是从OpenWeather
    API获取数据所需的。![图8.73：OpenWeather API密钥
- en: '](image/C12607_08_73.jpg)'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_73.jpg)'
- en: 'Figure 8.73: OpenWeather API key'
  id: totrans-452
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.73：OpenWeather API密钥
- en: 'Test the **OpenWeather** API using `https://api.openweathermap.org/data/2.5/weather?q=London&appid=<YOUR-API-KEY>`
    in a web browser. Please note that you need to replace `<YOUR-API-KEY>` with your
    API Key from step 2:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web浏览器中使用`https://api.openweathermap.org/data/2.5/weather?q=London&appid=<YOUR-API-KEY>`来测试**OpenWeather**
    API。请注意，您需要用步骤2中的API密钥替换`<YOUR-API-KEY>`：
- en: Note
  id: totrans-454
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: It may take a few minutes to get your API key activated. Wait for a few minutes
    and retry if you receive **Invalid API key**. Please see [http://openweathermap.org/faq#error401](http://openweathermap.org/faq#error401)
    for more info. error while invoking the URL.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要几分钟来激活您的API密钥。如果收到**无效的API密钥**，请等待几分钟后重试。请参阅[http://openweathermap.org/faq#error401](http://openweathermap.org/faq#error401)获取更多信息。在调用URL时出现错误。
- en: '![Figure 8.74: Invoking OpenWeather API'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.74：调用OpenWeather API'
- en: '](image/C12607_08_74.jpg)'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_74.jpg)'
- en: 'Figure 8.74: Invoking OpenWeather API'
  id: totrans-458
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.74：调用OpenWeather API
- en: Create a **SendGrid** account at [https://signup.sendgrid.com/](https://signup.sendgrid.com/).
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://signup.sendgrid.com/](https://signup.sendgrid.com/)创建一个**SendGrid**账户。
- en: 'It should look as follows:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 应该如下所示：
- en: '![Figure 8.75: Creating a SendGrid account'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.75：创建SendGrid账户'
- en: '](image/C12607_08_75.jpg)'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_75.jpg)'
- en: 'Figure 8.75: Creating a SendGrid account'
  id: totrans-463
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.75：创建SendGrid账户
- en: 'Go to **Settings** > **API Keys** and click on the **Create API Key** button:![Figure
    8.76: API key page in SendGrid'
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**设置** > **API密钥**，然后点击**创建API密钥**按钮：![图8.76：SendGrid中的API密钥页面
- en: '](image/C12607_08_76.jpg)'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_76.jpg)'
- en: 'Figure 8.76: API key page in SendGrid'
  id: totrans-466
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.76：SendGrid中的API密钥页面
- en: 'Provide a name in the **API Key Name** field, select the **Full Access** radio
    button, and click on the **Create & View** button to create an API key with full
    access:![Figure 8.77: Generating an API key in SendGrid'
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**API密钥名称**字段中提供一个名称，选择**完全访问**单选按钮，然后点击**创建和查看**按钮以创建具有完全访问权限的API密钥：![图8.77：在SendGrid中生成API密钥
- en: '](image/C12607_08_77.jpg)'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_77.jpg)'
- en: 'Figure 8.77: Generating an API key in SendGrid'
  id: totrans-469
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.77：在SendGrid中生成API密钥
- en: 'Once the key is generated, copy the API key and save it somewhere safe because
    you will see this key only once:![Figure 8.78: Generated API key in SendGrid'
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦生成密钥，请复制API密钥并将其保存在安全的地方，因为您只能看到这个密钥一次：![图8.78：在SendGrid中生成的API密钥
- en: '](image/C12607_08_78.jpg)'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_78.jpg)'
- en: 'Figure 8.78: Generated API key in SendGrid'
  id: totrans-472
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.78：在SendGrid中生成的API密钥
- en: '**Activity Solution**'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '**活动解决方案**'
- en: Create the `get-weather.js` function with the function code provided in *step
    3*. Replace `<OPEN_WEATHER_API_KEY>` with the API key saved in *step 1*.
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*步骤3*中提供的函数代码创建`get-weather.js`函数。将`<OPEN_WEATHER_API_KEY>`替换为*步骤1*中保存的API密钥。
- en: 'Create the action named `getWeather` with the `get-weather.js` function created
    in the preceding step and provide the default value of the `cityName` parameter
    as `London`:'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`getWeather`的操作，其中包含在前一步中创建的`get-weather.js`函数，并将`cityName`参数的默认值设置为`London`：
- en: '[PRE44]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The output should be as follows:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 8.79: Creating the getWeather action'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.79：创建getWeather操作'
- en: '](image/C12607_08_79.jpg)'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_79.jpg)'
- en: 'Figure 8.79: Creating the getWeather action'
  id: totrans-480
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.79：创建getWeather操作
- en: 'Verify that the action is working as expected by invoking the action:'
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用操作验证操作是否按预期工作：
- en: '[PRE45]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '![Figure 8.80: Invoking the getWeather action'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.80：调用getWeather操作'
- en: '](image/C12607_08_80.jpg)'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_80.jpg)'
- en: 'Figure 8.80: Invoking the getWeather action'
  id: totrans-485
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.80：调用getWeather操作
- en: 'Now we can create the action to send emails (we will be using the API key generated
    with SendGrid). We will be using the `sendgrid` module for this function. First,
    we need to create a directory to store the function code and the dependencies:'
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以创建发送电子邮件的操作（我们将使用与SendGrid生成的API密钥）。我们将为此函数使用`sendgrid`模块。首先，我们需要创建一个目录来存储函数代码和依赖项：
- en: '[PRE46]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The output should be as follows:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 8.81: Creating the send-mail directory'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.81：创建send-mail目录'
- en: '](image/C12607_08_81.jpg)'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_81.jpg)'
- en: 'Figure 8.81: Creating the send-mail directory'
  id: totrans-491
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.81：创建send-mail目录
- en: 'Run the `npm init` command by accepting the default parameters:'
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`npm init`命令，接受默认参数：
- en: '[PRE47]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The output should be as follows:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 8.82: npm init'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.82：npm init'
- en: '](image/C12607_08_82.jpg)'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_82.jpg)'
- en: 'Figure 8.82: npm init'
  id: totrans-497
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.82：npm init
- en: 'Install the `sendgrid` `npm` package, which is required for the function:'
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`sendgrid` `npm`包，这是函数所需的：
- en: '[PRE48]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The output should be as follows:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 8.83: Adding the sendgrid dependency package'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.83：添加sendgrid依赖包'
- en: '](image/C12607_08_83.jpg)'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_83.jpg)'
- en: 'Figure 8.83: Adding the sendgrid dependency package'
  id: totrans-503
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.83：添加sendgrid依赖包
- en: Create the `index.js` file with the function code provided in *step 4*. Replace
    `<SEND_GRID_API_KEY>` with the key, which was saved when creating the SendGrid
    account. Similarly, replace `<TO_EMAIL>` to receive weather data and `<FROM_EMAIL>`
    to send weather data with your email address.
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*步骤4*中提供的函数代码创建`index.js`文件。将`<SEND_GRID_API_KEY>`替换为创建SendGrid帐户时保存的密钥。类似地，将`<TO_EMAIL>`替换为接收天气数据的电子邮件地址，将`<FROM_EMAIL>`替换为发送天气数据的电子邮件地址。
- en: 'Compress the code with all the dependencies:'
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 压缩所有依赖项的代码：
- en: '[PRE49]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now we can create an action named `sendEmail` using `send-email.zip`:'
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以使用`send-email.zip`创建名为`sendEmail`的操作：
- en: '[PRE50]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The output should be as follows:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 8.84: Creating the sendEmail action'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.84：创建sendEmail操作'
- en: '](image/C12607_08_84.jpg)'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_84.jpg)'
- en: 'Figure 8.84: Creating the sendEmail action'
  id: totrans-512
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.84：创建sendEmail操作
- en: 'Verify that the `sendEmail` action is working as expected:'
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`sendEmail`操作是否按预期工作：
- en: Note
  id: totrans-514
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure to check your spam folder because the email client might have categorized
    this as a spam email.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保检查您的垃圾邮件文件夹，因为电子邮件客户端可能已将其归类为垃圾邮件。
- en: '[PRE51]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The output should be as follows:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 8.85: Invoking the sendEmail action'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.85：调用sendEmail操作'
- en: '](image/C12607_08_85.jpg)'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_85.jpg)'
- en: 'Figure 8.85: Invoking the sendEmail action'
  id: totrans-520
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.85：调用sendEmail操作
- en: Create the `format-weather-data.js` function with the function code provided
    in *step 5*.
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*步骤5*中提供的函数代码创建`format-weather-data.js`函数。
- en: 'Create the action named `formatWeatherData` with the `format-weather-data.js`
    function created in the preceding step:'
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`formatWeatherData`的操作，其中包含在前一步中创建的`format-weather-data.js`函数：
- en: '[PRE52]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The output should be as follows:'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 8.86: Creating the formatWeatherData action'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.86：创建formatWeatherData操作'
- en: '](image/C12607_08_86.jpg)'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_86.jpg)'
- en: 'Figure 8.86: Creating the formatWeatherData action'
  id: totrans-527
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.86：创建formatWeatherData动作
- en: 'Create a sequence named `weatherMailSender` by combining the `getWeather`,
    `formatWeatherData`, and `sendEmail` actions:'
  id: totrans-528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过组合`getWeather`、`formatWeatherData`和`sendEmail`动作创建一个名为`weatherMailSender`的序列：
- en: '[PRE53]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The output should be as follows:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 8.87: Creating the weatherMailSender action sequence'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.87：创建weatherMailSender动作序列'
- en: '](image/C12607_08_87.jpg)'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_87.jpg)'
- en: 'Figure 8.87: Creating the weatherMailSender action sequence'
  id: totrans-533
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.87：创建weatherMailSender动作序列
- en: 'Invoke the `weatherMailSender` sequence:'
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`weatherMailSender`序列：
- en: '[PRE54]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The output should be as follows:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 8.88: Invoking the weatherMailSender action sequence'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.88：调用weatherMailSender动作序列'
- en: '](image/C12607_08_88.jpg)'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_88.jpg)'
- en: 'Figure 8.88: Invoking the weatherMailSender action sequence'
  id: totrans-539
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.88：调用weatherMailSender动作序列
- en: Check the mail account that you added as `<TO_EMAIL>` (check the spam folder).
    Check the status of email delivery at [https://app.sendgrid.com/email_activity](https://app.sendgrid.com/email_activity).
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您添加为`<TO_EMAIL>`的邮件帐户（检查垃圾邮件文件夹）。在[https://app.sendgrid.com/email_activity](https://app.sendgrid.com/email_activity)上检查电子邮件传递的状态。
- en: 'The output should be as follows:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 8.89: Received email from the weatherMailSender action sequence'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.89：从weatherMailSender动作序列接收的电子邮件'
- en: '](image/C12607_08_89.jpg)'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_89.jpg)'
- en: 'Figure 8.89: Received email from the weatherMailSender action sequence'
  id: totrans-544
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.89：从weatherMailSender动作序列接收的电子邮件
- en: 'Finally, we need to create the trigger and rule to invoke the sequence every
    day at 8 AM. First, we will create `weatherMailSenderCronTrigger`, which will
    be triggered daily at 8.00 AM:'
  id: totrans-545
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要创建触发器和规则，以便每天上午8点调用该序列。首先，我们将创建`weatherMailSenderCronTrigger`，它将在每天上午8:00触发：
- en: '[PRE55]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Then, we will create a rule named `weatherMailSenderCronRule` to connect the
    trigger (`weatherMailSenderCronTrigger`) and action (`weatherMailSender`):'
  id: totrans-547
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个名为`weatherMailSenderCronRule`的规则，以连接触发器（`weatherMailSenderCronTrigger`）和动作（`weatherMailSender`）：
- en: '[PRE56]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The output should be as follows:'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 8.90: Creating weatherMailSenderCronRule'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.90：创建weatherMailSenderCronRule'
- en: '](image/C12607_08_90.jpg)'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_08_90.jpg)'
- en: 'Figure 8.90: Creating weatherMailSenderCronRule'
  id: totrans-552
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图8.90：创建weatherMailSenderCronRule
- en: Once the preceding steps are completed, you should receive an email daily at
    8.00 AM to the specified email address with the weather data for the requested
    city.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 完成上述步骤后，您应该每天在上午8:00收到发送到指定电子邮件地址的有关所请求城市天气数据的电子邮件。
- en: 9\. Going Serverless with OpenFaaS
  id: totrans-554
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9\. 使用OpenFaaS进行无服务器化
- en: 'Activity 9: OpenFaaS Form Processor'
  id: totrans-555
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动9：OpenFaaS表单处理器
- en: '**Solution**'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: First, you need to create a SendGrid account and generate an API key. You can
    use the same API key created in the activity from *Chapter 08, Introduction to
    Apache OpenWhisk*. Refer to steps 4-7 in the activity of *Chapter 08, Introduction
    to Apache OpenWhisk* on how to create a SendGrid account and generate an API key.
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要创建一个SendGrid账户并生成一个API密钥。您可以使用在*第08章，介绍Apache OpenWhisk*中创建的相同API密钥。请参考*第08章，介绍Apache
    OpenWhisk*中关于如何创建SendGrid账户和生成API密钥的步骤4-7的活动。
- en: 'Create an OpenFaaS function named contact-form using the python3 template.
    This will be the frontend of the contact form:'
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用python3模板创建一个名为contact-form的OpenFaaS函数。这将是联系表单的前端：
- en: '[PRE57]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The output should be as follows:'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.59: Creating the contact-form function'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.59：创建contact-form函数'
- en: '](image/C12607_09_591.jpg)'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_591.jpg)'
- en: 'Figure 9.59: Creating the contact-form function'
  id: totrans-563
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.59：创建contact-form函数
- en: 'Create a new directory named html inside the contact-form directory to store
    the HTML files:'
  id: totrans-564
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在contact-form目录内创建一个名为html的新目录以存储HTML文件：
- en: '[PRE58]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The output should be as follows:'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.60: Creating the HTML folder'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.60：创建HTML文件夹'
- en: '](image/C12607_09_601.jpg)'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_601.jpg)'
- en: 'Figure 9.60: Creating the HTML folder'
  id: totrans-569
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.60：创建HTML文件夹
- en: Create the contact-us.html file inside the contact-form/html folder with the
    code provided in step 2.
  id: totrans-570
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在contact-form/html文件夹中创建contact-us.html文件，并使用步骤2中提供的代码填写表单。
- en: 'Update the `handler.py` Python file inside the contact-form folder. This Python
    function will read the content of the `contact-us.html` file and return it as
    the function response:'
  id: totrans-571
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新contact-form文件夹中的`handler.py` Python文件。这个Python函数将读取`contact-us.html`文件的内容，并将其作为函数响应返回：
- en: '[PRE59]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Update the function definition (`contact-form.yml`) file to specify content_type
    as `text/html`, as explained in the following code:'
  id: totrans-573
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新函数定义（`contact-form.yml`）文件，将content_type指定为`text/html`，如下面的代码所示：
- en: '[PRE60]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Build, push, and deploy the contact-form function:'
  id: totrans-575
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建、推送和部署contact-form函数：
- en: '[PRE61]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The output of the command should be as follows:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出应该如下所示：
- en: '[PRE62]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Create the second OpenFaaS function named form-processor using the python3
    template. This will be the backend of the contact form:'
  id: totrans-579
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用python3模板创建名为form-processor的第二个OpenFaaS函数。这将是联系表单的后端：
- en: '[PRE63]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The output should be as follows:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 9.61: Creating the form-processor function'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.61：创建form-processor函数'
- en: '](image/C12607_09_61.jpg)'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_61.jpg)'
- en: 'Figure 9.61: Creating the form-processor function'
  id: totrans-584
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.61：创建form-processor函数
- en: Update the `handler.py` Python file inside the form-processor folder. This Python
    function performs receives the email, name, and message parameters entered into
    the Contact Us form, formats the email body to be sent, sends the email using
    SendGrid, and returns the email sending status as the function response.
  id: totrans-585
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新form-processor文件夹中的`handler.py` Python文件。这个Python函数执行接收输入到“联系我们”表单中的电子邮件、姓名和消息参数，格式化要发送的电子邮件正文，使用SendGrid发送电子邮件，并将电子邮件发送状态作为函数响应返回。
- en: 'Replace <SEND_GRID_API_KEY> with the SendGrid API key saved in step 1, and
    <TO_EMAIL> with the email address to receive the Contact Us form data:'
  id: totrans-586
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用步骤1中保存的SendGrid API密钥替换<SEND_GRID_API_KEY>，用电子邮件地址替换<TO_EMAIL>以接收“联系我们”表单数据：
- en: '[PRE64]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Add the sendgrid module as a dependency in form-processor/requirements.txt
    of the form-processor function:'
  id: totrans-588
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在form-processor/requirements.txt中将sendgrid模块添加为form-processor函数的依赖项：
- en: '[PRE65]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Increase the timeout (read_timeout, write_timeout, and exec_timeout) values
    in form-processor.yml, as shown in the following code:'
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 增加form-processor.yml中的超时（read_timeout、write_timeout和exec_timeout）值，如下面的代码所示：
- en: '[PRE66]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Build, deploy, and push the form-processor function:'
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建、部署和推送form-processor函数：
- en: '[PRE67]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The output of the command should be as follows:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出应该如下所示：
- en: '[PRE68]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Open the **Contact Us** form by opening the URL in a web browser:'
  id: totrans-596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在Web浏览器中打开URL来打开**联系我们**表单：
- en: '`http://192.168.99.100:31112/function/contact-form`'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://192.168.99.100:31112/function/contact-form`'
- en: 'The contact form should appear as follows:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 联系表单应该如下所示：
- en: '![Figure 9.62: Invoking the Contact Us form'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.62：调用“联系我们”表单'
- en: '](image/C12607_09_62.jpg)'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_62.jpg)'
- en: 'Figure 9.62: Invoking the Contact Us form'
  id: totrans-601
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.62：调用“联系我们”表单
- en: 'Fill in the form and then submit the form, as shown in the following figure:![Figure
    9.63: Submitting the contact us form'
  id: totrans-602
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写表单，然后提交表单，如下图所示：![图9.63：提交联系我们表单
- en: '](image/C12607_09_63.jpg)'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_63.jpg)'
- en: 'Figure 9.63: Submitting the contact us form'
  id: totrans-604
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.63：提交联系我们表单
- en: 'Check the email account you provided as `<TO_EMAIL>` in step 9 to verify the
    email delivery:'
  id: totrans-605
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查步骤9中提供的电子邮件帐户`<TO_EMAIL>`以验证电子邮件发送：
- en: '![Figure 9.64: Verifying email delivery ](image/C12607_09_64.jpg)'
  id: totrans-606
  prefs: []
  type: TYPE_IMG
  zh: '![图9.64：验证电子邮件发送](image/C12607_09_64.jpg)'
- en: 'Figure 9.64: Verifying email delivery'
  id: totrans-607
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.64：验证电子邮件发送
