- en: 9\. Going Serverless with OpenFaaS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9. 使用OpenFaaS进行无服务器操作
- en: Learning Objectives
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将能够：
- en: Set up the OpenFaaS framework on a Minikube cluster
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Minikube集群上设置OpenFaaS框架
- en: Create, build, deploy, list, invoke, and delete functions with the OpenFaaS
    CLI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OpenFaaS CLI创建、构建、部署、列出、调用和删除函数
- en: Deploy and invoke OpenFaaS functions from the OpenFaaS portal
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从OpenFaaS门户部署和调用OpenFaaS函数
- en: Return an HTML web page from OpenFaaS functions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从OpenFaaS函数返回HTML网页
- en: Set up the Prometheus and Grafana dashboards to monitor OpenFaaS functions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Prometheus和Grafana仪表板以监视OpenFaaS函数
- en: Configure function autoscaling to adjust the function count based on demand
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置函数自动缩放以根据需求调整函数计数
- en: In this chapter, we aim to set up the OpenFaaS framework on top of a Minikube
    cluster and study how we can work with OpenFaaS functions, using both the OpenFaaS
    CLI and OpenFaaS portal. We will also look into features such as observability
    and autoscaling with OpenFaaS.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们的目标是在Minikube集群上设置OpenFaaS框架，并学习如何使用OpenFaaS函数，同时使用OpenFaaS CLI和OpenFaaS门户。我们还将研究OpenFaaS的可观察性和自动缩放等功能。
- en: Introduction to OpenFaaS
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenFaaS简介
- en: In the previous chapter, we learned about OpenWhisk, an open source serverless
    framework, which is part of the Apache Software Foundation. We learned how to
    create, list, invoke, update, and delete OpenWhisk actions. We also discussed
    how to automate the action invocation with feeds, triggers, and rules.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解了OpenWhisk，这是一个开源的无服务器框架，它是Apache软件基金会的一部分。我们学习了如何创建、列出、调用、更新和删除OpenWhisk动作。我们还讨论了如何使用feeds、triggers和rules自动化动作调用。
- en: In this chapter, we will be studying OpenFaas, another open source framework
    used to build and deploy serverless functions on top of containers. This was started
    as a proof-of-concept project by Alex Ellis in October 2016, and the first version
    of the framework, written in Golang, was committed to GitHub in December 2016\.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习OpenFaas，这是另一个用于在容器之上构建和部署无服务器函数的开源框架。这是由Alex Ellis于2016年10月作为概念验证项目开始的，框架的第一个版本是用Golang编写的，并于2016年12月提交到GitHub。
- en: OpenFaaS was originally designed to work with Docker Swarm, which is the clustering
    and scheduling tool for Docker containers. Later, the OpenFaaS framework was rearchitected
    to support the Kubernetes framework, too.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: OpenFaaS最初设计用于与Docker Swarm一起工作，这是Docker容器的集群和调度工具。后来，OpenFaaS框架被重新设计为支持Kubernetes框架。
- en: OpenFaaS comes with a built-in UI named **OpenFaaS Portal**, which can be used
    to create and invoke the functions from the web browser. This portal also offers
    a CLI named `faas-cli` that allows us to manage functions through the command
    line. The OpenFaaS framework has built-in support for autoscaling. This will scale
    up the function when there is increased demand, and it will scale down when demand
    decreases, or even scale down to zero when the function is idle.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: OpenFaaS带有一个名为**OpenFaaS门户**的内置UI，可以用于在Web浏览器中创建和调用函数。该门户还提供了一个名为`faas-cli`的CLI，允许我们通过命令行管理函数。OpenFaaS框架内置支持自动缩放。这将在需求增加时扩展函数，并在需求减少时缩小，甚至在函数空闲时缩小到零。
- en: 'Now, let''s take a look at the components of the OpenFaaS framework:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看OpenFaaS框架的组件：
- en: '![Figure 9.1: OpenFaaS components'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1：OpenFaaS组件'
- en: '](image/C12607_09_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_01.jpg)'
- en: 'Figure 9.1: OpenFaaS components'
  id: totrans-18
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.1：OpenFaaS组件
- en: 'OpenFaaS consists of the following components that are running on the underlying
    Kubernetes or Docker Swarm:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: OpenFaaS由以下组件组成，这些组件正在底层的Kubernetes或Docker Swarm上运行：
- en: '**API Gateway**:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API网关**：'
- en: The API Gateway is the entry point to the OpenFaaS framework, which exposes
    the functions externally. It is also responsible for collecting the function metrics
    such as function invocation count, function execution duration, and number of
    function replicas. The API Gateway also handles function autoscaling by increasing
    or decreasing function replicas based on demand.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: API网关是OpenFaaS框架的入口点，可以在外部公开函数。它还负责收集函数指标，如函数调用次数、函数执行持续时间和函数副本数量。API网关还通过根据需求增加或减少函数副本来处理函数自动扩展。
- en: '**Prometheus**:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Prometheus**：'
- en: Prometheus, which is an open source monitoring and alerting tool, comes bundled
    with the OpenFaaS framework. This is used to store the information about the function
    metrics collected by the API Gateway.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus是一个开源的监控和警报工具，与OpenFaaS框架捆绑在一起。它用于存储API网关收集的函数指标信息。
- en: '**Function Watchdog**:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数看门狗**：'
- en: The Function Watchdog is a tiny Golang web server running alongside each function
    container. This component is placed between the API Gateway and your function
    and is responsible for converting message formats between the API Gateway and
    the function. It converts the HTTP messages sent by the API Gateway to the "standard
    input" (**stdin**) messages, which the function can understand. This also handles
    the response path by converting the "standard output" (**stdout**) response sent
    by the function to an HTTP response.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 函数看门狗是一个微小的Golang Web服务器，运行在每个函数容器旁边。这个组件位于API网关和您的函数之间，负责在API网关和函数之间转换消息格式。它将API网关发送的HTTP消息转换为函数可以理解的“标准输入”（stdin）消息。它还通过将函数发送的“标准输出”（stdout）响应转换为HTTP响应来处理响应路径。
- en: 'The following is an illustration of a function watchdog:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是函数看门狗的示例：
- en: '![Figure 9.2: OpenFaaS function watchdog'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.2：OpenFaaS函数看门狗'
- en: '](image/C12607_09_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_02.jpg)'
- en: 'Figure 9.2: OpenFaaS function watchdog'
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.2：OpenFaaS函数看门狗
- en: Docker Swarm or Kubernetes can be used as the container orchestration tool with
    the OpenFaaS framework, which manages the containers running on the underlying
    Docker framework.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Swarm或Kubernetes可以作为容器编排工具与OpenFaaS框架一起使用，用于管理底层Docker框架上运行的容器。
- en: Getting Started with OpenFaas on Your Local Minikube Cluster
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在本地Minikube集群上开始使用OpenFaaS
- en: 'In this section, we will set up an OpenFaaS framework and CLI on our local
    Minikube cluster. Before starting the installation, we need to ensure that the
    following prerequisites are met:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在本地Minikube集群上设置OpenFaaS框架和CLI。在开始安装之前，我们需要确保满足以下先决条件：
- en: Minikube is installed
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装Minikube
- en: Docker (version 17.05 or later) is installed
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Docker（版本17.05或更高）
- en: Helm is installed
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装Helm
- en: A Docker Hub account is created
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Docker Hub帐户
- en: 'Once these prerequisites are ready, we can continue to install OpenFaaS. The
    installation of OpenFaas can be broadly classified into three steps, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些先决条件准备就绪，我们就可以继续安装OpenFaaS。OpenFaaS的安装可以大致分为三个步骤，如下所示：
- en: Installing the OpenFaaS CLI
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装OpenFaaS CLI
- en: Installing the OpenFaaS framework (on a Minikube cluster)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装OpenFaaS框架（在Minikube集群上）
- en: Setting up an environment variable
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置环境变量
- en: 'Let''s look at each of these steps in more depth:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地看看这些步骤：
- en: '**Installing the OpenFaaS CLI**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装OpenFaaS CLI**'
- en: '**faas-cli** is the command-line utility for the OpenFaaS framework, which
    can be used to create and invoke OpenFaaS functions from the Terminal. We can
    install the latest version of `faas-cli` using the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**faas-cli**是OpenFaaS框架的命令行实用程序，可用于从终端创建和调用OpenFaaS函数。我们可以使用以下命令安装最新版本的`faas-cli`：'
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output should be as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![](image/C12607_09_03.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](image/C12607_09_03.jpg)'
- en: 'Figure 9.3: Installing faas-cli'
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.3：安装faas-cli
- en: 'Once the installation is complete, we can verify installation with the `faas-cli
    version` command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以使用`faas-cli version`命令验证安装：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output should be as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.4: The faas-cli version'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.4：faas-cli版本'
- en: '](image/C12607_09_04.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_04.jpg)'
- en: 'Figure 9.4: The faas-cli version'
  id: totrans-53
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.4：faas-cli版本
- en: As you can see, we have installed the `faas-cli` utility on the cluster and
    can also check the version number.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已在集群上安装了`faas-cli`实用程序，并且还可以检查版本号。
- en: '**Installing the OpenFaaS Framework**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装OpenFaaS框架**'
- en: 'Next, we need to install the OpenFaaS framework using the OpenFaaS `helm` repository.
    First, we need to add the `openfaas` `helm` repository and update it to pull any
    new releases. Use the following commands:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要使用OpenFaaS `helm`存储库安装OpenFaaS框架。首先，我们需要添加`openfaas` `helm`存储库并更新以拉取任何新版本。使用以下命令：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output should be as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.5: Adding and updating helm charts'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.5：添加和更新helm图表'
- en: '](image/C12607_09_05.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_05.jpg)'
- en: 'Figure 9.5: Adding and updating helm charts'
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.5：添加和更新helm图表
- en: 'Installing OpenFaaS requires two Kubernetes namespaces. The `openfaas` namespace
    is for the core services of the OpenFaaS framework, and the `openfaas-fn` namespace
    is for the OpenFaaS functions. Run the following commands to create the namespaces:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 安装OpenFaaS需要两个Kubernetes命名空间。`openfaas`命名空间用于OpenFaaS框架的核心服务，`openfaas-fn`命名空间用于OpenFaaS函数。运行以下命令创建命名空间：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output will be as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 9.6: Creating namespaces'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.6：创建命名空间'
- en: '](image/C12607_09_06.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_06.jpg)'
- en: 'Figure 9.6: Creating namespaces'
  id: totrans-67
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.6：创建命名空间
- en: 'Now we are going to create the Kubernetes secret, which is required to enable
    basic authentication for the OpenFaaS gateway. First, we will create a random
    string that will be used as the password. Once the password is generated, we will
    `echo` the generated password and save it in a secure place as we need it to log
    in to the API Gateway later on. Run the following commands to generate the password:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建Kubernetes密钥，这是启用OpenFaaS网关的基本身份验证所需的。首先，我们将创建一个随机字符串，将用作密码。生成密码后，我们将`echo`生成的密码并将其保存在安全的位置，因为我们稍后需要用它登录到API网关。运行以下命令生成密码：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output will be as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 9.7: Generating the password'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.7：生成密码'
- en: '](image/C12607_09_07.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_07.jpg)'
- en: 'Figure 9.7: Generating the password'
  id: totrans-73
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.7：生成密码
- en: After generating the password, we will create a Kubernetes **secret** object
    to store the password.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 生成密码后，我们将创建一个Kubernetes **secret**对象来存储密码。
- en: 'Note:'
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意：
- en: A Kubernetes **secret** object is used to store sensitive data such as a password.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes **secret**对象用于存储诸如密码之类的敏感数据。
- en: 'Execute the following command to create a Kubernetes secret named `basic-auth`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令创建名为`basic-auth`的Kubernetes密钥：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output will be as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 9.8: Creating the basic-auth secret'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.8：创建basic-auth密钥'
- en: '](image/C12607_09_08.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_08.jpg)'
- en: 'Figure 9.8: Creating the basic-auth secret'
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.8：创建basic-auth密钥
- en: 'We can now deploy the OpenFaaS framework from the `helm` chart. The `helm upgrade
    openfaas` command starts the deployment of OpenFaaS and will start deploying the
    OpenFaaS framework on your local Minikube cluster. This will take between 5 and
    15 minutes depending on the network speed. Run the following commands to install
    `OpenFaaS`:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以从`helm`图表部署OpenFaaS框架。`helm upgrade openfaas`命令开始部署OpenFaaS，并将在本地Minikube集群上开始部署OpenFaaS框架。这将根据网络速度需要5到15分钟。运行以下命令安装`OpenFaaS`：
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding command prints a lengthy output, and, at the bottom, it provides
    a command to verify the installation, as you can see in the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令会打印出一长串的输出，在底部提供了一个命令来验证安装，如下截图所示：
- en: '![Figure 9.9: OpenFaaS installation'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.9：OpenFaaS安装'
- en: '](image/C12607_09_09.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_09.jpg)'
- en: 'Figure 9.9: OpenFaaS installation'
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.9：OpenFaaS安装
- en: 'You can verify the deployment state from the following command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令验证部署状态：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output will be displayed as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示如下：
- en: '![Figure 9.10: Verifying the OpenFaaS installation'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.10：验证OpenFaaS安装'
- en: '](image/C12607_09_10.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_10.jpg)'
- en: 'Figure 9.10: Verifying the OpenFaaS installation'
  id: totrans-94
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.10：验证OpenFaaS安装
- en: 'Once the installation has been successfully completed and all services are
    running, we then have to log in to the OpenFaaS gateway with the credentials we
    created in the preceding steps. Run the following command to log in to the OpenFaas
    gateway:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功完成并且所有服务正在运行后，我们需要使用在前面步骤中创建的凭据登录到OpenFaaS网关。运行以下命令登录到OpenFaas网关：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output should be as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.11: Logging in to the OpenFaaS gateway'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.11：登录到OpenFaaS网关'
- en: '](image/C12607_09_11.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_11.jpg)'
- en: 'Figure 9.11: Logging in to the OpenFaaS gateway'
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.11：登录到OpenFaaS网关
- en: '**Setting the Environment Variables**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 设置环境变量
- en: There are several environment variables related to OpenFaaS, and we will set
    two environment variables in this section. These environment variables can be
    overridden using the command-line flags of `faas-cli`, if necessary.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中有几个与OpenFaaS相关的环境变量，我们将设置两个环境变量。如果需要，这些环境变量可以使用`faas-cli`的命令行标志进行覆盖。
- en: '`OPENFAAS_URL`: This should point to the API Gateway component.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPENFAAS_URL`：这应该指向API网关组件。'
- en: '`OPENFAAS_PREFIX`: This is the Docker ID of your Docker Hub account.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPENFAAS_PREFIX`：这是您的Docker Hub帐户的Docker ID。'
- en: 'Open the `~/.bashrc` file with your favorite text editor and add the following
    two lines at the end of the file. Replace `<your-docker-id>` with your Docker
    ID in the following commands:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 用您喜欢的文本编辑器打开`~/.bashrc`文件，并在文件末尾添加以下两行。在以下命令中用您的Docker ID替换`<your-docker-id>`：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, you need to source the `~/.bashrc` file to reload the newly configured
    environment variables, as shown in the following command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要源`~/.bashrc`文件以重新加载新配置的环境变量，如下命令所示：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The command should appear as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 命令应如下所示：
- en: '![Figure 9.12: Source the bashrc file'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.12：源bashrc文件'
- en: '](image/C12607_09_12.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_12.jpg)'
- en: 'Figure 9.12: Source the bashrc file'
  id: totrans-112
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.12：源bashrc文件
- en: OpenFaaS Functions
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenFaaS函数
- en: OpenFaaS functions can be written in any language supported by Linux or Windows,
    and they can then be converted to a serverless function using Docker containers.
    This is a major advantage of the OpenFaaS framework compared to other serverless
    frameworks that support only predefined languages and runtimes.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: OpenFaaS函数可以用Linux或Windows支持的任何语言编写，然后可以使用Docker容器将其转换为无服务器函数。这是OpenFaaS框架与其他仅支持预定义语言和运行时的无服务器框架相比的主要优势。
- en: OpenFaaS functions can be deployed with either `faas-cli` or the OpenFaaS portal.
    In the following sections, we are first going to discuss how we can build, deploy,
    list, invoke, and delete OpenFaaS functions using the `faas-cli` command-line
    tool. Then, we will discuss how to deploy and invoke functions with the OpenFaaS
    portal.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: OpenFaaS函数可以使用`faas-cli`或OpenFaaS门户部署。在接下来的几节中，我们首先将讨论如何使用`faas-cli`命令行工具构建、部署、列出、调用和删除OpenFaaS函数。然后，我们将讨论如何使用OpenFaaS门户部署和调用函数。
- en: Creating OpenFaaS Functions
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建OpenFaaS函数
- en: As we discussed previously, OpenFaaS functions can be written in any language
    supported by Linux and Windows. This requires us to create the function code,
    add any dependencies, and create a **Dockerfile** to build the Docker image. It
    requires a certain amount of understanding of the OpenFaaS platform in order to
    be able to perform the previously mentioned tasks. As a solution, OpenFaaS has
    a template store that includes prebuilt templates for a set of supported languages.
    This means that you can download these templates from the template store, update
    the function code, and then the CLI does the rest to build the Docker image.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，OpenFaaS函数可以用Linux和Windows支持的任何语言编写。这需要我们创建函数代码，添加任何依赖项，并创建一个**Dockerfile**来构建Docker镜像。这需要一定程度上对OpenFaaS平台的理解，以便能够执行前面提到的任务。作为解决方案，OpenFaaS有一个模板存储库，其中包括一组支持的语言的预构建模板。这意味着你可以从模板存储库下载这些模板，更新函数代码，然后CLI会完成其余的工作来构建Docker镜像。
- en: First of all, we need to pull the OpenFaaS templates with the `faas-cli template
    pull` command. This will fetch the templates from the official OpenFaaS template
    repository at [https://github.com/openfaas/templates.git](https://github.com/openfaas/templates.git).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要使用`faas-cli template pull`命令拉取OpenFaaS模板。这将从官方OpenFaaS模板存储库[https://github.com/openfaas/templates.git](https://github.com/openfaas/templates.git)获取模板。
- en: 'Now, let''s create a new folder and pull the templates to the newly created
    folder with the following commands:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令创建一个新文件夹，并将模板拉到新创建的文件夹中：
- en: '[PRE11]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output will be as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![](image/C12607_09_13.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](image/C12607_09_13.jpg)'
- en: 'Figure 9.13: Creating directories'
  id: totrans-123
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.13：创建目录
- en: 'Let''s check the folder structure with the `tree -L 2` command that will print
    the folder **tree** with two levels of depth, as you can see in the following
    screenshot:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`tree -L 2`命令来检查文件夹结构，该命令将打印出两层深度的文件夹**树**，如下截图所示：
- en: '![Figure 9.14: The tree view of the folder'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.14：文件夹的树形视图
- en: '](image/C12607_09_14.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_14.jpg)'
- en: 'Figure 9.14: The tree view of the folder'
  id: totrans-127
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.14：文件夹的树形视图
- en: Within the template folder, we can see 17 folders each for a specific language
    template.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板文件夹中，我们可以看到17个文件夹，每个文件夹都是针对特定语言模板的。
- en: 'Now, we can use the `faas-cli new` command to create the structure and files
    for a new function using the downloaded templates as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`faas-cli new`命令使用下载的模板创建新函数的结构和文件，如下所示：
- en: '[PRE12]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`<function-language>` can be replaced by any programming language supported
    by OpenFaaS templates. `faas-cli new --list` can be used to get a list of supported
    programming languages, as displayed in the following figure:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`<function-language>`可以被OpenFaaS模板支持的任何编程语言替换。`faas-cli new --list`可以用来获取支持的编程语言的列表，如下图所示：'
- en: '![Figure 9.15: Listing supported programming language templates'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.15：列出支持的编程语言模板
- en: '](image/C12607_09_15.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_15.jpg)'
- en: 'Figure 9.15: Listing supported programming language templates'
  id: totrans-134
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.15：列出支持的编程语言模板
- en: 'Let''s create our first OpenFaaS function named `hello` with the `go` language
    template using the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下命令创建我们的第一个OpenFaaS函数，名为`hello`，并使用`go`语言模板：
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output will be as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 9.16: Creating the hello function template'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.16：创建hello函数模板'
- en: '](image/C12607_09_16.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_16.jpg)'
- en: 'Figure 9.16: Creating the hello function template'
  id: totrans-140
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.16：创建hello函数模板
- en: 'As per the output, the preceding command will create multiple files and directories
    inside the current folder. Let''s execute the `tree -L 2` command again to identify
    the newly created files and directories:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 根据输出，上述命令将在当前文件夹内创建多个文件和目录。让我们再次执行`tree -L 2`命令，以识别新创建的文件和目录：
- en: '![Figure 9.17: The tree view of the folder'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.17：文件夹的树状视图'
- en: '](image/C12607_09_17.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_17.jpg)'
- en: 'Figure 9.17: The tree view of the folder'
  id: totrans-144
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.17：文件夹的树状视图
- en: We can see a file named `hello.yml`, a folder named `hello`, and a `handler.go`
    file inside the `hello` folder.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到一个名为`hello.yml`的文件，一个名为`hello`的文件夹，以及`hello`文件夹内的`handler.go`文件。
- en: 'First, we will look into the `hello.yml` file, which is called the **function**
    **definition** file:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将查看`hello.yml`文件，它被称为**函数** **定义**文件：
- en: '[PRE14]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This file has three top levels named `version`, `provider`, and `functions`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件有三个顶层，分别是`version`、`provider`和`functions`。
- en: 'Inside the `provider` section, there is a `name: faas` tag, which defines the
    provider name as `faas`. This is the default and only valid value for the name
    tag. The next one is the `gateway` tag, which points to the URL where the API
    Gateway is running. This value can be overridden at deployment time with the `--gateway`
    flag or the `OPENFAAS_URL` environment variable.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '在`provider`部分内，有一个`name: faas`标签，它将提供者名称定义为`faas`。这是`name`标签的默认且唯一有效的值。接下来是`gateway`标签，它指向API网关运行的URL。这个值可以在部署时用`--gateway`标志或`OPENFAAS_URL`环境变量进行覆盖。'
- en: 'Next is the `functions` section, which is used to define one or more functions
    to be deployed with the OpenFaaS CLI. In the preceding code, the `hello.yml` file
    has a single function named `hello` written in the Go language (`lang: go`). The
    handler of the function is defined with `handler: ./hello` section, which points
    to the folder where the source code of the `hello` function (`hello/handler.go`)
    resides. Finally, there is the `image` tag that specifies the name of the output
    Docker image. The Docker image name is prepended with your Docker image ID configured
    using the `OPENFAAS_PREFIX` environment variable.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来是`functions`部分，用于定义一个或多个要使用OpenFaaS CLI部署的函数。在前面的代码中，`hello.yml`文件有一个名为`hello`的函数，用Go语言（`lang:
    go`）编写。函数的处理程序是用`handler: ./hello`部分定义的，它指向`hello`函数的源代码（`hello/handler.go`）所在的文件夹。最后，有一个`image`标签，指定了输出Docker镜像的名称。Docker镜像名称以您使用`OPENFAAS_PREFIX`环境变量配置的Docker镜像ID为前缀。'
- en: 'Next, we will discuss the `handler.go` file that was created inside the `hello`
    folder. This file contains the source code of the function written in the Go language.
    This function accepts a string parameter and returns the string by prepending
    it with `Hello, Go. You said:`, as displayed in the following code snippet:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论在`hello`文件夹内创建的`handler.go`文件。这个文件包含用Go语言编写的函数的源代码。这个函数接受一个字符串参数，并通过在其前面加上`Hello,
    Go. You said:`来返回这个字符串，就像下面的代码片段中显示的那样：
- en: '[PRE15]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is just a sample function generated by the template. We can update it with
    our function logics.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个由模板生成的示例函数。我们可以用我们的函数逻辑来更新它。
- en: Building OpenFaaS Functions
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建OpenFaaS函数
- en: 'Once the function definition file (`hello.yml`) and function source code (`hello/handler.go`)
    are ready, the next step is to build the function as a Docker image. The `faas-cli
    build` CLI command is used to build the Docker image, which has the following
    format:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦函数定义文件（`hello.yml`）和函数源代码（`hello/handler.go`）准备好，下一步就是将函数构建为Docker镜像。使用`faas-cli
    build` CLI命令来构建Docker镜像，其格式如下：
- en: '[PRE16]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This initiates the process of building the Docker image and will invoke the
    `docker build` command internally. A new folder named `build` will be created
    during this step with all the files required for the build process.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动构建Docker镜像的过程，并将在内部调用`docker build`命令。在这一步中将创建一个名为`build`的新文件夹，其中包含构建过程所需的所有文件。
- en: 'Now, let''s build the `hello` function that we created in the previous section:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们构建在上一节中创建的`hello`函数：
- en: '[PRE17]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will receive an output similar to the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将收到类似以下的输出：
- en: '[PRE18]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once we receive the build success message, we can list the Docker image using
    the `docker images` command as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们收到构建成功的消息，我们可以使用`docker images`命令列出Docker镜像，如下所示：
- en: '[PRE19]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The output is as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 9.18: Verifying the Docker image'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.18：验证Docker镜像'
- en: '](image/C12607_09_18.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_18.jpg)'
- en: 'Figure 9.18: Verifying the Docker image'
  id: totrans-167
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.18：验证Docker镜像
- en: Pushing the OpenFaaS Function Image
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推送OpenFaaS函数镜像
- en: The next step of the process is to push the Docker image of the function to
    a Docker registry or to the Docker Hub. We can use either the `faas-cli push`
    or `docker push` commands to push the image.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程的下一步是将函数的Docker镜像推送到Docker注册表或Docker Hub。我们可以使用`faas-cli push`或`docker push`命令来推送镜像。
- en: Note
  id: totrans-170
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Docker Hub is a free service for storing and sharing Docker images.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub是一个免费的用于存储和共享Docker镜像的服务。
- en: 'Let''s push the image with the `faas-cli push` command:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`faas-cli push`命令推送镜像：
- en: '[PRE20]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output will be as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 9.19: Pushing the Docker image'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.19：推送Docker镜像'
- en: '](image/C12607_09_19.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_19.jpg)'
- en: 'Figure 9.19: Pushing the Docker image'
  id: totrans-177
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.19：推送Docker镜像
- en: We can verify that the image is pushed successfully by visiting the Docker Hub
    page at [https://hub.docker.com/](https://hub.docker.com/).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过访问Docker Hub页面[https://hub.docker.com/](https://hub.docker.com/)来验证镜像是否成功推送。
- en: 'The output should be as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.20: Verifying from Docker Hub'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.20：从Docker Hub验证'
- en: '](image/C12607_09_20.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_20.jpg)'
- en: 'Figure 9.20: Verifying from Docker Hub'
  id: totrans-182
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.20：从Docker Hub验证
- en: Thus, we have successfully pushed the Docker image function to Docker Hub.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已成功将Docker镜像功能推送到Docker Hub。
- en: Deploying the OpenFaaS Functions
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署OpenFaaS函数
- en: 'Now, we are ready to deploy the `hello` function into the OpenFaaS framework
    using the `faas-cli deploy` command. This command also requires the function specification
    file with the `-f` flag similar to other `faas-cli` commands that we executed
    previously:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备使用`faas-cli deploy`命令将`hello`函数部署到OpenFaaS框架中。该命令还需要使用`-f`标志的函数规范文件，类似于我们之前执行的其他`faas-cli`命令：
- en: '[PRE21]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The output should be as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.21: Deploying the hello function'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.21：部署hello函数'
- en: '](image/C12607_09_21.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_21.jpg)'
- en: 'Figure 9.21: Deploying the hello function'
  id: totrans-190
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.21：部署hello函数
- en: We will receive a **202 Accepted** output along with the function URL, which
    we can use to invoke the function.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将收到一个**202 Accepted**的输出，以及函数URL，我们可以用它来调用函数。
- en: 'At this step, there will be a number of Kubernetes objects, including pods,
    services, deployments, and replica sets created in the `openfaas-fn` namespace.
    We can view all these Kubernetes objects with the following command:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步，将在`openfaas-fn`命名空间中创建一些Kubernetes对象，包括pod、service、deployment和replica set。我们可以使用以下命令查看所有这些Kubernetes对象：
- en: '[PRE22]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output should be as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.22: Verifying the Kubernetes objects'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.22：验证Kubernetes对象'
- en: '](image/C12607_09_22.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_22.jpg)'
- en: 'Figure 9.22: Verifying the Kubernetes objects'
  id: totrans-197
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.22：验证Kubernetes对象
- en: Hence, we have successfully deployed the `hello` function to the OpenFaaS framework.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已成功将`hello`函数部署到OpenFaaS框架中。
- en: Listing the OpenFaaS Functions
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列出OpenFaaS函数
- en: 'The `faas-cli list` command is used to list all the functions deployed on the
    OpenFaaS framework:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`faas-cli list`命令用于列出部署在OpenFaaS框架上的所有函数：'
- en: '[PRE23]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The output should be as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.23: Listing the OpenFaaS functions'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.23：列出OpenFaaS函数'
- en: '](image/C12607_09_23.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_23.jpg)'
- en: 'Figure 9.23: Listing the OpenFaaS functions'
  id: totrans-205
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.23：列出OpenFaaS函数
- en: 'The output of the `faas-cli list` command will include the following columns:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`faas-cli list`命令的输出将包括以下列：'
- en: '**Function** – The name of the function'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数** - 函数的名称'
- en: '**Invocations** – The number of times the function has been invoked'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调用** - 函数被调用的次数'
- en: '**Replicas** – The number of Kubernetes pod replicas of the function'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**副本** - 函数的Kubernetes pod副本数'
- en: The value of the **Invocations** column will increase each time we invoke the
    function. The value of the **Replicas** column will increase automatically if
    the invocation rate increases.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**调用**列的值每次调用函数时都会增加。如果调用率增加，**副本**列的值将自动增加。'
- en: 'The `--verbose` flag can be used with `faas-cli list` if you want to get an
    additional column named **Image**, which lists the Docker image used to deploy
    the function, as shown in the following command:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要获取额外的列名为**Image**的附加列，可以在`faas-cli list`命令中使用`--verbose`标志，该列会列出用于部署函数的Docker镜像，如下命令所示：
- en: '[PRE24]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output should be as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 9.24: Listing the OpenFaaS functions with the verbose output'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.24：列出OpenFaaS函数并显示详细输出'
- en: '](image/C12607_09_24.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_24.jpg)'
- en: 'Figure 9.24: Listing the OpenFaaS functions with the verbose output'
  id: totrans-216
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.24：列出OpenFaaS函数并显示详细输出
- en: 'If we want to get details about a specific function, we can use the `faas-cli
    describe` CLI command:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要获取关于特定函数的详细信息，可以使用`faas-cli describe` CLI命令：
- en: '[PRE25]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output should be as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 9.25: Describing an OpenFaaS function'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.25：描述一个OpenFaaS函数'
- en: '](image/C12607_09_25.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_25.jpg)'
- en: 'Figure 9.25: Describing an OpenFaaS function'
  id: totrans-222
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.25：描述一个OpenFaaS函数
- en: Invoking OpenFaaS Functions
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用OpenFaaS函数
- en: 'Now, the function is deployed and ready to be invoked. A function can be invoked
    with the `faas-cli invoke` command, which has the following format:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，函数已部署并准备好被调用。函数可以通过`faas-cli invoke`命令来调用，格式如下：
- en: '[PRE26]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now, let's invoke the `hello` function we deployed in the previous step.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们调用在上一步中部署的`hello`函数。
- en: 'Run the following command to invoke the `hello` function:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令来调用`hello`函数：
- en: '[PRE27]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Once the function is invoked, it will ask you to enter the input parameters
    and press *Ctrl + D* to stop reading from the standard input. The output should
    be as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦函数被调用，它将要求您输入输入参数并按*Ctrl + D*停止从标准输入读取。输出应该如下所示：
- en: '![Figure 9.26: Invoking the hello function'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.26：调用hello函数'
- en: '](image/C12607_09_26.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_26.jpg)'
- en: 'Figure 9.26: Invoking the hello function'
  id: totrans-232
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.26：调用hello函数
- en: 'We can also send the input data to the function, as shown in the following
    command:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以将输入数据发送到函数中，如下命令所示：
- en: '[PRE28]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output should be as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 9.27:  Invoking the hello function with piping the input'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.27：使用管道输入调用hello函数'
- en: '](image/C12607_09_27.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_27.jpg)'
- en: 'Figure 9.27: Invoking the hello function with piping the input'
  id: totrans-238
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.27：使用管道输入调用hello函数
- en: 'The `curl` command can also be used to invoke the functions, as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl`命令也可以用来调用函数，如下所示：'
- en: '[PRE29]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The output should be as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![ Figure 9.28: Invoking the hello function with curl'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.28：使用curl调用hello函数'
- en: '](image/C12607_09_28.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_28.jpg)'
- en: 'Figure 9.28: Invoking the hello function with curl'
  id: totrans-244
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.28：使用curl调用hello函数
- en: Hence, we have successfully invoked the `hello` function using both the `faas-cli
    invoke` command and the `curl` command.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已成功使用`faas-cli invoke`命令和`curl`命令调用了`hello`函数。
- en: Deleting OpenFaaS Functions
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除OpenFaaS函数
- en: 'The `faas-cli remove` command is used to delete a function from the OpenFaaS
    cluster either by specifying the function definition file with the `-f` flag,
    or by explicitly specifying the function name, as shown in the following command:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`faas-cli remove`命令用于从OpenFaaS集群中删除函数，可以通过使用`-f`标志指定函数定义文件，或者显式指定函数名称，如下命令所示：'
- en: '[PRE30]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Or, alternatively, with the following command:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，使用以下命令：
- en: '[PRE31]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can remove the `hello` function we created earlier with the following command:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令删除我们之前创建的`hello`函数：
- en: '[PRE32]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output should be as follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.29: Deleting the hello function'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.29：删除hello函数'
- en: '](image/C12607_09_29.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_29.jpg)'
- en: 'Figure 9.29: Deleting the hello function'
  id: totrans-256
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.29：删除hello函数
- en: In these sections, we learned to create, deploy, list, invoke, and delete OpenFaaS
    functions using the `faas-cli` command line. Now, let's move on to an exercise
    where we will be creating our first OpenFaaS function.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些部分中，我们学习了如何使用`faas-cli`命令行创建、部署、列出、调用和删除OpenFaaS函数。现在，让我们继续进行一个练习，我们将创建我们的第一个OpenFaaS函数。
- en: 'Exercise 30: Creating an OpenFaaS Function with Dependencies'
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习30：创建具有依赖关系的OpenFaaS函数
- en: 'In this exercise, we are going to create a Python function that can print the
    source IP address by invoking an external API. We will be using the `requests`
    Python module to invoke this API:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个Python函数，通过调用外部API来打印源IP地址。我们将使用`requests` Python模块来调用这个API：
- en: 'Create a new function named `ip-info` using the **Python3** template:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**Python3**模板创建一个名为`ip-info`的新函数：
- en: '[PRE33]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The output should be as follows:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![ Figure 9.30: Creating the ip-info function template'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.30：创建ip-info函数模板
- en: '](image/C12607_09_30.jpg)'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_30.jpg)'
- en: 'Figure 9.30: Creating the ip-info function template'
  id: totrans-265
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.30：创建ip-info函数模板
- en: 'Update the `ip-info/requirements.txt` file to add the `requests` `pip` module,
    which we need to invoke HTTP requests from our function:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`ip-info/requirements.txt`文件，添加我们需要从函数中调用HTTP请求的`requests` `pip`模块：
- en: '[PRE34]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Update the `ip-info/handler.py` file to invoke the [https://httpbin.org/ip](https://httpbin.org/ip)
    endpoint. This endpoint is a simple service that will return the IP of the originating
    request. The following code will send an HTTP GET request to the [https://httpbin.org/ip](https://httpbin.org/ip)
    endpoint and return the origin IP address:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`ip-info/handler.py`文件以调用[https://httpbin.org/ip](https://httpbin.org/ip)端点。这个端点是一个简单的服务，将返回发起请求的IP。以下代码将向[https://httpbin.org/ip](https://httpbin.org/ip)端点发送HTTP
    GET请求，并返回原始IP地址：
- en: '[PRE35]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Build, push, and deploy the `ip-info` function with the `faas-cli up` command.
    The `faas-cli up` command will execute the `faas-cli build`, `faas-cli push`,
    and `faas-cli deploy` commands in the background to build the function, push the
    Docker images to the Docker registry, and deploy the function on the OpenFaaS
    framework:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`faas-cli up`命令构建、推送和部署`ip-info`函数。`faas-cli up`命令将在后台执行`faas-cli build`、`faas-cli
    push`和`faas-cli deploy`命令，构建函数，将Docker镜像推送到Docker注册表，并在OpenFaaS框架上部署函数：
- en: '[PRE36]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `faas-cli up` command will print the following output, which lists the
    steps of building, pushing, and deploying the `ip-info` function:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`faas-cli up`命令将打印以下输出，列出构建、推送和部署`ip-info`函数的步骤：'
- en: '[PRE37]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Invoke the `ip-info` function using the `curl` command as follows:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下`curl`命令调用`ip-info`函数：
- en: '[PRE38]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The output should be as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![ Figure 9.31: Invoking the ip-info function template'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.31：调用ip-info函数模板'
- en: '](image/C12607_09_31.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_31.jpg)'
- en: 'Figure 9.31: Invoking the ip-info function template'
  id: totrans-279
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.31：调用ip-info函数模板
- en: 'Finally, remove the `ip-info` function:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，删除`ip-info`函数：
- en: '[PRE39]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Thus, we have created, deployed, and invoked an OpenFaaS function named `ip-info`,
    which will print the source IP address of the function invoker.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经创建、部署和调用了一个名为`ip-info`的OpenFaaS函数，它将打印函数调用者的源IP地址。
- en: Deploying and Invoking Functions with OpenFaaS Portal
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用OpenFaaS Portal部署和调用函数
- en: The OpenFaaS framework comes with a built-in UI that allows us to deploy and
    invoke functions from the web browser. It can be used to either deploy a custom
    function or a function from the function store. The OpenFaaS function store is
    a freely available set of prebuilt functions. These functions can be deployed
    easily on our existing OpenFaaS cluster.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: OpenFaaS框架配备了一个内置的UI，允许我们从Web浏览器部署和调用功能。它可以用于部署自定义功能或功能存储库中的功能。OpenFaaS功能存储库是一组免费提供的预构建功能。这些功能可以轻松部署到我们现有的OpenFaaS集群上。
- en: 'The format of the OpenFaaS portal URL is `http://<openfaas-gateway-endpoint>/ui`.
    Let''s use the following command to derive the OpenFaaS portal URL from the `$OPENFAAS_URL`
    environment variable that we set up previously:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: OpenFaaS门户网址的格式是`http://<openfaas-gateway-endpoint>/ui`。让我们使用以下命令从我们之前设置的`$OPENFAAS_URL`环境变量中获取OpenFaaS门户网址：
- en: '[PRE40]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The output should be as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 9.32: Generating the OpenFaaS portal URL'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.32：生成OpenFaaS门户网址'
- en: '](image/C12607_09_32.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_32.jpg)'
- en: 'Figure 9.32: Generating the OpenFaaS portal URL'
  id: totrans-290
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.32：生成OpenFaaS门户网址
- en: Let's navigate to the output URL of `http://192.168.99.100:31112/ui/`.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导航到`http://192.168.99.100:31112/ui/`的输出网址。
- en: 'You should be able to see a portal similar to the following, which we will
    use in the following steps to deploy and invoke OpenFaaS functions:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够看到类似以下的门户网址，我们将在接下来的步骤中使用它来部署和调用OpenFaaS功能：
- en: '![](image/C12607_09_33.jpg)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](image/C12607_09_33.jpg)'
- en: 'Figure 9.33: Navigating to the OpenFaaS portal URL'
  id: totrans-294
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.33：导航到OpenFaaS门户网址
- en: '**Deploying a Function from the Function Store**'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 部署功能从功能存储
- en: 'In this section, we will learn how to deploy a function from the function store.
    First, click on the **Deploy New Function** button in the OpenFaaS portal. This
    will prompt you with a dialog box that lists all the functions available in the
    function store. In this section, we are going to deploy the **Figlet** function,
    which can generate ASCII logos from the string input provided. Select **Figlet**
    from the function list and click on the **DEPLOY** button, as shown in the following
    figure:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何从功能存储库部署功能。首先，在OpenFaaS门户网站中点击**部署新功能**按钮。这将提示您显示一个对话框，其中列出了功能存储库中所有可用的功能。在本节中，我们将部署**Figlet**功能，它可以从提供的字符串输入生成ASCII标志。从功能列表中选择**Figlet**，然后点击**部署**按钮，如下图所示：
- en: '![](image/C12607_09_34.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](image/C12607_09_34.jpg)'
- en: 'Figure 9.34: Deploying the figlet function'
  id: totrans-298
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.34：部署figlet功能
- en: 'That''s all you need to do! This will deploy the **Figlet** function into our
    existing OpenFaaS cluster. Now, you will be able to see a new function named **figlet**
    in the left-hand sidebar of the OpenFaaS portal, as shown in the following figure:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您需要做的全部！这将在我们现有的OpenFaaS集群中部署**Figlet**功能。现在，您将能够在OpenFaaS门户网站的左侧边栏中看到一个名为**figlet**的新功能，如下图所示：
- en: '![Figure 9.35: Verifying the figlet function'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.35：验证figlet功能'
- en: '](image/C12607_09_35.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_35.jpg)'
- en: 'Figure 9.35: Verifying the figlet function'
  id: totrans-302
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.35：验证figlet功能
- en: 'Let''s invoke the function from the OpenFaaS portal. You need to click on the
    function name, and then the right-hand panel of the screen will display information
    about the function, including the function status, invocation count, replica count,
    function image, and the function URL:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从OpenFaaS门户网站调用功能。您需要点击功能名称，然后屏幕的右侧面板将显示有关功能的信息，包括功能状态、调用计数、副本计数、功能图像和功能网址：
- en: '![Figure 9.36: Figlet function description'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.36：Figlet功能描述'
- en: '](image/C12607_09_36.jpg)'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_36.jpg)'
- en: 'Figure 9.36: Figlet function description'
  id: totrans-306
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.36：Figlet功能描述
- en: We can invoke this function by clicking on the **INVOKE** button available under
    the **Invoke function** section. If the function requires an input value, you
    can provide it under the **Request Body** section before invoking the function.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过单击**调用**按钮来调用此函数，该按钮位于**调用函数**部分下方。如果函数需要输入值，您可以在调用函数之前在**请求体**部分提供输入值。
- en: 'Let''s invoke the **figlet** function by providing the **OpenFaaS** string
    as the request body, as shown in the following figure:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过提供**OpenFaaS**字符串作为请求体来调用**figlet**函数，如下图所示：
- en: '![Figure 9.37: Invoking the figlet function'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.37：调用figlet函数'
- en: '](image/C12607_09_37.jpg)'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_37.jpg)'
- en: 'Figure 9.37: Invoking the figlet function'
  id: totrans-311
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.37：调用figlet函数
- en: Now, you can see the expected output of the function. This will be the ASCII
    logo for the input value we provided when invoking the function. Additionally,
    the UI will provide you with the response status code and the execution duration
    for the function invocation.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以看到函数的预期输出。这将是我们在调用函数时提供的输入值的ASCII标志。此外，UI将为您提供函数调用的响应状态代码和执行持续时间。
- en: '**Deploying a Custom Function**'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '**部署自定义函数**'
- en: Now, let's deploy a custom function named `hello` using the Docker image that
    we built previously. Before deploying the functions from the OpenFaaS portal,
    we should have our functions written, and the Docker images built and pushed using
    the `faas-cli` command.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用我们之前构建的Docker镜像部署一个名为`hello`的自定义函数。在从OpenFaaS门户部署函数之前，我们应该编写我们的函数，并使用`faas-cli`命令构建和推送Docker镜像。
- en: 'Click on the **Deploy New Function** button again, and, this time, select the
    **CUSTOM** tab from the dialog box. Now, we need to provide the Docker image name
    and function name as mandatory fields. Let''s provide the `hello` Docker image
    we built previously `(<your-docker-id>/hello`) and provide `hello-portal` as the
    function name and click on the **DEPLOY** button:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 再次单击**部署新函数**按钮，然后从对话框中选择**CUSTOM**选项卡。现在，我们需要提供Docker镜像名称和函数名称作为必填字段。让我们提供我们之前构建的`hello`
    Docker镜像（<your-docker-id>/hello）并提供`hello-portal`作为函数名称，然后单击**DEPLOY**按钮：
- en: '![Figure 9.38: Deploying the hello-portal function'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.38：部署hello-portal函数'
- en: '](image/C12607_09_38.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_38.jpg)'
- en: 'Figure 9.38: Deploying the hello-portal function'
  id: totrans-318
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.38：部署hello-portal函数
- en: 'Then, you will see the **hello-portal** function added to the left-side menu
    of the OpenFaaS portal:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您将看到**hello-portal**函数添加到OpenFaaS门户的左侧菜单中：
- en: '![Figure 9.39: Verifying the hello-portal function'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.39：验证hello-portal函数'
- en: '](image/C12607_09_39.jpg)'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_39.jpg)'
- en: 'Figure 9.39: Verifying the hello-portal function'
  id: totrans-322
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.39：验证hello-portal函数
- en: Now, you can follow similar steps to the ones that we discussed previously to
    invoke the `hello-portal` function.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以按照我们之前讨论的类似步骤来调用`hello-portal`函数。
- en: OpenFaaS Functions with HTML Output
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 具有HTML输出的OpenFaaS函数
- en: In this section, we are going to set up an OpenFaaS function to return HTML
    content. This allows us to create both static and dynamic websites using the OpenFaaS
    framework.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将设置一个OpenFaaS函数来返回HTML内容。这使我们能够使用OpenFaaS框架创建静态和动态网站。
- en: 'First, we will create the `html-output` function using the **php7** template,
    as shown in the following command:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用**php7**模板创建`html-output`函数，如下命令所示：
- en: '[PRE41]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The output should be as follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 9.40: Creating the html-output function'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.40：创建html-output函数'
- en: '](image/C12607_09_40.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_40.jpg)'
- en: 'Figure 9.40: Creating the html-output function'
  id: totrans-331
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.40：创建html-output函数
- en: 'Then, we will update the generated `Handler.php` file to return a hardcoded
    HTML string using the following command:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将更新生成的`Handler.php`文件，以使用以下命令返回硬编码的HTML字符串：
- en: 'Open the `html-output/src/Handler.php` file using your favorite text editor.
    The following command will open this file with the `vi` editor:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您喜欢的文本编辑器打开`html-output/src/Handler.php`文件。以下命令将使用`vi`编辑器打开此文件：
- en: '[PRE42]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Add the following content to the file. This is a simple PHP code that will
    return the text, `OpenFaaS HTML Output`, formatted as HTML header text:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到文件中。这是一个简单的PHP代码，将返回文本`OpenFaaS HTML Output`，格式化为HTML标题文本：
- en: '[PRE43]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Now, the PHP function is ready with the HTML output. The next step is to configure
    `Content-Type` of the function as `text/html`. This can be done by updating the
    `environment` section of the function definition file. Let''s update the `html-output.yml`
    file with `content_type: text/html` inside the environment section, as shown in
    the following code:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，PHP函数已经准备好输出HTML。下一步是将函数的`Content-Type`配置为`text/html`。这可以通过更新函数定义文件的`environment`部分来完成。让我们在`html-output.yml`文件中更新`environment`部分，添加`content_type:
    text/html`，如下所示：'
- en: '[PRE44]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, let''s build, push, and deploy the `html-output` function with the `faas-cli
    up` command:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`faas-cli up`命令构建、推送和部署`html-output`函数：
- en: '[PRE45]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Once the preceding command is executed, we will receive an output similar to
    the following:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令后，我们将收到类似以下的输出：
- en: '[PRE46]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The function has now been deployed successfully. Now, we can visit the function
    URL at http://192.168.99.100:31112/function/html-output from a web browser to
    view the output, as shown in the following figure:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 函数现在已经成功部署。现在，我们可以从Web浏览器访问函数URL，网址为http://192.168.99.100:31112/function/html-output，以查看输出，如下图所示：
- en: '![Figure 9.41: Invoking the html-output function'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.41：调用html-output函数'
- en: '](image/C12607_09_41.jpg)'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_41.jpg)'
- en: 'Figure 9.41: Invoking the html-output function'
  id: totrans-346
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.41：调用html-output函数
- en: 'Exercise 31: Returning HTML Based on Path Parameters'
  id: totrans-347
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习31：基于路径参数返回HTML
- en: 'In this exercise, we will create a function that can return one of the two
    static HTML files based on the path parameters of the function URL:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建一个函数，根据函数URL的路径参数之一返回两个静态HTML文件：
- en: 'Create a new function named `serverless-website` based on the `php7` template:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`serverless-website`的新函数，基于`php7`模板：
- en: '[PRE47]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The output should be as follows:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 9.42: Creating the serverless-website function'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.42：创建serverless-website函数'
- en: '](image/C12607_09_42.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_42.jpg)'
- en: 'Figure 9.42: Creating the serverless-website function'
  id: totrans-354
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.42：创建serverless-website函数
- en: 'Create the HTML folder inside `serverless-website` to store all the HTML files:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`serverless-website`内创建HTML文件夹，用于存储所有HTML文件：
- en: '[PRE48]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Create the first HTML file for the home page (`serverless-website/src/html/home.html`)
    with the following code. This HTML page will output the text, `Welcome to OpenFaaS
    Home Page`, as the page header, and `OpenFaaS Home` as the page title:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建主页的第一个HTML文件（`serverless-website/src/html/home.html`），包含以下代码。这个HTML页面将输出文本`Welcome
    to OpenFaaS Home Page`作为页面标题，以及`OpenFaaS Home`作为页面标题：
- en: '[PRE49]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Create the second HTML file for the login page (`serverless-website/src/html/login.html`).
    This HTML page will output a simple login form with two fields for `username`
    and `password` and a **Login** button to submit the form:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为登录页面创建第二个HTML文件（`serverless-website/src/html/login.html`）。这个HTML页面将输出一个简单的登录表单，包括`用户名`和`密码`两个字段，以及一个**登录**按钮用于提交表单：
- en: '[PRE50]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Update the handler file (`serverless-website/src/Handler.php`) to return the
    appropriate HTML file based on the path parameters of the function URL with the
    following code. This function will receive either **home** or **login** as the
    path parameter while invoking. It will then read the path parameter and set the
    HTML page name accordingly based on the path parameter provided. The next step
    is to open the HTML file, read the content of the file, and finally return the
    content of the file as the function response:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新处理程序文件（`serverless-website/src/Handler.php`），根据函数URL的路径参数返回相应的HTML文件，使用以下代码。该函数将接收**home**或**login**作为路径参数进行调用。然后读取路径参数，并根据提供的路径参数相应地设置HTML页面名称。下一步是打开HTML文件，读取文件内容，最后将文件内容作为函数响应返回：
- en: '[PRE51]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Set `content_type` as `text/html` in `serverless-website.yml`:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`serverless-website.yml`中将`content_type`设置为`text/html`：
- en: '[PRE52]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Build, push, and deploy the `serverless-website` function using the following
    command:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令构建、推送和部署`serverless-website`函数：
- en: '[PRE53]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The following is the output of the preceding command:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述命令的输出：
- en: '[PRE54]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Verify by invoking both the home page and login page on the following URLs:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下URL验证调用主页和登录页面：
- en: '`http://192.168.99.100:31112/function/serverless-website/home`'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://192.168.99.100:31112/function/serverless-website/home`'
- en: 'The home page should appear as follows:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 主页应如下所示：
- en: '![Figure 9.43: Invoking the home page of the serverless website function'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.43：调用无服务器网站功能的主页'
- en: '](image/C12607_09_43.jpg)'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_43.jpg)'
- en: 'Figure 9.43: Invoking the home page of the serverless website function'
  id: totrans-374
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.43：调用无服务器网站功能的主页
- en: 'Next, run the following URL: `http://192.168.99.100:31112/function/serverless-website/login`.'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行以下URL：`http://192.168.99.100:31112/function/serverless-website/login`。
- en: 'The login page should look as follows:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 登录页面应如下所示：
- en: '![Figure 9.44: Invoking the login page of the serverless website function'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.44：调用无服务器网站功能的登录页面'
- en: '](image/C12607_09_44.jpg)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_44.jpg)'
- en: 'Figure 9.44: Invoking the login page of the serverless website function'
  id: totrans-379
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.44：调用无服务器网站功能的登录页面
- en: Thus, we have successfully parsed HTML based on the path parameters.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已成功根据路径参数解析了HTML。
- en: OpenFaaS Function Observability
  id: totrans-381
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenFaaS函数可观测性
- en: Observability is a critical feature of every production system. This allows
    us to observe the health of the system and activities performed thereon. Once
    our applications are deployed and running in production, we need to make sure
    they are running as expected in terms of functionality and performance. Any service
    downtime can have a negative impact on the organization. So, it is very critical
    to observe the important application metrics, such as CPU usage, memory usage,
    request count, response duration over time, and then analyze for any anomalies.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 可观测性是每个生产系统的关键特性。这使我们能够观察系统的健康状况和执行的活动。一旦我们的应用程序部署并在生产环境中运行，我们需要确保它们在功能和性能方面按预期运行。任何服务停机都可能对组织产生负面影响。因此，非常重要观察重要的应用程序指标，如CPU使用率、内存使用率、请求计数、响应持续时间等，然后分析是否存在异常。
- en: 'OpenFaaS comes built-in with **Prometheus**, which can be used to collect function
    metrics. Prometheus contains a time series database, which can be used to store
    various metrics over time. The OpenFaaS API gateway collects metrics related to
    the function invocation and stores them in Prometheus. The following table shows
    the metrics exposed by the OpenFaaS API Gateway and stored with Prometheus:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: OpenFaaS内置了**Prometheus**，可用于收集函数指标。Prometheus包含时间序列数据库，可用于随时间存储各种指标。OpenFaaS
    API网关收集与函数调用相关的指标，并将其存储在Prometheus中。以下表显示了OpenFaaS API网关公开的指标，并存储在Prometheus中：
- en: '![Figure 9.45: Function metrics with descriptions'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.45：带有描述的函数指标'
- en: '](image/C12607_09_45.jpg)'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_45.jpg)'
- en: 'Figure 9.45: Function metrics with descriptions'
  id: totrans-386
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.45：带有描述的函数指标
- en: We can use the **Prometheus** dashboard to visualize these metrics.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用**Prometheus**仪表板来可视化这些指标。
- en: 'First, we need to expose the **Prometheus** deployment created during the installation.
    Execute the following command to expose Prometheus as a `NodePort` service:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要暴露安装过程中创建的**Prometheus**部署。执行以下命令将Prometheus暴露为`NodePort`服务：
- en: '[PRE55]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'This will expose the Prometheus deployment on a random port above **30,000**.
    Execute the following commands to get the URL of the **Prometheus** UI:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在**30,000**以上的随机端口上暴露Prometheus部署。执行以下命令以获取**Prometheus** UI的URL：
- en: '[PRE56]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The output should be as follows:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.46: Generating the Prometheus URL'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.46：生成Prometheus URL'
- en: '](image/C12607_09_46.jpg)'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_46.jpg)'
- en: 'Figure 9.46: Generating the Prometheus URL'
  id: totrans-395
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.46：生成Prometheus URL
- en: For me, the `PROMETHEUS_URL` output value is http://192.168.99.100:30479/graph.
    But the `<minikube-ip>` and `<node-port>` values may be different.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，`PROMETHEUS_URL`输出值为http://192.168.99.100:30479/graph。但是`<minikube-ip>`和`<node-port>`的值可能不同。
- en: 'We can view the metrics exposed by Prometheus using the UI, as shown in the
    following figure:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用UI查看Prometheus公开的指标，如下图所示：
- en: '![Figure 9.47: Prometheus UI'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.47：Prometheus UI'
- en: '](image/C12607_09_47.jpg)'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_47.jpg)'
- en: 'Figure 9.47: Prometheus UI'
  id: totrans-400
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.47：Prometheus UI
- en: 'Type `gateway_function_invocation_total` in the **Expression** area and click
    on the **Execute** button. This will list the results under the **Console** tab.
    We can click on the **Graph** tab as we need to view the function invocation count
    in a line graph. Click on the **Add Graph** button available in the lower-left
    corner if you want to add this graph permanently to the Prometheus dashboard,
    as shown in the following figure:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Expression**区域中键入`gateway_function_invocation_total`，然后单击**Execute**按钮。这将在**Console**选项卡下列出结果。如果需要在线图中查看函数调用次数，请单击**Graph**选项卡。如果要将此图永久添加到Prometheus仪表板中，请单击左下角的**Add
    Graph**按钮，如下图所示：
- en: '![](image/C12607_09_48.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![](image/C12607_09_48.jpg)'
- en: 'Figure 9.48: Prometheus graph for the gateway_function_invocation_total metric'
  id: totrans-403
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.48：gateway_function_invocation_total指标的Prometheus图
- en: Note
  id: totrans-404
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Invoke the available functions multiple times so that we can view the statistics
    of these invocations from the Prometheus dashboard.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 多次调用可用函数，以便我们可以从Prometheus仪表板中查看这些调用的统计信息。
- en: In addition to the Prometheus dashboards that we discussed, we can also use
    **Grafana** to visualize the metrics stored in Prometheus. **Grafana** is an open
    source tool used to analyze and visualize metrics over a period of time. It can
    be integrated with multiple data sources such as **Prometheus**, **ElasticSearch**,
    **Influx DB**, or **MySQL**. In the next exercise, we are going to learn how to
    set up Grafana with OpenFaaS and create dashboards to monitor the metrics stored
    in the Prometheus data source.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 除了我们讨论过的Prometheus仪表板之外，我们还可以使用**Grafana**来可视化存储在Prometheus中的指标。**Grafana**是一个开源工具，用于分析和可视化一段时间内的指标。它可以与多个数据源集成，如**Prometheus**、**ElasticSearch**、**Influx
    DB**或**MySQL**。在下一个练习中，我们将学习如何使用OpenFaaS设置Grafana并创建仪表板，以监视存储在Prometheus数据源中的指标。
- en: 'Exercise 32: Installing an OpenFaaS Grafana Dashboard'
  id: totrans-407
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习32：安装OpenFaaS Grafana仪表板
- en: 'In this exercise, we are going to install a Grafana dashboard to view the metrics
    from the **Prometheus** data source. Then, we will import another OpenFaaS dashboard
    into Grafana:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将安装一个Grafana仪表板，以查看来自**Prometheus**数据源的指标。然后，我们将在Grafana中导入另一个OpenFaaS仪表板：
- en: 'Create the `grafana` deployment in the `openfaas` namespace using the `stefanprodan/faas-grafana:4.6.3`
    Docker image:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`stefanprodan/faas-grafana:4.6.3` Docker镜像在`openfaas`命名空间中创建`grafana`部署：
- en: '[PRE57]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The output should be as follows:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.49: Creating the Grafana deployment'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.49：创建Grafana部署'
- en: '](image/C12607_09_49.jpg)'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_49.jpg)'
- en: 'Figure 9.49: Creating the Grafana deployment'
  id: totrans-414
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.49：创建Grafana部署
- en: 'Expose the `grafana` deployment using the `NodePort` service:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`NodePort`服务暴露`grafana`部署：
- en: '[PRE58]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The output should be as follows:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![Figure 9.50: Exposing the grafana port'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.50：暴露grafana端口'
- en: '](image/C12607_09_50.jpg)'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_50.jpg)'
- en: 'Figure 9.50: Exposing the grafana port'
  id: totrans-420
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.50：暴露grafana端口
- en: 'Find the URL of the `grafana` dashboard using the following commands:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令找到`grafana`仪表板的URL：
- en: '[PRE59]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The output should be as follows:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![](image/C12607_09_51.jpg)'
  id: totrans-424
  prefs: []
  type: TYPE_IMG
  zh: '![](image/C12607_09_51.jpg)'
- en: 'Figure 9.51: Generating the grafana URL'
  id: totrans-425
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.51：生成grafana URL
- en: Navigate to the `grafana` URL using the URL printed in the previous step:![](image/C12607_09_52.jpg)
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用上一步中打印的URL导航到`grafana` URL：![](image/C12607_09_52.jpg)
- en: 'Figure 9.52: Grafana UI'
  id: totrans-427
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.52：Grafana UI
- en: Log in to **Grafana** using the default credentials (the username is `admin`
    and the
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用默认凭据（用户名为`admin`，密码为`admin`）登录**Grafana**。
- en: 'password is `admin`). The output should be as follows:![Figure 9.53: Grafana
    dashboards'
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 密码是`admin`）。输出应如下所示：![图9.53：Grafana仪表板
- en: '](image/C12607_09_53.jpg)'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_53.jpg)'
- en: 'Figure 9.53: Grafana dashboards'
  id: totrans-431
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.53：Grafana仪表板
- en: 'From the **Grafana menu ()** in the top-left corner, as highlighted in *Figure
    9.53*, select **Dashboards** > **Import**. Provide the ID of **3434** in the **Grafana.com
    Dashboard** input box and wait for a few seconds to load the dashboard data:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 从左上角的**Grafana菜单（）**中，如*图9.53*中所示，选择**仪表板** > **导入**。在**Grafana.com仪表板**输入框中提供ID
    **3434**，然后等待几秒钟以加载仪表板数据：
- en: '![Figure 9.54: Importing the new dashboard'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.54：导入新仪表板'
- en: '](image/C12607_09_54.jpg)'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_54.jpg)'
- en: 'Figure 9.54: Importing the new dashboard'
  id: totrans-435
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.54：导入新仪表板
- en: 'From this screen, select **faas** as the Prometheus data source and click on
    **Import**, as shown in the following figure:![Figure 9.55: Importing the new
    dashboard'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从此屏幕中，选择**faas**作为Prometheus数据源，然后单击**导入**，如下图所示：![图9.55：导入新仪表板
- en: '](image/C12607_09_55.jpg)'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_55.jpg)'
- en: 'Figure 9.55: Importing the new dashboard'
  id: totrans-438
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.55：导入新仪表板
- en: 'Now you can see the metrics in the new dashboard:'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以在新仪表板中看到指标：
- en: '![Figure 9.56: OpenFaaS serverless Grafana dashboard'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.56：OpenFaaS无服务器Grafana仪表板'
- en: '](image/C12607_09_56.jpg)'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_56.jpg)'
- en: 'Figure 9.56: OpenFaaS serverless Grafana dashboard'
  id: totrans-442
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.56：OpenFaaS无服务器Grafana仪表板
- en: Thus, we have successfully set up Grafana dashboards to visualize the metrics
    stored in Prometheus.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已成功设置了Grafana仪表板，以可视化存储在Prometheus中的指标。
- en: OpenFaaS Function Autoscaling
  id: totrans-444
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenFaaS函数自动缩放
- en: Autoscaling is a feature available in OpenFaaS that scales up or scales down
    function replicas based on demand. This feature was built using both **Prometheus**
    and the **Alert** **Manager** components available with the OpenFaaS framework.
    Alert Manager will fire alerts when the function invocation frequency exceeds
    the defined threshold.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 自动缩放是OpenFaaS中可用的一个功能，它根据需求扩展或缩小函数副本。该功能是使用OpenFaaS框架提供的**Prometheus**和**Alert
    Manager**组件构建的。当函数调用频率超过定义的阈值时，Alert Manager将触发警报。
- en: 'While deploying the functions, the following labels are used to control the
    number of minimum replicas, maximum replicas, and the increase/decrease factor
    of the functions:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署函数时，使用以下标签来控制函数的最小副本数、最大副本数以及增加/减少函数的因子：
- en: '`com.openfaas.scale.min` – This defines the initial number of replicas, which
    is 1 by default.'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.openfaas.scale.min` – 这定义了初始副本数，默认为1。'
- en: '`com.openfaas.scale.max` – This defines the maximum number of replicas.'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.openfaas.scale.max` – 这定义了最大副本数。'
- en: '`com.openfaas.scale.factor` – This defines the percentage of pod replica increase
    (or decrease) when the Alert Manager fires the alerts. By default, this is set
    to **20%** and should have a value between **0** and **100**.'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.openfaas.scale.factor` - 这定义了当警报管理器触发警报时，pod副本增加（或减少）的百分比。默认情况下，这设置为**20%**，应该在**0**和**100**之间。'
- en: When OpenFaaS is deployed on Kubernetes, the Horizontal Pod Autoscaling feature
    from the Kubernetes framework can also be used to autoscale functions based on
    demand, as an alternative to the built-in autoscaling feature available with the
    OpenFaaS framework.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 当OpenFaaS部署在Kubernetes上时，可以使用Kubernetes框架的水平Pod自动缩放功能来根据需求自动缩放函数，作为OpenFaaS框架提供的内置自动缩放功能的替代方案。
- en: 'Let''s now deploy the `figlet` function from the OpenFaaS function store to
    check the autoscaling feature in action:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们部署OpenFaaS函数商店中的`figlet`函数，以检查自动缩放功能的运行情况：
- en: '[PRE60]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The output should be as follows:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 9.57: Deploying the figlet function'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.57：部署figlet函数'
- en: '](image/C12607_09_57.jpg)'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_57.jpg)'
- en: 'Figure 9.57: Deploying the figlet function'
  id: totrans-456
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.57：部署figlet函数
- en: 'Now we can put a load on the `figlet` function by invoking it 1,000 times,
    as shown in the following code. The following script will invoke the `figlet`
    function 1,000 times by providing the `OpenFaaS` string as the input for the function
    and sleeps for 0.1 seconds in between each invocation:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过调用它1,000次来对`figlet`函数施加负载，如下面的代码所示。以下脚本将通过为函数提供`OpenFaaS`字符串作为输入，并在每次调用之间休眠0.1秒，来调用`figlet`函数1,000次：
- en: '[PRE61]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Navigate to the **Grafana** portal and observe the increasing number of replicas
    for the `figlet` function. Once the load completes, the replica count will start
    scaling down and go back to the `com.openfaas.scale.min` count of 1 function replica.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 转到**Grafana**门户，并观察`figlet`函数的副本数量增加。一旦负载完成，副本计数将开始缩减，并返回到`com.openfaas.scale.min`计数为1个函数副本。
- en: 'The output should be as follows:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该如下所示：
- en: '![Figure 9.58: Verifying the autoscaling feature'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.58：验证自动缩放功能'
- en: '](image/C12607_09_58.jpg)'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_58.jpg)'
- en: 'Figure 9.58: Verifying the autoscaling feature'
  id: totrans-463
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.58：验证自动缩放功能
- en: In this section, we covered function autoscaling, we discussed what function
    autoscaling is, and the configuration we can use to set the minimum replica count,
    the maximum replica count, and the scale factor. Finally, we deployed a sample
    function, performed a load on the function, and observed the autoscaling functionality
    on a Grafana dashboard.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了函数自动缩放，讨论了函数自动缩放是什么，以及我们可以使用的配置来设置最小副本计数、最大副本计数和缩放因子。最后，我们部署了一个示例函数，对函数进行了负载，并在Grafana仪表板上观察了自动缩放功能。
- en: 'Activity 9: OpenFaaS Form Processor'
  id: totrans-465
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动9：OpenFaaS表单处理器
- en: In this activity, we will be creating a website for a brand that will have a
    contact form for potential customers to contact the brand personnel. We will be
    using **OpenFaas** extensively for this website.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个活动中，我们将为一个品牌创建一个网站，该网站将有一个联系表单，供潜在客户联系品牌人员。我们将广泛使用**OpenFaas**来完成这个网站。
- en: Imagine that you are a freelancer and you want to create a website to increase
    your brand visibility. This website needs to have a "Contact Us" form that allows
    potential customers to contact you. You decided to create this website using serverless
    technologies and OpenFaaS was selected as the framework for this task.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是一名自由职业者，你想创建一个网站来增加你的品牌知名度。这个网站需要有一个“联系我们”表单，让潜在客户联系你。你决定使用无服务器技术创建这个网站，选择OpenFaaS作为这项任务的框架。
- en: 'Execute the following steps to complete this activity:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤完成此活动：
- en: Create a SendGrid ([https://sendgrid.com](https://sendgrid.com)) account to
    send emails and save the API key.
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个SendGrid ([https://sendgrid.com](https://sendgrid.com)) 账户来发送电子邮件并保存API密钥。
- en: 'Create the "Contact Us" form using HTML and return the HTML using an OpenFaaS
    function. The following is sample code that achieves the functionality of an HTML
    form with input fields for `name`, `email`, and `message` and a `submit` button;
    CSS to add styles to the HTML form; and a JavaScript function, which will be triggered
    when the user clicks on the `Submit` button and sends the form data as a `POST`
    request to the `form-processor` function:'
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用HTML创建“联系我们”表格，并使用OpenFaaS函数返回HTML。以下是实现具有`name`、`email`和`message`输入字段以及`submit`按钮功能的HTML表单的示例代码；CSS用于为HTML表单添加样式；以及一个JavaScript函数，当用户单击`Submit`按钮时将触发该函数，并将表单数据作为`POST`请求发送到`form-processor`函数：
- en: '[PRE62]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Create the `form-processor` function, which takes the form values from the Contact
    Us form and sends an email to a specified email address with the information provided.
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`form-processor`函数，该函数从联系我们表格中获取表单数值，并将信息发送到指定的电子邮件地址。
- en: Invoke the **Contact Us** form function using a web browser and verify the email
    delivery.
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Web浏览器调用**联系我们**表格函数，并验证电子邮件发送。
- en: 'The contact form should look as shown in the following figure:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 联系表格应如下图所示：
- en: '![Figure 9.59: The Contact Us form'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.59：联系我们表格'
- en: '](image/C12607_09_59.jpg)'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_59.jpg)'
- en: 'Figure 9.59: The Contact Us form'
  id: totrans-477
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.59：联系我们表格
- en: 'The email received from the contact form should look as shown in the following
    screenshot:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 从联系表格收到的电子邮件应如下截图所示：
- en: '![Figure 9.60: Email received from Contact Us form'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.60：从联系我们表格收到的电子邮件'
- en: '](image/C12607_09_60.jpg)'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_09_60.jpg)'
- en: 'Figure 9.60: Email received from Contact Us form'
  id: totrans-481
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图9.60：从联系我们表格收到的电子邮件
- en: Note
  id: totrans-482
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to the activity can be found on page 444.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 活动的解决方案可在第444页找到。
- en: Summary
  id: totrans-484
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: We started this chapter with an introduction to the OpenFaaS framework and continued
    with an overview of the components available with the OpenFaaS framework. Next,
    we looked at how to install `faas-cli` and the **OpenFaaS** framework on a local
    `Minikube` cluster.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从介绍OpenFaaS框架开始本章，并继续概述了OpenFaaS框架提供的组件。接下来，我们看了如何在本地的`Minikube`集群上安装`faas-cli`和**OpenFaaS**框架。
- en: Then, we started looking at **OpenFaaS** functions. We discussed how we can
    use `faas-cli` to create the function templates, build and push function Docker
    image, and deploy the function to the **OpenFaaS** framework. Then, we learned
    how to invoke the deployed functions with the `faas-cli` command and `curl` command.
    Next, we introduced the **OpenFaaS** portal, which is the built-in UI for the
    OpenFaaS framework.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们开始研究**OpenFaaS**函数。我们讨论了如何使用`faas-cli`创建函数模板，构建和推送函数Docker镜像，并将函数部署到**OpenFaaS**框架。然后，我们学习了如何使用`faas-cli`命令和`curl`命令调用已部署的函数。接下来，我们介绍了**OpenFaaS**门户，这是OpenFaaS框架的内置UI。
- en: We also learned how we can set up an **OpenFaaS** function to return HTML content
    and return different content based on provided parameters. We configured the **Prometheus**
    and **Grafana** dashboards to visualize the function metrics, including invocation
    count, invocation duration, and replica counts. Then, we discussed the function
    autoscaling feature, which scales up or scales down function replicas based on
    demand. We performed a load test on a function and observed autoscaling in action
    with Grafana dashboards.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何设置**OpenFaaS**函数来返回HTML内容，并根据提供的参数返回不同的内容。我们配置了**Prometheus**和**Grafana**仪表板来可视化函数指标，包括调用次数、调用持续时间和副本计数。然后，我们讨论了函数自动缩放功能，根据需求扩展或缩小函数副本。我们对函数进行了负载测试，并观察了Grafana仪表板上的自动缩放功能。
- en: Finally, in the activity, we built the frontend and backend of a Contact Us
    form of a website using the **OpenFaaS** framework.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在这个活动中，我们使用**OpenFaaS**框架构建了一个网站的联系我们表单的前端和后端。
- en: Through the concepts and the various exercises and activities presented in this
    book, we have equipped you with all the skills you need to use serverless architectures
    and the state-of-art container management system, Kubernetes.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本书中介绍的概念、各种练习和活动，我们已经为您提供了使用无服务器架构和最先进的容器管理系统Kubernetes所需的所有技能。
- en: We are confident that you will be able to apply this knowledge toward building
    more robust and effective systems and host them on cloud providers such as **AWS
    Lambda**, **Google Cloud Function**, and more. You will also be able to use the
    highly effective features of best-in-class frameworks such as **OpenFaaS**, **OpenWhisk**,
    **Kubeless**, and more.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 我们相信您将能够运用这些知识来构建更健壮、更有效的系统，并将它们托管在**AWS Lambda**、**Google Cloud Function**等云提供商上。您还将能够使用**OpenFaaS**、**OpenWhisk**、**Kubeless**等一流框架的高效功能。
