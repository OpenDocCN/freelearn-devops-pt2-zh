["```\n    package main\n    import (\n    \u00a0\u00a0\u00a0\"fmt\"\n    \u00a0\u00a0\u00a0\"net/http\"\n    )\n    func main() {\n    \u00a0\u00a0\u00a0fmt.Println(\"Starting the \ud83d\udeb2 finder..\")\n    \u00a0\u00a0\u00a0http.HandleFunc(\"/\", FindBikes)\n    \u00a0\u00a0\u00a0fmt.Println(\"Function handlers are registered.\")\n    \u00a0\u00a0\u00a0http.ListenAndServe(\":8080\", nil)\n    }\n    ```", "```\n    ...\n    func FindBikes(w http.ResponseWriter, r *http.Request) {\n    \u00a0\u00a0\u00a0...\n\n    \u00a0\u00a0\u00a0// Get bike points for the query\n    \u00a0\u00a0\u00a0bikePoints, err := httpClient.Get(fmt.Sprintf(TFL_API_URL + \"BikePoint/Search?query=\" + url2.QueryEscape(query)))\n    \u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0// Get available number of bikes\n    \u00a0\u00a0\u00a0availableBikeResponse, err := httpClient.Get(TFL_API_URL + \"BikePoint/\" + bikePoint.ID)\n\n    ...\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if bikeAmount == 0 {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0w.Write([]byte(fmt.Sprintf(RESPONSE_NO_AVAILABLE_BIKE, bikePoint.CommonName, url)))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} else {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0w.Write([]byte(fmt.Sprintf(DEFAULT_RESPONSE, bikePoint.CommonName, bikeAmount, url)))\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    ...\n    ```", "```\n    FROM golang:1.12.5-alpine3.9 AS builder\n    ADD . .\n    RUN go build *.go\n    FROM alpine:3.9\n    RUN apk update && apk add ca-certificates && rm -rf /var/cache/apk/*\n    RUN update-ca-certificates\n    COPY --from=builder /go/function ./bikes\n    RUN chmod +x ./bikes\n    ENTRYPOINT [\"./bikes\"]\n    ```", "```\n    package p\n    import (\n    \u00a0\u00a0\u00a0\u00a0\"bytes\"\n    \u00a0\u00a0\u00a0\u00a0\"net/http\"\n    )\n    func Reminder(http.ResponseWriter, *http.Request) {\n    \u00a0\u00a0\u00a0\u00a0url := \"https://hooks.slack.com/services/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\"\n\n    \u00a0\u00a0\u00a0\u00a0var jsonStr = []byte(`{\"text\": \"Time for a stand-up meeting!\"}`)\n    \u00a0\u00a0\u00a0\u00a0req, err := http.NewRequest(\"POST\", url, bytes.NewBuffer(jsonStr))\n\n    \u00a0\u00a0\u00a0\u00a0client := &http.Client{}\n    \u00a0\u00a0\u00a0\u00a0_, err = client.Do(req)\n    \u00a0\u00a0\u00a0\u00a0if err != nil {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0panic(err)\n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    ```", "```\n    docker run -it --entrypoint=bash onuryilmaz/serverless\n    ```", "```\n    mkdir daily-weather\n    cd daily-weather\n    ```", "```\n    service: daily-weather\n    provider:\n    \u00a0\u00a0name: aws\n    \u00a0\u00a0runtime: nodejs8.10\n    functions:\n    \u00a0\u00a0weather:\n    \u00a0\u00a0\u00a0\u00a0handler: handler.weather\n    \u00a0\u00a0\u00a0\u00a0events:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- schedule: cron(0 8 ? * 1-5 *)\n    \u00a0\u00a0\u00a0\u00a0environment:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CITY: Berlin\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0SLACK_WEBHOOK_URL: https://hooks.slack.com/services/.../.../...\n    ```", "```\n    {\n    \u00a0\u00a0\"name\": \"daily-weather\",\n    \u00a0\u00a0\"description\": \"\",\n    \u00a0\u00a0\"main\": \"handler.js\",\n    \u00a0\u00a0\u00a0\u00a0\"dependencies\": {\n    \u00a0\u00a0\u00a0\u00a0\"node-fetch\": \"^2.2.1\",\n    \u00a0\u00a0\u00a0\u00a0\"slack-node\": \"0.1.8\"\n    \u00a0\u00a0}\n    }\n    ```", "```\n    const fetch = require('node-fetch');\n    const Slack = require('slack-node');\n    module.exports.weather = (event, context, callback) => {\n    \u00a0\u00a0\u00a0\u00a0const webhookUri = process.env.SLACK_WEBHOOK_URL;\n    \u00a0\u00a0\u00a0\u00a0const location = process.env.CITY;\n    \u00a0\u00a0\u00a0\u00a0const slack = new Slack();\n    \u00a0\u00a0\u00a0\u00a0slack.setWebhook(webhookUri);\n    \u00a0\u00a0\u00a0\u00a0weatherURL = \"http://wttr.in/\" + encodeURIComponent(location) + \"?m&&format=1\"\n    \u00a0\u00a0\u00a0\u00a0console.log(weatherURL)\n    \u00a0\u00a0\u00a0\u00a0fetch(weatherURL)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.then(response => response.text())\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0.then(data => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"======== WEATHER TEXT ========\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.error(data);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"======== WEATHER TEXT ========\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0slack.webhook({\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0text: \"Current weather status is \" + data\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}, function(err, response) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"======== SLACK SEND STATUS ========\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.error(response.status);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return callback(null, {statusCode: 200, body: \"ok\" });\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"======== SLACK SEND STATUS ========\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if (err) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"======== ERROR ========\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.error(error);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"======== ERROR ========\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return callback(null, {statusCode: 500, body: JSON.stringify({ error}) });\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}).catch((error) => {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"======== ERROR ========\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.error(error);\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0console.log(\"======== ERROR ========\")\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return callback(null, {statusCode: 500, body: JSON.stringify({ error}) });\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0});\n    };\n    ```", "```\n    ls -l\n    ```", "```\n    npm install -i\n    ```", "```\n    export AWS_ACCESS_KEY_ID=AKIASVTPHRZR33BS256U\n    export AWS_SECRET_ACCESS_KEY=B***************************R\n    ```", "```\n    serverless deploy \n    ```", "```\n    serverless invoke --function weather\n    ```", "```\n    serverless remove\n    ```", "```\n    ...\n    func main() {\n    \u00a0\u00a0\u00a0\u00a0db, err := sql.Open(\"mysql\",\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0r, err := http.Get(fmt.Sprintf(\u201ehttp://apilayer.net/api/...\n    \u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0stmt, err := db.Prepare(\"INSERT INTO GoldPrices(price) VALUES(?)\")\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0_, err = stmt.Exec(target.Quotes.USDXAU)\n    \u00a0\u00a0\u00a0\u00a0...\n    \u00a0\u00a0\u00a0\u00a0log.Printf(\"Successfully inserted the price: %v\", target.Quotes.USDXAU)\n    \u00a0\u00a0\u00a0\u00a0...\n    }\n    ```", "```\n    FROM golang:1.12.5-alpine3.9 AS builder\n    RUN apk add --no-cache git\n    ADD main.go /go/src/gold-price-to-mysql/main.go\n    WORKDIR /go/src/gold-price-to-mysql/\n    RUN go get -v\n    RUN go build .\n    FROM alpine:3.9\n    COPY --from=builder /go/src/gold-price-to-mysql/gold-price-to-mysql ./gold-price-to-mysql\n    RUN chmod +x ./gold-price-to-mysql\n    ENTRYPOINT [\"./gold-price-to-mysql\"]\n    ```", "```\n    docker build -t <USERNAME>/gold-price-to-mysql .\n    ```", "```\n    docker push <USERNAME>/gold-price-to-mysql\n    ```", "```\n    apiVersion: apps/v1\n    kind: StatefulSet\n    metadata:\n    \u00a0\u00a0name: mysql\n    spec:\n    \u00a0\u00a0selector:\n    \u00a0\u00a0\u00a0\u00a0matchLabels:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: mysql\n    \u00a0\u00a0serviceName: mysql\n    \u00a0\u00a0replicas: 1\n    \u00a0\u00a0template:\n    \u00a0\u00a0\u00a0\u00a0metadata:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: mysql\n    \u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: mysql\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: mysql:5.7\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0env:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: MYSQL_ROOT_PASSWORD\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: \"root\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: MYSQL_DATABASE\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: \"db\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: MYSQL_USER\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: \"user\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: MYSQL_PASSWORD\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: \"password\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ports:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: mysql\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containerPort: 3306\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0volumeMounts:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: data\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0mountPath: /var/lib/mysql\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0subPath: mysql\n    \u00a0\u00a0volumeClaimTemplates:\n    \u00a0\u00a0- metadata:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0name: data\n    \u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0accessModes: [\"ReadWriteOnce\"]\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0resources:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0requests:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0storage: 1Gi\n    ```", "```\n    kubectl apply -f mysql.yaml\n    ```", "```\n    apiVersion: v1\n    kind: Service\n    metadata:\n    \u00a0\u00a0name: gold-price-db\n    spec:\n    \u00a0\u00a0selector:\n    \u00a0\u00a0\u00a0\u00a0app: mysql\n    \u00a0\u00a0ports:\n    \u00a0\u00a0\u00a0\u00a0- protocol: TCP\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0port: 3306\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0targetPort: 3306\n    ```", "```\n    kubectl apply -f service.yaml\n    ```", "```\n    apiVersion: batch/v1beta1\n    kind: CronJob\n    metadata:\n    \u00a0\u00a0name: gold-price-to-mysql\n    spec:\n    \u00a0\u00a0schedule: \"* * * * *\"\n    \u00a0\u00a0jobTemplate:\n    \u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0template:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0restartPolicy: OnFailure\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: insert\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: <USERNAME>/gold-price-to-mysql\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0env:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: MYSQL_ADDRESS\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: \"gold-price-db:3306\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: MYSQL_DATABASE\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: \"db\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: MYSQL_USER\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: \"user\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: MYSQL_PASSWORD\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: \"password\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: API_KEY\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: \"<API-KEY>\"\n    ```", "```\n    kubectl apply -f insert-gold-price.yaml\n    ```", "```\n    kubectl get pods\n    ```", "```\n    kubectl run mysql-client --image=mysql:5.7 -i -t --rm --restart=Never \\\n    -- mysql -h gold-price-db -u user -ppassword\u00a0\u00a0db -e \"SELECT * FROM GoldPrices;\"\n    ```", "```\n    kubectl delete -f insert-gold-price.yaml,service.yaml,mysql.yaml\n    ```", "```\n    gcloud beta container node-pools create preemptible --preemptible \\\n    --min-nodes 1 --max-nodes 10\u00a0\u00a0--enable-autoscaling\u00a0\u00a0\\\n    --cluster serverless --zone us-central1-a \n    ```", "```\n    kubectl taint node -l cloud.google.com/gke-nodepool=preemptible\u00a0\u00a0\u00a0\\\n    preemptible=\"true\":NoSchedule\n    ```", "```\n    kubectl expose deployment backend --port 80 --target-port=80\n    ```", "```\n    apiVersion: batch/v1beta1\n    kind: CronJob\n    metadata:\n    \u00a0\u00a0name: backend-checker\n    spec:\n    \u00a0\u00a0schedule: \"*/1 * * * *\"\n    \u00a0\u00a0jobTemplate:\n    \u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0template:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: checker\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: appropriate/curl\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0args:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- curl\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- -I\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- backend\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0nodeSelector:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0cloud.google.com/gke-nodepool: \"preemptible\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tolerations:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- key: preemptible\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0operator: Equal\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: \"true\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0effect: NoSchedule\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0restartPolicy: OnFailure\n    ```", "```\n    kubectl apply -f cronjob.yaml\n    ```", "```\n    kubectl get pods -o wide\n    ```", "```\n    kubectl logs brand-checker-<ID> \n    ```", "```\n    kubectl delete deployment/backend cronjob/backend-checker\n    ```", "```\n    gcloud container clusters delete serverless --zone us-central1-a \n    ```", "```\n    $ mkdir chapter-06-activity\n    $ cd chapter-06-activity\n    ```", "```\n    $ export GCP_PROJECT=<your-gcp-project-name>\n    $ docker build . --tag gcr.io/${GCP_PROJECT}/clock:v1.0\n    ```", "```\n    $ docker push gcr.io/${GCP_PROJECT}/clock:v1.0\n    ```", "```\n    Requests==2.22.0\n    ```", "```\n    import json\n    import requests\n    def main(event, context):\n    \u00a0\u00a0\u00a0\u00a0webhook_url = 'YOUR_INCOMMING_WEBHOOK_URL'\n    \u00a0\u00a0\u00a0\u00a0response = requests.post(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0webhook_url, data=json.dumps(event['data']),\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0headers={'Content-Type': 'application/json'}\n    \u00a0\u00a0\u00a0\u00a0)\n    \u00a0\u00a0\u00a0\u00a0if response.status_code == 200:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Your message successfully sent to Slack\"\n    \u00a0\u00a0\u00a0\u00a0else:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return \"Error while sending your message to Slack: \" + response.get('error')\n    ```", "```\n    $ kubeless function deploy slack --runtime python3.6 \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0--from-file slack.py \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0--handler slack.main \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0--dependencies requirements.txt\n    ```", "```\n    $ kubeless function call slack --data '{\"username\": \"kubeless-bot\", \"text\": \"Welcome to Serverless Architectures with Kubeless !!!\"}'\n    ```", "```\n    $ wsk action create getWeather get-weather.js --param cityName London\n    ```", "```\n    $ wsk action invoke getWeather --result\n    ```", "```\n    $ mkdir send-email\n    $ cd send-email\n    ```", "```\n    $ npm init\n    ```", "```\n    $ npm install sendgrid -save\n    ```", "```\n    $ zip -r send-email.zip *\n    ```", "```\n    $ wsk action create sendEmail send-email.zip --kind nodejs:default\n    ```", "```\n    $ wsk action invoke sendEmail --param message \"Test Message\" \u2013result\n    ```", "```\n    $ wsk action create formatWeatherData format-weather-data.js\n    ```", "```\n    $ wsk action create weatherMailSender --sequence getWeather,formatWeatherData,sendEmail\n    ```", "```\n    $ wsk action invoke weatherMailSender --result\n    ```", "```\n    $ wsk trigger create weatherMailSenderCronTrigger \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0--feed /whisk.system/alarms/alarm \\\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0--param cron \"0 8 * * *\" \n    ok: invoked /whisk.system/alarms/alarm with id cf1af9989a7a46a29af9989a7ad6a28c\n    {\n    \u00a0\u00a0\u00a0\u00a0\"activationId\": \"cf1af9989a7a46a29af9989a7ad6a28c\",\n    \u00a0\u00a0\u00a0\u00a0\"annotations\": [\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"key\": \"path\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"value\": \"whisk.system/alarms/alarm\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"key\": \"waitTime\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"value\": 66\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"key\": \"kind\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"value\": \"nodejs:10\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"key\": \"timeout\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"value\": false\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"key\": \"limits\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"value\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"concurrency\": 1,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"logs\": 10,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"memory\": 256,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"timeout\": 60000\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\n    \u00a0\u00a0\u00a0\u00a0],\n    \u00a0\u00a0\u00a0\u00a0\"duration\": 162,\n    \u00a0\u00a0\u00a0\u00a0\"end\": 1565457634929,\n    \u00a0\u00a0\u00a0\u00a0\"logs\": [],\n    \u00a0\u00a0\u00a0\u00a0\"name\": \"alarm\",\n    \u00a0\u00a0\u00a0\u00a0\"namespace\": \"sathsara89@gmail.com_dev\",\n    \u00a0\u00a0\u00a0\u00a0\"publish\": false,\n    \u00a0\u00a0\u00a0\u00a0\"response\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"result\": {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"status\": \"success\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"status\": \"success\",\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\"success\": true\n    \u00a0\u00a0\u00a0\u00a0},\n    \u00a0\u00a0\u00a0\u00a0\"start\": 1565457634767,\n    \u00a0\u00a0\u00a0\u00a0\"subject\": \"sathsara89@gmail.com\",\n    \u00a0\u00a0\u00a0\u00a0\"version\": \"0.0.152\"\n    }\n    ok: created trigger weatherMailSenderCronTrigger\n    ```", "```\n    $ wsk rule create weatherMailSenderCronRule weatherMailSenderCronTrigger weatherMailSender\n    ```", "```\n    $ faas-cli new contact-form --lang=python3\n    ```", "```\n    $ mkdir contact-form/html\n    ```", "```\n    import os\n\n    def handle(req):\n    \u00a0\u00a0\u00a0\u00a0current_directory = os.path.dirname(__file__)\n    \u00a0\u00a0\u00a0\u00a0html_file_path = os.path.join(current_directory, 'html', 'contact-us.html')\n    \u00a0\u00a0\u00a0\u00a0with(open(html_file_path, 'r')) as html_file:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0html = html_file.read()\n\n    \u00a0\u00a0\u00a0\u00a0return html\n    ```", "```\n    version: 1.0\n    provider:\n    \u00a0\u00a0name: openfaas\n    \u00a0\u00a0gateway: http://192.168.99.100:31112\n    functions:\n    \u00a0\u00a0contact-form:\n    \u00a0\u00a0\u00a0\u00a0lang: python3\n    \u00a0\u00a0\u00a0\u00a0handler: ./contact-form\n    \u00a0\u00a0\u00a0\u00a0image: sathsarasa/contact-form:latest\n    \u00a0\u00a0\u00a0\u00a0environment:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0content_type: text/html\n    ```", "```\n    $\u00a0\u00a0faas-cli up -f contact-form.yml\n    ```", "```\n    [0] > Building contact-form.\n    Clearing temporary build folder: ./build/contact-form/\n    Preparing ./contact-form/ ./build/contact-form//function\n    Building: sathsarasa/contact-form:latest with python3 template. Please wait..\n    Sending build context to Docker daemon\u00a0\u00a014.34kB\n    ...\n    Successfully built 6c008c91f0bb\n    Successfully tagged sathsarasa/contact-form:latest\n    Image: sathsarasa/contact-form:latest built.\n    [0] < Building contact-form done.\n    [0] worker done.\n    [0] > Pushing contact-form [sathsarasa/contact-form:latest].\n    The push refers to repository [docker.io/sathsarasa/contact-form]\n    ...\n    latest: digest: sha256:b4f0a4f474af0755b53acb6a1c0ce26e0f91a9a893bb8bfc78501cab267d823e size: 4282\n    [0] < Pushing contact-form [sathsarasa/contact-form:latest] done.\n    [0] worker done.\n    Deploying: contact-form.\n    WARNING! Communication is not secure, please consider using HTTPS. Letsencrypt.org offers free SSL/TLS certificates.\n    Deployed. 202 Accepted.\n    URL: http://192.168.99.100:31112/function/contact-form\n    ```", "```\n    $ faas-cli new form-processor --lang=python3\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0import json\n    from sendgrid import SendGridAPIClient\n    from sendgrid.helpers.mail import Mail\n    def handle(req):\n\n    \u00a0\u00a0\u00a0\u00a0SENDGRID_API_KEY = '<SEND_GRID_API_KEY>'\n    \u00a0\u00a0\u00a0\u00a0TO_EMAIL = '<TO_EMAIL>'\n    \u00a0\u00a0\u00a0\u00a0EMAIL_SUBJECT = 'New Message from OpenFaaS Contact Form'\n\n    \u00a0\u00a0\u00a0\u00a0json_req = json.loads(req)\n    \u00a0\u00a0\u00a0\u00a0email = json_req[\"email\"]\n    \u00a0\u00a0\u00a0\u00a0name = json_req[\"name\"]\n    \u00a0\u00a0\u00a0\u00a0message = json_req[\"message\"]\n    \u00a0\u00a0\u00a0\u00a0email_body = '<strong>Name: </strong>' + name + '<br><br> <strong>Email: </strong>' + email + '<br><br> <strong>Message: </strong>' + message\n\n    \u00a0\u00a0\u00a0\u00a0email_object = Mail(\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0from_email= email,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0to_emails=TO_EMAIL,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0subject=EMAIL_SUBJECT,\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0html_content=email_body)\n\n    \u00a0\u00a0\u00a0\u00a0try:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sg = SendGridAPIClient(SENDGRID_API_KEY)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0response = sg.send(email_object)\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sendingStatus = \"Message sent successfully\"\n    \u00a0\u00a0\u00a0\u00a0except Exception as e:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0sendingStatus = \"Message sending failed\"\n\n    \u00a0\u00a0\u00a0\u00a0return sendingStatus\n    ```", "```\n    sendgrid\n    ```", "```\n    version: 1.0\n    provider:\n    \u00a0\u00a0name: openfaas\n    \u00a0\u00a0gateway: http://192.168.99.100:31112\n    functions:\n    \u00a0\u00a0form-processor:\n    \u00a0\u00a0\u00a0\u00a0lang: python3\n    \u00a0\u00a0\u00a0\u00a0handler: ./form-processor\n    \u00a0\u00a0\u00a0\u00a0image: sathsarasa/form-processor:latest\n    \u00a0\u00a0\u00a0\u00a0environment:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0read_timeout: 20\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0write_timeout: 20\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0exec_timeout: 20\n    ```", "```\n    $\u00a0\u00a0faas-cli up -f form-processor.yml\n    ```", "```\n    [0] > Building form-processor.\n    Clearing temporary build folder: ./build/form-processor/\n    Preparing ./form-processor/ ./build/form-processor//function\n    Building: sathsarasa/form-processor:latest with python3 template. Please wait..\n    Sending build context to Docker daemon\u00a0\u00a010.24kB\n    ...\n    Successfully built 128245656019\n    Successfully tagged sathsarasa/form-processor:latest\n    Image: sathsarasa/form-processor:latest built.\n    [0] < Building form-processor done.\n    [0] worker done.\n    [0] > Pushing form-processor [sathsarasa/form-processor:latest].\n    The push refers to repository [docker.io/sathsarasa/form-processor]\n    ...\n    latest: digest: sha256:c700592a3a7f16875c2895dbfa41bd269631780d9195290141c245bec93a2257 size: 4286\n    [0] < Pushing form-processor [sathsarasa/form-processor:latest] done.\n    [0] worker done.\n    Deploying: form-processor.\n    WARNING! Communication is not secure, please consider using HTTPS. Letsencrypt.org offers free SSL/TLS certificates.\n    Deployed. 202 Accepted.\n    URL: http://192.168.99.100:31112/function/form-processor\n    ```"]