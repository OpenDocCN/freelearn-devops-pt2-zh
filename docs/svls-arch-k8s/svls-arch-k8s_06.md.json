["```\n$ export GCP_PROJECT=<your-gcp-project-name>\n$ export GCP_ZONE=us-central1-a\n$ export GKE_CLUSTER=knative-cluster\n```", "```\n$ gcloud config set core/project $GCP_PROJECT\n```", "```\n\u00a0\u00a0\u00a0\u00a0\u00a0$ gcloud beta container clusters create $GKE_CLUSTER \\\n\u00a0\u00a0\u00a0\u00a0--zone=$GCP_ZONE \\\n\u00a0\u00a0\u00a0\u00a0--machine-type=n1-standard-4 \\\n\u00a0\u00a0\u00a0\u00a0--cluster-version=latest \\\n\u00a0\u00a0\u00a0\u00a0--addons=HorizontalPodAutoscaling,HttpLoadBalancing,Istio \\\n\u00a0\u00a0\u00a0\u00a0--enable-stackdriver-kubernetes \\\n\u00a0\u00a0\u00a0\u00a0--enable-ip-alias \\\n\u00a0\u00a0\u00a0\u00a0--enable-autoscaling --min-nodes=1 --max-nodes=10 \\\n\u00a0\u00a0\u00a0\u00a0--enable-autorepair \\\n\u00a0\u00a0\u00a0\u00a0--scopes cloud-platform\n```", "```\n$ gcloud container clusters get-credentials $GKE_CLUSTER --zone $GCP_ZONE --project $GCP_PROJECT\n```", "```\n$ kubectl apply --selector knative.dev/crd-install=true \\\n\u00a0\u00a0\u00a0-f https://github.com/knative/serving/releases/download/v0.8.0/serving.yaml \\\n\u00a0\u00a0\u00a0-f https://github.com/knative/eventing/releases/download/v0.8.0/release.yaml \\\n\u00a0\u00a0\u00a0-f https://github.com/knative/serving/releases/download/v0.8.0/monitoring.yaml\n```", "```\n$ kubectl apply -f https://github.com/knative/serving/releases/download/v0.8.0/serving.yaml \\\n\u00a0\u00a0\u00a0-f https://github.com/knative/eventing/releases/download/v0.8.0/release.yaml \\\n\u00a0\u00a0\u00a0-f https://github.com/knative/serving/releases/download/v0.8.0/monitoring.yaml\n```", "```\n$ kubectl get pods --namespace knative-serving\n$ kubectl get pods --namespace knative-eventing\n$ kubectl get pods --namespace knative-monitoring\n```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0apiVersion: serving.knative.dev/v1alpha1 \n    kind: Service\n    metadata:\n    \u00a0\u00a0name: helloworld-nodejs \n    \u00a0\u00a0namespace: default \n    spec:\n    \u00a0\u00a0runLatest:\n    \u00a0\u00a0\u00a0\u00a0configuration:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0revisionTemplate:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0container:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: gcr.io/knative-samples/helloworld-nodejs \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0env:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: TARGET \n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: \"Knative NodeJS App\"\n    ```", "```\n    $ kubectl apply -f hello-world.yaml\n    ```", "```\n    $ kubectl get ksvc\n    $ kubectl get configuration\n    $ kubectl get revision\n    $ kubectl get route\n    $ kubectl get deployments\n    ```", "```\n    $ export EXTERNAL_IP=$(kubectl get svc istio-ingressgateway --namespace istio-system --output 'jsonpath={.status.loadBalancer.ingress[0].ip}')\n    ```", "```\n    $ kubectl get route helloworld-nodejs\n    ```", "```\n    $ curl -H \"Host: helloworld-nodejs.default.example.com\" http://${EXTERNAL_IP}\n    ```", "```\n    apiVersion: serving.knative.dev/v1alpha1\n    kind: Configuration\n    metadata:\n    \u00a0\u00a0name: canary-deployment\n    \u00a0\u00a0namespace: default\n    spec:\n    \u00a0\u00a0template:\n    \u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- image: gcr.io/knative-samples/helloworld-nodejs\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0env:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: TARGET\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: \"This is the first version - v1\"\n    ```", "```\n    $ kubectl apply -f canary-deployment.yaml\n    ```", "```\n    $ kubectl get configurations canary-deployment -o=jsonpath='{.status.latestCreatedRevisionName}'\n    ```", "```\n    apiVersion: serving.knative.dev/v1alpha1\n    kind: Route\n    metadata:\n    \u00a0\u00a0name: canary-deployment\n    \u00a0\u00a0namespace: default \n    spec:\n    \u00a0\u00a0traffic:\n    \u00a0\u00a0\u00a0\u00a0- revisionName: canary-deployment-xgvl8\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0percent: 100 \n    ```", "```\n    $ kubectl apply -f canary-deployment-route.yaml\n    ```", "```\n    $ curl -H \"Host: canary-deployment.default.example.com\" \"http://${EXTERNAL_IP}\"\n    ```", "```\n    apiVersion: serving.knative.dev/v1alpha1\n    kind: Configuration\n    metadata:\n    \u00a0\u00a0name: canary-deployment\n    \u00a0\u00a0namespace: default\n    spec:\n    \u00a0\u00a0template:\n    \u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- image: gcr.io/knative-samples/helloworld-nodejs\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0env:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: TARGET\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: \"This is the second version - v2\"\n    ```", "```\n    $ kubectl apply -f canary-deployment.yaml\n    ```", "```\n    $ kubectl get revisions\n    ```", "```\n    $ kubectl get configurations canary-deployment -o=jsonpath='{.status.latestCreatedRevisionName}'\n    ```", "```\n    apiVersion: serving.knative.dev/v1alpha1\n    kind: Route\n    metadata:\n    \u00a0\u00a0name: canary-deployment\n    \u00a0\u00a0namespace: default \n    spec:\n    \u00a0\u00a0traffic:\n    \u00a0\u00a0\u00a0\u00a0- revisionName: canary-deployment-xgvl8\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0percent: 50 \n    \u00a0\u00a0\u00a0\u00a0- revisionName: canary-deployment-8pp4s\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0percent: 50 \n    ```", "```\n    $ kubectl apply -f canary-deployment-route.yaml\n    ```", "```\n    $ curl -H \"Host: canary-deployment.default.example.com\" \"http://${EXTERNAL_IP}\" \n    ```", "```\n    apiVersion: serving.knative.dev/v1alpha1\n    kind: Route\n    metadata:\n    \u00a0\u00a0name: canary-deployment\n    \u00a0\u00a0namespace: default \n    spec:\n    \u00a0\u00a0traffic:\n    \u00a0\u00a0\u00a0\u00a0- revisionName: canary-deployment-xgvl8\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0percent: 0 \n    \u00a0\u00a0\u00a0\u00a0- revisionName: canary-deployment-8pp4s\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0percent: 100 \n    ```", "```\n    $ kubectl apply -f canary-deployment-route.yaml\n    ```", "```\n    $ curl -H \"Host: blue-green-deployment.default.example.com\" \"http://${EXTERNAL_IP}\" \n    ```", "```\n$ kubectl get pods -l app=grafana -n knative-monitoring\n```", "```\n$ kubectl port-forward $(kubectl get pod -n knative-monitoring -l app=grafana -o jsonpath='{.items[0].metadata.name}') -n knative-monitoring 3000:3000\n```", "```\nNAME\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0READY\u00a0\u00a0\u00a0STATUS\u00a0\u00a0\u00a0\u00a0RESTARTS\u00a0\u00a0\u00a0AGE\nactivator-7c8b59d78-9kgk5\u00a0\u00a0\u00a0\u00a0\u00a02/2\u00a0\u00a0\u00a0\u00a0\u00a0Running\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a015h\nautoscaler-666c9bfcc6-vwrj6\u00a0\u00a0\u00a02/2\u00a0\u00a0\u00a0\u00a0\u00a0Running\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a015h\ncontroller-799cd5c6dc-p47qn\u00a0\u00a0\u00a01/1\u00a0\u00a0\u00a0\u00a0\u00a0Running\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a015h\nwebhook-5b66fdf6b9-cbllh\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01/1\u00a0\u00a0\u00a0\u00a0\u00a0Running\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a015h\n```", "```\n    apiVersion: serving.knative.dev/v1alpha1\n    kind: Service\n    metadata:\n    \u00a0\u00a0name: autoscale-app\n    spec:\n    \u00a0\u00a0runLatest:\n    \u00a0\u00a0\u00a0\u00a0configuration:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0revisionTemplate:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0metadata:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0annotations:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0autoscaling.knative.dev/target: \"10\"\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0container:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: \"gcr.io/knative-samples/autoscale-go:0.1\"\n    ```", "```\n    $ kubectl apply -f autoscale-app.yaml\n    ```", "```\n    $ curl -Lo hey https://storage.googleapis.com/hey-release/hey_linux_amd64\n    ```", "```\n    $ chmod +x hey\n    $ sudo mv hey /usr/local/bin/\n    ```", "```\n    $ hey -z 60s -c 50 \\\n    \u00a0\u00a0\u00a0-host \"autoscale-app.default.example.com\" \\\n    \u00a0\u00a0\u00a0\"http://${EXTERNAL_IP?}?sleep=1000\" \n    ```", "```\n    $ kubectl get pods --watch\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0NAME\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0READY\u00a0\u00a0\u00a0STATUS\u00a0\u00a0\u00a0\u00a0RESTARTS\u00a0\u00a0\u00a0AGE\n    autoscale-app-7jt29-deployment-9c9c4b474-4ttl2\u00a0\u00a0\u00a03/3\u00a0\u00a0\u00a0\u00a0\u00a0Running\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a058s\n    autoscale-app-7jt29-deployment-9c9c4b474-6pmjs\u00a0\u00a0\u00a03/3\u00a0\u00a0\u00a0\u00a0\u00a0Running\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a060s\n    autoscale-app-7jt29-deployment-9c9c4b474-7j52p\u00a0\u00a0\u00a03/3\u00a0\u00a0\u00a0\u00a0\u00a0Running\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a063s\n    autoscale-app-7jt29-deployment-9c9c4b474-dvcs6\u00a0\u00a0\u00a03/3\u00a0\u00a0\u00a0\u00a0\u00a0Running\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a056s\n    autoscale-app-7jt29-deployment-9c9c4b474-hmkzf\u00a0\u00a0\u00a03/3\u00a0\u00a0\u00a0\u00a0\u00a0Running\u00a0\u00a0\u00a00\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a062s\n    ```", "```\n    $ az group create --name serverless-kubernetes-group --location westus\n    ```", "```\n    $ az provider register --namespace Microsoft.Networks\n    ```", "```\n    $ az aks create --resource-group serverless-kubernetes-group --name virtual-kubelet-cluster --node-count 1 --node-vm-size Standard_D2 --network-plugin azure --generate-ssh-keys\n    ```", "```\n    $ az aks get-credentials --resource-group serverless-kubernetes-group --name virtual-kubelet-cluster\n    ```", "```\n    $ kubectl get nodes\n    ```", "```\n    $ az provider list --query \"[?contains(namespace,'Microsoft.ContainerInstance')]\" -o table\n    ```", "```\n    $ az provider register --namespace Microsoft.ContainerInstance\n    ```", "```\n    apiVersion: v1\n    kind: ServiceAccount\n    metadata:\n    \u00a0\u00a0name: tiller\n    \u00a0\u00a0namespace: kube-system\n    ---\n    apiVersion: rbac.authorization.k8s.io/v1\n    kind: ClusterRoleBinding\n    metadata:\n    \u00a0\u00a0name: tiller\n    roleRef:\n    \u00a0\u00a0apiGroup: rbac.authorization.k8s.io\n    \u00a0\u00a0kind: ClusterRole\n    \u00a0\u00a0name: cluster-admin\n    subjects:\n    \u00a0\u00a0- kind: ServiceAccount\n    \u00a0\u00a0\u00a0\u00a0name: tiller\n    \u00a0\u00a0\u00a0\u00a0namespace: kube-system\n    ```", "```\n    $ kubectl apply -f tiller-rbac.yaml\n    ```", "```\n    $ helm init --service-account tiller\n    ```", "```\n    $ az aks install-connector \\\n    \u00a0\u00a0\u00a0\u00a0--resource-group serverless-kubernetes-group \\\n    \u00a0\u00a0\u00a0\u00a0--name virtual-kubelet-cluster \\\n    \u00a0\u00a0\u00a0\u00a0--connector-name virtual-kubelet \\\n    \u00a0\u00a0\u00a0\u00a0--os-type Both\n    ```", "```\n    $ kubectl get nodes\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n    \u00a0\u00a0name: hello-world\n    spec:\n    \u00a0\u00a0replicas: 1\n    \u00a0\u00a0selector:\n    \u00a0\u00a0\u00a0\u00a0matchLabels:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: hello-world\n    \u00a0\u00a0template:\n    \u00a0\u00a0\u00a0\u00a0metadata:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0labels:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0app: hello-world\n    \u00a0\u00a0\u00a0\u00a0spec:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0containers:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- name: hello-world\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0image: microsoft/aci-helloworld\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ports:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- containerPort: 80\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0nodeSelector:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0kubernetes.io/role: agent\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0type: virtual-kubelet\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0beta.kubernetes.io/os: linux\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0tolerations:\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- key: virtual-kubelet.io/provider\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0operator: Equal\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0value: azure\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0effect: NoSchedule\n    ```", "```\n    $ kubectl apply -f hello-world.yaml\n    ```", "```\n    $ kubectl get pods -o wide\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0<?php\n    if ( !isset ( $_GET['timezone'] ) ) {\n    \u00a0\u00a0\u00a0\u00a0// Returns error if the timezone parameter is not provided\n    \u00a0\u00a0\u00a0\u00a0$output_message = \"Error: Timezone not provided\"; \n    } else if ( empty ( $_GET['timezone'] ) ) {\n    \u00a0\u00a0\u00a0\u00a0// Returns error if the timezone parameter value is empty\n    \u00a0\u00a0\u00a0\u00a0$output_message = \"Error: Timezone cannot be empty\"; \n    } else {\n    \u00a0\u00a0\u00a0\u00a0// Save the timezone parameter value to a variable\n    \u00a0\u00a0\u00a0\u00a0$timezone = $_GET['timezone'];\n\n    \u00a0\u00a0\u00a0\u00a0try {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Generates the current time for the provided timezone\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$date = new DateTime(\"now\", new DateTimeZone($timezone) );\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$formatted_date_time = $date->format('Y-m-d H:i:s');\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$output_message = \"Current date and time for $timezone is $formatted_date_time\";\n    \u00a0\u00a0\u00a0\u00a0} catch(Exception $e) {\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0// Returns error if the timezone is invalid\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0$output_message = \"Error: Invalid timezone value\"; \n    \u00a0\u00a0\u00a0\u00a0}\n    }\n    // Return the output message\n    echo $output_message;\n    ```", "```\n    # Use official PHP 7.3 image as base image\n    FROM php:7.3-apache\n    # Copy index.php file to the docker image\n    COPY index.php /var/www/html/\n    # Replace port 80 with the value from PORT environment variable in apache2 configuration files\n    RUN sed -i 's/80/${PORT}/g' /etc/apache2/sites-available/000-default.conf /etc/apache2/ports.conf\n    # Use the default production configuration file\n    RUN mv \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\"\n    ```"]