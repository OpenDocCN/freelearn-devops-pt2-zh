["```\nminikube ip\n```", "```\nopen http://$(minikube ip):4194/\n```", "```\nkubectl proxy\n```", "```\ncurl http://127.0.0.1:8001/metrics\n```", "```\nminikube addons enable heapster\nheapster was successfully enabled\n```", "```\nminikube addons open heapster\n```", "```\n spec: containers: - name: flask image: quay.io/kubernetes-for-developers/flask:0.4.0 resources: limits: memory: \"100Mi\" cpu: \"500m\" requests: memory: \"100Mi\" cpu: \"500m\"\n```", "```\nkubectl run -it --rm --restart=Never \\\n--image=quay.io/kubernetes-for-developers/ab quicktest -- sh\n```", "```\ncurl -v http://flask-service.default:5000/\n```", "```\n* Trying 10.104.90.234...\n* TCP_NODELAY set\n* Connected to flask-service.default (10.104.90.234) port 5000 (#0)\n> GET / HTTP/1.1\n> Host: flask-service.default:5000\n> User-Agent: curl/7.57.0\n> Accept: */*\n>\n* HTTP 1.0, assume close after body\n< HTTP/1.0 200 OK\n< Content-Type: text/html; charset=utf-8\n< Content-Length: 10\n< Server: Werkzeug/0.13 Python/3.6.3\n< Date: Mon, 08 Jan 2018 02:22:26 GMT\n<\n* Closing connection 0\n```", "```\nab -c 100 -n 5000 http://flask-service.default:5000/ \nThis is ApacheBench, Version 2.3 <$Revision: 1807734 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking flask-service.default (be patient)\nCompleted 500 requests\nCompleted 1000 requests\nCompleted 1500 requests\nCompleted 2000 requests\nCompleted 2500 requests\nCompleted 3000 requests\nCompleted 3500 requests\nCompleted 4000 requests\nCompleted 4500 requests\nCompleted 5000 requests\nFinished 5000 requests\nServer Software: Werkzeug/0.13 Server Hostname: flask-service.default\nServer Port: 5000\nDocument Path: /\nDocument Length: 10 bytes\nConcurrency Level: 100\nTime taken for tests: 3.454 seconds\nComplete requests: 5000\nFailed requests: 0\nTotal transferred: 810000 bytes\nHTML transferred: 50000 bytes\nRequests per second: 1447.75 [#/sec] (mean)\nTime per request: 69.072 [ms] (mean)\nTime per request: 0.691 [ms] (mean, across all concurrent requests)\nTransfer rate: 229.04 [Kbytes/sec] received\n\nConnection Times (ms)\n min mean[+/-sd] median max\nConnect: 0 0 0.3 0 3\nProcessing: 4 68 7.4 67 90\nWaiting: 4 68 7.4 67 90\nTotal: 7 68 7.2 67 90\n\nPercentage of the requests served within a certain time (ms)\n 50% 67\n 66% 69\n 75% 71\n 80% 72\n 90% 77\n 95% 82\n 98% 86\n 99% 89\n 100% 90 (longest request)\n```", "```\nab -c 100 -n 50000 http://flask-service.default:5000/\n```", "```\nbrew install kubernetes-helm\n```", "```\ncurl https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get > get_helm.sh\nchmod 700 get_helm.sh\n./get_helm.sh\n```", "```\n$HELM_HOME has been configured at /Users/heckj/.helm.\n\nTiller (the Helm server-side component) has been installed into your Kubernetes Cluster.\nHappy Helming!\n```", "```\nkubectl describe deployment tiller-deploy -n kube-system\n```", "```\nhelm version \nClient: &amp;version.Version{SemVer:\"v2.7.2\", GitCommit:\"8478fb4fc723885b155c924d1c8c410b7a9444e6\", GitTreeState:\"clean\"}\nServer: &amp;version.Version{SemVer:\"v2.7.2\", GitCommit:\"8478fb4fc723885b155c924d1c8c410b7a9444e6\", GitTreeState:\"clean\"}\n```", "```\nhelm repo list \nNAME URL\nstable https://kubernetes-charts.storage.googleapis.com\nlocal http://127.0.0.1:8879/charts\n```", "```\nhelp repo update\n\nHang tight while we grab the latest from your chart repositories...\n...Skip local chart repository\n...Successfully got an update from the \"stable\" chart repository\nUpdate Complete.  Happy Helming!\n```", "```\nhelm fetch --untar stable/prometheus \n```", "```\n.helmignore\nChart.yaml\nREADME.md\ntemplates\nvalues.yaml\n```", "```\nhelm install prometheus -n monitor --namespace monitoring\n```", "```\nNAME: monitor\nLAST DEPLOYED: Sun Jan 14 15:00:40 2018\nNAMESPACE: monitoring\nSTATUS: DEPLOYED\nRESOURCES:\n==> v1/ConfigMap\nNAME DATA AGE\nmonitor-prometheus-alertmanager 1 1s\nmonitor-prometheus-server 3 1s\n\n==> v1/PersistentVolumeClaim\nNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE\nmonitor-prometheus-alertmanager Bound pvc-be6b3367-f97e-11e7-92ab-e697d60b4f2f 2Gi RWO standard 1s\nmonitor-prometheus-server Bound pvc-be6b8693-f97e-11e7-92ab-e697d60b4f2f 8Gi RWO standard 1s\n\n==> v1/Service\nNAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE\nmonitor-prometheus-alertmanager ClusterIP 10.100.246.164 <none> 80/TCP 1s\nmonitor-prometheus-kube-state-metrics ClusterIP None <none> 80/TCP 1s\nmonitor-prometheus-node-exporter ClusterIP None <none> 9100/TCP 1s\nmonitor-prometheus-pushgateway ClusterIP 10.97.187.101 <none> 9091/TCP 1s\nmonitor-prometheus-server ClusterIP 10.110.247.151 <none> 80/TCP 1s\n\n==> v1beta1/DaemonSet\nNAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE\nmonitor-prometheus-node-exporter 1 1 0 1 0 <none> 1s\n\n==> v1beta1/Deployment\nNAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE\nmonitor-prometheus-alertmanager 1 1 1 0 1s\nmonitor-prometheus-kube-state-metrics 1 1 1 0 1s\nmonitor-prometheus-pushgateway 1 1 1 0 1s\nmonitor-prometheus-server 1 1 1 0 1s\n\n==> v1/Pod(related)\nNAME READY STATUS RESTARTS AGE\nmonitor-prometheus-node-exporter-bc9jp 0/1 ContainerCreating 0 1s\nmonitor-prometheus-alertmanager-6c59f855d-bsp7t 0/2 ContainerCreating 0 1s\nmonitor-prometheus-kube-state-metrics-57747bc8b6-l7pzw 0/1 ContainerCreating 0 1s\nmonitor-prometheus-pushgateway-5b99967d9c-zd7gc 0/1 ContainerCreating 0 1s\nmonitor-prometheus-server-7895457f9f-jdvch 0/2 Pending 0 1s\n\nNOTES:\nThe prometheus server can be accessed via port 80 on the following DNS name from within your cluster:\nmonitor-prometheus-server.monitoring.svc.cluster.local\n\nGet the prometheus server URL by running these commands in the same shell:\n export POD_NAME=$(kubectl get pods --namespace monitoring -l \"app=prometheus,component=server\" -o jsonpath=\"{.items[0].metadata.name}\")\n kubectl --namespace monitoring port-forward $POD_NAME 9090\n\nThe prometheus alertmanager can be accessed via port 80 on the following DNS name from within your cluster:\nmonitor-prometheus-alertmanager.monitoring.svc.cluster.local\n\nGet the Alertmanager URL by running these commands in the same shell:\n export POD_NAME=$(kubectl get pods --namespace monitoring -l \"app=prometheus,component=alertmanager\" -o jsonpath=\"{.items[0].metadata.name}\")\n kubectl --namespace monitoring port-forward $POD_NAME 9093\n\nThe prometheus PushGateway can be accessed via port 9091 on the following DNS name from within your cluster:\nmonitor-prometheus-pushgateway.monitoring.svc.cluster.local\n\nGet the PushGateway URL by running these commands in the same shell:\n export POD_NAME=$(kubectl get pods --namespace monitoring -l \"app=prometheus,component=pushgateway\" -o jsonpath=\"{.items[0].metadata.name}\")\n kubectl --namespace monitoring port-forward $POD_NAME 9093\n\nFor more information on running prometheus, visit:\nhttps://prometheus.io/\n```", "```\nNAME REVISION UPDATED STATUS CHART NAMESPACE\nmonitor 1 Sun Jan 14 15:00:40 2018 DEPLOYED prometheus-4.6.15 monitoring\n```", "```\nhelm status monitor\n```", "```\nhelm template prometheus -n monitor --namespace monitoring\n```", "```\nexport POD_NAME=$(kubectl get pods --namespace monitoring -l \"app=prometheus,component=server\" -o jsonpath=\"{.items[0].metadata.name}\")\n\nkubectl --namespace monitoring port-forward $POD_NAME 9090\n```", "```\ncontainer_memory_usage_bytes{\n  beta_kubernetes_io_arch=\"amd64\",\n  beta_kubernetes_io_os=\"linux\",\n  container_name=\"POD\",\n  id=\"/kubepods/podf887aff9-f981-11e7-92ab-e697d60b4f2f/25fa74ef205599036eaeafa7e0a07462865f822cf364031966ff56a9931e161d\",\n  image=\"gcr.io/google_containers/pause-amd64:3.0\",\n  instance=\"minikube\",\n  job=\"kubernetes-nodes-cadvisor\",\n  kubernetes_io_hostname=\"minikube\",\n  name=\"k8s_POD_flask-5c7d884fcc-2l7g9_default_f887aff9-f981-11e7-92ab-e697d60b4f2f_0\",\n  namespace=\"default\",\n  pod_name=\"flask-5c7d884fcc-2l7g9\"\n}  249856\n```", "```\ncontainer_memory_usage_bytes{image!=\"\"}\n```", "```\ncontainer_memory_usage_bytes{image!=\"\",namespace=\"default\"}\n```", "```\ncontainer_memory_usage_bytes{image!=\"\",namespace=\"default\",container_name=\"flask\"}\n```", "```\nsum(container_memory_usage_bytes{image!=\"\",\nnamespace=\"default\",container_name=\"flask\"})\n```", "```\nsum(container_memory_usage_bytes{image!=\"\",\nnamespace=\"default\",container_name=\"flask\"}) by (name)\n```", "```\nhelm install stable/grafana -n viz --namespace monitoring\n```", "```\nNOTES:\n1\\. Get your 'admin' user password by running:\n\nkubectl get secret --namespace monitoring viz-grafana -o jsonpath=\"{.data.grafana-admin-password}\" | base64 --decode ; echo\n\n2\\. The Grafana server can be accessed via port 80 on the following DNS name from within your cluster:\n\nviz-grafana.monitoring.svc.cluster.local\n\nGet the Grafana URL to visit by running these commands in the same shell:\n\nexport POD_NAME=$(kubectl get pods --namespace monitoring -l \"app=viz-grafana,component=grafana\" -o jsonpath=\"{.items[0].metadata.name}\")\n kubectl --namespace monitoring port-forward $POD_NAME 3000\n\n3\\. Login with the password from step 1 and the username: admin\n```", "```\nkubectl get secret --namespace monitoring viz-grafana -o jsonpath=\"{.data.grafana-admin-password}\" | base64 --decode ; echo\n```", "```\nexport POD_NAME=$(kubectl get pods --namespace monitoring -l \"app=viz-grafana,component=grafana\" -o jsonpath=\"{.items[0].metadata.name}\")\n\nkubectl --namespace monitoring port-forward $POD_NAME 3000\n```", "```\npip install prometheus_client\n```", "```\ngit clone https://github.com/kubernetes-for-developers/kfd-flask -b 0.5.0\n```", "```\nFLASK_REQUEST_LATENCY = Histogram('flask_request_latency_seconds', 'Flask Request Latency',\n ['method', 'endpoint'])\nFLASK_REQUEST_COUNT = Counter('flask_request_count', 'Flask Request Count',\n ['method', 'endpoint', 'http_status'])\n\ndef before_request():\n   request.start_time = time.time()\n\ndef after_request(response):\n   request_latency = time.time() - request.start_time\n   FLASK_REQUEST_LATENCY.labels(request.method, request.path).observe(request_latency)\n   FLASK_REQUEST_COUNT.labels(request.method, request.path, response.status_code).inc()\n   return response\n```", "```\n@app.route('/metrics')\ndef metrics():\n   return make_response(generate_latest())\n```", "```\nkind: Service\napiVersion: v1\nmetadata:\n   name: flask-service\n   annotations:\n       prometheus.io/scrape: \"true\"\nspec:\n  type: NodePort\n  ports:\n  - port: 5000\n  selector:\n      app: flask\n```", "```\nflask_request_latency_seconds_bucket{endpoint=\"/\",le=\"0.005\",method=\"GET\"} 13.0 flask_request_latency_seconds_bucket{endpoint=\"/\",le=\"0.01\",method=\"GET\"} 13.0 flask_request_latency_seconds_bucket{endpoint=\"/\",le=\"0.025\",method=\"GET\"} 13.0 flask_request_latency_seconds_bucket{endpoint=\"/\",le=\"0.05\",method=\"GET\"} 13.0 flask_request_latency_seconds_bucket{endpoint=\"/\",le=\"0.075\",method=\"GET\"} 13.0 flask_request_latency_seconds_bucket{endpoint=\"/\",le=\"0.1\",method=\"GET\"} 13.0 flask_request_latency_seconds_bucket{endpoint=\"/\",le=\"0.25\",method=\"GET\"} 13.0 flask_request_latency_seconds_bucket{endpoint=\"/\",le=\"0.5\",method=\"GET\"} 13.0 flask_request_latency_seconds_bucket{endpoint=\"/\",le=\"0.75\",method=\"GET\"} 13.0 flask_request_latency_seconds_bucket{endpoint=\"/\",le=\"1.0\",method=\"GET\"} 13.0 flask_request_latency_seconds_bucket{endpoint=\"/\",le=\"2.5\",method=\"GET\"} 13.0 flask_request_latency_seconds_bucket{endpoint=\"/\",le=\"5.0\",method=\"GET\"} 13.0 flask_request_latency_seconds_bucket{endpoint=\"/\",le=\"7.5\",method=\"GET\"} 13.0 flask_request_latency_seconds_bucket{endpoint=\"/\",le=\"10.0\",method=\"GET\"} 13.0 flask_request_latency_seconds_bucket{endpoint=\"/\",le=\"+Inf\",method=\"GET\"} 13.0 flask_request_latency_seconds_count{endpoint=\"/\",method=\"GET\"} 13.0 flask_request_latency_seconds_sum{endpoint=\"/\",method=\"GET\"} 0.0012879371643066406 \n# HELP flask_request_count Flask Request Count \n# TYPE flask_request_count counter flask_request_count{endpoint=\"/alive\",http_status=\"200\",method=\"GET\"} 645.0 flask_request_count{endpoint=\"/ready\",http_status=\"200\",method=\"GET\"} 644.0 flask_request_count{endpoint=\"/metrics\",http_status=\"200\",method=\"GET\"} 65.0 flask_request_count{endpoint=\"/\",http_status=\"200\",method=\"GET\"} 13.0\n```", "```\nnpm install express-prom-bundle --save\n```", "```\nconst promBundle = require(\"express-prom-bundle\");\nconst metricsMiddleware = promBundle({includeMethod: true});\n```", "```\napp.use(metricsMiddleware)\n```", "```\ngit clone https://github.com/kubernetes-for-developers/kfd-nodejs -b 0.5.0\n```", "```\nkind: Service\napiVersion: v1\nmetadata:\n name: nodejs-service\n annotations:\n   prometheus.io/scrape: \"true\"\nspec:\n ports:\n - port: 3000\n   name: web\n clusterIP: None\n selector:\n   app: nodejs\n```", "```\nsum(increase(http_request_duration_seconds_count{status_code=~\"^5..$\"}[5m])) / sum(increase(http_request_duration_seconds_count[5m]))\n```", "```\nhistogram_quantile(0.5, sum(rate(flask_request_latency_seconds_bucket[5m])) by (le, method, endpoint))\n```", "```\nhistogram_quantile(0.95, sum(rate(flask_request_latency_seconds_bucket[5m])) by (le, method, endpoint))\n```", "```\nhistogram_quantile(0.99, sum(rate(flask_request_latency_seconds_bucket[5m])) by (le, method, endpoint))\n```", "```\nsum(rate(flask_request_latency_seconds_count[5m])) by (method, endpoint)\n```"]