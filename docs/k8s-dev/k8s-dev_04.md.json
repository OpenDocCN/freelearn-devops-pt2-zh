["```\nkubectl run flask --image=quay.io/kubernetes-for-developers/flask:0.1.1 --port=5000\n```", "```\nkubectl get deployment flask -o yaml --export\n```", "```\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n annotations:\n deployment.kubernetes.io/revision: \"1\"\n creationTimestamp: null\n generation: 1\n labels:\n run: flask\n name: flask\n selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/flask\nspec:\n replicas: 1\n selector:\n matchLabels:\n run: flask\n strategy:\n rollingUpdate:\n maxSurge: 1\n maxUnavailable: 1\n type: RollingUpdate\n template:\n metadata:\n creationTimestamp: null\n labels:\n run: flask\n spec:\n containers:\n - image: quay.io/kubernetes-for-developers/flask:latest\n imagePullPolicy: Always\n name: flask\n ports:\n - containerPort: 5000\n protocol: TCP\n resources: {}\n terminationMessagePath: /dev/termination-log\n terminationMessagePolicy: File\n dnsPolicy: ClusterFirst\n restartPolicy: Always\n schedulerName: default-scheduler\n      securityContext: {}\n terminationGracePeriodSeconds: 30\nstatus: {}\n```", "```\nflask.yml\n```", "```\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n name: flask\n labels:\n run: flask\nspec:\n template:\n metadata:\n labels:\n app: flask\n spec:\n containers:\n - name: flask\n image: quay.io/kubernetes-for-developers/flask:0.1.1\n ports: \n - containerPort: 5000\n```", "```\nkubectl delete deployment flask\n```", "```\nkubectl apply -f deploy/flask.yml --dry-run --validate\n```", "```\ndeployment \"flask\" created (dry run)\n```", "```\nerror: error validating \"deploy/flask.yml\": error validating data: found invalid field metdata for v1.PodTemplateSpec; if you choose to ignore these errors, turn validation off with --validate=false\n```", "```\nkubectl apply -f deploy/flask.yml\n```", "```\nkubectl describe deployment/flask\n```", "```\n Name: flask\nNamespace: default\nCreationTimestamp: Sun, 22 Oct 2017 14:03:27 -0700\nLabels: run=flask\nAnnotations: deployment.kubernetes.io/revision=1\n kubectl.kubernetes.io/last-applied-configuration={\"apiVersion\":\"apps/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"run\":\"flask\"},\"name\":\"flask\",\"namespace\":\"default\"},\"spec\":{\"t...\nSelector: app=flask\nReplicas: 1 desired | 1 updated | 1 total | 1 available | 0 unavailable\nStrategyType: RollingUpdate\nMinReadySeconds: 0\nRollingUpdateStrategy: 25% max unavailable, 25% max surge\nPod Template:\n Labels: app=flask\n Containers:\n flask:\n Image: quay.io/kubernetes-for-developers/flask:0.1.1\n Port: 5000/TCP\n Environment: <none>\n Mounts: <none>\n Volumes: <none>\nConditions:\n Type Status Reason\n ---- ------ ------\n Available True MinimumReplicasAvailable\n Progressing True NewReplicaSetAvailable\nOldReplicaSets: <none>\nNewReplicaSet: flask-2003485262 (1/1 replicas created)\nEvents:\n Type Reason Age From Message\n ---- ------ ---- ---- -------\n Normal ScalingReplicaSet 5s deployment-controller Scaled up replica set flask-2003485262 to 1\n```", "```\nWarning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply\n```", "```\nimagePullPolicy: Always\n```", "```\nkubectl describe deployment flask\n```", "```\nName: flask\nNamespace: default\nCreationTimestamp: Sat, 16 Sep 2017 08:31:00 -0700\nLabels: run=flask\nAnnotations: deployment.kubernetes.io/revision=1\nkubectl.kubernetes.io/last-applied-configuration={\"apiVersion\":\"apps/v1beta1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"run\":\"flask\"},\"name\":\"flask\",\"namespace\":\"default\"},\"spec\":{\"t...\nSelector: app=flask\nReplicas: 1 desired | 1 updated | 1 total | 1 available | 0 unavailable\nStrategyType: RollingUpdate\nMinReadySeconds: 0\nRollingUpdateStrategy: 25% max unavailable, 25% max surge\nPod Template:\n Labels: app=flask\n Containers:\n flask:\n Image: quay.io/kubernetes-for-developers/flask:0.1.1\n Port: 5000/TCP\n Environment: <none>\n Mounts: <none>\n Volumes: <none>\nConditions:\n Type Status Reason\n ---- ------ ------\n Available True MinimumReplicasAvailable\n Progressing True NewReplicaSetAvailable\nOldReplicaSets: <none>\nNewReplicaSet: flask-866287979 (1/1 replicas created)\nEvents:\n FirstSeen LastSeen Count From SubObjectPath Type Reason Message\n --------- -------- ----- ---- ------------- -------- ------ ------\n 2d 2d 1 deployment-controller Normal ScalingReplicaSetScaled up replica set flask-866287979 to 1\n```", "```\nkubectl get deployment flask -o json\n```", "```\napiVersion: apps/v1beta1\nkind: Deployment\nmetadata:\n name: flask\n labels:\n run: flask\n annotations:\n example-key: example-data\nspec:\n template:\n metadata:\n labels:\n app: flask\n spec:\n containers:\n - name: flask\n image: quay.io/kubernetes-for-developers/flask:0.1.1\n ports:\n - containerPort: 5000\n volumeMounts:\n          - name: podinfo\n mountPath: /podinfo\n readOnly: false\n volumes:\n - name: podinfo\n downwardAPI:\n items:\n - path: \"labels\"\n fieldRef:\n fieldPath: metadata.labels\n - path: \"annotations\"\n fieldRef:\n fieldPath: metadata.annotations\n```", "```\nkubectl apply -f ./flask.yml\n```", "```\nkubectl exec flask-463137380-d4bfx -it -- sh\n```", "```\nls -l /podinfo\n```", "```\ntotal 0\nlrwxrwxrwx    1 root     root            18 Sep 16 18:14 annotations -> ..data/annotations\nlrwxrwxrwx    1 root     root            13 Sep 16 18:14 labels -> ..data/labels\n```", "```\ncat /podinfo/annotations\n```", "```\nkubernetes.io/config.seen=\"2017-09-16T18:14:04.024412807Z\"\nkubernetes.io/config.source=\"api\"\nkubernetes.io/created-by=\"{\\\"kind\\\":\\\"SerializedReference\\\",\\\"apiVersion\\\":\\\"v1\\\",\\\"reference\\\":{\\\"kind\\\":\\\"ReplicaSet\\\",\\\"namespace\\\":\\\"default\\\",\\\"name\\\":\\\"flask-463137380\\\",\\\"uid\\\":\\\"d262ca60-9b0a-11e7-884c-0aef48c812e4\\\",\\\"apiVersion\\\":\\\"extensions\\\",\\\"resourceVersion\\\":\\\"121204\\\"}}\\n\"\n```", "```\ncat /podinfo/labels\n```", "```\napp=\"flask\"\npod-template-hash=\"463137380\"\n```", "```\nkubectl describe pod flask-463137380-d4bfx\n```", "```\nName: flask-463137380-d4bfx\nNamespace: default\nNode: minikube/192.168.64.3\nStart Time: Sat, 16 Sep 2017 11:14:04 -0700\nLabels: app=flask\npod-template-hash=463137380\nAnnotations: kubernetes.io/created-by={\"kind\":\"SerializedReference\",\"apiVersion\":\"v1\",\"reference\":{\"kind\":\"ReplicaSet\",\"namespace\":\"default\",\"name\":\"flask-463137380\",\"uid\":\"d262ca60-9b0a-11e7-884c-0aef48c812e4\",\"a...\nStatus: Running\nIP: 172.17.0.5\nCreated By: ReplicaSet/flask-463137380\nControlled By: ReplicaSet/flask-463137380\n```", "```\nkubectl create configmap example-config --from-literal=log.level=err\n```", "```\nkubectl get configmap\n```", "```\nNAME             DATA      AGE\nexample-config   0         2d\n```", "```\nkubectl describe configmap example-config\n```", "```\nName: example-config\nNamespace: default\nLabels: <none>\nAnnotations: <none>\nData\n====\nlog.level:\n----\nerr\nEvents: <none>\n```", "```\nkubectl get configmap example-config -o yaml --export apiVersion: v1\ndata:\n log.level: err\nkind: ConfigMap\nmetadata:\n creationTimestamp: null\n name: example-config\n selfLink: /api/v1/namespaces/default/configmaps/example-config\n```", "```\nkubectl get configmap example-config -o json --export {\n \"apiVersion\": \"v1\",\n \"data\": {\n \"log.level\": \"err\"\n },\n \"kind\": \"ConfigMap\",\n \"metadata\": {\n \"creationTimestamp\": null,\n \"name\": \"example-config\",\n \"selfLink\": \"/api/v1/namespaces/default/configmaps/example-config\"\n }\n}\n```", "```\n[unusual]\ngreeting=hello\nonoff=true\nanumber=3\n```", "```\nkubectl create configmap iniconfig --from-file config.ini --save-config\n```", "```\nkubectl get configmap iniconfig -o yaml --export\n```", "```\napiVersion: v1\ndata:\n config.ini: |\n [unusual]\n greeting=hello\n onoff=true\n anumber=3\nkind: ConfigMap\nmetadata:\n name: iniconfig\n selfLink: /api/v1/namespaces/default/configmaps/iniconfig\n```", "```\nkubectl get configmap example-config -o yaml --export > deploy/example-config.yml\n```", "```\napiVersion: v1\ndata:\n log.level: err\nkind: ConfigMap\nmetadata:\n creationTimestamp: null\n name: example-config\n selfLink: /api/v1/namespaces/default/configmaps/example-config\n```", "```\nkubectl apply -f deploy/example-config.yml\n```", "```\nWarning: kubectl apply should be used on resource created by either kubectl create --save-config or kubectl apply\nconfigmap \"example-config\" configured\n```", "```\nkubectl get configmap example-config -o yaml --export\n```", "```\napiVersion: v1\ndata:\n log.level: err\nkind: ConfigMap\nmetadata:\n annotations:\n kubectl.kubernetes.io/last-applied-configuration: |\n {\"apiVersion\":\"v1\",\"data\":{\"log.level\":\"err\"},\"kind\":\"ConfigMap\",\"metadata\":{\"annotations\":{},\"name\":\"example-config\",\"namespace\":\"default\"}}\n creationTimestamp: null\n name: example-config\n selfLink: /api/v1/namespaces/default/configmaps/example-config\n```", "```\nenv:\n - name: LOG_LEVEL_KEY\n valueFrom:\n configMapKeyRef:\n name: example-config\n Key: log.level\n```", "```\nenvFrom:\n - configMapRef:\n name: example-config\n```", "```\nspec:\n containers:\n - name: test-container\n image: gcr.io/google_containers/busybox\n command: [ \"/bin/sh\", \"-c\", \"echo $(LOG_LEVEL_KEY)\" ]\n env:\n - name: LOG_LEVEL_KEY\n valueFrom:\n configMapKeyRef:\n name: example-config\n key: log.level\n```", "```\n volumeMounts:\n - name: config\n mountPath: /etc/kconfig\n readOnly: true\n```", "```\n volumes:\n - name: config\n configMap:\n name: example-config\n```", "```\nls -al /etc/kconfig/\n```", "```\ntotal 12\ndrwxrwxrwx    3 root     root          4096 Sep 17 00:57 .\ndrwxr-xr-x    1 root     root          4096 Sep 17 00:57 ..\ndrwxr-xr-x    2 root     root          4096 Sep 17 00:57 ..9989_17_09_00_57_49.704362876\nlrwxrwxrwx    1 root     root            31 Sep 17 00:57 ..data -> ..9989_17_09_00_57_49.704362876\nlrwxrwxrwx    1 root     root            16 Sep 17 00:57 log.level -> ..data/log.level\n```", "```\ncat /etc/kconfig/log.level\n```", "```\nErr\n```", "```\nkubectl get pods\n```", "```\nNAME                     READY     STATUS                                  RESTARTS   AGE\nflask-4207440730-xpq8t   0/1       configmaps \"example-config\" not found   0          2d\n```", "```\nkubectl get events\n```", "```\nLASTSEEN   FIRSTSEEN   COUNT     NAME                     KIND         SUBOBJECT                TYPE      REASON                  SOURCE                  MESSAGE\n2d         2d          1         flask-4207440730-30vn0   Pod                                   Normal    Scheduled               default-scheduler       Successfully assigned flask-4207440730-30vn0 to minikube\n2d         2d          1         flask-4207440730-30vn0   Pod                                   Normal    SuccessfulMountVolume   kubelet, minikube       MountVolume.SetUp succeeded for volume \"podinfo\"\n2d         2d          1         flask-4207440730-30vn0   Pod                                   Normal    SuccessfulMountVolume   kubelet, minikube       MountVolume.SetUp succeeded for volume \"default-token-s40w4\"\n2d         2d          2         flask-4207440730-30vn0   Pod          spec.containers{flask}   Normal    Pulling                 kubelet, minikube       pulling image \"quay.io/kubernetes-for-developers/flask:latest\"\n2d         2d          2         flask-4207440730-30vn0   Pod          spec.containers{flask}   Normal    Pulled                  kubelet, minikube       Successfully pulled image \"quay.io/kubernetes-for-developers/flask:latest\"\n2d         2d          2         flask-4207440730-30vn0   Pod          spec.containers{flask}   Warning   Failed                  kubelet, minikube       Error: configmaps \"example-config\" not found\n2d         2d          2         flask-4207440730-30vn0   Pod                                   Warning   FailedSync              kubelet, minikube       Error syncing pod\n2d         2d          1         flask-4207440730         ReplicaSet                            Normal    SuccessfulCreate        replicaset-controller   Created pod: flask-4207440730-30vn0\n2d         2d          1         flask                    Deployment                            Normal    ScalingReplicaSet       deployment-controller   Scaled up replica set flask-4207440730 to 1\n```", "```\necho -n \u201cadmin\u201d > username.txt\necho -n \u201csdgp63lkhsgd\u201d > password.txt\nkubectl create secret generic database-creds --from-file=username.txt --from-file=password.txt\n```", "```\nkubectl get secrets\n```", "```\nNAME                  TYPE                                  DATA      AGE\ndatabase-creds        Opaque                                2         2d\ndefault-token-s40w4   kubernetes.io/service-account-token   3         5d\n```", "```\nkubectl describe secret database-creds\n```", "```\nName: database-creds\nNamespace: default\nLabels: <none>\nAnnotations: <none>\nType: Opaque\nData\n====\npassword.txt: 18 bytes\nusername.txt: 11 bytes\n```", "```\nkubectl get secret database-creds -o yaml --export\n```", "```\napiVersion: v1\ndata:\n  password.txt: 4oCcc2RncDYzbGtoc2dk4oCd\n  username.txt: 4oCcYWRtaW7igJ0=\nkind: Secret\nmetadata:\n  creationTimestamp: null\n  name: database-creds\n  selfLink: /api/v1/namespaces/default/secrets/database-creds\ntype: Opaque\n```", "```\necho \"4oCcc2RncDYzbGtoc2dk4oCd\" | base64 --decode\n```", "```\n\u201csdgp63lkhsgd\u201d\n```", "```\n env:\n - name: DB_PASSWORD\n valueFrom:\n secretKeyRef:\n name: database-creds\n key: password.txt\n```", "```\nkubectl exec flask-509298146-ql1t9 -it -- sh\n```", "```\nenv | grep DB\n```", "```\nDB_PASSWORD=\u201csdgp63lkhsgd\u201d\n```", "```\n volumeMounts:\n - name: secrets\n mountPath: \"/secrets\"\n```", "```\n volumes:\n - name: secrets\n secret:\n secretName: database-creds\n items:\n - key: password.txt\n path: db_password\n```", "```\n/ # ls -l /secrets/\ntotal 0\nlrwxrwxrwx    1 root     root            18 Sep 17 00:49 db_password -> ..data/db_password\n```", "```\n/ # ls -l /secrets/db_password\nlrwxrwxrwx    1 root     root            18 Sep 17 00:49 /secrets/db_password -> ..data/db_password\n```", "```\n/ # cat /secrets/db_password\n\u201csdgp63lkhsgd\u201d\n```", "```\n# CONFIGURATION FOR THE FLASK APP\nkind: ConfigMap\napiVersion: v1\nmetadata:\n name: flask-config\ndata:\n CONFIG_FILE: \u201c/etc/flask-config/feature.flags\u201c\n feature.flags: |\n [features]\n greeting=hello\n debug=true\n```", "```\n spec:\n containers:\n - name: flask\n image: quay.io/kubernetes-for-developers/flask:latest\n ports:\n - containerPort: 5000\n envFrom:\n - configMapRef:\n name: flask-config\n volumeMounts:\n - name: config\n mountPath: /etc/flask-config\n volumes:\n - name: config\n configMap:\n name: flask-config\n```", "```\ngit checkout 0.2.0\n```", "```\nkubectl apply -f deploy/\n```", "```\nkubectl get pods -l app=flask\n```", "```\nNAME                     READY     STATUS    RESTARTS   AGE\nflask-2376258259-p1cwb   1/1       Running   0          8m\n```", "```\nkubectl get pods -l app=flask -o jsonpath='{.items[*].metadata.name}'\n```", "```\nflask-2376258259-p1cwb\n```", "```\nkubectl exec $(kubectl get pods -l app=flask \\\n-o jsonpath='{.items[*].metadata.name}') \\\n-it -- /bin/sh\n```", "```\nenv\n```", "```\nCONFIG_FILE=/etc/flask-config/feature.flags\n```", "```\ncat $CONFIG_FILE\n[features]\ngreeting=hello\ndebug=true\n```", "```\nimport os\nos.environ.get('CONFIG_FILE\u2019)\n```", "```\nimport os\nos.environ.get('CONFIG_FILE\u2019,\u2019./feature.flags\u2019)\n```", "```\nfrom configparser import SafeConfigParser\nfrom pathlib import Path\n# initialize the configuration parser with all the existing environment variables\nparser = SafeConfigParser(os.environ)\n```", "```\nPython 3.6.1 (default, May  2 2017, 15:16:41)\n[GCC 6.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import os\n>>> from configparser import SafeConfigParser\n>>> from pathlib import Path\n>>> # initialize the configuration parser with all the existing environment variables\n... parser = SafeConfigParser(os.environ)\n>>> parser.get('DEFAULT','CONFIG_FILE')\n'/etc/flask-config/feature.flags'\n```", "```\n# default location of ./feature.flags is used if the environment variable isn\u2019t set\nconfig_file = Path(os.environ.get('CONFIG_FILE','/opt/feature.flags'))\n# verify file exists before attempting to read and extend the configuration\nif config_file.is_file():\n parser.read(os.environ.get('CONFIG_FILE'))\n```", "```\n>>> parser.sections()\n['features']\n>>> parser.getboolean('features','debug')\nTrue\n```", "```\n>>> parser.getboolean('features','something-else\u2019,fallback=False)\nFalse\n```", "```\nif __name__ == '__main__':\n debug_enable = parser.getboolean('features','debug',fallback=False)\n app.run(debug=debug_enable,host='0.0.0.0')\n```"]