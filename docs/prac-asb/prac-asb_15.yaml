- en: Getting Started with Ansible Tower
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Ansible Tower
- en: Ansible is very powerful, but it does require the user to use the CLI. In some
    situations, this is not the best option, such as in cases where you need to trigger
    an Ansible job from another job (where APIs would be better) or in cases where
    the person that should trigger a job should only be able to trigger that specific
    job. For these cases, AWX or Ansible Tower are better options to use.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible非常强大，但它需要用户使用CLI。在某些情况下，这不是最佳选择，比如在需要从另一个作业触发Ansible作业的情况下（API可能更好），或者在应该触发作业的人只能触发特定作业的情况下。对于这些情况，AWX或Ansible
    Tower是更好的选择。
- en: The only differences between AWX and Ansible Tower are that AWX is the upstream
    and open source version, while Ansible Tower is the Red Hat and downstream product
    that is officially supported but for a price, and also the delivery method. AWX
    is available as a Docker container that can run everywhere, while Ansible Tower
    is installed on the system and requires specific versions of Linux—more specifically,
    RHEL 7.4+, RHEL 8.0+, and CentOS 7.4+, at the time of writing. In this chapter,
    we will use AWX and talk about AWX, but everything we discuss also applies to
    Ansible Tower.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: AWX和Ansible Tower之间唯一的区别是AWX是上游和开源版本，而Ansible Tower是红帽公司的下游产品，它是官方支持的，但需要付费，并且交付方式也不同。AWX作为一个Docker容器可以在任何地方运行，而Ansible
    Tower安装在系统上，需要特定版本的Linux——具体来说是RHEL 7.4+，RHEL 8.0+和CentOS 7.4+。在撰写本文时，我们将使用AWX并讨论AWX，但我们讨论的一切也适用于Ansible
    Tower。
- en: 'The following topics are covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Installing AWX
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装AWX
- en: Running your first playbook from AWX
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从AWX运行你的第一个playbook
- en: Creating an AWX project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个AWX项目
- en: Creating an inventory
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个清单
- en: Creating a job template
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个作业模板
- en: Running a job
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行一个作业
- en: Controlling access to AWX
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制对AWX的访问
- en: Creating a user
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用户
- en: Creating a team
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个团队
- en: Creating an organization
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个组织
- en: Assigning permissions in AWX
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWX中分配权限
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Although there are several ways to install AWX, we are going to use the suggested
    AWX installation, which is container-based. For this reason, the following software
    needs to be installed on your machine:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有几种安装AWX的方法，我们将使用建议的基于容器的AWX安装。因此，您的计算机上需要安装以下软件：
- en: Ansible 2.4+.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 2.4+。
- en: Docker.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker。
- en: The `docker` Python module.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker` Python模块。'
- en: The `docker-compose` Python module.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`docker-compose` Python模块。'
- en: If your system uses **Security-Enhanced Linux** (**SELinux**), you also need
    the `libselinux` Python module.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您的系统使用**安全增强型Linux**（**SELinux**），您还需要`libselinux` Python模块。
- en: This chapter assumes that you have set up your control host with Ansible, as
    detailed in [Chapter 1](0efc8364-b8a4-4866-9ff4-1e2d09f6724b.xhtml), *Getting
    Started with Ansible*, and that you are using the most recent version available—the
    examples in this chapter were tested with Ansible 2.9\. Although we will give
    specific examples of hostnames in this chapter, you are free to substitute them
    with your own hostname and/or IP addresses, and details of how to do this will
    be provided at the appropriate places. The installation of Docker is beyond the
    scope of this book, but you can either install the version that ships with your
    Linux operating system or Docker CE. The requisite Python modules can be installed either by
    using `pip` or through operating system packages if they are available.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假设您已经按照[第1章](0efc8364-b8a4-4866-9ff4-1e2d09f6724b.xhtml)中详细介绍的方式设置了Ansible的控制主机，并且您正在使用最新版本——本章的示例是使用Ansible
    2.9进行测试的。虽然本章将给出特定的主机名示例，但您可以自由地用您自己的主机名和/或IP地址替换它们，如何做到这一点的细节将在适当的地方提供。Docker的安装超出了本书的范围，但您可以安装您的Linux操作系统提供的版本或Docker
    CE。必需的Python模块可以通过使用`pip`或者通过操作系统包进行安装。
- en: Installing AWX
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装AWX
- en: 'Before we can further discuss AWX, it is best if you have it installed on your
    machine so that you can follow the explanation and immediately start to use AWX.
    The most convenient way of installing AWX is to follow these steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步讨论AWX之前，最好是您已经在您的计算机上安装了它，这样您就可以跟随解释并立即开始使用AWX。安装AWX的最方便的方法是按照以下步骤进行：
- en: 'First of all, we need to clone the AWX Git repository, which can be done by
    running the following command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要克隆AWX Git存储库，可以通过运行以下命令完成：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Modify the `installer/inventory` file by setting sensible values for the passwords
    and secrets (such as `pg_password`, `rabbitmq_password`, `admin_password`, and `secret_key`).
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过设置`installer/inventory`文件来修改密码和秘密的合理值（如`pg_password`，`rabbitmq_password`，`admin_password`和`secret_key`）。
- en: 'Now that we have downloaded the Ansible AWX code and installer, we can move
    into the installer folder and execute the installation by running the following
    code:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经下载了Ansible AWX代码和安装程序，我们可以进入安装程序文件夹，并通过运行以下代码执行安装：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `install.yml` playbook performs the whole installation for us. It starts
    by checking the environment for possible misconfigurations or missing dependencies.
    If everything seems to be correct, it moves on to downloading several Docker images
    (including PostgreSQL, memcached, RabbitMQ, AWX Web, and AWX workers) and then
    runs them all.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`install.yml` playbook 为我们执行整个安装。它首先检查可能的错误配置或缺少依赖项的环境。如果一切正常，它会继续下载几个Docker镜像（包括PostgreSQL，memcached，RabbitMQ，AWX
    Web和AWX workers），然后运行它们。'
- en: 'As soon as the playbook completes, you can check the installation by issuing
    the `docker ps` command, which should output something such as the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦playbook完成，您可以通过发出`docker ps`命令来检查安装，它应该输出类似以下内容：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see from the output above, our system now has a container called
    `awx_web`, which has bound itself to port `80`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如上面的输出所示，我们的系统现在有一个名为`awx_web`的容器，它已经绑定到端口`80`。
- en: You can now access AWX by browsing to `http://<ip address of your AWX host>/`
    and using the credentials you specified in the `inventory` file earlier on in
    this section—note that the default administrator username is `admin` unless you
    change it in the inventory.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过浏览`http://<您的AWX主机的IP地址>/`并使用您在本节早期的`清单`文件中指定的凭据来访问AWX。请注意，默认的管理员用户名是`admin`，除非您在清单中更改了它。
- en: Now, you have learned the necessary steps to install AWX. Let's take a look
    at how to create a project in AWX.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经学会了安装AWX的必要步骤。让我们看看如何在AWX中创建项目。
- en: Running your first playbook from AWX
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从AWX运行您的第一个playbook
- en: As in Ansible, in AWX, the goal is running an Ansible playbook and each playbook
    that is run is called a **job**. Since AWX gives you more flexibility and automation
    than Ansible, it requires a little bit more configuration before you can run your
    first job, so let's dive into it, starting with creating an AWX project.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与Ansible一样，在AWX中，目标是运行一个Ansible playbook，每个运行的playbook称为**作业**。由于AWX比Ansible提供更多的灵活性和自动化，因此在运行第一个作业之前，需要进行一些配置，因此让我们开始创建AWX项目。
- en: Creating an AWX project
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建AWX项目
- en: 'AWX uses the term **project** to identify a repository of Ansible playbooks.
    AWX projects support the placement of playbooks in all major **Source Control
    Management** (**SCM**) systems, such as Git, Mercurial, and SVN, but also support
    playbooks on the filesystem or playbooks provided by Red Hat Insights. To create
    a project, follow these steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: AWX使用术语**项目**来标识Ansible playbooks的存储库。AWX项目支持将playbooks放置在所有主要的**源代码管理**（**SCM**）系统中，例如Git、Mercurial和SVN，还支持文件系统上的playbooks或由Red
    Hat Insights提供的playbooks。要创建项目，请按照以下步骤操作：
- en: 'First of all, you need to go to Projects on the left-hand side menu bar, then
    click on the button with a white plus sign on a green background on the top-left
    section of the screen. This opens up a window such as the following:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要转到左侧菜单栏上的项目，然后单击屏幕左上部的绿色背景上带有白色加号的按钮。这将打开一个窗口，如下所示：
- en: '![](Images/ef39d1cf-4242-4c53-b421-80eeafc52020.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/ef39d1cf-4242-4c53-b421-80eeafc52020.png)'
- en: 'By filling in the name (`Samples Repo`) and selecting Git for SCM TYPE, the
    window grows with new parameters:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过填写名称（`样本库`）并选择`Git`作为`SCM类型`，窗口会增加新的参数：
- en: '![](Images/eb17db9e-b30d-429e-ba6b-328a4191035e.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/eb17db9e-b30d-429e-ba6b-328a4191035e.png)'
- en: You can now add the SCM URL ([https://github.com/ansible/ansible-tower-samples](https://github.com/ansible/ansible-tower-samples))
    and click the SAVE button, which should now be clickable.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以添加SCM URL（[https://github.com/ansible/ansible-tower-samples](https://github.com/ansible/ansible-tower-samples)）并单击现在应该可点击的`保存`按钮。
- en: As we mentioned at the beginning of this section, projects are the system to
    store and use playbooks in AWX. As you can imagine, there are many interesting
    additional configurations for AWX projects—and the most interesting one, in my
    view—is `update revision on launch`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本节开头提到的，项目是在AWX中存储和使用playbooks的系统。您可以想象，AWX项目有许多有趣的附加配置，其中我认为最有趣的是`启动时更新版本`。
- en: If flagged, this option instructs Ansible to always update the playbook's repository
    before running any playbook from that project. This ensures it always executes
    the latest version of the playbook. This is an important feature to enable as
    if you don't have it checked, there is the possibility (and sooner or later, this
    will happen in your environment) that someone notices that there is a problem
    in a playbook and fixes it, then they run the playbook feeling sure that they
    are running the latest version. They then forget to run the synchronization task
    before running the playbook, effectively running the older version of the playbook.
    This could lead to major problems if the previous version was fairly buggy.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果标记了此选项，这将指示Ansible在运行该项目中的任何playbook之前始终更新playbook的存储库。这确保它始终执行playbook的最新版本。这是一个重要的功能，如果您没有勾选它，就有可能（sooner
    or later，在您的环境中会发生）有人注意到playbook中存在问题并修复它，然后他们运行playbook时确信自己运行的是最新版本。然后他们忘记在运行playbook之前运行同步任务，实际上运行的是旧版本的playbook。如果以前的版本非常有bug，这可能会导致重大问题。
- en: The downside of using this option is that every time you execute a playbook,
    two playbooks are effectively run, adding time to your task execution. I think
    this is a very small downside and one that does not offset the benefits of using
    this option.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此选项的缺点是，每次执行playbook时，实际上会运行两个playbook，从而增加了任务执行的时间。我认为这是一个非常小的缺点，不足以抵消使用此选项的好处。
- en: Now, you have learned the necessary steps to create a project in Ansible Tower.
    Let's see how to create an inventory in the next section.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经学会了在Ansible Tower中创建项目的必要步骤。让我们看看如何在下一节中创建清单。
- en: Creating an inventory
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建清单
- en: 'As with Ansible Core, to make AWX aware of the machines present in your environment,
    we use inventories. Inventories, in the AWX world, are not that different from
    their equivalents in Ansible Core. Let''s see how to create your first inventory
    in AWX by following these steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 与Ansible Core一样，为了使AWX了解您的环境中存在的机器，我们使用清单。在AWX世界中，清单与Ansible Core中的等效物并没有太大的不同。让我们看看如何通过以下步骤在AWX中创建您的第一个清单：
- en: Click on the Inventory option in the left-hand side menu bar. You will be redirected
    to the Inventory window, where you can create your first inventory by clicking
    on the button with a white plus sign on a green background on the top-left section
    of the screen. This is different from when we created a new project as this button
    does not immediately open the creation form, but will first ask you if you want
    to create an inventory or a smart inventory.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击左侧菜单栏中的清单选项。您将被重定向到清单窗口，在那里您可以通过单击屏幕左上部带有白色加号的按钮来创建您的第一个清单。这与我们创建新项目时不同，因为此按钮不会立即打开创建表单，而是会首先询问您是否要创建清单或智能清单。
- en: 'After choosing the Inventory option, a box such as the following will appear:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择清单选项后，将出现以下框：
- en: '![](Images/823edcf9-0f7e-45e9-8ae4-6e205489413c.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/823edcf9-0f7e-45e9-8ae4-6e205489413c.png)'
- en: In this window, you need to set a name and then save it. After you have clicked
    SAVE, the Permissions, Groups, Hosts, Sources, and Completed Jobs tabs become
    clickable, so you can continue with the configuration.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此窗口中，您需要设置一个名称，然后保存它。保存后，权限、组、主机、来源和已完成作业选项卡将变为可点击状态，因此您可以继续配置。
- en: Since an empty inventory is not useful in any way, we are going to add `localhost`
    to it.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于空清单毫无用处，我们将向其中添加`localhost`。
- en: 'To do this, select the Hosts tab, then click on the button with a white plus
    sign on a green background on the top-left of the screen. This opens a window,
    as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要做到这一点，选择“主机”选项卡，然后单击屏幕左上角带有白色加号的绿色背景的按钮。这将打开一个窗口，如下所示：
- en: '![](Images/5cfa14a5-404b-4315-b148-410fdeb18d0a.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5cfa14a5-404b-4315-b148-410fdeb18d0a.png)'
- en: 'We then need to add the hostname (`localhost`) and instruct Ansible to use
    the local connection by adding the following code to the VARIABLES box:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要添加主机名（`localhost`）并通过向“变量”框中添加以下代码来指示Ansible使用本地连接：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can now click SAVE, saving our inventory.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以单击“保存”，保存我们的清单。
- en: The first choice we made was between creating an inventory or a smart inventory.
    What's the difference between these options? In AWX, an inventory is something
    very similar to an Ansible Core inventory, but with additional features, such
    as built-in dynamic inventory support, which means you don't need to edit configuration
    files or install additional Python modules. To enable this, simply go to the Sources tab
    within an inventory to choose to auto-populate the inventory with information
    from a source of truth, such as a public cloud provider inventory (**Amazon Web
    Services** (**AWS**), Azure, and **Google Cloud Platform** (**GCP**) are all supported),
    a private cloud inventory (such as VMWare or OpenStack), or other systems, such
    as Red Hat Satellite or a custom script.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要在创建清单或智能清单之间进行选择。这些选项之间有什么区别？在AWX中，清单与Ansible Core清单非常相似，但具有其他功能，例如内置的动态清单支持，这意味着您无需编辑配置文件或安装其他Python模块。要启用此功能，只需转到清单中的“来源”选项卡，选择从真实来源（例如公共云提供程序清单（**亚马逊网络服务**（**AWS**）、Azure和**谷歌云平台**（**GCP**）都受支持），私有云清单（例如VMWare或OpenStack）或其他系统，例如Red
    Hat Satellite或自定义脚本）自动填充清单的选项。
- en: 'A special note about the inventory sources is that the Sourced from a Project option
    provides a form such as the following if chosen:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 关于清单来源的特别说明是，如果选择了“从项目中获取”，将提供以下形式的表单：
- en: '![](Images/06cf1dc8-c1b9-4850-aa0f-5f47766bcfe5.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/06cf1dc8-c1b9-4850-aa0f-5f47766bcfe5.png)'
- en: This is a very interesting feature, in my opinion, since it allows the user
    to check a dynamic inventory script of their own design into a Git repository
    (either in its own repository or one where you also put in playbooks) and AWX
    pulls that information from the repository.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，这是一个非常有趣的功能，因为它允许用户将自己设计的动态清单脚本检入到Git存储库中（可以是独立的存储库，也可以是您放入playbook的存储库），AWX从存储库中提取该信息。
- en: As for projects, when you add a source to your inventory, you might choose to
    select the Update on launch option, which behaves in exactly the same way as the
    Update on launch option behaves for projects. For this reason, I strongly suggest
    you use this option as well.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 至于项目，当您向清单添加源时，您可能选择选择“启动时更新”选项，该选项的行为与项目的“启动时更新”选项的行为完全相同。因此，我强烈建议您也使用此选项。
- en: Smart inventories are inventories that are populated by AWX, starting with the
    hosts present in other inventories by filtering them using the specific smart
    host filter that the user selected during creation. This can be incredibly useful
    for dynamically creating inventories with a specific type of host in them based
    on a filter and saves the need for manually creating lots of different groups—or
    worse, having to add the same host multiple times.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 智能清单是由AWX填充的清单，从其他清单中的主机开始，通过使用用户在创建过程中选择的特定智能主机过滤器对它们进行过滤。这对于动态创建具有特定类型主机的清单并根据过滤器保存手动创建许多不同组的需求或更糟糕的是不得不多次添加相同的主机非常有用。
- en: Now, you have learned the necessary steps to create an inventory in AWX. Let's
    see how to create a job template.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经学会了在AWX中创建清单所需的步骤。让我们看看如何创建作业模板。
- en: Creating a job template
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建作业模板
- en: Now that we have the playbooks in our projects and the hosts in our inventories,
    we can proceed with the creation of a **job template**.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在项目中有了playbook，在清单中有了主机，我们可以继续创建**作业模板**。
- en: 'A job template in AWX is a collection of the configurations that are needed
    to perform a job. This is very similar to the `ansible-playbook` command-line
    options. The reason why we need to create a job template is so that playbook runs
    can be launched with little or no user input, meaning they can be delegated to
    teams who might not know all the details of how a playbook works, or can even
    be run on a scheduled basis without anyone present:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: AWX中的作业模板是执行作业所需的配置的集合。这与`ansible-playbook`命令行选项非常相似。我们需要创建作业模板的原因是，可以启动带有很少或没有用户输入的playbook运行，这意味着它们可以被委派给可能不知道playbook工作原理的团队，甚至可以在没有任何人在场的情况下定期运行：
- en: First of all, you need to click on the Templates option on the left-hand side
    menu bar.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要单击左侧菜单栏上的“模板”选项。
- en: 'You can now create a new template by clicking on the button with a white plus
    sign on a green background on the top-left of the screen. It will ask you whether
    you want to create a job template or a workflow template—you need to choose Job
    template. The following window will appear:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以通过单击屏幕左上角带有白色加号的绿色背景的按钮来创建新模板。它会询问您是否要创建作业模板或工作流模板-您需要选择作业模板。将出现以下窗口：
- en: '![](Images/caa79e71-a3db-431d-8e1a-0d0bb43043d8.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/caa79e71-a3db-431d-8e1a-0d0bb43043d8.png)'
- en: As you can see, there are quite a few fields in this view. The only information
    needed to proceed is the name (we are going to put in `Hello World`), the inventory (we
    are going to choose `Test Inventory`, which we created in the previous, *Creating
    an inventory* section in this chapter), the project (we are going to choose the
    `Samples Repo` project we created in a previous section in this chapter), and
    the playbook (we are going to choose `hello_world.yml`, which is the only playbook
    available). Then, we can click SAVE. Note that because we are running it using
    the local connection to `localhost`, we don't need to create or specify any credentials.
    However, if you were running a job template against one or more remote hosts,
    you would need to create a machine credential and associate it with your job template.
    A machine credential is, for example, an SSH username and password or an SSH username
    and a private key—these are stored securely in the backend database of AWX, meaning
    you can again delegate playbook-related tasks to other teams without actually
    giving them passwords or SSH keys.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，此视图中有相当多的字段。继续所需的唯一信息是名称（我们将输入“Hello World”）、清单（我们将选择在本章节的*创建清单*部分中创建的“测试清单”）、项目（我们将选择在本章节的前一部分中创建的“示例库”项目）和playbook（我们将选择“hello_world.yml”，这是唯一可用的playbook）。然后，我们可以点击保存。请注意，因为我们使用本地连接到“localhost”运行它，所以不需要创建或指定任何凭据。但是，如果您要针对一个或多个远程主机运行作业模板，则需要创建一个机器凭据，并将其与您的作业模板关联。机器凭据，例如SSH用户名和密码或SSH用户名和私钥，这些都安全存储在AWX的后端数据库中，这意味着您可以再次将与playbook相关的任务委派给其他团队，而无需实际提供密码或SSH密钥。
- en: The first thing we had to choose was whether we are creating a job template or
    a workflow template. We chose Job Template since we want to be able to create
    simple jobs out of this template. It's also possible to create more complex jobs,
    which are the composition of multiple job templates, with flow control features
    between one job and the next. This allows more complex situations and scenarios
    where you might want to have multiple jobs (such as the creation of an instance,
    company customization, the setup of Oracle Database, the setup of a MySQL database,
    and so on), but you also want to have a one-click deployment that would, for instance,
    set up the machine, apply all the company customization, and install the MySQL
    database. Obviously, you might also have another deployment that uses all the
    same components except the last one and in its place, it uses the Oracle Database
    piece to create an Oracle Database machine. This allows you to have extreme flexibility
    and to reuse a lot of components, creating multiple, nearly identical playbooks.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先要选择的是创建作业模板还是工作流模板。我们选择了作业模板，因为我们希望能够从这个模板创建简单的作业。也可以创建更复杂的作业，这些作业是由多个作业模板组成，其中一个作业和下一个作业之间具有流程控制功能。这允许更复杂的情况和场景，您可能希望有多个作业（例如创建实例、公司定制、设置Oracle数据库、设置MySQL数据库等），但您也希望有一个一键部署，例如设置机器、应用所有公司定制并安装MySQL数据库。显然，您可能还有另一个部署，使用所有相同的组件，除了最后一个组件，它使用Oracle数据库部分来创建Oracle数据库机器。这使您能够拥有极大的灵活性，并且可以重复使用许多组件，创建多个几乎相同的playbook。
- en: It's interesting to note that many fields in the Job Template creation window
    have an option with the Prompt on launch caption. This is to be able to set this
    value optionally during the creation of the job template, but also allow the user
    running the job to enter/override it at runtime. This can be incredibly valuable
    when you have a field that changes on each run (perhaps the `limit` field, which
    operates in the same way as `--limit` when used with the `ansible-playbook` command)
    or can also be used as a sanity check, as it prompts the user with the value (and
    gives them a chance to modify it) before the playbook is actually run. However,
    it could potentially block scheduled job runs, so exercise caution when enabling
    this feature.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，作业模板创建窗口中的许多字段都有一个带有“启动时提示”的选项。这是为了能够在创建作业模板时可选地设置此值，但也允许运行作业的用户在运行时输入/覆盖它。当每次运行时有一个字段发生变化时（也许是“限制”字段，它与“ansible-playbook”命令一起使用时的操作方式相同），或者可以用作健全性检查，因为它在实际运行playbook之前提示用户输入值（并让他们有机会修改它）。但是，这可能会阻止计划的作业运行，因此在启用此功能时要小心。
- en: Now, you have learned the necessary steps to create a job template in AWX. Let's
    see how to create a job.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经学会了在AWX中创建作业模板的必要步骤。让我们看看如何创建作业。
- en: Running a job
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行作业
- en: 'A job is an instance of a job template, as the name suggests. This means that
    to perform any action on our machine, we have to create a job template instance—or,
    more simply, a job—by following these steps:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 作业是作业模板的一个实例，正如名称所示。这意味着要在我们的机器上执行任何操作，我们必须创建一个作业模板实例，或者更简单地说，一个作业，按照以下步骤进行：
- en: Now that we have set the job template, we can run the job itself. To do so,
    we need to go the Templates item on the left-hand side of the page.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经设置了作业模板，我们可以运行作业本身。要这样做，我们需要转到页面左侧的“模板”项目。
- en: 'Find the job template you want to run (in our case, this is going to be the
    `Hello World` one) and then we click on the little rocket on the right-hand side
    of the page corresponding to the correct job template, as you can see in the following
    screenshot:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到你想要运行的作业模板（在我们的例子中，这将是“Hello World”），然后点击页面右侧对应正确作业模板的小火箭，如下面的截图所示：
- en: '![](Images/9f27f618-60e1-40fe-8d9f-d5e853c63a1b.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9f27f618-60e1-40fe-8d9f-d5e853c63a1b.png)'
- en: 'When a job is running, AWX allows us to follow the job execution in the job''s dashboard,
    as in the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当作业运行时，AWX允许我们在作业的仪表板中跟踪作业执行，如下面的截图所示：
- en: '![](Images/d47f9e61-0b2e-42a7-8859-1a0d37fc8044.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d47f9e61-0b2e-42a7-8859-1a0d37fc8044.png)'
- en: On the right-hand side of the screen, the output of the job loads during the
    execution, while the left-hand side gives us information about the job. One of
    the great things about AWX and Ansible Tower is that they archive this job execution
    output in the backend database, meaning you can, at any point in the future, come
    back and query a job run to see what changed and what happened. This is incredibly
    powerful and useful for occasions such as auditing and policy enforcement.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕的右侧，作业执行期间加载作业输出，而左侧提供有关作业的信息。AWX和Ansible Tower的一个很棒的功能是它们在后端数据库中存档了作业执行输出，这意味着您可以在将来的任何时间回来查询作业运行，查看发生了什么变化。这对于审计和策略执行等场合非常强大和有用。
- en: Now, you have learned the necessary steps to create a job in AWX. Let's see
    how to create a user.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经学会了在AWX中创建作业的必要步骤。让我们看看如何创建用户。
- en: Controlling access to AWX
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制对AWX的访问
- en: In my opinion, one of the biggest advantages of AWX compared to Ansible is the
    fact that AWX allows multiple users to connect and control/perform actions. This
    allows a company to have a single AWX installation for different teams, a whole
    organization, or even multiple organizations.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，AWX相对于Ansible的最大优势之一是，AWX允许多个用户连接和控制/执行操作。这使得公司可以为不同团队、整个组织甚至多个组织安装单个AWX，这是非常有利的。
- en: A **Role-Based Access Control** (**RBAC**) system is in place to manage the
    users' permissions.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于角色的访问控制**（**RBAC**）系统用于管理用户的权限。'
- en: Both AWX and Ansible Tower can link to central directories, such as **Lightweight
    Directory Access Protocol** (**LDAP**) and Azure Active Directory—however, we
    can also create user accounts locally on the AWX server itself. Let's start by
    creating our first user account locally!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: AWX和Ansible Tower都可以链接到中央目录，例如**轻量级目录访问协议**（**LDAP**）和Azure活动目录，但我们也可以在AWX服务器本身上创建本地用户帐户。让我们从在本地创建我们的第一个用户帐户开始！
- en: Creating a user
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户
- en: 'One of the big advantages of AWX is the ability to manage multiple users. This
    allows us to create a user in AWX for each person that is using the AWX system
    so that we can ensure they are only granted the permissions that they need. Also,
    by using individual accounts, we can ensure that we can see who carried out what
    action by using the audit logs. To create a user, follow these steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: AWX的一个重要优势是能够管理多个用户。这使我们可以为每个使用AWX系统的人创建一个用户，以确保他们只被授予他们需要的权限。此外，通过使用个人帐户，我们可以确保通过审计日志查看谁执行了什么操作。要创建用户，请按照以下步骤进行：
- en: Go to the left-hand side menu bar and select the Users option.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到屏幕左侧的菜单栏，选择“用户”选项。
- en: 'You can now see the list of users and you can also create a new one by clicking
    on the button with a white plus sign on a green background at the top-left hand
    side of the screen. A form such as the following will appear:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以看到用户列表，并且可以通过单击屏幕左上角带有白色加号的绿色背景按钮来创建新用户。将出现以下表单：
- en: '![](Images/e825aecb-56c2-4eba-be14-0ac7002844b6.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e825aecb-56c2-4eba-be14-0ac7002844b6.png)'
- en: By adding the email address, the username, and the password (with confirmation),
    you can create the new user.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加电子邮件地址、用户名和密码（确认密码），您可以创建新用户。
- en: 'Users can be of three types:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以分为三种类型：
- en: '**A normal user**: Users of this type do not have any inherited permissions
    and they need to be awarded specific permissions to be able to do anything.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**普通用户**：此类型的用户没有任何继承权限，他们需要被授予特定权限才能执行任何操作。'
- en: '**A system auditor**: Users of this type have full read-only privileges on
    the whole AWX installation.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统审计员**：此类型的用户在整个AWX安装中具有完全只读权限。'
- en: '**A system administrator**: Users of this type have full privileges on the
    whole AWX installation.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统管理员**：此类型的用户在整个AWX安装中拥有完全权限。'
- en: Now, you have learned the necessary steps to create a user in AWX. Let's have
    a brief look at teams.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经学会了在AWX中创建用户的必要步骤。让我们简要了解一下团队。
- en: Creating a team
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建团队
- en: Although having individual user accounts is an incredibly powerful tool, especially
    for enterprise use cases, it would be incredibly inconvenient and cumbersome to
    have to set permissions for each object (such as a job template or an inventory)
    on an individual basis. Every time someone joins a team, their user account has
    to be manually configured with the correct permissions against every object and,
    similarly, be removed if they leave.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管拥有个人用户帐户是一种非常强大的工具，特别是对于企业用例，但对每个对象（例如作业模板或清单）逐个设置权限将非常不便和繁琐。每当有人加入团队时，他们的用户帐户必须手动配置为正确的权限，以对每个对象进行操作，并且如果他们离开，也必须手动删除。
- en: AWX and Ansible Tower have the same concept of user grouping that you would
    find in most other RBAC systems. The only slight difference is that in the user
    interface, they are referred to as **teams**, rather than groups. However, you
    can create teams simply and easily and then add and remove users as you need to.
    Doing this through the user interface is very straightforward and you will find
    the process similar to the way that most RBAC systems handle user groups, so we
    won't go into any more specific details here.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: AWX和Ansible Tower具有与大多数其他RBAC系统中相同的用户分组概念。唯一的细微差别是，在用户界面中，它们被称为**团队**，而不是群组。但是，您可以简单轻松地创建团队，然后根据需要添加和删除用户。通过用户界面进行此操作非常简单直接，您会发现该过程类似于大多数RBAC系统处理用户组的方式，因此我们在这里不会进一步详细说明。
- en: Once you have your teams set up, I recommend that you assign your permissions
    to teams, rather than through individual users, as this will make your management
    of AWX object permissions much easier as your organization grows. Speaking of
    organizations, let's take a look at the concept of organizations in AWX in the
    next section.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您设置好团队，我建议您将权限分配给团队，而不是通过单个用户，因为随着组织的增长，这将使您更轻松地管理AWX对象权限。说到组织，让我们在下一节中看看AWX中组织的概念。
- en: Creating an organization
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建组织
- en: 'Sometimes, you have multiple independent groups of people that you need to
    manage independent machines. For those kinds of scenarios, the use of organizations can
    help you. An organization is basically a tenant of AWX, with its own unique user
    accounts, teams, projects, inventories, and job templates—it''s almost like having
    a separate instance of AWX! To create an organization, you need to perform the
    follow these steps:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能需要管理多个独立的人员组，这些人员组需要管理独立的机器。对于这种情况，可以使用组织来帮助您。组织基本上是AWX的租户，拥有自己独特的用户帐户、团队、项目、清单和作业模板——这几乎就像拥有AWX的单独实例！要创建组织，您需要执行以下步骤：
- en: To create a new organization, you need to go to the left-hand side of the screen
    to the Organizations option.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建新组织，您需要转到屏幕左侧的“组织”选项。
- en: You can then see the existing organizations and proceed to create a new one
    by clicking on the button with a white plus sign on a green background at the
    top-left section of the screen.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您可以查看现有的组织，并通过单击屏幕左上部分带有绿色背景的白色加号按钮来创建新的组织。
- en: 'A window such as the following will appear:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将出现以下窗口：
- en: '![](Images/39582100-fe5a-41dc-9fea-229e85e74c0b.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/39582100-fe5a-41dc-9fea-229e85e74c0b.png)'
- en: Since the only mandatory field is NAME, you can just fill this in and click
    SAVE.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于唯一的强制字段是名称，您只需填写名称并单击保存。
- en: After you create the organization, you can assign any kind of resource to an
    organization, such as projects, templates, inventories, users, and so on. Organizations
    are a simple concept to grasp, but also powerful in terms of segregating roles
    and responsibilities in AWX. Finally, before we complete this section, let's take
    a look at assigning permissions in AWX.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 创建组织后，您可以将任何类型的资源分配给组织，例如项目、模板、清单、用户等。组织是一个简单的概念，但在AWX中在分隔角色和责任方面非常强大。最后，在完成本节之前，让我们看看如何在AWX中分配权限。
- en: Assigning permissions in AWX
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWX中分配权限
- en: You will have noticed—on our journey through configuring our first project,
    inventory, and job template in AWX—that most of the screens we have navigated
    to have a button on them called Permissions. As we navigate the user interface
    with the administrator account, we get to see all the options—but of course, you
    would not want to give every single user administrator permissions.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，在我们通过配置AWX中的第一个项目、清单和作业模板的过程中，我们导航到的大多数屏幕上都有一个名为“权限”的按钮。当我们使用管理员帐户导航用户界面时，我们可以看到所有选项，但当然，您不希望给每个用户都授予管理员权限。
- en: Individual users (or the teams that they belong to) can be granted permissions
    on a per-object basis. So, for example, you could have a team of database administrators
    who only have access to see and execute playbooks on an inventory of database
    servers, using job templates that are specific to their role. Linux system administrators
    could then have access to the inventories, projects, and job templates that are
    specific to their role. AWX hides objects that users don't have the privileges
    to, which means the database administrators never see the Linux system administrator
    objects and vice versa.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 可以根据对象授予个别用户（或他们所属的团队）权限。例如，您可以有一个数据库管理员团队，他们只能访问和执行特定于其角色的数据库服务器清单上的playbook，并使用特定于其角色的作业模板。然后，Linux系统管理员可以访问特定于其角色的清单、项目和作业模板。AWX会隐藏用户没有权限的对象，这意味着数据库管理员永远看不到Linux系统管理员的对象，反之亦然。
- en: 'There are a number of different privilege levels that you can award users (or
    teams) with, which include the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以授予用户（或团队）多种不同的权限级别，包括以下内容：
- en: '**Admin**: This is the organization-level equivalent of a **system administrator**.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员：这相当于系统管理员的组织级别等价物。
- en: '**Execute**: This kind of user can only execute templates that are part of
    the organization.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行：这种用户只能执行组织中的模板。
- en: '**Project admin**: This kind of user can alter any project that is part of
    the organization.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目管理员：这种用户可以更改组织中的任何项目。
- en: '**Inventory admin**: This kind of user can alter any inventory that is part
    of the organization.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单管理员：这种用户可以更改组织中的任何清单。
- en: '**Credential admin**: This kind of user can alter any credential that is part
    of the organization.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 凭证管理员：这种用户可以更改组织中的任何凭证。
- en: '**Workflow admin**: This kind of user can alter any workflow that is part of
    the organization.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作流管理员：这种用户可以更改组织中的任何工作流。
- en: '**Notification admin**: This kind of user can alter any notification that is
    part of the organization.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知管理员：这种用户可以更改组织中的任何通知。
- en: '**Job template admin**: This kind of user can alter any job template that is
    part of the organization.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作业模板管理员：这种用户可以更改组织中的任何作业模板。
- en: '**Auditor**: This is the organization-level equivalent to a **system auditor**.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计员：这相当于系统审计员的组织级别等价物。
- en: '**Member**: This is the organization-level equivalent of a **normal user**.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成员：这相当于普通用户的组织级别等价物。
- en: '**Read**: This kind of user is able to view non-sensible objects that are part
    of the organization.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取：这种用户可以查看组织中的非敏感对象。
- en: That concludes our brief look at RBAC in AWX and our look at this powerful tool.
    AWX is a great addition to the power of Ansible in an enterprise setting and really
    helps ensure that your users can run Ansible playbooks in a manner that is well
    managed, secure, and auditable. We have only scratched the surface in this chapter,
    but hopefully, this chapter has given you a flavor of how AWX can help your team's
    or enterprise's automation journey.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们对AWX中RBAC的简要介绍以及对这个强大工具的介绍。AWX是Ansible在企业环境中强大功能的一个很好的补充，确实有助于确保用户可以以良好管理、安全和可审计的方式运行Ansible
    playbooks。在本章中，我们只是触及了表面，但希望本章能让您了解AWX如何帮助您的团队或企业的自动化之旅。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: AWX and Ansible Tower are powerful, complementary tools that powerfully support
    the use of Ansible in an enterprise or team-based environment. They can help secure
    credentials that you would otherwise have to distribute widely, audit the history
    of playbook runs, and enforce the version control of playbooks. The web-based
    user interface of these tools creates a low barrier for entry for end users, meaning
    playbook runs can easily be delegated to teams who otherwise have little knowledge
    of Ansible (as long as suitable escalation paths are put in place should problems
    arise). In short, when implementing Ansible in a corporate setting, its usage
    should not be considered complete without the addition of Ansible Tower or AWX.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: AWX和Ansible Tower是强大的、互补的工具，强力支持在企业或团队环境中使用Ansible。它们可以帮助安全地存储凭据，否则你将不得不广泛分发，审计playbook运行的历史，并强制执行playbook的版本控制。这些工具的基于Web的用户界面为最终用户创建了一个低门槛，这意味着playbook运行可以轻松委托给否则对Ansible知识很少的团队（只要适当的升级路径被设置好，以防问题出现）。简而言之，在企业环境中实施Ansible时，如果没有添加Ansible
    Tower或AWX，其使用就不应被视为完整。
- en: In this chapter, you learned how to install AWX on your Linux host, as well
    as the necessary steps to run your very first playbook from AWX. You also learned
    about RBAC in AWX and how this can support large, multi-user environments in a
    corporate setting.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何在Linux主机上安装AWX，以及从AWX运行您的第一个playbook所需的步骤。您还了解了AWX中的RBAC以及它如何支持企业环境中的大型多用户环境。
- en: We have now reached the end of this book, since this is the last chapter, and
    I would like to thank you for reading the entire book, and I hope that it has
    taught you what you initially hoped to learn about Ansible.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经到达了本书的结尾，因为这是最后一章，我想感谢您阅读整本书，希望它教会了您最初希望了解的有关Ansible的知识。
- en: Questions
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which objects can you create in Ansible Tower?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: C) 作业模板
- en: A) Users
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: E) 项目
- en: B) Jobs
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: B) 假
- en: C) Job templates
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: A) 用户
- en: D) Modules
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ansible Tower中，您可以创建哪些对象？
- en: E) Projects
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: B) 作业
- en: True or false – AWX is the upstream and open source version of Red Hat Ansible
    Tower.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假 - AWX是Red Hat Ansible Tower的上游和开源版本。
- en: A) True
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: A) 真
- en: B) False
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: D) 模块
