["```\n$ sudo apt-get update \n$ sudo apt-get install software-properties-common \n$ sudo apt-add-repository --yes --update ppa:ansible/ansible \n$ sudo apt-get install ansible\n```", "```\ndeb http://ppa.launchpad.net/ansible/ansible/ubuntu trusty main\n```", "```\n$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 93C4A3FD7BB9C367 \n$ sudo apt-get update \n$ sudo apt-get install ansible\n```", "```\n$ echo 'app-admin/ansible' >> /etc/portage/package.accept_keywords\n$ emerge -av app-admin/ansible\n```", "```\n$ sudo pkg install py36-ansible\n$ sudo make -C /usr/ports/sysutils/ansible install\n```", "```\n$ sudo dnf -y install ansible\n```", "```\n$ sudo yum install epel-release\n$ sudo yum -y install ansible\n```", "```\n$ sudo subscription-manager repos --enable rhel-7-server-ansible-2.9-rpms\n```", "```\n$ pacman -S ansible\n```", "```\n$ ansible --version\nansible 2.9.6\n config file = /etc/ansible/ansible.cfg\n configured module search path = [u'/home/jamesf_local/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']\n ansible python module location = /usr/lib/python2.7/dist-packages/ansible\n executable location = /usr/bin/ansible\n python version = 2.7.17 (default, Nov 7 2019, 10:07:09) [GCC 9.2.1 20191008]\n```", "```\n$ git clone https://github.com/ansible/ansible.git\n$ cd ./ansible\n$ make rpm\n$ sudo rpm -Uvh ./rpm-build/ansible-*.noarch.rpm\n```", "```\n$ xcode-select --install\n$ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```", "```\nxcode-select: error: command line tools are already installed, use \"Software Update\" to update\n```", "```\n$ brew doctor\nPlease note that these warnings are just used to help the Homebrew maintainers\nwith debugging if you file an issue. If everything you use Homebrew for is\nworking fine: please don't worry or file an issue; just ignore this. Thanks!\n\nWarning: Homebrew's sbin was not found in your PATH but you have installed\nformulae that put executables in /usr/local/sbin.\nConsider setting the PATH for example like so\n echo 'export PATH=\"/usr/local/sbin:$PATH\"' >> ~/.bash_profile\n```", "```\n$ sudo easy_install pip\n```", "```\n$ python --version\nPython 2.7.16\n```", "```\n$ brew install ansible\n```", "```\n$ sudo pip install ansible\n```", "```\n$ pip install git+https://github.com/ansible/ansible.git@devel \n```", "```\n$ ansible --version\nansible 2.9.6\n  config file = None\n  configured module search path = ['/Users/james/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']\n  ansible python module location = /usr/local/Cellar/ansible/2.9.4_1/libexec/lib/python3.8/site-packages/ansible\n  executable location = /usr/local/bin/ansible\n  python version = 3.8.1 (default, Dec 27 2019, 18:05:45) [Clang 11.0.0 (clang-1100.0.33.16)]\n```", "```\n$ sudo CFLAGS=-Qunused-arguments CPPFLAGS=-Qunused-arguments pip install ansible\n```", "```\n$ sudo pip install ansible --upgrade\n```", "```\n$ brew upgrade ansible\n```", "```\n$url = \"https://raw.githubusercontent.com/jborean93/ansible-windows/master/scripts/Upgrade-PowerShell.ps1\" \n$file = \"$env:temp\\Upgrade-PowerShell.ps1\" (New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file) \n\nSet-ExecutionPolicy -ExecutionPolicy Unrestricted -Force &$file -Verbose Set-ExecutionPolicy -ExecutionPolicy Restricted -Force\n```", "```\n$selector_set = @{\n    Address = \"*\"\n    Transport = \"HTTPS\"\n}\n$value_set = @{\n    CertificateThumbprint = \"E6CDAA82EEAF2ECE8546E05DB7F3E01AA47D76CE\"\n}\n\nNew-WSManInstance -ResourceURI \"winrm/config/Listener\" -SelectorSet $selector_set -ValueSet $value_set\n```", "```\n$url = \"https://raw.githubusercontent.com/jborean93/ansible-windows/master/scripts/Install-WMF3Hotfix.ps1\" \n$file = \"$env:temp\\Install-WMF3Hotfix.ps1\" \n\n(New-Object -TypeName System.Net.WebClient).DownloadFile($url, $file) powershell.exe -ExecutionPolicy ByPass -File $file -Verbose\n```", "```\nwinrm enumerate winrm/config/Listener\n```", "```\nListener\n    Address = *\n    Transport = HTTP\n    Port = 5985\n    Hostname\n    Enabled = true\n    URLPrefix = wsman\n    CertificateThumbprint\n    ListeningOn = 10.0.2.15, 127.0.0.1, 192.168.56.155, ::1, fe80::5efe:10.0.2.15%6, fe80::5efe:192.168.56.155%8, fe80::\nffff:ffff:fffe%2, fe80::203d:7d97:c2ed:ec78%3, fe80::e8ea:d765:2c69:7756%7\n\nListener\n    Address = *\n    Transport = HTTPS\n    Port = 5986\n    Hostname = SERVER2016\n    Enabled = true\n    URLPrefix = wsman\n    CertificateThumbprint = E6CDAA82EEAF2ECE8546E05DB7F3E01AA47D76CE\n    ListeningOn = 10.0.2.15, 127.0.0.1, 192.168.56.155, ::1, fe80::5efe:10.0.2.15%6, fe80::5efe:192.168.56.155%8, fe80::\nffff:ffff:fffe%2, fe80::203d:7d97:c2ed:ec78%3, fe80::e8ea:d765:2c69:7756%7\n```", "```\n# test out HTTP\nwinrs -r:http://<server address>:5985/wsman -u:Username -p:Password ipconfig \n# test out HTTPS (will fail if the cert is not verifiable)\nwinrs -r:https://<server address>:5986/wsman -u:Username -p:Password -ssl ipconfig \n\n# test out HTTPS, ignoring certificate verification\n$username = \"Username\"\n$password = ConvertTo-SecureString -String \"Password\" -AsPlainText -Force\n$cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $username, $password\n\n$session_option = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck\nInvoke-Command -ComputerName server -UseSSL -ScriptBlock { ipconfig } -Credential $cred -SessionOption $session_option\n```", "```\n$ pip install winrm\n```", "```\n[windows]\n192.168.1.52\n\n[windows:vars]\nansible_user=administrator\nansible_password=password\nansible_connection=winrm\nansible_winrm_server_cert_validation=ignore\n```", "```\n$ ansible -i inventory -m ping windows\n192.168.1.52 | SUCCESS => {\n \"changed\": false,\n \"ping\": \"pong\"\n}\n```", "```\n[webservers]\nweb1.example.com\nweb2.example.com\n\n[apservers]\nap1.example.com\nap2.example.com\n```", "```\n$ ansible webservers -m ping \nweb1.example.com | SUCCESS => {\n \"changed\": false, \n \"ping\": \"pong\"\n}\nweb2.example.com | SUCCESS => {\n \"changed\": false, \n \"ping\": \"pong\"\n}\n$\n```", "```\n$ ssh-agent bash \n$ ssh-add ~/.ssh/id_rsa\n```", "```\n[frontends]\nfrt01.example.com\nfrt02.example.com\n```", "```\n$ ansible frontends -i hosts -m ping\n```", "```\n$ ansible frontends -i hosts -m setup | less\n```", "```\n$ ansible frontends -i hosts -m setup -a \"filter=ansible_distribution*\"\n```", "```\n$ ansible frontends -m ping \nfrontend01.example.com | SUCCESS => {\n \"changed\": false, \n \"ping\": \"pong\"\n}\nfrontend02.example.com | SUCCESS => {\n \"changed\": false, \n \"ping\": \"pong\"\n}\n```", "```\n$ ansible frontend01.example.com -m setup -a \"filter=ansible_distribution*\"\nfrontend01.example.com | SUCCESS => {\n ansible_facts\": {\n \"ansible_distribution\": \"macOS\", \n \"ansible_distribution_major_version\": \"10\", \n \"ansible_distribution_release\": \"18.5.0\", \n \"ansible_distribution_version\": \"10.14.4\"\n }, \n \"changed\": false\n```", "```\n$ ansible frontends -m copy -a \"src=/etc/yum.conf dest=/tmp/yum.conf\"\n```", "```\n$ ansible frontends -m file -a \"dest=/path/user1/new mode=777 owner=user1 group=user1 state=directory\" \n```", "```\n$ ansible frontends -m file -a \"dest=/path/user1/new state=absent\"\n```", "```\n$ ansible frontends -m yum -a \"name=httpd state=present\"\n```", "```\n$ ansible frontends -m yum -a \"name=demo-tomcat-1 state=latest\" \n```", "```\n$ ansible all -m setup \n```", "```\n$ sudo yum -y install python\n```", "```\n$ sudo dnf install python\n```", "```\n$ sudo dnf install python37\n```", "```\n$ sudo apt-get update\n$ sudo apt-get install python3.6\n```", "```\n- name: Bootstrap a host without python2 installed\n  raw: dnf install -y python2 python2-dnf libselinux-python\n\n- name: Run a command that uses non-posix shell-isms (in this example /bin/sh doesn't handle redirection and wildcards together but bash does)\n  raw: cat < /tmp/*txt\n  args:\n    executable: /bin/bash\n\n- name: safely use templated variables. Always use quote filter to avoid injection issues.\n  raw: \"{{package_mgr|quote}}  {{pkg_flags|quote}}  install  {{python|quote}}\"\n```", "```\n$ git clone https://github.com/ansible/ansible.git --recursive\n$ cd ./ansible\n```", "```\n$ source ./hacking/env-setup\n```", "```\n**$ source ./hacking/env-setup.fish**\n```", "```\n$ sudo easy_install pip\n$ sudo pip install -r ./requirements.txt\n```", "```\n$ echo \"ap1.example.com\" > ~/my_ansible_inventory\n$ export ANSIBLE_INVENTORY=~/my_ansible_inventory\n```", "```\n$ ~/ansible/bin/ansible all -m ping\nap1.example.com | SUCCESS => {\n \"changed\": false, \n \"ping\": \"pong\"\n}\n```", "```\n$ git pull --rebase\n$ git submodule update --init --recursive\n```"]