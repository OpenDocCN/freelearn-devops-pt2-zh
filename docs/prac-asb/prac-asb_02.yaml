- en: Getting Started with Ansible
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Ansible
- en: Ansible enables you to easily deploy applications and systems consistently and
    repeatably using native communication protocols such as SSH and WinRM. Perhaps
    most importantly, Ansible is agentless and so requires nothing to be installed
    on the managed systems (except for Python, which, these days, is present on most
    systems). As a result, it enables you to build a simple yet robust automation
    platform for your environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible使您能够使用诸如SSH和WinRM等本机通信协议轻松一致和可重复地部署应用程序和系统。也许最重要的是，Ansible是无代理的，因此在受管系统上不需要安装任何东西（除了Python，这些天大多数系统都有）。因此，它使您能够为您的环境构建一个简单而强大的自动化平台。
- en: Ansible is simple and straightforward to install and comes packaged for most
    modern systems. Its architecture is serverless as well as agentless, and so it
    has a minimal footprint. You can choose to run it from a central server or your
    own laptop—the choice is entirely yours. You can manage anything from a single
    host to hundreds of thousands of remote hosts from one Ansible control machine.
    All remote machines can be (with sufficient playbooks being written) managed by
    Ansible, and with everything created correctly, you may never have to log in to
    any of these machines individually again.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Ansible简单直接，并且适用于大多数现代系统。它的架构是无服务器和无代理的，因此占用空间很小。您可以选择从中央服务器或您自己的笔记本电脑上运行它——完全取决于您。您可以从一个Ansible控制机器管理单个主机到数十万个远程主机。所有远程机器都可以（通过编写足够的playbooks）由Ansible管理，并且一切创建正确的话，您可能再也不需要单独登录这些机器了。
- en: In this chapter, we will begin to teach you the practical skills to cover the
    very fundamentals of Ansible, starting with how to install Ansible on a wide variety
    of operating systems. We will then look at how to configure Windows hosts to enable
    them to be managed with Ansible automation, before delving into greater depth
    on the topic of how Ansible connects to its target hosts. We'll then look at node
    requirements and how to validate your Ansible installation, before finally looking
    at how to obtain and run the very latest Ansible source code if you wish to either
    contribute to its development or gain access to the very latest of features.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始教授您实际技能，涵盖Ansible的基本原理，从如何在各种操作系统上安装Ansible开始。然后，我们将看看如何配置Windows主机以使其能够通过Ansible自动化进行管理，然后深入探讨Ansible如何连接到其目标主机的主题。然后我们将看看节点要求以及如何验证您的Ansible安装，最后看看如何获取和运行最新的Ansible源代码，如果您希望为其开发做出贡献或获得最新的功能。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing and configuring Ansible
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置Ansible
- en: Understanding your Ansible installation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解您的Ansible安装
- en: Running from source versus pre-built RPMs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从源代码运行与预构建的RPM包
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Ansible has a fairly minimal set of system requirements—as such, you should
    find that if you have a machine (either a laptop, a server, or a virtual machine)
    that is capable of running Python, then you will be able to run Ansible on it.
    Later in this chapter, we will demonstrate the installation methods for Ansible
    on a variety of operating systems—it is hence left to you to decide which operating
    systems are right for you.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible有一组相当简单的系统要求——因此，您应该会发现，如果您有一台能够运行Python的机器（无论是笔记本电脑、服务器还是虚拟机），那么您就可以在上面运行Ansible。在本章的后面，我们将演示在各种操作系统上安装Ansible的方法，因此您可以决定哪些操作系统适合您。
- en: The one exception to the preceding statement is Microsoft Windows—although there
    are Python environments available for Windows, there is as yet no native build
    of Ansible for Windows. Readers running more recent versions of Windows will be
    able to install Ansible using Windows Subsystem for Linux (henceforth, WSL) and
    by following the procedures outlined later for their chosen WSL environment (for
    example, if you install Ubuntu on WSL, you should simply follow the instructions
    given in this chapter for installing Ansible on Ubuntu).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 前述声明的唯一例外是Microsoft Windows——尽管Windows有Python环境可用，但目前还没有Windows的原生构建。运行更高版本Windows的读者可以使用Windows子系统来安装Ansible（以下简称WSL），并按照后面为所选的WSL环境（例如，如果您在WSL上安装了Ubuntu，则应该简单地按照本章中为Ubuntu安装Ansible的说明进行操作）的程序进行操作。
- en: Installing and configuring Ansible
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Ansible
- en: Ansible is written in Python and, as such, can be run on a wide range of systems.
    This includes most popular flavors of Linux, FreeBSD, and macOS. The one exception
    to this is Windows, where though native Python distributions exist, there is as
    yet no native Ansible build. As a result, your best option at the time of writing
    is to install Ansible under WSL proceeding as if you were running on a native
    Linux host.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible是用Python编写的，因此可以在各种系统上运行。这包括大多数流行的Linux、FreeBSD和macOS版本。唯一的例外是Windows，尽管存在原生的Python发行版，但目前还没有原生的Ansible构建。因此，在撰写本文时，您最好的选择是在WSL下安装Ansible，就像在本机Linux主机上运行一样。
- en: Once you have established the system on which you wish to run Ansible, the installation
    process is normally simple and straightforward. In the following sections, we
    will discuss how to install Ansible on a wide range of different systems, so that
    most readers should be able to get up and running with Ansible in a matter of
    minutes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您确定了要运行Ansible的系统，安装过程通常是简单直接的。在接下来的章节中，我们将讨论如何在各种不同的系统上安装Ansible，因此大多数读者应该能够在几分钟内开始使用Ansible。
- en: Installing Ansible on Linux and FreeBSD
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux和FreeBSD上安装Ansible
- en: The release cycle for Ansible is usually about four months, and during this
    short release cycle, there are normally many changes, from minor bug fixes to
    major ones, to new features and even sometimes fundamental changes to the language.
    The simplest way to not only get up and running with Ansible but to keep yourself
    up to date is to use the native packages built for your operating system where
    they are available.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible的发布周期通常约为四个月，在这个短暂的发布周期内，通常会有许多变化，从较小的错误修复到较大的错误修复，到新功能，甚至有时对语言进行根本性的更改。不仅可以使用本地包来快速上手并保持最新状态，而且可以使用本地包来保持最新状态。
- en: For example, if you wish to run the latest version of Ansible on top of Linux
    distribution such as CentOS, Fedora, **Red Hat Enterprise Linux** (**RHEL**),
    Debian, and Ubuntu, I strongly recommend that you use an operating system package
    manager such as `yum` on Red Hat-based distributions or `apt` on Debian-based
    ones. In this manner, whenever you update your operating system, you will update
    Ansible simultaneously.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你希望在诸如CentOS、Fedora、Red Hat Enterprise Linux（RHEL）、Debian和Ubuntu等Linux发行版上运行最新版本的Ansible，我强烈建议你使用操作系统包管理器，如基于Red
    Hat的发行版上的`yum`或基于Debian的发行版上的`apt`。这样，每当你更新操作系统时，你也会同时更新Ansible。
- en: Of course, it might be that you need to retain a specific version of Ansible
    for certain purposes—perhaps because your playbooks have been tested with this.
    In this instance, you would almost certainly choose an alternative installation
    method, but this is beyond the scope of this book. Also, it is recommended that,
    where possible, you create and maintain your playbooks in line with documented
    best practices, which should mean that they survive most Ansible upgrades.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，可能是因为你需要保留特定版本的Ansible以用于特定目的——也许是因为你的playbooks已经经过了测试。在这种情况下，你几乎肯定会选择另一种安装方法，但这超出了本书的范围。此外，建议在可能的情况下，按照记录的最佳实践创建和维护你的playbooks，这应该意味着它们能够在大多数Ansible升级中生存下来。
- en: 'The following are some examples showing how you might install Ansible on several
    Linux distributions:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例，展示了如何在几种Linux发行版上安装Ansible：
- en: '**Installing Ansible on Ubuntu**: To install the latest version of the Ansible
    control machine on Ubuntu, the `apt` packaging tool makes it easy using the following
    commands:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在Ubuntu上安装Ansible：**要在Ubuntu上安装最新版本的Ansible控制机，`apt`包装工具使用以下命令很容易：'
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you are running an older version of Ubuntu, you might need to replace `software-properties-common`
    with `python-software-properties` instead.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在运行较旧版本的Ubuntu，你可能需要用`python-software-properties`替换`software-properties-common`。
- en: '**Installing Ansible on Debian:** You should add the following line into your
    `/etc/apt/sources.list` file:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在Debian上安装Ansible：**你应该将以下行添加到你的`/etc/apt/sources.list`文件中：'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You will note that the word `ubuntu` appears in the preceding line of configuration
    along with `trusty`, which is an Ubuntu version. Debian builds of Ansible are,
    at the time of writing, taken from the Ansible repositories for Ubuntu and work
    without issue. You might need to change the version string in the preceding configuration
    according to your Debian build, but for most common use cases, the line quoted
    here will suffice.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到在上述配置行中出现了`ubuntu`一词，以及`trusty`，这是一个Ubuntu版本。在撰写本文时，Debian版本的Ansible是从Ubuntu的Ansible仓库中获取的，并且可以正常工作。你可能需要根据你的Debian版本更改上述配置中的版本字符串，但对于大多数常见用例，这里引用的行就足够了。
- en: 'Once this is done, you can install Ansible on Debian as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你可以按以下方式在Debian上安装Ansible：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Installing Ansible on Gentoo**: To install the latest version of the Ansible
    control machine on Gentoo, the `portage` package manager makes it easy with the
    following commands:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在Gentoo上安装Ansible：**要在Gentoo上安装最新版本的Ansible控制机，`portage`包管理器使用以下命令很容易：'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Installing Ansible on FreeBSD**: To install the latest version of the Ansible
    control machine on FreeBSD, the PKG manager makes it easy with the following commands:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在FreeBSD上安装Ansible：**要在FreeBSD上安装最新版本的Ansible控制机，PKG管理器使用以下命令很容易：'
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Installing Ansible on Fedora**: To install the latest version of the Ansible
    control machine on Fedora, the `dnf` package manager makes it easy with the following
    commands:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在Fedora上安装Ansible：**要在Fedora上安装最新版本的Ansible控制机，`dnf`包管理器使用以下命令很容易：'
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Installing Ansible on CentOS**: To install the latest version of the Ansible
    control machine on CentOS or RHEL, the `yum` package manager makes it easy with
    the following commands:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在CentOS上安装Ansible：**要在CentOS或RHEL上安装最新版本的Ansible控制机，`yum`包管理器使用以下命令很容易：'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you execute the preceding commands on RHEL, you have to make sure that the
    Ansible repository is enabled. If it''s not, you need to enable the relevant repository
    with the following commands:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在RHEL上执行上述命令，你必须确保Ansible仓库已启用。如果没有，你需要使用以下命令启用相关仓库：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Installing Ansible on Arch Linux**: To install the latest version of the
    Ansible control machine on Arch Linux, the `pacman` package manager makes it easy
    with the following commands:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在Arch Linux上安装Ansible：**要在Arch Linux上安装最新版本的Ansible控制机，`pacman`包管理器使用以下命令很容易：'
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once you have installed Ansible on the specific Linux distribution that you
    use, you can begin to explore. Let''s start with a simple example—when you run
    the `ansible` command, you will see output similar to the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在你使用的特定Linux发行版上安装了Ansible，你就可以开始探索。让我们从一个简单的例子开始——当你运行`ansible`命令时，你会看到类似以下的输出：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Those who wish to test the very latest versions of Ansible, fresh from GitHub
    itself, might be interested in building an RPM package for installing to control
    machines. This method is, of course, only suitable for Red Hat-based distributions
    such as Fedora, CentOS, and RHEL. To do this, you will need to clone source code
    from the GitHub repository and build the RPM package as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 那些希望测试来自GitHub最新版本的Ansible的人可能对构建RPM软件包以安装到控制机器感兴趣。当然，这种方法只适用于基于Red Hat的发行版，如Fedora、CentOS和RHEL。为此，您需要从GitHub存储库克隆源代码，并按以下方式构建RPM软件包：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that you have seen how to install Ansible on Linux, we'll take a brief look
    at how to install Ansible on macOS.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了如何在Linux上安装Ansible，我们将简要介绍如何在macOS上安装Ansible。
- en: Installing Ansible on macOS
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在macOS上安装Ansible
- en: In this section, you will learn how to install Ansible on macOS. The easiest
    installation method is to use Homebrew, but you could also use the Python package
    manager. Let's get started by installing Homebrew, which is a fast and convenient
    package management solution for macOS.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何在macOS上安装Ansible。最简单的安装方法是使用Homebrew，但您也可以使用Python软件包管理器。让我们从安装Homebrew开始，这是macOS的快速便捷的软件包管理解决方案。
- en: 'If you don''t already have Homebrew installed on macOS, you can easily install
    it as detailed here:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在macOS上尚未安装Homebrew，可以按照此处的详细说明轻松安装它：
- en: '**Installing Homebrew**: Normally the two commands shown here are all that
    is required to install Homebrew on macOS:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Homebrew：通常，这里显示的两个命令就足以在macOS上安装Homebrew：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you have already installed the Xcode command-line tools for another purpose,
    you might see the following error message:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经为其他目的安装了Xcode命令行工具，您可能会看到以下错误消息：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You may want to open the App Store on macOS and check whether updates to Xcode
    are required, but as long as the command-line tools are installed, your Homebrew
    installation should proceed smoothly.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望在macOS上打开App Store并检查是否需要更新Xcode，但只要安装了命令行工具，您的Homebrew安装应该顺利进行。
- en: 'If you wish to confirm that your installation of Homebrew was successful, you
    can run the following command, which will warn you about any potential issues
    with your install—for example, the following output is warning us that, although
    Homebrew is installed successfully, it is not in our `PATH` and so we may not
    be able to run any executables without specifying their absolute path:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望确认您的Homebrew安装成功，可以运行以下命令，它会警告您有关安装的任何潜在问题，例如，以下输出警告我们，尽管Homebrew已成功安装，但它不在我们的`PATH`中，因此我们可能无法运行任何可执行文件而不指定它们的绝对路径：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Installing the Python package manager (pip)**: If you don''t wish to use
    Homebrew to install Ansible, you can instead install `pip` using with the following
    simple commands:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Python软件包管理器（pip）：如果您不希望使用Homebrew安装Ansible，您可以使用以下简单命令安装`pip`：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Also check that your Python version is at least 2.7, as Ansible won''t run
    on anything older (this should be the case with almost all modern installations
    of macOS):'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 还要检查您的Python版本是否至少为2.7，因为旧版本的Ansible无法运行（几乎所有现代macOS安装都应该是这种情况）：
- en: '[PRE15]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can use either Homebrew or the Python package manager to install the latest
    version of Ansible on macOS as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Homebrew或Python软件包管理器在macOS上安装最新版本的Ansible，方法如下：
- en: '**Installing Ansible via Homebrew**:To install Ansible via Homebrew, run the
    following command:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Homebrew安装Ansible：要通过Homebrew安装Ansible，请运行以下命令：
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Installing Ansible via the Python package manager (pip)**:To install Ansible via
    `pip`, use the following command:'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Python软件包管理器（pip）安装Ansible：要通过`pip`安装Ansible，请使用以下命令：
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You might be interested in running the latest development version of Ansible
    direct from GitHub, and if so, you can achieve this by running the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣直接从GitHub运行最新的Ansible开发版本，那么您可以通过运行以下命令来实现：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that you have installed Ansible using your preferred method, you can run
    the `ansible` command as before, and if all has gone according to plan, you will
    see output similar to the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经使用您喜欢的方法安装了Ansible，您可以像以前一样运行`ansible`命令，如果一切按计划进行，您将看到类似以下的输出：
- en: '[PRE19]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you are running macOS 10.9, you may experience issues when installing Ansible
    using `pip`. The following is a workaround that should resolve the issue:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行macOS 10.9，使用`pip`安装Ansible可能会遇到问题。以下是一个解决此问题的解决方法：
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you want to update your Ansible version, `pip` makes it easy via the following
    command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更新您的Ansible版本，`pip`可以通过以下命令轻松实现：
- en: '[PRE21]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Similarly, you can upgrade it using the `brew` command if that was your install
    method:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果您使用的是`brew`命令进行安装，也可以使用该命令进行升级：
- en: '[PRE22]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now that you have learned the steps to install Ansible on macOS, let's see how
    to configure a Windows host for automation with Ansible.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了在macOS上安装Ansible的步骤，让我们看看如何为Ansible配置Windows主机以进行自动化。
- en: Configuring Windows hosts for Ansible
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Ansible配置Windows主机
- en: As discussed earlier, there is no direct installation method for Ansible on
    Windows—simply, it is recommended that, where available, you install WSL and install
    Ansible as if you were running Linux natively, using the processes outlined earlier
    in this chapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前面讨论的，Windows上没有直接的Ansible安装方法，建议在可用的情况下安装WSL，并像在本章前面概述的过程中那样安装Ansible，就像在Linux上本地运行一样。
- en: Despite this limitation, however, Ansible is not limited to managing just Linux-
    and BSD-based systems—it is capable of the agentless management of Windows hosts
    using the native WinRM protocol, with modules and raw commands making use of PowerShell,
    which is available in every modern Windows installation. In this section, you
    will learn how to configure Windows to enable task automation with Ansible.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这种限制，但是Ansible并不仅限于管理Linux和基于BSD的系统，它能够使用本机WinRM协议对Windows主机进行无代理管理，使用PowerShell模块和原始命令，这在每个现代Windows安装中都可用。在本节中，您将学习如何配置Windows以启用Ansible的任务自动化。
- en: 'Let''s look at what Ansible is capable of when automating Windows hosts:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在自动化Windows主机时，Ansible能做些什么：
- en: Gather facts about remote hosts.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集远程主机的信息。
- en: Install and uninstall Windows features.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和卸载Windows功能。
- en: Manage and query Windows services.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理和查询Windows服务。
- en: Manage user accounts and a list of users.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理用户账户和用户列表。
- en: Manage packages using Chocolatey (a software repository and accompanying management
    tool for Windows).
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Chocolatey（Windows的软件存储库和配套管理工具）来管理软件包。
- en: Perform Windows updates.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行Windows更新。
- en: Fetch multiple files from a remote machine to the Windows host.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从远程机器获取多个文件到Windows主机。
- en: Execute raw PowerShell commands and scripts on target hosts.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在目标主机上执行原始的PowerShell命令和脚本。
- en: Ansible allows you to automate tasks on Windows machines by connecting with
    either a local user or a domain user. You can run actions as an administrator
    using the Windows `runas`support, just as with the `sudo` command on Linux distributions.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible允许你通过连接本地用户或域用户来自动化Windows机器上的任务。你可以像在Linux发行版上使用`sudo`命令一样，以管理员身份运行操作，使用Windows的`runas`支持。
- en: Also, as Ansible is open source software, it is easy to extend its functionality
    by creating your own modules in PowerShell or even sending raw PowerShell commands.
    For example, an InfoSec team could manage filesystem ACLs, configure Windows Firewall,
    and manage hostnames and domain membership with ease, using a mix of native Ansible
    modules and, where necessary, raw commands.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，由于Ansible是开源软件，你可以通过创建自己的PowerShell模块或者发送原始的PowerShell命令来扩展其功能。例如，信息安全团队可以轻松地管理文件系统ACL、配置Windows防火墙，并使用本地Ansible模块和必要时的原始命令来管理主机名和域成员资格。
- en: 'The Windows host must meet the following requirements for the Ansible control
    machine to communicate with it:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Windows主机必须满足以下要求，以便Ansible控制机器与之通信：
- en: Ansible attempts to support all Windows versions that are under either current
    or extended support from Microsoft, including desktop platforms such as Windows
    7, 8.1, and 10, along with server operating systems including Windows Server 2008
    (and R2), 2012 (and R2), 2016, and 2019.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible尝试支持所有在Microsoft的当前或扩展支持下的Windows版本，包括桌面平台，如Windows 7、8.1和10，以及服务器操作系统，包括Windows
    Server 2008（和R2）、2012（和R2）、2016和2019。
- en: You will also need to install PowerShell 3.0 or later and at least .NET 4.0
    on your Windows host.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还需要在Windows主机上安装PowerShell 3.0或更高版本，以及至少.NET 4.0。
- en: You will need to create and activate a WinRM listener, which is described in
    detail later. For security reasons, this is not enabled by default.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要创建和激活一个WinRM监听器，这将在后面详细描述。出于安全原因，这不是默认启用的。
- en: 'Let''s look in more detail at how to prepare a Windows host to be automated
    by Ansible:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看一下如何准备Windows主机以便被Ansible自动化：
- en: 'With regard to prerequisites, you have to make sure PowerShell 3.0 and .NET
    Framework 4.0 are installed on Windows machines. If you''re still using the older
    version of PowerShell or .NET Framework, you need to upgrade them. You are free
    to perform this manually, or the following PowerShell script can handle it automatically
    for you:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于先决条件，你必须确保Windows机器上安装了PowerShell 3.0和.NET Framework 4.0。如果你仍在使用旧版本的PowerShell或.NET
    Framework，你需要升级它们。你可以手动执行这个过程，或者以下的PowerShell脚本可以自动处理：
- en: '[PRE23]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This script works by examining the programs that need to be installed (such
    as .NET Framework 4.5.2) and the required PowerShell version, rebooting if required,
    and setting the username and password parameters. The script will automatically
    restart and log on at reboot so that no more action is required and the script
    will continue until the PowerShell version matches the target version.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本通过检查需要安装的程序（如.NET Framework 4.5.2）和所需的PowerShell版本，如果需要的话重新启动，并设置用户名和密码参数。脚本将在重新启动时自动重新启动和登录，因此不需要更多的操作，脚本将一直持续，直到PowerShell版本与目标版本匹配。
- en: If the username and password parameters aren't set, the script will ask the
    user to reboot and log in manually if necessary, and the next time the user logs
    in, the script will continue at the point where it was interrupted. The process
    continues until the host meets the requirements for Ansible automation.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户名和密码参数没有设置，脚本将要求用户在必要时重新启动并手动登录，下次用户登录时，脚本将在中断的地方继续。这个过程会一直持续，直到主机满足Ansible自动化的要求。
- en: When PowerShell has been upgraded to at least version 3.0, the next step will
    be to configure the WinRM service so that Ansible can connect to it. WinRM service
    configuration defines how Ansible can interface with the Windows hosts, including
    the listener port and protocol.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当PowerShell升级到至少3.0版本后，下一步将是配置WinRM服务，以便Ansible可以连接到它。WinRM服务配置定义了Ansible如何与Windows主机进行交互，包括监听端口和协议。
- en: 'If you have never set up a WinRM listener before, you have three options to
    do this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以前从未设置过WinRM监听器，你有三种选项可以做到这一点：
- en: Firstly, you can use `winrm quickconfig` for HTTP and `winrm quickconfig -transport:https` for
    HTTPS. This is the simplest method to use when you need to run outside of the
    domain environment and just create a simple listener. This process has the advantage
    of opening the required port in the Windows firewall and automatically starting
    the WinRM service.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，你可以使用`winrm quickconfig`来配置HTTP，使用`winrm quickconfig -transport:https`来配置HTTPS。这是在需要在域环境之外运行并创建一个简单监听器时使用的最简单的方法。这个过程的优势在于它会在Windows防火墙中打开所需的端口，并自动启动WinRM服务。
- en: If you are running in a domain environment, I strongly recommend using**Group
    Policy Objects** (**GPOs**) because if the host is the domain member, then the
    configuration is done automatically without user input. There are many documented
    procedures for doing this available, and as this is a very Windows domain-centric
    task, it is beyond the scope of this book.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在域环境中运行，我强烈建议使用**组策略对象**（**GPOs**），因为如果主机是域成员，那么配置会自动完成，无需用户输入。有许多可用的文档化程序可以做到这一点，由于这是一个非常Windows领域中心的任务，它超出了本书的范围。
- en: 'Finally, you can create a listener with a specific configuration by running
    the following PowerShell commands:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，您可以通过运行以下PowerShell命令创建具有特定配置的监听器：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding `CertificateThumbprint` should match the thumbprint of a valid
    SSL certificate that you previously created or imported into the Windows Certificate
    Store.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`CertificateThumbprint`应该与您之前创建或导入到Windows证书存储中的有效SSL证书的指纹匹配。
- en: 'If you are running in PowerShell v3.0, you might face an issue with the WinRM
    service that limits the amount of memory available. This is a known bug and a
    hotfix is available to resolve it. An example process (written in PowerShell)
    to apply this hotfix is given here:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行PowerShell v3.0，您可能会遇到WinRM服务的问题，该问题限制了可用内存的数量。这是一个已知的错误，并且有一个热修复程序可用于解决它。这里提供了一个应用此热修复程序的示例过程（用PowerShell编写）：
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Configuring the WinRM listeners can be a complex task, so it is important to
    be able to check the results of your configuration process. The following command
    (which can be run from Command Prompt) will display the current WinRM listener
    configuration:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 配置WinRM监听器可能是一个复杂的任务，因此重要的是能够检查您的配置过程的结果。以下命令（可以从命令提示符中运行）将显示当前的WinRM监听器配置：
- en: '[PRE26]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If all goes well, you should have output similar to this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您应该会得到类似于此的输出：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'According to the preceding output, two listeners are active—one to listen on
    port `5985` over HTTP and the other to listen on port `5986` over HTTPS providing
    greater security. By way of additional explanation, the following parameters are
    also displayed in the preceding output:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的输出，有两个活动的监听器——一个监听HTTP端口`5985`，另一个监听HTTPS端口`5986`，提供更高的安全性。另外，前面的输出还显示了以下参数的解释：
- en: '`Transport`: This should be set to either HTTPS or HTTPS, though it is strongly
    recommended that you use the HTTPS listener to ensure your automation commands
    are not subject to snooping or manipulation.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`传输`：这应该设置为HTTPS或HTTPS，尽管强烈建议您使用HTTPS监听器，以确保您的自动化命令不会受到窥探或操纵。'
- en: '`Port`: This is the port on which the listener operates, by default `5985`
    for HTTP or `5986` for HTTPS.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`端口`：这是监听器操作的端口，默认情况下为`5985`（HTTP）或`5986`（HTTPS）。'
- en: '`URLPrefix`: This is the URL prefix to communicate with, by default, `wsman`.
    If you change it, you must set the `ansible_winrm_path` host on your Ansible control
    host to the same value.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`URL前缀`：这是与之通信的URL前缀，默认情况下为`wsman`。如果更改它，您必须在Ansible控制主机上设置`ansible_winrm_path`主机为相同的值。'
- en: '`CertificateThumbprint`: If running on an HTTPS listener, this is the certificate
    thumbprint of the Windows Certificate Store used by the connection.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CertificateThumbprint`：如果在HTTPS监听器上运行，这是连接使用的Windows证书存储的证书指纹。'
- en: 'If you need to debug any connection issues after setting up your WinRM listener,
    you may find the following commands valuable as they perform WinRM-based connections
    between Windows hosts without Ansible—hence, you can use them to distinguish whether
    an issue you might be experiencing is related to your Ansible host or whether
    there is an issue with the WinRM listener itself:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在设置WinRM监听器后需要调试任何连接问题，您可能会发现以下命令很有价值，因为它们在Windows主机之间执行基于WinRM的连接，而不使用Ansible，因此您可以使用它们来区分您可能遇到的问题是与您的Ansible主机相关还是WinRM监听器本身存在问题：
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If one of the preceding commands fails, you should investigate your WinRM listener
    setup before attempting to set up or configure your Ansible control host.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的命令中的任何一个失败，您应该在尝试设置或配置Ansible控制主机之前调查您的WinRM监听器设置。
- en: 'At this stage, Windows should be ready to receive communication from Ansible
    over WinRM. To complete this process, you will need to also perform some additional
    configuration on your Ansible control host. First of all, you will need to install
    the `winrm` Python module, which, depending on your control hosts'' configuration,
    may or may not have been installed before. The installation method will vary from
    one operating system to another, but it can generally be installed on most platforms
    with `pip` as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，Windows应该准备好通过WinRM接收来自Ansible的通信。要完成此过程，您还需要在Ansible控制主机上执行一些额外的配置。首先，您需要安装`winrm`
    Python模块，这取决于您的控制主机的配置，可能已经安装或尚未安装。安装方法会因操作系统而异，但通常可以使用`pip`在大多数平台上安装如下：
- en: '[PRE29]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once this is complete, you will need to define some additional inventory variables
    for your Windows hosts—don''t worry too much about inventories for now as we will
    cover these later in this book. The following example is just for reference:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您需要为Windows主机定义一些额外的清单变量——现在不要太担心清单，因为我们将在本书的后面部分介绍这些。以下示例仅供参考：
- en: '[PRE30]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, you should be able to run the Ansible `ping` module to perform an
    end-to-end connectivity test with a command like the following (adjust for your
    inventory):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您应该能够运行Ansible `ping`模块，执行类似以下命令的端到端连接性测试（根据您的清单进行调整）：
- en: '[PRE31]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now that you have learned the necessary steps to configure Windows hosts for
    Ansible, let's see how to connect multiple hosts via Ansible in the next section.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了为Ansible配置Windows主机所需的步骤，让我们在下一节中看看如何通过Ansible连接多个主机。
- en: Understanding your Ansible installation
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解您的Ansible安装
- en: By this stage in this chapter, regardless of your operating system choice for
    your Ansible control machine, you should have a working installation of Ansible
    with which to begin exploring the world of automation. In this section, we will
    carry out a practical exploration of the fundamentals of Ansible to help you to
    understand how to work with it. Once you have mastered these basic skills, you
    will then have the knowledge required to get the most out of the remainder of
    this book. Let's get started with an overview of how Ansible connects to non-Windows
    hosts.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的这个阶段，无论你选择的操作系统是什么，你应该已经有一个可用的 Ansible 安装，可以开始探索自动化的世界。在本节中，我们将进行对 Ansible
    基础知识的实际探索，以帮助你了解如何使用它。一旦掌握了这些基本技能，你就会有足够的知识来充分利用本书的其余部分。让我们从概述 Ansible 如何连接到非
    Windows 主机开始。
- en: Understanding how Ansible connects to hosts
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Ansible 如何连接到主机
- en: With the exception of Windows hosts (as discussed at the end of the previous
    section), Ansible uses the SSH protocol to communicate with hosts. The reasons
    for this choice in the Ansible design are many, not least that just about every
    Linux/FreeBSD/macOS host has it built in, as do many network devices such as switches
    and routers. This SSH service is normally integrated with the operating system
    authentication stack, enabling you to take advantage of things such as Kerberos
    to improve authentication security. Also, features of OpenSSH such as `ControlPersist`
    are used to increase the performance of the automation tasks and SSH jump hosts
    for network isolation and security.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Windows 主机（如前一节末讨论的），Ansible 使用 SSH 协议与主机通信。Ansible 设计选择这种方式的原因有很多，其中最重要的是几乎每台
    Linux/FreeBSD/macOS 主机都内置了它，许多网络设备（如交换机和路由器）也是如此。这个 SSH 服务通常与操作系统身份验证堆栈集成，使你能够利用诸如
    Kerberos 等功能来提高身份验证安全性。此外，OpenSSH 的功能，如 `ControlPersist`，用于增加自动化任务的性能和用于网络隔离和安全的
    SSH 跳转主机。
- en: '`ControlPersist` is enabled by default on most modern Linux distributions as
    part of the OpenSSH server installation. However, on some older operating systems
    such as Red Hat Enterprise Linux 6 (and CentOS 6), it is not supported, and so
    you will not be able to use it. Ansible automation is still perfectly possible,
    but longer playbooks might run slower.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`ControlPersist` 在大多数现代 Linux 发行版中默认启用作为 OpenSSH 服务器安装的一部分。然而，在一些较旧的操作系统上，如
    Red Hat Enterprise Linux 6（和 CentOS 6），它不受支持，因此你将无法使用它。Ansible 自动化仍然是完全可能的，但更长的
    playbooks 可能会运行得更慢。'
- en: Ansible makes use of the same authentication methods that you will already be
    familiar with, and SSH keys are normally the easiest way to proceed as they remove
    the need for users to input the authentication password every time a playbook
    is run. However, this is by no means mandatory, and Ansible supports password
    authentication through the use of the `--ask-pass` switch. If you are connecting
    to an unprivileged account on the hosts, and need to perform the Ansible equivalent
    of running commands under `sudo`, you can also add `--ask-become-pass` when you
    run your playbooks to allow this to be specified at runtime as well.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 使用与你已经熟悉的相同的身份验证方法，SSH 密钥通常是最简单的方法，因为它们消除了用户在每次运行 playbook 时输入身份验证密码的需要。然而，这绝不是强制性的，Ansible
    通过使用 `--ask-pass` 开关支持密码身份验证。如果你连接到主机上的一个非特权帐户，并且需要执行 Ansible 等效的以 `sudo` 运行命令，你也可以在运行
    playbook 时添加 `--ask-become-pass`，以允许在运行时指定这个。
- en: The goal of automation is to be able to run tasks securely but with the minimum
    of user intervention. As a result, it is highly recommended that you use SSH keys
    for authentication, and if you have several keys to manage, then be sure to make
    use of `ssh-agent`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化的目标是能够安全地运行任务，但最少的用户干预。因此，强烈建议你使用 SSH 密钥进行身份验证，如果你有多个密钥需要管理，那么一定要使用 `ssh-agent`。
- en: Every Ansible task, whether it is run singly or as part of a complex playbook,
    is run against an inventory. An inventory is, quite simply, a list of the hosts
    that you wish to run the automation commands against. Ansible supports a wide
    range of inventory formats, including the use of dynamic inventories, which can
    populate themselves automatically from an orchestration provider (for example,
    you can generate an Ansible inventory dynamically from your Amazon EC2 instances,
    meaning you don't have to keep up with all of the changes in your cloud infrastructure).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Ansible 任务，无论是单独运行还是作为复杂 playbook 的一部分运行，都是针对清单运行的。清单就是你希望运行自动化命令的主机列表。Ansible
    支持各种清单格式，包括使用动态清单，它可以自动从编排提供程序中填充自己（例如，你可以动态生成一个 Ansible 清单，从你的 Amazon EC2 实例中，这意味着你不必跟上云基础设施中的所有变化）。
- en: Dynamic inventory plugins have been written for most major cloud providers (for
    example, Amazon EC2, Google Cloud Platform, and Microsoft Azure), as well as on-premises
    systems such as OpenShift and OpenStack. There are even plugins for Docker. The
    beauty of open source software is that, for most of the major use cases you can
    dream of, someone has already contributed the code and so you don't need to figure
    it out or write it for yourself.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 动态清单插件已经为大多数主要的云提供商（例如，Amazon EC2，Google Cloud Platform 和 Microsoft Azure），以及本地系统（如
    OpenShift 和 OpenStack）编写。甚至还有 Docker 的插件。开源软件的美妙之处在于，对于大多数你能想到的主要用例，有人已经贡献了代码，所以你不需要自己去弄清楚或编写它。
- en: Ansible's agentless architecture and the fact that it doesn't rely on SSL means
    that you don't need to worry about DNS not being set up or even time skew problems
    as a result of NTP not working—these can, in fact, be tasks performed by an Ansible
    playbook! Ansible really was designed to get your infrastructure running from
    a virtually bare operating system image.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 的无代理架构以及它不依赖于 SSL 的事实意味着你不需要担心 DNS 未设置或者由于 NTP 不工作而导致的时间偏移问题——事实上，这些都可以由
    Ansible playbook 执行！事实上，Ansible 确实是设计用来从几乎空白的操作系统镜像中运行你的基础设施。
- en: 'For now, let''s focus on the INI formatted inventory. An example is shown here
    with four servers, each split into two groups. Ansible commands and playbooks
    can be run against an entire inventory (that is, all four servers), one or more
    groups (for example, `webservers`), or even down to a single server:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，让我们专注于INI格式的清单。下面是一个示例，其中有四台服务器，每台服务器分成两个组。可以对整个清单（即所有四台服务器）、一个或多个组（例如`webservers`）甚至单个服务器运行Ansible命令和playbooks：
- en: '[PRE32]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let''s use this inventory file along with the Ansible `ping` module, which
    is used to test whether Ansible can successfully perform automation tasks on the
    inventory host in question. The following example assumes you have installed the
    inventory in the default location, which is normally `/etc/ansible/hosts`. When
    you run the following `ansible` command, you see a similar output to this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这个清单文件以及Ansible的`ping`模块，用于测试Ansible是否能够成功在所讨论的清单主机上执行自动化任务。以下示例假设您已将清单安装在默认位置，通常为`/etc/ansible/hosts`。当您运行以下`ansible`命令时，您将看到类似于这样的输出：
- en: '[PRE33]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Notice that the `ping` module was only run on the two hosts in the `webservers`
    group and not the entire inventory—this was by virtue of us specifying this in
    the command-line parameters.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`ping`模块仅在`webservers`组中的两台主机上运行，而不是整个清单——这是因为我们在命令行参数中指定了这一点。
- en: The `ping` module is one of many thousands of modules for Ansible, all of which
    perform a given set of tasks (from copying files between hosts, to text substitution,
    to complex network device configuration). Again, as Ansible is open source software,
    there is a veritable army of coders out there who are writing and contributing
    modules, which means if you can dream of a task, there's probably already an Ansible
    module for it. Even in the instance that no module exists, Ansible supports sending
    raw shell commands (or PowerShell commands for Windows hosts) and so even in this
    instance, you can complete your desired tasks without having to move away from
    Ansible.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`ping`模块是Ansible的成千上万个模块之一，所有这些模块都执行一组给定的任务（从在主机之间复制文件到文本替换，再到复杂的网络设备配置）。同样，由于Ansible是开源软件，有大量的编码人员在编写和贡献模块，这意味着如果您能想到一个任务，可能已经有一个Ansible模块。即使没有模块存在的情况下，Ansible支持发送原始shell命令（或者对于Windows主机的PowerShell命令），因此即使在这种情况下，您也可以完成所需的任务，而无需离开Ansible。'
- en: As long as the Ansible control host can communicate with the hosts in your inventory,
    you can automate your tasks. However, it is worth giving some consideration to
    where you place your control host. For example, if you are working exclusively
    with a set of Amazon EC2 machines, it arguably would make more sense for your
    Ansible control machine to be an EC2 instance—in this way, you are not sending
    all of your automation commands over the internet. It also means that you don't
    need to expose the SSH port of your EC2 hosts to the internet, hence keeping them
    more secure.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 只要Ansible控制主机能够与清单中的主机通信，您就可以自动化您的任务。但是，值得考虑一下您放置控制主机的位置。例如，如果您专门使用一组Amazon
    EC2机器，您的Ansible控制机器最好是一个EC2实例——这样，您就不需要通过互联网发送所有自动化命令。这也意味着您不需要将EC2主机的SSH端口暴露给互联网，因此使它们更安全。
- en: We have so far covered a brief explanation of how Ansible communicates with
    its target hosts, including what inventories are and the importance of SSH communication
    to all except Windows hosts. In the next section, we will build on this by looking
    in greater detail at how to verify your Ansible installation.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经简要解释了Ansible如何与其目标主机通信，包括清单是什么以及对所有主机进行SSH通信的重要性，除了Windows主机。在下一节中，我们将通过更详细地查看如何验证您的Ansible安装来进一步了解这一点。
- en: Verifying the Ansible installation
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证Ansible安装
- en: In this section, you will learn how you can verify your Ansible installation
    with simple ad hoc commands.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何使用简单的临时命令验证您的Ansible安装。
- en: As discussed previously, Ansible can authenticate with your target hosts several
    ways. In this section, we will assume you want to make use of SSH keys, and that
    you have already generated your public and private key pair and applied your public
    key to all of your target hosts that you will be automating tasks on.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前讨论的，Ansible可以通过多种方式对目标主机进行身份验证。在本节中，我们将假设您希望使用SSH密钥，并且您已经生成了公钥和私钥对，并将公钥应用于您将自动化任务的所有目标主机。
- en: The `ssh-copy-id` utility is incredibly useful for distributing your public
    SSH key to your target hosts before you proceed any further. An example command
    might be `ssh-copy-id -i ~/.ssh/id_rsa ansibleuser@web1.example.com`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`ssh-copy-id`实用程序非常有用，可以在继续之前将您的公共SSH密钥分发到目标主机。例如命令可能是`ssh-copy-id -i ~/.ssh/id_rsa
    ansibleuser@web1.example.com`。'
- en: 'To ensure Ansible can authenticate with your private key, you could make use
    of `ssh-agent`—the commands show a simple example of how to start `ssh-agent`
    and add your private key to it. Naturally, you should replace the path with that
    to your own private key:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保Ansible可以使用您的私钥进行身份验证，您可以使用`ssh-agent`——命令显示了如何启动`ssh-agent`并将您的私钥添加到其中的简单示例。当然，您应该将路径替换为您自己私钥的路径：
- en: '[PRE34]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'As we discussed in the previous section, we must also define an inventory for
    Ansible to run against. Another simple example is shown here:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一节中讨论的，我们还必须为Ansible定义一个清单。下面是另一个简单的示例：
- en: '[PRE35]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `ansible` command that we used in the previous section has two important
    switches that you will almost always use: `-m <MODULE_NAME>` to run a module on
    the hosts from your inventory that you specify and, optionally, the module arguments
    passed using the `-a OPT_ARGS` switch. Commands run using the `ansible` binary
    are known as ad hoc commands.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一节中使用的`ansible`命令有两个重要的开关，您几乎总是会使用：`-m <MODULE_NAME>`在您指定的清单主机上运行一个模块，还可以使用`-a
    OPT_ARGS`开关传递模块参数。使用`ansible`二进制运行的命令称为临时命令。
- en: 'Following are three simple examples that demonstrate ad hoc commands—they are
    also valuable for verifying both the installation of Ansible on your control machine
    and the configuration of your target hosts, and they will return an error if there
    is an issue with any part of the configuration:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是三个简单示例，演示了临时命令-它们也对验证您控制机器上的Ansible安装和目标主机的配置非常有价值，如果配置的任何部分存在问题，它们将返回错误：
- en: '**Ping hosts**: You can perform an Ansible "ping" on your inventory hosts using
    the following command:'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ping主机**：您可以使用以下命令对您的库存主机执行Ansible“ping”：'
- en: '[PRE36]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '**Display gathered facts**:You can display gathered facts about your inventory
    hosts using the following command:'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示收集的事实：您可以使用以下命令显示有关您的库存主机的收集事实：
- en: '[PRE37]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '**Filter gathered facts**: You can filter gathered facts using the following
    command:'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过滤收集的事实**：您可以使用以下命令过滤收集的事实：'
- en: '[PRE38]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'For every ad hoc command you run, you will get a response in JSON format—the
    following example output results from running the `ping` module successfully:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对于您运行的每个临时命令，您将以JSON格式获得响应-以下示例输出是成功运行“ping”模块的结果：
- en: '[PRE39]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Ansible can also gather and return "facts" about your target hosts—facts are
    all manner of useful information about your hosts, from CPU and memory configuration
    to network parameters, to disk geometry. These facts are intended to enable you
    to write intelligent playbooks that perform conditional actions—for example, you
    might only want to install a given software package on hosts with more than 4
    GB of RAM or perhaps perform a specific configuration only on macOS hosts. The
    following is an example of the filtered facts from a macOS-based host:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible还可以收集并返回有关目标主机的“事实”-事实是有关主机的各种有用信息，从CPU和内存配置到网络参数，再到磁盘几何。这些事实旨在使您能够编写智能的playbook，执行条件操作-例如，您可能只想在具有4GB以上RAM的主机上安装特定软件包，或者仅在macOS主机上执行特定配置。以下是来自基于macOS的主机的过滤事实的示例：
- en: '[PRE40]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Ad hoc commands are incredibly powerful, both for verifying your Ansible installation
    and for learning Ansible and how to work with modules as you don''t need to write
    a whole playbook—you can just run a module with an ad hoc command and learn how
    it responds. Here are some more ad hoc examples for you to consider:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 临时命令非常强大，既可以用于验证您的Ansible安装，也可以用于学习Ansible以及如何使用模块，因为您不需要编写整个playbook-您只需运行一个临时命令并学习它如何响应。以下是一些供您考虑的其他临时示例：
- en: 'Copy a file from the Ansible control host to all hosts in the `frontends` group
    with the following command:'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令将文件从Ansible控制主机复制到“前端”组中的所有主机：
- en: '[PRE41]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create a new directory on all hosts in the `frontends` inventory group, and
    create it with specific ownership and permissions:'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“前端”库存组中的所有主机上创建一个新目录，并使用特定的所有权和权限创建它：
- en: '[PRE42]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Delete a specific directory from all hosts in the `frontends` group with the
    following command:'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令从“前端”组中的所有主机中删除特定目录：
- en: '[PRE43]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Install the `httpd` package with `yum` if it is not already present—if it is
    present, do not update it. Again, this applies to all hosts in the `frontends` inventory
    group:'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`yum`安装`httpd`软件包，如果尚未安装-如果已安装，则不更新。同样，这适用于“前端”库存组中的所有主机：
- en: '[PRE44]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The following command is similar to the previous one, except that changing
    `state=present` to `state=latest` causes Ansible to install the (latest version
    of the) package if it is not present, and update it to the latest version if it
    is present:'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下命令与上一个命令类似，只是将`state=present`更改为`state=latest`会导致Ansible安装（最新版本的）软件包（如果尚未安装），并将其更新到最新版本（如果已安装）：
- en: '[PRE45]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Display all facts about all the hosts in your inventory (warning—this will
    produce a lot of JSON!):'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示有关库存中所有主机的所有事实（警告-这将产生大量的JSON！）：
- en: '[PRE46]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Now that you have learned more about verifying your Ansible installation and
    about how to run ad hoc commands, let's proceed to look in a bit more detail at
    the requirements of the nodes that are to be managed by Ansible.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了如何验证您的Ansible安装以及如何运行临时命令，让我们继续更详细地查看由Ansible管理的节点的要求。
- en: Managed node requirements
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 受管节点要求
- en: So far, we have focused almost exclusively on the requirements for the Ansible
    control host and have assumed that (except for the distribution of the SSH keys)
    the target hosts will just work. This, of course, is not always the case, and
    for example, while a modern installation of Linux installed from an ISO will often
    just work, cloud operating system images are often stripped down to keep them
    small, and so might lack important packages such as Python, without which Ansible
    cannot operate.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们几乎完全专注于Ansible控制主机的要求，并假设（除了分发SSH密钥之外）目标主机将正常工作。当然，并非总是如此，例如，从ISO安装的现代Linux安装通常会正常工作，云操作系统映像通常会被剥离以保持其小巧，因此可能缺少重要的软件包，如Python，没有Python，Ansible无法运行。
- en: If your target hosts are lacking Python, it is usually easy to install it through
    your operating system's package management system. Ansible requires you to install
    either Python version 2.7 or 3.5 (and above) on both the Ansible control machine
    (as we covered earlier in this chapter) and on every managed node. Again, the
    exception here is Windows, which relies on PowerShell instead.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的目标主机缺少Python，通常可以通过操作系统的软件包管理系统轻松安装它。Ansible要求您在Ansible控制机器（正如我们在本章前面所介绍的）和每个受管节点上安装Python版本2.7或3.5（及以上）。再次强调，这里的例外是Windows，它依赖于PowerShell。
- en: 'If you are working with operating system images that lack Python, the following
    commands provide a quick guide to getting Python installed:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用缺少Python的操作系统映像，以下命令提供了快速安装Python的指南：
- en: 'To install Python using `yum` (on older releases of Fedora and CentOS/RHEL
    7 and below), use the following:'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使用`yum`安装Python（在旧版本的Fedora和CentOS/RHEL 7及以下版本中），请使用以下命令：
- en: '[PRE47]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'On RHEL and CentOS version 8 and newer versions of Fedora, you would use the
    `dnf` package manager instead:'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在RHEL和CentOS 8及更新版本的Fedora上，您将使用`dnf`软件包管理器：
- en: '[PRE48]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'You might also elect to install a specific version to suit your needs, as in
    this example:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以选择安装特定版本以满足您的需求，就像这个例子一样：
- en: '[PRE49]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'On Debian and Ubuntu systems, you would use the `apt` package manager to install
    Python, again specifying a version if required (the example given here is to install
    Python 3.6 and would work on Ubuntu 18.04):'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Debian和Ubuntu系统上，您将使用`apt`软件包管理器安装Python，如果需要的话再指定一个版本（这里给出的示例是安装Python 3.6，在Ubuntu
    18.04上可以工作）：
- en: '[PRE50]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The `ping` module we discussed earlier in this chapter for Ansible not only
    checks connectivity and authentication with your managed hosts, but it uses the
    managed hosts' Python environment to perform some basic host checks. As a result,
    it is a fantastic end-to-end test to give you confidence that your managed hosts
    are configured correctly as hosts, with the connectivity and authentication set
    up perfectly, but where Python is missing, it would return a `failed` result.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章前面讨论的Ansible的`ping`模块不仅检查与受控主机的连接和身份验证，而且使用受控主机的Python环境执行一些基本主机检查。因此，它是一个很棒的端到端测试，可以让您确信您的受控主机已正确配置为主机，具有完美的连接和身份验证设置，但如果缺少Python，它将返回一个`failed`结果。
- en: 'Of course, a perfect question at this stage would be: how can Ansible help
    if you roll out 100 cloud servers using a stripped-down base image without Python?
    Does that mean you have to manually go through all 100 nodes and install Python
    by hand before you can start automating?'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在这个阶段一个完美的问题是：如果您使用一个精简的基础镜像在云服务器上部署了100个节点，Ansible如何帮助您？这是否意味着您必须手动检查所有100个节点并手动安装Python才能开始自动化？
- en: Thankfully, Ansible has you covered even in this case, thanks to the `raw` module.
    This module is used to send raw shell commands to the managed nodes—and it works
    both with SSH-managed hosts and Windows PowerShell-managed hosts. As a result,
    you can use Ansible to install Python on a whole set of systems from which it
    is missing, or even run an entire shell script to bootstrap a managed node. Most
    importantly, the raw module is one of very few that does not require Python to
    be installed on the managed node, so it is perfect for our use case where we must
    roll out Python to enable further automation.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，即使在这种情况下，Ansible也可以帮助您，这要归功于`raw`模块。这个模块用于向受控节点发送原始shell命令——它既适用于SSH管理的主机，也适用于Windows
    PowerShell管理的主机。因此，您可以使用Ansible在缺少Python的整套系统上安装Python，甚至运行一个整个的shell脚本来引导一个受控节点。最重要的是，`raw`模块是为数不多的几个不需要在受控节点上安装Python的模块之一，因此它非常适合我们的用例，我们必须安装Python以启用进一步的自动化。
- en: 'The following are some examples of tasks in an Ansible playbook that you might
    use to bootstrap a managed node and prepare it for Ansible management:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Ansible playbook中的一些任务示例，您可以使用它们来引导受控节点并为其准备好Ansible管理：
- en: '[PRE51]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: We have now covered the basics of setting up Ansible both on the control host
    and on the managed nodes, and we have given you a brief primer on configuring
    your first connections. Before we wrap up this chapter, we will look in more detail
    at how you might run the latest development version of Ansible, direct from GitHub.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经介绍了在控制主机和受控节点上设置Ansible的基础知识，并且为您提供了配置第一个连接的简要入门。在结束本章之前，我们将更详细地看一下如何从GitHub直接运行最新的Ansible开发版本。
- en: Running from source versus pre-built RPMs
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码运行与预构建的RPM包
- en: Ansible is always rapidly evolving, and there may be times, either for early
    access to a new feature (or module) or as part of your own development efforts,
    that you wish to run the latest, bleeding-edge version of Ansible from GitHub.
    In this section, we will look at how you can quickly get up and running with the
    source code. The method outlined in this chapter has the advantage that, unlike
    package-manager-based installs that must be performed as root, the end result
    is a working installation of Ansible without the need for any root privileges.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible一直在快速发展，可能会有时候，无论是为了早期访问新功能（或模块），还是作为您自己的开发工作的一部分，您希望从GitHub运行最新的、最前沿的Ansible版本。在本节中，我们将看一下如何快速启动并运行源代码。本章概述的方法有一个优点，即与基于软件包管理器的安装不同，后者必须以root身份执行，最终结果是安装了一个可工作的Ansible，而无需任何root权限。
- en: 'Let''s get started by checking out the very latest version of the source code
    from GitHub:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始从GitHub检出最新版本的源代码：
- en: 'You must clone the sources from the `git` repository first, and then change
    to the directory containing the checked-out code:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须首先从`git`存储库克隆源代码，然后切换到包含已检出代码的目录：
- en: '[PRE52]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Before you can proceed with any development work, or indeed to run Ansible
    from the source code, you must set up your shell environment. Several scripts
    are provided for just that purpose, each being suitable for different shell environments.
    For example, if you are running the venerable Bash shell, you would set up your
    environment with the following command:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进行任何开发工作之前，或者确保从源代码运行Ansible，您必须设置您的shell环境。为此提供了几个脚本，每个脚本适用于不同的shell环境。例如，如果您使用古老的Bash
    shell，您将使用以下命令设置您的环境：
- en: '[PRE53]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Conversely, if you are running the Fish shell, you would set up your environment
    as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果您使用Fish shell，您将设置您的环境如下：
- en: '[PRE54]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Once you have set up your environment, you must install the `pip` Python package
    manager, and then use this to install all of the required Python packages (note:
    you can skip the first command if you already have `pip` on your system):'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置好环境后，您必须安装`pip` Python软件包管理器，然后使用它来安装所有所需的Python软件包（注意：如果您的系统上已经有`pip`，则可以跳过第一个命令）：
- en: '[PRE55]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Note that, when you have run the `env-setup` script, you'll be running from
    your source code checkout, and the default inventory file will be `/etc/ansible/hosts`.
    You can optionally specify an inventory file other than `/etc/ansible/hosts`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当您运行`env-setup`脚本时，您将从您的源代码检出运行，并且默认的清单文件将是`/etc/ansible/hosts`。您可以选择指定一个除`/etc/ansible/hosts`之外的清单文件。
- en: 'When you run the `env-setup` script, Ansible runs from the source code checkout,
    and the default inventory file is `/etc/ansible/hosts`; however, you can optionally
    specify an inventory file wherever you want on your machine (see *Working with
    Inventory**,* [https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#inventory](https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#inventory), for
    more details). The following command provides an example of how you might do this,
    but obviously, your filename and contents are almost certainly going to vary:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您运行`env-setup`脚本时，Ansible将从源代码检出运行，默认的清单文件是`/etc/ansible/hosts`；但是，您可以选择在您的机器上任何地方指定清单文件（有关更多详细信息，请参见*使用清单*，[https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#inventory](https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html#inventory)）。以下命令提供了一个示例，说明您可能会这样做，但显然，您的文件名和内容几乎肯定会有所不同：
- en: '[PRE56]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '`ANSIBLE_INVENTORY` applies to Ansible version 1.9 and above and replaces the
    deprecated `ANSIBLE_HOSTS` environment variable.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`ANSIBLE_INVENTORY`适用于Ansible版本1.9及以上，并替换了已弃用的`ANSIBLE_HOSTS`环境变量。'
- en: 'Once you have completed these steps, you can run Ansible exactly as we have
    discussed throughout this chapter, with the exception that you must specify the
    absolute path to it. For example, if you set up your inventory as in the preceding
    code and clone the Ansible source into your home directory, you could run the
    ad hoc `ping` command that we are now familiar with, as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，您可以像本章中讨论的那样运行Ansible，唯一的例外是您必须指定它的绝对路径。例如，如果您像前面的代码中设置清单并将Ansible源克隆到您的主目录中，您可以运行我们现在熟悉的临时`ping`命令，如下所示：
- en: '[PRE57]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Of course, the Ansible source tree is constantly changing and it is unlikely
    you would just want to stick with the copy you cloned. When the time comes to
    update it, you don''t need to clone a new copy; you can simply update your existing
    working copy using the following commands (again, assuming that you initially
    cloned the source tree into your home directory):'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Ansible源树不断变化，您不太可能只想坚持您克隆的副本。当需要更新时，您不需要克隆新副本；您可以使用以下命令更新现有的工作副本（同样，假设您最初将源树克隆到您的主目录中）：
- en: '[PRE58]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: That concludes our introduction to setting up both your Ansible control machine
    and managed nodes. It is hoped that the knowledge you have gained in this chapter
    will help you to get your own Ansible installation up and running and set the
    groundwork for the rest of this book.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们对设置您的Ansible控制机和受管节点的介绍。希望您在本章中获得的知识将帮助您启动并为本书的其余部分奠定基础。
- en: Summary
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Ansible is a powerful and versatile yet simple automation tool, of which the
    key benefits are its agentless architecture and its simple installation process.
    Ansible was designed to get you from zero to automation rapidly and with minimal
    effort, and we have demonstrated the simplicity with which you can get up and
    running with Ansible in this chapter.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible是一个强大而多才多艺的简单自动化工具，其主要优势是其无代理架构和简单的安装过程。Ansible旨在让您迅速实现从零到自动化，并以最小的努力，我们已经在本章中展示了您可以如何轻松地开始使用Ansible。
- en: In this chapter, you learned the basics of setting up Ansible—how to install
    it to control other hosts and the requirements for nodes being managed by Ansible.
    You learned about the fundamentals required to set up SSH and WinRM for Ansible
    automation, as well as how to bootstrap managed nodes to ensure they are suitable
    for Ansible automation. You also learned about ad hoc commands and their benefits.
    Finally, you learned how to run the latest version of the code directly from GitHub,
    which both enables you to contribute directly to the development of Ansible and
    gives you access to the very latest features should you wish to make use of them
    on your infrastructure.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了设置Ansible的基础知识——如何安装它来控制其他主机以及被Ansible管理的节点的要求。您了解了为Ansible自动化设置SSH和WinRM所需的基础知识，以及如何引导受管节点以确保它们适合于Ansible自动化。您还了解了临时命令及其好处。最后，您学会了如何直接从GitHub运行最新版本的代码，这既使您能够直接为Ansible的开发做出贡献，又使您能够在您的基础设施上使用最新的功能。
- en: In the next chapter, we will learn Ansible language fundamentals to enable you
    to write your first playbooks and to help you to create templated configurations
    and start to build up complex automation workflows.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习Ansible语言基础知识，以便您编写您的第一个playbook，并帮助您创建模板化配置，并开始构建复杂的自动化工作流程。
- en: Questions
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: On which operating systems can you install Ansible? (Multiple correct answers)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在哪些操作系统上安装Ansible？（多个正确答案）
- en: A) Ubuntu
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: A）Ubuntu
- en: B) Fedora
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: B）Fedora
- en: C) Windows 2019 server
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: C）Windows 2019服务器
- en: D) HP-UX
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: D）HP-UX
- en: E) Mainframe
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: E）主机
- en: Which protocol does Ansible use to connect the remote machine for running tasks?
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ansible使用哪种协议连接远程机器来运行任务？
- en: A) HTTP
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: A）HTTP
- en: B) HTTPS
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: B）HTTPS
- en: C) SSH
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: C）SSH
- en: D) TCP
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: D）TCP
- en: E) UDP
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: E）UDP
- en: To execute a specific module in the Ansible ad hoc command line, you need to
    use the `-m` option.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在Ansible临时命令行中执行特定模块，您需要使用`-m`选项。
- en: A) True
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: A）正确
- en: B) False
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: B）错误
- en: Further reading
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For any questions about installation via Ansible Mailing Liston Google Groups,
    see the following:'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关通过Ansible Mailing Liston Google Groups安装的任何问题，请参阅以下内容：
- en: '[https://groups.google.com/forum/#!forum/ansible-project](https://groups.google.com/forum/#!forum/ansible-project)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://groups.google.com/forum/#!forum/ansible-project](https://groups.google.com/forum/#!forum/ansible-project)'
- en: 'How to install the latest version of `pip` can be found here:'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何安装最新版本的`pip`可以在这里找到：
- en: '[https://pip.pypa.io/en/stable/installing/#installation](https://pip.pypa.io/en/stable/installing/#installation)'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://pip.pypa.io/en/stable/installing/#installation](https://pip.pypa.io/en/stable/installing/#installation)'
- en: 'Specific Windows modules using PowerShell can be found here:'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在此处找到使用PowerShell的特定Windows模块：
- en: '[https://github.com/ansible/ansible-modules-core/tree/devel/windows](https://github.com/ansible/ansible-modules-core/tree/devel/windows)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ansible/ansible-modules-core/tree/devel/windows](https://github.com/ansible/ansible-modules-core/tree/devel/windows)'
- en: 'If you have a GitHub account and want to follow the GitHub project, you can
    keep tracking issues, bugs, and ideas for Ansible:'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您有GitHub账户并想关注GitHub项目，您可以继续跟踪Ansible的问题、错误和想法：
- en: '[https://github.com/ansible/ansible](https://github.com/ansible/ansible)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ansible/ansible](https://github.com/ansible/ansible)'
