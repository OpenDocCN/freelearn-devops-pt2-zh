["```\n$ ls -la ~/.ssh\ntotal 128\ndrwx------    6 edwardrobinson  staff    192 25 Feb 15:49 .\ndrwxr-xr-x+ 102 edwardrobinson  staff   3264 25 Feb 15:49 ..\n-rw-r--r--    1 edwardrobinson  staff   1759 25 Feb 15:48 config\n-rw-------    1 edwardrobinson  staff   3326 25 Feb 15:48 id_rsa\n-rw-r--r--    1 edwardrobinson  staff    753 25 Feb 15:48 \nid_rsa.pub\n-rw-r--r--    1 edwardrobinson  staff  53042 25 Feb 15:48 \nknown_hosts  \n```", "```\n$ ssh-keygen -t rsa -b 4096 -C \"email@example.com\"\nGenerating public/private rsa key pair.  \n```", "```\nEnter file in which to save the key (/home/edwardrobinson/.ssh/id_rsa):  \n```", "```\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/edwardrobinson/.ssh/id_rsa.\nYour public key has been saved in /home/edwardrobinson/.ssh/id_rsa.\nThe key fingerprint is:\nSHA256:noWDFhnDxcvFl7DGi6EnF9EM5yeRMfGX1wt85wnbxxQ email@example.com  \n```", "```\n$ VPC_ID=$(aws ec2 create-vpc --cidr-block 10.0.0.0/16 --query \"Vpc.VpcId\" --output text)\n```", "```\n$ echo $VPC_ID  \n```", "```\n$ aws ec2 modify-vpc-attribute \\\n    --enable-dns-support \\\n    --vpc-id $VPC_ID\n$ aws ec2 modify-vpc-attribute \\\n    --enable-dns-hostnames \\\n    --vpc-id $VPC_ID  \n```", "```\naws ec2 create-tags \\\n--resources $VPC_ID \\\n--tags Key=Name,Value=hopper \\\n  Key=kubernetes.io/cluster/hopper,Value=shared  \n```", "```\n$ PRIVATE_ROUTE_TABLE_ID=$(aws ec2 describe-route-tables \\\n    --filters Name=vpc-id,Values=$VPC_ID \\\n    --query \"RouteTables[0].RouteTableId\" \\\n    --output=text) \n```", "```\n$ PUBLIC_ROUTE_TABLE_ID=$(aws ec2 create-route-table \\\n  --vpc-id $VPC_ID \\\n  --query \"RouteTable.RouteTableId\" --output text)  \n```", "```\n$ aws ec2 create-tags \\\n  --resources $PUBLIC_ROUTE_TABLE_ID \\\n  --tags Key=Name,Value=hopper-public\n$ aws ec2 create-tags \\\n  --resources $PRIVATE_ROUTE_TABLE_ID \\\n  --tags Key=Name,Value=hopper-private  \n```", "```\n$ PRIVATE_SUBNET_ID=$(aws ec2 create-subnet \\\n  --vpc-id $VPC_ID \\\n  --availability-zone eu-west-1a \\\n  --cidr-block 10.0.0.0/20 --query \"Subnet.SubnetId\" \\\n  --output text)\n\n$ aws ec2 create-tags \\\n  --resources $PRIVATE_SUBNET_ID \\\n  --tags Key=Name,Value=hopper-private-1a \\\n    Key=kubernetes.io/cluster/hopper,Value=owned \\\n    Key=kubernetes.io/role/internal-elb,Value=1  \n```", "```\n$ PUBLIC_SUBNET_ID=$(aws ec2 create-subnet \\\n  --vpc-id $VPC_ID \\\n  --availability-zone eu-west-1a \\\n --cidr-block 10.0.16.0/20 --query \"Subnet.SubnetId\" \\\n  --output text)\n\n$ aws ec2 create-tags \\\n --resources $PUBLIC_SUBNET_ID \\\n --tags Key=Name,Value=hopper-public-1a \\\n    Key=kubernetes.io/cluster/hopper,Value=owned \\\n    Key=kubernetes.io/role/elb,Value=1  \n```", "```\n$ aws ec2 associate-route-table \\\n  --subnet-id $PUBLIC_SUBNET_ID \\\n  --route-table-id $PUBLIC_ROUTE_TABLE_ID  \n```", "```\n$ INTERNET_GATEWAY_ID=$(aws ec2 create-internet-gateway \\\n    --query \"InternetGateway.InternetGatewayId\" --output text)\n\n$ aws ec2 attach-internet-gateway \\\n    --internet-gateway-id $INTERNET_GATEWAY_ID \\\n    --vpc-id $VPC_ID\n\n$ aws ec2 create-route \\\n    --route-table-id $PUBLIC_ROUTE_TABLE_ID \\\n    --destination-cidr-block 0.0.0.0/0 \\\n    --gateway-id $INTERNET_GATEWAY_ID\n```", "```\n$ NAT_GATEWAY_ALLOCATION_ID=$(aws ec2 allocate-address \\\n  --domain vpc --query AllocationId --output text)\n\n$ NAT_GATEWAY_ID=$(aws ec2 create-nat-gateway \\\n  --subnet-id $PUBLIC_SUBNET_ID \\\n  --allocation-id $NAT_GATEWAY_ALLOCATION_ID \\\n  --query NatGateway.NatGatewayId --output text)  \n```", "```\n$ aws ec2 create-route \\\n    --route-table-id $PRIVATE_ROUTE_TABLE_ID \\\n    --destination-cidr-block 0.0.0.0/0 \\\n    --nat-gateway-id $NAT_GATEWAY_ID  \n```", "```\n$ BASTION_SG_ID=$(aws ec2 create-security-group \\\n    --group-name ssh-bastion \\\n    --description \"SSH Bastion Hosts\" \\\n    --vpc-id $VPC_ID \\\n    --query GroupId --output text)  \n```", "```\n$ aws ec2 authorize-security-group-ingress \\\n  --group-id $BASTION_SG_ID \\\n  --protocol tcp \\\n  --port 22 \\\n  --cidr 0.0.0.0/0  \n```", "```\n$ UBUNTU_AMI_ID=$(aws ec2 describe-images --owners 099720109477 \\\n  --filters Name=root-device-type,Values=ebs \\\n            Name=architecture,Values=x86_64 \\\n            Name=name,Values='*hvm-ssd/ubuntu-xenial-16.04*' \\\n  --query \"sort_by(Images, &Name)[-1].ImageId\" --output text)  \n```", "```\n$ BASTION_ID=$(aws ec2 run-instances \\\n  --image-id $UBUNTU_AMI_ID \\\n  --instance-type t2.micro \\\n  --key-name eds_laptop \\\n  --security-group-ids $BASTION_SG_ID \\\n  --subnet-id $PUBLIC_SUBNET_ID \\\n  --associate-public-ip-address \\\n  --query \"Instances[0].InstanceId\" \\\n  --output text)  \n```", "```\n$ aws ec2 create-tags \\\n  --resources $BASTION_ID \\\n  --tags Key=Name,Value=ssh-bastion  \n```", "```\n$ BASTION_IP=$(aws ec2 describe-instances \\\n  --instance-ids $BASTION_ID \\\n  --query \"Reservations[0].Instances[0].PublicIpAddress\" \\\n  --output text)  \n```", "```\n$ ssh ubuntu@$BASTION_IP  \n```", "```\nWelcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-1052-aws x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n  Get cloud support with Ubuntu Advantage Cloud Guest:\n        http://www.ubuntu.com/business/services/cloud\n\n 0 packages can be updated.\n 0 updates are security updates.\n\n To run a command as administrator (user \"root\"), use \"sudo <command>\".\n See \"man sudo_root\" for details.\n\n ubuntu@ip-10-0-26-86:~$  \n```", "```\nbrew install sshuttle  \n```", "```\n    pip install sshuttle\n\n```", "```\n$ sshuttle -r ubuntu@$BASTION_IP 10.0.0.0/16 --dns\n[local sudo] Password:\nclient: Connected.  \n```", "```\n$ aws ec2 describe-instances \\\n  --instance-ids $BASTION_ID \\\n  --query \"Reservations[0].Instances[0].PrivateDnsName\"\n\n\"ip-10-0-21-138.eu-west-1.compute.internal\"\n\n$ ssh ubuntu@ip-10-0-21-138.eu-west-1.compute.internal  \n```", "```\n$ curl https://raw.githubusercontent.com/errm/k8s-iam-policies/master/setup.sh -o setup.sh\n$ sh -e setup.sh\n  {\n      \"InstanceProfile\": {\n          \"Path\": \"/\",\n          \"InstanceProfileName\": \"K8sMaster\",\n          \"InstanceProfileId\": \"AIPAJ7YTS67QLILBZUQYE\",\n          \"Arn\": \"arn:aws:iam::642896941660:instance-profile/K8sMaster\",\n          \"CreateDate\": \"2018-02-26T19:06:19.831Z\",\n          \"Roles\": []\n      }\n  }\n  {\n      \"InstanceProfile\": {\n          \"Path\": \"/\",\n          \"InstanceProfileName\": \"K8sNode\",\n          \"InstanceProfileId\": \"AIPAJ27KNVOKTLZV7DDA4\",\n          \"Arn\": \"arn:aws:iam::642896941660:instance-profile/K8sNode\",\n          \"CreateDate\": \"2018-02-26T19:06:25.282Z\",\n          \"Roles\": []\n      }\n  }  \n```", "```\n$ K8S_AMI_SG_ID=$(aws ec2 create-security-group \\\n    --group-name k8s-ami \\\n    --description \"Kubernetes AMI Instances\" \\\n    --vpc-id $VPC_ID \\\n    --query GroupId \\\n    --output text)\n```", "```\n$ aws ec2 authorize-security-group-ingress \\\n    --group-id $K8S_AMI_SG_ID \\\n    --protocol tcp \\\n    --port 22 \\\n    --source-group $BASTION_SG_ID\n\n```", "```\n$ K8S_AMI_INSTANCE_ID=$(aws ec2 run-instances \\\n    --subnet-id $PRIVATE_SUBNET_ID \\\n    --image-id $UBUNTU_AMI_ID \\\n    --instance-type t2.micro \\\n    --key-name eds_laptop \\\n    --security-group-ids $K8S_AMI_SG_ID \\\n    --query \"Instances[0].InstanceId\" \\\n    --output text) \n```", "```\n$ aws ec2 create-tags \\\n    --resources $K8S_AMI_INSTANCE_ID \\\n    --tags Key=Name,Value=kubernetes-node-ami\n```", "```\n$ K8S_AMI_IP=$(aws ec2 describe-instances \\\n    --instance-ids $K8S_AMI_INSTANCE_ID \\\n    --query \"Reservations[0].Instances[0].PrivateIpAddress\" \\\n    --output text)\n```", "```\n$ ssh ubuntu@$K8S_AMI_IP  \n```", "```\n$ sudo apt-get update  \n```", "```\n/etc/systemd/system/docker.service.d/10-iptables.conf\n[Service]\nExecStartPost=/sbin/iptables -P FORWARD ACCEPT  \n```", "```\n$ sudo mkdir -p /etc/systemd/system/docker.service.d/\n$ printf \"[Service]\\nExecStartPost=/sbin/iptables -P FORWARD ACCEPT\" |   sudo tee /etc/systemd/system/docker.service.d/10-iptables.conf\n```", "```\n$ sudo apt-get install -y docker.io  \n```", "```\n$ sudo docker version  \n```", "```\n$ curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -\nOK  \n```", "```\n$ sudo apt-add-repository 'deb http://apt.kubernetes.io/ kubernetes-xenial main'  \n```", "```\n$ sudo apt-get update  \n```", "```\n$ sudo apt-get install -y kubelet kubeadm kubectl  \n```", "```\n$ sudo shutdown -h now\nConnection to 10.0.13.93 closed by remote host.\nConnection to 10.0.13.93 closed.  \n```", "```\n$ K8S_AMI_ID=$(aws ec2 create-image \\\n --name k8s-1.10.3-001 \\\n --instance-id $K8S_AMI_INSTANCE_ID \\\n --description \"Kubernetes v1.10.3\" \\\n --query ImageId \\ \n --output text)\n```", "```\naws ec2 describe-images \\\n     --image-ids $K8S_AMI_ID \\\n     --query \"Images[0].State\"\n```", "```\n$ K8S_MASTER_SG_ID=$(aws ec2 create-security-group \\\n    --group-name k8s-master \\\n    --description \"Kubernetes Master Hosts\" \\\n    --vpc-id $VPC_ID \\\n    --query GroupId \\\n    --output text) \n```", "```\n$ aws ec2 authorize-security-group-ingress \\\n    --group-id $K8S_MASTER_SG_ID \\\n    --protocol tcp \\\n    --port 22 \\\n    --source-group $BASTION_SG_ID \n```", "```\n$ K8S_MASTER_INSTANCE_ID=$(aws ec2 run-instances \\\n    --private-ip-address 10.0.0.10 \\\n    --subnet-id $PRIVATE_SUBNET_ID \\\n    --image-id $K8S_AMI_ID \\\n    --instance-type t2.medium \\\n    --key-name eds_laptop \\\n    --security-group-ids $K8S_MASTER_SG_ID \\\n    --credit-specification CpuCredits=unlimited \\\n    --iam-instance-profile Name=K8sMaster \\\n    --query \"Instances[0].InstanceId\" \\\n    --output text) \n```", "```\n$ aws ec2 create-tags \\\n  --resources $K8S_MASTER_INSTANCE_ID \\\n  --tags Key=Name,Value=hopper-k8s-master \\\n    Key=kubernetes.io/cluster/hopper,Value=owned\n\n$ ssh ubuntu@10.0.0.10  \n```", "```\n$ sudo hostnamectl set-hostname $(curl http://169.254.169.254/latest/meta-data/hostname)\n$ hostnamectl status\n   Static hostname: ip-10-0-0-10.eu-west-1.compute.internal  \n```", "```\n/etc/systemd/system/kubelet.service.d/20-aws.conf\n[Service]\nEnvironment=\"KUBELET_EXTRA_ARGS=--cloud-provider=aws --node ip=10.0.0.10\"\n$ printf '[Service]\\nEnvironment=\"KUBELET_EXTRA_ARGS=--cloud-provider=aws --node-ip=10.0.0.10\"' | sudo tee /etc/systemd/system/kubelet.service.d/20-aws.conf \n```", "```\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart kubelet  \n```", "```\nkubeadm.config\napiVersion: kubeadm.k8s.io/v1alpha1\nkind: MasterConfiguration\ncloudProvider: aws\ntokenTTL: \"0\"  \n```", "```\n$ sudo kubeadm init --config=kubeadm.config \n[init] Using Kubernetes version: v1.10.3 .. .\n. . .\n. . . \nYour Kubernetes master has initialized successfully!\n. . .\n```", "```\n$ mkdir -p $HOME/.kube\n$ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n$ sudo chown $(id -u):$(id -g) $HOME/.kube/config  \n```", "```\n$ kubectl version\nClient Version: version.Info{Major:\"1\", Minor:\"9\", GitVersion:\"v1.9.3\", GitCommit:\"d2835416544f298c919e2ead3be3d0864b52323b\", GitTreeState:\"clean\", BuildDate:\"2018-02-07T12:22:21Z\", GoVersion:\"go1.9.2\", Compiler:\"gc\", Platform:\"linux/amd64\"}\nServer Version: version.Info{Major:\"1\", Minor:\"9\", GitVersion:\"v1.9.3\", GitCommit:\"d2835416544f298c919e2ead3be3d0864b52323b\", GitTreeState:\"clean\", BuildDate:\"2018-02-07T11:55:20Z\", GoVersion:\"go1.9.2\", Compiler:\"gc\", Platform:\"linux/amd64\"}\n```", "```\n--pod-manifest-path=/etc/kubernetes/manifests  \n```", "```\n$ aws ec2 authorize-security-group-ingress \\\n    --group-id $K8S_MASTER_SG_ID \\\n    --protocol tcp \\\n    --port 6443 \\\n    --source-group $BASTION_SG_ID\n```", "```\n$ scp ubuntu@10.0.0.10:~/.kube/config ~/.kube/config  \n```", "```\n$ kubectl get nodes\nNAME               STATUS     AGE       VERSION\nip-10-0-9-172...   NotReady   5m        v1.9.3 \n```", "```\n$ kubectl apply -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/master/config/v1.3/aws-k8s-cni.yaml \ndaemonset \"aws-node\" created\n```", "```\n$ kubectl -n kube-system describe pods aws-node  \n```", "```\n$ kubectl get nodes\nNAME               STATUS    ROLES     AGE       VERSION\nip-172-31-29-230   Ready     master    10m       v1.9.3  \n```", "```\n$ K8S_NODES_SG_ID=$(aws ec2 create-security-group \\\n    --group-name k8s-nodes \\\n    --description \"Kubernetes Nodes\" \\\n    --vpc-id $VPC_ID \\\n    --query GroupId \\\n    --output text)  \n```", "```\n$ aws ec2 authorize-security-group-ingress \\\n    --group-id $K8S_NODES_SG_ID \\\n    --protocol tcp \\\n    --port 22 \\\n    --source-group $BASTION_SG_ID\n```", "```\n$ aws ec2 authorize-security-group-ingress \\\n    --group-id $K8S_MASTER_SG_ID \\\n    --protocol tcp \\\n    --port 6443 \\\n    --source-group $K8S_NODES_SG_ID  \n```", "```\n$ aws ec2 authorize-security-group-ingress \\\n    --group-id $K8S_MASTER_SG_ID \\\n    --protocol all \\\n    --port 53 \\\n    --source-group $K8S_NODES_SG_ID \n```", "```\n$ aws ec2 authorize-security-group-ingress \\\n    --group-id $K8S_NODES_SG_ID \\\n    --protocol tcp \\\n    --port 10250 \\\n    --source-group $K8S_MASTER_SG_ID\n\n$ aws ec2 authorize-security-group-ingress \\\n    --group-id $K8S_NODES_SG_ID \\\n    --protocol tcp \\\n    --port 10255 \\\n    --source-group $K8S_MASTER_SG_ID\n```", "```\n$ aws ec2 authorize-security-group-ingress \\\n    --group-id $K8S_NODES_SG_ID \\\n    --protocol all \\\n    --port -1 \\\n    --source-group $K8S_NODES_SG_ID  \n```", "```\nuser-data.sh\n#!/bin/bash\n\nset -exuo pipefail\nhostnamectl set-hostname $(curl http://169.254.169.254/latest/meta-data/hostname)\n\ncat << EOF $ /etc/systemd/system/kubelet.service.d/20-aws.conf\n[Service]\nEnvironment=\"KUBELET_EXTRA_ARGS=--cloud-provider=aws --node-ip=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)     --node-labels=node-role.kubernetes.io/node=\"\nEOF\n\nsystemctl daemon-reload\nsystemctl restart kubelet\n\nkubeadm join \\\n  --token fddaf9.1f07b60a8268aac0 \\\n  --discovery-token-ca-cert-hash sha256:872757bce0df91c2b046b0d8bb5d930bc1ecfa245b14c25ad8a52746cb8b8e8b \\\n10.0.0.10:6443  \n```", "```\n$ aws autoscaling create-launch-configuration \\\n    --launch-configuration-name k8s-node-1.10.3-t2-medium-001 \\\n    --image-id $K8S_AMI_ID \\ --key-name \n  eds_laptop \\    \n     --security-groups $K8S_NODES_SG_ID \\  \n     --user-data file://user-data.sh \\    \n     --instance-type t2.medium \\    \n     --iam-instance-profile K8sNode \\    \n     --no-associate-public-ip-address\n```", "```\n> aws autoscaling create-auto-scaling-group \\\n    --auto-scaling-group-name hopper-t2-medium-nodes \\\n    --launch-configuration-name k8s-node-1.10.3-t2-medium-001 \\\n    --min-size 1 \\\n    --max-size 1 \\\n    --vpc-zone-identifier $PRIVATE_SUBNET_ID \\\n    --tags Key=Name,Value=hopper-k8s-node \\\n      Key=kubernetes.io/cluster/hopper,Value=owned \\\n      Key=k8s.io/cluster-autoscaler/enabled,Value=1  \n```", "```\n> kubectl get nodes --watch\nNAME              STATUS    AGE       VERSION\nip-10-0-0-10       Ready     37m       v1.10.3\nip-10-0-2-135      Ready     53s       v1.10.3  \n```", "```\n> cat /var/log/cloud-init-output.log  \n```", "```\nkubectl apply -f\n https://raw.githubusercontent.com/PacktPublishing/Kubernetes-on-AWS/master/chapter03/demo.yaml\n```", "```\n> kubectl get svc demo -o wide  \n```"]