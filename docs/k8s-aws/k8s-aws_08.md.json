["```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: webserver \nspec: \n  containers: \n  - name: nginx \n    image: nginx \n    resources: \n      limits: \n        memory: 128Mi \n        cpu: 500m \n      requests:\n```", "```\n        memory: 64Mi \n        cpu: 250m \n```", "```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: best-effort \nspec: \n  containers: \n  - name: nginx \n    image: nginx \n```", "```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: guaranteed \nspec: \n  containers: \n  - name: nginx \n    image: nginx \n    resources: \n      limits: \n        memory: 256Mi \n        cpu: 500m \n```", "```\napiVersion: v1 \nkind: Pod \nmetadata: \n  name: burstable \nspec: \n  containers: \n  - name: nginx \n    image: nginx \n    resources: \n      limits: \n        memory: 256Mi \n        cpu: 500m \n      requests: \n        memory: 128Mi \n        cpu: 250m \n```", "```\n$ kubectl create namespace quota-example\nnamespace/quota-example created  \n```", "```\napiVersion: v1 \nkind: ResourceQuota \nmetadata: \n  name: resource-quota \n  namespace: quota-example \nspec: \n  hard: \n    limits.cpu: 2 \n```", "```\napiVersion: apps/v1 \nkind: Deployment \nmetadata: \n  name: example \n  namespace: quota-example \nspec: \n  selector: \n    matchLabels: \n      app: example \n  template: \n    metadata: \n      labels: \n        app: example \n    spec: \n      containers: \n      - name: nginx \n        image: nginx \n        resources: \n          limits: \n            cpu: 500m \n```", "```\n$ kubectl -n quota-example get pods\nNAME                      READY     STATUS    RESTARTS   AGE\nexample-fb556779d-4bzgd   1/1       Running   0          1m  \n```", "```\n$ kubectl -n quota-example scale deployment/example --replicas=4$ kubectl -n quota-example get pods\nNAME                      READY     STATUS    RESTARTS   AGE\nexample-fb556779d-4bzgd   1/1       Running   0          2m\nexample-fb556779d-bpxm8   1/1       Running   0          1m\nexample-fb556779d-gkbvc   1/1       Running   0          1m\nexample-fb556779d-lcrg9   1/1       Running   0          1m  \n```", "```\n$ kubectl -n quota-example scale deployment/example --replicas=5  \n```", "```\n$ kubectl -n quota-example get events\n...\nError creating: pods \"example-fb556779d-xmsgv\" is forbidden: exceeded quota: resource-quota, requested: limits.cpu=500m, used: limits.cpu=2, limited: limits.cpu=2  \n```", "```\n$ kubectl create namespace limit-example\nnamespace/limit-example created  \n```", "```\napiVersion: v1 \nkind: LimitRange \nmetadata: \n  name: example \n  namespace: limit-example \nspec: \n  limits: \n  - default: \n      memory: 512Mi \n      cpu: 1 \n    defaultRequest: \n      memory: 256Mi \n      cpu: 500m \n    type: Container \n```", "```\n$ kubectl -n limit-example run --image=nginx example  \n```", "```\n$ kubectl -n limit-example describe pods \n... \n    Limits: \n      cpu:     1 \n      memory:  512Mi \n    Requests: \n      cpu:        500m \n      memory:     256Mi \n... \n```", "```\n$ kubectl apply -f deploy/1.8+  \n```", "```\n$ kubectl top nodes\nNAME             CPU(cores)   CPU%      MEMORY(bytes)   MEMORY%\nip-10-3-29-209   20m          1%        717Mi           19%\nip-10-3-61-119   24m          1%        1011Mi          28%  \n```", "```\nkubectl -n kube-system describe deployment metrics-server  \n```", "```\ndeployment.yaml \napiVersion: apps/v1 \nkind: Deployment \nmetadata: \n  name: fib \n  labels: \n    app: fib \nspec: \n  selector: \n    matchLabels: \n      app: fib \n  template: \n    metadata: \n      labels: \n        app: fib \n    spec: \n      containers: \n      - name: fib \n        image: errm/fib \n        ports: \n        - containerPort: 9292 \n        resources: \n          limits: \n            cpu: 250m \n            memory: 32Mi \n```", "```\nkubectl apply -f deployment.yaml  \n```", "```\nservice.yaml \nkind: Service \napiVersion: v1 \nmetadata: \n  name: fib \nspec: \n  selector: \n    app: fib \n  ports: \n  - protocol: TCP \n    port: 80 \n    targetPort: 9292 \n```", "```\nkubectl apply -f service.yaml  \n```", "```\nhpa.yaml \nkind: HorizontalPodAutoscaler \napiVersion: autoscaling/v2beta1 \nmetadata: \n  name: fib \nspec: \n  maxReplicas: 10 \n  minReplicas: 1 \n  scaleTargetRef: \n    apiVersion: app/v1 \n    kind: Deployment \n    name: fib \n  metrics: \n  - type: Resource \n    resource: \n      name: cpu \n      targetAverageUtilization: 60 \n```", "```\nkubectl apply -f hpa.yaml  \n```", "```\n$ kubectl describe hpa fib    \nName:              fib\nNamespace:         default\nCreationTimestamp: Sat, 15 Sep 2018 14:32:46 +0100\nReference:         Deployment/fib\nMetrics:           ( current / target )\n  resource cpu:    0% (1m) / 60%\nMin replicas:      1\nMax replicas:      10\nDeployment pods:   1 current / 1 desired  \n```", "```\nload.yaml\napiVersion: batch/v1 \nkind: Job \nmetadata: \n  name: fib-load \n  labels: \n    app: fib \n    component: load \nspec: \n  template: \n    spec: \n      containers: \n      - name: fib-load \n        image: errm/ab \n        args: [\"-n1000\", \"-c4\", \"fib/30\"] \n      restartPolicy: OnFailure \n```", "```\nkubectl apply -f load.yaml    \nwatch kubectl describe hpa fib\n```", "```\nName:                   fib\nNamespace:              default\nCreationTimestamp: Sat, 15 Sep 2018 14:32:46 +0100\nReference:         Deployment/fib\nMetrics:           ( current / target )\n  resource cpu:    100% (251m) / 60%\nMin replicas:      1\nMax replicas:      10\nDeployment pods:   2 current / 2 desired  \n```", "```\nhpa.yaml \nkind: HorizontalPodAutoscaler \napiVersion: autoscaling/v2beta1 \nmetadata: \n  name: fib \nspec: \n  maxReplicas: 10 \n  minReplicas: 1 \n  scaleTargetRef: \n    apiVersion: app/v1 \n    kind: Deployment \n    name: fib \n  metrics: \n  - type: Resource \n    resource: \n      name: memory \n      targetAverageValue: 20M \n```", "```\ncluster_autoscaler.tf\ndata \"aws_iam_policy_document\" \"eks_node_assume_role_policy\" { \n  statement { \n    actions = [\"sts:AssumeRole\"] \n    principals { \n      type = \"AWS\" \n      identifiers = [\"${aws_iam_role.node.arn}\"] \n    } \n  } \n} \n\nresource \"aws_iam_role\" \"cluster-autoscaler\" { \n  name = \"EKSClusterAutoscaler\" \n  assume_role_policy = \"${data.aws_iam_policy_document.eks_node_assume_role_policy.json}\" \n} \n\ndata \"aws_iam_policy_document\" \"autoscaler\" { \n  statement { \n    actions = [ \n      \"autoscaling:DescribeAutoScalingGroups\", \n      \"autoscaling:DescribeAutoScalingInstances\", \n      \"autoscaling:DescribeTags\", \n      \"autoscaling:SetDesiredCapacity\", \n      \"autoscaling:TerminateInstanceInAutoScalingGroup\" \n    ] \n    resources = [\"*\"] \n  } \n} \n\nresource \"aws_iam_role_policy\" \"cluster_autoscaler\" { \n  name = \"cluster-autoscaler\" \n  role = \"${aws_iam_role.cluster_autoscaler.id}\" \n  policy = \"${data.aws_iam_policy_document.autoscaler.json}\" \n} \n```", "```\ncluster_autoscaler.tpl\n--- \napiVersion: v1 \nkind: ServiceAccount \nmetadata: \n  labels: \n    k8s-addon: cluster-autoscaler.addons.k8s.io \n    k8s-app: cluster-autoscaler \n  name: cluster-autoscaler \n  namespace: kube-system \n```", "```\n--- \napiVersion: rbac.authorization.k8s.io/v1beta1 \nkind: ClusterRole \nmetadata: \n  name: cluster-autoscaler \n  labels: \n    k8s-addon: cluster-autoscaler.addons.k8s.io \n    k8s-app: cluster-autoscaler \nrules: \n- apiGroups: [\"\"] \n  resources: [\"events\",\"endpoints\"] \n  verbs: [\"create\", \"patch\"] \n- apiGroups: [\"\"] \n  resources: [\"pods/eviction\"] \n  verbs: [\"create\"] \n- apiGroups: [\"\"] \n  resources: [\"pods/status\"] \n  verbs: [\"update\"] \n- apiGroups: [\"\"] \n  resources: [\"endpoints\"] \n  resourceNames: [\"cluster-autoscaler\"] \n  verbs: [\"get\",\"update\"] \n- apiGroups: [\"\"] \n  resources: [\"nodes\"] \n  verbs: [\"watch\",\"list\",\"get\",\"update\"] \n- apiGroups: [\"\"] \n  resources: [\"pods\",\"services\",\"replicationcontrollers\",\"persistentvolumeclaims\",\"persistentvolumes\"] \n  verbs: [\"watch\",\"list\",\"get\"] \n- apiGroups: [\"extensions\"] \n  resources: [\"replicasets\",\"daemonsets\"] \n  verbs: [\"watch\",\"list\",\"get\"] \n- apiGroups: [\"policy\"] \n  resources: [\"poddisruptionbudgets\"] \n  verbs: [\"watch\",\"list\"] \n- apiGroups: [\"apps\"] \n  resources: [\"statefulsets\"] \n  verbs: [\"watch\",\"list\",\"get\"] \n- apiGroups: [\"storage.k8s.io\"] \n  resources: [\"storageclasses\"] \n  verbs: [\"watch\",\"list\",\"get\"] \n--- \napiVersion: rbac.authorization.k8s.io/v1beta1 \nkind: ClusterRoleBinding \nmetadata: \n  name: cluster-autoscaler \n  labels: \n    k8s-addon: cluster-autoscaler.addons.k8s.io \n    k8s-app: cluster-autoscaler \nroleRef: \n  apiGroup: rbac.authorization.k8s.io \n  kind: ClusterRole \n  name: cluster-autoscaler \nsubjects: \n  - kind: ServiceAccount \n    name: cluster-autoscaler \n    namespace: kube-system \n```", "```\n--- \napiVersion: rbac.authorization.k8s.io/v1beta1 \nkind: Role \nmetadata: \n  name: cluster-autoscaler \n  namespace: kube-system \n  labels: \n    k8s-addon: cluster-autoscaler.addons.k8s.io \n    k8s-app: cluster-autoscaler \nrules: \n- apiGroups: [\"\"] \n  resources: [\"configmaps\"] \n  verbs: [\"create\"] \n- apiGroups: [\"\"] \n  resources: [\"configmaps\"] \n  resourceNames: [\"cluster-autoscaler-status\"] \n  verbs: [\"delete\",\"get\",\"update\"] \n--- \napiVersion: rbac.authorization.k8s.io/v1beta1 \nkind: RoleBinding \nmetadata: \n  name: cluster-autoscaler \n  namespace: kube-system \n  labels: \n    k8s-addon: cluster-autoscaler.addons.k8s.io \n    k8s-app: cluster-autoscaler \nroleRef: \n  apiGroup: rbac.authorization.k8s.io \n  kind: Role \n  name: cluster-autoscaler \nsubjects: \n  - kind: ServiceAccount \n    name: cluster-autoscaler \n    namespace: kube-system \n```", "```\n--- \napiVersion: extensions/v1beta1 \nkind: Deployment \nmetadata: \n  name: cluster-autoscaler \n  namespace: kube-system \n  labels: \n    app: cluster-autoscaler \nspec: \n  replicas: 1 \n  selector: \n    matchLabels: \n      app: cluster-autoscaler \n  template: \n    metadata: \n      annotations: \n        iam.amazonaws.com/role: ${iam_role} \n      labels: \n        app: cluster-autoscaler \n    spec: \n      serviceAccountName: cluster-autoscaler \n      containers: \n        - image: k8s.gcr.io/cluster-autoscaler:v1.3.3 \n          name: cluster-autoscaler \n          resources: \n            limits: \n              cpu: 100m \n              memory: 300Mi \n            requests: \n              cpu: 100m \n              memory: 300Mi \n          command: \n            - ./cluster-autoscaler \n            - --v=4 \n            - --stderrthreshold=info \n            - --cloud-provider=aws \n            - --skip-nodes-with-local-storage=false \n            - --expander=least-waste \n            - --node-group-auto-discovery=asg:tag=kubernetes.io/cluster/${cluster_name} \n          env: \n            - name: AWS_REGION \n              value: ${aws_region} \n          volumeMounts: \n            - name: ssl-certs \n              mountPath: /etc/ssl/certs/ca-certificates.crt \n              readOnly: true \n          imagePullPolicy: \"Always\" \n      volumes: \n        - name: ssl-certs \n          hostPath: \n            path: \"/etc/ssl/certs/ca-certificates.crt\" \n```", "```\ndata \"aws_region\" \"current\" {} \n\ndata \"template_file\" \" cluster_autoscaler \" { \n  template = \"${file(\"${path.module}/cluster_autoscaler.tpl\")}\" \n\n  vars { \n    aws_region = \"${data.aws_region.current.name}\" \n    cluster_name = \"${aws_eks_cluster.control_plane.name}\" \n    iam_role = \"${aws_iam_role.cluster_autoscaler.name}\" \n  } \n} \n\nresource \"null_resource\" \"cluster_autoscaler\" { \n  trigers = { \n    manifest_sha1 = \"${sha1(\"${data.template_file.cluster_autoscaler.rendered}\")}\" \n  } \n\n  provisioner \"local-exec\" { \n    command = \"kubectl  \n--kubeconfig=${local_file.kubeconfig.filename} apply -f -<<EOF\\n${data.template_file.cluster_autoscaler.rendered}\\nEOF\" \n  } \n} \n```"]