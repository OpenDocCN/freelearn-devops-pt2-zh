- en: Storing State
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储状态
- en: This chapter is all about utilizing the deep integration that Kubernetes has
    with the AWS native storage solution **Elastic Block Store** (**EBS**). Amazon
    EBS provides network attached storage as a service, and is the primary solution
    used to provide block storage to EC2 instances.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要介绍Kubernetes与AWS原生存储解决方案Elastic Block Store（EBS）的深度集成。 Amazon EBS提供网络附加存储作为服务，并且是提供块存储给EC2实例的主要解决方案。
- en: Nearly every EC2 instance launched is backed by an EBS root volume (created
    from an AMI machine image). Because EBS storage is network attached, if an underlying
    machine hosting an EC2 instance fails in some way, the data stored on the volume
    is safe as it is automatically replicated across multiple physical storage devices.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个启动的EC2实例都由EBS根卷支持（从AMI机器映像创建）。由于EBS存储是网络附加的，如果支持EC2实例的底层机器以某种方式失败，存储在卷上的数据是安全的，因为它会自动在多个物理存储设备上复制。
- en: In addition to being used to store the root filesystem of EC2 instances, additional
    EBS volumes can be attached to EC2 instances and mounted on demand via the AWS
    API. Kubernetes integration with AWS EBS makes use of this to provide persistent
    volumes that can be used by your pods. If a pod is killed and is replaced by a
    pod on another EC2 instance, Kubernetes will handle detaching the EBS volume from
    the old EC2 instance and attaching it to the new instance, ready to be mounted
    into the new pod as required.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用于存储EC2实例的根文件系统外，还可以通过AWS API将附加的EBS卷附加到EC2实例并按需挂载。 Kubernetes与AWS EBS的集成利用了这一点，提供了可以被您的pod使用的持久卷。如果一个pod被杀死并被另一个EC2实例上的pod替换，Kubernetes将处理将EBS卷从旧的EC2实例分离并附加到新实例，准备好根据需要挂载到新的pod中。
- en: In this chapter, we will start by looking at how we can configure our pods to
    make use of additional volumes. We will then look at the abstractions Kubernetes
    provides for dealing with storage that provides persistence (such as EBS). We
    will look at how Kubernetes can automatically provision EBS volumes for us based
    on the specifications requested in our pod configurations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先看看如何配置我们的pod以利用附加卷。然后，我们将研究Kubernetes提供的用于处理提供持久性的存储（如EBS）的抽象。我们将看看Kubernetes如何根据我们在pod配置中请求的规格自动为我们提供EBS卷。
- en: Once you have mastered using Kubernetes to provision persistent storage for
    your pods, in the second half of this chapter we will look at stateful sets, the
    abstraction that Kubernetes provides to run a set of pods, each of which can have
    its own attached storage and an identity that remains even if rescheduled to another
    node. This is the final piece of the puzzle required if you want to run complex
    stateful applications on your Kubernetes cluster, such as databases.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您掌握了使用Kubernetes为您的pod提供持久存储，本章的下半部分将介绍有状态集，这是Kubernetes提供的一个抽象，用于运行一组pod，每个pod都可以有自己的附加存储和即使重新调度到另一个节点也保持不变的身份。如果您想在Kubernetes集群上运行复杂的有状态应用程序，比如数据库，这是所需的最后一块拼图。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Volumes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卷
- en: Storage classes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储类
- en: Stateful sets
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有状态集
- en: Volumes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卷
- en: Let's start by looking at how we can attach volumes to our pods. The simplest
    kind of volume available `emptyDir` is just a temporary directory that is linked
    to the life cycle of a pod. When the volume is created, it is empty as the name
    suggests, and remains on the node until the pod is removed from the node. The
    data you store inside the volume does persist between pod restarts on the same
    node, so can be useful for processes that need to cache expensive computations
    on the filesystem, or for processes that checkpoint their progress. In [Chapter
    1](19821a2b-bb32-408d-9f21-256dce5d644e.xhtml), *Google's Infrastructure for the
    Rest of Us*, we discussed some other possible uses for an `emptyDir` volume to
    share files between different containers within a pod.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一下如何将卷附加到我们的Pod。可用的最简单的卷类型`emptyDir`只是一个与Pod的生命周期相关联的临时目录。当卷被创建时，它是空的，正如其名称所示，并且会一直保留在节点上，直到Pod从节点中移除。您在卷内存储的数据在同一节点上的Pod重启之间是持久的，因此可以用于需要在文件系统上缓存昂贵计算的进程，或者用于检查它们的进度。在[第1章](19821a2b-bb32-408d-9f21-256dce5d644e.xhtml)中，*Google的基础设施供给我们*，我们讨论了`emptyDir`卷在Pod内不同容器之间共享文件的一些其他可能用途。
- en: In this example, we are going to make use of an `emptyDir` volume to deploy
    an application that expects to write to the `/data` directory in a container where
    the root filesystem has been made read-only.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将利用`emptyDir`卷来部署一个应用程序，该应用程序希望写入容器中的`/data`目录，而根文件系统已被设置为只读。
- en: 'This application has been designed to illustrate some of the properties of
    volumes in Kubernetes. When it starts up, it writes to a random filename in the
    `/data` directory. It then starts up a web server that shows the contents of that
    directory:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序是为了说明Kubernetes中卷的一些属性而设计的。当它启动时，它会在`/data`目录中写入一个随机的文件名。然后它启动一个显示该目录内容的Web服务器：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Looking at this configuration, there are a few things you should note about
    how we use volumes in a pod. These rules apply not only to `emptyDir` volumes,
    but also to every other type of volume that you might encounter:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 查看这个配置，有一些关于我们如何在Pod中使用卷的事项需要注意。这些规则不仅适用于`emptyDir`卷，也适用于您可能遇到的每一种卷类型：
- en: Each volume is defined at the top level of the pod spec. Even if a volume is
    used by more than one container in a pod, we only need to define it once.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个卷都在Pod规范的顶层定义。即使一个卷被Pod中的多个容器使用，我们只需要定义一次。
- en: When you want to access a volume from within a container, you must specify a
    volume mount, mounting that volume into the container's filesystem at a particular
    point. When we mount a volume, we refer to it by the name we used when we defined
    it in the `volumes` section.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您想要从容器内访问卷时，您必须指定一个卷挂载点，将该卷挂载到容器的文件系统的特定位置。当我们挂载一个卷时，我们会用在`volumes`部分中定义它时使用的名称来引用它。
- en: 'Once you have deployed this example manifest, you should be able to use the
    `kubectl port-forward` command to access the web server running inside the pod:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您部署了这个示例清单，您应该能够使用`kubectl port-forward`命令来访问Pod内运行的Web服务器：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should now be able to visit `http://localhost:3000` in your browser to
    see a random file that was created when the container started up:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该能够在浏览器中访问`http://localhost:3000`，以查看在容器启动时创建的一个随机文件：
- en: '![](assets/2ec3e254-b8ec-41e1-a6c3-42b261d94d2f.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2ec3e254-b8ec-41e1-a6c3-42b261d94d2f.png)'
- en: 'If you delete this pod, then the deployment will recreate a new pod. Because
    the contents of an `emptyDir` volume are lost whenever the pod is destroyed, the
    file that was created when the first pod started will be gone, and a new file
    with a different name will have been created:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您删除此Pod，那么部署将重新创建一个新的Pod。因为`emptyDir`卷的内容在Pod被销毁时会丢失，所以当第一个Pod启动时创建的文件将会消失，并且将创建一个具有不同名称的新文件：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You will need to rerun `kubectl port-forward` to select the new pod:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要重新运行`kubectl port-forward`以选择新的pod：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](assets/cda09f41-f300-412e-a001-43f1baa830a9.png)A newly created file being
    served'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/cda09f41-f300-412e-a001-43f1baa830a9.png)正在提供的新创建的文件'
- en: EBS volumes
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EBS卷
- en: Getting Kubernetes to attach an EBS volume and then mount it into a container
    in our pod is almost as simple as using an `emptyDir` volume. The lowest level
    and simplest way to mount an EBS volume is by using the `awsElasticBlockStore`
    volume type. This volume type handles attaching the EBS volume to the node where
    our pod will run and then mounting the volume into a path in our container.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让Kubernetes附加EBS卷，然后将其挂载到我们的pod中的容器中，几乎与使用`emptyDir`卷一样简单。挂载EBS卷的最低级别和最简单的方法是使用`awsElasticBlockStore`卷类型。此卷类型处理将EBS卷附加到我们的pod将运行的节点，然后将卷挂载到容器中的路径。
- en: 'When using this volume type, Kubernetes does not handle actually creating the
    volume for us, so we need to do this manually. We can do this using the AWS CLI:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用此卷类型时，Kubernetes不处理实际为我们创建卷，因此我们需要手动执行此操作。我们可以使用AWS CLI来执行此操作：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Remember that EBS volumes are tied to a particular availability zone (just like
    `ec2` instances) and can only be attached to instances in that same availability
    zone, so you will need to create volume(s) in the same zone(s) as the instances
    in your cluster.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，EBS卷与特定的可用性区域（就像`ec2`实例一样）相关联，并且只能附加到该相同可用性区域中的实例，因此您需要在与集群中的实例相同的区域中创建卷。
- en: 'Here, we have updated the deployment we created in the last example to use
    the `awsElasticBlockStore` volume type and attach the volume we just created to
    our pod. The ID of the EBS volume is passed to the volume configuration as a parameter:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已更新了上一个示例中创建的部署，以使用`awsElasticBlockStore`卷类型，并将我们刚刚创建的卷附加到我们的pod。EBS卷的ID作为参数传递给卷配置：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You will see that manually attaching an EBS volume in this way is very similar
    to using the simpler `emptyDir` volume.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以这种方式手动附加EBS卷与使用更简单的`emptyDir`卷非常相似。
- en: The special `failure-domain.beta.kubernetes.io/zone` label is added to each
    node automatically by the AWS cloud provider. Here, we are using it in `nodeSelector`
    of our pod definition to schedule the pod to a node in the same availability zone
    as we created the volume in. There are several other labels that Kubernetes will
    automatically add to the nodes in your cluster. You can read about them in the
    Kubernetes documentation at [https://kubernetes.io/docs/reference/kubernetes-api/labels-annotations-taints/](https://kubernetes.io/docs/reference/kubernetes-api/labels-annotations-taints/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊的`failure-domain.beta.kubernetes.io/zone`标签由AWS云提供商自动添加到每个节点。在这里，我们在pod定义的`nodeSelector`中使用它，以将pod调度到与我们在其中创建卷的可用性区域相同的节点。Kubernetes将自动向您的集群中的节点添加几个其他标签。您可以在Kubernetes文档中阅读有关它们的信息[https://kubernetes.io/docs/reference/kubernetes-api/labels-annotations-taints/](https://kubernetes.io/docs/reference/kubernetes-api/labels-annotations-taints/)。
- en: 'When you first submit this deployment, its behavior will be exactly the same
    as the previous version. But when we delete the pod and it is replaced, you will
    notice that the file(s) created on the previous runs of this container will remain,
    and a new file will be added to the list every time it starts up:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次提交此部署时，其行为将与先前版本完全相同。但是，当我们删除该pod并进行替换时，您会注意到在此容器的先前运行中创建的文件将保留，并且每次启动时都会向列表中添加一个新文件：
- en: '![](assets/dee678a3-6597-4cd5-ac44-c64a26143d86.png)When our application is
    backed by an EBS volume, files survive pod rescheduling'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/dee678a3-6597-4cd5-ac44-c64a26143d86.png)当我们的应用程序由EBS卷支持时，文件将在pod重新调度时保留'
- en: Persistent volumes
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久卷
- en: While we certainly could manually create EBS volumes in this way and use their
    IDs in our manifests, there are some problems with this approach.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们当然可以以这种方式手动创建EBS卷并在我们的清单中使用它们的ID，但这种方法存在一些问题。
- en: It is unwieldy and time consuming for users who want to run their applications
    on a cluster to first think about provisioning the EBS volumes that an application
    needs before modifying the manifests to refer to hardcoded IDs. It means that
    pod manifests will need to include a configuration that is specific to running
    the application in question on AWS. Ideally, we would want as much of our configuration
    as possible to be reusable between the different environments where we might deploy
    it, to avoid the risk of introducing errors caused by having to modify configurations.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于想要在集群上运行他们的应用程序的用户来说，首先考虑为应用程序提供EBS卷，然后再修改清单以引用硬编码的ID，这是笨拙且耗时的。这意味着pod清单将需要包含特定于在AWS上运行所涉及的应用程序的配置。理想情况下，我们希望尽可能多地重用我们的配置，以避免由于不得不修改配置而引入错误的风险，这些配置可能在我们可能部署它的不同环境之间重复使用。
- en: 'Kubernetes provides two abstractions that will help us manage EBS volumes:
    `PersistentVolume` and `PersistentVolumeClaim`.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes提供了两个抽象，将帮助我们管理EBS卷：`PersistentVolume`和`PersistentVolumeClaim`。
- en: The `PersistentVolume` object represents a physical piece of storage in your
    cluster; on AWS this is an EBS volume, in much the same way that the `Node` object
    represents an EC2 instance in your cluster. The object captures the details of
    how the storage is implemented, so for an EBS volume it records its ID so that
    Kubernetes can attach it to the correct node when a pod using the volume is scheduled.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`PersistentVolume`对象代表集群中的物理存储空间；在AWS上，这是一个EBS卷，就像`Node`对象代表集群中的EC2实例一样。该对象捕获了存储实现的细节，因此对于EBS卷，它记录了其ID，以便Kubernetes在调度使用该卷的pod时将其附加到正确的节点上。'
- en: '`PersistentVolumeClaim` is the Kubernetes object that allows us to express
    a request for `PersistentVolume` to be used in a pod. When we request a persistent
    volume, we only need to request the amount of storage we require and optionally
    a storage class (see the next section). `PersistentVolumeClaim` is normally embedded
    within a pod spec. When a pod is scheduled, its `PersistentVolumeClaim` is matched
    to a particular `PersistentVolume` that is big enough to fulfill the requested
    amount of storage. `PersistentVolume` is bound to its requesting `PersistentVolumeClaim`,
    so that even if a pod is rescheduled, the same underlying volume will be attached
    to the pod.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`PersistentVolumeClaim`是Kubernetes对象，允许我们在pod中表达对`PersistentVolume`的请求。当我们请求持久卷时，我们只需要请求所需的存储量，以及可选的存储类（请参见下一节）。`PersistentVolumeClaim`通常嵌入在pod规范中。当pod被调度时，它的`PersistentVolumeClaim`将与足够大以满足所请求存储量的特定`PersistentVolume`匹配。`PersistentVolume`绑定到请求的`PersistentVolumeClaim`，因此即使pod被重新调度，相同的基础卷也将附加到pod上。'
- en: This is a big improvement over manually provisioning EBS volumes and including
    the volume ID in our configuration, because we don't need to modify our manifest
    every time our pod is deployed to a new environment.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这比手动提供EBS卷并在我们的配置中包含卷ID要大大改进，因为我们不需要在每次将我们的pod部署到新环境时修改我们的清单。
- en: If you were operating Kubernetes manually (for example, in a bare metal deployment)
    the cluster administrator might pre-provision a pool of `PersistentVolume`, which
    would then be matched against and bound to each `PersistentVolumeClaim` as they
    are created. When using AWS, there is no need to pre-provision storage, as Kubernetes
    dynamically creates `PersistentVolume` using the AWS API as they are required.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你手动操作Kubernetes（例如，在裸金属部署中），集群管理员可能会预先提供一组`PersistentVolume`，然后在创建时与每个`PersistentVolumeClaim`匹配并绑定。在使用AWS时，无需预先提供存储，因为Kubernetes会根据需要使用AWS
    API动态创建`PersistentVolume`。
- en: Persistent volumes example
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久卷示例
- en: Let's look at how we can use persistent volumes to simplify the deployment of
    our example application.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用持久卷来简化我们示例应用程序的部署。
- en: To avoid additional charges on your AWS account, you might want to delete the
    EBS volume you created manually in the previous example.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在AWS账户上产生额外的费用，你可能想要删除在上一个示例中手动创建的EBS卷。
- en: 'First, delete the deployment that we created so Kubernetes can detach the volume:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，删除我们创建的部署，这样Kubernetes就可以卸载卷：
- en: '`**$ kubectl delete deployment/randserver**`Then, you can use the AWS CLI to
    delete the EBS volume:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`**$ kubectl delete deployment/randserver**`然后，你可以使用AWS CLI来删除EBS卷：'
- en: '`**$ aws ec2 delete-volume --volume-id vol-04e744aad50d4911**`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`**$ aws ec2 delete-volume --volume-id vol-04e744aad50d4911**`'
- en: Before you begin, make sure that you have added at least the general-purpose
    storage class to your cluster.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请确保您至少已将通用存储类添加到您的集群中。
- en: 'Creating an EBS volume using Kubernetes dynamic volume provisioning is as simple
    as creating any other resource with `kubectl`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Kubernetes动态卷提供创建EBS卷就像使用`kubectl`创建任何其他资源一样简单：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you added the `storageclass.kubernetes.io/is-default-class` annotation to
    a storage class in your cluster, you could omit the `storageClassName` field if
    you wanted to.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在集群中的存储类中添加了`storageclass.kubernetes.io/is-default-class`注释，如果你愿意，你可以省略`storageClassName`字段。
- en: 'Once you create `PersistantVolumeClaim` for a storage class using the `kubernetes.io/aws-ebs`
    provisioner, Kubernetes will provision an EBS volume matching the size and storage
    class parameters that you specified. Once this is completed, you can use `kubectl
    describe` to view the claim; you can see that the status has been updated to `Bound`
    and the `Volume` field shows the underlying `PersistentVolume` that the claim
    has been bound to:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你使用`kubernetes.io/aws-ebs`供应商为存储类创建了`PersistantVolumeClaim`，Kubernetes将会根据你指定的大小和存储类参数来提供一个匹配的EBS卷。完成后，你可以使用`kubectl
    describe`来查看声明；你会看到状态已更新为`Bound`，`Volume`字段显示了声明绑定的底层`PersistentVolume`：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If we use `kubectl describe` to inspect this `PersistentVolume`, we can see
    the details of the underlying EBS volume that was automatically provisioned:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用`kubectl describe`来检查这个`PersistentVolume`，我们可以看到自动提供的底层EBS卷的细节：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In our deployment, we can update the `volumes` section of the pod spec to refer
    to `PersistentVolumeClaim` by name:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的部署中，我们可以更新pod规范的`volumes`部分，通过名称引用`PersistentVolumeClaim`：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Storage classes
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储类
- en: On AWS, there are several different types of volume available that offer different
    price and performance characteristics.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS上，有几种不同类型的卷可用，提供不同的价格和性能特性。
- en: In order to provide a simple way to choose the volume type (and some other settings)
    when we provision a volume, we create a `StorageClass` object that we can then
    refer to by name when we create `PersistentVolumeClaim`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们提供卷时提供一种简单的选择卷类型（和其他一些设置），我们创建了一个`StorageClass`对象，然后在创建`PersistentVolumeClaim`时可以通过名称引用它。
- en: 'Storage classes are created in the same way as any other Kubernetes objects,
    by submitting manifests to the API using `kubectl`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 存储类的创建方式与任何其他Kubernetes对象相同，通过使用`kubectl`向API提交清单来创建：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This manifest creates a storage class called `general-purpose` that creates
    volumes with the `gp2` volume type. If you remember our discussion about EBS volume
    types in [Chapter 6](cb29a916-0f55-4fa9-816d-2322a86e1ccc.xhtml), *Planning for
    Production*, this SSD-backed volume type is suitable for most general-purpose
    applications offering a good balance of performance and price.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此清单创建了一个名为`general-purpose`的存储类，该存储类创建具有`gp2`卷类型的卷。如果您还记得我们在[第6章](cb29a916-0f55-4fa9-816d-2322a86e1ccc.xhtml)中关于EBS卷类型的讨论，*生产规划*，这种基于SSD的卷类型适用于大多数通用应用程序，提供了良好的性能和价格平衡。
- en: You will also notice the `storageclass.kubernetes.io/is-default-class` annotation
    that makes `StorageClass` the default one to be used by any `PersistentVolumeClaim`
    that doesn't specify a storage class. You should only apply this annotation to
    a single `StorageClass`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您还会注意到`storageclass.kubernetes.io/is-default-class`注释，该注释使`StorageClass`成为任何未指定存储类的`PersistentVolumeClaim`要使用的默认存储类。您应该只将此注释应用于单个`StorageClass`。
- en: The `parameter` field accepts several different options.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`parameter`字段接受几种不同的选项。'
- en: The most important parameter field is `type`, that allows us to choose one of
    `gp2` (the default), `io1` (provisioned IOPS), `sc1` (cold storage), or `st1`
    (throughput optimized).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的参数字段是`type`，它允许我们选择`gp2`（默认值）、`io1`（预留IOPS）、`sc1`（冷存储）或`st1`（吞吐量优化）中的一个。
- en: If you choose to use the `io1` type, you should also use the `iopsPerGB` parameter
    to specify the number of IOPS that will be provisioned for each GB of disk storage
    requested. The maximum IOPS/GB ratio supported by `io1` EBS volumes is 50:1.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择使用`io1`类型，还应使用`iopsPerGB`参数来指定每GB磁盘存储请求的IOPS数量。`io1` EBS卷支持的最大IOPS/GB比率为50:1。
- en: Bear in mind that the cost of provisioned IOPS makes the cost of `io1` volumes
    much higher than the equivalent general-purpose volumes. An `io1` volume with
    IOPS provisioned to provide similar throughput to a `gp2` volume of the same size
    can be three times more expensive. So, you should only use `io1` volumes where
    you require performance in excess of that provided by `gp2` volumes. One trick
    that can optimize costs is to use `gp2` volumes larger than your application requires
    to provide extra IO credits.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，预留IOPS的成本使`io1`卷的成本比等效的通用卷高得多。为了提供与相同大小的`gp2`卷相似的吞吐量，预留IOPS的`io1`卷的成本可能是后者的三倍。因此，您应该仅在需要超过`gp2`卷提供的性能时才使用`io1`卷。一个可以优化成本的技巧是使用比应用程序要求的更大的`gp2`卷，以提供额外的IO积分。
- en: 'You could, for example, create several different classes using the `io1` type
    to be used by applications with different performance requirements:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以创建几个不同的使用`io1`类型的类，供具有不同性能要求的应用程序使用：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that Kubernetes expects a string value for the `iopsPerGb` field, so you
    will need to quote this value.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Kubernetes期望为`iopsPerGb`字段提供字符串值，因此您需要引用此值。
- en: 'If you are using an application that is optimized to make sequential reads
    and writes to the filesystem, then you might benefit from using the `st1` volume
    type, which uses optimized magnetic storage to provide high throughput reads and
    writes. It is not recommended to use this storage for general-purpose use, as
    the performance when making random access reads or writes will be poor:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的应用程序经过优化，可以对文件系统进行顺序读写操作，那么您可能会从使用`st1`卷类型中受益，该类型使用优化的磁盘存储提供高吞吐量的读写。不建议将此存储用于通用用途，因为进行随机访问读取或写入时的性能将很差：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The `sc1` volume type offers the very lowest cost storage available as an EBS
    volume and is intended for infrequently accessed data. Like `st1` volumes, `sc1`
    is optimized for sequential reads and writes, so will perform poorly on workloads
    with random reads and writes:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`sc1` 卷类型提供了作为 EBS 卷可用的最低成本存储，并且适用于不经常访问的数据。与 `st1` 卷一样，`sc1` 优化了顺序读写，因此在具有随机读写的工作负载上性能较差。'
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It is a good idea to decide up front the different storage classes you want
    to make available in your cluster, and then provide documentation about when each
    class should be used to users of your cluster.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 提前决定您想在集群中提供的不同存储类，并向集群用户提供关于何时使用每个类的文档是一个好主意。
- en: You should think about submitting a list of storage classes to your cluster
    as part of your provisioning process, as there are no storage classes created
    by default when you provision an EKS cluster.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的配置过程中，考虑提交一个存储类列表到您的集群中，因为在配置 EKS 集群时，默认情况下不会创建任何存储类。
- en: StatefulSet
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有状态集
- en: So far, we have seen how we can use Kubernetes to automatically provision EBS
    volumes for `PersistentVolumeClaim`. This can be very useful for a number of applications
    where we need a single volume to provide persistence to a single pod.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何使用 Kubernetes 自动为 `PersistentVolumeClaim` 配置 EBS 卷。这对于许多需要单个卷为单个
    pod 提供持久性的应用程序非常有用。
- en: We run into problems though, as soon as we try to scale our deployment up. Pods
    running on the same node may end up sharing the volume. But as EBS volumes can
    only be attached to a single instance at any one time, any pods scheduled to another
    node will get stuck with the `ContainerCreating` status, waiting endlessly for
    the EBS volume to be attached.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当我们尝试扩展我们的部署时，我们会遇到问题。运行在同一节点上的 pod 可能最终共享卷。但是，由于 EBS 卷一次只能附加到单个实例，任何调度到另一个节点的
    pod 都将被卡在 `ContainerCreating` 状态，无休止地等待 EBS 卷被附加。
- en: If you are running an application where you want each replica to have its own
    unique volume, we can use a stateful set. Stateful sets have two key advantages
    over deployments when we want to deploy applications where each replica needs
    to have its own persistent storage.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行一个应用程序，希望每个副本都有自己独特的卷，我们可以使用有状态集。当我们想要部署每个副本都需要有自己的持久存储的应用程序时，有状态集比部署具有两个关键优势。
- en: Firstly, instead of referring to a single persistent volume by name, we can
    provide a template to create a new persistent volume for each pod. This allows
    us to provision an independent EBS volume for each pod replica, just by scaling
    up the stateful set. If we wanted to achieve this with a deployment, we would
    need to create a separate Deployment for each replica, each referring to a different
    persistent volume by name.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以提供一个模板来为每个 pod 创建一个新的持久卷，而不是通过名称引用单个持久卷。这使我们能够通过扩展有状态集为每个 pod 副本提供独立的
    EBS 卷。如果我们想要通过部署实现这一点，我们需要为每个副本创建一个单独的部署，每个部署通过名称引用不同的持久卷。
- en: Secondly, when a pod is scheduled by `StatefulSet`, each replica has a consistent
    and persistent hostname that stays the same even if the pod is rescheduled to
    another node. This is very useful when running software where each replica expects
    to be able to connect to its peers at a specific address. Before stateful sets
    were added to Kubernetes, deploying such software to Kubernetes often relied on
    special plugins to perform service discovery using the Kubernetes API.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，当通过 `StatefulSet` 调度 pod 时，每个副本都有一个一致和持久的主机名，即使 pod 被重新调度到另一个节点，主机名也保持不变。这在运行软件时非常有用，每个副本都希望能够连接到特定地址的同行。在
    Kubernetes 添加有状态集之前，将这样的软件部署到 Kubernetes 通常依赖于使用 Kubernetes API 执行服务发现的特殊插件。
- en: 'To illustrate how stateful sets work, we are going to rewrite our example application
    deployment manifest to use `StatefulSet`. Because each replica pod in `StatefulSet`
    has a predictable hostname, we first need to create a service to allow traffic
    to these hostnames to be routed to the underlying pods:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明有状态集的工作原理，我们将重写我们的示例应用部署清单，以使用`StatefulSet`。因为`StatefulSet`中的每个副本Pod都有可预测的主机名，所以我们首先需要创建一个服务，以允许将流量路由到这些主机名并传递到底层的Pod：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Each pod will be given a hostname constructed from the name of the stateful
    set and the pod number in the set. The domain of the hostname is the name of the
    service.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Pod将被赋予一个由有状态集的名称和集合中的Pod编号构成的主机名。主机名的域是服务的名称。
- en: Thus, when we create a stateful set called `randserver` with three replicas.
    The Pods in the set will be given the hostnames `randserver-0`, `randserver-1`,
    and `randserver-2`. Other services running inside the cluster will be able to
    connect to these pods by using the names `randserver-0.randserver`, `randserver-1.randserver`,
    and `randserver-2.randserver`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们创建一个名为`randserver`的有三个副本的有状态集。集合中的Pod将被赋予主机名`randserver-0`，`randserver-1`和`randserver-2`。集群中运行的其他服务将能够通过使用名称`randserver-0.randserver`，`randserver-1.randserver`和`randserver-2.randserver`连接到这些Pod。
- en: 'The configuration for `StatefulSet` is very similar to the configuration for
    a deployment. The key differences that should be noted are these:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`StatefulSet`的配置与部署的配置非常相似。应该注意的主要区别如下：'
- en: The `serviceName` field where we need to refer to the service used to provide
    network access to the pods.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serviceName`字段是我们需要引用用于为Pod提供网络访问的服务。'
- en: 'The `volumeClaimTemplates` field where we include a template for `PersistentVolumeClaim`
    that will be created for each pod replica in `StatefulSet`. You can think of this
    as an analog to the template field that provides a template for each pod that
    is created:'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`volumeClaimTemplates`字段，我们在其中包含一个`PersistentVolumeClaim`的模板，该模板将为`StatefulSet`中的每个Pod副本创建。您可以将其视为为每个创建的Pod提供模板的模板字段的类比：'
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once you have submitted `StatefulSet` to Kubernetes, you should be able to
    see the pods that have successfully been scheduled to the cluster:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您将`StatefulSet`提交给Kubernetes，您应该能够看到已成功调度到集群的Pod：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note that the name of each pod follows a predictable pattern, unlike pods created
    with a deployment or replica set, which each have a random name.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个Pod的名称都遵循可预测的模式，不像使用部署或副本集创建的Pod，它们每个都有一个随机名称。
- en: 'Try deleting one of the pods in the stateful set, and notice that it is replaced
    by a pod with exactly the same name as the one that was deleted:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试删除有状态集中的一个Pod，并注意它被一个与被删除的Pod完全相同的名称的Pod所替换：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you look at the persistent volume claims, you will see that their names
    also follow a predictable pattern where the name of a claim is formed from the
    name given in the volume claim template metadata, the name of the stateful set,
    and the pod number:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看持久卷索赔，您将看到它们的名称也遵循可预测的模式，索赔的名称是由卷索赔模板元数据中给定的名称，有状态集的名称和Pod编号组成的。
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you delete (or scale down) a stateful set, then the associated persistent
    volume claims remain. This is quite advantageous as it makes it harder to lose
    the valuable data created by an application. If you later recreate (or scale up)
    the stateful set, then by virtue of the predictable names used, the same volumes
    are reused.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果删除（或缩减）一个有状态集，那么相关的持久卷索赔将保留。这非常有利，因为它使得更难丢失应用程序创建的宝贵数据。如果稍后重新创建（或扩展）有状态集，那么由于使用可预测的名称，相同的卷将被重用。
- en: 'If you do intend to fully remove a stateful set from your cluster, you may
    also need to additionally remove the corresponding persistent volume claims:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您确实打算从集群中完全删除有状态集，您可能还需要另外删除相应的持久卷声明：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned about the rich set of tools that Kubernetes
    provides to provision storage for your applications.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经了解了Kubernetes为您的应用程序提供存储的丰富工具集。
- en: 'You should have learned the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该已经学会了以下内容：
- en: How to configure volumes for your pods
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为您的pod配置卷
- en: How to mount volumes into containers
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何将卷挂载到容器中
- en: How to automatically provision EBS volumes with persistent volume claims
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用持久卷声明自动提供EBS卷
- en: How to provision different EBS volume types by configuring storage classes
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过配置存储类来提供不同的EBS卷类型
- en: How to dynamically provision a volume for each pod in a stateful set
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为有状态集中的每个pod动态提供卷
- en: You should now have enough knowledge to deploy many types of applications to
    your Kubernetes cluster.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该已经掌握足够的知识，可以将许多类型的应用程序部署到您的Kubernetes集群中。
- en: Further reading
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you want to learn more about how to utilize storage in Kubernetes, here
    are some resources that you might find useful:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解如何在Kubernetes中利用存储，这里有一些资源可能对您有用：
- en: '**Kubernetes Helm Charts include many configuration examples for well-known
    datastores that make extensive use of persistent volumes**: [https://github.com/helm/charts](https://github.com/helm/charts)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes Helm Charts包括许多配置示例，用于众所周知的数据存储，这些示例广泛使用持久卷：[https://github.com/helm/charts](https://github.com/helm/charts)
- en: '**The Kubernetes documentation has detailed and extensive information about
    using storage in Kubernetes**: [https://kubernetes.io/docs/concepts/storage/](https://kubernetes.io/docs/concepts/storage/)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes文档详细介绍了在Kubernetes中使用存储的信息：[https://kubernetes.io/docs/concepts/storage/](https://kubernetes.io/docs/concepts/storage/)
- en: '**The Kubernetes EFS provisioner provides an add-on provisioner that can be
    deployed to provision volumes backed by AWS Elastic File System (EFS). This can
    be a useful tool if you want multiple pods to be able to read and write from the
    same volume**: [https://github.com/kubernetes-incubator/external-storage/tree/master/aws/efs](https://github.com/kubernetes-incubator/external-storage/tree/master/aws/efs)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes EFS供应程序提供了一个附加的供应程序，可以部署以提供由AWS弹性文件系统（EFS）支持的卷。如果您希望多个pod能够从同一卷中读取和写入，这可能是一个有用的工具：[https://github.com/kubernetes-incubator/external-storage/tree/master/aws/efs](https://github.com/kubernetes-incubator/external-storage/tree/master/aws/efs)
