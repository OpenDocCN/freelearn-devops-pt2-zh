- en: Reach for the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抓住云端
- en: In this chapter, we are going to learn how to build a Kubernetes cluster that
    runs on Amazon Web Services from first principles. In order to learn how Kubernetes
    works, we are going to manually launch the EC2 instances that will form this first
    cluster and manually install and configure the Kubernetes components.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何从头开始在亚马逊网络服务上构建一个运行Kubernetes集群。为了了解Kubernetes的工作原理，我们将手动启动将形成第一个集群的EC2实例，并手动安装和配置Kubernetes组件。
- en: The cluster that we will build is suitable for you to use when learning about
    managing Kubernetes and for developing applications that can run on Kubernetes.
    With these instructions, we are aiming to build the simplest possible cluster
    that we can deploy to AWS. Of course, this does mean that there are some things
    that you will want to do differently when building a cluster of mission-critical
    applications. But don't worry—there are three chapters in Part 3 - Ready for Production
    where we cover everything you need to know to get your cluster ready for even
    the most demanding applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建的集群适合您在学习管理Kubernetes和开发可以在Kubernetes上运行的应用程序时使用。通过这些说明，我们的目标是构建最简单的集群，可以部署到AWS。当然，这意味着在构建关键任务应用程序的集群时，您可能会有一些不同的需求。但不用担心——在第三部分《准备生产环境》中，我们将涵盖您需要了解的一切，以使您的集群准备好应对最苛刻的应用程序。
- en: Running a Kubernetes cluster on AWS costs money. The configuration we will cover
    in our instructions (a basic cluster with one master and one worker node) at the
    time of writing will cost around US 75 dollars a month. So if you are just using
    your cluster for experimentation and learning, remember to shut the instances
    down when you are finished for the day.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS上运行Kubernetes集群是需要花钱的。根据我们的说明（一个带有一个主节点和一个工作节点的基本集群），目前的费用大约是每月75美元。因此，如果您只是用集群进行实验和学习，请记得在一天结束时关闭实例。
- en: If you have finished with the cluster, terminate the instances and make sure
    that the EBS volumes have been deleted, because you will pay for these storage
    volumes even if the instances they are attached to have been stopped.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经完成了集群，终止实例并确保EBS卷已被删除，因为即使它们所附加的实例已经停止，您也会为这些存储卷付费。
- en: This chapter is designed to be a learning experience, so read through and type
    out the commands as you read them. If you have the e-book version of this book,
    then resist the urge to copy and paste, as you will learn more if you type out
    the commands and take some time to understand what you are doing. There are tools
    that will do everything this chapter covers and more just by running one command,
    but hopefully building your first cluster manually, step by step, will give you
    some valuable insight into what is required to make a Kubernetes cluster tick.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在成为一个学习体验，因此请在阅读时阅读并输入命令。如果您有本书的电子书版本，请抵制复制粘贴的冲动，因为如果您输入命令并花些时间理解您正在做的事情，您会学到更多。有一些工具可以通过运行一个命令来完成本章所涵盖的一切甚至更多，但是希望通过逐步手动构建您的第一个集群，您将获得一些宝贵的见解，了解构建Kubernetes集群所需的一切。
- en: Cluster architecture
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群架构
- en: The cluster we are going to set up in this chapter will be formed of two EC2
    instances—one that will run all the components for the Kubernetes control plane
    and another worker node that you can use to run your applications.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们要建立的集群将由两个EC2实例组成——一个将运行Kubernetes控制平面的所有组件，另一个是您可以用来运行应用程序的工作节点。
- en: Because we start from scratch, this chapter will also lay out one method for
    isolating your Kubernetes cluster in a private network while allowing you easy
    access to the machines from your own workstation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们是从零开始的，本章还将阐述一种在私有网络中隔离Kubernetes集群并允许您从自己的工作站轻松访问机器的方法。
- en: 'We will achieve this by using an additional instance as a bastion host that
    will allow incoming SSH connections from the outside world, as shown in the following
    diagram. If your AWS account already has some infrastructure in place that can
    achieve this, then feel free to skip this section:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过使用额外的实例作为堡垒主机来实现这一点，该主机将允许来自外部世界的SSH连接，如下图所示。如果您的AWS账户已经有一些基础设施可以实现这一点，那么请随意跳过本节：
- en: '![](assets/1043a804-7d8a-4850-a577-1c74900d0ccf.png)The architecture of the
    cluster you will set up in this chapter'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/1043a804-7d8a-4850-a577-1c74900d0ccf.png)本章中您将设置的集群架构'
- en: Creating an AWS account
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建AWS账户
- en: If you don't already have an AWS account, then head over to [https://aws.amazon.com/](https://aws.amazon.com/)
    and sign up for one. Before you can create resources in your account, you will
    need to add a credit card to your account to cover any charges.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有AWS账户，请前往[https://aws.amazon.com/](https://aws.amazon.com/)注册一个。在您的账户中创建资源之前，您需要向您的账户添加信用卡以支付任何费用。
- en: When you first sign up for an AWS account, you will be eligible for a free usage
    tier on some services for the first 12 months. Unfortunately, this free tier doesn't
    provide quite enough resources to run Kubernetes, but in this chapter, we have
    optimized our choice of instances for their low cost, so you should be able to
    follow the examples without spending too much.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次注册AWS账户时，您将在前12个月内有资格免费使用一些服务。不幸的是，这个免费层并不能提供足够的资源来运行Kubernetes，但在本章中，我们已经优化了我们选择的实例，以降低成本，因此您应该能够在不花费太多的情况下跟随示例。
- en: Creating an IAM user
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建IAM用户
- en: 'When you sign up for an AWS account, the email address and password you choose
    will be used to log in to the root account. Before you start to interact with
    AWS, it is a good idea to create an IAM user that you will use to interact with
    AWS. The advantage of this is that if you wish, you can give each IAM user as
    much or as little access as they need to AWS services. If you use the root account,
    you automatically have full access and have no way to manage or revoke privileges.
    Go through the following steps to set up the account:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当您注册AWS账户时，您选择的电子邮件地址和密码将用于登录根账户。在开始与AWS进行交互之前，最好创建一个IAM用户，您将使用该用户与AWS进行交互。这样做的好处是，如果您愿意，您可以为每个IAM用户提供尽可能多或尽可能少的对AWS服务的访问权限。如果您使用根账户，您将自动拥有完全访问权限，并且无法管理或撤销权限。按照以下步骤设置账户：
- en: Once you have logged into the AWS console, go to the Identity and Access Management
    dashboard by clicking on Services and typing `IAM` into the search box.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录AWS控制台后，通过点击“服务”并在搜索框中输入“IAM”来进入身份和访问管理仪表板。
- en: From the sidebar, choose Users to view the IAM users in your AWS account. If
    you have only just set up a new account, there won't be any users here yet—the
    root account doesn't count as a user.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从侧边栏中选择“用户”以查看AWS账户中的IAM用户。如果您刚刚设置了一个新账户，这里还没有任何用户——根账户不算在内。
- en: Start the process of setting up a new user account by clicking on the Add user
    button at the top of the screen.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击屏幕顶部的“添加用户”按钮开始设置新用户账户的流程。
- en: 'Start by choosing a username for your user. Check both boxes to enable **Programmatic
    access** (so you can use the command-line client) and **AWS Management Console
    access** so you can log into the web console, as shown in the preceding screenshot:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先选择一个用户名作为您的用户。勾选两个框以启用**编程访问**（这样您就可以使用命令行客户端）和**AWS管理控制台访问**，这样您就可以登录到Web控制台，如前面的屏幕截图所示：
- en: '![](assets/799d9334-a224-448c-a56f-903fc5fc0ed4.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/799d9334-a224-448c-a56f-903fc5fc0ed4.png)'
- en: 'On the next screen, you can configure the permissions for your user. Choose Attach
    existing policies directly, then choose the AdministratorAccess policy, as shown
    in the following screenshot:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，您可以为用户配置权限。选择**直接附加现有策略**，然后选择**AdministratorAccess**策略，如下图所示：
- en: '![](assets/ba3b9e52-806b-49df-8619-1639c1cffb85.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ba3b9e52-806b-49df-8619-1639c1cffb85.png)'
- en: 'Review your settings, then click Create user:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查您的设置，然后单击**创建用户**：
- en: '![](assets/495a44df-8027-4b9b-8a3e-53ae35bb5b90.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/495a44df-8027-4b9b-8a3e-53ae35bb5b90.png)'
- en: 'Once your user has been created, take a note of the credentials. You will need
    the **Access key ID** and **Secret access key** shortly to configure the AWS command-line
    client. Also take a note of the console sign-in link, as this is unique to your
    AWS account, shown as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建用户后，请记下凭据。您将很快需要**访问密钥ID**和**秘密访问密钥**来配置AWS命令行客户端。还要记下控制台登录链接，因为这是您的AWS帐户的唯一链接，如下所示：
- en: '![](assets/c16d5213-97fe-40d3-af81-f55a87316886.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c16d5213-97fe-40d3-af81-f55a87316886.png)'
- en: Once you have set up an IAM user for yourself, log out of the root account in
    your browser and check that you can sign back in using your username and password.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您为自己设置了IAM用户，请从浏览器中注销根帐户，并检查您是否可以使用用户名和密码重新登录。
- en: You might want to set up two-factor authentication for your AWS account for
    greater security. Remember that anyone with Administrator access to the account
    can access or delete any of the resources in your account.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望为您的AWS帐户设置双因素身份验证以获得更高的安全性。请记住，对帐户具有管理员访问权限的任何人都可以访问或删除您帐户中的任何资源。
- en: Getting the CLI
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取CLI
- en: You can control AWS using the web console, but your control of AWS will be more
    precise if you do everything from the command line with the AWS command-line client.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Web控制台控制AWS，但如果您从AWS命令行客户端执行所有操作，您对AWS的控制将更加精确。
- en: You should follow the instructions provided by AWS to install the command-line
    client on your system (or by using your systems package manager) using the instructions
    found at [https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该按照AWS提供的说明在您的系统上安装命令行客户端（或者使用系统包管理器），使用以下链接中找到的说明：[https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)。
- en: Once you have installed the command-line client, run the `aws configure` command
    to configure the CLI with your credentials. This command will update the `aws
    config` files in your home directory.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您安装了命令行客户端，请运行`aws configure`命令以使用您的凭据配置CLI。此命令将更新您的主目录中的`aws config`文件。
- en: At this stage, you should choose an AWS region for your cluster. For testing
    and experimentation, it makes sense for you to choose one that is located relatively
    close to your location. Doing so will improve latency when you access your instances
    with `ssh` or `connect` to the Kubernetes API.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，您应该为您的集群选择一个AWS区域。对于测试和实验，选择一个距离您位置相对较近的区域是有意义的。这样做将在您使用`ssh`或`connect`访问您的实例时改善延迟。
- en: Setting up a key pair
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置密钥对
- en: When we launch an EC2 instance, we want to be able to access it via SSH. We
    can register a key pair in the EC2 console to allow us to log in once our instance
    has been launched.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们启动EC2实例时，我们希望能够通过SSH访问它。我们可以在EC2控制台中注册一个密钥对，以便在启动实例后登录。
- en: 'It is possible for us to instruct AWS to generate a key pair for you (that
    you can then download). But the best practice is to generate a key pair on your
    workstation and upload the public part to AWS. This ensures that you (and only
    you) have control of your instance, since the private half of your key will never
    leave your own machine. To set up the key pair, go through the following steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以要求AWS为您生成一个密钥对（然后您可以下载）。但最佳做法是在您的工作站上生成一个密钥对，并将公共部分上传到AWS。这样可以确保您（只有您）控制您的实例，因为您的密钥的私有部分永远不会离开您自己的机器。要设置密钥对，请按照以下步骤进行：
- en: 'You may already have a key pair on your machine that you wish to use. You can
    check for existing keys by looking in your `.ssh` directory, as follows:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能已经在您的机器上有一个希望使用的密钥对。您可以通过查看`.ssh`目录中的现有密钥来检查，如下所示：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, you can see that I have one key pair in my `.ssh` directory—the
    private key has the default name of `id_rsa` and the public key is called `id_rsa.pub`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此示例中，您可以看到我在`.ssh`目录中有一个密钥对——私钥的默认名称为`id_rsa`，公钥称为`id_rsa.pub`。
- en: 'If you don''t already have a key pair set up, or if you want to create a fresh
    one, then you can use the `ssh-keygen` command to create a new one, as follows:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有设置密钥对，或者想要创建一个新的密钥对，那么您可以使用`ssh-keygen`命令创建一个新的，如下所示：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This command creates a new key pair using your email address as a label.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此命令使用您的电子邮件地址作为标签创建一个新的密钥对。
- en: 'Next, choose where to save the new key pair. If you don''t already have a key
    pair, just press *Enter* to write it to the default location as follows:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择保存新密钥对的位置。如果您还没有密钥对，只需按*Enter*将其写入默认位置，如下所示：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next, you will be asked for a passphrase (password). If you just press *Enter*,
    then the key will be created without any password protection, as shown in the
    following command. If you choose a password, make sure that you remember it or
    store it securely, as you won't be able to use your SSH key (or access your instances)
    without it.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，系统会要求您输入密码。如果只需按*Enter*，则密钥将在没有任何密码保护的情况下创建，如下命令所示。如果选择密码，请确保记住它或安全存储，否则您将无法在没有密码的情况下使用SSH密钥（或访问实例）。
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once you have an SSH key pair on your machine, you can go about importing it
    into your AWS account. Remember that you only need to import the public part of
    your key pair. This will be in a file that ends with the `.pub` extension.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您在您的机器上有了SSH密钥对，您可以开始将其导入到您的AWS帐户中。请记住，您只需要导入密钥对的公共部分。这将在以`.pub`扩展名结尾的文件中。
- en: 'From the AWS EC2 console (click on Services and then search for EC2), choose
    **Key Pairs** from the menu on the left of the screen, as shown in the following
    screenshot:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从AWS EC2控制台（单击“服务”，然后搜索EC2），选择屏幕左侧菜单中的**密钥对**，如下截图所示：
- en: '![](assets/e53ef48a-a859-437d-a809-c6aac3c95f1a.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e53ef48a-a859-437d-a809-c6aac3c95f1a.png)'
- en: 'From this screen, choose **Import Key Pair** to bring up a dialog where you
    can upload your key pair, as shown in the following screenshot:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从此屏幕中，选择**导入密钥对**以打开对话框，您可以在其中上传您的密钥对，如下截图所示：
- en: '![](assets/701fb56c-3d73-4bdc-88ad-da0ea9fc0573.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/701fb56c-3d73-4bdc-88ad-da0ea9fc0573.png)'
- en: Choose a name that will identify your key pair within AWS (I chose `eds_laptop`).
    Then, either navigate to your key's location or just paste its text into the large
    text box, and then click **Import**. Once you have imported your key, you should
    see it listed on the **Key Pairs** page.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个在AWS中标识您的密钥对的名称（我选择了`eds_laptop`）。然后，要么导航到密钥的位置，要么只需将其文本粘贴到大文本框中，然后单击**导入**。导入密钥后，您应该在**密钥对**页面上看到它列出。
- en: If you are using AWS in more than one region, you will need to import a key
    pair in each region that you want to launch instances in.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在多个地区使用AWS，则需要在要启动实例的每个地区导入一个密钥对。
- en: Preparing the network
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备网络
- en: We will set up a new VPC in your AWS account. A VPC, or virtual private cloud,
    allows us to have a private network that is isolated from all the other users
    of EC2 and the internet that we can launch instances onto.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在您的AWS账户中设置一个新的VPC。VPC，或虚拟私有云，允许我们拥有一个与EC2和互联网上的所有其他用户隔离的私有网络，我们可以在其上启动实例。
- en: 'It provides a secure foundation that we can use to build a secure network for
    our cluster, as shown in the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 它为我们构建集群的安全网络提供了一个安全的基础，如下命令所示：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `VpcId` will be unique to your account, so I am going to set a shell variable
    that I can use to refer to it whenever we need. You can do the same with the `VpcId`
    from your account, or you might prefer to just type it out each time you need
    it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`VpcId`将是您的账户唯一的，所以我将设置一个shell变量，以便在需要时引用它。您可以使用来自您的帐户的`VpcId`做同样的事情，或者您可能更喜欢每次需要时将其键入。'
- en: 'The rest of the steps in this chapter follow this pattern, but if you don''t
    understand what is happening, don''t be afraid to look at the shell variables
    and correlate the IDs with the resources in the AWS console, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余步骤遵循这种模式，但如果您不明白发生了什么，不要害怕查看shell变量，并将ID与AWS控制台中的资源进行关联，如下所示：
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Kubernetes names your instances based on the internal DNS hostnames that AWS
    assigns to them. If we enable DNS support in the VPC, then we will be able to
    resolve these hostnames when using the DNS server provided inside the VPC, as
    follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes根据AWS分配给它们的内部DNS主机名命名您的实例。如果我们在VPC中启用DNS支持，那么我们将能够在使用VPC内提供的DNS服务器时解析这些主机名，如下所示：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Kubernetes makes extensive use of AWS resource tags, so it knows which resources
    it can use and which resources are managed by Kubernetes. The key for these tags
    is `kubernetes.io/cluster/<cluster_name>`. For resources that might be shared
    between several distinct clusters, we use the `shared` value. This means that
    Kubernetes can make use of them, but won't ever remove them from your account.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes广泛使用AWS资源标记，因此它知道可以使用哪些资源，哪些资源由Kubernetes管理。这些标记的关键是`kubernetes.io/cluster/<cluster_name>`。对于可能在几个不同集群之间共享的资源，我们使用`shared`值。这意味着Kubernetes可以利用它们，但永远不会从您的帐户中删除它们。
- en: We would use this for resources such as VPCs. Resources where the life cycle
    is fully managed by Kubernetes have a tag value of `owned` and may be deleted
    by Kubernetes if they are no longer required. Kubernetes typically creates these
    tags automatically when it creates resources such as instances in an autoscaling
    group, EBS volumes, or load balancers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用于VPC等资源。Kubernetes完全管理生命周期的资源具有`owned`的标记值，并且如果不再需要，Kubernetes可能会删除它们。当Kubernetes创建资源，如自动缩放组中的实例、EBS卷或负载均衡器时，通常会自动创建这些标记。
- en: I like to name the clusters I create after famous people from the history of
    computer science. The cluster I created for this chapter is named after Grace
    Hopper, who designed the COBOL programming language.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢在创建的集群之后以计算机科学历史上的著名人物命名。我为本章创建的集群以设计了COBOL编程语言的Grace Hopper命名。
- en: 'Let''s add a tag to our new VPC so that Kubernetes will be able to use it,
    as shown in the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的新VPC添加一个标签，以便Kubernetes能够使用它，如下命令所示：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When we created our VPC, a main route table was automatically created. We will
    use this for routing in our private subnet. Let''s grab the ID to use later, as
    shown in the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建VPC时，一个主路由表会自动创建。我们将在私有子网中使用这个路由表进行路由。让我们先获取ID以备后用，如下命令所示：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we will add a second route table to manage routing for the public subnets
    in our VPC, as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将添加第二个路由表来管理我们VPC中公共子网的路由，如下所示：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we will give the route tables names so we can keep track of them later:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将为路由表命名，以便以后能够跟踪它们：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Next, we are going to create two subnets for our cluster to use. Because I am
    creating my cluster in the `eu-west-1` region (Ireland), I am going to create
    these subnets in the `eu-west-1a` subnet. You should choose an availability zone
    for your cluster from the region you are using by running `aws ec2 describe-availability-zones`.
    In Part 3, we will learn how to create high-availability clusters that span multiple
    availability zones.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建两个子网供我们的集群使用。因为我要在“eu-west-1”区域（爱尔兰）创建我的集群，我将在“eu-west-1a”子网中创建这些子网。您应该通过运行“aws
    ec2 describe-availability-zones”来选择您正在使用的区域中的可用区来为您的集群选择一个可用区。在第三部分，我们将学习如何创建跨多个可用区的高可用性集群。
- en: 'Let''s start by creating a subnet for instances that will only be accessible
    from within our private network. We are going to use a `/20 netmask` on the CIDR
    block, as shown in the following command; with this, AWS will give us 4089 IP
    addresses that will be available to be assigned to our EC2 instances and to pods
    launched by Kubernetes:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个只能从我们的私有网络内部访问的实例子网。我们将在CIDR块上使用“/20子网掩码”，如下命令所示；通过这样做，AWS将为我们提供4089个IP地址，可供分配给我们的EC2实例和Kubernetes启动的pod使用：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, let''s add another subnet to the same availability zone, as shown in
    the following command. We will use this subnet for instances that need to be accessible
    from the internet, such as public load balancers and bastion hosts:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在同一个可用区添加另一个子网，如下命令所示。我们将使用这个子网来放置需要从互联网访问的实例，比如公共负载均衡器和堡垒主机：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, we should associate this subnet with the public route table, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们应该将这个子网与公共路由表关联，如下所示：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In order for the instances in our public subnet to communicate with the internet,
    we will create an internet gateway, attach it to our VPC, and then add a route
    to the route table, routing traffic bound for the internet to the gateway, as
    shown in the following command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的公共子网中的实例能够与互联网通信，我们将创建一个互联网网关，将其附加到我们的VPC，然后在路由表中添加一条路由，将流向互联网的流量路由到网关，如下命令所示：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In order to configure the instances in the private subnet, we will need them
    to be able to make outbound connections to the internet in order to install software
    packages and so on. To make this possible, we will add a NAT gateway to the public
    subnet and then add a route to the private route table for internet-bound traffic,
    as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置私有子网中的实例，我们需要它们能够建立对外部连接，以便安装软件包等。为了实现这一点，我们将在公共子网中添加一个NAT网关，然后为互联网出站流量在私有路由表中添加路由，如下所示：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'At this stage, you may have to wait a few moments for the NAT gateway to be
    created before creating the route, as shown in the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你可能需要等待一段时间，直到NAT网关被创建，然后再创建路由，如下命令所示：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Setting up a bastion
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立堡垒
- en: We will use the first host we are going to launch as a bastion host that will
    allow us to connect to other servers that are only accessible from within the
    private side of our VPC network.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们要启动的第一个主机作为堡垒主机，这将允许我们连接到只能从VPC网络的私有侧访问的其他服务器。
- en: 'We will be creating a security group to allow SSH traffic to this instance.
    We will use the `aws ec2 create-security-group` command to create a security group
    for our bastion host, as shown in the following command. A security group is an
    abstraction that AWS provides in order to group related firewall rules together
    and apply them to groups of hosts:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个安全组，以允许SSH流量到这个实例。我们将使用`aws ec2 create-security-group`命令为我们的堡垒主机创建一个安全组，如下命令所示。安全组是AWS提供的一种抽象，用于将相关的防火墙规则分组并应用到主机组上：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Once we have created a security group, we can attach a rule to it to allow
    SSH ingress on port `22`, as shown in the following command. This will allow you
    to access your host with an SSH client. Here, I am allowing ingress from the CIDR
    range `0.0.0.0/0`, but if your internet connection has a stable IP address, you
    might want to limit access to just your own IP:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了安全组，我们可以附加一个规则以允许端口`22`上的SSH入口，如下命令所示。这将允许您使用SSH客户端访问您的主机。在这里，我允许来自CIDR范围`0.0.0.0/0`的入口，但如果您的互联网连接有一个稳定的IP地址，您可能希望将访问限制在您自己的IP上：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that we have set up the security group for the bastion host, we can go about
    launching our first EC2 instance. In this chapter, I will be using Ubuntu Linux
    (a popular Linux distribution). Before we can launch the instance, we will need
    to discover the ID of the AMI (Amazon machine image) for the operating system
    we want to use.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为堡垒主机设置了安全组，我们可以开始启动我们的第一个EC2实例。在本章中，我将使用Ubuntu Linux（一种流行的Linux发行版）。在启动实例之前，我们需要发现我们想要使用的操作系统的AMI（Amazon机器映像）的ID。
- en: 'The Ubuntu project regularly publishes updated images to their AWS account
    that can be used to launch EC2 instances. We can run the following command to
    discover the ID of the image that we require:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu项目定期发布更新的映像到他们的AWS账户，可以用来启动EC2实例。我们可以运行以下命令来发现我们需要的映像的ID：
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We are going to use a `t2.micro` instance for the bastion host (as shown in
    the following command), as the usage for this instance type is included in the
    AWS free tier, so you won''t have to pay for it for the first 12 months after
    you set up your AWS account:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为堡垒主机使用一个`t2.micro`实例（如下命令所示），因为这种实例类型的使用包含在AWS免费套餐中，所以在设置AWS账户后的第一个12个月内，您不必为其付费。
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note that we are passing the ID of the subnet we chose to use, the ID of the
    security group we just created, and the name of the key pair we uploaded.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在传递我们选择使用的子网的ID，我们刚刚创建的安全组的ID，以及我们上传的密钥对的名称。
- en: 'Next, let''s update the instance with a `Name` tag so we can recognize it when
    looking at the EC2 console, as shown in the following command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们使用`Name`标签更新实例，这样我们在查看EC2控制台时就可以识别它，如下命令所示：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Once the instance has launched, you should be able to run the `aws ec2 describe-instances`
    command to discover the public IP address of your new instance, as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实例启动，您应该能够运行`aws ec2 describe-instances`命令来发现您新实例的公共IP地址，如下所示：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You should now be able to access the instance with SSH, as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该能够使用SSH访问实例，如下所示：
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As you log in, you should see a message like the following:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当您登录时，您应该会看到以下消息：
- en: '[PRE24]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you saved your key pair as something other than the default `~/.ssh/id_rsa`,
    you can pass the path to your key using the `-i` flag, as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将密钥对保存为除默认的`~/.ssh/id_rsa`之外的其他内容，您可以使用`-i`标志传递密钥的路径，如下所示：
- en: '`**ssh -i ~/.ssh/id_aws_rsa ubuntu@$BASTION_IP**`'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`**ssh -i ~/.ssh/id_aws_rsa ubuntu@$BASTION_IP**`'
- en: 'As an alternative, you can add the key to your SSH agent first by running the
    following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 作为替代，您可以首先将密钥添加到您的SSH代理中，方法如下：
- en: '`**ssh-add ~/.ssh/id_aws_rsa**`'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`**ssh-add ~/.ssh/id_aws_rsa**`'
- en: sshuttle
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sshuttle
- en: It is possible to forward traffic from your workstation to the private network
    by just using SSH. However, we can make accessing servers via the bastion instance
    much more convenient by using the `sshuttle` tool.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 只需使用SSH就可以将流量从工作站转发到私有网络。但是，我们可以使用`sshuttle`工具更方便地访问堡垒实例上的服务器。
- en: It is simple to install `sshuttle` on your workstation.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的工作站上安装`sshuttle`很简单。
- en: 'You can install it on macOS using Homebrew, as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Homebrew在macOS上安装它，如下所示：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can also install it on Linux (if you have Python installed), as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Linux上安装了Python，也可以按照以下方式安装它：
- en: '[PRE26]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To transparently proxy traffic to the instances inside the private network,
    we can run the following command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了透明地代理私有网络内的实例流量，我们可以运行以下命令：
- en: '[PRE27]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Firstly, we pass the SSH login details of our `ubuntu@$BASTION_IP` bastion instance,
    followed by the CIDR of our VPC (so that only traffic destined for the private
    network passes over the tunnel); this can be found by running `aws ec2 describe-vpcs`.
    Finally, we pass the `--dns` flag so that DNS queries on your workstation will
    be resolved by the DNS servers of the remote instance.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们传递我们的`ubuntu@$BASTION_IP`堡垒实例的SSH登录详细信息，然后是我们VPC的CIDR（这样只有目的地是私有网络的流量才会通过隧道传输）；这可以通过运行`aws
    ec2 describe-vpcs`来找到。最后，我们传递`--dns`标志，以便您的工作站上的DNS查询将由远程实例的DNS服务器解析。
- en: Using `sshuttle` requires you to enter your local sudo password in order to
    set up its proxy server.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`sshuttle`需要您输入本地sudo密码，以便设置其代理服务器。
- en: You might want to run `sshuttle` in a separate terminal or in the background
    so that you still have access to the shell variables we have been using.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望在单独的终端或后台运行`sshuttle`，以便您仍然可以访问我们一直在使用的shell变量。
- en: 'We can validate that this setup is working correctly by trying to log in to
    our instance through its private DNS name, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过尝试使用其私有DNS名称登录到我们的实例来验证此设置是否正常工作，方法如下：
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This tests whether you can resolve a DNS entry from the private DNS provided
    by AWS to instances running within your VPC, and whether the private IP address
    now returned by that query is reachable.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这将测试您是否可以从AWS提供的私有DNS解析VPC内运行的实例的DNS条目，并且查询返回的私有IP地址是否可达。
- en: If you have any difficulties, check `sshuttle` for any connection errors and
    ensure that you have remembered to enable DNS support in your VPC.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到任何困难，请检查`sshuttle`是否有任何连接错误，并确保您已经记得在您的VPC中启用了DNS支持。
- en: Instance profiles
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实例配置文件
- en: In order for Kubernetes to make use of its integrations with the AWS cloud APIs,
    we need to set up IAM instance profiles. An instance profile is a way for the
    Kubernetes software to authenticate with the AWS API, and for us to assign fine-grained
    permissions on the actions that Kubernetes can take.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Kubernetes能够利用其与AWS云API的集成，我们需要设置IAM实例配置文件。实例配置文件是Kubernetes软件与AWS API进行身份验证的一种方式，也是我们为Kubernetes可以执行的操作分配细粒度权限的一种方式。
- en: It can be confusing to learn all of the permissions that Kubernetes requires
    to function correctly. You could just set up instance profiles that allow full
    access to AWS, but this would be at the expense of security best practice.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 学习Kubernetes需要正确运行所需的所有权限可能会令人困惑。您可以设置允许对AWS进行完全访问的实例配置文件，但这将以牺牲安全最佳实践为代价。
- en: Whenever we assign security permissions, we should be aiming to grant just enough
    permissions for our software to function correctly. To this end, I have collated
    a set of minimal IAM policies that will allow our cluster to function correctly,
    without giving excess permissions away.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们分配安全权限时，我们应该致力于授予软件正常运行所需的最低权限。为此，我整理了一组最小的IAM策略，这些策略将允许我们的集群正常运行，而不会过度授予权限。
- en: You can view these policies at [https://github.com/errm/k8s-iam-policies](https://github.com/errm/k8s-iam-policies),
    where I have documented each policy with a brief description of its purpose.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/errm/k8s-iam-policies](https://github.com/errm/k8s-iam-policies)查看这些策略，我已经用简要描述记录了每个策略的目的。
- en: 'The repository includes a simple shell script that we can use to create an
    IAM instance profile for the master and worker nodes in our cluster, as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库包括一个简单的shell脚本，我们可以用它来为我们集群中的主节点和工作节点创建IAM实例配置文件，如下所示：
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Kubernetes software
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes软件
- en: We are going to launch an instance in which we will install all of the software
    that the different nodes that make up our cluster will need. We will then create
    an AMI, or Amazon machine image, that we can use to launch the nodes on our cluster.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将启动一个实例，在该实例中，我们将安装组成我们集群的不同节点所需的所有软件。然后，我们将创建一个AMI，或Amazon机器映像，我们可以用它来启动我们集群上的节点。
- en: 'First, we create a security group for this instance, as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们为这个实例创建一个安全组，如下所示：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We will need to be able to access this instance from our bastion host in order
    to log in and install software, so let''s add a rule to allow SSH traffic on port
    `22` from instances in the `ssh-bastion` security group, as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要能够从我们的堡垒主机访问这个实例，以便登录和安装软件，因此让我们添加一条规则，允许来自`ssh-bastion`安全组中实例的端口`22`的SSH流量，如下所示：
- en: '[PRE31]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We are just using a `t2.mico` instance here since we don''t need a very powerful
    instance just to install packages, as shown in the following command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是在这里使用一个`t2.micro`实例，因为我们不需要一个非常强大的实例来安装软件包，如下命令所示：
- en: '[PRE32]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We add a `Name` tag so we can identify the instance later if we need, as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加一个`Name`标签，这样我们以后可以识别实例，如果需要的话，如下所示：
- en: '[PRE33]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Grab the IP address of the instance, as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 获取实例的IP地址，如下所示：
- en: '[PRE34]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then log in with `ssh`, as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`ssh`登录，如下所示：
- en: '[PRE35]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now we are ready to start configuring the instance with the software and configuration
    that all of the nodes in our cluster will need. Start by synchronizing the apt
    repositories, as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备开始配置实例，安装所有集群中所有节点都需要的软件和配置。首先同步apt存储库，如下所示：
- en: '[PRE36]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Docker
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker
- en: Kubernetes can work with a number of container runtimes, but Docker is still
    the most widely used.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes可以与许多容器运行时一起工作，但Docker仍然是最广泛使用的。
- en: 'Before we install Docker, we will add a `systemd` drop-in config file to the
    Docker service, as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装Docker之前，我们将向Docker服务添加一个`systemd` drop-in配置文件，如下所示：
- en: '[PRE37]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In order for our Kubernetes pods to be accessible to other instances in the
    cluster, we need to set the default policy for the `iptables FORWARD` chain as
    shown in the following command; otherwise, Docker will set this to `DROP` and
    traffic for Kubernetes services will be dropped:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的Kubernetes pod对集群中的其他实例可访问，我们需要设置`iptables FORWARD`链的默认策略，如下命令所示；否则，Docker将将其设置为`DROP`，Kubernetes服务的流量将被丢弃：
- en: '[PRE38]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Kubernetes will work well with the version of Docker that is included in the
    Ubuntu repositories, so we can install it simply by installing the `docker.io`
    package, as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes将与Ubuntu存储库中包含的Docker版本很好地配合，因此我们可以通过安装`docker.io`软件包来简单地安装它，如下所示：
- en: '[PRE39]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Check that Docker is installed by running the following:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令检查Docker是否已安装：
- en: '[PRE40]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Installing Kubeadm
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Kubeadm
- en: 'Next, we will install the packages that we need to set up a Kubernetes control
    plane on this host. These packages are described in the following list:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装我们在这个主机上设置Kubernetes控制平面所需的软件包。这些软件包在以下列表中描述：
- en: '`kubelet`: The node agent that Kubernetes uses to control the container runtime.
    This is used to run all the other components of the control plane within Docker
    containers.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubelet`：Kubernetes用来控制容器运行时的节点代理。这用于在Docker容器中运行控制平面的所有其他组件。'
- en: '`kubeadm`: This utility is responsible for bootstrapping a Kubernetes cluster.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubeadm`：这个实用程序负责引导Kubernetes集群。'
- en: '`kubectl`: The Kubernetes command-line client, which will allow us to interact
    with the Kubernetes API server.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl`：Kubernetes命令行客户端，它将允许我们与Kubernetes API服务器交互。'
- en: 'First, add the signing key for the apt repository that hosts the Kubernetes
    packages, as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，添加托管Kubernetes软件包的apt存储库的签名密钥，如下所示：
- en: '[PRE41]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Next add the Kubernetes apt repository, as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，添加Kubernetes apt存储库，如下所示：
- en: '[PRE42]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Then, resynchronize the package indexes, as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，重新同步软件包索引，如下所示：
- en: '[PRE43]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then, install the required packages, as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按以下方式安装所需的软件包：
- en: '[PRE44]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This will install the latest version of the packages. If you want to pin to
    a specific version of Kubernetes, try running `apt-cache madison kubeadm` to see
    the different versions available.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装软件包的最新版本。如果您想固定到特定版本的Kubernetes，尝试运行`apt-cache madison kubeadm`来查看不同的可用版本。
- en: 'I have prepared this chapter using Kubernetes 1.10\. If, you wanted to install
    the most recent release of Kubernetes 1.10, you could run the following command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用Kubernetes 1.10准备了这一章节。如果你想安装最新版本的Kubernetes 1.10，你可以运行以下命令：
- en: '`**sudo apt-get install kubeadm=1.10.* kubectl=1.10.* kubelet=1.10.***`'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`**sudo apt-get install kubeadm=1.10.* kubectl=1.10.* kubelet=1.10.***`'
- en: Building an AMI
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建AMI
- en: 'Now that we are done with installing packages on this instance, we can shut
    it down, as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在这个实例上安装软件包完成后，可以关闭它，如下所示：
- en: '[PRE45]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'We can use the `create-image` command to instruct AWS to snapshot the root
    volume of our instance and use it to produce an AMI, as shown in the following
    command (you might need to wait a few moments for the instance to fully stop before
    running the command):'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`create-image`命令指示AWS对我们的实例的根卷进行快照，并使用它来生成AMI，如下命令所示（在运行命令之前，您可能需要等待一段时间，直到实例完全停止）：
- en: '[PRE46]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'It can take a few minutes for the image to become available for you to use,
    but you can check on its status with the `describe-images` command, as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像变得可用需要一些时间，但您可以使用`describe-images`命令来检查其状态，如下所示：
- en: '[PRE47]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: While the image is being built, you will see `pending`, but once it is ready
    to use the state will have changed to `available`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建镜像时，您将看到`pending`，但一旦准备好使用，状态将变为`available`。
- en: Bootstrapping the cluster
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引导集群
- en: 'Now we can launch an instance for Kubernetes control plane components. First,
    we will create a security group for this new instance, as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以为Kubernetes控制平面组件启动一个实例。首先，我们将为这个新实例创建一个安全组，如下所示：
- en: '[PRE48]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We will need to be able to access this instance from our bastion host in order
    to log in and configure the cluster. We will add a rule to allow SSH traffic on
    port `22` from instances in the `ssh-bastion` security group, as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要能够从我们的堡垒主机访问这个实例，以便登录和配置集群。我们将添加一条规则，允许来自`ssh-bastion`安全组中实例的端口`22`上的SSH流量，如下所示：
- en: '[PRE49]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Now we can launch the instance, as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以启动实例，如下所示：
- en: '[PRE50]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We should give the instance a name, and to ensure that Kubernetes can associate
    all of the resources with our cluster, we will also add the `KubernetesCluster`
    tag with a name for this cluster, as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该给实例命名，并确保Kubernetes能够将所有资源与我们的集群关联起来，我们还将添加`KubernetesCluster`标签，并为此集群命名，如下所示：
- en: '[PRE51]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'To ensure that all the Kubernetes components use the same name, we should set
    the hostname to match the name given by the AWS metadata service, as shown in
    the following command. This is because the name from the metadata service is used
    by components that have the AWS cloud provider enabled:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保所有 Kubernetes 组件使用相同的名称，我们应该将主机名设置为与 AWS 元数据服务提供的名称相匹配，如下所示。这是因为元数据服务提供的名称被启用了
    AWS 云提供程序的组件使用：
- en: '[PRE52]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'To correctly configure the kubelet to use the AWS cloud provider, we create
    a `systemd` drop-in file to pass some extra arguments to the kubelet, as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确配置 kubelet 使用 AWS 云提供程序，我们创建了一个 `systemd` drop-in 文件，向 kubelet 传递一些额外的参数，如下所示：
- en: '[PRE53]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Once you have added this file, reload the `systemd` configuration, as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了这个文件后，重新加载 `systemd` 配置，如下所示：
- en: '[PRE54]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We need to provide `kubeadm` with a configuration file in order to enable the
    AWS cloud provider on each of the components that it will launch. Here, we also
    set `tokenTTL` to `0`, as shown in the following command; this means that the
    token that is issued to allow worker nodes to join the cluster won''t expire.
    This is important, as we plan to manage our workers with an autoscaling group,
    and new nodes could join the group after a while:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为 `kubeadm` 提供一个配置文件，以便在它启动的每个组件上启用 AWS 云提供程序。在这里，我们还将 `tokenTTL` 设置为 `0`，如下所示；这意味着发放给工作节点加入集群的令牌不会过期。这很重要，因为我们计划使用自动扩展组来管理我们的工作节点，新节点可能会在一段时间后加入该组：
- en: '[PRE55]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Now we just need to run the following command to bootstrap the master:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要运行以下命令来引导主节点：
- en: '[PRE56]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: You should see the preceding message followed by some instructions to set up
    the rest of the cluster. Make a note of the `kubeadm join` command as we will
    need it to set up the worker node(s).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到前面的消息，然后是一些设置集群其余部分的说明。记下 `kubeadm join` 命令，因为我们将需要它来设置工作节点。
- en: 'We can check that the API server is functioning correctly by following the
    instructions given by `kubeadm` to set up `kubectl` on the host, as shown in the
    following command:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过按照 `kubeadm` 给出的指示在主机上设置 `kubectl` 来检查 API 服务器是否正常运行，如下所示：
- en: '[PRE57]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Try running the `kubectl` version. If `kubectl` can correctly connect to the
    host, then you should be able to see the version of the Kubernetes software for
    the client (`kubectl`) and on the server, as shown in the following command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试运行 `kubectl` version。如果 `kubectl` 能够正确连接到主机，那么您应该能够看到客户端（`kubectl`）和服务器上 Kubernetes
    软件的版本，如下所示：
- en: '[PRE58]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: What just happened?
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 刚刚发生了什么？
- en: So that was easy right? We got the Kubernetes control plane up and running by
    running one command.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 那很容易对吧？我们通过运行一个命令来启动和运行了 Kubernetes 控制平面。
- en: The `kubeadm` command is a fantastic tool because it takes a lot of the guesswork
    out of correctly configuring Kubernetes. But let's take a brief intermission from
    setting up our cluster and dig a little bit deeper to discover what actually just
    happened.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubeadm` 命令是一个很棒的工具，因为它消除了正确配置 Kubernetes 的许多猜测。但是让我们暂时中断设置集群的过程，深入挖掘一下刚刚发生了什么。'
- en: Looking though the output from the `kubeadm` command should give us some clues.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 `kubeadm` 命令的输出应该给我们一些线索。
- en: The first thing that `kubeadm` did was to establish a private key infrastructure.
    If you take a look at the `/etc/kubernetes/pki` directory, you can see a number
    of `ssl` certificates and private keys, as well as a certificate authority that
    was used to sign each key pair. Now, when we add worker nodes to the cluster,
    they will be able to establish secure communication between the kubelet and the
    `apiserver`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，`kubeadm`做的事情是建立一个私有密钥基础设施。如果你查看`/etc/kubernetes/pki`目录，你会看到一些`ssl`证书和私钥，以及一个用来签署每个密钥对的证书颁发机构。现在，当我们向集群添加工作节点时，它们将能够在kubelet和`apiserver`之间建立安全通信。
- en: Next, `kubedam` wrote static pod manifests to the `/etc/kubernetes/manifests/`
    directory. These manifests are just like the pod definitions that you would submit
    to the Kubernetes API sever to run your own applications, but since the API server
    has not yet started, the definition is read directly from the disk by the `kubelet`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`kubedam`将静态pod清单写入`/etc/kubernetes/manifests/`目录。这些清单就像您将提交给Kubernetes
    API服务器以运行自己的应用程序的pod定义一样，但由于API服务器尚未启动，定义是由`kubelet`直接从磁盘读取的。
- en: 'The `kubelet` is configured to read these static pod manifests in a `systemd
    dropin` that `kubeadm` creates at `etc/systemd/system/kubelet.service.d/10-kubeadm.conf`.
    You can see the following flag among the other configurations:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubelet`被配置为在`kubeadm`在`etc/systemd/system/kubelet.service.d/10-kubeadm.conf`创建的`systemd
    dropin`中读取这些静态pod清单。您可以在其他配置中看到以下标志：'
- en: '[PRE59]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'If you look in `/etc/kubernetes/manifests/`, you will see Kubernetes pod specifications
    for each of the components that form the control plane, as described in the following
    list:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看`/etc/kubernetes/manifests/`，您将看到形成控制平面的每个组件的Kubernetes pod规范，如下列表所述：
- en: '`etcd.yaml`: The key value store that stores the state of the API server'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`etcd.yaml`：存储API服务器状态的键值存储'
- en: '`kube-apiserver.yaml`: The API server'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-apiserver.yaml`：API服务器'
- en: '`kube-controller-manager.yaml`: The controller manager'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-controller-manager.yaml`：控制器管理器'
- en: '`kube-scheduler.yaml`: The scheduler'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-scheduler.yaml`：调度程序'
- en: 'Finally, once the API server has started, `kubeadm` submits two add-ons to
    the API, as described in the following list:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一旦API服务器启动，`kubeadm`向API提交了两个插件，如下列表所述：
- en: '`kube-proxy`: This is the process that configures iptables on each node to
    make the service IPs route correctly. It is run on each node with a DaemonSet.
    You can look at this configuration by running `kubectl -n kube-system describe
    ds kube-proxy`.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-proxy`：这个进程在每个节点上配置iptables，使服务IP正确路由。它在每个节点上以DaemonSet运行。您可以通过运行`kubectl
    -n kube-system describe ds kube-proxy`来查看此配置。'
- en: '`kube-dns`: This process provides the DNS server that can be used by applications
    running on the cluster for service discovery. Note that it will not start running
    correctly until you have configured a pod network for your cluster. You can view
    the configuration for `kube-dns` by running `kubectl -n kube-system describe deployment
    kube-dns`.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kube-dns`：这个进程提供了可以被集群上运行的应用程序用于服务发现的DNS服务器。请注意，在为您的集群配置pod网络之前，它将无法正确运行。您可以通过运行`kubectl
    -n kube-system describe deployment kube-dns`来查看`kube-dns`的配置。'
- en: 'You could try using `kubectl` to explore the different components that make
    up the Kubernetes control plane. Try running the following commands:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试使用`kubectl`来探索组成Kubernetes控制平面的不同组件。尝试运行以下命令：
- en: '`**$ kubectl -n kube-system get pods**`'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ kubectl -n kube-system get pods**'
- en: '`**$ kubectl -n kube-system describe pods**`'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ kubectl -n kube-system describe pods**'
- en: '`**$ kubectl -n kube-system get daemonsets**`'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ kubectl -n kube-system get daemonsets**'
- en: '`**$ kubectl -n kube-system get deployments**`'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ kubectl -n kube-system get deployments**'
- en: '`**Before you continue with the next section, log out of the master instance,
    as follows:**`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**在继续下一节之前，请注销主实例，如下所示：**'
- en: '`**$ exit**`'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '**$ exit**'
- en: '`**logout**`'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`**注销**`'
- en: '`**Connection to 10.0.0.10 closed.**`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`**连接到10.0.0.10已关闭。**`'
- en: Access the API from your workstation
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从您的工作站访问API
- en: It is convenient to be able to access the Kubernetes API server via `kubectl`
    on your workstation. It means that you can submit any manifests that you may have
    been developing to your cluster running on AWS.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 能够通过工作站上的`kubectl`访问Kubernetes API服务器非常方便。这意味着您可以将您可能一直在开发的任何清单提交到在AWS上运行的集群。
- en: 'We need to allow traffic from the bastion server to access the API server.
    Let''s add a rule to the `K8S-MASTER` security group to allow this traffic, as
    follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要允许来自堡垒服务器访问API服务器的流量。让我们向`K8S-MASTER`安全组添加一条规则来允许此流量，如下所示：
- en: '[PRE60]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: If you haven't already installed kubectl on your workstation, turn back to [Chapter
    2](87aab5e7-ff37-4a46-831b-8ff62708b7d8.xhtml), *Start Your Engines*, to learn
    how.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未在工作站上安装kubectl，请返回到[第2章](87aab5e7-ff37-4a46-831b-8ff62708b7d8.xhtml)，“启动引擎”，进行学习。
- en: Now we can copy the `kubeconfig` file from the master instance.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以从主实例复制`kubeconfig`文件。
- en: 'If you do not already have any clusters configured in your local `~/.kube/config`
    file, you can copy the file from the master, as follows:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在本地的`~/.kube/config`文件中尚未配置任何集群，您可以按照以下步骤从主服务器复制文件：
- en: '[PRE61]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: If you already have a cluster configured (for example, minikube), then you may
    wish to merge the config for your new cluster, or use another file and pass its
    location to `kubectl` with the `--kubeconfig` flag, or in the `KUBECONFIG` environment
    variable.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经配置了一个集群（例如，minikube），那么您可能希望合并您的新集群的配置，或者使用另一个文件并使用`--kubeconfig`标志将其位置传递给`kubectl`，或者在`KUBECONFIG`环境变量中传递。
- en: 'Check that you can connect to the API server using your local `kubectl`, as
    follows:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 检查您是否可以使用本地的`kubectl`连接到API服务器，如下所示：
- en: '[PRE62]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: If you have any problem connecting, check that `sshuttle` is still running,
    and that you have correctly allowed access from the bastion host to the k8s-master
    security group.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在连接时遇到任何问题，请检查`sshuttle`是否仍在运行，并且您已经正确允许了从堡垒主机到k8s-master安全组的访问。
- en: Setting up pod networking
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置pod网络
- en: You may have noticed that, when running `kubectl get nodes`, the `NodeStatus`
    is `NotReady`. This is because the cluster we have bootstrapped is missing one
    essential component—the network infrastructure that will allow the pods running
    on our cluster to communicate with one another.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，当运行`kubectl get nodes`时，`NodeStatus`为`NotReady`。这是因为我们引导的集群缺少一个基本组件——将允许在我们的集群上运行的pod相互通信的网络基础设施。
- en: 'The network model of a Kubernetes cluster is somewhat different from that of
    a standard Docker installation. There are many implementations of networking infrastructure
    that can provide cluster networking for Kubernetes, but they all have some key
    attributes in common, as shown in the following list:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群的网络模型与标准Docker安装有些不同。有许多网络基础设施的实现可以为Kubernetes提供集群网络，但它们都具有一些共同的关键属性，如下列表所示：
- en: Each pod is assigned its own IP address
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个pod都被分配了自己的IP地址
- en: Each pod can communicate with any other pod in the cluster without NAT (not
    withstanding additional security policies)
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个pod都可以与集群中的任何其他pod进行通信，而无需NAT（尽管可能存在其他安全策略）
- en: The internal network that the software running inside a pod sees is identical
    to the pod network seen by other pods in the cluster—that is, it sees that the
    IP address is the same and that no port mapping takes place
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行在pod内部的软件看到的内部网络与集群中其他pod看到的pod网络是相同的，即它看到的IP地址相同，并且不进行端口映射
- en: This networking arrangement is much simpler (for users of the cluster) than
    Docker's standard networking scheme of mapping internal ports in the container
    to other ports on the host.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这种网络安排对于集群的用户来说要简单得多（比Docker的标准网络方案要简单），Docker的标准网络方案是将容器内部端口映射到主机上的其他端口。
- en: It does, however, require some integration between the network infrastructure
    and Kubernetes. Kubernetes manages this integration though an interface called
    the **container network interface** (**CNI**). It is simple to deploy a **CNI**
    plugin to each node of your cluster with a Kubernetes DaemonSet.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这需要网络基础设施和Kubernetes之间的一些集成。Kubernetes通过一个名为**容器网络接口**（**CNI**）的接口来管理这种集成。通过Kubernetes
    DaemonSet，可以简单地将**CNI**插件部署到集群的每个节点上。
- en: If you want to learn more about Kubernetes cluster networking, I recommend reading
    the comprehensive documentation of the underlying concepts at [https://kubernetes.io/docs/concepts/cluster-administration/networking/](https://kubernetes.io/docs/concepts/cluster-administration/networking/).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于Kubernetes集群网络的信息，我建议阅读底层概念的全面文档，网址为[https://kubernetes.io/docs/concepts/cluster-administration/networking/](https://kubernetes.io/docs/concepts/cluster-administration/networking/)。
- en: We will be deploying a CNI plugin called `amazon-vpc-cni-k8s` that integrates
    Kubernetes with the native networking capabilities of the AWS VPC network. This
    plugin works by attaching secondary private IP addresses to the elastic network
    interfaces of the EC2 instances that form the nodes of our cluster, and then assigning
    them to pods as they are scheduled by Kubernetes to go into each node. Traffic
    is then routed directly to the correct node by the AWS VPC network fabric.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将部署一个名为`amazon-vpc-cni-k8s`的CNI插件，它将Kubernetes与AWS VPC网络的本地网络功能集成在一起。该插件通过将次要私有IP地址附加到形成集群节点的EC2实例的弹性网络接口，然后在Kubernetes将它们调度到每个节点时分配给Pod来工作。然后，流量通过AWS
    VPC网络布线直接路由到正确的节点。
- en: 'Deploying this plugin is a similar process to submitting any other manifest
    to the Kubernetes API with `kubectl`, as shown in the following command:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 部署此插件与使用`kubectl`将任何其他清单提交到Kubernetes API的过程类似，如以下命令所示：
- en: '[PRE63]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'You can monitor the networking plugin that is being installed and started by
    running the following:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令来监视正在安装和启动的网络插件：
- en: '[PRE64]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'We can check that the network has been set up correctly by looking at the node
    status again, as follows:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过再次查看节点状态来检查网络是否已正确设置，方法如下：
- en: '[PRE65]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: Launching worker nodes
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动工作节点
- en: 'We are now going to create a new security group for the worker nodes, as follows:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将为工作节点创建一个新的安全组，方法如下：
- en: '[PRE66]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'We will allow access to the worker nodes via the bastion host in order for
    us to log in for debugging purposes, as follows:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 为了我们能够登录进行调试，我们将允许通过堡垒主机访问工作节点，方法如下：
- en: '[PRE67]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'We want to allow the kubelet and other processes running on the worker nodes
    to be able to connect to the API server on the master node. We do this using the
    following command:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望允许运行在工作节点上的kubelet和其他进程能够连接到主节点上的API服务器。我们可以通过以下命令来实现这一点：
- en: '[PRE68]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Since the kube-dns add-on may run on the master node, let''s allow this traffic
    from the nodes security group, as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 由于kube-dns插件可能在主节点上运行，让我们允许来自节点安全组的流量，方法如下：
- en: '[PRE69]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'We also need the master node to be able to connect to the APIs that are exposed
    by the kubelet in order to stream logs and other metrics. We enable this by entering
    the following command:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要主节点能够连接到kubelet暴露的API，以便流式传输日志和其他指标。我们可以通过输入以下命令来实现这一点：
- en: '[PRE70]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Finally, we need to allow any pod on any node to be able to connect to any
    other pod. We do this using the following command:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要允许任何节点上的任何Pod能够连接到任何其他Pod。我们可以使用以下命令来实现这一点：
- en: '[PRE71]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: In order to have the worker node(s) register themselves with the master when
    they start up, we will create a user-data script.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在启动时使工作节点自动注册到主节点，我们将创建一个用户数据脚本。
- en: This script is run on the first occasion that the node is started. It makes
    some configuration changes, then runs `kubeadm join`, as shown in the following
    command. You should have made a note of the `kubeadm join` command when we initialized
    the master.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本在节点首次启动时运行。它进行一些配置更改，然后运行`kubeadm join`，如下命令所示。当我们初始化主节点时，您应该已经记录了`kubeadm
    join`命令。
- en: '[PRE72]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'First, we create a launch configuration using the following command. This is
    like a template of the configuration that the autoscaling group will use to launch
    our worker nodes. Many of the arguments are similar to those that we would have
    passed to the EC2 run-instances command:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用以下命令创建一个启动配置。这类似于自动缩放组将用于启动我们的工作节点的配置模板。许多参数类似于我们将传递给EC2 run-instances命令的参数：
- en: '[PRE73]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Once we have created the launch configuration, we can create an autoscaling
    group, as follows:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 创建启动配置后，我们可以创建一个自动缩放组，如下所示：
- en: '[PRE74]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: You will need to wait a few moments for the autoscaling group to launch the
    node, and for `kubeadm` to register it with the master, as follows.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 需要等待一段时间，直到自动缩放组启动节点，并使用`kubeadm`将其注册到主节点，如下所示。
- en: '[PRE75]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: If your node starts but doesn't join the cluster after a few minutes, try logging
    into the node and looking at the `cloud-init` log file. The end of this log will
    include the output from your script.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的节点启动但在几分钟后没有加入集群，请尝试登录节点并查看`cloud-init`日志文件。此日志的结尾将包括脚本的输出。
- en: '[PRE76]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Demo time
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 演示时间
- en: Congratulations, if you have made it this far through the chapter! You should
    by now have a fully functional Kubernetes cluster that you can use to experiment
    with and explore Kubernetes more fully.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，如果您已经通过本章走到这一步！到目前为止，您应该已经拥有一个完全功能的Kubernetes集群，可以用来进行实验并更全面地探索Kubernetes。
- en: 'Let''s demonstrate that the cluster we have built is working by deploying an
    application to our cluster, as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过部署一个应用程序到我们的集群来演示我们构建的集群正在工作，如下所示：
- en: '[PRE77]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'This manifest deploys a simple web application and a service to expose the
    application to the internet using a load balancer. We can view the public DNS
    name of the load balancer by using the `kubectl get service` command, as follows:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 此清单部署了一个简单的Web应用程序和一个服务，使用负载均衡器将应用程序暴露到互联网。我们可以使用`kubectl get service`命令查看负载均衡器的公共DNS名称，如下所示：
- en: '[PRE78]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Once you have the public address of the load balancer, you might need to wait
    for a few moments before the address starts to resolve. Visit the address in your
    browser; you should see a screen like the following:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您获得负载均衡器的公共地址，您可能需要等待一段时间，直到地址开始解析。在浏览器中访问该地址；您应该看到以下屏幕：
- en: '![](assets/67570712-97ff-4e23-92ac-9b70d0857877.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/67570712-97ff-4e23-92ac-9b70d0857877.png)'
- en: Summary
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: By now, you should have a fully functional Kubernetes cluster that you can use
    to experiment with and explore Kubernetes more fully. Your cluster is correctly
    configured to take advantage of the many integrations that Kubernetes has with
    AWS.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该拥有一个完全功能的Kubernetes集群，可以用来进行实验并更全面地探索Kubernetes。您的集群已正确配置，以充分利用Kubernetes与AWS的许多集成。
- en: While there are many tools that can automate and assist you in the task of building
    and managing a Kubernetes cluster on AWS, hopefully by learning how to approach
    the task from scratch, you will have a better understanding of the networking
    and computing resources needed to support a Kubernetes cluster.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有许多工具可以自动化和协助您在AWS上构建和管理Kubernetes集群的任务，但希望通过学习如何从头开始处理任务，您将更好地了解支持Kubernetes集群所需的网络和计算资源。
- en: 'In Part 3, we will build on the knowledge from this chapter and discuss the
    additional components that you will need to add to a cluster to make it suitable
    for hosting production services. The cluster we have just built is a fully functional
    installation of Kubernetes. Read on as we look at the tools and techniques required
    to successfully operate production services on Kubernetes:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三部分，我们将在本章的知识基础上讨论您需要添加到集群中的其他组件，以使其适合托管生产服务。我们刚刚构建的集群是一个完全功能的Kubernetes安装。继续阅读，我们将研究在Kubernetes上成功运行生产服务所需的工具和技术：
- en: We will look at the tools and procedures you can adopt to manage deploying and
    updating your services effectively using Kubernetes
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将研究您可以采用的工具和程序，以有效地管理部署和更新您的服务，使用Kubernetes
- en: We will look at the strategies and tools you can adopt to secure your cluster
    and the applications running on it
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将研究您可以采用的策略和工具，以确保集群和其中运行的应用程序的安全
- en: We will look at the tools typically used with Kubernetes for monitoring and
    log management
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将研究与Kubernetes一起使用的监控和日志管理工具
- en: We will look at the best ways to architect your applications and your clusters
    in order to meet availability targets
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将研究最佳的架构应用程序和集群的方式，以满足可用性目标
