["```\nBIN_DIR := \"bin/apid\"\n APID_MAIN := \"cmd/apid/main.go\"\nall: ensure lint test-cover\nensure:\n go get -u github.com/mattn/goveralls\n go get -u github.com/philwinder/gocoverage\n go get -u github.com/alecthomas/gometalinter\n go get -u github.com/golang/dep/cmd/dep\n go get -u golang.org/x/tools/cmd/cover\n dep ensure\nlint:\n gometalinter --install\n gometalinter ./cmd/... ./internal/...\ncompile: cmd/apid/main.go\n CGO_ENABLED=0 go build -i -o ${BIN_DIR} ${APID_MAIN}\ntest:\n go test ./... -v\ntest-cover:\n go test ./... -cover\n## Travis automation scripts\ntravis-install:\n go get -u github.com/mattn/goveralls\n go get -u github.com/philwinder/gocoverage\n go get -u github.com/alecthomas/gometalinter\n go get -u github.com/golang/dep/cmd/dep\n go get -u golang.org/x/tools/cmd/cover\n dep ensure\ntravis-script:\n set -e\n CGO_ENABLED=0 go build -i -o ${BIN_DIR} ${APID_MAIN}\n gometalinter --install\n gometalinter ./cmd/... ./internal/...\n go test ./... -cover\n gocoverage\n goveralls -coverprofile=profile.cov -repotoken=${COVERALLS_TOKEN}\n```", "```\n'use strict';\n\nconst gulp = require('gulp');\nconst webpack = require('webpack');\nconst sourcemaps = require('gulp-sourcemaps');\nconst sass = require('gulp-sass');\nconst autoprefixer = require('gulp-autoprefixer');\nconst uglify = require('gulp-uglify');\nconst concat = require('gulp-concat');\nconst runSequence = require('run-sequence');\nconst gutil = require('gulp-util');\nconst merge = require('merge-stream');\nconst nodemon = require('gulp-nodemon');\nconst livereload = require('gulp-livereload');\nconst eslint = require('gulp-eslint');\n\n// Load Environment constiables\nrequire('dotenv').config();\nconst webpackConfig = process.env.NODE_ENV === 'development'\n  ? require('./webpack.config.js')\n  : require('./webpack.config.prod.js');\n\nconst jsPaths = [\n  'src/js/components/*.js'\n];\nconst sassPaths = [\n  'static/scss/*.scss',\n  './node_modules/bootstrap/dist/css/bootstrap.min.css'\n];\n\nconst filesToCopy = [\n  {\n    src: './node_modules/react/dist/react.min.js',\n    dest: './static/build'\n  },\n  {\n    src: './node_modules/react-dom/dist/react-dom.min.js',\n    dest: './static/build'\n  },\n  {\n    src: './node_modules/react-bootstrap/dist/react-bootstrap.min.js',\n    dest: './static/build'\n  },\n  {\n    src: './images/favicon.ico',\n    dest: './static/build'\n  },\n\n  {\n    src: './icomoon/symbol-defs.svg',\n    dest: './static/build'\n  }\n];\n```", "```\ngulp.task('copy:react:files', () => {\n  const streams = [];\n  filesToCopy.forEach((file) => {\n    streams.push(gulp.src(file.src).pipe(gulp.dest(file.dest)));\n  });\n  return merge.apply(this, streams);\n});\n\ngulp.task('uglify:js', () => gulp.src(jsPaths)\n    .pipe(uglify())\n    .pipe(gulp.dest('static/build')));\n\ngulp.task('build:js', (callback) => {\n  webpack(Object.create(webpackConfig), (err, stats) => {\n    if (err) {\n      throw new gutil.PluginError('build:js', err);\n    }\n    gutil.log('[build:js]', stats.toString({ colors: true, chunks: false }));\n    callback();\n  });\n});\n\ngulp.task('build:sass', () => gulp.src(sassPaths[0])\n    .pipe(sourcemaps.init())\n    .pipe(sass({\n      outputStyle: 'compressed',\n      includePaths: ['node_modules']\n    }))\n    .pipe(autoprefixer({ cascade: false }))\n    .pipe(concat('advanced-tech.css'))\n    .pipe(sourcemaps.write('.'))\n    .pipe(gulp.dest('./static/build'))\n    .pipe(livereload()));\n\ngulp.task('build:vendor:sass', () => gulp.src([...sassPaths.slice(1)])\n    .pipe(sourcemaps.init())\n    .pipe(sass({\n      outputStyle: 'compressed',\n      includePaths: ['node_modules']\n    }))\n    .pipe(autoprefixer({ cascade: false }))\n    .pipe(concat('vendor.css'))\n    .pipe(sourcemaps.write('.'))\n    .pipe(gulp.dest('./static/build')));\n```", "```\ngulp.task('watch:js', () => {\n  const config = Object.create(webpackConfig);\n  config.watch = true;\n  webpack(config, (err, stats) => {\n    if (err) {\n      throw new gutil.PluginError('watch:js', err);\n    }\n    gutil.log('[watch:js]', stats.toString({ colors: true, chunks: false }));\n  });\n  gulp.watch('static/js/components/*.js', ['uglify:js', 'build:js']);\n});\n\ngulp.task('watch:sass', () => {\n  gulp.watch('static/scss/*.scss', ['build:sass']);\n});\n\ngulp.task('watch-lint', () => {\n  // Lint only files that change after this watch starts\n  const lintAndPrint = eslint();\n  // format results with each file, since this stream won't end.\n  lintAndPrint.pipe(eslint.formatEach());\n\n  return gulp.watch(['*.js', 'routes/*.js', 'models/*.js', 'db/*.js', 'config/*.js', 'bin/www', 'static/js/components/*.jsx', 'static/js/actions/index.js', 'static/js/constants/constants.js', 'static/js/data/data.js', 'static/js/reducers/*.js', 'static/js/store/*.js', 'static/js/utils/ajax.js', '__tests__/*.js'], event => {\n    if (event.type !== 'deleted') {\n      gulp.src(event.path).pipe(lintAndPrint, {end: false});\n    }\n  });\n});\n\ngulp.task('start', () => {\n  nodemon({\n    script: './bin/www',\n    exec: 'node --harmony',\n    ignore: ['static/*'],\n    env: {\n      PORT: '3000'\n    }\n  });\n});\n\ngulp.task('dev:debug', () => {\n  nodemon({\n    script: './bin/www',\n    exec: 'node --inspect --harmony',\n    ignore: ['static/*'],\n    env: {\n      PORT: '3000'\n    }\n  });\n});\n\ngulp.task('build', (cb) => {\n  runSequence('copy:react:files', 'uglify:js', 'build:js', 'build:sass', 'build:vendor:sass', cb);\n});\n\ngulp.task('dev', (cb) => {\n  livereload.listen();\n  runSequence('copy:react:files', 'uglify:js', 'build:sass', 'build:vendor:sass', ['watch:js', 'watch:sass', 'watch-lint'], 'start', cb);\n});\n\ngulp.task('debug', (cb) => {\n  livereload.listen();\n  runSequence('copy:react:files', 'uglify:js', 'build:sass', 'build:vendor:sass', ['watch:js', 'watch:sass', 'watch-lint'], 'dev:debug', cb);\n});\n```", "```\nAPI_URL=http://localhost:8080\nPORT=8080\nAUTH_ZERO_CLIENT_ID=fakeClientId\nAUTH_ZERO_JWT_TOKEN=someFaketToken.FakedToken.Faked\nAUTH_ZERO_URL=https://fake-api.com\nREDIS_PORT=redis:6379\nSEND_EMAILS=true\nSMTP_SERVER=fakeamazoninstance.us-east-1.amazonaws.com\nSMTP_USERNAME=fakeUsername\nSMTP_PASSWORD=FakePassword\nSMTP_PORT=587\nTOKEN_SECRET=\"A fake Token Secret\"\n```"]