["```\ndocker-compose up frontend backend db redis\n```", "```\ndescribe('The user list table is shown and buttons', function () { it('successfully loads table', function () { cy.visit('/') cy .get('.users-area-table') .find('tbody tr') .first() .screenshot() }) })\n```", "```\n/ Takes an array of objects and sorts by First Name\nfunction sortListOfNames(names) {\n    return names.sort((a, b) => {\n        if (a.firstName < b.firstName) {\n            return -1;\n        }\n        if (a.firstName > b.firstName) {\n            return 1;\n        }\n        if (a.firstName === b.firstName) {\n            return 0;\n        }\n    });\n}\n```", "```\ntest('Test the sort function', t => {\n    t.plan(1);\n\n    const names = [\n        {\n            firstName: 'Sam',\n            lastName: 'Cooke'\n        },\n        {\n            firstName: 'Barry',\n            lastName: 'White'\n        },\n        {\n            firstName: 'Jedi',\n            lastName: 'Knight'\n        }\n    ];\n    const actual = sort.sortListOfNames(names);\n    const expected = [\n        {\n            firstName: 'Barry',\n            lastName: 'White'\n        },\n        {\n            firstName: 'Jedi',\n            lastName: 'Knight'\n        },\n        {\n            firstName: 'Sam',\n            lastName: 'Cooke'\n        }\n    ];\n    t.deepEqual(actual, expected, 'The names should be sorted by the first name.')\n});\n```", "```\n'use strict'; const  request  =  require('supertest'); const  assert  =  require('assert'); const  CIRCLECI_API  = { // List of all the projects you're following on CircleCI, with build information organized by branch getProjects:  'https://circleci.com/api/v1.1' }; describe('Testing CircleCI API Endpoints', function() { it('the /projects endpoints should return 200 with a body', function() { return  request(CIRCLECI_API.getProjects) .get(`/projects?circle-token=${process.env.CIRCLECI_API_TOKEN_GITHUB}`) .set('Accept', 'application/json') .expect(200) .then(response  => { assert.ok(response.body.length  >  0, \"Body have information\") assert.equal(response.body[0].oss, true); }); }); });\n```", "```\npackage main import ( \"errors\" \"net/http\" \"os\" \"testing\" \"gopkg.in/h2non/baloo.v3\" ) var  test  = baloo.New(\"https://api.travis-ci.com\") func assertTravisUserEndpoint(res *http.Response, req *http.Request) error {\n  if res.StatusCode != http.StatusOK {\n    return errors.New(\"This endpoint should return a 200 response code\")\n  }\n  if res.Body == nil {\n    return errors.New(\"The body should not be empty\")\n  }\n  return nil\n}\n\nfunc  TestBalooClient(t *testing.T) { test.Get(\"/user\"). SetHeader(\"Authorization\", \"token \"+os.Getenv(\"TRAVIS_PERSONAL_TOKEN\")). SetHeader(\"Travis-API-Version\", \"3\"). Expect(t). Status(200). Type(\"json\"). AssertFunc(assertTravisUserEndpoint). Done() }\n```", "```\n#! /bin/bash GO_TEMPLATE_EXAMPLE_REPO=$(curl -X GET \\ --header \"Accept: application/json\" \\ \"https://circleci.com/api/v1.1/project/github/packtci/go-template-example-with-circle-ci?circle-token=$CIRCLECI_API_TOKEN_GITHUB\" | jq '.[0].author_name' | tr -d \"\\n\") if [[ -n  ${GO_TEMPLATE_EXAMPLE_REPO} ]];  then echo  \"The current owner was shown\" exit 0 else  echo  \"No owner own\" exit 1 fi\n```", "```\n# features/simple_addition.feature\nFeature: Simple Addition of Numbers\n  In order to do simple math as a developer I want to add numbers\n\n  Scenario: Easy Math Problem\n    Given a list of numbers set to []\n    When I add the numbers together by []\n    Then I get a larger result that is the sum of the numbers\n```", "```\nconst { setWorldConstructor } = require('cucumber')\n\nclass Addition {\n  constructor() {\n    this.summation = 0\n  }\n\n  setTo(numbers) {\n    this.numbers = numbers\n  }\n\n  addBy() {\n    this.summation = this.numbers.reduce((prev, curr) => prev + curr, 0);\n  }\n}\n\nsetWorldConstructor(Addition)\n```", "```\nconst { Given, When, Then } = require('cucumber')\nconst { expect } = require('chai')\n\nGiven('a list of numbers set to []', function () {\n    this.setTo([1, 2, 3, 4, 5])\n});\n\nWhen('I add the numbers together by []', function () {\n    this.addBy();\n});\n\nThen('I get a larger result that is the sum of the numbers', function () {\n    expect(this.summation).to.eql(15)\n});\n```", "```\necho $PATH\n## This prints out the current path where binaries can be found\n\nmv ~/Downloads /usr/local/bin\n```", "```\ncurl http://127.0.0.1:8200/v1/sys/init\n```", "```\nbackend \"file\" {\n path = \"vault\"\n}\n\nlistener \"tcp\" {\n tls_disable = 1\n}\n```", "```\n{\n \"tag_name\": \"v1.0.0\",\n \"target_commitish\": \"master\",\n \"name\": \"v1.0.0\",\n \"body\": \"Description of the release\",\n \"draft\": false,\n \"prerelease\": false\n}\n```"]