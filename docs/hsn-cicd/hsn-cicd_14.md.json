["```\ncurl -X POST \"https://circleci.com/api/v1.1/project/github/packtci/circleci-jobs-example/follow?circle-token=$CIRCLECI_API_TOKEN_GITHUB\"\n```", "```\n{\n  \"following\" : true,\n  \"workflow\" : false,\n  \"first_build\" : {\n    \"compare\" : null,\n    \"previous_successful_build\" : null,\n    \"build_parameters\" : null,\n    \"oss\" : true,\n    \"committer_date\" : null,\n    \"body\" : null,\n    \"usage_queued_at\" : \"2018-08-04T21:36:26.982Z\",\n    \"fail_reason\" : null,\n    \"retry_of\" : null,\n    \"reponame\" : \"circleci-jobs-example\",\n    \"ssh_users\" : [ ],\n    \"build_url\" : \"https://circleci.com/gh/packtci/circleci-jobs-example/1\",\n    \"parallel\" : 1,\n    \"failed\" : null,\n    \"branch\" : \"master\",\n    \"username\" : \"packtci\",\n    \"author_date\" : null,\n    \"why\" : \"first-build\",\n    \"user\" : {\n      \"is_user\" : true,\n      \"login\" : \"packtci\",\n      \"avatar_url\" : \"https://avatars3.githubusercontent.com/u/40322425?v=4\",\n      \"name\" : null,\n      \"vcs_type\" : \"github\",\n      \"id\" : 40322425\n    },\n    \"vcs_revision\" : \"abc2ce258b44700400ec231c01529b3b6b8ecbba\",\n    \"vcs_tag\" : null,\n    \"build_num\" : 1,\n    \"infrastructure_fail\" : false,\n    \"committer_email\" : null,\n    \"previous\" : null,\n    \"status\" : \"not_running\",\n    \"committer_name\" : null,\n    \"retries\" : null,\n    \"subject\" : null,\n    \"vcs_type\" : \"github\",\n    \"timedout\" : false,\n    \"dont_build\" : null,\n    \"lifecycle\" : \"not_running\",\n    \"no_dependency_cache\" : false,\n    \"stop_time\" : null,\n    \"ssh_disabled\" : true,\n    \"build_time_millis\" : null,\n    \"picard\" : null,\n    \"circle_yml\" : {\n      \"string\" : \"version: 2\\njobs:\\n build:\\n docker:\\n - image: circleci/node:8.11.3\\n steps:\\n - checkout\\n - run:\\n name: Install Dependencies\\n command: npm install\\n - run:\\n name: Run the Sort Test to sort by first name\\n command: $(npm bin)/tape sort_test.js\\n - run:\\n name: Compute Standard Deviation\\n command: $(npm bin)/tape standard_deviation_test.js\\n - run:\\n name: Find the Text and Replace It\\n command: $(npm bin)/tape find_text_test.js\\n - run: |\\n echo \\\"Generate Code Coverage\\\"\\n npm test\\n echo \\\"Show the coverage\\\"\\n npm run coverage\\n \"\n    },\n    \"messages\" : [ ],\n    \"is_first_green_build\" : false,\n    \"job_name\" : null,\n    \"start_time\" : null,\n    \"canceler\" : null,\n    \"platform\" : \"2.0\",\n    \"outcome\" : null,\n    \"vcs_url\" : \"https://github.com/packtci/circleci-jobs-example\",\n    \"author_name\" : null,\n    \"node\" : null,\n    \"canceled\" : false,\n    \"author_email\" : null\n  }\n}\n```", "```\ncat > circleci-jobs-example-follow.json\n# Paste the JSON Content from System Clipboard\n# Press Enter\n# Finally Press enter\n```", "```\ncat circleci-jobs-example-follow.json | jq '.first_build.build_url'\n```", "```\nopen https://circleci.com/gh/packtci/circleci-jobs-example/1\n```", "```\n...\n- run: | echo \"Generate Code Coverage\" npm test echo \"Show the coverage\" npm run coverage\n```", "```\n#!/usr/bin/env bash \n# Exit script if you try to use an uninitialized variable.  set  -o nounset # Exit script if a statement returns a non-true return value.  set  -o errexit # Use the error status of the first failure, rather than that of the last item in a pipeline.  set  -o pipefail\n```", "```\ndocker ps -a | grep -v \"busybox:latest\" | awk '{ print $1 }' - | grep -v \"CONTAINER\"\n```", "```\n# We source some environment variables here that we need \nsource ~/project/.env\n\nnpm run security-tests\n```", "```\n...\n- run:\n name: Run the Sort Test to sort by first name\n command: $(npm bin)/tape sort_test.js\n - run:\n name: Compute Standard Deviation\n command: $(npm bin)/tape standard_deviation_test.js\n - run:\n name: Find the Text and Replace It\n command: $(npm bin)/tape find_text_test.js\n - run: |\n echo \"Generate Code Coverage\"\n npm test\n echo \"Show the coverage\"\n npm run coverage\n...\n```", "```\n\"scripts\": { \"test\": \"nyc tape *_test.js\", \"coverage\": \"nyc report --reporter=cobertura\" }\n```", "```\ntest:\n docker:\n - image: circleci/node:8.11.3\n steps:\n - checkout\n - run:\n name: Run Tests and Run Code Coverage with NYC\n command: |\n echo \"Generate Code Coverage\"\n npm test\n echo \"Show the coverage\"\n npm run coverage\n```", "```\n...\nworkflows: version: 2 build_test_and_deploy: jobs: - build - test: requires: - build - deploy: requires: - test\n```", "```\n...\n- run: name: Run Tests and Run Code Coverage with NYC command: | echo \"Generate Code Coverage\" npm test echo \"Show the coverage\" npm run coverage\n```", "```\n... - run: name: Run Tests and Run Code Coverage with NYC command: | echo \"Generate Code Coverage\" npm test echo \"Show the coverage\" npm run coverage\n```", "```\ngit commit -m '[PACKT-1005] Update config yml script to different jobs and use workflows.'\n```", "```\ncurl -X GET \\\n --header \"Accept: application/json\" \\\n \"https://circleci.com/api/v1.1/project/github/packtci/circleci-jobs-example?circle-token=$CIRCLECI_API_TOKEN_GITHUB\" | jq '.[0].build_url'\n```", "```\ncurl -X POST https://circleci.com/api/v1.1/project/github/packtci/circleci-jobs-example/6/retry\\?circle-token\\=$CIRCLECI_API_TOKEN_GITHUB | jq '.build_url'\n```", "```\nintegration: docker: - image: cypress/base:8 environment: ## this enables colors in the output TERM: xterm steps: - checkout # special step to restore the dependency cache - restore_cache: key: v2-{{ checksum \"package.json\" }} - run: npm install # special step to save the dependency cache - save_cache: key: v2-{{ checksum \"package.json\" }} paths: - ~/.npm\n                - ~/.cache  - run: name: \"Run Integration Tests\" command: npm test\n```", "```\ncurl -X GET \\\n --header \"Accept: application/json\" \\\n \"https://circleci.com/api/v1.1/project/github/packtci/go-template-example-with-circle-ci?circle-token=$CIRCLECI_API_TOKEN_GITHUB\" | jq '.[0].build_url'\n```", "```\ncp -r .circleci store_and_cache_experiment\n```", "```\ntest:\n    docker:\n        - image: circleci/node:8.11.3\n    steps:\n        - checkout\n        # special step to restore the dependency cache\n        - restore_cache:\n             key: v2-{{ checksum \"package.json\" }}\n        # special step to save the dependency cache\n        - run:\n             name: Install Dependencies\n             command: npm install\n        - save_cache:\n             key: v2-{{ checksum \"package.json\" }}\n             paths:\n                 - ~/.npm\n                 - ~/.cache\n         - run:\n             name: Run Tests and Run Code Coverage with NYC\n             command: |\n                 echo \"Generate Code Coverage\"\n                 npm test\n                 echo \"Show the coverage\"\n                 npm run coverage\n         - store_artifacts:\n             path: coverage\n             prefix: coverage\n```", "```\n#! /bin/bash\n\ncurl --user ${CIRCLECI_API_TOKEN_GITHUB}: \\ --request POST \\ --form revision=09a95cb11914fe8cf4058bfe70547b0eec0656bc \\ --form config=@config.yml \\ --form notify=false \\\n https://circleci.com/api/v1.1/project/github/packtci/circleci-jobs-example/tree/master | jq '.build_url'\n```", "```\nPOST: /project/:vcs-type/:username/:project/tree/:branch\n```", "```\ncp store_and_cache_experiment/config.yml .circleci\nrm -r store_and_cache_experiment\ngit add .\ngit commit -m 'Cache and Store artifacts.'\ngit push\n```"]