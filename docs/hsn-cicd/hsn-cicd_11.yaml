- en: Travis CI UI Logging and Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI UI Logging and Debugging
- en: This chapter will give an overview of the Travis job log and the various sections
    in the job log. This chapter will also explain how to debug a Travis build job
    in a couple of different ways, including building locally using Docker and then
    running a build in debug mode. We will go over all the different ways to get a
    job ID and how to enable debug mode in public repositories and then use the Travis
    API to start a build in debug mode. We will explain how to use **tmate**, which
    is a terminal multiplexor, and then we will talk about logging environment variables
    in the Travis Web Client. Finally, we will cover how to do deployments in Travis
    CI using Heroku and how to debug deployment failures.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将概述Travis作业日志和作业日志中的各个部分。本章还将解释如何以几种不同的方式调试Travis构建作业，包括使用Docker在本地构建，然后以调试模式运行构建。我们将介绍所有获取作业ID的不同方式，以及如何在公共存储库中启用调试模式，然后使用Travis
    API以调试模式启动构建。我们将解释如何使用**tmate**，这是一个终端复用器，然后我们将讨论在Travis Web客户端中记录环境变量。最后，我们将介绍如何在Travis
    CI中使用Heroku进行部署以及如何调试部署失败。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Travis web client overview
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis Web客户端概述
- en: Debug build locally with Docker
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker在本地进行调试构建
- en: Running build in debug mode
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以调试模式运行构建
- en: Travis Web UI Logging
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis Web UI Logging
- en: Travis CI deployment overview and debugging
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis CI部署概述和调试
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter will require some basic Unix programming skills as well as some
    bash scripting knowledge. A basic understanding about how to make RESTful API
    calls would be helpful as we will be using curl as a REST client to make a call
    to the Travis API. It would be helpful to also have a basic understanding about
    Docker and containers as we will be running a local build using Docker as well.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章将需要一些基本的Unix编程技能以及一些bash脚本知识。对于如何进行RESTful API调用的基本理解将会有所帮助，因为我们将使用curl作为REST客户端来调用Travis
    API。对于Docker和容器的基本理解也会有所帮助，因为我们将使用Docker来运行本地构建。
- en: Travis web client overview
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis Web客户端概述
- en: We briefly went over the web dashboard for Travis CI in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml),
    *Installation and Basics of Travis CI*, but let us take another look at the different
    parts of the UI again.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第9章](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml)中简要介绍了Travis CI的Web仪表板，*Travis
    CI的安装和基础知识*，但让我们再次看看UI的不同部分。
- en: Main dashboard overview
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主仪表板概述
- en: 'The Travis CI web client has several different parts that are necessary to
    understand:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI Web客户端有几个必须理解的不同部分：
- en: '![](assets/73ea44f8-68d1-4197-962d-3b497f021eb6.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/73ea44f8-68d1-4197-962d-3b497f021eb6.png)'
- en: In the left divided section, you can individually click on each repository that
    you are interested in looking at. Additionally, you can search a repository by
    name as there could be many repositories that you or the organization that you
    belong to own. Also notice that there are details about the last build that was
    run in the project and whether it passed or failed as well as build detailed information
    about the duration and when the last build was run.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧分割的部分，您可以单独点击您感兴趣的每个存储库。此外，您可以按名称搜索存储库，因为您或您所属的组织可能拥有许多存储库。还请注意，有关上次在项目中运行的最后一个构建以及它是否通过或失败的详细信息，以及有关持续时间和上次运行构建的详细信息。
- en: 'In the right divided section, you will find the main navigation components
    of the Travis web client. Notice here that you have several navigation links,
    such as the current build, which is the default link that is opened when you go
    to a repository. If you click the Branches link, you will see all the builds that
    have been triggered in all the different branches including pull requests. Let
    us push a new branch and create a pull request in the `multiple-languages` ([https://github.com/packtci/multiple-languages](https://github.com/packtci/multiple-languages))
    repository and see a new build in action:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧分割的部分，您将找到Travis Web客户端的主要导航组件。请注意，这里有几个导航链接，例如当前构建，这是您转到存储库时打开的默认链接。如果单击Branches链接，您将看到在所有不同分支上触发的所有构建，包括拉取请求。让我们推送一个新分支并在`multiple-languages`（[https://github.com/packtci/multiple-languages](https://github.com/packtci/multiple-languages)）存储库中创建一个拉取请求，看看新的构建如何运行：
- en: '![](assets/933c7985-dd0c-4010-a221-d6acaa57caba.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/933c7985-dd0c-4010-a221-d6acaa57caba.png)'
- en: 'Notice here that Travis CI created a new build for the new branch that we pushed
    called `add-test-case`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Travis CI为我们推送的名为`add-test-case`的新分支创建了一个新的构建：
- en: '![](assets/0eabe7cd-20b0-4415-8879-45ed92acfda0.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0eabe7cd-20b0-4415-8879-45ed92acfda0.png)'
- en: 'Additionally, any pull requests that you open will trigger a new build with
    Travis CI as well:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您打开的任何拉取请求也将触发Travis CI的新构建：
- en: '![](assets/36d2d694-5a55-4915-9df5-df947dbd5053.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/36d2d694-5a55-4915-9df5-df947dbd5053.png)'
- en: When you merge a pull request into another branch then another CI build is triggered
    in Travis CI.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当您将拉取请求合并到另一个分支时，Travis CI会触发另一个CI构建。
- en: Job log overview
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作日志概述
- en: 'The job log in Travis CI starts with build system configuration information:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI中的作业日志以构建系统配置信息开始：
- en: '![](assets/8ea5294f-df3d-4148-a0ae-3c1a6e7ba738.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8ea5294f-df3d-4148-a0ae-3c1a6e7ba738.png)'
- en: 'Notice here that the build language is set to `go` and that the build operation
    system is Ubuntu Trusty 14.04:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，构建语言设置为`go`，构建操作系统为Ubuntu Trusty 14.04：
- en: '![](assets/a4cc4055-bc8b-4f99-bac3-877a532cd0bf.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a4cc4055-bc8b-4f99-bac3-877a532cd0bf.png)'
- en: 'Travis CI clones a fresh copy of the `multiple-languages` repository, which
    is an important aspect of continuous integration. Remember that a CI build should
    build a fresh copy on each build and there should be no assumed environment variables:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI克隆了`multiple-languages`存储库的新副本，这是持续集成的重要方面。请记住，CI构建应该在每次构建时构建一个新副本，并且不应该有任何假设的环境变量：
- en: '![](assets/3877aa04-716a-498f-8e77-777f9269d632.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3877aa04-716a-498f-8e77-777f9269d632.png)'
- en: 'Notice that Travis CI sets some environment variables for us, including the
    `GOPATH` and `PATH` environment variables. Travis CI runs the `go version` command
    as a verification that Go version 1.10 is installed in the CI build:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Travis CI为我们设置了一些环境变量，包括`GOPATH`和`PATH`环境变量。Travis CI运行`go version`命令来验证CI构建中是否安装了Go版本1.10：
- en: '![](assets/75efa9af-c02a-4b3c-a517-df54e64ce24f.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/75efa9af-c02a-4b3c-a517-df54e64ce24f.png)'
- en: 'In this step of the CI build, we install our secondary programming language
    of Node.js. This is optional but notice that Travis CI has a build label to the
    right of `before_install`, which is one of the build steps we discussed in [Chapter
    9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml), *Installation and Basics of Travis
    CI*, in the *Build customization* section. Also, notice that to the right of the
    build life cycle labels of `before_install` and `install`, there is a timestamp
    for how long the build step actually took which is in human readable format of
    `2.55` seconds and `2.88` seconds for the `before_install` and `install` life
    cycle events:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在CI构建的这一步中，我们安装了Node.js作为我们的第二编程语言。这是可选的，但请注意，Travis CI在`before_install`右侧有一个构建标签，这是我们在[第9章](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml)中讨论的构建步骤之一，*Travis
    CI的安装和基础知识*，在*构建自定义*部分。还要注意，在`before_install`和`install`生命周期标签的右侧，有一个时间戳，显示了构建步骤实际花费的时间，以人类可读的格式显示为`2.55`秒和`2.88`秒，分别对应`before_install`和`install`生命周期事件：
- en: '![](assets/47a341db-4274-42f7-a727-8792e62b97ae.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/47a341db-4274-42f7-a727-8792e62b97ae.png)'
- en: Notice here that there is no build label for the script build life cycle as
    this is the main part of the CI build.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里没有脚本构建生命周期的构建标签，因为这是CI构建的主要部分。
- en: Any other life cycle events, such as the `after_success` and `after_script`
    life cycle events will have a build label and a timestamp.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 任何其他生命周期事件，如`after_success`和`after_script`生命周期事件，都将有一个构建标签和一个时间戳。
- en: Debugging build locally with Docker
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker在本地调试构建
- en: You can debug a build locally by pulling down a Docker image that is held in
    the documentation link, Troubleshooting Locally in a Docker Image ([https://docs.travis-ci.com/user/common-build-problems/#Troubleshooting-Locally-in-a-Docker-Image](https://docs.travis-ci.com/user/common-build-problems/#Troubleshooting-Locally-in-a-Docker-Image)).
    You can find the instructions to install Docker in this link ([https://docs.docker.com/install/](https://docs.docker.com/install/)).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过拉取文档链接中保存的Docker镜像来在本地调试构建，链接为Troubleshooting Locally in a Docker Image
    ([https://docs.travis-ci.com/user/common-build-problems/#Troubleshooting-Locally-in-a-Docker-Image](https://docs.travis-ci.com/user/common-build-problems/#Troubleshooting-Locally-in-a-Docker-Image))。您可以在此链接中找到安装Docker的说明([https://docs.docker.com/install/](https://docs.docker.com/install/))。
- en: 'Pull down the Go Docker image:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拉取Go Docker镜像：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice that we run the `docker pull` command to actually pull down the Docker
    image
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们运行`docker pull`命令来实际拉取Docker镜像
- en: 'Start the interactive Docker session:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动交互式Docker会话：
- en: '![](assets/8e2cbf8f-4bfa-4e57-baa5-775adf237d4c.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8e2cbf8f-4bfa-4e57-baa5-775adf237d4c.png)'
- en: Notice here that we ran an interactive shell session in detached mode
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在分离模式下运行了一个交互式shell会话
- en: 'Open a login shell in the running container:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在正在运行的容器中打开登录shell：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This command starts an interactive shell session with the running Docker container
    using a Bash shell
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令使用Bash shell启动一个与正在运行的Docker容器的交互式shell会话
- en: 'Switch to the Travis user:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Travis用户：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this command, we switch to the Travis user instead of the default root user
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在此命令中，我们切换到Travis用户，而不是默认的root用户
- en: 'Clone the `multiple-languages` Git repository into the home directory:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`multiple-languages` Git存储库克隆到主目录中：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This command clones our `multiple-languages` repository locally onto the Docker
    container and then changes into this directory
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将我们的`multiple-languages`存储库克隆到本地的Docker容器中，然后切换到此目录
- en: Checkout the Git commit we want to test locally.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检出我们想要在本地测试的Git提交。
- en: 'Run the `git log` command and find the commit we want to checkout locally.
    Most probably it is the top level Git commit that we will check:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`git log`命令并找到我们想要在本地检出的提交。很可能是我们将要检查的顶级Git提交。
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this step, we want to make sure that we test only the changes corresponding
    to the changes we want to test.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们要确保只测试与我们想要测试的更改相对应的更改。
- en: 'Install the library dependencies and the secondary programming language:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装库依赖和第二编程语言：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this step, we install Node.js as the secondary programming language by using
    the **node version manager** (**nvm**) and then run `npm install` command to install
    all of our library dependencies
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们使用**node版本管理器**（**nvm**）安装Node.js作为第二编程语言，然后运行`npm install`命令来安装所有库依赖项
- en: Run the script build steps.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行脚本构建步骤。
- en: 'In the following screenshot, we run the `go test` and `npm test` command to
    simulate the script build life cycle event in our local Docker container:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们在本地Docker容器中运行`go test`和`npm test`命令，以模拟脚本构建生命周期事件：
- en: '![](assets/95869538-b91b-451b-89d0-da480536f6a0.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/95869538-b91b-451b-89d0-da480536f6a0.png)'
- en: Running build in debug mode
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以调试模式运行构建
- en: Another technique to debug build time issues is by running a debug build in
    Travis CI. You need to email `support@travis-ci.com` to toggle this feature on
    for public repositories while private repositories have the debug mode enabled
    by default. The reason for this is that anyone can come across a log containing
    the SSH access and can then make a connection to the virtual machine and then
    potentially read out secret environment information, such as client IDs, secrets,
    and more.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种调试构建时间问题的技术是在Travis CI中运行调试构建。您需要发送电子邮件至`support@travis-ci.com`，以为公共存储库切换此功能，而私有存储库默认启用调试模式。原因是任何人都可以遇到包含SSH访问的日志，然后可以连接到虚拟机，然后可能读取秘密环境信息，例如客户端ID、密码等。
- en: Getting an API token from the profile page
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从个人资料页面获取API令牌
- en: To restart a job in debug mode via the API, you need to send a `POST` request
    to the job's debug endpoint. This request needs to be authenticated by adding
    your Travis CI API token to the authorization header. You can find your API token
    in your Travis CI Profile page for public projects.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 API 重新启动调试模式的作业，您需要向作业的调试端点发送一个 `POST` 请求。此请求需要通过将您的 Travis CI API 令牌添加到授权标头来进行身份验证。您可以在
    Travis CI 个人资料页中找到您的 API 令牌，用于公共项目。
- en: 'You need to visit a URL, such as [https://travis-ci.org/profile/packtci](https://travis-ci.org/profile/packtci).
    Then you need to copy your API token in the profile page, which looks like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问一个 URL，例如 [https://travis-ci.org/profile/packtci](https://travis-ci.org/profile/packtci)。然后您需要在个人资料页面中复制您的
    API 令牌，如下所示：
- en: '![](assets/dde63ac8-9b9e-4a90-b717-0ef3fb282096.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dde63ac8-9b9e-4a90-b717-0ef3fb282096.png)'
- en: Next, you will need to hit the debug endpoint by using a REST client with your
    API token.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要使用 REST 客户端和 API 令牌来访问调试端点。
- en: Getting  access to a token using Travis CLI
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Travis CLI 获取令牌
- en: 'You can use the Travis CLI to get an access token by running the following
    command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 Travis CLI 运行以下命令来获取访问令牌：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Obtaining a job ID from the build log
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从构建日志中获取作业 ID
- en: 'You can obtain the job ID by expanding the `Build system information` tab and
    then looking for the label `Job id`. In the following screenshot, there is an
    arrow pointing to the `Job id`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过展开“构建系统信息”选项卡并查找“作业 ID”标签来获取作业 ID。在下面的截图中，有一个箭头指向“作业 ID”：
- en: '![](assets/8baf12ee-0bd1-46c6-98b0-28c3f514339a.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8baf12ee-0bd1-46c6-98b0-28c3f514339a.png)'
- en: Obtaining the job ID from the URL in the View config button
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从“查看配置”按钮的 URL 中获取作业 ID
- en: 'If you click the View config button, the URL will change and you can copy the
    job ID from the URL. In the following screenshot, we clicked the View config button,
    which looks like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击“查看配置”按钮，URL 将会改变，您可以从 URL 中复制作业 ID。在下面的截图中，我们点击了“查看配置”按钮，如下所示：
- en: '![](assets/19b95e3a-9069-47c5-bd37-4191deddef41.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/19b95e3a-9069-47c5-bd37-4191deddef41.png)'
- en: 'Then the URL changed to this config: [https://travis-ci.org/packtci/multiple-languages/jobs/401101740/config](https://travis-ci.org/packtci/multiple-languages/jobs/401101740/config).'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后 URL 改变为这个配置：[https://travis-ci.org/packtci/multiple-languages/jobs/401101740/config](https://travis-ci.org/packtci/multiple-languages/jobs/401101740/config)。
- en: The job ID is `401101740` in this URL.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在此 URL 中，作业 ID 是 `401101740`。
- en: Obtaining the job ID via an API call to the /builds endpoint
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过对 /builds 端点进行 API 调用获取作业 ID
- en: 'You can also obtain a job ID by calling the `/builds` endpoint in the Travis
    API. You will need to make a `GET` request and provide a valid access token in
    order to make the REST call. Here is a sample request using the `curl` REST client:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过调用 Travis API 中的 /builds 端点来获取作业 ID。您需要发起一个 `GET` 请求，并提供有效的访问令牌以进行 REST
    调用。以下是使用 `curl` REST 客户端的示例请求：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will fetch all the builds that are associated with the repository, which
    could potentially be a big JSON payload. You can use the **jq** ([https://stedolan.github.io/jq/](https://stedolan.github.io/jq/))
    command line JSON processor to filter out the job ID information. Here is the
    same REST call that pipes the JSON payload into the `jq` command-line utility
    to filter out only the job IDs that correspond to builds:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将获取与存储库关联的所有构建，这可能是一个大的 JSON 负载。您可以使用 **jq** ([https://stedolan.github.io/jq/](https://stedolan.github.io/jq/))
    命令行 JSON 处理器来过滤出作业 ID 信息。以下是相同的 REST 调用，将 JSON 负载传输到 `jq` 命令行实用程序以过滤出与构建对应的作业
    ID：
- en: '![](assets/c3632a7f-5921-44d6-8700-823b1f416fb3.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c3632a7f-5921-44d6-8700-823b1f416fb3.png)'
- en: API call to start a build job in debug mode
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 API 调用启动调试模式的构建作业
- en: You can use any REST client to make a call to the Travis API as long as you
    have a valid access token.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 只要您拥有有效的访问令牌，您可以使用任何 REST 客户端来调用 Travis API。
- en: 'Here is a sample REST call to the debug endpoint for the `40110174` job ID:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是针对作业 ID `40110174` 的调试端点的示例 REST 调用：
- en: '![](assets/637c92b9-5e8e-4514-858e-e50f46a067ef.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/637c92b9-5e8e-4514-858e-e50f46a067ef.png)'
- en: 'Notice that in this screenshot, we added the `Authorization` HTTP header and
    used the Travis CLI to print out our access token by using Bash string interpolation
    like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在此截图中，我们添加了 `Authorization` HTTP 标头，并使用 Travis CLI 通过 Bash 字符串插值打印出我们的访问令牌：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Also notice that we are using the public Travis endpoint of [https://api.travis-ci.org](https://api.travis-ci.org).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意我们使用的是 [https://api.travis-ci.org](https://api.travis-ci.org) 的公共 Travis
    端点。
- en: Fetching an SSH session for the debug mode
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取调试模式的 SSH 会话
- en: 'If you travel back to the Travis web UI and look at the current job log, you
    will see the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您返回 Travis web UI 并查看当前作业日志，您将看到以下内容：
- en: '![](assets/314f356e-4f40-4f08-bdfa-774e3fed800b.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/314f356e-4f40-4f08-bdfa-774e3fed800b.png)'
- en: 'Now you simply go to a Command Prompt or Terminal session and enter the `ssh`
    command to start an interactive debug session with the current build:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您只需转到命令提示符或终端会话，并输入 `ssh` 命令以启动与当前构建的交互式调试会话：
- en: '![](assets/c01641c2-0713-4800-9613-11bd4b50a804.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c01641c2-0713-4800-9613-11bd4b50a804.png)'
- en: 'The debug mode SSH session will only stay alive for 30 minutes and then you
    will need to make another API call to start another debug session:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 调试模式的 SSH 会话只会保持 30 分钟，然后您需要发起另一个 API 调用来开始另一个调试会话：
- en: '![](assets/a12f5d24-ffc2-4d02-8eb8-ab1a47d01141.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a12f5d24-ffc2-4d02-8eb8-ab1a47d01141.png)'
- en: Travis debug mode convenience Bash functions
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis 调试模式便利 Bash 函数
- en: 'Here is a list of convenience Bash functions that are available:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可用的便利 Bash 函数列表：
- en: '`travis_run_before_install` corresponds to the **before_install** lifecycle
    event'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`travis_run_before_install` 对应 **before_install** 生命周期事件'
- en: '`travis_run_install` corresponds to the **install** lifecycle event'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`travis_run_install` 对应 **install** 生命周期事件'
- en: '`travis_run_before_script` corresponds to the **before_script** lifecycle event'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`travis_run_before_script` 对应 **before_script** 生命周期事件'
- en: '`travis_run_script` corresponds to the **script** lifecycle event'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`travis_run_script` 对应 **script** 生命周期事件'
- en: '`travis_run_after_success` corresponds to the **after_success** lifecycle event'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`travis_run_after_success` 对应 **after_success** 生命周期事件'
- en: '`travis_run_after_failure` corresponds to the **after_failure** lifecycle event'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`travis_run_after_failure`对应于**after_failure**生命周期事件'
- en: '`travis_run_after_script` corresponds to the **after_script** lifecycle event'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`travis_run_after_script`对应于**after_script**生命周期事件'
- en: 'In the following screenshot, we run the `travis_run_before_install` function:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们运行`travis_run_before_install`函数：
- en: '![](assets/bc7fd32e-d1d9-4137-a655-05f8fe0545cd.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bc7fd32e-d1d9-4137-a655-05f8fe0545cd.png)'
- en: 'Remember that this is running what is specified in the `before_install` life
    cycle event, which has the following in the `multiple-languages` repository:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这是在`before_install`生命周期事件中指定的内容，在`multiple-languages`存储库中：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now we will run the `travis_run_install` convenience Bash function, which installs
    library dependencies that are specified in the Travis `install` life cycle event:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将运行`travis_run_install`便利Bash函数，该函数安装了在Travis `install`生命周期事件中指定的库依赖项：
- en: '![](assets/fad602ad-6379-4c5e-aa32-9586c553be5a.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fad602ad-6379-4c5e-aa32-9586c553be5a.png)'
- en: 'We have the following entry in the `install` life cycle event in the `multiple-languages`
    repository Travis YML script:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在`multiple-languages`存储库的Travis YML脚本中，我们有以下条目：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Notice that is exactly what is run when the `travis_run_install` convenience
    function is run.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这正是在运行`travis_run_install`便利函数时运行的内容。
- en: 'Next, we run the `travis_run_script` convenience function, which runs any scripts
    that have been defined in the Travis `script` life cycle event:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们运行`travis_run_script`便利函数，该函数运行在Travis `script`生命周期事件中定义的任何脚本：
- en: '![](assets/c1441faa-cfc8-4d20-9bda-1c99dc1b0a90.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c1441faa-cfc8-4d20-9bda-1c99dc1b0a90.png)'
- en: 'We have the following entry in the `script` life cycle event in the `multiple-languages`
    repository Travis YML script:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在`multiple-languages`存储库的Travis YML脚本中，我们在`script`生命周期事件中有以下条目：
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If we had specified any other life cycle events, we could have used the remaining
    convenience Bash functions.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们指定了其他生命周期事件，我们可以使用剩余的便利Bash函数。
- en: tmate shell session actions
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: tmate shell会话操作
- en: The SSH shell session uses a fork of tmux ([https://github.com/tmux/tmux](https://github.com/tmux/tmux))
    which is a Terminal multiplexor program called tmate ([https://tmate.io/](https://tmate.io/))
    and with it you can open Windows, scroll through history, and more.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: SSH shell会话使用了tmux的分支（[https://github.com/tmux/tmux](https://github.com/tmux/tmux)），这是一个名为tmate的终端复用程序（[https://tmate.io/](https://tmate.io/)），您可以使用它打开窗口，滚动历史记录等。
- en: If you press *Control-b* [, you will be able to scroll up and down the history
    of your commands
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您按下*Control-b* [，您将能够上下滚动您的命令历史记录
- en: '![](assets/932627c3-ee94-4ac2-88f0-9bdb7f71c989.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/932627c3-ee94-4ac2-88f0-9bdb7f71c989.png)'
- en: To quit the history scroll mode, you simply press the letter *q*.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要退出历史滚动模式，只需按下字母*q*。
- en: If you press *Control-b c*, you will create a new window that you can work with.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您按下*Control-b c*，您将创建一个可以使用的新窗口。
- en: If you press *Control-b [0..9]*, then you can toggle between any new windows
    that you have created. Notice here the brackets mean, for instance, Control-b
    0, Control-b 1, and so on to toggle through window sessions.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您按下*Control-b [0..9]*，则可以在您创建的任何新窗口之间切换。请注意，这里的括号意味着，例如，Control-b 0，Control-b
    1等，以切换窗口会话。
- en: Travis Web UI logging
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis Web UI日志
- en: You can certainly log out some environment variables in Travis CI but be careful
    that you do not log out secret information in your logs.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您当然可以在Travis CI中记录一些环境变量，但要小心，不要在日志中记录秘密信息。
- en: Steps that Travis CI takes to protect your environment-specific variables
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI采取的步骤来保护您的特定于环境的变量
- en: Travis CI will, by default, hide any variables such as tokens and environment
    variables and simply display the string `[secure]` in their place.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI默认会隐藏诸如令牌和环境变量之类的任何变量，并简单地显示字符串`[secure]`。
- en: 'If you go to build #3 [https://travis-ci.org/packtci/puppeteer-headless-chrome-travis-yml-script/builds/398696669](https://travis-ci.org/packtci/puppeteer-headless-chrome-travis-yml-script/builds/398696669)),
    you will see the following entry:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您转到构建＃3 [https://travis-ci.org/packtci/puppeteer-headless-chrome-travis-yml-script/builds/398696669](https://travis-ci.org/packtci/puppeteer-headless-chrome-travis-yml-script/builds/398696669))，您将看到以下条目：
- en: '![](assets/1bc0b3c7-fa90-49a4-88ca-f89a59fd4bc7.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1bc0b3c7-fa90-49a4-88ca-f89a59fd4bc7.png)'
- en: 'Remember that we added the following encrypted environment variable in this
    repository in [Chapter 10](1d648fa2-3d76-4cff-b286-1e1fe47b4ef3.xhtml), *Travis
    CI CLI Commands and Automation*:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们在此存储库中添加了以下加密环境变量[第10章](1d648fa2-3d76-4cff-b286-1e1fe47b4ef3.xhtml)中的*Travis
    CI CLI命令和自动化*：
- en: '[PRE12]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Notice that this command adds the following entry into the Travis YML script:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此命令将以下条目添加到Travis YML脚本中：
- en: '[PRE13]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Remember that the Travis Job log only showed the string `[secure]` in place
    of this environment variable.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Travis作业日志中只显示字符串`[secure]`代替此环境变量。
- en: Travis CI deployment overview and debugging
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI部署概述和调试
- en: We discussed Software Deployments in *Chapter 3, Basics of Continuous Delivery*,
    but to recap a Deployment is the end product of the software that is created by
    developers that your end users will use. A Deployment is typically done in the
    end of a successful CI/CD Pipeline has finished. Remember that a CI/CD pipeline
    can consist of a commit stage where any binaries are built and a Unit Test Suite
    is run followed by a 2nd stage where integration tests may be run, and then possibly
    followed by a 3rd stage consisting of Load Tests and/or Security Tests and then
    finally a 4th stage consisting of a suite of Acceptance Tests. If all of the stages
    of the CI/CD pipeline finish successfully then and only then should a Deployment
    pipeline be initiated.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*第3章，持续交付的基础知识*中讨论了软件部署，但是为了回顾一下，部署是开发人员创建的软件的最终产品，您的最终用户将使用它。部署通常在成功的CI/CD流水线结束时完成。请记住，CI/CD流水线可以包括提交阶段，在该阶段构建任何二进制文件并运行单元测试套件，然后是第二阶段，可能运行集成测试，然后可能是第三阶段，包括负载测试和/或安全测试，最后是第四阶段，包括一套验收测试。只有当所有CI/CD流水线的阶段都成功完成时，才应启动部署流水线。
- en: Deployments in Travis CI are relatively easy/ Remember that you can use the
    Travis CLI to set up some deployment tools with ease in Travis CI.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在Travis CI中部署相对容易/请记住，您可以使用Travis CLI轻松设置一些部署工具。
- en: Supported Providers in Travis CI
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI中支持的提供商
- en: 'Here are some supported providers that you can use with Travis CI for deployments:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些支持的提供商，您可以在Travis CI中用于部署：
- en: AWS CodeDeploy ([https://docs.travis-ci.com/user/deployment/codedeploy/](https://docs.travis-ci.com/user/deployment/codedeploy/))
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS CodeDeploy ([https://docs.travis-ci.com/user/deployment/codedeploy/](https://docs.travis-ci.com/user/deployment/codedeploy/))
- en: AWS Elastic Beanstalk ([https://docs.travis-ci.com/user/deployment/elasticbeanstalk/](https://docs.travis-ci.com/user/deployment/elasticbeanstalk/))
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Elastic Beanstalk ([https://docs.travis-ci.com/user/deployment/elasticbeanstalk/](https://docs.travis-ci.com/user/deployment/elasticbeanstalk/))
- en: AWS Lambda ([https://docs.travis-ci.com/user/deployment/lambda/](https://docs.travis-ci.com/user/deployment/lambda/))
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Lambda ([https://docs.travis-ci.com/user/deployment/lambda/](https://docs.travis-ci.com/user/deployment/lambda/))
- en: AWS S3 ([https://docs.travis-ci.com/user/deployment/s3/](https://docs.travis-ci.com/user/deployment/s3/))
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS S3 ([https://docs.travis-ci.com/user/deployment/s3/](https://docs.travis-ci.com/user/deployment/s3/))
- en: Azure Web App ([https://docs.travis-ci.com/user/deployment/azure-web-apps/](https://docs.travis-ci.com/user/deployment/azure-web-apps/))
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Web App ([https://docs.travis-ci.com/user/deployment/azure-web-apps/](https://docs.travis-ci.com/user/deployment/azure-web-apps/))
- en: Bluemix CloudFoundry ([https://docs.travis-ci.com/user/deployment/bluemixcloudfoundry/](https://docs.travis-ci.com/user/deployment/bluemixcloudfoundry/))
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bluemix CloudFoundry ([https://docs.travis-ci.com/user/deployment/bluemixcloudfoundry/](https://docs.travis-ci.com/user/deployment/bluemixcloudfoundry/))
- en: Chef Supermarket ([https://docs.travis-ci.com/user/deployment/chefsupermarket/](https://docs.travis-ci.com/user/deployment/chefsupermarket/))
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef Supermarket ([https://docs.travis-ci.com/user/deployment/chefsupermarket/](https://docs.travis-ci.com/user/deployment/chefsupermarket/))
- en: CloudFoundry ([https://docs.travis-ci.com/user/deployment/cloudfoundry/](https://docs.travis-ci.com/user/deployment/cloudfoundry/))
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFoundry ([https://docs.travis-ci.com/user/deployment/cloudfoundry/](https://docs.travis-ci.com/user/deployment/cloudfoundry/))
- en: GitHub Pages ([https://docs.travis-ci.com/user/deployment/pages/](https://docs.travis-ci.com/user/deployment/pages/))
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Pages ([https://docs.travis-ci.com/user/deployment/pages/](https://docs.travis-ci.com/user/deployment/pages/))
- en: GitHub Releases ([https://docs.travis-ci.com/user/deployment/releases/](https://docs.travis-ci.com/user/deployment/releases/))
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Releases ([https://docs.travis-ci.com/user/deployment/releases/](https://docs.travis-ci.com/user/deployment/releases/))
- en: Google App Engine ([https://docs.travis-ci.com/user/deployment/google-app-engine/](https://docs.travis-ci.com/user/deployment/google-app-engine/))
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google App Engine ([https://docs.travis-ci.com/user/deployment/google-app-engine/](https://docs.travis-ci.com/user/deployment/google-app-engine/))
- en: Google Cloud Storage ([https://docs.travis-ci.com/user/deployment/gcs/](https://docs.travis-ci.com/user/deployment/gcs/))
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud Storage ([https://docs.travis-ci.com/user/deployment/gcs/](https://docs.travis-ci.com/user/deployment/gcs/))
- en: Google Firebase ([https://docs.travis-ci.com/user/deployment/firebase/](https://docs.travis-ci.com/user/deployment/firebase/))
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Firebase ([https://docs.travis-ci.com/user/deployment/firebase/](https://docs.travis-ci.com/user/deployment/firebase/))
- en: Heroku ([h](https://docs.travis-ci.com/user/deployment/heroku/)[ttps://docs.travis-ci.com/user/deployment/heroku/](https://docs.travis-ci.com/user/deployment/heroku/))
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Heroku ([h](https://docs.travis-ci.com/user/deployment/heroku/)[ttps://docs.travis-ci.com/user/deployment/heroku/](https://docs.travis-ci.com/user/deployment/heroku/))
- en: OpenShift ([https://docs.travis-ci.com/user/deployment/openshift/](https://docs.travis-ci.com/user/deployment/openshift/))
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift ([https://docs.travis-ci.com/user/deployment/openshift/](https://docs.travis-ci.com/user/deployment/openshift/))
- en: npm ([https://docs.travis-ci.com/user/deployment/npm/](https://docs.travis-ci.com/user/deployment/npm/))
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npm ([https://docs.travis-ci.com/user/deployment/npm/](https://docs.travis-ci.com/user/deployment/npm/))
- en: Surge.sh ([https://docs.travis-ci.com/user/deployment/surge/](https://docs.travis-ci.com/user/deployment/surge/))
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Surge.sh ([https://docs.travis-ci.com/user/deployment/surge/](https://docs.travis-ci.com/user/deployment/surge/))
- en: For the full list of supported providers, please go to the Travis user documentation
    ([https://docs.travis-ci.com/user/deployment/#Supported-Providers](https://docs.travis-ci.com/user/deployment/#Supported-Providers)).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 有关支持的提供商的完整列表，请转到Travis用户文档([https://docs.travis-ci.com/user/deployment/#Supported-Providers](https://docs.travis-ci.com/user/deployment/#Supported-Providers))。
- en: Heroku setup in Travis CI
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI中的Heroku设置
- en: We can use the Travis CLI to help us set up Heroku ([https://www.heroku.com/platform](https://www.heroku.com/platform))
    in our `multiple-languages` ([ https://github.com/packtci/multiple-languages](https://github.com/packtci/multiple-languages))
    repository.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Travis CLI来帮助我们在`multiple-languages` ([https://github.com/packtci/multiple-languages](https://github.com/packtci/multiple-languages))存储库中设置Heroku
    ([https://www.heroku.com/platform](https://www.heroku.com/platform))。
- en: 'The first step we need to do is to make sure that we are logged into Heroku
    by using the Heroku CLI, which you can download and install at [https://devcenter.heroku.com/articles/heroku-cli#download-and-install](https://devcenter.heroku.com/articles/heroku-cli#download-and-install).
    Once we are logged in, we will be given an access token that we can use:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一步是确保我们已经使用Heroku CLI登录到Heroku，您可以在[https://devcenter.heroku.com/articles/heroku-cli#download-and-install](https://devcenter.heroku.com/articles/heroku-cli#download-and-install)下载并安装。一旦我们登录，我们将获得一个访问令牌，我们可以使用：
- en: '![](assets/d4f2521f-3a8f-4f49-a62f-c39b18e00d50.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d4f2521f-3a8f-4f49-a62f-c39b18e00d50.png)'
- en: Notice here that we used the  `heroku auth:token` command to print out our access
    token.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用了`heroku auth:token`命令来打印出我们的访问令牌。
- en: 'Now we simply need to use the `travis setup` command to get set up:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要使用`travis setup`命令进行设置：
- en: '![](assets/889e3d33-46ca-47e5-9caa-b1d414b4ced1.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/889e3d33-46ca-47e5-9caa-b1d414b4ced1.png)'
- en: Notice that we did not have to provide an access token as we already logged
    into Heroku and the `travis setup` command is smart enough to grab it for us.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于我们已经登录到Heroku，我们不需要提供访问令牌，`travis setup`命令足够智能，可以为我们抓取它。
- en: 'The `travis setup` command automatically updates our Travis YML script with
    Heroku provider information and now our Travis TML script looks like this:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`travis setup` 命令会自动更新我们的Travis YML脚本，添加Heroku提供商信息，现在我们的Travis TML脚本看起来是这样的：'
- en: '[PRE14]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Debug failure in Travis YML script
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Travis YML脚本中调试失败
- en: 'If we look at build 8.1 ([https://travis-ci.org/packtci/multiple-languages/jobs/403102478#L548](https://travis-ci.org/packtci/multiple-languages/jobs/403102478#L548))
    for the `multiple-languages` project, we can see that it errored out, as the screenshot
    shows, because we don''t actually have an app in Heroku called multiple-languages:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看`multiple-languages`项目的构建8.1（[https://travis-ci.org/packtci/multiple-languages/jobs/403102478#L548](https://travis-ci.org/packtci/multiple-languages/jobs/403102478#L548)），我们可以看到它出错了，正如屏幕截图所示，因为我们实际上在Heroku中没有名为`multiple-languages`的应用：
- en: '![](assets/31a527a2-d30f-499d-b488-3cd0441689d2.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/31a527a2-d30f-499d-b488-3cd0441689d2.png)'
- en: 'We simply need to create an app in Heroku with an app named `multiple-languages`
    like this:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要在Heroku中创建一个名为`multiple-languages`的应用：
- en: '![](assets/ef039dd8-85f1-4d40-a42b-d29d2814a2ad.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ef039dd8-85f1-4d40-a42b-d29d2814a2ad.png)'
- en: 'Now let us restart the build in Travis using the `travis restart` command:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用`travis restart`命令在Travis中重新启动构建：
- en: '![](assets/20ec2ee1-2e2f-417a-ace9-cbff5a19c3d9.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/20ec2ee1-2e2f-417a-ace9-cbff5a19c3d9.png)'
- en: 'Now let us look at the job log for build 8.1 once more:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们再次查看构建8.1的作业日志：
- en: '![](assets/db2db9ef-7069-430a-897e-28261c3cbcb9.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/db2db9ef-7069-430a-897e-28261c3cbcb9.png)'
- en: 'Now if we look at the Heroku dashboard, we can confirm that our application
    was successfully deployed to Heroku:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们查看Heroku仪表板，我们可以确认我们的应用已成功部署到Heroku：
- en: '![](assets/03ae8c19-ca4c-40b6-81f9-aaad49942575.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/03ae8c19-ca4c-40b6-81f9-aaad49942575.png)'
- en: Summary
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we presented an overview of the Travis job log and explained
    the different parts of the job log. We looked at running a build locally using
    Docker and learned how to enable a build in debug mode by using the Travis API
    as well. We then looked at the steps that Travis CI takes to secure your secrets
    and keys in the job log. Finally, we looked at how to deploy an application in
    Travis CI by using by using the Travis CLI and then looked at how to debug a build
    failure and get a successful deployment in Travis CI.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了Travis作业日志的概述，并解释了作业日志的不同部分。我们查看了如何使用Docker在本地运行构建，并学习了如何使用Travis
    API启用调试模式构建。然后，我们查看了Travis CI采取的步骤来保护作业日志中的秘密和密钥。最后，我们查看了如何使用Travis CLI部署应用程序，然后查看了如何调试构建失败并在Travis
    CI中获得成功部署。
- en: In the next chapter, we will explain how to get Circle CLI set up in a software
    project and then go over the basics of the Circle CI UI.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将解释如何在软件项目中设置Circle CLI，然后介绍Circle CI UI的基础知识。
- en: Questions
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Does another build get kicked off when you merge a pull request in GitHub?
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您在GitHub中合并拉取请求时，是否会触发另一个构建？
- en: Does the Travis job log show a label when running any scripts in the script
    life cycle event?
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行脚本生命周期事件中，Travis作业日志是否显示标签？
- en: How do we debug a build locally in Travis CI?
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在Travis CI中本地调试构建？
- en: Is the debug build mode available for public repositories?
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调试构建模式是否适用于公共存储库？
- en: How would you use the Travis API to get a Job ID?
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将如何使用Travis API获取作业ID？
- en: What is the convenience bash function that you can use for the before_install
    life cycle event when running a build in debug mode?
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行调试模式构建时，您可以使用哪个方便的bash函数来进行before_install生命周期事件？
- en: What Travis CLI command would you use to setup add-ons such as Heroku to do
    deployments?
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会使用哪个Travis CLI命令来设置添加Heroku等附加组件以进行部署？
- en: Further reading
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can further explore debugging options and more advanced configuration information
    in the Travis user documentation: [https://docs.travis-ci.com/](https://docs.travis-ci.com/).'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Travis用户文档中进一步探索调试选项和更高级的配置信息：[https://docs.travis-ci.com/](https://docs.travis-ci.com/)。
