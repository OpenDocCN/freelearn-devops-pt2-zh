- en: Building Pipelines with Jenkins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jenkins构建管道
- en: This chapter will go into detail about how to set up Jenkins Blue Ocean using
    an existing Jenkins instance and how to set it up using Docker. We will look in
    detail at the Blue Ocean **User Interface** (**UI**) and discuss the differences
    between the Jenkins Classic view and the Blue Ocean view. We will also look at
    the Pipeline Syntax and briefly discuss its uses and explain the two different
    types of Pipeline Syntax.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将详细介绍如何使用现有的Jenkins实例设置Jenkins蓝海以及如何使用Docker进行设置。我们将详细了解蓝海用户界面（UI），并讨论Jenkins经典视图和蓝海视图之间的区别。我们还将详细讨论Pipeline
    Syntax，并简要讨论其用途，并解释两种不同类型的Pipeline Syntax。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Jenkins 2.0
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins 2.0
- en: The Jenkins Pipeline
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins管道
- en: Navigating in Jenkins Blue Ocean
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Jenkins蓝海中导航
- en: Pipeline Syntax
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pipeline Syntax
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires a basic understanding of how to interact with a Unix Shell
    environment. We will also briefly discuss the Pipeline Syntax so it would help
    if you have some basic programming skills to understand what a keyword is used
    for in a programming language.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要基本了解如何与Unix Shell环境交互。我们还将简要讨论Pipeline Syntax，因此如果您具有一些基本的编程技能，就能理解编程语言中关键字的用途。
- en: Jenkins 2.0
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins 2.0
- en: Jenkins 2.0 has a different design methodology and flow compared to Jenkins
    1.0\. Instead of using freestyle jobs, there is a new **Domain Specific Language**
    (**DSL**) that is an abbreviated form of the Groovy programming language.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 2.0的设计方法和流程与Jenkins 1.0相比有所不同。不再使用自由风格的作业，而是使用了一种新的“领域特定语言”（DSL），这是Groovy编程语言的缩写形式。
- en: The Pipeline views also function differently to how they do in Jenkins 1.0\.
    The Pipeline stage views also help us visualize the various stages in a pipeline.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 管道视图在Jenkins 1.0中的功能也有所不同。管道阶段视图还帮助我们可视化管道中的各个阶段。
- en: Why move to Jenkins 2.0?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要转移到Jenkins 2.0？
- en: So, to begin with, why move to Jenkins 2.0 at all and not stay with Jenkins
    1.0? The Jenkins Classic views are considered to be cluttered and did not take
    ease of use into account. Jenkins 2.0 made a big push on using Docker Images in
    a more intuitive manner. Also, the new UI includes a Jenkins pipeline editor and
    changes the way you find your builds by introducing a pipeline view. The goal
    for the new UI is to reduce clutter and increase clarity for every member of a
    team that uses Jenkins. The new UI also has GitHub and Bitbucket integration as
    well as Git integration. The Jenkins 2.0 UI is essentially a collection of plugins
    that you install called Blue Ocean.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，首先，为什么要转移到Jenkins 2.0，而不是继续使用Jenkins 1.0？Jenkins经典视图被认为是混乱的，并且没有考虑到易用性。Jenkins
    2.0在更直观的方式上使用Docker镜像上做出了很大的推动。此外，新的UI包括了Jenkins管道编辑器，并通过引入管道视图改变了您查找构建的方式。新UI的目标是减少混乱，增加对使用Jenkins的团队中每个成员的清晰度。新UI还具有GitHub和Bitbucket集成以及Git集成。Jenkins
    2.0 UI本质上是您安装的一组插件，称为蓝海。
- en: Installing the Blue Ocean plugin on an existing instance
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在现有实例上安装蓝海插件
- en: If you install Jenkins on most platforms, you will not have the Blue Ocean plugin
    installed with all of its dependent plugins by default. You will need to make
    sure that you are running on Jenkins version 2.7.x or greater to install the Blue
    Ocean plugin.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在大多数平台上安装Jenkins，您将不会默认安装所有相关插件的蓝海插件。您需要确保您正在运行Jenkins版本2.7.x或更高版本才能安装蓝海插件。
- en: In order to install plugins on a Jenkins instance, you must have administrator
    permission that is set through matrix-based security, and any Jenkins administrators
    can also configure the permissions of other users in the system.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Jenkins实例上安装插件，您必须具有通过基于矩阵的安全设置的管理员权限，任何Jenkins管理员也可以配置系统中其他用户的权限。
- en: 'The steps to install the Blue Ocean plugin are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 安装蓝海插件的步骤如下：
- en: Make sure that you are logged in as a user with administrator permission
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您以具有管理员权限的用户登录
- en: From the Jenkins home page, or the dashboard in Jenkins Classic, click **Manage
    Jenkins** on the left side of the dashboard
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Jenkins主页或Jenkins经典版的仪表板上，点击仪表板左侧的“管理Jenkins”
- en: Next click **Manage Plugins** in the center of the Manage Jenkins page
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在“管理Jenkins”页面的中心，点击“管理插件”
- en: Click the Available tab and type `Blue Ocean` into the Filter textbox, that
    filters the list of plugins to those whose name and/or description contains the
    words blue and ocean
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“可用”选项卡，并在过滤文本框中输入“蓝海”，以过滤插件列表，只显示名称和/或描述中包含“蓝海”的插件
- en: Please read [Chapter 7](6b13378c-73a7-4dc5-b547-0e6f2f153927.xhtml), *Developing
    Plugins*, specifically the *Installing Jenkins plugins* section for more information.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请阅读[第7章](6b13378c-73a7-4dc5-b547-0e6f2f153927.xhtml)，*开发插件*，特别是*安装Jenkins插件*部分，以获取更多信息。
- en: Installing the Blue Ocean plugin through a Jenkins Docker Image
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Jenkins Docker镜像安装蓝海插件
- en: You will need to make sure that you have Docker installed in order to get the
    Jenkins CI Docker Image.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要确保已安装Docker才能获取Jenkins CI Docker镜像。
- en: Docker prerequisites
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker先决条件
- en: Since Docker leverages the operating system's virtualization technologies, the
    installation requirements for Docker are specific.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Docker利用操作系统的虚拟化技术，因此Docker的安装要求是特定的。
- en: 'The OS X requirements are:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: OS X的要求是：
- en: 2010 or newer model Mac with Intel's MMU virtualization
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2010年或更新型号的Mac，带有英特尔的MMU虚拟化
- en: OS X El Capitan 10.11 or newer
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OS X El Capitan 10.11或更新版本
- en: 'The Windows requirements are:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Windows的要求是：
- en: 64-bit Windows
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 64位Windows
- en: Windows 10 Pro, Enterprise, or Education (not Home, not Windows 7 or 8) to install
    Hyper-V
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10专业版、企业版或教育版（不是家庭版，也不是Windows 7或8）来安装Hyper-V
- en: Windows 10 Anniversary Update or better
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10周年更新版或更高版本
- en: Access to your machine's BIOS to turn on virtualization
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问您机器的BIOS以打开虚拟化
- en: To install Docker on your operating system, visit the Docker store ([https://store.docker.com/search?type=edition&offering=community](https://store.docker.com/search?type=edition&offering=community)) website
    and click the Docker Community Edition box that is suitable for your operating
    system or cloud service. Follow the installation instructions on their website.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的操作系统上安装Docker，请访问Docker商店（[https://store.docker.com/search?type=edition&offering=community](https://store.docker.com/search?type=edition&offering=community)）网站，并点击适合您的操作系统或云服务的Docker社区版框。按照他们网站上的安装说明进行安装。
- en: 'Make sure that Docker is installed by checking the Docker version using either
    a Windows Command Prompt or an OS X/Linux Terminal application. Run the following
    in your command-line:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Windows命令提示符或OS X/Linux终端应用程序检查Docker版本来确保Docker已安装。在命令行中运行以下命令：
- en: '![](assets/71166b35-4c61-4c35-8da1-d93477645440.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/71166b35-4c61-4c35-8da1-d93477645440.png)'
- en: Notice here that I have Docker version 18 installed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里我安装了Docker版本18。
- en: Installing Docker images
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Docker镜像
- en: In order to get Docker images, you need to make sure that you have an account
    in Docker Hub ([https://hub.docker.com/](https://hub.docker.com/)). Once you have
    an account in Docker Hub and Docker is installed, grabbing the latest Jenkins
    CI Docker image is straightforward.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取Docker镜像，您需要确保在Docker Hub（[https://hub.docker.com/](https://hub.docker.com/)）上有一个帐户。一旦您在Docker
    Hub上有了帐户并且安装了Docker，获取最新的Jenkins CI Docker镜像就很简单。
- en: 'Run the following command in a Windows Command Prompt or a Terminal:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows命令提示符或终端中运行以下命令：
- en: '![](assets/75f86bc1-49d1-46fe-b27e-6cf0c368a2ed.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/75f86bc1-49d1-46fe-b27e-6cf0c368a2ed.png)'
- en: Notice here that I have already pulled the `jenkinsci/blueocean` Docker image
    and so the command did not get pulled from Docker Hub but instead printed out
    a SHA hash checksum. This shows that I already have the latest Docker image for
    `jenkinsci/blueocean`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我已经拉取了`jenkinsci/blueocean` Docker镜像，因此该命令没有从Docker Hub中拉取，而是打印出了一个SHA哈希校验和。这表明我已经拥有了`jenkinsci/blueocean`的最新Docker镜像。
- en: 'Next, you will need to get the Jenkins Docker container up and running, and
    you will need to run the following command in a Terminal or Command Prompt shell:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要让Jenkins Docker容器运行起来，并且您需要在终端或命令提示符中运行以下命令：
- en: '![](assets/1095a144-6ed5-4b66-8f19-dcd414e930c8.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1095a144-6ed5-4b66-8f19-dcd414e930c8.png)'
- en: You can make this easier by simply creating a shell script that does this for
    you or by creating an alias.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过简单地创建一个为您执行此操作的shell脚本或创建一个别名来简化此过程。
- en: 'Here is a shell script that I created in a text editor:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我在文本编辑器中创建的一个shell脚本：
- en: '![](assets/ae753d6a-1d5e-4f9c-a5ee-e10d275e3071.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ae753d6a-1d5e-4f9c-a5ee-e10d275e3071.png)'
- en: 'I have a personal `bin` directory where I store all of my personal scripts
    in `~/bin`, and then I make sure to add it to the `PATH` variable. The script
    filename is called `run-jenkinsci-blueocean`. We need to make sure that the script
    is executable by issuing the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个个人的`bin`目录，我在`~/bin`中存储所有个人脚本，然后我确保将其添加到`PATH`变量中。脚本文件名为`run-jenkinsci-blueocean`。我们需要确保该脚本是可执行的，通过发出以下命令：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then all I have to do is run the `~/bin/run-jenkinsci-blueocean` command.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我只需要运行`~/bin/run-jenkinsci-blueocean`命令。
- en: 'You can also create an alias in Unix similar to this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在Unix中创建类似的别名：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Notice here that I added this shell alias in my `.zshrc` file, but you can just
    as easily add this to a `.bashrc` file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我在我的`.zshrc`文件中添加了这个shell别名，但您也可以将其添加到`.bashrc`文件中。
- en: Windows users can create a batch file or find some other way to make running
    the Docker command easier.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户可以创建一个批处理文件或找到其他方法来使运行Docker命令更容易。
- en: 'In order to stop the Docker container, you can run the following command:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了停止Docker容器，您可以运行以下命令：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This command will show all the running containers in your system; you will
    need to look at the `Container ID`, `NAMES` column, and copy the ID that corresponds
    to the Docker image `jenkinsci/blueocean`. Lastly, to stop the container you need
    to run the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将显示系统中所有正在运行的容器；您需要查看`Container ID`、`NAMES`列，并复制与Docker镜像`jenkinsci/blueocean`对应的ID。最后，要停止容器，您需要运行以下命令：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that because we used the `--name jenkins-blueocean` options in the `docker
    run` command in the shell script, Docker created a container with the name `jenkins-blueocean`;
    if we had not done so, then Docker would have created a name for the container
    for us. We can also use the container ID and name to stop the container, that
    is shown when you issue the `docker ps -a` command in a Terminal or Command Prompt.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，因为我们在shell脚本中的`docker run`命令中使用了`--name jenkins-blueocean`选项，Docker创建了一个名为`jenkins-blueocean`的容器；如果我们没有这样做，那么Docker将为我们创建一个容器的名称。当您在终端或命令提示符中发出`docker
    ps -a`命令时，您可以使用容器ID和名称来停止容器。
- en: 'Once Jenkins is running, you can go here: `http://localhost:8080`and you will
    need to unlock Jenkins by providing the default password generated for the administrator.
    In [Chapter 5](3e1059c7-00d0-48a6-882b-7d7dbdf8aa50.xhtml), *Installation and
    Basics of Jenkins*, we skipped the getting started step of installing suggested
    plugins, but this time I would recommend that you install the suggested plugins
    on the Getting Started screen:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Jenkins运行起来，您可以在这里访问：`http://localhost:8080`，您需要提供为管理员生成的默认密码来解锁Jenkins。在[第5章](3e1059c7-00d0-48a6-882b-7d7dbdf8aa50.xhtml)中，*Jenkins的安装和基础知识*，我们跳过了安装建议插件的入门步骤，但这次我建议您在入门屏幕上安装建议的插件：
- en: '![](assets/1317bc5f-f095-4bfa-af7a-1ccae703e3c4.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1317bc5f-f095-4bfa-af7a-1ccae703e3c4.png)'
- en: By clicking the Install suggested plugins button, you will get all of the suggested
    plugins and dependent plugins, that will help you work on the new Jenkins 2.0
    flow with pipelines and more.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击安装建议插件按钮，您将获得所有建议的插件和依赖插件，这将帮助您在新的Jenkins 2.0流程中使用流水线等功能。
- en: Accessing Blue Ocean Jenkins view
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问Blue Ocean Jenkins视图
- en: 'You need to make sure that you click the Open Blue Ocean button, that looks
    similar to this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要确保点击打开Blue Ocean按钮，看起来类似于这样：
- en: '![](assets/badaaee4-6cfc-4e8b-b903-2084093bdf24.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/badaaee4-6cfc-4e8b-b903-2084093bdf24.png)'
- en: 'Once you click the Open Blue Ocean button, you will be redirected to this URL:
    `http://localhost:8080/blue/organizations/jenkins/pipelines`. The Jenkins UI will
    look very different and behave differently.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“打开蓝色海洋”按钮后，您将被重定向到此URL：`http://localhost:8080/blue/organizations/jenkins/pipelines`。Jenkins
    UI将看起来非常不同，并且行为也不同。
- en: 'Here is the initial screen you will see, as we have not created any pipelines
    yet:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您将看到的初始屏幕，因为我们还没有创建任何流水线：
- en: '![](assets/cfc6c32e-e7bd-417b-a6e9-af003b4b6d79.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cfc6c32e-e7bd-417b-a6e9-af003b4b6d79.png)'
- en: We will explore the Pipeline Syntax and how to navigate the Jenkins 2.0 UI in
    the following sections.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的部分中探索流水线语法以及如何在Jenkins 2.0 UI中进行导航。
- en: The Jenkins pipeline
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins流水线
- en: We will create our first pipeline by using the Jenkins 2.0 UI and will also
    create a Jenkinsfile with the pipeline editor that is built in to the new Jenkins
    2.0 UI.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Jenkins 2.0 UI创建我们的第一个流水线，并且还将使用内置到新Jenkins 2.0 UI中的流水线编辑器创建一个Jenkinsfile。
- en: Creating a Jenkins pipeline
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Jenkins流水线
- en: 'The first step we will do is click the Create a new Pipeline button. You will
    be redirected to the following screen:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的第一步是点击“创建新流水线”按钮。您将被重定向到以下屏幕：
- en: '![](assets/af4a51b2-db74-49c2-a980-cd22ecf1210e.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/af4a51b2-db74-49c2-a980-cd22ecf1210e.png)'
- en: For the purposes of this chapter, we will use an existing GitHub repository
    that I created, but you can easily use Bitbucket and your own code that is hosted
    on either GitHub or Bitbucket. In order for this to work, you will need to make
    sure that you have an account on GitHub, and if you do not, make sure to sign
    up for GitHub ([https://github.com/](https://github.com/)).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的目的，我们将使用我创建的现有GitHub存储库，但您也可以轻松使用Bitbucket和您自己托管在GitHub或Bitbucket上的代码。为了使其工作，您需要确保在GitHub上有一个帐户，如果没有，请确保注册GitHub（[https://github.com/](https://github.com/)）。
- en: Providing a personal access token for GitHub
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为GitHub提供个人访问令牌
- en: 'You will need to create a personal access token if you don''t have one already
    in GitHub. Notice in the following screenshot that there is a link called Create
    an access key here:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在GitHub上还没有个人访问令牌，您将需要创建一个。请注意，在以下截图中，有一个名为“在此处创建访问密钥”的链接：
- en: '![](assets/e8dd5456-9d1a-4bc4-8b5c-1b67f9370adf.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e8dd5456-9d1a-4bc4-8b5c-1b67f9370adf.png)'
- en: 'Once you click the Create an access key here link, you will be redirected to
    the following GitHub page:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“在此处创建访问密钥”链接后，您将被重定向到以下GitHub页面：
- en: '![](assets/ec54ab3d-fec2-4178-ad76-4be2a213ebf9.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ec54ab3d-fec2-4178-ad76-4be2a213ebf9.png)'
- en: 'You can just keep the default options checked and then click the green button
    titled Generate token. Make sure to keep this personal access token in a safe
    place as it will only be shown once; copy it as we will need it. You will need
    to paste the access token into the Connect to Github input box and then click
    the blue Connect button:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以保持默认选项勾选，然后点击标题为“生成令牌”的绿色按钮。确保将此个人访问令牌保存在安全的地方，因为它只会显示一次；复制它，因为我们将需要它。您需要将访问令牌粘贴到“连接到Github”输入框中，然后点击蓝色的“连接”按钮：
- en: '![](assets/186e26ea-6f1d-4a97-b138-a35240b48b9c.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/186e26ea-6f1d-4a97-b138-a35240b48b9c.png)'
- en: Picking your GitHub organization
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择您的GitHub组织
- en: 'You will need to pick the GitHub organization that you belong to. In the screenshot
    that follows, I pick the GitHub username organization of `jbelmont`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要选择您所属的GitHub组织。在接下来的截图中，我选择了GitHub用户名组织`jbelmont`：
- en: '![](assets/64d91c75-d3ce-4f41-8a33-536cfb691e72.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/64d91c75-d3ce-4f41-8a33-536cfb691e72.png)'
- en: Picking the GitHub repository
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择GitHub存储库
- en: 'The last step that you need to do is to actually pick the GitHub repository
    where you want to create the Jenkins pipeline. In the screenshot here, I entered
    `cucumber-examples` and picked the dropdown. Then the blue Create Pipeline button
    was enabled:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要做的最后一步是实际选择要创建Jenkins流水线的GitHub存储库。在这里的截图中，我输入了`cucumber-examples`并选择了下拉菜单。然后蓝色的“创建流水线”按钮被启用：
- en: '![](assets/78944deb-ff37-401d-87e4-9e90f1642745.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/78944deb-ff37-401d-87e4-9e90f1642745.png)'
- en: Creating a pipeline with the pipeline editor
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用流水线编辑器创建流水线
- en: 'In the GitHub repo that we have chosen, there is no existing Jenkinsfile and
    so we are redirected to the pipeline editor screen, where we can create our first
    Jenkinsfile:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们选择的GitHub存储库中，没有现有的Jenkinsfile，因此我们被重定向到流水线编辑器屏幕，我们可以在其中创建我们的第一个Jenkinsfile：
- en: '![](assets/856f8223-249a-4543-bf92-f846bd823ff5.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/856f8223-249a-4543-bf92-f846bd823ff5.png)'
- en: 'We need to add a Docker image for Node.js and for the agent, that looks similar
    to this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为Node.js和代理添加一个Docker镜像，看起来类似于这样：
- en: '![](assets/ffc8dbc0-9985-4bdf-9a2b-12f4f9b5bf0e.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ffc8dbc0-9985-4bdf-9a2b-12f4f9b5bf0e.png)'
- en: Notice that we give an image and argument to mount a data volume using the `-v`
    option for Docker.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用`-v`选项为Docker挂载数据卷提供了一个图像和参数。
- en: 'Next we click the gray plus button and we will see the following change:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们点击灰色的加号按钮，然后我们将看到以下更改：
- en: '![](assets/ff130c0e-3369-43b9-ae93-69768a0a9b47.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ff130c0e-3369-43b9-ae93-69768a0a9b47.png)'
- en: 'Next we click the blue Add Step button after we give the stage a name. For
    the purposes of this demo, we will chose Build:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在为阶段命名后，我们点击蓝色的“添加步骤”按钮。对于这个演示，我们将选择“构建”：
- en: '![](assets/ae789def-1b34-4b57-b7a3-0f78388c684f.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ae789def-1b34-4b57-b7a3-0f78388c684f.png)'
- en: 'Next we need to pick an option for the step. We will choose the option titled
    Shell Script, and this will install all of our Node.js dependencies:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要选择一个步骤选项。我们将选择标题为“Shell脚本”的选项，这将安装我们所有的Node.js依赖项：
- en: '![](assets/5e9ff84e-31b0-409b-9a97-959ccdd4fcd0.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5e9ff84e-31b0-409b-9a97-959ccdd4fcd0.png)'
- en: 'Next we enter some commands to run in our Shell Script:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们输入一些要在我们的Shell脚本中运行的命令：
- en: '![](assets/f1710434-bea4-44f4-8da5-6a476bea92ea.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f1710434-bea4-44f4-8da5-6a476bea92ea.png)'
- en: 'Next we will click the gray plus button again to add one more stage to our
    pipeline, that now looks similar to this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将再次点击灰色的加号按钮，以向我们的流水线添加一个阶段，现在看起来类似于这样：
- en: '![](assets/cff137da-a10d-4d95-a16f-e60953410f47.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cff137da-a10d-4d95-a16f-e60953410f47.png)'
- en: 'Next we will enter a name for this stage, and for the purposes of this chapter,
    we will choose `Cucumber Tests`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为此阶段输入一个名称，并且在本章中，我们将选择`Cucumber Tests`：
- en: '![](assets/5a67c3d1-7812-4b5f-a45d-bf59d8c959d0.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5a67c3d1-7812-4b5f-a45d-bf59d8c959d0.png)'
- en: 'Next we add a step for this stage, and we will once again pick Shell Script
    as an option:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们为此阶段添加一个步骤，并且我们将再次选择Shell脚本作为选项：
- en: '![](assets/0c2ff88c-ccd5-4f3b-bdad-0641f36dbdba.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0c2ff88c-ccd5-4f3b-bdad-0641f36dbdba.png)'
- en: 'Lastly, we will click the Save button and provide a commit message so that
    this change gets pushed to our GitHub repository:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将点击保存按钮并提供提交消息，以便将此更改推送到我们的GitHub存储库：
- en: '![](assets/ad40105c-ecd9-4bbc-935b-eeae45804f7e.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ad40105c-ecd9-4bbc-935b-eeae45804f7e.png)'
- en: Once you click the blue Save & run button, the Jenkinsfile will be merged into
    the master branch and the pipeline will run.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 点击蓝色的“保存并运行”按钮后，Jenkinsfile将合并到主分支中，并且管道将运行。
- en: Navigating in Jenkins Blue Ocean
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Jenkins Blue Ocean中导航
- en: Some of the views that you are accustomed to using in Jenkins Classic view are
    not available in Jenkins Blue Ocean. The main concept behind Jenkins Blue Ocean
    is to make navigation within Jenkins more accessible, and to improve the Jenkins
    UI in terms of better icons and page navigation. A lot of the inspiration for
    the new Jenkins UI is based on the book *Blue Ocean Strategy* that emphasizes
    that the world has moved on from functional developer tooling to developer experience
    and the new UI has aspired to improve the developer experience of Jenkins.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jenkins Blue Ocean中，您习惯使用的一些视图在Jenkins Blue Ocean中不可用。Jenkins Blue Ocean背后的主要概念是使Jenkins内部导航更加便捷，并通过更好的图标和页面导航改进Jenkins
    UI。新Jenkins UI的许多灵感来自强调世界已经从功能性开发人员工具转向开发人员体验的《蓝海战略》一书，并且新UI致力于改善Jenkins的开发人员体验。
- en: Pipelines view
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道视图
- en: 'The following screenshot depicts a pipeline view for Jenkins Blue Ocean. Note
    that we have two different pipelines for two different GitHub repositories. The
    second pipeline was created by clicking the New Pipeline button and adding a personal base64
    ([https://github.com/jbelmont/decode-jwt](https://github.com/jbelmont/decode-jwt))
    Golang library that decodes JSON web tokens via a command-line tool:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图描述了Jenkins Blue Ocean的管道视图。请注意，我们为两个不同的GitHub存储库创建了两个不同的管道。通过单击“新管道”按钮并添加个人base64
    ([https://github.com/jbelmont/decode-jwt](https://github.com/jbelmont/decode-jwt))
    Golang库来解码JSON Web令牌通过命令行工具创建了第二个管道：
- en: '![](assets/de1715a6-7613-40ab-80fb-645ce0617b5b.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/de1715a6-7613-40ab-80fb-645ce0617b5b.png)'
- en: This list will be different depending on the number of pipelines that you have
    added to your Jenkins instance. Notice that you can star a pipeline and that there
    are columns labelled NAME, HEALTH, BRANCHES, and PR.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表将根据您在Jenkins实例中添加的管道数量而有所不同。请注意，您可以标记一个管道，并且有标有名称、健康、分支和PR的列。
- en: Pipeline detail view
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道详细视图
- en: 'If you click on an actual pipeline, then you will go into a pipeline details
    page that has all the details concerning all the stages run in your particular
    pipeline. The screenshot that follows is the base64 pipeline:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击实际管道，那么您将进入一个管道详细信息页面，其中包含有关特定管道中运行的所有阶段的所有详细信息。接下来的屏幕截图是base64管道：
- en: '![](assets/345339a9-d519-4330-a758-8637b2e4363e.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/345339a9-d519-4330-a758-8637b2e4363e.png)'
- en: Pipeline build view
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道构建视图
- en: 'You can click on each node in the pipeline view and see the all work done for
    that stage. In the first screenshot, we clicked on the Build Information node
    to see the commands run in that particular stage, that encompass pulling down
    a fresh copy of the GitHub repository and running the `go version` and `go fmt` commands:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以单击管道视图中的每个节点，并查看该阶段完成的所有工作。在第一个屏幕截图中，我们点击“构建信息”节点，以查看在该特定阶段运行的命令，其中包括拉取GitHub存储库的最新副本并运行`go
    version`和`go fmt`命令：
- en: '![](assets/457938ef-74a2-4e50-930e-5ec08ce97ba5.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/457938ef-74a2-4e50-930e-5ec08ce97ba5.png)'
- en: 'Notice that the second node is labeled Run Tests, and when we click that particular
    node, we only see the `go test` command, that runs our unit test cases in Golang:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，第二个节点标记为“运行测试”，当我们点击该特定节点时，我们只看到`go test`命令，该命令在Golang中运行我们的单元测试用例：
- en: '![](assets/ca2c83c1-7e91-46b6-8089-d96409e2e838.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ca2c83c1-7e91-46b6-8089-d96409e2e838.png)'
- en: One of the great things about pipeline views is that you get a more crisp and
    better laid out visualizations for each stage in your continuous integration builds.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 管道视图的一大优点是，您可以更清晰地查看持续集成构建中每个阶段的更好布局的可视化效果。
- en: Pipeline stage view
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道阶段视图
- en: 'If you click on an actual stage in the pipeline, that is depicted by the `>`
    symbol, it will show you a drop-down view with the details of that particular
    stage:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击管道中的实际阶段，由`>`符号表示，它将向您显示一个下拉视图，其中包含该特定阶段的详细信息：
- en: '![](assets/454eab55-7377-4988-bacd-029e3f56dd21.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/454eab55-7377-4988-bacd-029e3f56dd21.png)'
- en: Notice that here we clicked on the Run Tests stage to see a report saying that
    our unit test case written in Golang passed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里我们点击了“运行测试”阶段，以查看报告，报告显示我们用Golang编写的单元测试用例已通过。
- en: Other views in Jenkins pipelines
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins管道中的其他视图
- en: 'There are other views that you can use, such as the Pull Requests view, that
    shows you all the open pull requests and a branch view as well:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他视图可供使用，例如拉取请求视图，它会显示所有打开的拉取请求以及分支视图：
- en: '![](assets/eb5b0717-6ce9-4442-9ead-dcccc2cce6e7.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eb5b0717-6ce9-4442-9ead-dcccc2cce6e7.png)'
- en: The Jenkins Blue Ocean view is still being worked on, so any administrative
    task such as adding plugins and adding security information are still done in
    the Jenkins Classic view.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins Blue Ocean视图仍在进行中，因此任何管理任务，例如添加插件和添加安全信息，仍然在Jenkins经典视图中完成。
- en: Pipeline Syntax
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道语法
- en: 'The Pipeline Syntax has two forms ([https://jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline](https://jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline)):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 管道语法有两种形式（[https://jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline](https://jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline)）：
- en: Declarative Pipeline
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明性管道
- en: Scripted Pipeline
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本管道
- en: The difference between the two forms is that the Declarative Pipeline syntax
    is meant to be a simpler syntax than the Scripted Pipeline. The Scripted Pipeline
    syntax is a DSL, that follows the Groovy programming language semantics.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 两种形式之间的区别在于，声明性管道语法旨在比脚本管道更简单。脚本管道语法是DSL，遵循Groovy编程语言的语义。
- en: Pipeline Editor
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道编辑器
- en: In the *cucumber-examples* repository, we created a Jenkinsfile by using the
    Pipeline Editor. You can actually write the Jenkinsfile without using the Pipeline
    Editor, although I would recommend using it to debug a pipeline script as the
    editor has some nice features.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在*cucumber-examples*存储库中，我们使用管道编辑器创建了一个Jenkinsfile。您实际上可以在不使用管道编辑器的情况下编写Jenkinsfile，尽管我建议在调试管道脚本时使用它，因为编辑器具有一些很好的功能。
- en: Jenkinsfile
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkinsfile
- en: 'Here we have the actual Pipeline Syntax that the pipeline editor created for
    us. It is using the Declarative Pipeline syntax and there are several items to
    discuss in this syntax:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有管道编辑器为我们创建的实际管道语法。它使用了声明性管道语法，这个语法有几个要讨论的项目：
- en: '[PRE4]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Pipeline keyword
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道关键字
- en: All valid Declarative Pipelines must be enclosed within a pipeline block, as
    you can see in the preceding Jenkinsfile.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 所有有效的声明性管道必须被包含在管道块中，正如您在前面的Jenkinsfile中所看到的。
- en: Agent keyword
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理关键字
- en: The agent section specifies where the entire pipeline, or a specific stage,
    will execute in the Jenkins environment depending on where the agent section is
    placed. The section must be defined at the top level inside the pipeline block,
    but stage-level usage is optional.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 代理部分指定整个管道或特定阶段将在Jenkins环境中执行的位置，取决于代理部分的放置位置。该部分必须在管道块的顶层内定义，但阶段级别的使用是可选的。
- en: Stages keyword
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阶段关键字
- en: The stages keyword contains a sequence of one or more stage directives; the
    stages section is where the bulk of the work described by a pipeline will be located.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: stages关键字包含一个或多个阶段指令的序列；stages部分是管道描述的大部分工作将被放置的地方。
- en: Pipeline Syntax documentation
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道语法文档
- en: If you are keen to read more about the Pipeline Syntax, then check out the documentation
    ([https://jenkins.io/doc/book/pipeline/syntax/](https://jenkins.io/doc/book/pipeline/syntax/)).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣了解更多关于管道语法的信息，请查看文档([https://jenkins.io/doc/book/pipeline/syntax/](https://jenkins.io/doc/book/pipeline/syntax/))。
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter discussed how to get set up using the Jenkins Blue Ocean view in
    an existing Jenkins instance and how to set up the Blue Ocean view by using Docker.
    We looked at many different Jenkins Blue Ocean views and discussed some of the
    differences between them and the Jenkins Classic view. We also discussed the Pipeline
    Syntax and the Jenkinsfile. The next chapter will go over the installation and
    basic usage of Travis CI.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了如何在现有的Jenkins实例中使用Jenkins Blue Ocean视图以及如何使用Docker设置Blue Ocean视图。我们看了许多不同的Jenkins
    Blue Ocean视图，并讨论了它们与Jenkins经典视图之间的一些区别。我们还讨论了管道语法和Jenkinsfile。下一章将介绍Travis CI的安装和基本用法。
- en: Questions
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: If you install Jenkins via Docker, can you use the Blue Ocean view?
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您通过Docker安装Jenkins，您可以使用Blue Ocean视图吗？
- en: Why is it useful to use the Pipeline Editor in the Blue Ocean view?
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Blue Ocean视图中使用管道编辑器有什么用？
- en: What are some differences between the Jenkins Classic view and the Blue Ocean
    view?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins经典视图和Blue Ocean视图之间有哪些区别？
- en: Can you look at each stage of a pipeline in detail?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您能详细查看管道的每个阶段吗？
- en: Can the Blue Ocean view handle administrative tasks in Jenkins?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Blue Ocean视图能处理Jenkins中的管理任务吗？
- en: What is the stages syntax for?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阶段语法是用来做什么的？
- en: Does the Declarative Pipeline syntax need to be wrapped in pipeline blocks?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明性管道语法需要包装在管道块中吗？
- en: Further reading
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Please check out the book *Extending Jenkins* ([https://www.amazon.com/dp/B015CYBP2A](https://www.amazon.com/dp/B015CYBP2A)) from
    *Packt Publishing*, to learn more about Jenkins plugins.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看*Packt Publishing*的书籍*扩展Jenkins*([https://www.amazon.com/dp/B015CYBP2A](https://www.amazon.com/dp/B015CYBP2A))，以了解更多关于Jenkins插件的信息。
