- en: Travis CI CLI Commands and Automation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI CLI命令和自动化
- en: In the previous chapter, we showed you how to configure Travis CI in a software
    project and explained the basics of how to use Travis CI. This chapter will help
    you get Travis CLI installed on your operating system and we will go over all
    the different types of commands in Travis CI, such as the general API commands,
    repository commands, and more. We will go over the different options that the
    CLI commands can use and we will also go over the meaning of each command in detail.
    We will also take a look at working with the Travis API directly by using our
    access token and the curl REST client. We will briefly look at the Travis Pro
    and Enterprise versions as well.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们向您展示了如何在软件项目中配置Travis CI，并解释了如何使用Travis CI的基础知识。本章将帮助您在操作系统上安装Travis
    CLI，并且我们将介绍Travis CI中所有不同类型的命令，例如一般API命令，存储库命令等。我们将介绍CLI命令可以使用的不同选项，并且我们还将详细介绍每个命令的含义。我们还将通过使用我们的访问令牌和curl
    REST客户端直接查看使用Travis API。我们将简要介绍Travis Pro和Enterprise版本。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Travis CLI installation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis CLI安装
- en: Travis CLI commands
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis CLI命令
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter will require some basic Unix programming skills and knowledge about
    using a command-line terminal application. If you are in a Windows OS then consider
    using either the Command Prompt or the PowerShell application. If you are on the
    macOS operating system then use the Terminal application that is installed for
    you by default. If you are using Linux, then you should already have a Terminal
    installed or available.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将需要一些基本的Unix编程技能和关于使用命令行终端应用程序的知识。如果您使用的是Windows操作系统，则考虑使用命令提示符或PowerShell应用程序。如果您使用的是macOS操作系统，则使用默认安装的终端应用程序。如果您使用的是Linux，则应该已经安装或可用终端。
- en: Travis CLI installation
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CLI安装
- en: The first prerequisite to install Travis CLI is to have Ruby ([https://www.ruby-lang.org/en/documentation/installation/](https://www.ruby-lang.org/en/documentation/installation/))
    installed on your OS and make sure that it is version 1.9.3 or greater.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Travis CLI的第一个先决条件是在您的操作系统上安装Ruby（[https://www.ruby-lang.org/en/documentation/installation/](https://www.ruby-lang.org/en/documentation/installation/)），并确保它是1.9.3或更高版本。
- en: 'You can check that you have Ruby installed by running the following command
    in a command shell or Terminal:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在命令行或终端中运行以下命令来检查是否已安装Ruby：
- en: '![](assets/d20c4bda-fc0f-40c4-8f63-3e80b7c71e0a.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d20c4bda-fc0f-40c4-8f63-3e80b7c71e0a.png)'
- en: Windows installation
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows安装
- en: The Travis CLI user documentation at [https://github.com/travis-ci/travis.rb#windows](https://github.com/travis-ci/travis.rb#windows) recommends
    that you use the RubyInstaller ([http://rubyinstaller.org/](http://rubyinstaller.org/))
    to install the latest version of Ruby on the Windows OS.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CLI用户文档在[https://github.com/travis-ci/travis.rb#windows](https://github.com/travis-ci/travis.rb#windows)上建议您使用RubyInstaller
    ([http://rubyinstaller.org/](http://rubyinstaller.org/))在Windows操作系统上安装最新版本的Ruby。
- en: We need to pick Ruby Devkit version 2.5.1 at the RubyInstaller download site and
    then make sure to accept the license agreement and then choose the appropriate
    options for the installation. Make sure to install the development toolchain.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在RubyInstaller下载站点上选择Ruby Devkit版本2.5.1，然后确保接受许可协议，然后选择适当的安装选项。确保安装开发工具链。
- en: 'When the installer window closes, a Command Prompt will open and you will need
    to pick an option; you can just hit enter to install all three options on your
    system. The installation process could take a while to finish. Mine took about
    20 minutes to update GPG keys and to install other dependencies required for the
    Ruby programming language:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当安装程序窗口关闭时，将打开一个命令提示符，您需要选择一个选项；您可以只需按Enter键在系统上安装所有三个选项。安装过程可能需要一段时间才能完成。我的安装大约花了20分钟来更新GPG密钥并安装Ruby编程语言所需的其他依赖项：
- en: '![](assets/7766af67-a7d0-4be3-8ef7-627edb9fd2ff.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7766af67-a7d0-4be3-8ef7-627edb9fd2ff.png)'
- en: 'Here that we have Ruby version 2.5.1 installed on our system as we would expect:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已经在系统上安装了Ruby版本2.5.1，正如我们所期望的那样：
- en: '![](assets/9b7f55af-bda2-49d6-b796-d202e8b8869f.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9b7f55af-bda2-49d6-b796-d202e8b8869f.png)'
- en: 'In this step, we install Travis RubyGems in the Windows Command Prompt:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们在Windows命令提示符中安装Travis RubyGems：
- en: '![](assets/dc833258-5274-4751-8171-7754d1b94366.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dc833258-5274-4751-8171-7754d1b94366.png)'
- en: 'In this last step, we verify that Travis CLI RubyGem is installed on our system;
    it reports version `1.8.8`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一步中，我们验证Travis CLI RubyGem是否已安装在我们的系统上；它报告版本`1.8.8`：
- en: '![](assets/665fffd6-7924-45eb-bc27-ab5d5e352446.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/665fffd6-7924-45eb-bc27-ab5d5e352446.png)'
- en: Linux installation
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux安装
- en: 'The Linux OS has multiple different package managers, so how you install Ruby
    on your system is dependent on your particular Linux OS. We will look at installing
    Ruby and Travis CLI on Ubuntu 14.04 in a DigitalOcean server:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Linux操作系统有多个不同的软件包管理器，因此如何在系统上安装Ruby取决于您的特定Linux操作系统。我们将在DigitalOcean服务器上的Ubuntu
    14.04上安装Ruby和Travis CLI：
- en: 'To install Ruby on Ubuntu, run the following commands:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Ubuntu上安装Ruby，请运行以下命令：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, confirm that Ruby is installed by running the following command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过运行以下命令确认Ruby已安装：
- en: '![](assets/65b89a7c-54bb-46c1-8915-eb0ea35dbf30.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/65b89a7c-54bb-46c1-8915-eb0ea35dbf30.png)'
- en: 'Next we need to install the Travis CLI RubyGem with the following command:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要使用以下命令安装Travis CLI RubyGem：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The last step is to check that Travis CLI is installed with the following command:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是使用以下命令检查Travis CLI是否已安装：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: macOS installation
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS安装
- en: 'You need to install the Xcode Command Line tools, which you can do so with
    the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装Xcode命令行工具，可以使用以下命令来执行：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you already have the Xcode Command Line tools installed, you will see the
    following information displayed in the Terminal: ![](assets/7a29872c-1a87-4152-8ef3-250a95119732.png)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经安装了Xcode命令行工具，则在终端中会显示以下信息：![](assets/7a29872c-1a87-4152-8ef3-250a95119732.png)
- en: 'Ruby comes preinstalled on current macOS operating system, so you only need
    to run the following command to install Travis CLI:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Ruby已预安装在当前的macOS操作系统上，因此您只需要运行以下命令来安装Travis CLI：
- en: '![](assets/9cb098a4-806a-4061-abd3-ac777451f673.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9cb098a4-806a-4061-abd3-ac777451f673.png)'
- en: Here I used `sudo` because I needed elevated administrator privileges to install
    RubyGem.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我使用了`sudo`，因为我需要提升的管理员权限来安装RubyGem。
- en: 'You will know that Travis CLI is installed if you see this message in your
    Terminal:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在终端中看到此消息，您将知道Travis CLI已安装：
- en: '![](assets/3c896c99-907b-4888-b68a-00cf5baeddbd.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3c896c99-907b-4888-b68a-00cf5baeddbd.png)'
- en: Here that I am using Travis CLI version `1.8.8` but your particular version
    could be different.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我使用的是Travis CLI版本`1.8.8`，但您的特定版本可能不同。
- en: Travis CLI commands
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CLI命令
- en: 'The Travis CLI is fully featured, with the Travis API ([https://github.com/travis-ci/travis-api](https://github.com/travis-ci/travis-api))
    in GitHub and has CLI commands that come in the following three different forms:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CLI功能齐全，与GitHub中的Travis API（[https://github.com/travis-ci/travis-api](https://github.com/travis-ci/travis-api)）一起使用，并且具有以下三种不同形式的CLI命令：
- en: '**Non-API commands**:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非API命令**：'
- en: Non-API commands documentation ([https://github.com/travis-ci/travis.rb#non-api-commands](https://github.com/travis-ci/travis.rb#non-api-commands))
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非API命令文档（[https://github.com/travis-ci/travis.rb#non-api-commands](https://github.com/travis-ci/travis.rb#non-api-commands)）
- en: These commands include `help` and `version` and do not directly hit the Travis
    CI API
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些命令包括`help`和`version`，不直接命中Travis CI API
- en: '**General API commands**:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常规API命令**：'
- en: General API commands documentation ([https://github.com/travis-ci/travis.rb#general-api-commands](https://github.com/travis-ci/travis.rb#general-api-commands))
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常规API命令文档 ([https://github.com/travis-ci/travis.rb#general-api-commands](https://github.com/travis-ci/travis.rb#general-api-commands))
- en: These commands directly hit the Travis API and inherit all options from the
    non-API commands
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些命令直接命中Travis API，并继承非API命令的所有选项
- en: '**Repository commands**:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储库命令**：'
- en: Repository commands documentation ([https://github.com/travis-ci/travis.rb#repository-commands](https://github.com/travis-ci/travis.rb#repository-commands)[)](https://github.com/travis-ci/travis.rb#repository-commands)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储库命令文档（[https://github.com/travis-ci/travis.rb#repository-commands](https://github.com/travis-ci/travis.rb#repository-commands)[)](https://github.com/travis-ci/travis.rb#repository-commands)
- en: These commands have all the options that General API commands have and additionally
    you can specify the repo owner/name to talk to
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些命令具有常规API命令的所有选项，另外您可以指定要通信的repo所有者/名称
- en: The Travis CLI library is written in the Ruby programming language and if you
    want to directly interface with it, be prepared to read more about in the *Ruby
    Library* section at GitHub ([https://github.com/travis-ci/travis.rb#ruby-library](https://github.com/travis-ci/travis.rb#ruby-library)).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CLI库是用Ruby编程语言编写的，如果您想直接与其交互，请准备在GitHub的*Ruby Library*部分阅读更多内容（[https://github.com/travis-ci/travis.rb#ruby-library](https://github.com/travis-ci/travis.rb#ruby-library)）。
- en: We will be using the `packtci` GitHub ([https://github.com/packtci](https://github.com/packtci))
    user that we created in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml),
    *Installation and Basics of Travis CI* in *Creating a GitHub account* section
    and the `packtci` Travis CI account that we created in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml), *Installation
    and Basics of Travis CI* in *Creating a Travis CI account* section.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们在[第9章](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml)中创建的`packtci` GitHub（[https://github.com/packtci](https://github.com/packtci)）用户，在*创建GitHub帐户*部分创建的`packtci`
    Travis CI帐户。
- en: Non-API commands
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非API命令
- en: The non-API Travis CLI commands include the `help` and the `version` commands.
    These commands do not directly hit the Travis API but instead print out useful
    information about the Travis CLI.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 非API Travis CLI命令包括`help`和`version`命令。这些命令不直接命中Travis API，而是打印有关Travis CLI的有用信息。
- en: Printing help information
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印帮助信息
- en: The `help` command will display the arguments and options that a particular
    command takes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`help`命令将显示特定命令接受的参数和选项。'
- en: 'In the following screenshot, we run the `travis help` command in a command-line
    Terminal:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们在命令行终端中运行`travis help`命令：
- en: '![](assets/d6f4f2af-d978-494b-bbb2-926072eca5a8.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d6f4f2af-d978-494b-bbb2-926072eca5a8.png)'
- en: If you want to get help on a particular command, then you simply need to use `travis
    help COMMAND`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想获取特定命令的帮助，只需使用`travis help COMMAND`。
- en: 'The following is a screenshot with more information about the `whoami` command
    in Travis:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是有关Travis中`whoami`命令的更多信息的截图：
- en: '![](assets/a5094366-ae34-418c-bb24-5501700fb329.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a5094366-ae34-418c-bb24-5501700fb329.png)'
- en: Printing version information
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印版本信息
- en: 'The `version` command displays the current Travis CLI client that is installed
    on the system. The following screenshot displays the current client version of
    `1.8.8` for Travis CLI:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`version`命令显示安装在系统上的当前Travis CLI客户端。以下截图显示了Travis CLI的当前客户端版本为`1.8.8`：'
- en: '![](assets/c87c2e98-44eb-4d8f-beef-ff3b7be2a221.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c87c2e98-44eb-4d8f-beef-ff3b7be2a221.png)'
- en: API commands
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API命令
- en: The API commands directly hit the Travis API, and some require that you have
    a proper access token which you can get by using the `travis login` command.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: API命令直接命中Travis API，有些需要您拥有适当的访问令牌，您可以使用`travis login`命令获取。
- en: Logging in to Travis CI
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录到Travis CI
- en: The `login` command is typically the first command that you will need to use
    in order to work with the Travis API as it authenticates you with the Travis API.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`login`命令通常是您需要使用的第一个命令，以便与Travis API一起工作，因为它会对您进行身份验证。'
- en: The `login` command will ask you for your GitHub username and password, but
    does not send these credentials to Travis CI. Instead it uses your username and
    password to create a GitHub API token and then shows the token to Travis API and
    then run a series of checks to make sure that you are who you say you are. It
    then gives you an access token for the Travis API in return, and finally the Travis
    Client will delete the GitHub token again. All of these steps occur under the
    hood once you successfully run the `travis login` command.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`login`命令将要求您输入GitHub用户名和密码，但不会将这些凭据发送到Travis CI。相反，它使用您的用户名和密码创建一个GitHub API令牌，然后将令牌显示给Travis
    API，然后运行一系列检查以确保您是您所说的人。然后它会给您一个Travis API的访问令牌，并最终Travis客户端将再次删除GitHub令牌。只要您成功运行`travis
    login`命令，所有这些步骤都会在幕后发生。'
- en: 'The following screenshot shows where we try to run the `travis accounts` commands,
    and it notifies us that we we need to be logged in:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示我们尝试运行`travis accounts`命令，并通知我们需要登录：
- en: '![](assets/cb3cd9b6-07f7-4e23-992c-3b9a731949c0.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cb3cd9b6-07f7-4e23-992c-3b9a731949c0.png)'
- en: 'In the following screenshot, we run the `travis login` command and provide
    the GitHub username and password:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们运行`travis login`命令并提供GitHub用户名和密码：
- en: '![](assets/47170f74-277e-456e-be4a-514ba14517c1.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/47170f74-277e-456e-be4a-514ba14517c1.png)'
- en: Now we have successfully logged in to the Travis CI system and Travis CI has
    issued us an access token.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已成功登录到Travis CI系统，并且Travis CI已经为我们发放了一个访问令牌。
- en: Displaying the current access token
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示当前访问令牌
- en: 'The `token` command is useful to display the current access token. The screenshot
    has an access token that has been greyed out for security purposes:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`token`命令用于显示当前访问令牌。截图中的访问令牌已经被隐藏，以确保安全：'
- en: '![](assets/d3b53b5e-8ac6-4d61-a37d-5caeed257e4f.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d3b53b5e-8ac6-4d61-a37d-5caeed257e4f.png)'
- en: Logging out of Travis CI
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注销Travis CI
- en: The `logout` command will log you out of Travis CI and remove your access token.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`logout`命令将注销您在Travis CI中的登录并删除您的访问令牌。'
- en: 'Notice in the following screenshot that after we initiated the `travis logout`
    command, the `travis token` command shows that we need to log back in:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在下面的截图中，我们发出`travis logout`命令后，`travis token`命令显示我们需要重新登录：
- en: '![](assets/4939ff78-067a-4a0a-acf8-5309875d17d9.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4939ff78-067a-4a0a-acf8-5309875d17d9.png)'
- en: 'We will need to log back in to Travis CI in order to get a token again. In
    the following screenshot, we log back in to Travis and then get another access
    token so that we can issue commands to Travis API:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要重新登录到Travis CI以再次获取令牌。在下面的截图中，我们重新登录到Travis，然后获取另一个访问令牌，以便我们可以向Travis API发出命令：
- en: '![](assets/15d824a6-6bda-49f8-ad93-1d12a5dcc8cb.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/15d824a6-6bda-49f8-ad93-1d12a5dcc8cb.png)'
- en: Displaying accounts information
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示帐户信息
- en: 'The `accounts` command is used to list all the accounts that you can set up
    repositories for. Remember that when we ran this command earlier, Travis informed
    us that we needed to log in to Travis to execute this command. In the following
    screenshot, Travis informs us that we are subscribed to four different repositories
    in Travis:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`accounts`命令用于列出您可以为其设置存储库的所有帐户。请记住，当我们之前运行此命令时，Travis通知我们需要登录到Travis才能执行此命令。在下面的截图中，Travis通知我们我们已经订阅了Travis中的四个不同存储库：'
- en: '![](assets/cd2383dd-d15a-4a0c-aadf-bc41e8fa6a53.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cd2383dd-d15a-4a0c-aadf-bc41e8fa6a53.png)'
- en: Displaying help information for Travis commands
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示Travis命令的帮助信息
- en: 'Remember that we can find all the options for a particular command in Travis
    by running the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们可以通过运行以下命令在Travis中找到特定命令的所有选项：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the following screenshot, we run the `help` command for the `accounts` command:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们为`accounts`命令运行`help`命令：
- en: '![](assets/b295ee68-e062-4e08-8405-3e9857b3395d.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b295ee68-e062-4e08-8405-3e9857b3395d.png)'
- en: 'There is an option called `--debug` which we will use to debug the HTTP request
    made to the Travis API. In the following screenshot we get additional information
    about the request made to Travis, such as the endpoint hit which is `GET "accounts/"
    {:all=>true}` as well as other information:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为`--debug`的选项，我们将使用它来调试发送到Travis API的HTTP请求。在下面的截图中，我们获得了有关发送到Travis的请求的其他信息，例如命中的端点是`GET
    "accounts/" {:all=>true}`以及其他信息：
- en: '![](assets/a0b8487c-95a3-4762-8351-86f788da111a.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a0b8487c-95a3-4762-8351-86f788da111a.png)'
- en: Interactive console session
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互式控制台会话
- en: 'The `console` command drops you into an interactive Ruby session with all the entities imported
    into global namespaces, as well as making sure that you are authenticated with
    Travis and if you are setting correct. In the following screenshot I pressed *Tab*
    and got auto-completion in the console session:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`console`命令将您放入一个交互式的Ruby会话中，其中所有实体都被导入到全局命名空间中，并确保您已经通过Travis进行了身份验证，如果您正在设置正确。在下面的截图中，我按下了*Tab*并在控制台会话中获得了自动完成：'
- en: '![](assets/4074384a-e685-4e51-99bb-6f13f9bbebc1.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4074384a-e685-4e51-99bb-6f13f9bbebc1.png)'
- en: Also notice that the current logged-in user is `packtci`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，当前登录的用户是`packtci`。
- en: Printing API endpoint Information
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印API端点信息
- en: 'The `endpoint` command prints out the API endpoint that we are using. Notice
    that we are using the free and open source version of Travis API in the screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`endpoint`命令打印出我们正在使用的API端点。请注意，在截图中，我们正在使用Travis API的免费开源版本：'
- en: '![](assets/d6d32fd9-c7f5-4cb6-af73-9f9a2347784c.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d6d32fd9-c7f5-4cb6-af73-9f9a2347784c.png)'
- en: The PRO version of Travis uses the following endpoint at [https://api.travis-ci.com/](https://api.travis-ci.com/).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Travis的PRO版本使用以下端点：[https://api.travis-ci.com/](https://api.travis-ci.com/)。
- en: Conducting live monitoring with all the CI builds that are currently running
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行实时监控，查看当前正在运行的所有CI构建
- en: 'The `travis monitor` command will conduct live monitoring for all the CI builds
    in the logged-in account. In the following screenshot, there is no activity occurring
    in Travis CI at the moment:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`travis monitor`命令将对已登录帐户中的所有CI构建进行实时监控。在下面的截图中，Travis CI目前没有任何活动：'
- en: '![](assets/4fdf1d4f-4dd6-49b0-8147-a67bbfea8d68.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4fdf1d4f-4dd6-49b0-8147-a67bbfea8d68.png)'
- en: 'Let us add a unit test case for the `puppeteer-headless-chrome-travis-yml-script`
    repo ([https://github.com/packtci/puppeteer-headless-chrome-travis-yml-script](https://github.com/packtci/puppeteer-headless-chrome-travis-yml-script)) and
    then push this change into the GitHub version control system. In the the following
    screenshot, we push up a change into the repository:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为`puppeteer-headless-chrome-travis-yml-script`仓库（[https://github.com/packtci/puppeteer-headless-chrome-travis-yml-script](https://github.com/packtci/puppeteer-headless-chrome-travis-yml-script)）添加一个单元测试用例，然后将此更改推送到GitHub版本控制系统。在以下截图中，我们将更改推送到存储库中：
- en: '![](assets/3e1c672c-2575-4f8e-9519-f4a620372b9b.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3e1c672c-2575-4f8e-9519-f4a620372b9b.png)'
- en: 'Now if we go back into the Terminal session where the Travis monitor is running,
    we will see that a build has been initiated and then it is passed:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们回到Travis监视器正在运行的终端会话中，我们将看到已启动构建，然后它被传递：
- en: '![](assets/0ed9bce6-6a63-4f99-943b-03d75003ddca.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0ed9bce6-6a63-4f99-943b-03d75003ddca.png)'
- en: We have a build job of `2.1`; in the `.travis.yml` file we did not specify any
    other build jobs so Travis CI bundled all of the build jobs into one build job.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个`2.1`的构建作业；在`.travis.yml`文件中，我们没有指定任何其他构建作业，因此Travis CI将所有构建作业捆绑到一个构建作业中。
- en: You can read more about Travis CI build stages at [https://docs.travis-ci.com/user/build-stages/](https://docs.travis-ci.com/user/build-stages/)[.](https://docs.travis-ci.com/user/build-stages/)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此网址阅读有关Travis CI构建阶段的更多信息：[https://docs.travis-ci.com/user/build-stages/](https://docs.travis-ci.com/user/build-stages/)。
- en: Initiating a Travis CI API call
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发起Travis CI API调用
- en: 'You can initiate a direct API call to the Travis API by using the `travis raw
    RESOURCE` command. Remember that we can always use the `travis help COMMAND` to
    find out how to use a particular command in Travis CLI. In the following screenshot,
    we run the `help` command for the `raw` command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用`travis raw RESOURCE`命令直接对Travis API进行API调用。请记住，我们始终可以使用`travis help
    COMMAND`来查找如何在Travis CLI中使用特定命令。在以下截图中，我们对`raw`命令运行`help`命令：
- en: '![](assets/98ac6647-e5ba-4ead-ac0d-17b48a6ee340.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/98ac6647-e5ba-4ead-ac0d-17b48a6ee340.png)'
- en: 'Now that we know how to run the `raw` command, let us issue a request to this
    endpoint in the Travis API:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何运行`raw`命令，让我们向Travis API的此端点发出请求：
- en: '[PRE5]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you want to see the developer documentation for the Travis API, then you
    need to go to the following URL at [https://developer.travis-ci.com/](https://developer.travis-ci.com/).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看Travis API的开发人员文档，则需要转到以下网址：[https://developer.travis-ci.com/](https://developer.travis-ci.com/)。
- en: 'Make sure to log in and authorize Travis CI as a third-party application for
    GitHub. In the following screenshot, we authorize Travis CI for the `packtci`
    GitHub user:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 确保登录并授权Travis CI作为GitHub的第三方应用程序。在以下截图中，我们为`packtci` GitHub用户授权Travis CI：
- en: '![](assets/6c0e1c89-1cd2-4474-985c-3b059cdd86e8.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6c0e1c89-1cd2-4474-985c-3b059cdd86e8.png)'
- en: 'You can then view the API documentation for Travis CI at the URL: [https://developer.travis-ci.com/](https://developer.travis-ci.com/).
    In the following screenshot, we make a GET request to the `/config` endpoint and
    use the following two different options in the `raw` command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以在以下网址查看Travis CI的API文档：[https://developer.travis-ci.com/](https://developer.travis-ci.com/)。在以下截图中，我们对`/config`端点进行GET请求，并在`raw`命令中使用以下两个不同的选项：
- en: '`--json`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--json`'
- en: '`--debug`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--debug`'
- en: '![](assets/e1104b0b-07e6-4e83-b292-ffe2ef9b6f7b.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e1104b0b-07e6-4e83-b292-ffe2ef9b6f7b.png)'
- en: 'At some point in the near future, the Travis API plans on deprecating the V2
    API and only the V3 API will be officially supported. You can use the API Explorer
    to make REST calls into the V3 API:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在不久的将来，Travis API计划废弃V2 API，只有V3 API将得到官方支持。您可以使用API资源浏览器对V3 API进行REST调用：
- en: '[PRE6]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the following screenshot we make a REST call to the following endpoint using
    the `API Explorer`:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们使用`API资源浏览器`对以下端点进行REST调用：
- en: '![](assets/2d9893e8-2c6c-4e46-af9a-38b67486bccd.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2d9893e8-2c6c-4e46-af9a-38b67486bccd.png)'
- en: 'You can go to the API Explorer at this url: [https://developer.travis-ci.com/explore/](https://developer.travis-ci.com/explore/).
    Then you input the resource in the input box that looks like this:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以转到此网址的API资源浏览器：[https://developer.travis-ci.com/explore/](https://developer.travis-ci.com/explore/)。然后在输入框中输入资源，看起来像这样：
- en: '![](assets/3d8b38d2-ccc7-46eb-9f27-85816c89bdae.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3d8b38d2-ccc7-46eb-9f27-85816c89bdae.png)'
- en: API V3 REST call with curl
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用curl进行API V3 REST调用
- en: 'We will issue the `travis token` command so that we can copy the access token
    to the system clipboard:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将发出`travis token`命令，以便我们可以将访问令牌复制到系统剪贴板：
- en: '[PRE7]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next we will run the `travis endpoint` command and copy the URL:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将运行`travis endpoint`命令并复制URL：
- en: '[PRE8]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We will make a `curl` request in the following manner:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以以下方式发出`curl`请求：
- en: '[PRE9]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Notice that in this curl request we used the `travis token` cli command that
    will return a valid token for this particular HTTP Header. This HTTP request will
    return a JSON response payload which we will use to copy a particular repo ID to
    make the following REST call to find all the environment variables for the `functional-summer`
    repo ([https://github.com/packtci/functional-summer](https://github.com/packtci/functional-summer)):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在此curl请求中，我们使用了`travis token`cli命令，该命令将返回此特定HTTP标头的有效令牌。此HTTP请求将返回一个JSON响应有效负载，我们将使用它来复制特定的存储库ID，以便进行以下REST调用以查找`functional-summer`存储库的所有环境变量（[https://github.com/packtci/functional-summer](https://github.com/packtci/functional-summer)）：
- en: '[PRE10]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In this `GET` request, we get all the environment variables from the `functional-summer`
    repository and receive a JSON response like the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在此`GET`请求中，我们从`functional-summer`存储库获取所有环境变量，并收到以下JSON响应：
- en: '[PRE11]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let us make a `POST` request to add an environment variable to the `functional-summer`
    repo:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们发出`POST`请求，向`functional-summer`存储库添加一个环境变量：
- en: '[PRE12]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now when we make a `GET` request for the environment variables, we see that
    we have an environment variable called `MOVIE` that has been set:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们对环境变量进行`GET`请求时，我们看到已设置名为`MOVIE`的环境变量：
- en: '[PRE13]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Printing out important system configuration information
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印重要的系统配置信息
- en: 'The `report` command prints out important system configuration information,
    as you can see in the following screenshot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`report`命令打印出重要的系统配置信息，如下截图所示：'
- en: '![](assets/11891700-6972-497f-a649-11179687e989.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/11891700-6972-497f-a649-11179687e989.png)'
- en: Listing all the repositories that the currently logged in user has access to
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出当前登录用户有权限访问的所有存储库
- en: 'The `repos` command will list repositories whether they are active or not and
    has a variety of options that can be used. In the following screenshot, we used
    the `-m` option to match all the repositories for the `packtci` GitHub user:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`repos`命令将列出存储库，无论它们是活动的还是不活动的，并且有各种可以使用的选项。在下面的截图中，我们使用了`-m`选项来匹配`packtci`
    GitHub用户的所有存储库：'
- en: '![](assets/a12f8524-e533-4846-a541-ccc9ad9d8d64.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a12f8524-e533-4846-a541-ccc9ad9d8d64.png)'
- en: Initiating synchronization with Travis CI for any new or outdated repositories
    in GitHub
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GitHub中为任何新的或过时的存储库与Travis CI进行同步
- en: 'The `sync` command helps you update information about users and any new or
    modified repositories in GitHub. Let us add another repository to GitHub called
    `functional-patterns` ([https://github.com/packtci/functional-patterns](https://github.com/packtci/functional-patterns)).
    In the following screenshot, we use the `sync` command so that Travis CI becomes
    aware of the new repository and then use the `repos` command to confirm that it
    shows up in the list of repos we have access to:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`sync`命令帮助您更新GitHub用户的信息以及任何新的或修改的存储库。让我们在GitHub中添加另一个存储库，名为`functional-patterns`（[https://github.com/packtci/functional-patterns](https://github.com/packtci/functional-patterns)）。在下面的截图中，我们使用`sync`命令，以便Travis
    CI意识到新存储库，然后使用`repos`命令确认它显示在我们可以访问的存储库列表中：'
- en: '![](assets/b8d14d83-b528-44d4-8440-0dce1389832c.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b8d14d83-b528-44d4-8440-0dce1389832c.png)'
- en: The `sync` command can replace the step we took in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml),
    *Installation and Basics of Travis CI*, where we clicked the Sync account button
    to synchronize all the repository information in our account.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`sync`命令可以替换我们在[第9章](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml)中所采取的步骤，即单击同步帐户按钮以同步我们帐户中的所有存储库信息。'
- en: lint - a Travis YML script
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: lint - 一个Travis YML脚本
- en: 'The `lint` command is very useful as it checks that you have the proper syntax
    in your Travis YML script. Let use create a Travis YML script in the `functional-patterns` repository
    ([https://github.com/packtci/functional-patterns](https://github.com/packtci/functional-patterns))
    that we just added to GitHub. We will add the following entry for the `.travis.yml`
    script:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`lint`命令非常有用，因为它检查您的Travis YML脚本中是否有正确的语法。让我们在`functional-patterns`存储库（[https://github.com/packtci/functional-patterns](https://github.com/packtci/functional-patterns)）中创建一个Travis
    YML脚本。我们将为`.travis.yml`脚本添加以下条目：'
- en: '[PRE14]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let us now run the `lint` command to check the syntax. In the following screenshot,
    Travis informs us that we are using an illegal value of `blah` and that it will
    default to `ruby` as the language:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们运行`lint`命令来检查语法。在下面的截图中，Travis通知我们正在使用`blah`的非法值，并且它将默认为`ruby`作为语言：
- en: '![](assets/1eb10fde-5937-424e-b83b-0d389dff543a.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1eb10fde-5937-424e-b83b-0d389dff543a.png)'
- en: 'Let us fix the language entry to use Node.js and then run the `lint` command
    again:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修复语言条目以使用Node.js，然后再次运行`lint`命令：
- en: '![](assets/09e0846d-0a6e-486c-9ad3-ea8155abb4ae.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/09e0846d-0a6e-486c-9ad3-ea8155abb4ae.png)'
- en: The `lint` command reports that we now have valid syntax in our `.travis.yml`
    script.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`lint`命令报告我们现在在`.travis.yml`脚本中有有效的语法。'
- en: Obtaining current build information for the organization or user
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取组织或用户的当前构建信息
- en: 'The `whatsup` command lets you see activity that has recently occurred in Travis.
    When we ran this `whatsup` command, it gave us the most recent activity in Travis
    CI:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`whatsup`命令让您查看最近在Travis中发生的活动。当我们运行这个`whatsup`命令时，它给了我们Travis CI中最近的活动：'
- en: '![](assets/54fa5d69-f491-47e8-8e66-20de3d90ffb2.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/54fa5d69-f491-47e8-8e66-20de3d90ffb2.png)'
- en: In the `packtci` Travis account, there is only one user but you can have many
    users in a Travis CI account, and so it may be more useful to see only your repositories
    with the `whatsup` command. Remember that we can use the `help` command to find
    out more options for a particular command. As an exercise, use the `help` command
    to find the options to show only your own repositories.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在`packtci` Travis帐户中，只有一个用户，但是您可以在Travis CI帐户中拥有许多用户，因此只查看您的存储库可能更有用。记住，我们可以使用`help`命令查找特定命令的更多选项。作为练习，使用`help`命令查找仅显示您自己的存储库的选项。
- en: Finding the currently logged-in user information
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找当前登录用户信息
- en: 'The `whoami` command is useful to find out the currently logged-in user for
    Travis CI account:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`whoami`命令对于查找Travis CI帐户当前登录的用户非常有用：'
- en: '![](assets/970c8631-76a8-4dff-9ed4-9ff6eeeee86c.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/970c8631-76a8-4dff-9ed4-9ff6eeeee86c.png)'
- en: The `whoami` command reports `packtci` as we would expect.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`whoami`命令报告`packtci`，正如我们所期望的那样。'
- en: Repository commands
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储库命令
- en: The repository commands have all the options that the API commands have and
    additionally you can specify the specific repository that you want to work with
    using the `--repo owner/name` option.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 存储库命令具有API命令的所有选项，此外，您还可以使用`--repo owner/name`选项指定要使用的特定存储库。
- en: Displaying the most recent build information for each branch in Git version
    control
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示Git版本控制中每个分支的最新构建信息
- en: 'The `branches` command shows the most recent build information for each branch
    in version control:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`branches`命令显示版本控制中每个分支的最新构建信息：'
- en: '![](assets/9fae3d9e-b9b9-4f2b-a532-b38acb3b2c9e.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9fae3d9e-b9b9-4f2b-a532-b38acb3b2c9e.png)'
- en: There could be more branches shown when you run this command.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行此命令时，可能会显示更多的分支。
- en: Listing cache information for all the repositories
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出所有存储库的缓存信息
- en: 'The `cache` command can list all the caches in a repository:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`cache`命令可以列出存储库中的所有缓存：'
- en: '![](assets/982eaa9f-8935-4459-be66-641fe045438d.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/982eaa9f-8935-4459-be66-641fe045438d.png)'
- en: Deleting cache information for a given repository
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除给定存储库的缓存信息
- en: 'The `cache` command can also delete the caches in the repository if you use
    the `-d`, `--delete` option:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`cache`命令还可以删除存储库中的缓存，如果您使用`-d`、`--delete`选项：'
- en: '![](assets/296b04f3-b20f-4947-81c0-84bfadb1a737.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/296b04f3-b20f-4947-81c0-84bfadb1a737.png)'
- en: We received a warning message in red asking us for confirmation to delete the
    caches.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们收到了一条红色的警告消息，要求我们确认删除缓存。
- en: Enabling a repository in Travis CI
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Travis CI中启用存储库
- en: 'The `enable` command will activate Travis CI in your GitHub repository:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`enable`命令将在您的GitHub存储库中激活Travis CI：'
- en: '![](assets/63e34061-6bfa-455f-926d-7b717bac3823.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/63e34061-6bfa-455f-926d-7b717bac3823.png)'
- en: The `enable` command helps replace the manual step we took in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml), *Installation
    and Basics of Travis CI*, to activate a repository in Travis CI, where we clicked
    the slider button in the Travis web client to activate the repository.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`enable`命令有助于替换我们在[第9章](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml)中所采取的手动步骤，即激活Travis
    CI中的存储库，在那里我们在Travis web客户端中点击滑块按钮以激活存储库。'
- en: Disabling a repository in Travis CI
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Travis CI中禁用存储库
- en: 'The `disable` command will make the Travis CI in your GitHub repository inactive:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`disable`命令将使您的GitHub存储库中的Travis CI处于非活动状态：'
- en: '![](assets/a012e33c-82b9-4eef-a0a5-a43def2dcfdc.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a012e33c-82b9-4eef-a0a5-a43def2dcfdc.png)'
- en: Cancelling the latest build in Travis CI
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取消Travis CI中的最新构建
- en: 'Let us enable the `functional-patterns` repo with the following command:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下命令启用`functional-patterns`存储库：
- en: '[PRE15]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now let us push a commit to the repository by using the command:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用以下命令向存储库推送提交：
- en: '[PRE16]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The previous `git` command lets you reuse the previous `git commit` command
    that you used, but you will need to issue the following command:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的`git`命令允许您重用之前使用的`git commit`命令，但您需要发出以下命令：
- en: '[PRE17]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let us look at the current state of the repositories in Travis CI; it may take
    a while for the build to be officially created in Travis CI:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们查看Travis CI中存储库的当前状态；构建在Travis CI中正式创建可能需要一段时间：
- en: '![](assets/c7527ff6-74f0-4995-802d-8e461ee7362a.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c7527ff6-74f0-4995-802d-8e461ee7362a.png)'
- en: In the previous screenshot, we issue the `whatsup` command to see the current
    status of the builds and notice that `packtci/functional-patterns` started job
    number `1`. We then issued the `travis cancel` command and provided an argument
    of `1`. This was not completely necessary as this was the current build, so we
    could have just issued the `travis cancel` command. When we run the `travis whatsup`
    command, the build is canceled.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一张屏幕截图中，我们发出了`whatsup`命令来查看构建的当前状态，并注意到`packtci/functional-patterns`开始了作业编号`1`。然后我们发出了`travis
    cancel`命令，并提供了一个参数`1`。这并不完全必要，因为这是当前的构建，所以我们可以只发出`travis cancel`命令。当我们运行`travis
    whatsup`命令时，构建被取消。
- en: Encrypting environment variables or deployment keys
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密环境变量或部署密钥
- en: 'The `encrypt` command lets you encrypt secret values stored in environment
    variables and/or deployment keys that you don''t want to publicly expose:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`encrypt`命令允许您加密存储在环境变量和/或部署密钥中的秘密值，这些值您不希望公开显示：'
- en: '![](assets/dd03cf6a-4f90-4447-86ea-000887cdc70d.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dd03cf6a-4f90-4447-86ea-000887cdc70d.png)'
- en: Adding environment variables in Travis CI
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Travis CI中添加环境变量
- en: We will add this entry into our `.travis.yml` script in the `env` block. You
    can read more about using environment variables in Travis CI in this documentation
    at [https://docs.travis-ci.com/user/environment-variables](https://docs.travis-ci.com/user/environment-variables).
    In general, you can add environment variables by adding a block called `env` in
    your `.travis.yml` script.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在我们的`.travis.yml`脚本的`env`块中添加这个条目。您可以在[https://docs.travis-ci.com/user/environment-variables](https://docs.travis-ci.com/user/environment-variables)的文档中阅读有关在Travis
    CI中使用环境变量的更多信息。一般来说，您可以通过在您的`.travis.yml`脚本中添加一个名为`env`的块来添加环境变量。
- en: 'I have added a sample snippet in the `.travis.yml` script:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我在`.travis.yml`脚本中添加了一个示例片段：
- en: '[PRE18]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We added a public environment variable called `DB_URL` and a global variable
    by using the `global` block and then pasting the entry into it.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个名为`DB_URL`的公共环境变量，并使用`global`块添加了一个全局变量，然后将条目粘贴到其中。
- en: You can automatically add the entry by using the `--add` option if you want,
    although any comments you have in the `.travis.yml` script will be gone, as will
    the spacing, so be mindful of this when you run the `--add` option.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，您可以使用`--add`选项自动添加条目，尽管您在`.travis.yml`脚本中的任何注释都将消失，间距也将消失，因此在运行`--add`选项时要注意这一点。
- en: Encrypting a file
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密文件
- en: 'The `encrypt-file` command will encrypt an entire file using symmetric (AES-256)
    encryption and stores the secret in a file. Let us create a file called `secret.txt`
    and add the following entries into it:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`encrypt-file`命令将使用对称（AES-256）加密加密整个文件，并将秘密存储在文件中。让我们创建一个名为`secret.txt`的文件，并将以下条目添加到其中：'
- en: '[PRE19]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now let us encrypt our secret file:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们加密我们的秘密文件：
- en: '![](assets/67bb1e1a-38f5-4298-bf44-30ee8b1955cf.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/67bb1e1a-38f5-4298-bf44-30ee8b1955cf.png)'
- en: 'So now we will add this entry into our `.travis.yml` script:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们将把这个条目添加到我们的`.travis.yml`脚本中：
- en: '[PRE20]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: It can then decrypt the values in the secret text file for us.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它可以为我们解密秘密文本文件中的值。
- en: Listing environment information
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出环境信息
- en: 'The `env` command can list all the environment variables set for the repository:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`env`命令可以列出为存储库设置的所有环境变量：'
- en: '![](assets/18ddd3dd-ae1a-4afe-a596-c0c17ab796fc.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/18ddd3dd-ae1a-4afe-a596-c0c17ab796fc.png)'
- en: We don't have any environment variables set for this repository.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有为此存储库设置任何环境变量。
- en: Setting an environment variable
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境变量
- en: 'The `env` command can also set an environment variable from the repository:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`env`命令还可以从存储库中设置环境变量：'
- en: '![](assets/2659ed9e-4639-4f03-a5f7-1ea231eaf88f.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2659ed9e-4639-4f03-a5f7-1ea231eaf88f.png)'
- en: We set an environment variable of `API_URL` and that it shows up as an environment
    variable for the multiple languages repository now.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了一个名为`API_URL`的环境变量，并且它现在显示为多语言存储库的环境变量。
- en: Deleting an environment variable
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除环境变量
- en: 'The `env` command can also remove an environment variable from the repository:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`env`命令还可以从存储库中删除环境变量：'
- en: '![](assets/330adbc3-34a5-4966-9786-78af22a56f5a.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/330adbc3-34a5-4966-9786-78af22a56f5a.png)
- en: The `travis env` list command now reports that we don't have any environment
    variables set for the multiple-languages repository which is what we expect.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: “travis env”列表命令现在报告我们没有为多语言存储库设置任何环境变量，这是我们所期望的。
- en: Clearing out all environment variables
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清除所有环境变量
- en: 'The `env` command can be used to clear out all of the environment variables
    that have been set in the repository:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: “env”命令可用于清除存储库中设置的所有环境变量：
- en: '![](assets/5b11b397-cc21-4809-b2dc-c808c00e4f1b.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/5b11b397-cc21-4809-b2dc-c808c00e4f1b.png)
- en: List history information for recent builds
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列出最近构建的历史信息
- en: 'The `history` command displays a repositories build history:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: “history”命令显示存储库的构建历史：
- en: '![](assets/47f82048-ebfb-4bf8-8ed0-eb70efae4225.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/47f82048-ebfb-4bf8-8ed0-eb70efae4225.png)
- en: The `history` command will by default only display the last 10 builds, but you
    can limit or extend the number of builds by using the `--limit` option.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: “history”命令默认只显示最后10个构建，但您可以使用“--limit”选项来限制或扩展构建的数量。
- en: Initializing Travis CLI on a project
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在项目上初始化Travis CLI
- en: 'The `init` command will help you set up Travis CI in a project by generating
    a `.travis.yml` script for you. We have set up a new project in GitHub called
    `travis-init-command` ([https://github.com/packtci/travis-init-command](https://github.com/packtci/travis-init-command)).
    We will use the `init` command to set up Golang in this repository:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: “init”命令将帮助您通过为您生成一个`.travis.yml`脚本来在项目中设置Travis CI。我们在GitHub中设置了一个名为“travis-init-command”的新项目（[https://github.com/packtci/travis-init-command](https://github.com/packtci/travis-init-command)）。我们将使用“init”命令在此存储库中设置Golang：
- en: '![](assets/3e87decb-4ad6-4252-8847-0643b06a2c78.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/3e87decb-4ad6-4252-8847-0643b06a2c78.png)
- en: 'The steps in the process are as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程的步骤如下：
- en: The first step is to use the `sync` command so that Travis CI is aware of this
    new repository
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是使用“sync”命令，以便Travis CI知道这个新存储库
- en: Next we will enable this new repository in Travis CI
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将在Travis CI中启用这个新存储库。
- en: Next we will try to create a `.travis.yml` script with Golang, but notice that
    it is not recognized, so we try again with Go and it succeeds
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将尝试使用Golang创建一个`.travis.yml`脚本，但请注意它没有被识别，因此我们再次尝试使用Go，这次成功了
- en: Lastly, we print out the contents of the new file and notice that it set the
    language to Go and used two different versions of Go
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们打印出新文件的内容，并注意它将语言设置为Go，并使用了两个不同版本的Go
- en: Printing out CI build log information
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印CI构建日志信息
- en: 'The `logs` command will print out the contents of the Travis CI log for the
    repository and by default it will print out the first job of the latest build.
    Here, we run the `logs` command in the recent repository that we created; it won''t
    pass the CI build, however, since there aren''t any buildable Go files in the
    repository yet:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: “logs”命令将打印出存储库的Travis CI日志的内容，默认情况下它将打印出最新构建的第一个作业。在这里，我们在最近创建的存储库中运行“logs”命令；但是，它不会通过CI构建，因为存储库中还没有任何可构建的Go文件：
- en: '[PRE21]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Notice that the `build` failed, as we noted earlier, because there aren't any
    Go files to be built. The `logs` command can also be given a specific build number
    to run and you can also give them a specific branch to run. Run the `travis help
    logs` command for more options.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，正如我们之前注意到的那样，“build”失败了，因为没有任何Go文件可以构建。 “logs”命令也可以给出一个特定的构建编号来运行，您还可以给它们一个特定的分支来运行。运行“travis
    help logs”命令以获取更多选项。
- en: Opening the Travis web interface for the project
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开项目的Travis web界面
- en: 'The `open` command will open the repository in the Travis CI web client:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: “open”命令将在Travis CI web客户端中打开存储库：
- en: '[PRE22]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Running `travis open` in the `travis-init-command` repository ([https://github.com/packtci/travis-init-command](https://github.com/packtci/travis-init-command))
    will take us to the following URL at [https://travis-ci.org/packtci/travis-init-command](https://travis-ci.org/packtci/travis-init-command).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在“travis-init-command”存储库（[https://github.com/packtci/travis-init-command](https://github.com/packtci/travis-init-command)）中运行“travis
    open”将带我们转到以下URL [https://travis-ci.org/packtci/travis-init-command](https://travis-ci.org/packtci/travis-init-command)。
- en: You can use the `--print` option to print out the URL instead of opening it
    to the specific project view, as it does by default. Run the `travis help open`
    command for more options.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用“--print”选项来打印出URL，而不是默认情况下打开到特定项目视图。运行“travis help open”命令以获取更多选项。
- en: Printing out public key information for the repository
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印存储库的公钥信息
- en: 'The `pubkey` command will print out the public SSH key for the repository:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: “pubkey”命令将打印出存储库的公共SSH密钥：
- en: '![](assets/5208a514-128f-4572-9509-3c09b2157d3a.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/5208a514-128f-4572-9509-3c09b2157d3a.png)
- en: 'For security reasons, I removed the public key information. You can also display
    the key in different formats. For example, if you use the `--pem` option your
    key will display like this:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全原因，我删除了公钥信息。您还可以以不同格式显示密钥。例如，如果您使用“--pem”选项，您的密钥将显示如下：
- en: '![](assets/b56b9ecb-27fe-4a3d-8024-ab79eb9bee4f.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/b56b9ecb-27fe-4a3d-8024-ab79eb9bee4f.png)
- en: 'Run the `travis help pubkey` command to show more options for this command:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 运行“travis help pubkey”命令以显示此命令的更多选项：
- en: '![](assets/3d27d584-4b6f-4166-ae8c-ae4111b159c5.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/3d27d584-4b6f-4166-ae8c-ae4111b159c5.png)
- en: Restarting the latest CI build in Travis CI
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Travis CI中重新启动最新的CI构建
- en: 'The `restart` command will restart the latest build:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: “restart”命令将重新启动最新的构建：
- en: '![](assets/fc36f25c-2600-4e08-8733-0783cba99bf4.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/fc36f25c-2600-4e08-8733-0783cba99bf4.png)
- en: Printing out current build requests in Travis CI
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印Travis CI中当前的构建请求
- en: 'The `requests` command will list any build requests that Travis CI receives.
    We will run the `travis requests` command on the build we just triggered for the
    `travis-init-command` repository:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: “requests”命令将列出Travis CI收到的任何构建请求。我们将在刚刚为“travis-init-command”存储库触发的构建上运行“travis
    requests”命令：
- en: '![](assets/5a038f86-fbb8-4c35-b3ee-c0ed0b3d64da.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/5a038f86-fbb8-4c35-b3ee-c0ed0b3d64da.png)
- en: The build is still failing because there aren't any buildable Go files in it
    yet.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其中还没有任何可构建的Go文件，构建仍然失败。
- en: Printing out particular repository settings
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印特定存储库设置
- en: 'The `settings` command will display repository settings for the repository:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`settings`命令将显示存储库的设置：'
- en: '![](assets/7e46036b-e732-4dda-b336-51f4788908ee.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7e46036b-e732-4dda-b336-51f4788908ee.png)'
- en: Notice here that the minus (`-`) means it is disabled while the plus (`+`) means
    it is enabled.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，减号（`-`）表示已禁用，而加号（`+`）表示已启用。
- en: 'The `travis settings` command can also be used to enable, disable, and set
    settings:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`travis settings`命令也可用于启用、禁用和设置设置：'
- en: '![](assets/cf38a65e-73e8-4e0d-9cc9-38078906c4cf.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cf38a65e-73e8-4e0d-9cc9-38078906c4cf.png)'
- en: Configuring Travis CI add-ons
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Travis CI附加功能
- en: 'The `setup` command helps you configure Travis add-ons:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup`命令可帮助您配置Travis附加功能：'
- en: '![](assets/992b1f80-7f78-4b85-a374-f44f3e9a82d8.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/992b1f80-7f78-4b85-a374-f44f3e9a82d8.png)'
- en: You can see more Travis add-ons that are available in the Travis CLI user documentation
    ([https://github.com/travis-ci/travis.rb#setup](https://github.com/travis-ci/travis.rb#setup)).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Travis CLI用户文档中查看更多可用的Travis附加功能（[https://github.com/travis-ci/travis.rb#setup](https://github.com/travis-ci/travis.rb#setup)）。
- en: Displaying general information for the current CI build
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示当前CI构建的一般信息
- en: 'The `show` command displays general information about the most recent CI build
    by default:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`show`命令默认显示有关最近CI构建的一般信息：'
- en: '![](assets/e57cb227-ca7f-4fb5-a004-0f145af11f55.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e57cb227-ca7f-4fb5-a004-0f145af11f55.png)'
- en: The first command, `travis show`, displayed the most recent build and in the
    next run we provided a specific build number.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令`travis show`显示了最近的构建，在下一次运行中，我们提供了一个特定的构建编号。
- en: Listing SSH key in Travis CI
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Travis CI中列出SSH密钥
- en: 'The `sshkey` command will check if there is a custom SSH key set up:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`sshkey`命令将检查是否设置了自定义SSH密钥：'
- en: '[PRE23]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This command only works with Travis's Pro version, and if there is no SSH key
    it will report that no custom SSH key is installed.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令仅适用于Travis的Pro版本，如果没有SSH密钥，它将报告未安装自定义SSH密钥。
- en: You can read about more options in this command in the user documentation ([https://github.com/travis-ci/travis.rb#sshkey](https://github.com/travis-ci/travis.rb#sshkey)).
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在用户文档中阅读有关此命令的更多选项（[https://github.com/travis-ci/travis.rb#sshkey](https://github.com/travis-ci/travis.rb#sshkey)）。
- en: Displaying status information for the current build
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示当前构建的状态信息
- en: 'The `status` command outputs a one-line message about the project''s last build:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`status`命令将输出有关项目最后构建的一行消息：'
- en: '![](assets/8bfabd10-4cb7-4b21-b0f6-1fbf576530a8.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8bfabd10-4cb7-4b21-b0f6-1fbf576530a8.png)'
- en: Travis CI options for Pro version and Enterprise version
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI的Pro版本和企业版本选项
- en: By default, the general API commands hit the `api.travis-ci.org` endpoint. The
    Travis Pro version has some additional features and options that a regular Travis
    account does not have such as using the `sshkey` command and more. You can read
    more about the options in the user documentation ([https://github.com/travis-ci/travis.rb#pro-and-enterprise](https://github.com/travis-ci/travis.rb#pro-and-enterprise)).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，一般API命令会访问`api.travis-ci.org`端点。Travis Pro版本具有一些常规Travis帐户没有的附加功能和选项，例如使用`sshkey`命令等。您可以在用户文档中阅读有关选项的更多信息（[https://github.com/travis-ci/travis.rb#pro-and-enterprise](https://github.com/travis-ci/travis.rb#pro-and-enterprise)）。
- en: Option to display the information for Pro version
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示Pro版本的信息选项
- en: 'If you use the `--pro` option with the general API command, then you will hit
    the Travis Pro endpoint at `https://api.travis-ci.com/`. So for example if we
    make the following request using the `--pro` option we will hit Travis Pro API:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在一般API命令中使用`--pro`选项，则将访问Travis Pro端点`https://api.travis-ci.com/`。例如，如果我们使用`--pro`选项进行以下请求，我们将访问Travis
    Pro API：
- en: '![](assets/f6cea2ba-e508-40c8-a0af-3c79fa1967f2.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f6cea2ba-e508-40c8-a0af-3c79fa1967f2.png)'
- en: Notice here that the host is `travis-ci.com` which is Travis PRO.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，主机是`travis-ci.com`，这是Travis PRO。
- en: Option to display information for Enterprise version
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示企业版本的信息选项
- en: 'If you have Travis Enterprise set up, then you can use the `--enterprise` option
    so that you hit where your enterprise domain lives:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已设置Travis Enterprise，则可以使用`--enterprise`选项，以便访问您的企业域所在的位置：
- en: '![](assets/c81581fe-ffa1-4033-9424-daa668e61b2e.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c81581fe-ffa1-4033-9424-daa668e61b2e.png)'
- en: We don't have Travis Enterprise set up, but if you did then you would enter
    your domain here.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有设置Travis Enterprise，但如果您设置了，则可以在此处输入您的域。
- en: Summary
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have gone over how to install Ruby and Travis CLI RubyGem
    on the Windows operating system, macOS operating system, and Linux operating system.
    We went over each Travis CLI command in detail and discussed the various ways
    to use each command and some of the options that each command takes. We also showed
    you how to directly call the Travis API using the curl REST client. Finally, we
    looked at some of the features in the Travis Pro and Enterprise versions.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经介绍了如何在Windows操作系统、macOS操作系统和Linux操作系统上安装Ruby和Travis CLI RubyGem。我们详细介绍了每个Travis
    CLI命令，并讨论了使用每个命令的各种方式以及每个命令所接受的一些选项。我们还向您展示了如何使用curl REST客户端直接调用Travis API。最后，我们还介绍了Travis
    Pro和Enterprise版本中的一些功能。
- en: In the next chapter, we will go over some more advanced techniques to log out
    values and to debug with Travis CI.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍一些更高级的技术，以记录值并使用Travis CI进行调试。
- en: Questions
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the recommended way to install Ruby on the Windows OS according to the
    Travis docs?
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据Travis文档，安装Ruby在Windows操作系统上的推荐方式是什么？
- en: What command should you use to print out the current version of Travis that
    is installed?
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该使用哪个命令来打印已安装的Travis的当前版本？
- en: What command do you use to print out helpful information in Travis CLI?
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您在Travis CLI中使用哪个命令来打印有用的信息？
- en: How do you get an access token to work with the general API commands in Travis
    CLI?
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何获取访问令牌以便在Travis CLI中使用一般API命令？
- en: What HTTP header do you need to use to work with Travis API Version 3?
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要使用哪个HTTP标头来使用Travis API版本3？
- en: How do you print out system configuration information?
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何打印系统配置信息？
- en: What command checks the syntax of your Travis YML script?
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个命令检查您的Travis YML脚本的语法？
- en: What command helps you set up Travis in your project?
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个命令可以帮助您在项目中设置Travis？
- en: Further reading
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: You can further explore the Travis CLI options in the user documentation ([https://github.com/travis-ci/travis.rb](https://github.com/travis-ci/travis.rb)) and
    you can read more about using the Travis API in the API documentation ([https://developer.travis-ci.com/](https://developer.travis-ci.com/)).
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在用户文档中进一步探索Travis CLI选项（[https://github.com/travis-ci/travis.rb](https://github.com/travis-ci/travis.rb)），您可以在API文档中阅读有关使用Travis
    API的更多信息（[https://developer.travis-ci.com/](https://developer.travis-ci.com/)）。
