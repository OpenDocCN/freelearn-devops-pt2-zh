["```\n# Javascript Node CircleCI 2.0 configuration file\n#\n# Check https://circleci.com/docs/2.0/language-javascript/ for more details\n#\nversion: 2\njobs:\n build:\n     docker:\n     # specify the version you desire here\n     - image: circleci/node:7.10\n\n     # Specify service dependencies here if necessary\n     # CircleCI maintains a library of pre-built images\n     # documented at https://circleci.com/docs/2.0/circleci-images/\n     # - image: circleci/mongo:3.4.4\n\n     working_directory: ~/repo\n\n     steps:\n         - checkout\n\n         # Download and cache dependencies\n         - restore_cache:\n             keys:\n              - v1-dependencies-{{ checksum \"package.json\" }}\n              # fallback to using the latest cache if no exact match is found\n              - v1-dependencies-\n\n         - run: yarn install\n\n         - save_cache:\n             paths:\n                 - node_modules\n             key: v1-dependencies-{{ checksum \"package.json\" }}\n\n         # run tests!\n         - run: yarn testSetup Circle CI in Atlassian Bitbucket\n```", "```\npbcopy < ~/.ssh/id_rsa_example.pub\n```", "```\nmvn archetype:generate -DgroupId=com.packci.app -DartifactId=java-summer -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n```", "```\ngit clone git@bitbucket.org:packtci/java-summer.git java-summer-proj\n```", "```\nmv java-summer-proj/.git java-summer\n```", "```\ngit push\n```", "```\n# Java Maven CircleCI 2.0 configuration file # # Check https://circleci.com/docs/2.0/language-java/ for more details # version: 2\njobs:\n build: docker:  # specify the version you desire here\n  - image: circleci/openjdk:8-jdk\n\n      # Specify service dependencies here if necessary\n # CircleCI maintains a library of pre-built images # documented at https://circleci.com/docs/2.0/circleci-images/ # - image: circleci/postgres:9.4    working_directory: ~/repo\n\n    environment:\n  # Customize the JVM maximum heap limit\n  MAVEN_OPTS: -Xmx3200m\n\n    steps:\n  - checkout\n\n      # Download and cache dependencies\n  - restore_cache:\n keys:  - v1-dependencies-{{ checksum \"pom.xml\" }}\n          # fallback to using the latest cache if no exact match is found\n  - v1-dependencies-\n\n      - run: mvn dependency:go-offline\n\n      - save_cache:\n paths:  - ~/.m2\n          key: v1-dependencies-{{ checksum \"pom.xml\" }}\n\n      # run tests!\n  - run: mvn integration-test\n```", "```\npublic static int average(int[] numbers) {\n    int sum = 0;\n for (int i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n  }\n    return sum; }\n```", "```\npublic void testaverage() {\n    App myApp = new App();\n int[] numbers = {\n            1, 2, 3, 4, 5\n  };\n  assertEquals(15, myApp.average(numbers)); }\n```", "```\nfunc  parseTemplate(soldier Soldier, tmpl string) *bytes.Buffer { var  buff  =  new(bytes.Buffer) t  := template.New(\"A template file\") t, err  := t.Parse(tmpl) if err !=  nil { log.Fatal(\"Parse: \", err) return buff } err  = t.Execute(buff, soldier) if err !=  nil { log.Fatal(\"Execute: \", err) return buff } return buff }\n```", "```\nfunc  TestParseTemplate(t *testing.T) { newSoldier  := Soldier{ Name: \"Luke Cage\", Rank: \"SGT\", TimeInService: 4, } txt  :=  parseTemplate(newSoldier, templateText) expectedTxt  :=  ` Name is Luke Cage Rank is SGT Time in service is 4 ` if txt.String() != expectedTxt { t.Error(\"The text returned should match\") } }\n```", "```\nversion: 2 jobs: build: docker: - image: circleci/golang:1.9 working_directory: /go/src/github.com/packtci/go-template-example-with-circle-ci steps: - checkout - run: name: \"Print go version\" command: go version - run: name: \"Run Unit Tests\" command: go test\n```"]