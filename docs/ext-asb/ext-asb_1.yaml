- en: Chapter 1. Getting Started with Ansible
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 使用Ansible入门
- en: As technology has advanced, computing has become more and more complex. With
    better hardware being manufactured each day, the complexity of computing systems
    has increased. Distributed computing started flourishing, and soon "the cloud"
    was invented. Software became trivial and managing it became a pain. Development
    cycles picked up the pace, and manual testing and deployments soon felt outdated,
    hence calling for automation. If you are reading this book, you probably understand
    the importance of automation, be it for testing an application or managing the
    whole infrastructure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术的进步，计算变得越来越复杂。随着每天制造出更好的硬件，计算系统的复杂性也增加了。分布式计算开始蓬勃发展，很快就发明了“云”。软件变得微不足道，管理它变得痛苦。开发周期加快，手动测试和部署很快就过时了，因此需要自动化。如果您正在阅读本书，您可能了解自动化的重要性，无论是用于测试应用程序还是管理整个基础设施。
- en: With increasing load and ever-scaling infrastructure, system administrators
    have stopped being simple craftspeople by configuring each system manually and
    have begun to manage thousands of systems at once. For any environment, however
    big it is, you need a reliable system to manage it all. The geographically scattered
    workplaces and ever-growing infrastructure make it nearly impossible to keep track
    of the inventory and manually configure and manage each machine. The paced development
    cycles and reduced time to market leaves little margin for error and throws the
    manual process out the window.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着负载的增加和基础设施的不断扩展，系统管理员已经不再是简单的手工艺人，手动配置每个系统，而是开始一次管理成千上万个系统。无论环境有多大，您都需要一个可靠的系统来管理所有这些。地理分散的工作场所和不断增长的基础设施几乎不可能跟踪库存并手动配置和管理每台机器。快速的开发周期和缩短的上市时间留下了很少的错误余地，并且抛弃了手动流程。
- en: The key to managing the whole infrastructure, deploying builds, speeding up
    the process, and at the same time keeping track of the changes is to have a system
    that is user-friendly, has a small learning curve, and is pluggable as per your
    requirements. What's most important is that you stay focused and spend more time
    managing your infrastructure and the processes rather than the automation scripts
    and management tool itself. Out of the many available solutions, Ansible is one
    such tool with many interesting features. It is easy to extend and works out of
    the box for 90% of user requirements. This book focuses on the remaining 10%.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 管理整个基础设施、部署构建、加快流程的关键，同时跟踪变化的方法是拥有一个用户友好、学习曲线小、可以根据您的需求进行插件化的系统。最重要的是，您要保持专注，花更多时间管理基础设施和流程，而不是自动化脚本和管理工具本身。在众多可用的解决方案中，Ansible是一个具有许多有趣功能的工具。它易于扩展，并且对于90%的用户需求可以立即使用。本书重点关注剩下的10%。
- en: 'In this chapter, we will be exploring:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨：
- en: Why Ansible?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择Ansible？
- en: Why extend Ansible?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要扩展Ansible？
- en: The Ansible architecture
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible架构
- en: Extending Ansible
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展Ansible
- en: Why Ansible?
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Ansible？
- en: 'Out of the many available tools in the market, how do you choose which tool
    best fits your need? What factors should you consider while choosing a tool to
    satisfy your requirements? Questions may come to mind such as:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在市场上有很多可用的工具，您如何选择最适合您需求的工具？在选择满足您需求的工具时，应该考虑哪些因素？可能会有一些问题浮现，比如：
- en: What is the **return on investment** (**ROI**) in terms of money, time, and
    effort?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 投资回报率（ROI）是指金钱、时间和精力方面的回报是什么？
- en: What kind of support do I get with the tool?
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我能得到什么样的工具支持？
- en: What are the potential associated security risks?
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有哪些潜在的安全风险？
- en: Is the tool flexible enough to be plugged into my infrastructure?
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个工具足够灵活，可以插入我的基础设施吗？
- en: What is the coverage? Are all my requirements addressed?
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖范围是什么？我的所有需求都得到了满足吗？
- en: If these are the questions that come to mind, I'll try answering them in favor
    of Ansible.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有这些疑问，我将试着站在Ansible的角度来回答。
- en: Ansible is free. The only investment you need is some time and effort. Ansible
    playbooks are YAML-based and hence are very easy to read, understand, and maintain,
    thus involving a very small learning curve. Modules hide the complexity underneath.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible是免费的。你唯一需要投入的是一些时间和精力。Ansible的playbooks基于YAML，因此非常容易阅读、理解和维护，学习曲线很小。模块隐藏了底层的复杂性。
- en: Ansible is open source. Hence, there is an entire community to back you up.
    You can file in issues or even fix them yourself, since you will always have access
    to the code.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible是开源的。因此，有整个社区来支持你。你可以提交问题，甚至自己修复问题，因为你始终可以访问代码。
- en: Unlike other solutions, which are mostly agent-based, Ansible works purely on
    SSH. There is no agent required. Therefore, you can sit back and relax, as there
    is no extra package lying on your production system.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与大多数基于代理的解决方案不同，Ansible完全基于SSH工作，无需代理。因此，你可以坐下来放松，因为在你的生产系统上不需要额外的软件包。
- en: Ansible provides a very good API, which you can use to build your own Ansible
    modules that suit your needs and can then be plugged into your infrastructure.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible提供了一个非常好的API，你可以使用它来构建适合你需求的Ansible模块，然后将其插入到你的基础设施中。
- en: Ansible provides 90% of user requirements out of the box. The remaining 10%
    has a well-documented API and community support to build your own modules, hence
    increasing the coverage.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible可以满足90%的用户需求，剩下的10%有着完善的API和社区支持，可以构建自己的模块，从而增加覆盖范围。
- en: If you are satisfied by the above arguments and willing to give Ansible a try,
    read on.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对以上论点感到满意，并愿意尝试一下Ansible，继续阅读。
- en: Why extend Ansible?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要扩展Ansible？
- en: Ansible comes in handy in various contexts – as a configuration management tool
    and deployment automation tool, as well as for provisioning and orchestration.
    It comes out of the box with a lot of plugins and modules that can be used for
    building playbooks. You can manage your entire infrastructure using Ansible in
    the way most software development projects do. **Infrastructure as Code** (**IAC**)
    applies the same principles of software development to configuration management.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible在各种情境下都很方便使用——作为配置管理工具和部署自动化工具，以及用于供应和编排。它默认提供了许多插件和模块，可以用于构建playbooks。你可以使用Ansible来管理整个基础设施，就像大多数软件开发项目一样。**基础设施即代码**（IAC）将软件开发的原则应用到配置管理中。
- en: People like Ansible for its simplicity and clear separation of concerns. It
    doesn't force you to adhere to one particular vision of how you should manage
    your configurations. It provides a perfect building block for designing your IAC
    solution, tailored to your specific requirements.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 人们喜欢Ansible是因为它简单易用，清晰地分离了关注点。它不会强迫你遵循特定的配置管理方式，而是为你设计基础设施即代码（IAC）解决方案提供了完美的构建模块，以满足你的特定需求。
- en: There can be many reasons to extend Ansible. This might range from adding missing
    features to modifying/enhancing existing features as per your own needs. With
    Ansible being an open source, community driven project, not everything can be
    integrated at once. There is always a trade-off between utility and demand. If
    there are not many users of one particular feature, it becomes an overhead for
    the project maintainer to support it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多原因可以扩展Ansible。这可能包括添加缺失的功能，根据自己的需求修改/增强现有功能。由于Ansible是一个开源的、社区驱动的项目，不是所有的东西都能一次性集成进去。效用和需求之间总是存在权衡。如果某个特定功能的用户不多，对项目维护者来说，支持它就会成为负担。
- en: Need something new
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需要新的东西吗？
- en: So, you come across a situation where Ansible, in its native form with the available
    modules and plugins, is not enough to meet your requirements. What do you do?
    Change the tool? Look for other options? Maybe even curse your bad luck for not
    being able to foresee what was coming and now you need to change everything?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可能会遇到这样的情况：Ansible以其现有的模块和插件的原始形式不足以满足您的要求。你会怎么做？更换工具？寻找其他选项？甚至因为无法预见即将发生的事情而诅咒自己的运气，现在你需要改变一切？
- en: Well, the answer is NO. Ansible provides a very good API and boilerplate that
    you can use to write your own Ansible modules or plugins as per your requirements.
    Building Ansible modules is easy. Since Ansible is community driven, you might
    even file a feature request for the required module if you feel more people are
    likely to face the same issue you encountered. If you are a developer, you can
    simply write your own Ansible module or plugin and share it with the community.
    Send in a pull request for your module and get into a discussion with the project
    maintainers. Hopefully, the module will be merged and made available in future
    releases of Ansible.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，答案是否定的。Ansible提供了一个非常好的API和样板，您可以使用它们根据自己的需求编写自己的Ansible模块或插件。构建Ansible模块很容易。由于Ansible是社区驱动的，如果您觉得更多的人可能会遇到与您遇到的相同问题，甚至可以为所需的模块提交功能请求。如果您是开发人员，您可以简单地编写自己的Ansible模块或插件，并与社区分享。为您的模块发送拉取请求，并与项目维护者进行讨论。希望该模块将被合并并在将来的Ansible版本中提供。
- en: In this book, we will see how to extend Ansible as per the requirements and
    distribute the customizations by contributing to an open source project, specifically,
    Ansible.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将看到如何根据要求扩展Ansible，并通过为一个开源项目，特别是Ansible，做出贡献来分发定制内容。
- en: Company-wide abstraction
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公司范围的抽象
- en: Treating your infrastructure as code offers many advantages, but it comes with
    a cost. Not all members of your team will be willing to climb the learning curve.
    As a result, only a few people will become powerful users of any configuration
    management tool such as Ansible, and they will become the bottleneck for the whole
    team.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 将基础设施视为代码提供了许多优势，但也有成本。您团队的成员并非都愿意攀登学习曲线。因此，只有少数人将成为诸如Ansible之类的任何配置管理工具的强大用户，并且他们将成为整个团队的瓶颈。
- en: A good IAC implementation should make it easy for everyone to interact with
    the infrastructure, deploy new software, provision resources, and weave components
    together. Details should be abstracted away as much as possible, behavior should
    be clear, and definitions should be navigable. There should also exist an easy
    way to trace any problems back to a high-level configuration.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的IAC实施应该使每个人都能轻松地与基础设施互动，部署新软件，提供资源并将组件编织在一起。尽可能将细节抽象化，行为应该清晰，定义应该是可导航的。还应该存在一种将任何问题追溯到高级配置的简单方法。
- en: To achieve this, one can develop plugins and modules that can abstract the details
    and provide interfaces that people can directly use and get results from. This
    will help everyone get up to speed and interact with the infrastructure.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，可以开发可以抽象细节并提供人们可以直接使用并获得结果的接口的插件和模块。这将帮助每个人迅速掌握并与基础设施互动。
- en: You can create modules and plugins that can make your routine tasks easy. You
    can share these as utilities that can be used by anyone in the company to carry
    out similar tasks. This would require some developer efforts, but would enable
    even the not so powerful users to get the most out of their infrastructure.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建模块和插件，使您的日常任务变得简单。您可以将这些共享为实用程序，任何公司成员都可以使用它们来执行类似的任务。这将需要一些开发人员的努力，但将使即使不那么强大的用户也能充分利用他们的基础设施。
- en: Diving into Ansible
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入了解Ansible
- en: Infrastructure grows gradually to a point where you finally give up managing
    it manually and begin to feel the need for a better way to manage the emergent
    complexity.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施逐渐增长到一个点，你最终放弃手动管理，并开始感受到需要更好的方式来管理不断增长的复杂性。
- en: One way to do this is to spend a lot of time looking for the right tool, then
    you end up adopting a complete configuration management solution, and bend over
    backwards to change your problem in order to make it fit into the existing solution.
    Obviously, this approach sounds flawed.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是花费大量时间寻找合适的工具，然后最终采用完整的配置管理解决方案，并费尽心思地改变问题以适应现有解决方案。显然，这种方法是有缺陷的。
- en: Another approach is to keep it simple and incrementally exploit the power of
    existing tools when they actually give you an immediate advantage.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是保持简单，并逐步利用现有工具的力量，当它们确实给你带来立即的优势时。
- en: Ansible is more suited for the latter approach. It is well-written and offers
    a clear separation of concerns and a simple model. In fact, you can choose to
    what degree you want to engage with it. It allows you to reuse components provided
    by the community while remaining in control.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible更适合于后一种方法。它写得很好，提供了清晰的关注点分离和简单的模型。事实上，你可以选择在多大程度上参与其中。它允许你重用社区提供的组件，同时保持控制。
- en: You can exploit the various extension points exposed by Ansible to build modules
    and plugins that suit your needs. Reusing already existing plugins and modules
    and creating your own as and when required provides even more control over your
    infrastructure.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以利用Ansible提供的各种扩展点来构建适合你需求的模块和插件。重用已有的插件和模块，并根据需要创建自己的，可以更多地控制你的基础设施。
- en: Contributing to Ansible
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Ansible做贡献
- en: 'Ansible is an open source project hosted on GitHub. If you have a GitHub account,
    you can easily fork the Ansible repository and start contributing to the project
    (Ansible code: [https://github.com/ansible/ansible](https://github.com/ansible/ansible)).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible是一个托管在GitHub上的开源项目。如果你有GitHub账号，你可以轻松地fork Ansible存储库并开始为项目做贡献（Ansible代码：[https://github.com/ansible/ansible](https://github.com/ansible/ansible)）。
- en: You can fork the project in your own account, clone it, and then make changes
    and send out pull requests to the project owner. This applies to all the open
    source projects.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在自己的账户中fork项目，克隆它，然后进行更改并向项目所有者发送拉取请求。这适用于所有开源项目。
- en: If you don't know where to start contributing, you can also look at the *Issues*
    section in the repository. The *Issues* section contains bug reports and feature
    requests from people using the tool. You might choose to verify and fix the issues
    and then send in your patch to the project owner as a pull request against an
    issue.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不知道从哪里开始贡献，你也可以查看存储库中的*Issues*部分。*Issues*部分包含了使用该工具的人们的bug报告和功能请求。你可以选择验证和修复问题，然后将你的补丁作为针对问题的拉取请求发送给项目所有者。
- en: The patches go through a review process, and only after the project maintainer's
    approval, the patch will be merged. Once merged, the feature will then be available
    to the users.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 补丁经过审查流程，只有在项目维护者批准后，补丁才会合并。一旦合并，该功能将对用户可用。
- en: Ansible architecture
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible架构
- en: Even though we assume our readers have a working knowledge of Ansible, it is
    useful to run through a brief overview of the Ansible architecture, so as to have
    a better understanding of the various extension points.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们假设读者对Ansible有一定的了解，但通过简要概述Ansible架构仍然很有用，以便更好地理解各种扩展点。
- en: Ansible is an agentless configuration management system, meaning no special
    software has to run on the managed hosts. Ansible connects to its targets usually
    via plain SSH, copies all the necessary code, and runs it on the target machine.
    Being agentless is one of the main advantages of Ansible over other solutions.
    This reduces the overhead of the setup of agents required on the target machines,
    also reducing security risks, as no extra packages or agents need to be installed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible是一种无代理配置管理系统，这意味着受管主机上不必运行特殊软件。Ansible通常通过普通SSH连接到其目标，复制所有必要的代码，并在目标机器上运行。无代理是Ansible相对于其他解决方案的主要优势之一。这减少了在目标机器上安装所需代理的设置开销，同时减少了安全风险，因为不需要安装额外的软件包或代理。
- en: 'The core Ansible components include:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 核心的Ansible组件包括：
- en: '**Inventory**: Target'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清单**：目标'
- en: '**Variables**: Information about the target hosts'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量**：关于目标主机的信息'
- en: '**Connection**: How to talk to the target hosts'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接**：如何与目标主机通信'
- en: '**Runner**: Connect to the target and execute actions'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Runner**：连接到目标并执行操作'
- en: '**Playbook**: Recipe to be executed on the target host'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Playbook**：要在目标主机上执行的配方'
- en: '**Facts**: Dynamic information about the target'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Facts**：关于目标的动态信息'
- en: '**Modules**: Code that implements actions'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块**：实现操作的代码'
- en: '**Callback**: Collects the results of the playbook actions'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回调**：收集playbook操作的结果'
- en: 'The following figure shows the architecture of Ansible:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了Ansible的架构：
- en: '![Ansible architecture](images/B04624_01-01.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Ansible architecture](images/B04624_01-01.jpg)'
- en: Brief overview of Ansible components
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ansible组件的简要概述
- en: Let's have a closer look at the Ansible components.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下Ansible组件。
- en: Ansible runner
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ansible runner
- en: At the heart of Ansible is the **runner**. The runner allows you to execute
    actions on one or more hosts and gather results.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible的核心是**runner**。runner允许您在一个或多个主机上执行操作并收集结果。
- en: The runner uses an inventory to choose which hosts to connect to. An inventory
    may also associate a set of variables with each host. These variables can then
    be accessed through the playbook and by other Ansible components like the connection
    plugin.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: runner使用清单选择要连接的主机。清单还可以将一组变量与每个主机关联起来。然后可以通过playbook和其他Ansible组件（如连接插件）访问这些变量。
- en: Connection plugins
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接插件
- en: Connection plugins (with a default SSH connection) can use specific host variables
    to figure out how to connect to the remote host. Variables may include information
    like a username to be used to connect to the remote host, a non-default port number,
    and so on.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 连接插件（默认为SSH连接）可以使用特定的主机变量来确定如何连接到远程主机。变量可能包括诸如要用于连接到远程主机的用户名，非默认端口号等信息。
- en: Playbook
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Playbook
- en: Moving on to another component, the **playbook** is one of the most important,
    as all the recipes are written in the form of Ansible playbooks. Playbooks are
    modeled as a collection of plays, each of which defines a set of tasks to be executed
    on a group of remote hosts. A play also defines the environment where the tasks
    will be executed.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 转到另一个组件，**playbook**是最重要的之一，因为所有的配方都是以Ansible playbook的形式编写的。Playbooks被建模为一组plays，每个play定义了要在一组远程主机上执行的一组任务。play还定义了任务将被执行的环境。
- en: Roles
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 角色
- en: Playbook can be broken down into **roles** for better organization. Roles help
    in modularizing the playbook tasks. These roles can later be included in the play
    against specific host groups. For instance, if your infrastructure involves web
    servers and proxy servers, each requiring a common set of tasks (preparing the
    systems) and then type-specific tasks (setting up and configuring web/proxy servers),
    these can be simply broken down into roles, which can later be run against specific
    hosts. Common tasks can be defined against all hosts, at which time webserver
    and proxy server roles can then be executed against respective host groups.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Playbook可以分解为**角色**以便更好地组织。角色有助于模块化playbook任务。这些角色可以稍后包含在针对特定主机组的播放中。例如，如果您的基础设施涉及Web服务器和代理服务器，每个都需要一组常见的任务（准备系统），然后是特定类型的任务（设置和配置Web/代理服务器），这些可以简单地分解为角色，然后可以针对特定主机运行。常见任务可以针对所有主机定义，在此时Web服务器和代理服务器角色可以针对各自的主机组执行。
- en: Variables
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变量
- en: Another important component in Ansible architecture is **variables**. Variables
    can be used to extract common values and parameterize shared playbook fragments.
    They can also be used to categorize hosts based on some quality they share.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible架构中的另一个重要组件是**变量**。变量可用于提取常见值并对共享的playbook片段进行参数化。它们还可以用于根据它们共享的某些特性对主机进行分类。
- en: Facts
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 事实
- en: Since every host can give out a lot of information about itself, managing them
    manually is not a recommended practice. Hence, Ansible included a special variable
    called **facts** in its software.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个主机都可以提供大量关于自身的信息，手动管理它们并不是一种推荐的做法。因此，Ansible在其软件中包含了一个称为**facts**的特殊变量。
- en: The facts variable is provided by the setup module and gets implicitly executed
    on every host (unless explicitly disabled). This variable collects information
    about the remote host before the runner starts the execution of the playbook on
    the remote hosts.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 事实变量由设置模块提供，并在每个主机上隐式执行（除非明确禁用）。此变量在运行程序开始在远程主机上执行playbook之前收集有关远程主机的信息。
- en: Runner
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行程序
- en: Now that we have the Ansible playbook in place and all facts about the remote
    host group have been collected, the runner kicks in. The runner variable executes
    the specific actions (as specified in the Ansible playbook) on the remote hosts
    by copying the action code to the target machine and preparing the environment
    before executing the action code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了Ansible playbook，并且已经收集了关于远程主机组的所有事实，运行程序开始执行。运行程序变量通过将操作代码复制到目标机器并在执行操作代码之前准备环境来在远程主机上执行特定操作（如在Ansible
    playbook中指定的）。
- en: Once the runner evaluates and executes the tasks, it cleans up the copied code
    from the remote host, finally reporting the status through **callbacks**.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行程序评估并执行任务，它会清理从远程主机复制的代码，最后通过**回调**报告状态。
- en: Playbook expressiveness
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Playbook表现力
- en: The expressiveness of the playbook language is limited in order to promote a
    somewhat declarative and descriptive structure of your configuration. However,
    Ansible does not go overboard in trying to model a strictly declarative configuration.
    Ansible plays are modeled as a sequential execution of tasks, affected only by
    variables.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了促进配置的一种相对声明性和描述性结构，playbook语言的表现力是有限的。然而，Ansible并没有过分努力地模拟严格的声明性配置。Ansible
    plays被建模为任务的顺序执行，仅受变量的影响。
- en: There are several tricks that allow you to insert complex logic within the playbooks,
    as well as some extension points, which we will see later, that allow you to achieve
    what you desire.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种技巧可以允许您在playbooks中插入复杂的逻辑，以及一些稍后将看到的扩展点，可以让您实现您想要的内容。
- en: Extending Ansible
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展Ansible
- en: 'Ansible provides various extension points that can be used to extend Ansible
    and fit it to customize your needs. It has four main entry points where you can
    put in your code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible提供了各种扩展点，可用于扩展Ansible并使其适应您的定制需求。它有四个主要入口点，您可以在其中放入您的代码：
- en: '**Custom fact scripts**: gathers custom facts from remote hosts'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义事实脚本**：从远程主机收集自定义事实'
- en: '**Ansible modules**: actuators of actual infrastructure changes'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ansible模块**：实际基础设施更改的执行器'
- en: '**Plugins**: extends the Ansible execution life cycle'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**插件**：扩展了Ansible执行生命周期'
- en: '**Python API**: inverts the control and exploits parts of Ansible from your
    custom tools'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python API**：颠倒了控制并从您的自定义工具中利用了Ansible的部分功能'
- en: Custom fact scripts
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自定义事实脚本
- en: Dynamic inventories may provide some knowledge about the infrastructure and
    how it's grouped and managed, but it does not provide a view of the actual state
    of things.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 动态清单可能提供有关基础设施以及其如何分组和管理的一些知识，但它并不提供有关实际事物状态的视图。
- en: Before every Ansible run, facts are gathered about the infrastructure against
    which the playbook is executed. This collects a lot of information about the hosts
    and can be later used in the Ansible playbook itself, if required.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次Ansible运行之前，都会收集有关针对playbook执行的基础设施的事实。这收集了有关主机的大量信息，并且如果需要，可以在Ansible playbook本身中稍后使用。
- en: However, you may find yourself in a position where the default facts gathered
    as part of the fact-gathering process are not enough. To tackle this, Ansible
    allows you to run your custom code as part of the fact-gathering phase, right
    before the Ansible play execution.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，您可能会发现自己处于这样一个位置：作为事实收集过程的一部分收集的默认事实不够。为了解决这个问题，Ansible允许您在事实收集阶段的一部分运行自定义代码，就在Ansible执行play之前。
- en: Modules
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块
- en: Modules define the primitive operations that can be performed on your infrastructure.
    They allow you to exactly describe what to do right from the playbook. They can
    encapsulate a complex high-level task, such as interacting with some external
    infrastructure component, and deploy a virtual machine or whole environment.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 模块定义了可以在基础设施上执行的原始操作。它们允许您从playbook中精确描述要做什么。它们可以封装复杂的高级任务，例如与某些外部基础设施组件进行交互，并部署虚拟机或整个环境。
- en: Modules are the key to Ansible customization. Modules can be written in any
    programming language, and if suitable, they can use Ansible itself to perform
    the nitty-gritty details of their operation.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是定制Ansible的关键。模块可以用任何编程语言编写，并且如果合适，它们可以使用Ansible本身来执行其操作的细节。
- en: A substantial part of this book is devoted to building Ansible modules.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的相当部分专门讨论了构建Ansible模块。
- en: Plugins
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插件
- en: The term **plugin** groups a number of extension points that hook deeply in
    the Ansible core and extend its behavior in powerful ways.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 术语**插件**将一些扩展点分组在一起，这些扩展点深入连接到Ansible核心，并以强大的方式扩展其行为。
- en: 'The currently available plugins for Ansible are as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 目前可用的Ansible插件如下：
- en: Action plugins
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作插件
- en: Loopback plugins
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回环插件
- en: Callback plugins
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回调插件
- en: Connection plugins
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接插件
- en: Filter plugins
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤器插件
- en: Vars plugins
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vars插件
- en: Plugins will be covered in detail in [Chapter 4](ch04.html "Chapter 4. Exploring
    API"), *Exploring API* and [Chapter 5](ch05.html "Chapter 5. An In-Depth Look
    at Ansible Plugins"), *An In-depth Look at Ansible Plugins*, where you'll learn
    all you need to know about plugins, including how you can implement them and build
    your own plugin.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 插件将在[第4章](ch04.html "第4章 探索API")“探索API”和[第5章](ch05.html "第5章 Ansible插件深入研究")“Ansible插件深入研究”中详细介绍，您将在这里学习有关插件的所有必要知识，包括如何实现它们并构建自己的插件。
- en: Python API
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python API
- en: The Ansible Python API allows you to use Ansible as a library, thus making use
    of the things that Ansible is good for right from your custom configuration management
    solution (whatever it is). You can run Ansible playbooks programmatically.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Python API允许您将Ansible用作库，从而可以从您的自定义配置管理解决方案（无论是什么）中直接使用Ansible擅长的东西。您可以以编程方式运行Ansible
    playbooks。
- en: The Python API can also be used from within other Ansible extensions; we'll
    highlight the important parts throughout this book.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Python API也可以从其他Ansible扩展中使用；我们将在本书中突出重要部分。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: After going through this chapter, you might be tempted to use Ansible as a configuration
    management and orchestration tool. Perhaps we have also given you a reason to
    choose Ansible as an IAC solution. This chapter provided you with a brief introduction
    to Ansible and its capabilities and use cases. It familiarized you with the Ansible
    architecture, the different components of Ansible, and the various extension points
    provided by Ansible. This chapter also took you through the process of contributing
    to an Ansible project.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，您可能会被诱惑将Ansible用作配置管理和编排工具。也许我们还给了您选择Ansible作为IAC解决方案的理由。本章向您介绍了Ansible及其功能和用例的简要介绍。它使您熟悉了Ansible架构、Ansible的不同组件以及Ansible提供的各种扩展点。本章还带您了解了参与到一个Ansible项目的过程。
- en: In the next chapter, you will be learning about Ansible modules. The chapter
    will take you through what you need to know before you start writing an Ansible
    module and guide you through writing your first one. The chapter will also teach
    you about some best practices that should be followed while developing an Ansible
    module. Additionally, the chapter will create a base for the more advanced topics
    that will be covered later in the book, which includes real-life scenarios of
    where and how you can exploit the power of Ansible.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习有关Ansible模块的知识。本章将带您了解在开始编写Ansible模块之前需要了解的内容，并指导您编写您的第一个模块。本章还将教您一些在开发Ansible模块时应遵循的最佳实践。此外，本章将为本书后面将涵盖的更高级主题奠定基础，其中包括您可以利用Ansible的力量的真实场景。
