["```\n#!/bin/bash\n\n# The module checks for system uptime of the target machine.\n# It returns a JSON output since an Ansible module should\n# output a Valid JSON.\n\nif [ -f \"/proc/uptime\" ]; then\n    uptime=`cat /proc/uptime`\n    uptime=${uptime%%.*}\n    days=$(( uptime/60/60/24 ))\n    hours=$(( uptime/60/60%24 ))\n    uptime=\"$days days, $hours hours\"\nelse\n    uptime=\"\"\nfi\n\necho -e \"{\\\"uptime\\\":\\\"\"$uptime\"\\\"}\"\n```", "```\n---\n- hosts: remote\n  user: rdas\n\n  tasks:\n    - name: Check uptime\n      action: chkuptime\n      register: uptime\n\n    - debug: var=uptime\n```", "```\n.\n\u251c\u2500\u2500 basic_uptime.yml\n\u251c\u2500\u2500 group_vars\n\u251c\u2500\u2500 hosts\n\u251c\u2500\u2500 library\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 chkuptime\n\u2514\u2500\u2500 roles\n```", "```\n[remote]\n192.168.122.191\n```", "```\n**[rdas@localhost ]$ ansible-playbook -i hosts basic_uptime.yml**\n\n**PLAY [remote] *******************************************************************\n\n**GATHERING FACTS *****************************************************************\n**ok: [192.168.122.191]**\n\n**TASK: [Check uptime] ************************************************************\n**ok: [192.168.122.191]**\n\n**TASK: [debug var=uptime] ********************************************************\n**ok: [192.168.122.191] => {**\n **\"var\": {**\n **\"uptime\": {**\n **\"invocation\": {**\n **\"module_args\": \"\",**\n **\"module_name\": \"chkuptime\"**\n **},**\n **\"uptime\": \"0 days, 4 hours\"**\n **}**\n **}**\n**}**\n\n**PLAY RECAP **********************************************************************\n**192.168.122.191            : ok=3    changed=0    unreachable=0    failed=0** \n\n```", "```\n#!/bin/bash\n\n# The module checks for system uptime of the target machine.\n# The module takes in 'detailed' bool argument from the user\n# It returns a JSON output since an Ansible module should\n# output a Valid JSON.\n\nsource $1\n\nif [ -f \"/proc/uptime\" ]; then\n    uptime=`cat /proc/uptime`\n    uptime=${uptime%%.*}\n    days=$(( uptime/60/60/24 ))\n    hours=$(( uptime/60/60%24 ))\n    if [ $detailed ]; then\n        minutes=$(( uptime/60%60 ))\n        seconds=$(( uptime%60 ))\n        uptime=\"$days days, $hours hours, $minutes minutes, $seconds seconds\"\n    else\n        uptime=\"$days days, $hours hours\"\n    fi\nelse\n    uptime=\"\"\nfi\n\necho -e \"{\\\"uptime\\\":\\\"\"$uptime\"\\\"}\"\n```", "```\n---\n- hosts: remote\n  user: rdas\n\n  tasks:\n    - name: Check uptime\n      action: chkuptime detailed=true\n      register: uptime\n\n- debug: var=uptime\n```", "```\n**[rdas@localhost bash-arg-example]$ ansible-playbook -i hosts uptime_arg.yml**\n**PLAY [remote] *******************************************************************\n\n**GATHERING FACTS *****************************************************************\n**ok: [192.168.122.191]**\n\n**TASK: [Check uptime] ************************************************************\n**ok: [192.168.122.191]**\n\n**TASK: [debug var=uptime] ********************************************************\n**ok: [192.168.122.191] => {**\n **\"var\": {**\n **\"uptime\": {**\n **\"invocation\": {**\n **\"module_args\": \"detailed=true\",**\n **\"module_name\": \"chkuptime\"**\n **},**\n **\"uptime\": \"1 days, 2 hours, 2 minutes, 53 seconds\"**\n **}**\n **}**\n**}**\n\n**PLAY RECAP **********************************************************************\n**192.168.122.191            : ok=3    changed=0    unreachable=0    failed=0** \n\n```", "```\n#!/bin/bash\n\n# This module checks if the pid of the specified\n# process exists. If not, it returns a failure msg\n\nsource $1\n\npid=`pidof $process`\nif [[ -n $pid ]]; then\n    printf '{\n        \"msg\" : \"%s is running with pid %s\",\n        \"changed\" : 1\n    }' \"$process\" \"$pid\"\nelse\n    printf '{\n        \"msg\" : \"%s process not running\",\n        \"failed\" : \"True\"\n    }' \"$process\"\nfi\n```", "```\n---\n- hosts: remote\n  user: rdas\n\n  tasks:\n    - name: Check if process running\n      action: chkprocess process=httpd\n      register: process\n\n    - debug: msg=\"{{ process.msg }}\"\n```", "```\n**[rdas@localhost process-bash]$ ansible-playbook -i hosts chkprocess.yml**\n**PLAY [remote] *******************************************************************\n\n**GATHERING FACTS *****************************************************************\n**ok: [192.168.122.191]**\n\n**TASK: [Check if process running] ************************************************\n**failed: [192.168.122.191] => {\"failed\": \"True\"}**\n**msg: httpd process not running**\n\n**FATAL: all hosts have already failed -- aborting**\n\n**PLAY RECAP **********************************************************************\n **to retry, use: --limit @/home/rdas/chkprocess.retry**\n\n**192.168.122.191            : ok=1    changed=0    unreachable=0    failed=1** \n\n```", "```\n    module = AnsibleModule(\n        argument_spec = dict(\n            username = dict(required=True)\n        )\n    )   \n    username = module.params.get('username')\n    module.exit_json(changed=True, msg=str(status))\n```", "```\nDOCUMENTATION = \"\"\"\n---\nmodule: chkuser\nversion_added: 0.1\nshort_description: Check if user exists on the target machine\noptions:\n    username:\n        decription:\n            - Accept username from the user\n        required: True\n\"\"\"\n```", "```\nEXAMPLES = \"\"\"\n#Usage Example\n    - name: Check if user exists\n      action: chkuser username=rdas\n\"\"\"\n```", "```\n#!/bin/python\n\nDOCUMENTATION = \"\"\"\n---\nmodule: chkuser\nversion_added: 0.1\nshort_description: Check if user exists on the target machine\noptions:\n    username:\n        decription:\n            - Accept username from the user\n        required: True\n\"\"\"\n\nEXAMPLES = \"\"\"\n#Usage Example\n    - name: Check if user exists\n      action: chkuser username=rdas\n\"\"\"\n\ndef is_user_exists(username):\n    try:\n        import pwd\n        return(username in [entry.pw_name for entry in pwd.getpwall()])\n    except:\n        module.fail_json(msg='Module pwd does not exists')\n\ndef main():\n    module = AnsibleModule(\n        argument_spec = dict(\n            username = dict(required=True)\n        )\n    )   \n    username = module.params.get('username')\n    exists = is_user_exists(username)\n    if exists:\n        status = '%s user exists' % username\n    else:\n        status = '%s user does not exist' % username\n    module.exit_json(changed=True, msg=str(status))\n\nfrom ansible.module_utils.basic import *\nmain()\n```", "```\n---\n- hosts: remote\n  user: rdas\n\n  tasks:\n    - name: Check if user exists\n      action: chkuser username=rdas\n      register: user\n\ndebug: msg=\"{{ user.msg }}\n```", "```\n#!/bin/python\n\nimport sys\n\ndef main():\n    module = AnsibleModule(\n        argument_spec = dict()\n    )\n    f = open('/tmp/magicmirror', 'w')\n    print >>f, file(sys.argv[0]).read()\n    module.exit_json(changed=True)\n\nfrom ansible.module_utils.basic import *\nmain()\n```"]