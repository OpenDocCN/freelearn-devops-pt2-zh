- en: Chapter 2. Getting to Know Ansible Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章 了解Ansible模块
- en: Ansible modules are reusable piece of code that can be invoked using the Ansible
    API or through the Ansible Playbook. Modules form the backbone of Ansible. These
    are simple pieces of code that can be written in any language.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible模块是可以使用Ansible API或通过Ansible Playbook调用的可重用代码片段。模块是Ansible的支柱。这些都是可以用任何语言编写的简单代码片段。
- en: 'This chapter will introduce you to writing Ansible modules. The chapter is
    organized in four sections:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍如何编写Ansible模块。本章分为四个部分：
- en: Writing your first Ansible module
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写你的第一个Ansible模块
- en: The module writing helper
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块编写助手
- en: Providing facts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供事实
- en: Testing and debugging modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试和调试模块
- en: Writing your first Ansible module
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写你的第一个Ansible模块
- en: 'Ansible modules can be written in any language, though there are a few commandments
    one needs to abide by while writing them. These are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible模块可以用任何语言编写，尽管在编写模块时需要遵守一些规定。具体如下：
- en: The module must output only valid JSON.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块必须只输出有效的JSON。
- en: Modules should be self-contained in one file to be automatically transferred
    by Ansible.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块应该是一个文件中自包含的，以便被Ansible自动传输。
- en: Include as few dependencies as possible. If dependencies exist, document them
    at the top of the module file, and have the module raise the JSON error message
    when the import fails.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量包含尽可能少的依赖项。如果存在依赖关系，请在模块文件顶部记录它们，并在导入失败时使模块引发JSON错误消息。
- en: Execution environment
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行环境
- en: To write your own Ansible module, you first need to understand the execution
    environment (that is, where and how will your script execute).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写自己的Ansible模块，首先需要了解执行环境（即脚本将在何处以及如何执行）。
- en: Ansible executes the scripts or the play on the target machine. Thus, your script,
    or the compiled binary, will be copied over to the target machine and then executed.
    Beware that Ansible simply copies over the module files and generated code for
    the play on the target machine and makes no attempts to resolve any necessary
    dependencies. Hence, it is recommended to include as few dependencies as possible
    in your Ansible module file. Any dependencies in the module need to be properly
    documented and handled during or before the Ansible play.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible在目标机器上执行脚本或播放。因此，您的脚本或已编译的二进制文件将被复制到目标机器上，然后执行。请注意，Ansible只是简单地复制模块文件和生成的代码到目标机器上，并且不会尝试解决任何必要的依赖关系。因此，建议在您的Ansible模块文件中尽量包含尽可能少的依赖项。模块中的任何依赖关系都需要得到适当的记录，并在执行Ansible播放期间或之前进行处理。
- en: Step 1 – module placement
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤1 - 模块放置
- en: Once you have your module file ready, you need to know exactly where you should
    place it in order to use the module in the Ansible playbooks.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的模块文件准备好，您需要确切地知道应该将它放在哪里，以便在Ansible剧本中使用该模块。
- en: 'You can place your module in different places where Ansible looks for modules:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将您的模块放在Ansible寻找模块的不同位置：
- en: A path specified by the `library` variable in the configuration file, located
    at `/etc/ansible/ansible.cfg`
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在配置文件中由`library`变量指定的路径，位于`/etc/ansible/ansible.cfg`
- en: A path specified by the `–module-path` argument in the command line
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由命令行中的`–module-path`参数指定的路径
- en: Inside the `library` directory at the root of an Ansible playbook
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Ansible剧本的根目录下的`library`目录内
- en: Inside the `library` directory of the role, if used
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果使用，位于角色的`library`目录内
- en: Writing a basic Bash module
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写基本的Bash模块
- en: Since Ansible modules can be written in any language, we will first try to write
    one simple Ansible module in Bash.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Ansible模块可以用任何语言编写，我们将首先尝试用Bash编写一个简单的Ansible模块。
- en: The first Bash module we will write will simply check for the target machine
    uptime and return output in JSON, as required by any Ansible module. We will name
    the module `chkuptime` and write a playbook to execute the same module on the
    target machine.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写的第一个Bash模块将简单地检查目标机器的正常运行时间，并按照任何Ansible模块所需的格式返回输出。我们将命名该模块为`chkuptime`，并编写一个playbook来在目标机器上执行相同的模块。
- en: This module will be placed in the `library` directory in the root of the Ansible
    playbook and will be automatically included by Ansible.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块将被放置在Ansible playbook根目录中的`library`目录中，并将被Ansible自动包含。
- en: 'The following is a basic Bash module, which checks the uptime of a target machine:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个基本的Bash模块，用于检查目标机器的正常运行时间：
- en: '**Bash Module Code**: (`library/chkuptime`)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bash模块代码**：(`library/chkuptime`)'
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For Ansible to include the above module code to be looked up while executing
    an Ansible playbook, we place it in the `library` directory in the root of the
    Ansible playbook.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Ansible在执行Ansible playbook时包含上述模块代码，我们将其放在Ansible playbook根目录中的`library`目录中。
- en: To run this against a target host group, we will create an inventory file named
    `hosts`, which will include a grouped list of target machines. To test the module,
    we run it against only one target host.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了针对目标主机组运行这个模块，我们将创建一个名为`hosts`的清单文件，其中包括目标机器的分组列表。为了测试该模块，我们只对一个目标主机运行它。
- en: Now, we will create an Ansible play for executing the newly created module.
    We name the play `basic_uptime.yml`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个Ansible play来执行新创建的模块。我们将play命名为`basic_uptime.yml`。
- en: '`basic_uptime.yml`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`basic_uptime.yml`'
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Directory structure of the playbook:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Playbook的目录结构：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Inventory File (`hosts`)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 清单文件（`hosts`）
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we run this play, and it should return with the uptime of the target machine:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们运行这个play，它应该返回目标机器的正常运行时间：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Reading arguments
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取参数
- en: If you notice the above module, it does not accept any arguments. Let's call
    such a module a `static` module. The module is very limited in its functionality
    and behavior; otherwise, output cannot be altered. The module will execute on
    the target machine and return a fixed output. If the user is expecting output
    in some other form, this module is useless. The module provides no flexibility
    to the user. For the user to get an output as he or she desires, he or she will
    either have to search for an alternate of this module (if one exists), or else
    write one him or herself.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你注意到上述模块，它不接受任何参数。让我们称这样的模块为`静态`模块。该模块在功能和行为上非常有限；否则，输出无法被改变。该模块将在目标机器上执行并返回固定的输出。如果用户期望以其他形式输出，这个模块就没有用了。该模块对用户没有灵活性。用户要想得到自己想要的输出，要么就得寻找这个模块的替代品（如果有的话），要么就得自己编写一个。
- en: To make a module more flexible, it should be able to respond to the user requirements,
    modify the output as required, or at least provide ways by which a user can interact
    with it. This is done by allowing a module to accept arguments. Values to these
    arguments are specified by the user at runtime.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使模块更加灵活，它应该能够响应用户的要求，根据需要修改输出，或者至少提供用户可以与之交互的方式。这是通过允许模块接受参数来实现的。用户在运行时指定这些参数的值。
- en: The arguments, as expected by the module, should be well-defined. The arguments
    should also be well documented–both for code documentation as well as for generating
    module documentation. Argument type and default values (if any) should be explicitly
    defined.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 模块所期望的参数应该是明确定义的。参数也应该有良好的文档记录-既用于代码文档，也用于生成模块文档。参数类型和默认值（如果有）应该明确定义。
- en: Since a module can be written in any language, there can be different ways in
    which an Ansible module accepts an argument on the code level. However, passing
    arguments from the Ansible playbook remains unchanged irrespective of what language
    the module was written in. In Bash, the arguments are stored in variables with
    a number in the order of arguments at 1\. For example, with a first argument of
    $1, a second argument would be $2 and so on. However, argument type and default
    values for the argument need to be handled in the code itself. Ansible provides
    a Python API, which provides a better way of handling arguments. It allows you
    to explicitly define the type of argument, mandate an argument, and even specify
    a default value to the argument. Handling arguments through the Python API will
    be covered later in this chapter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模块可以用任何语言编写，因此在代码级别上，Ansible模块接受参数的方式可能不同。然而，无论模块是用什么语言编写的，从Ansible playbook传递参数的方式都保持不变。在Bash中，参数存储在按顺序编号的变量中。例如，第一个参数为$1，第二个参数为$2，依此类推。然而，参数类型和参数的默认值需要在代码中处理。Ansible提供了一个Python
    API，它提供了更好的处理参数的方式。它允许您明确定义参数的类型，强制要求参数，甚至为参数指定默认值。本章后面将介绍通过Python API处理参数。
- en: We will extend the last module to accept a user argument to print the system
    uptime in a more detailed format. Using the `detailed` flag, the user may request
    to print the uptime in full (that is days, hours, minutes, seconds), while the
    previous format (that is days, hours) is preserved if the `detailed` flag is omitted.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展上一个模块，以接受用户参数以更详细的格式打印系统运行时间。使用`detailed`标志，用户可以请求以完整的方式打印运行时间（即天，小时，分钟，秒），如果省略`detailed`标志，则保留先前的格式（即天，小时）。
- en: 'The following is the extension of the `chkuptime` module, which returns output
    based on the user-specified value of the `detailed` flag:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`chkuptime`模块的扩展，它根据用户指定的`detailed`标志返回输出：
- en: '**Bash module**: (`library/chkuptime`)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bash模块**：(`library/chkuptime`)'
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The only change required in the Ansible play is to pass a Bool type `detailed`
    argument to the module when it's called.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ansible play中唯一需要更改的是在调用模块时传递一个Bool类型的`detailed`参数。
- en: Ansible Play `(uptime_arg.yml)`
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Play `(uptime_arg.yml)`
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Executing the play, we get the following output:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 执行play后，我们得到以下输出：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you compare the output with the previous Ansible play's output, the uptime
    now includes minutes and seconds, which was missing in the previous example. The
    previous output can also be achieved by the new module by setting the `detailed`
    flag as false.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将输出与上一个Ansible play的输出进行比较，现在的运行时间包括了分钟和秒，而在上一个示例中是缺少的。通过设置`detailed`标志为false，也可以使用新模块来实现先前的输出。
- en: Handling errors
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理错误
- en: You have already learned how to create a custom module and read user inputs.
    Since modules are designed to perform some function on the target machine, there
    are chances it may fail sometimes. Reasons for failure may range from a permission
    issue on the target machine to invalid user input, or anything else. Whatever
    the reason may be, your module should be able to handle errors and failures and
    return an error message with proper information for the user to understand the
    root cause. All failures should be explicitly reported by including `failed` in
    return data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学会了如何创建自定义模块和读取用户输入。由于模块旨在在目标机器上执行某些功能，有时可能会失败。失败的原因可能是从目标机器上的权限问题到无效的用户输入，或其他任何原因。无论原因是什么，您的模块都应该能够处理错误和失败，并返回带有适当信息的错误消息，以便用户了解根本原因。所有失败都应该通过在返回数据中包含`failed`来明确报告。
- en: For instance, let's create a simple module that accepts a process name from
    the user and returns it whether the specified service is running on the target
    machine or not. If the service is running, it simply returns a message containing
    the process ID of the requested process. If not, it explicitly fails the module
    execution by returning `failed` as `true`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们创建一个简单的模块，接受用户输入的进程名称，并返回指定服务是否在目标机器上运行。如果服务正在运行，它将简单地返回一个包含请求进程的进程ID的消息。如果没有，它将通过将`failed`设置为`true`来明确失败模块执行。
- en: 'The following is a sample module that includes `failed` in the return data
    and explicitly fails the module execution:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个包含`failed`在返回数据中并明确失败模块执行的示例模块：
- en: Module `library/chkprocess`
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 模块`library/chkprocess`
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Ansible play** `chkprocess.yml`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ansible play** `chkprocess.yml`'
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, we will be checking if the specified `httpd` process is running
    on the target host. If not, this should fail the Ansible run.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们将检查指定的`httpd`进程是否在目标主机上运行。如果没有，这应该会导致Ansible运行失败。
- en: 'Let''s now execute the Ansible play against the target machines:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们执行针对目标机器的Ansible play：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you may notice, since the `httpd` process was not running on the target host,
    Ansible failed the run as requested. Also, there was a meaningful message displayed
    in order to inform the user of the root cause of the failure.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能注意到的，由于`httpd`进程未在目标主机上运行，Ansible按照请求失败了运行。此外，还显示了一个有意义的消息，以通知用户失败的根本原因。
- en: Creating Ansible modules in Python
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Python中创建Ansible模块
- en: At this point, you are familiar with the basic concepts of writing an Ansible
    module. We have also gone over some sample Ansible modules that were written in
    Bash.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您已经熟悉了编写Ansible模块的基本概念。我们还讨论了一些用Bash编写的示例Ansible模块。
- en: While it's possible to write Ansible modules in any language, Ansible provides
    a friendlier environment for those written in Python.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以用任何语言编写Ansible模块，但Ansible为用Python编写的模块提供了更友好的环境。
- en: While writing modules in different languages, as observed above, tasks like
    handling arguments, handling failures, checking inputs, and so on were handled
    in the module code itself. In Python, Ansible provides a few helpers and syntactic
    sugar to perform common tasks. For example, you do not need to parse the arguments
    as shown in the previous examples.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同语言中编写模块时，如上所述，处理参数、处理失败、检查输入等任务都是在模块代码中处理的。在Python中，Ansible提供了一些辅助工具和语法糖来执行常见任务。例如，您不需要像在之前的示例中所示的那样解析参数。
- en: Common routines provided by Ansible are capable of handling return statuses,
    errors, failures, and check inputs. This syntactic sugar comes from the AnsibleModule
    boilerplate. Using the AnsibleModule boilerplate, you can handle arguments and
    return statuses in a much more efficient way. This will help you concentrate more
    on the module rather than having to put in explicit checks on inputs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible提供的常见例程能够处理返回状态、错误、失败和检查输入。这种语法糖来自AnsibleModule样板。使用AnsibleModule样板，您可以以更高效的方式处理参数和返回状态。这将帮助您更多地集中精力在模块上，而不必对输入进行明确的检查。
- en: Let's get a better understanding of the AnsibleModule boilerplate.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更好地理解AnsibleModule样板。
- en: The AnsibleModule boilerplate
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AnsibleModule样板
- en: In order to benefit from the AnsibleModule boilerplate, all you need to do is
    import `ansible.module_utils.basic`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从AnsibleModule样板中受益，您只需要导入`ansible.module_utils.basic`。
- en: Put the import at the end of the file, and make sure your actual module body
    is contained inside the conventional `main` function.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 将导入放在文件末尾，并确保您的实际模块主体包含在传统的`main`函数中。
- en: The AnsibleModule boilerplate also offers a specification language for the module
    arguments. It allows you to specify if the arguments are optional or required.
    It also handles a few data types such as enumeration.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: AnsibleModule样板还为模块参数提供了一种规范语言。它允许您指定参数是可选的还是必需的。它还处理了一些数据类型，如枚举。
- en: 'In the following code, the module accepts a mandatory argument, `username`,
    specified by the setting `required=True`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，模块接受一个强制参数`username`，由设置`required=True`指定：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The object `module` uses a common function, `exit_json`, which returns `true`
    and also returns a success message to Ansible. The `module` object provides a
    set of common functions such as:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对象`module`使用一个常见的函数`exit_json`，它返回`true`并向Ansible返回一个成功消息。`module`对象提供了一组常见的函数，例如：
- en: '`run_command`: This function runs an external command and gets a return code,
    `stdout`, `stderr`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run_command`：此函数运行外部命令并获取返回代码，`stdout`，`stderr`'
- en: '`exit_json`: This function returns a success message to Ansible'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exit_json`：此函数向Ansible返回一个成功消息'
- en: '`fail_json`: This function returns a failure and error message to Ansible'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fail_json`：此函数返回一个失败和错误消息给Ansible'
- en: Arguments can be accessed by the `module.params` instance variable. There will
    be a key value pair for each argument.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 参数可以通过`module.params`实例变量访问。每个参数都将有一个键值对。
- en: The `AnsibleModule` helper, while parsing the arguments, will perform a series
    of validations and requested type conversions. The argument specification dictionary
    describes each possible argument to the module. An argument can be optional or
    required. Optional arguments may have a default value. Also, the possible inputs
    to a particular argument can be restricted using the `choice` keyword.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`AnsibleModule`助手，在解析参数时，将执行一系列验证和请求类型转换。参数规范字典描述了模块的每个可能的参数。参数可以是可选的或必需的。可选参数可以有默认值。此外，可以使用`choice`关键字限制特定参数的可能输入。'
- en: Documenting modules
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块文档
- en: If you are writing a module, it is very important to document it properly. Documentation
    is required for better understanding of what the module does. It is always recommended
    to document a module.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在编写一个模块，正确地记录它是非常重要的。文档是对模块功能更好理解所必需的。建议始终记录一个模块。
- en: All you need to do is include a `DOCUMENTATION` global variable in your module
    file as shown in the following code. The contents of this variable should be a
    valid YAML.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你所需要做的就是在你的模块文件中包含一个`DOCUMENTATION`全局变量，如下面的代码所示。该变量的内容应该是有效的YAML。
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This documentation can be read using the `ansible-doc` command. Unfortunately,
    this currently works only for Python-based modules.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`ansible-doc`命令阅读此文档。不幸的是，目前这仅适用于基于Python的模块。
- en: In addition to documentation outlining every option in detail, it is a good
    idea to provide a few examples that may cover some basic use cases for the module.
    This might be done by adding another global variable named `EXAMPLES`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 除了详细说明每个选项的文档外，还可以提供一些可能涵盖模块的一些基本用例的示例。这可以通过添加另一个名为`EXAMPLES`的全局变量来完成。
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let's implement the AnsibleModule boilerplate and the preceding documentation
    in an Ansible module that checks if the user exists on the target machine.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在一个检查目标机器上的用户是否存在的Ansible模块中实现AnsibleModule样板和上述文档。
- en: 'The following is a sample Ansible module, `chkuser`, built using the AnsibleModule
    boilerplate. The module also contains module documentation along with usage examples:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用AnsibleModule样板构建的示例Ansible模块`chkuser`。该模块还包含模块文档以及使用示例：
- en: '**Module name**: `chkuser`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**模块名称**：`chkuser`'
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To use this module, we create an Ansible play, which passes a username as an
    argument to the `chkuser` module, as shown in the following code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个模块，我们创建一个Ansible play，将用户名作为参数传递给`chkuser`模块，如下面的代码所示：
- en: '**Ansible Play** : `chkuser.yml`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ansible Play**：`chkuser.yml`'
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Executing the play against the target machine returns a message stating whether
    the queried user exists on the target machine or not.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 对目标机器执行play会返回一条消息，说明查询的用户是否存在于目标机器上。
- en: Testing and debugging modules
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试和调试模块
- en: Writing modules was easy, but developing a module is not enough. You need to
    test if the module performs all operations as expected under all circumstances.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 编写模块很容易，但仅仅开发一个模块是不够的。您需要测试模块是否在所有情况下都能按预期执行所有操作。
- en: It's hard to get something right in the first attempt. Trying out things while
    you are working on them is a common technique. It's one of the main reasons why
    dynamic programming and programming environments with short edit and execute cycles
    have become very popular.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次尝试很难成功。在工作时尝试一些东西是一种常见的技巧。这是为什么动态编程和具有短编辑和执行周期的编程环境变得非常流行的主要原因之一。
- en: The next section, *Quick local execution*, deals with the problem of running
    your modules locally, isolated as much as possible from your Ansible environment.
    This can be of great help during early development and debugging.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节，*快速本地执行*，涉及到在尽可能与您的Ansible环境隔离的情况下运行您的模块的问题。这在早期开发和调试过程中非常有帮助。
- en: Quick local execution
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速本地执行
- en: While developing a module, you might want to shorten your edit/run cycle and
    skip the overhead of actually executing your module through Ansible. As we saw
    in our previous Bash examples, the execution environment is very simple, and it's
    pretty straightforward to run the scripts in isolation until you get them right.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发模块时，您可能希望缩短编辑/运行周期，并跳过实际通过Ansible执行模块的开销。正如我们在之前的Bash示例中看到的那样，执行环境非常简单，直接运行脚本直到正确是非常直接的。
- en: However, things get trickier with Python modules using the AnsibleModule boilerplate.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用AnsibleModule样板的Python模块会变得更加棘手。
- en: 'Ansible performs some black magic under the hood of your Python script in order
    to not require Ansible components to be installed on the target machine. You can
    explore this technique by employing two simple tricks:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible在Python脚本的幕后进行了一些黑魔法，以便不需要在目标机器上安装Ansible组件。您可以通过采用两个简单的技巧来探索这种技术：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Executing this module locally will generate the file `/tmp/magicmirror`, which
    contains code that has been augmented by lining parts of Ansible runtime. It allows
    you to benefit from shared functionality and avoid introducing dependencies on
    the target machine.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地执行此模块将生成文件`/tmp/magicmirror`，其中包含已经通过对Ansible运行时进行了增强的代码。这使您能够从共享功能中受益，并避免在目标机器上引入依赖项。
- en: Another way is to set the environment variable, `ANSIBLE_KEEP_REMOTE_FILES=1`,
    on the controller host to prevent Ansible from cleaning up the remote machine
    by not deleting the generated Ansible scripts, which can then be used for debugging
    your module.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是在控制主机上设置环境变量`ANSIBLE_KEEP_REMOTE_FILES=1`，以防止Ansible清理远程机器，不删除生成的Ansible脚本，然后可以用于调试您的模块。
- en: Best practices
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: 'A module can always be improved by following some best practices while they
    are being developed. This helps in keeping the modules sanitized and easy to understand
    and extend when required. Some of the best practices which should be followed
    are:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循一些最佳实践，模块始终可以在开发过程中得到改进。这有助于在需要时保持模块的卫生和易于理解和扩展。应该遵循的一些最佳实践包括：
- en: The module must be self-contained
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块必须是自包含的
- en: Reduce the dependencies to the minimum
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将依赖项减少到最低限度
- en: Write the error cause in the `msg` key
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“msg”键中写入错误原因
- en: Try to return only useful output
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量只返回有用的输出
- en: And don't forget the most important part of developing a module–it should return
    a valid JSON.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 开发模块最重要的部分是不要忘记它应该返回有效的JSON。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned the basics of writing a module. You grew to understand
    module placements and things to keep in mind while developing custom modules.
    You went through writing modules in Bash and moved forward with understanding
    the AnsibleModule boilerplate, hence ending up developing sample Ansible modules
    both in Bash and Python. The chapter also covered the best practices that should
    be followed.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了编写模块的基础知识。您了解了模块的放置位置以及在开发自定义模块时需要牢记的事项。您学习了如何在Bash中编写模块，并了解了AnsibleModule样板，因此最终开发了在Bash和Python中的示例Ansible模块。本章还涵盖了应该遵循的最佳实践。
- en: In the next chapter, you will understand error handling and go through a real-life
    scenario where you can create an Ansible module and exploit the power of Ansible.
    The next chapter will also cover some complex data structures with Ansible.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解错误处理，并通过一个真实场景，您可以创建一个Ansible模块并利用Ansible的强大功能。下一章还将涵盖一些复杂的数据结构与Ansible。
