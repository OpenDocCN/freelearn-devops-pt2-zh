["```\n---\n- hosts: all\n  vars:\n    data: \"{{ lookup('file', './test-file.txt') }}\"\n  tasks:\n- debug: msg=\"File contents {{ data }}\"\n```", "```\nFile: city-data.csv\nCity, Area, Population\nPune, 700, 2.5 Million\nBangalore, 741, 4.3 Million\nMumbai, 603, 12 Million\n```", "```\n---\n- hosts: all \n  tasks:\n    - debug:\n        msg=\"Population of Mumbai is {{lookup('csvfile', 'Mumbai file=city-data.csv delimiter=, col=2')}}\"\n```", "```\n---\n- hosts: all \n  tasks:\n    - debug: msg=\"TXT record {{ lookup('dig', 'yahoo.com./TXT') }}\" \n    - debug: msg=\"IP of yahoo.com {{lookup('dig', 'yahoo.com', wantlist=True)}}\"\n```", "```\n**- debug: msg=\"Reverse DNS for 8.8.8.8 is {{ lookup('dig', '8.8.8.8/PTR') }}\"**\n\n```", "```\n[default]\nbind_host = 0.0.0.0\nbind_port = 9696\nlog_dir = /var/log/network\n\n[plugins]\ncore_plugin = rdas-net\nfirewall = yes \n```", "```\n---\n- hosts: all\n  tasks:\n      - debug: msg=\"core plugin {{ lookup('ini', 'core_plugin file=network.ini section=plugins') }}\"\n      - debug: msg=\"core plugin {{ lookup('ini', 'bind_port file=network.ini section=default') }}\"\n```", "```\n---\n- hosts: all \n  tasks:\n    - name: Install packages\n      yum: name={{ item }} state=present\n      with_items:\n        - vim\n        - wget\n        - ipython\n```", "```\n---\n- hosts: all \n  tasks:\n    - name: Create directories with specific permissions\n      file: path={{item.dir}} state=directory mode={{item.mode | int}}\n      with_items:\n        - { dir: '/tmp/ansible', mode: 755 }\n        - { dir: '/tmp/rdas', mode: 755 }\n```", "```\n- **name**: Clean up old file. Keep only the latest 5 \n  **action**: shell /tmp/clean-files.sh \n  **register**: number \n  **until**: number.stdout.find('5') != -1 \n  **retries**: 6 \n  **delay**: 10\n```", "```\n#!/bin/bash \n\n**DIR_CLEAN**='/tmp/test' \ncd $DIR_CLEAN \n**OFNAME**=`ls -t | tail -1` \nrm -f $OFNAME \n**COUNT**=`ls | wc -w` \necho $COUNT\n```", "```\nimport socket\n\nclass LookupModule(object):\n\n    def __init__(self, basedir=None, **kwargs):\n        self.basedir = basedir\n\n    def run(self, hostname, inject=None, **kwargs):\n        hostname = str(hostname)\n        try:\n            host_detail = socket.gethostbyname(hostname)\n        except:\n            host_detail = 'Invalid Hostname'\n        return host_detail\n```", "```\n---\n\n- hosts: all \n  tasks:\n    - debug:\n        msg=\"{{lookup('hostip', item, wantlist=True)}}\"\n      with_items:\n        - www.google.co.in\n        - saliux.wordpress.com\n        - www.twitter.com\n```", "```\nimport json\n\nclass CallbackModule(object):\n\n    ''' \n    This logs the debug variable 'var' and writes it in a JSON file\n    '''\n\n    def runner_on_ok(self, host, result):\n        try:\n            if result['var']['dmi_data[\\'msg\\']']:\n                fname = '%s.json' % host\n                with open(fname, 'w') as ofile:\n                    json.dump(result['var']['dmi_data[\\'msg\\']'], ofile)\n        except:\n            pass\n```", "```\n---\n- hosts: all \n  tasks:\n    - name: Run the shell script\n      shell: /tmp/test.sh\n      register: output\n\n    - name: Print status\n    - debug: msg=\"Success\"\n      when: output|success\n\n    - name: Print status\n    - debug: msg=\"Failed\"\n      when: output|failed\n```", "```\n<, lt, <=, le, >, gt, >=, ge, ==, =, eq, !=, <>, ne\n```", "```\n{{ host_ip | ipv4 }}\n```", "```\n{{ host_ip | ipv6 }}\n```", "```\n# Import dependencies\n\ndef custom_filter(**kwargs):\n    # filter operation code\n\nclass FilterModule(object):\n    def filter(self):\n        return {\n            'custom_filter': custom_filter\n        }   \n```"]