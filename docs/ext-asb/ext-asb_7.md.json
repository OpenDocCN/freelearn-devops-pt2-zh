["```\n---\n\n- hosts: all \n  user: root\n  roles:\n    - { role: common }\n\n- hosts: database\n  user: root\n  roles:\n    - { role: database }\n\n- hosts: webapp\n  user: root\n  roles:\n    - { role: webapp }\n```", "```\n---\n- name: Create hosts file for each machine\n  template: src hosts.j2 dest=/etc/hosts\n\n- name: Copy Repo file\n  copy: src=local-tree.repo dest=/etc/yum.repos.d/\n\n- name: Update the system\n  yum: name=* state=latest\n```", "```\n---\n- name: Install MySQL databse server\n  yum: name=mysql state=present\n\n- name: Start MySQL service\n  service: name=mysqld status=started\n\n- name: Create a directory to copy the setup script\n  file: path=/temp/configdb state=directory mode=0755\n\n- name: Copy script to create database tables\n  copy: src=configdb.sh dest=/temp/configdb\n\n- name: Run configdb.sh to create database tables\n  shell: configdb.sh chdir=/temp/configdb\n```", "```\n---\n- name: Install HTTP server\n  yum: name=httpd state=present\n\n- name: Start httpd service\n  service: name=httpd state=started\n\n- name: Create temporary directory to copy over the rpm \n  file: path=/temp/webapp state=directory mode=0755\n\n- name: Copy the application package to the target machine\n  copy: src=webapp-2.4.16-1.fc22.x86_64 dest=/temp/webapp\n\n- name: Install the webapp\n  command: yum install -y ./webapp-2.4.16-1.fc22.x86_64 chdir=/temp/webapp\n\n- name: Copy configuration script\n  copy: src=configweb.sh dest=/temp/webapp\n\n- name: Execute the configuration script\n  shell: configweb.sh chdir=/temp/webapp\n```", "```\n---\n\n- name: Create directory to clone git repo\n  file: path=/tmp/gitrepo state=directory mode=0755\n\n- name: Clone Git repo\n  git: repo={{ item }} dest=/tmp/gitrepo\n  with_items:\n    - \"{{ git_repo }}\"\n\n- name: Set selinux to permissive\n  selinux: policy=targeted state=permissive\n\n- name: Run install.sh to deploy application\n  shell: install.sh chdir=/tmp/gitrepo/example\n```", "```\n---\n\n- name: Make directory to store RPM \n  file: path=/tmp/deploy state=directory mode=0755\n\n- name: Download the RPM to Directory\n  get_url: url={{ item }} dest=/tmp/deploy\n  with_items:\n    - \"{{ rpm_link }}\"\n\n- name: Install RPM \n  command: yum install -y *.rpm chdir=/tmp/deploy\n\n- name: Set Selinux to Enforcing\n  selinux: policy=targeted state=enforcing\n```", "```\n---\n\n- hosts: application\n  user: rdas\n  sudo: yes \n  roles:\n    - { role: development, tags: ['development'] }\n    - { role: qe_ready, tags: ['qe'] }\n```", "```\n**# ansible-playbook -i hosts -t development demo-tag.yaml**\n\n```", "```\nfrom pyes import *\nimport json\n\n# Change this to your Elasticsearch URL\nES_URL = '10.3.10.183:9200'\n\ndef index_elasticsearch(host, result):\n    '''  index results in elasticsearch '''\n    # Create connection object to Elasticsearch instance\n    conn = ES(ES_URL)\n    # Create index 'infra' if not present. Used for the first function call\n    if not conn.indices.exists_index('infra'):\n        conn.indices.create_index('infra')\n    # Index results in Elasticsearch.\n    # infra: index name\n    # dmidecode: document type\n    # host: ID\n    conn.index(result, 'infra', 'dmidecode', host)\n    print 'Data added to Elasticsearch'\n\nclass CallbackModule(object):\n    ''' \n    This adds the result JSON to ElasticSearch database\n    '''\n    def runner_on_ok(self, host, result):\n        try:\n            if result['var']['dmi_data[\\'msg\\']']:\n                index_elasticsearch(host, result['var']['dmi_data[\\'msg\\']'])\n        except:\n            pass\n```", "```\nfrom ansible.playbook import PlayBook\nfrom ansible.inventory import Inventory\nfrom ansible import callbacks\nfrom ansible import utils\n\nimport jinja2\nfrom tempfile import NamedTemporaryFile\nimport os\n\n# Boilerplace callbacks for stdout/stderr and log output\n\nutils.VERBOSITY = 0\nplaybook_cb = callbacks.PlaybookCallbacks(verbose=utils.VERBOSITY)\nstats = callbacks.AggregateStats()\nrunner_cb = callbacks.PlaybookRunnerCallbacks(stats, verbose=utils.VERBOSITY)\n\n# [Mock] Launch instance and return instance IP\n\ndef launch_instance(number):\n    '''\n    Launch instances on OpenStack and return a list of instance IPs\n\n    args:\n        number: Number of instances to launch\n    return:\n        target: List containing IPs of launched instances\n\n    This is a dummy function and does not contain code for launching instances\n    Launching an instance on OpenStack, AWS or a virtual machine is beyond the\n    scope of this book. The example focuses on creating a dynamic inventory\n    file to be used by Ansible.\n    '''\n    # return 2 IPs as the caller requested launching 2 instances.\n    target = ['192.168.10.20', '192.168.10.25']\n    return target\n\n# Dynamic Inventory\n\ninventory = \"\"\" \n[remote]\n{% for elem in public_ip_address  %}\n{{ elem }}\n{% endfor %}\n\"\"\"\ntarget = launch_instance(2)\ninventory_template = jinja2.Template(inventory)\nrendered_inventory = inventory_template.render({\n    'public_ip_address' : target\n})\n\n# Create a temporary file and write the template string to it\nhosts = NamedTemporaryFile(delete=False)\nhosts.write(rendered_inventory)\nhosts.close()\n\npb = PlayBook(\n    playbook = 'webserver.yaml',\n    host_list = hosts.name,\n    remote_user = 'rdas',\n    stats = stats,\n    callbacks=playbook_cb,\n    runner_callbacks=runner_cb,\n    private_key_file='id_rsa.pem'\n)\n\nresults = pb.run()\n\nplaybook_cb.on_stats(pb.stats)\n\nprint results\n```", "```\ninventory = \"\"\" \n[remote]\n{% for elem in public_ip_address  %}\n{{ elem }}\n{% endfor %}\n\"\"\"\n```", "```\ninventory_template = jinja2.Template(inventory)\nrendered_inventory = inventory_template.render({\n    'public_ip_address' : target\n})\n```", "```\nhosts = NamedTemporaryFile(delete=False)\nhosts.write(rendered_inventory)\nhosts.close()\n```", "```\n[bastion]\n10.68.214.8\n\n[database_servers]\n172.16.10.5\n172.16.10.6\n```", "```\nHost 172.16.*\n  ProxyCommand  ssh -q -A rdas@10.68.214.8 nc %h:%p\nHost *\n  ControlMaster    auto\n  ControlPath    ~/.ssh/mux-%r@%h:%p\n  ControlPersist    15m\n```", "```\n[ssh_connection]\nssh_args = -F ssh.cfg\ncontrol_path = ~/.ssh/mux-%r@%h:%p\n```", "```\n#!/bin/python\nimport openpyxl\nimport json\nimport os\n\nPATH = '/tmp'\n\ndef create_report_file():\n    ''' Create the initial workbook if not exists\n    '''\n    os.chdir(PATH)\n    wb = openpyxl.Workbook()\n    sheet = wb.get_active_sheet()\n    sheet.title = 'Infrastructure'\n    sheet['A1'] = 'Machine IP'\n    sheet['B1'] = 'Serial No'\n    sheet['C1'] = 'Manufacturer'\n    fname = 'Infra-Info.xlsx'\n    wb.save(fname)\n    return fname\n\ndef write_data(host, serial_no, manufacturer):\n    ''' Write data to Excel '''\n    os.chdir(PATH)\n    wb = openpyxl.load_workbook('Infra-Info.xlsx')\n    sheet = wb.get_sheet_by_name('Infrastructure')\n    rowNum = sheet.max_row + 1 \n    sheet.cell(row=rowNum, column=1).value = host\n    sheet.cell(row=rowNum, column=2).value = serial_no\n    sheet.cell(row=rowNum, column=3).value = manufacturer\n    wb.save('tmp-Infra-Info.xlsx')\n\ndef rename_file():\n    os.chdir(PATH)\n    os.remove('Infra-Info.xlsx')\n    os.rename('tmp-Infra-Info.xlsx', 'Infra-Info.xlsx')\n\ndef extract_data(host, result_json):\n    ''' Write data to the sheet\n    '''\n    serial_no = result_json['Hardware Specs']['System']['Serial Number']\n    manufacturer = result_json['Hardware Specs']['System']['Manufacturer']\n    if not os.path.exists('/tmp/Infra-Info.xlsx'):\n        create_report_file()\n    write_data(host, serial_no, manufacturer)\n    rename_file()\n\nclass CallbackModule(object):\n\n    def runner_on_ok(self, host, result):\n        try:\n            if result['var']['dmi_data[\\'msg\\']']:\n                extract_data(host, result['var']['dmi_data[\\'msg\\']'])\n        except:\n            pass\n```", "```\n**ansible-playbook -i hosts dmidecode.yaml --forks 1**\n\n```"]