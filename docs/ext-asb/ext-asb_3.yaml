- en: Chapter 3. Digging Deeper into Ansible Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。深入了解Ansible模块
- en: 'Having already learned the basics, this chapter will take you through more
    advanced topics in Ansible such as:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 已经学习了基础知识，本章将带您深入了解Ansible的更高级主题，例如：
- en: Making modules support safe execution in dry run mode
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使模块支持在干扰模式下安全执行
- en: Understanding how arguments are parsed in an Ansible module
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解如何在Ansible模块中解析参数
- en: Handling complex arguments and data structures
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理复杂参数和数据结构
- en: A real life scenario where you can exploit the power of Ansible by creating
    a custom module to suit your needs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个现实生活场景，您可以利用Ansible的强大功能创建一个定制模块以满足您的需求
- en: Dry run (check mode)
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 干扰（检查模式）
- en: So, you decided to write your own module which makes a few configuration changes
    to the system based on the user input. Considering the code has to be run on production,
    being able to run a simulation of your yet to be published configuration is quite
    important. Not only is it likely that you'll want to know if your configurations
    are actually correct before applying them, but you might also want to understand
    what changes the playbook execution will entail.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您决定编写自己的模块，根据用户输入对系统进行一些配置更改。考虑到代码必须在生产环境中运行，能够运行尚未发布的配置的模拟非常重要。您不仅可能希望在应用它们之前知道您的配置是否正确，而且您可能还想了解Playbook执行将涉及哪些更改。
- en: Since Ansible does not know the consequences of a module's execution, it just
    follows instructions from the playbook. In the dry run mode, it will simply print
    out all the modules it will execute and skip the actual execution. If the module
    does not support check mode, the module is simply skipped in check mode during
    execution.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Ansible不知道模块执行的后果，它只是按照Playbook的指示。在干扰模式下，它将简单地打印出所有它将执行的模块并跳过实际执行。如果模块不支持检查模式，则在执行期间检查模式下简单地跳过该模块。
- en: It's useful to show details of any changes a module makes in the state of the
    system or target machine. However, Ansible can only know that by asking the module
    to perform a simulation and return with a confirmation on a state change. There
    may be some tasks in your Ansible playbook that use some modules that return an
    output. These might be stored in variables, and the following module execution
    depends on them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 模块对系统状态或目标机器的任何更改的详细信息很有用。但是，Ansible只能通过要求模块执行模拟并返回状态更改确认来了解这一点。您的Ansible Playbook中可能有一些任务使用一些返回输出的模块。这些可能存储在变量中，并且后续模块执行取决于它们。
- en: 'In order to tell Ansible that the module supports check mode and it''s safe
    to run in dry run mode, all that is required is to set a `supports_check_mode`
    flag to true in the Ansible module. This can be done as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了告诉Ansible模块支持检查模式并且可以在干扰模式下安全运行，只需在Ansible模块中将`supports_check_mode`标志设置为true。可以按如下方式完成：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code in a module enables a module to be executed in dry run mode.
    You can run your Ansible playbook in check mode using the following command:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 模块中的前述代码使模块能够以干扰模式执行。您可以使用以下命令在检查模式下运行您的Ansible Playbook：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will do a dry run for all the modules that support check mode and report
    back any changes that would be made on the target machine without actually making
    the changes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这将对所有支持检查模式的模块进行干扰，并在不实际进行更改的情况下报告目标机器上可能进行的任何更改。
- en: Loading modules
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载模块
- en: Before diving into writing Ansible modules, it is necessary to understand how
    Ansible loads modules during runtime. Understanding how modules are loaded into
    Ansible allows you to understand the code flow and debug issues that might occur
    at runtime. To understand this, you must understand how an Ansible playbook is
    executed.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入编写Ansible模块之前，有必要了解Ansible在运行时如何加载模块。了解模块如何加载到Ansible中可以让你理解代码流程并调试可能在运行时发生的问题。要理解这一点，你必须了解Ansible
    playbook是如何执行的。
- en: 'As you already know, Ansible playbooks are executed using the `ansible-playbook`
    binary, which accepts a few arguments such as the inventory file and the Ansible
    play to run. If you take a look at the source code of `ansible-playbook`, you
    will notice the following import:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你已经知道的，Ansible playbooks是使用`ansible-playbook`二进制文件执行的，它接受一些参数，如清单文件和要运行的Ansible
    play。如果你查看`ansible-playbook`的源代码，你会注意到以下导入：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `constants.py` file is one of the major files that loads configurations
    into Ansible. It contains various configurations such as the default path where
    modules and plugins will be loaded into Ansible.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`constants.py`文件是将配置加载到Ansible中的主要文件之一。它包含各种配置，如模块和插件将被加载到Ansible的默认路径。'
- en: 'This file is responsible for defining the order in which the configurations
    will be loaded by Ansible. The default order in which the configurations are loaded
    into Ansible is:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件负责定义Ansible加载配置的顺序。配置加载到Ansible中的默认顺序是：
- en: '**ENV**: Environment variables.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**ENV**：环境变量。'
- en: '**CWD**: Current working directory (the directory where the Ansible playbook
    is executed.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**CWD**：当前工作目录（执行Ansible playbook的目录）。'
- en: '**HOME**: Configurations are then loaded from the configuration file in the
    home directory of the user. This configuration file is named `~/.ansible.cfg`.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**主页**：然后从用户的主目录中的配置文件中加载配置。此配置文件名为`~/.ansible.cfg`。'
- en: '**Global configuration file**: Ansible places a global configuration file in
    `/etc/ansible/ansible.cfg`.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**全局配置文件**：Ansible将全局配置文件放在`/etc/ansible/ansible.cfg`中。'
- en: Ansible uses the configuration that is found first in the preceding order.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible使用在前述顺序中找到的配置。
- en: 'The file also sets in a few default configuration values that are required
    for Ansible to execute a playbook. Some of these default configuration values
    are:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件还设置了一些默认配置值，这些值对于Ansible执行playbook是必需的。其中一些默认配置值是：
- en: '`forks`: The default number of forks is set to `5`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`forks`：默认的forks数量设置为`5`'
- en: '`remote_user`: This is set to active user on the controller node'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remote_user`：这个值设置为控制节点上的活动用户'
- en: '`private_key_file`: Sets the default private key to be used to communicate
    to the target hosts'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`private_key_file`：设置要用于与目标主机通信的默认私钥'
- en: '`Timeout`: The default value is set to `10`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Timeout`：默认值设置为`10`'
- en: Exploiting Ansible
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Ansible
- en: The previous chapter introduced you to the `AnsibleModule` boilerplate, which
    allowed you to write your own Ansible modules, accept arguments, and return results.
    Before moving on to developing an Ansible module, this section will explore the
    `AnsibleModule` boilerplate in detail from the code level.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 上一章介绍了`AnsibleModule`的样板，它允许你编写自己的Ansible模块，接受参数并返回结果。在继续开发Ansible模块之前，本节将从代码层面详细探讨`AnsibleModule`的样板。
- en: Diving deeper into the AnsibleModule boilerplate
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入了解AnsibleModule样板
- en: The `AnsibleModule` boilerplate, as discussed in the previous chapter, can be
    used by simply importing `ansible.module_utils.basic` statement.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在前一章中讨论的那样，`AnsibleModule`的样板可以通过简单地导入`ansible.module_utils.basic`语句来使用。
- en: As soon as you create an object for the `AnsibleModule` class, a few properties
    are set for the object, including the `argument_spec` property as specified while
    creating the `AnsibleModule` object. By default, `supports_check_mode` property
    is set to `false`, and `check_invalid_arguments` is set to `true`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦为`AnsibleModule`类创建了对象，对象的一些属性就会被设置，包括在创建`AnsibleModule`对象时指定的`argument_spec`属性。默认情况下，`supports_check_mode`属性设置为`false`，`check_invalid_arguments`设置为`true`。
- en: 'The `AnsibleModule` class loads the arguments and parameters into the `params`
    variable using the `load_params` method. The following is the source code for
    the `load_params` method:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`AnsibleModule`类使用`load_params`方法将参数和参数加载到`params`变量中。以下是`load_params`方法的源代码：'
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, `params` is a dictionary. Python allows you to read values corresponding
    to a key in a dictionary by using the `get` method. Thus, if you need to access
    any argument, you can simply use the `get` method on the `params` dictionary variable.
    This is how Ansible reads and accepts arguments in a module.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，`params`是一个字典。Python允许您使用`get`方法从字典中读取与键对应的值。因此，如果您需要访问任何参数，可以简单地在`params`字典变量上使用`get`方法。这就是Ansible读取和接受模块中的参数的方式。
- en: Now that you have learned how to develop a module, accept arguments, and handle
    errors, let's implement this knowledge in a real-life scenario.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了如何开发模块，接受参数并处理错误，让我们在实际情况中实现这些知识。
- en: So, let's say you have a huge infrastructure at your dispense, which is working
    great. You have a great configuration management system in place, as well as a
    monitoring system that keeps a track of all the machines and notifies you in case
    of failure. Everything is working fine, when one fine day, you need to audit your
    infrastructure. You need details of each and every machine such as BIOS details,
    system specifications like manufacturer and serial numbers, and so on.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，假设您拥有一个庞大的基础架构，一切都运行良好。您已经有一个很好的配置管理系统，以及一个监控系统，可以跟踪所有机器的情况，并在发生故障时通知您。一切都很顺利，直到有一天，您需要审计您的基础架构。您需要每台机器的详细信息，比如BIOS详细信息、制造商和序列号等系统规格。
- en: A simple solution is to run `dmidecode` on each machine and collate the gathered
    data. Well, running `dmidecode` on individual machines and collating the details
    is a pain. Let's exploit the power of Ansible to deal with this situation.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一种简单的解决方案是在每台机器上运行`dmidecode`并整理收集到的数据。嗯，在单独的机器上运行`dmidecode`并整理细节是一件麻烦的事情。让我们利用Ansible的力量来处理这种情况。
- en: Having learned how to create a module, you can use the Python library for `dmidecode`
    and write a module of your own, which can then be run on your whole infrastructure.
    The added advantage is you can have the data in machine parsable form, say JSON,
    which can later be used to generate reports.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 学会了如何创建模块后，您可以使用Python库`dmidecode`并编写自己的模块，然后在整个基础架构上运行。额外的好处是您可以将数据以机器可解析的形式，比如JSON，保存下来，以后可以用来生成报告。
- en: 'Let''s name the module `dmidecode` and place it in the `library` directory
    in the root of the Ansible playbook. The following is the source code for the
    `dmidecode` module:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将模块命名为`dmidecode`，并将其放在Ansible剧本根目录中的`library`目录中。以下是`dmidecode`模块的源代码：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, we are collecting data such as processor specs, BIOS specs,
    and system specs; you can always extend the module based on your personal needs.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们正在收集处理器规格、BIOS规格和系统规格等数据；您可以根据个人需求随时扩展模块。
- en: The module accepts a Boolean argument, `save`, from the user, which, if set
    to `true`, will write the result to a JSON file on the remote machine.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块接受来自用户的布尔参数`save`，如果设置为`true`，将把结果写入远程机器上的JSON文件。
- en: You may notice that the module has an import line, `import dmidecode`, at the
    beginning. The statement imports the `dmidecode` Python library. The library is
    provided by the `python-dmidecode` package. Since the module depends on the `dmidecode`
    Python library, this is required to be installed on the target machine. This can
    be handled in the Ansible playbook.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到模块在开头有一个导入行`import dmidecode`。该语句导入了`dmidecode` Python库。该库由`python-dmidecode`软件包提供。由于模块依赖于`dmidecode`
    Python库，因此需要在目标机器上安装该库。这可以在Ansible playbook中处理。
- en: 'Dependencies can be specified in the `global_vars` file and can be used by
    the variable name in the Ansible playbook. This is done to prevent making changes
    to the Ansible play in case there is a change in the dependency. This can be specified
    in the `global_vars` directory as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖项可以在`global_vars`文件中指定，并且可以在Ansible playbook中使用变量名。这样做是为了防止在依赖项发生更改时对Ansible
    play进行更改。可以在`global_vars`目录中指定如下：
- en: '`global_vars/all`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`global_vars/all`'
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So, the Ansible module is ready and the dependencies are taken care of. You
    will now have to create the Ansible play, which will execute the `dmidecode` module
    on the target machines. Let's name the Ansible `play dmidecode.yml`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Ansible模块已准备就绪，并且依赖项已得到处理。现在，您需要创建Ansible play，该play将在目标机器上执行`dmidecode`模块。让我们将Ansible命名为`play
    dmidecode.yml`。
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Executing the Ansible playbook will run the `dmidecode` module on the remote
    host group. Since `save` is set to `true`, this will create a `dmidecode.json`
    file on the remote host containing the required information.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 执行Ansible playbook将在远程主机组上运行`dmidecode`模块。由于`save`设置为`true`，这将在远程主机上创建一个包含所需信息的`dmidecode.json`文件。
- en: Complex arguments
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复杂参数
- en: Since the Ansible module is just another code that can accept and parse arguments,
    there might be a question of whether it's capable of handling complex variable
    sets. Although Ansible is used as a deployment, orchestration, and configuration
    management tool, it is designed to handle simple arguments, and it is still capable
    of handling complex variables. This is an advanced topic, and since this is not
    generally used, this section will cover it in brief.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Ansible模块只是另一种可以接受和解析参数的代码，可能会有一个问题，即它是否能够处理复杂的变量集。尽管Ansible用作部署、编排和配置管理工具，但它设计用于处理简单参数，仍然能够处理复杂变量。这是一个高级主题，由于通常不使用，本节将简要介绍它。
- en: You have already learned how to pass arguments to an Ansible module. However,
    complex arguments are handled differently.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学会了如何向Ansible模块传递参数。但是，复杂参数的处理方式不同。
- en: Reading complex arguments
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取复杂参数
- en: 'Let''s take an example of the complex variable, `complex_var`, which, as usual,
    we define in `group_vars/all`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以复杂变量`complex_var`为例，通常情况下，我们在`group_vars/all`中定义它。
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding variable is of the dictionary type (that is a key value pair).
    For an Ansible module to parse this kind of argument, we need to make a few changes
    in the way complex variables are passed in the module and the way they are parsed.
    We write a custom module that accepts this complex variable as an argument and
    prints the values for the associated keys. We name the module `complex`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的变量是字典类型（即键值对）。为了使Ansible模块解析这种类型的参数，我们需要对模块中传递复杂变量的方式和它们的解析方式进行一些更改。我们编写一个自定义模块，接受这个复杂变量作为参数，并打印与关联键对应的值。我们将该模块命名为`complex`。
- en: 'The following is the code for the `complex.py` module:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`complex.py`模块的代码：
- en: '**Ansible Module:** `library/complex.py`'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ansible模块：** `library/complex.py`'
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding module accepts the complex variable and prints their associated
    values for the respective keys. The way complex variables are passed to the Ansible
    module is specified in the Ansible play.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的模块接受复杂变量并打印它们对应的键的关联值。复杂变量如何传递给Ansible模块在Ansible play中指定。
- en: 'The following is the Ansible playbook, which takes in complex arguments and
    passes them on to the complex module:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Ansible playbook，它接受复杂参数并将它们传递给复杂模块：
- en: '**Ansible play:** `complex.yaml`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ansible play:** `complex.yaml`'
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The Ansible playbook, when executed, prints the values associated with the keys
    `key0` and `key1`, respectively.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行Ansible playbook时，分别打印与键`key0`和`key1`关联的值。
- en: Summary
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about making your module support dry runs by introducing
    the `supports_check_mode` flag. You also learned how arguments are handled in
    Ansible. The chapter covered a real-life scenario where a custom Ansible module
    was used to perform a hardware audit on the infrastructure. The chapter also covered
    in brief how complex variables are handled with Ansible.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了如何通过引入`supports_check_mode`标志使您的模块支持干运行。您还了解了在Ansible中如何处理参数。本章涵盖了一个真实场景，其中使用自定义Ansible模块对基础设施进行硬件审计。本章还简要介绍了如何在Ansible中处理复杂变量。
- en: In the next chapter, you will learn about Ansible plugins, why are they needed,
    and how they fit in the general Ansible structure. The chapter will also cover
    the Python plugin API.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将了解Ansible插件，为什么它们是必需的，以及它们如何适用于一般的Ansible结构。本章还将介绍Python插件API。
