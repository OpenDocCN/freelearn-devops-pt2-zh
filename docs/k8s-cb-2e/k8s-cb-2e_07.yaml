- en: Building Kubernetes on GCP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GCP上构建Kubernetes
- en: 'In this chapter, we will use **Google Cloud Platform** (**GCP**) in the following
    recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在以下食谱中使用**Google Cloud Platform**（**GCP**）：
- en: Playing with GCP
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩转GCP
- en: Setting up managed Kubernetes via **Google Kubernetes Engine** (**GKE**)
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过**Google Kubernetes Engine**（**GKE**）设置托管的Kubernetes
- en: Exploring Kubernetes CloudProvider on GKE
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索GKE上的Kubernetes CloudProvider
- en: Managing a Kubernetes cluster on GKE
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GKE上管理Kubernetes集群
- en: Playing with GCP
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩转GCP
- en: GCP is getting popular in the public cloud industry. It has concepts similar
    to AWS, such as VPC, a compute engine, persistent disks, load balancing, and several
    managed services. The most interesting service is GKE, which is the managed Kubernetes
    cluster. We will explore how to use GCP and GKE.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: GCP在公共云行业变得越来越受欢迎。它有类似于AWS的概念，如VPC、计算引擎、持久性磁盘、负载均衡和几个托管服务。最有趣的服务是GKE，这是托管的Kubernetes集群。我们将探索如何使用GCP和GKE。
- en: Getting ready
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To use GCP, you need to have a Google account such as Gmail ([https://mail.google.com/mail/](https://mail.google.com/mail/))),
    which many people already have. Then sign up to GCP using your Google account
    by following these steps:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用GCP，您需要拥有一个谷歌账号，比如Gmail（[https://mail.google.com/mail/](https://mail.google.com/mail/)），很多人已经有了。然后按照以下步骤使用您的谷歌账号注册GCP：
- en: Go to the [https://cloud.google.com](https://cloud.google.com) website then
    click the Try it free button
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://cloud.google.com](https://cloud.google.com)网站，然后点击“免费试用”按钮
- en: Log in to Google using your Google account
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的谷歌账号登录谷歌
- en: Register with GCP and enter your personal information and billing information
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册GCP并输入个人信息和结算信息
- en: That's it!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！
- en: Once registration is complete, you'll see the GCP Web Console page. In the beginning,
    it may ask you to create one project; the default name could be My First Project.
    You can keep it, but we will create another project in this chapter, the better
    to help you understand.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注册完成后，您将看到GCP Web控制台页面。一开始，它可能会要求您创建一个项目；默认名称可能是“My First Project”。您可以保留它，但在本章中我们将创建另一个项目，以帮助您更好地理解。
- en: The GCP Web Console is enough as a first step. But to keep using the Web Console
    is not recommended for DevOps, because human manual input always causes human
    errors and Google might change the Web Console design in the future.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: GCP Web控制台作为第一步就足够了。但是不建议继续使用Web控制台进行DevOps，因为人工手动输入总会导致人为错误，而且Google可能会在将来更改Web控制台的设计。
- en: Thus, we will use the CLI. GCP provides a CLI tool called Cloud SDK ([https://cloud.google.com/sdk/](https://cloud.google.com/sdk/)).
    So, let's create one new GCP project and then install Cloud SDK on your machine.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用CLI。GCP提供了一个名为Cloud SDK的CLI工具（[https://cloud.google.com/sdk/](https://cloud.google.com/sdk/)）。因此，让我们创建一个新的GCP项目，然后在您的计算机上安装Cloud
    SDK。
- en: Creating a GCP project
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个GCP项目
- en: 'We will create a new project from scratch by following steps. It will help
    you to understand how does GCP project works:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下步骤从头开始创建一个新项目。这将帮助您了解GCP项目的工作原理：
- en: 'Go to the project page by clicking the My First Project link:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“My First Project”链接转到项目页面：
- en: '![](assets/a34389e9-cb29-4c1b-8f1f-4df4957081e7.png)Navigating to the project
    link'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/a34389e9-cb29-4c1b-8f1f-4df4957081e7.png)导航到项目链接'
- en: 'You may see your own projects to choose from, but this time click the + button
    to create a new one:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能会看到您自己的项目可供选择，但这次请点击“+”按钮创建一个新项目：
- en: '![](assets/47198482-4866-4daa-9443-182e99c7c608.png)Creating a new project'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/47198482-4866-4daa-9443-182e99c7c608.png)创建一个新项目'
- en: Type the project name as `Kubernetes Cookbook`. Then GCP will generate and assign
    a project ID such as kubernetes-cookbook-12345. Please remember this project ID.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目名称输入为`Kubernetes Cookbook`。然后GCP将生成并分配一个项目ID，如kubernetes-cookbook-12345。请记住这个项目ID。
- en: You may notice that your project ID is NOT kubernetes-cookbook, like kubernetes-cookbook-194302 in
    the screenshot as shown in the following screenshot. And even you click Edit to
    attempt to change it to kubernetes-cookbook, it doesn't allow it, because the
    project ID is a unique string for all GCP users. And we already took the kubernetes-cookbook project
    ID.![](assets/0fd87e3a-8715-4e46-a992-f368a6bf95e4.png)Project name and Project
    ID
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到您的项目 ID 不是 kubernetes-cookbook，就像屏幕截图中显示的 kubernetes-cookbook-194302
    一样。即使您尝试点击“编辑”来尝试将其更改为 kubernetes-cookbook，也不允许，因为项目 ID 是所有 GCP 用户的唯一字符串。而我们已经使用了
    kubernetes-cookbook 项目 ID。![](assets/0fd87e3a-8715-4e46-a992-f368a6bf95e4.png)项目名称和项目
    ID
- en: 'After a few minutes, your project is ready to use. Go back to the project selection
    page on the top banner and then select your Kubernetes Cookbook project:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几分钟后，您的项目就准备好使用了。返回顶部横幅上的项目选择页面，然后选择您的 Kubernetes Cookbook 项目：
- en: '![](assets/93685e0e-2de7-4b92-bc57-d8240fcb7af6.png)Selecting a Kubernetes
    Cookbook project'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/93685e0e-2de7-4b92-bc57-d8240fcb7af6.png)选择 Kubernetes Cookbook
    项目'
- en: Done! You can at any time switch to your project and the Kubernetes Cookbook
    project. That is is isolated environment; any VPC, VM, IAM users and even billing
    methods are independent.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！您随时可以切换到您的项目和 Kubernetes Cookbook 项目。这是一个隔离的环境；任何 VPC、VM、IAM 用户甚至计费方法都是独立的。
- en: Installing Cloud SDK
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Cloud SDK
- en: Next, install Cloud SDK on your machine. It supports the Windows, Mac, and Linux
    platforms. All of these require a Python interpreter version 2.7, but most macOS
    and Linux installs use the defaults.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在您的计算机上安装 Cloud SDK。它支持 Windows、Mac 和 Linux 平台。所有这些都需要 Python 解释器版本 2.7，但大多数
    macOS 和 Linux 安装都使用默认设置。
- en: On the other hand, Windows does't have the Python interpreter by default. However,
    in the Cloud SDK installer for Windows, it is possible to install Python. Let's
    install Cloud SDK on Windows and macOS step by step.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Windows 默认情况下没有 Python 解释器。但是，在 Windows 的 Cloud SDK 安装程序中，可以安装 Python。让我们逐步在
    Windows 和 macOS 上安装 Cloud SDK。
- en: Installing Cloud SDK on Windows
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Cloud SDK
- en: 'Cloud SDK provides an installer for Windows. It also include Python interpreter
    for Windows as well. Please follow the following steps to install on your Windows
    machine:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud SDK 为 Windows 提供了一个安装程序。它还包括 Windows 的 Python 解释器。请按照以下步骤在您的 Windows 计算机上安装：
- en: Download the Cloud SDK installer on Windows ([https://dl.google.com/dl/cloudsdk/channels/rapid/GoogleCloudSDKInstaller.exe](https://dl.google.com/dl/cloudsdk/channels/rapid/GoogleCloudSDKInstaller.exe)).
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 上下载 Cloud SDK 安装程序 ([https://dl.google.com/dl/cloudsdk/channels/rapid/GoogleCloudSDKInstaller.exe](https://dl.google.com/dl/cloudsdk/channels/rapid/GoogleCloudSDKInstaller.exe))。
- en: Run the Cloud SDK installer.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 Cloud SDK 安装程序。
- en: 'If you''ve never installed a Python interpreter on your Windows machine, you
    have to choose the Bundled Python option:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从未在 Windows 计算机上安装过 Python 解释器，您必须选择“捆绑的 Python”选项：
- en: '![](assets/f28b2426-efed-4bf7-8cd6-5c7dd9758275.png)Cloud SDK installer for
    Windows'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/f28b2426-efed-4bf7-8cd6-5c7dd9758275.png)Windows 的 Cloud SDK 安装程序'
- en: Other than that, proceed with the installation with the default options.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除此之外，使用默认选项继续安装。
- en: 'Once the installation is done, you can find Google Cloud SDK Shell in the Google
    Cloud SDK program group. Click it to launch a Google Cloud SDK Shell:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，您可以在 Google Cloud SDK 程序组中找到 Google Cloud SDK Shell。单击它以启动 Google Cloud
    SDK Shell：
- en: '![](assets/1232e920-4d5f-44d9-91c5-52a00344d03e.png)Google Cloud SDK Shell
    in the Google Cloud SDK program group'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/1232e920-4d5f-44d9-91c5-52a00344d03e.png)Google Cloud SDK 程序组中的
    Google Cloud SDK Shell'
- en: 'Type `gcloud info` to check whether you can see the Cloud SDK version:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键入 `gcloud info` 以检查您是否可以查看 Cloud SDK 版本：
- en: '![](assets/443c01fd-9b87-450e-a00e-1f2351558d22.png)Running the gcloud command
    on Windows'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/443c01fd-9b87-450e-a00e-1f2351558d22.png)在 Windows 上运行 gcloud 命令'
- en: Installing Cloud SDK on Linux and macOS
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Linux 和 macOS 上安装 Cloud SDK
- en: 'Installing Cloud SDK on both Linux and macOS follows the steps listed here.
    Let''s install Cloud SDK under your home directory:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux和macOS上安装Cloud SDK遵循这里列出的步骤。让我们在您的主目录下安装Cloud SDK：
- en: Open the Terminal.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: 'Type the following command to download and run the Cloud SDK installer:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令以下载并运行Cloud SDK安装程序：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It asks for your desired installation directory. By default, it is under your
    home directory. So, type `return`:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会询问您期望的安装目录。默认情况下，它位于您的主目录下。因此，输入`return`：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It asks whether to send user usage data; it will send some information when
    it crashes. Based on your privacy policy, if don''t wish to send any data to Google,
    choose `n`. Otherwise choose `Y` to improve their quality:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会询问是否发送用户使用数据；当它崩溃时，它会发送一些信息。根据您的隐私政策，如果不希望向Google发送任何数据，请选择`n`。否则选择`Y`以提高它们的质量：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It asks whether to update `.bash_profile` by adding the `gcloud` command to
    your command search path; type `y` to proceed:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会询问是否通过将`gcloud`命令添加到您的命令搜索路径来更新`.bash_profile`；输入`y`继续：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Open another Terminal or type `exec -l $SHELL` to refresh your command search
    path:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开另一个终端或输入`exec -l $SHELL`以刷新您的命令搜索路径：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Type `gcloud info` to check whether you can see the Cloud SDK version:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`gcloud info`以检查是否可以看到Cloud SDK版本：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now you can start to configure Cloud SDK!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以开始配置Cloud SDK了！
- en: Configuring Cloud SDK
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Cloud SDK
- en: 'You can configure both Cloud SDK for Windows and for Linux/macOS, by using
    the following steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下步骤配置Windows和Linux/macOS的Cloud SDK：
- en: Launch Google Cloud SDK Shell (Windows) or open a Terminal (Linux/macOS).
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Google Cloud SDK Shell（Windows）或打开终端（Linux/macOS）。
- en: 'Type `gcloud init`; it asks you to log on to your Google account. Type `y`
    and press return:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`gcloud init`；它会要求您登录您的Google帐户。输入`y`并按回车键：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: It will open a web browser to navigate to the Google logon page; proceed to
    log on using your Google Account with the GCP account.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它将打开一个网页浏览器，导航到Google登录页面；继续使用您的Google帐户和GCP帐户登录。
- en: It asks you whether Cloud SDK can access your Google account information. Click
    the ALLOW button.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会询问您是否Cloud SDK可以访问您的Google帐户信息。点击“允许”按钮。
- en: 'Back to the Terminal—it asks you which project you want to use. Let''s choose
    the Kubernetes Cookbook project you made:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到终端-它会询问您要使用哪个项目。让我们选择您创建的“Kubernetes Cookbook”项目：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It asks you whether to configure `Compute Engine` or not. Let''s type `n` to
    skip it this time:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会询问您是否要配置`Compute Engine`。这次让我们输入`n`跳过它：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now you can start to use Cloud SDK to control GCP. Let's create VPC, subnet,
    and firewall rules, then launch a VM instance to set up our own GCP infrastructure.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以开始使用Cloud SDK来控制GCP。让我们创建VPC、子网和防火墙规则，然后启动一个VM实例来设置我们自己的GCP基础设施。
- en: If you chose the wrong project or you want to try again, at any time you can
    reconfigure your setup by the `gcloud init` command.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择了错误的项目或者想要重试，您可以随时通过`gcloud init`命令重新配置您的设置。
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'We will go through GCP''s basic functionality to set up an infrastructure under
    the Kubernetes Cookbook project. By using the `gcloud` command, we will create
    these components:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过使用`gcloud`命令，了解GCP的基本功能，以在“Kubernetes Cookbook”项目下设置基础设施。我们将创建这些组件：
- en: One new VPC
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个新的VPC
- en: Two subnets (`us-central1` and `us-east1`) in the VPC
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VPC中的两个子网（`us-central1`和`us-east1`）
- en: Three firewall rules (`public-ssh`, `public-http`, and `private-ssh`)
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个防火墙规则（`public-ssh`，`public-http`和`private-ssh`）
- en: We will add your ssh public key to a project-wide metadata
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将把您的ssh公钥添加到项目范围的元数据
- en: 'Overall, your infrastructure will resemble the following. Let''s configure
    the components one by one:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，您的基础设施将如下所示。让我们逐个配置组件：
- en: '![](assets/e360bc7c-6a8d-4dc1-83db-41c845ded19b.png)Target infrastructure'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/e360bc7c-6a8d-4dc1-83db-41c845ded19b.png)目标基础设施'
- en: Creating a VPC
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个VPC
- en: VPC in GCP is like AWS, but there's no need to bind a particular region, and
    also no need to set the CIDR address range. This means you can create a VPC that
    covers all regions. By default, your Kubernetes Cookbook project has a default
    VPC.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: GCP中的VPC类似于AWS，但无需绑定特定区域，也无需设置CIDR地址范围。这意味着您可以创建一个覆盖所有区域的VPC。默认情况下，您的Kubernetes
    Cookbook项目具有一个默认VPC。
- en: 'However, for a better understanding, let''s create a new VPC by following these
    steps:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，为了更好地理解，让我们按照以下步骤创建一个新的VPC：
- en: 'Run the `gcloud compute networks` command to create a new VPC. The name is
    `chap7 `and subnet-mode is `custom`, which means subnets are not created automatically.
    So we will add it manually in the next step:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`gcloud compute networks`命令来创建一个新的VPC。名称为`chap7`，子网模式为`custom`，这意味着子网不会自动创建。因此，我们将在下一步手动添加它：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Check the VPC list; you should have two VPCs, `default` VPC and `chap7` VPC:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查VPC列表；您应该有两个VPC，`default` VPC和`chap7` VPC：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creating subnets
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建子网
- en: 'Let''s create two subnets under the `chap7` VPC (network) by following these
    steps:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤在`chap7` VPC（网络）下创建两个子网：
- en: 'In order to create a subnet, you have to choose the region. By typing `gcloud
    compute regions list` you will know which regions are available to you:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建一个子网，您必须选择区域。通过输入`gcloud compute regions list`，您将知道哪些区域对您可用：
- en: '![](assets/9a46d42e-477c-436b-9b2c-fbef497e1ab9.png)Displaying a GCP region
    list'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/9a46d42e-477c-436b-9b2c-fbef497e1ab9.png)显示GCP区域列表'
- en: 'Let''s choose `us-central1` and `us-east1` to create two subnets under the `chap7`
    VPC with the following configuration:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们选择`us-central1`和`us-east1`，按照以下配置在`chap7` VPC下创建两个子网：
- en: '| **Subnet name** | **VPC** | **CIDR range** | **Region** |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| **子网名称** | **VPC** | **CIDR范围** | **区域** |'
- en: '| `chap7-us-central1` | `chap7` | `192.168.1.0/24` | `us-central1` |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `chap7-us-central1` | `chap7` | `192.168.1.0/24` | `us-central1` |'
- en: '| `chap7-us-east1` | `chap7` | `192.168.2.0/24` | `us-east1` |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `chap7-us-east1` | `chap7` | `192.168.2.0/24` | `us-east1` |'
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Check the following command to see whether subnets are configured properly
    or not:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查以下命令，以查看子网是否正确配置：
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Creating firewall rules
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建防火墙规则
- en: Firewall rules are similar to an AWS Security Group in that you can define incoming
    and outgoing packet filters. They use a network tag, which is a label, to distinguish
    between firewall rules and VM instances. So, VM instances can specify zero or
    some network tags, then the firewall rule will apply to the VM which has the same
    Network Tag.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 防火墙规则类似于AWS安全组，您可以定义传入和传出的数据包过滤器。它们使用网络标记来区分防火墙规则和VM实例。因此，VM实例可以指定零个或一些网络标记，然后防火墙规则将应用于具有相同网络标记的VM。
- en: 'Therefore, we need to set a target network tag while creating the firewall
    rule. Overall, we will create three firewall rules that have these configurations:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在创建防火墙规则时，我们需要设置一个目标网络标记。总的来说，我们将创建三个具有这些配置的防火墙规则：
- en: '| **Firewall rule name** | **Target VPC** | **Allow port** | **Allow from**
    | **Target network tag** |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| **防火墙规则名称** | **目标VPC** | **允许端口** | **允许来自** | **目标网络标记** |'
- en: '| `public-ssh` | `chap7` | `ssh` (22/tcp) | All (`0.0.0.0/0`) | public |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `public-ssh` | `chap7` | `ssh` (22/tcp) | 所有 (`0.0.0.0/0`) | public |'
- en: '| `public-http` | `chap7` | `http` (80/tcp) | All (`0.0.0.0/0`) | public |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `public-http` | `chap7` | `http` (80/tcp) | 所有 (`0.0.0.0/0`) | public |'
- en: '| `private-ssh` | `chap7` | `ssh` (22/tcp) | Host which has a public network
    tag | private |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `private-ssh` | `chap7` | `ssh` (22/tcp) | 具有公共网络标记的主机 | private |'
- en: 'Create a `public-ssh` rule:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`public-ssh`规则：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a `public-http` rule:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`public-http`规则：
- en: '[PRE14]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a `private-ssh` rule:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`private-ssh`规则：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Check all firewall rules:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查所有防火墙规则：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Adding your ssh public key to GCP
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的ssh公钥添加到GCP
- en: Before you launch VM instances, you need to upload your ssh public key in order
    to log on to the VM. If you don't have any ssh keys, you have to run the `ssh-keygen` command
    to generate a key pair (public key and private key). Let's assume you have a public
    key as `~/.ssh/id_rsa.pub` and a private key as `~/.ssh/id_rsa`
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动VM实例之前，您需要上传您的ssh公钥以便登录到VM。如果您没有任何ssh密钥，您必须运行`ssh-keygen`命令生成一对密钥（公钥和私钥）。假设您有一个名为`~/.ssh/id_rsa.pub`的公钥和一个名为`~/.ssh/id_rsa`的私钥
- en: 'Check your login user name by using the `whoami` command, then use `gcloud
    compute config-ssh` to upload your key via the following command:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`whoami`命令检查您的登录用户名，然后使用`gcloud compute config-ssh`通过以下命令上传您的密钥：
- en: '[PRE17]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Check your ssh public key is registered as metadata:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您的ssh公钥是否注册为元数据：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: That's all. These are minimal configurations in order to launch a VM instance.
    So, let's launch some VM instances on this infrastructure.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。这些是启动VM实例的最小配置。因此，让我们在这个基础设施上启动一些VM实例。
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Now you have your own VPC, subnet, and firewall rules. This infrastructure
    will be used by the compute engine (VM instances), Kubernetes Engine, and some
    other GCP products. Let''s deploy two VM instances onto your VPC, as in the following
    diagram, to see how it works:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您拥有自己的VPC、子网和防火墙规则。这个基础设施将被计算引擎（VM实例）、Kubernetes引擎和一些其他GCP产品使用。让我们在您的VPC上部署两个VM实例，如下图所示，看看它是如何工作的：
- en: '![](assets/061df439-c2c1-48b2-9aeb-9645e75b1deb.png)Final state'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/061df439-c2c1-48b2-9aeb-9645e75b1deb.png)最终状态'
- en: Launching VM instances
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动VM实例
- en: 'We will launch two VM instances on both `us-central1` and `us-east1` by using
    the following configuration:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下配置在`us-central1`和`us-east1`上启动两个VM实例：
- en: '| **VM Instance name** | **Target VPC** | **zone (see the following steps)**
    | **Target Subnet** | **Assign Network Tag** |'
  id: totrans-124
  prefs: []
  type: TYPE_TB
  zh: '| **VM实例名称** | **目标VPC** | **区域（参见以下步骤）** | **目标子网** | **分配网络标签** |'
- en: '| `chap7-public` | `chap7` | `us-central1-a` | `chap7-us-central1` | public
    |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| `chap7-public` | `chap7` | `us-central1-a` | `chap7-us-central1` | public
    |'
- en: '| `chap7-private` | `chap7` | `us-east1-b` | `chap7-us-east1` | private |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| `chap7-private` | `chap7` | `us-east1-b` | `chap7-us-east1` | private |'
- en: 'Check the available zones in `us-central1` and `us-east1` by using the following
    command:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令检查`us-central1`和`us-east1`中可用的区域：
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'So, let''s choose `us-central1-a` for `chap7-public` and `us-east1-b` for `chap7-private`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们选择`us-central1-a`作为`chap7-public`，选择`us-east1-b`作为`chap7-private`：
- en: 'Type the following command to create two VM instances:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令创建两个VM实例：
- en: '[PRE20]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Check the VM instance external IP address via the following command:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下命令检查VM实例的外部IP地址：
- en: '[PRE21]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Run `ssh-agent` to remember your ssh key:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ssh-agent`以记住您的ssh密钥：
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'ssh from your machine to `chap7-public` using the `-A` option (forward authentication)
    and using an external IP address:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的机器通过`-A`选项（转发身份验证）和使用外部IP地址ssh到`chap7-public`：
- en: '![](assets/01c661b0-0fb2-4541-a527-1d97a51994cd.png)ssh to the public VM instance'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/01c661b0-0fb2-4541-a527-1d97a51994cd.png)ssh到公共VM实例'
- en: 'ssh from `chap7-public` to `chap7-private` via the internal IP address:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过内部IP地址从`chap7-public`到`chap7-private`进行ssh：
- en: '![](assets/0bdef6f5-f918-4d9f-ab06-2dfdf413ecc4.png)ssh to private VM instance'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/0bdef6f5-f918-4d9f-ab06-2dfdf413ecc4.png)ssh到私有VM实例'
- en: 'Type the `exit` command to go back to the `chap7-public` host, then install
    `nginx` by using the `apt-get` command:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`exit`命令返回到`chap7-public`主机，然后使用`apt-get`命令安装`nginx`：
- en: '![](assets/c932a618-0356-4c6b-aefc-c96873cd71b8.png)Installing nginx on a public
    VM instance'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c932a618-0356-4c6b-aefc-c96873cd71b8.png)在公共VM实例上安装nginx'
- en: 'Launch `nginx` by using the following command:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动`nginx`：
- en: '[PRE23]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Access `chap7-public` (via the external IP) using your web browser:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的Web浏览器访问`chap7-public`（通过外部IP）：
- en: '![](assets/e140b946-9757-4ec3-96a3-650eddc6f7ab.png)Accessing a nginx web server
    on a public VM instance'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/e140b946-9757-4ec3-96a3-650eddc6f7ab.png)访问公共VM实例上的nginx web服务器'
- en: Congratulations! You have finished setting up a GCP VPC, Subnet, and firewall
    rules, and launch VM instances! These are very basic and common usages of Google
    Compute Engine. You can login and install software in these machines, or even
    build a Kubernetes cluster from scratch. However, GCP also has a managed Kubernetes
    product called Kubernetes Engine. We will explore it in this chapter.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经完成了设置GCP VPC、子网和防火墙规则，并启动了VM实例！这些都是Google Compute Engine的非常基本和常见的用法。您可以登录并在这些机器上安装软件，甚至可以从头开始构建一个Kubernetes集群。但是，GCP还有一个名为Kubernetes
    Engine的托管Kubernetes产品。我们将在本章中探讨它。
- en: Playing with Google Kubernetes Engine
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩转Google Kubernetes Engine
- en: Kubernetes was designed by google and widely used internally at Google for years.
    Google Cloud Platform offers the hosted GKE. With GKE, we don't need to build
    a cluster from scratch. Instead, clusters can be launched and turned down on demand.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是由谷歌设计的，并在谷歌内部广泛使用多年。Google Cloud Platform提供托管的GKE。使用GKE，我们不需要从头开始构建集群。相反，集群可以按需启动和关闭。
- en: Getting ready
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We can use the Kubernetes Engine dashboard in the GCP console or the gcloud
    CLI to launched and configure a cluster. Using the console is very straightforward
    and intuitive. However, using CLI is a more flexible way to make the operation
    repeatable or to integrate it with your existing pipeline. In this recipe, we'll
    walk through how to use gcloud to launch and set up a Kubernetes cluster, along
    with some importants concept in GCP.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用GCP控制台中的Kubernetes Engine仪表板或gcloud CLI来启动和配置集群。使用控制台非常直观和直观。但是，使用CLI是使操作可重复或与现有管道集成的更灵活的方式。在这个教程中，我们将介绍如何使用gcloud启动和设置Kubernetes集群，以及GCP中的一些重要概念。
- en: In GCP, everything is associated with a project. A GCP project is the basic
    unit for using GCP services, billing, and permission control. At first, we'll
    have to create a project from the GCP console [https://console.cloud.google.com](https://console.cloud.google.com).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在GCP中，一切都与项目相关联。GCP项目是使用GCP服务、计费和权限控制的基本单位。首先，我们需要从GCP控制台创建一个项目[https://console.cloud.google.com](https://console.cloud.google.com)。
- en: 'The project ID is globally unique in GCP. After the project is properly created,
    we''ll see there is a unique project number assigned. In the home dashboard, we''ll
    have a clear view of how many resources we''ve used. We can set permissions, storage,
    network, billing, and other resources from here. Before we can move forward, we''ll
    need to install gcloud. gcloud is  part of Google Cloud SDK. Other than gcloud,
    which can do most common operations in GCP, Google Cloud SDK also includes other
    common GCP tools, such as gsutil (to manage Cloud Storage), bq (a command-line
    tool for BigQuery), and core (Cloud SDK libraries). The tools are available at
    the Google cloud SDK download page: [https://cloud.google.com/sdk/docs/#install_the_latest_cloud_tools_version_cloudsdk_current_version](https://cloud.google.com/sdk/docs/#install_the_latest_cloud_tools_version_cloudsdk_current_version).'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在GCP中，项目ID是全局唯一的。项目正确创建后，我们将看到分配了一个唯一的项目编号。在主页仪表板上，我们将清楚地看到我们使用了多少资源。我们可以从这里设置权限、存储、网络、计费和其他资源。在我们继续之前，我们需要安装gcloud。gcloud是Google
    Cloud SDK的一部分。除了gcloud可以在GCP中执行大多数常见操作之外，Google Cloud SDK还包括其他常见的GCP工具，例如gsutil（用于管理Cloud
    Storage）、bq（用于BigQuery的命令行工具）和core（Cloud SDK库）。这些工具可以在Google Cloud SDK下载页面上找到：[https://cloud.google.com/sdk/docs/#install_the_latest_cloud_tools_version_cloudsdk_current_version](https://cloud.google.com/sdk/docs/#install_the_latest_cloud_tools_version_cloudsdk_current_version)。
- en: 'After gcloud is installed, run gcloud init to log in to set up your identity
    with gcloud and create a project named** k8s-cookbook-2e**. We can use gcloud
    to manipulate almost all the services in Google Cloud; the major command group
    is:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 安装gcloud后，运行gcloud init以登录并设置您的身份与gcloud并创建一个名为**k8s-cookbook-2e**的项目。我们可以使用gcloud来操作Google
    Cloud中的几乎所有服务；主要的命令组是：
- en: '[PRE24]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The gcloud container command line set is used to manage our containers and
    clusters in Google Kuberentes Engine. For launching a cluster, the most important
    parameters are network settings. Let''s spend some time understanding network
    terminology in GCP here. Just like AWS, GCP has the VPC concept as well. It''s
    a private and safer way to isolate your compute, storage, and cloud resources
    with the public internet. It can be peered across projects, or established as
    a VPN with on-premise datacenters to create a hybrid cloud environment:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: gcloud容器命令行集用于管理我们在Google Kubernetes Engine中的容器和集群。对于启动集群，最重要的参数是网络设置。让我们花一些时间在这里了解GCP中的网络术语。就像AWS一样，GCP也有VPC概念。这是一种私有和更安全的方式，可以将您的计算、存储和云资源与公共互联网隔离开来。它可以在项目之间进行对等连接，或者与本地数据中心建立VPN，创建混合云环境：
- en: '[PRE25]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Instances on this network will not be reachable until firewall rules are created.
    As an example, you can allow all internal traffic between instances as well as
    SSH, RDP, and ICMP by running:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在此网络上的实例在创建防火墙规则之前将无法访问。例如，您可以通过运行以下命令允许实例之间的所有内部流量以及SSH、RDP和ICMP：
- en: '[PRE26]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'By default, the VPC is created in auto mode, which will create a one subnet
    per region. We can observe that via the subcommand `describe`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，VPC以自动模式创建，这将在每个区域创建一个子网。我们可以通过子命令`describe`观察到这一点：
- en: '[PRE27]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In GCP, each subnet is across a zone. A zone is an isolated location in a region,
    which is a similar concept to availability zones in AWS.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在GCP中，每个子网都跨越一个区域。区域是一个区域中的隔离位置，这与AWS中的可用区概念类似。
- en: Alternatively, you could create a network in custom mode by adding the parameter
    `--subnet-mode=custom`, which allows you to define your desired IP range, region,
    and all the routing rules. For more details, please refer to the previous section.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以通过添加参数`--subnet-mode=custom`以自定义模式创建网络，这允许您定义所需的IP范围、区域和所有路由规则。有关更多详细信息，请参阅前一节。
- en: 'Auto mode also helps you set up all default routing rules. A route serves to
    define the destination for certain IP ranges. For example, this route will direct
    the packet to virtual network `10.158.0.0/20`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 自动模式还可以帮助您设置所有默认的路由规则。路由用于定义某些IP范围的目的地。例如，此路由将将数据包定向到虚拟网络`10.158.0.0/20`：
- en: '![](assets/7fe25562-f068-439c-9e86-1e0873de39b4.png)Default route example'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/7fe25562-f068-439c-9e86-1e0873de39b4.png)默认路由示例'
- en: 'There route which is used to direct the packet to the outside world. The next
    hop of this route is the default internet gateway, similar to the igw in AWS.
    In GCP, however, you don''t need to explicitly create an internet gateway:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个用于将数据包定向到外部世界的路由。此路由的下一跳是默认的互联网网关，类似于AWS中的igw。但是，在GCP中，您不需要显式创建互联网网关：
- en: '![](assets/532e9bd0-5148-40f5-a51d-a02176ae9ee1.png)Default route for internet
    access'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/532e9bd0-5148-40f5-a51d-a02176ae9ee1.png)用于互联网访问的默认路由'
- en: Another important concept in a GCP network is firewall rules, used to control
    the ingress and egress for your instance. In GCP, the association between firewall
    rules and VM instances is implemented by network tags.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: GCP网络中的另一个重要概念是防火墙规则，用于控制实例的入站和出站。在GCP中，防火墙规则与VM实例之间的关联是通过网络标签实现的。
- en: A firewall rule can also be assigned to all instances in the network or a group
    of instances with a specific service account (ingress only). The service account
    is the identity of a VM instance in GCP. One or more roles can be assigned to
    a service account, so it can have access to other GCP resources. This is similar
    to AWS instance profiles.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 防火墙规则也可以分配给网络中的所有实例或一组具有特定服务帐户的实例（仅入口）。服务帐户是GCP中VM实例的身份。一个或多个角色可以分配给一个服务帐户，因此它可以访问其他GCP资源。这类似于AWS实例配置文件。
- en: 'One VM instance can have more than one network tags, which implies multiple
    network routes could be applied. This diagram shows how tags work. In the following
    diagram, the first firewall rule is applied to VM1 and VM2, and VM2 has two firewall
    rules associated with it:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一个VM实例可以有多个网络标签，这意味着可以应用多个网络路由。这张图表展示了标签的工作原理。在下面的图表中，第一个防火墙规则应用于VM1和VM2，而VM2有两个与之相关联的防火墙规则：
- en: '![](assets/69c75148-13f4-4596-a4d4-dd6b32705650.png)Illustration of AWS security
    groups and GCP firewall rules'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/69c75148-13f4-4596-a4d4-dd6b32705650.png)AWS安全组和GCP防火墙规则的示意图'
- en: In **AWS**, one or more ingress/egress rules are defined in a **Security Group**,
    and one or more Security Groups can be assigned to a **EC2** instance. In **GCP**,
    on the other hand, one or more firewall rules are defined, which are associated
    with one or more tags. One or more tags can be assigned to an instance. By mapping
    network tags, firewall rules can control and limit  access in and out of your
    instances.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在**AWS**中，一个或多个入口/出口规则被定义在一个**安全组**中，一个或多个安全组可以分配给一个**EC2**实例。而在**GCP**中，一个或多个防火墙规则被定义，并且与一个或多个标签相关联。一个实例可以分配一个或多个标签。通过映射网络标签，防火墙规则可以控制和限制实例的出入访问。
- en: How to do it…
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'We''ve learned the basic network concept in GCP. Let''s launch our first GKE
    cluster:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了GCP中的基本网络概念。让我们启动我们的第一个GKE集群：
- en: '| **Parameter** | **Description** | **Value in example** |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| **参数** | **描述** | **示例中的值** |'
- en: '| `--cluster-version` | Supported cluster version (Refer to [https://cloud.google.com/kubernetes-engine/release-notes](https://cloud.google.com/kubernetes-engine/release-notes))
    | `1.9.2-gke.1` |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `--cluster-version` | 支持的集群版本（参考[https://cloud.google.com/kubernetes-engine/release-notes](https://cloud.google.com/kubernetes-engine/release-notes)）
    | `1.9.2-gke.1` |'
- en: '| `--machine-type` | Instance type of nodes (Refer to [https://cloud.google.com/compute/docs/machine-types](https://cloud.google.com/compute/docs/machine-types))
    | `f1-micro` |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `--machine-type` | 节点的实例类型（参考[https://cloud.google.com/compute/docs/machine-types](https://cloud.google.com/compute/docs/machine-types)）
    | `f1-micro` |'
- en: '| `--num-nodes` | Number of nodes in the cluster | `3` |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| `--num-nodes` | 集群中节点的数量 | `3` |'
- en: '| `--network` | Target VPC network | `k8s-network` (the one we just created)
    |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `--network` | 目标VPC网络 | `k8s-network`（我们刚刚创建的网络） |'
- en: '| `--zone` | Target zone | `us-central1-a` (you''re free to use any zone) |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `--zone` | 目标区域 | `us-central1-a`（您可以自由选择任何区域） |'
- en: '| `--tags` | Network tags to be attached to the nodes | private |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `--tags` | 要附加到节点的网络标签 | private |'
- en: '| `--service-account &#124; --scopes` | Node identity (Refer to [https://cloud.google.com/sdk/gcloud/reference/container/clusters/create](https://cloud.google.com/sdk/gcloud/reference/container/clusters/create)
    for more scope value) | `storage-rw`,`compute-ro` |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `--service-account &#124; --scopes` | 节点身份（参考[https://cloud.google.com/sdk/gcloud/reference/container/clusters/create](https://cloud.google.com/sdk/gcloud/reference/container/clusters/create)获取更多范围值）
    | `storage-rw`,`compute-ro` |'
- en: 'By referring preceding parameters, let''s launch a three nodes cluster by `gcloud`
    command:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过引用前面的参数，让我们使用`gcloud`命令启动一个三节点集群：
- en: '[PRE28]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'After the cluster is up-and-running, we can start to connect to the cluster
    by configuring `kubectl`:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在集群运行起来后，我们可以通过配置`kubectl`开始连接到集群：
- en: '[PRE29]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Let''s see if the cluster is healthy:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看集群是否健康：
- en: '[PRE30]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'And we can check the nodes inside the cluster:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以检查集群中的节点：
- en: '[PRE31]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can also use `kubectl` to check cluster info:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`kubectl`来检查集群信息：
- en: '[PRE32]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works…
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Under the hood, gcloud creates a Kubernetes cluster with three nodes, along
    with a controller manager, scheduler, and etcd cluster with two members. We can
    also see that the master is launched with some services, including a default backend
    used by the controller, heapster (used for monitoring) KubeDNS for DNS services
    in the cluster, a dashboard for Kubernetes UI, and metrics-server for resource
    usage metrics.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，gcloud创建了一个具有三个节点的Kubernetes集群，以及一个控制器管理器，调度程序和具有两个成员的etcd集群。我们还可以看到主节点启动了一些服务，包括控制器使用的默认后端，用于监视的heapster，集群中的DNS服务的KubeDNS，用于Kubernetes
    UI的仪表板，以及用于资源使用度量的metrics-server。
- en: 'We saw `Kubernetes-dashboard` has a URL; let''s try and access it:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到`Kubernetes-dashboard`有一个URL；让我们尝试访问它：
- en: '![](assets/4e58c86e-2d4e-4495-a79f-3bdc37c3da1b.png)Forbidden to access Kubernetes
    dashboard'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: ！[](assets/4e58c86e-2d4e-4495-a79f-3bdc37c3da1b.png)禁止访问Kubernetes仪表板
- en: 'We got `HTTP 403 Forbidden`. Where do we get the access and credentials though?
    One way to do it is running a proxy via the `kubectl proxy` command. It will bind
    the master IP to local `127.0.0.1:8001`:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了`HTTP 403 Forbidden`。我们从哪里获取访问和凭据呢？一种方法是通过`kubectl proxy`命令运行代理。它将主IP绑定到本地`127.0.0.1:8001`：
- en: '[PRE33]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: After that, when we access `http://127.0.0.1:8001/ui`, it'll be redirected to
    `http://127.0.0.1:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，当我们访问`http://127.0.0.1:8001/ui`时，它将被重定向到`http://127.0.0.1:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy`。
- en: 'Since Kubernetes 1.7, the dashboard has supported user authentication based
    on a bearer token or `Kubeconfig` file:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 自Kubernetes 1.7以来，仪表板已支持基于持有者令牌或`Kubeconfig`文件的用户身份验证：
- en: '![](assets/fd85ef71-b10b-40b8-af0e-31ba8d287dee.png)Logging in to the Kubernetes
    dashboard'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: ！[](assets/fd85ef71-b10b-40b8-af0e-31ba8d287dee.png)登录到Kubernetes仪表板
- en: 'You could create a user and bind it to the current context (please refer to
    the *Authentication and authorization* recipe in [Chapter 8](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml),
    *Advanced Cluster Administration*). Just for convenience, we can check if we have
    any existing users. Firstly, we need to know our current context name. Context
    combines of cluster information, users for authentication, and a namespace:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个用户并将其绑定到当前上下文（请参阅[第8章](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml)“高级集群管理”中的*身份验证和授权*配方）。只是为了方便起见，我们可以检查是否有任何现有用户。首先，我们需要知道我们当前的上下文名称。上下文包括集群信息，用于身份验证的用户和一个命名空间：
- en: '[PRE34]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'After we know the context name, we can describe it via the `kubectl` config
    view `$CONTEXT_NAME`:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 知道上下文名称后，我们可以通过`kubectl`配置视图`$CONTEXT_NAME`来描述它：
- en: '[PRE35]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: We may find there is a default user existing in our cluster; using its `$ACCESS_TOKEN`,
    you can glimpse the Kubernetes console.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会发现我们的集群中存在一个默认用户；使用其`$ACCESS_TOKEN`，您可以一窥Kubernetes控制台。
- en: '![](assets/6825b49d-6934-41d2-83a8-cb3a098d2675.png)Kubernetes dashboard overview'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: ！[](assets/6825b49d-6934-41d2-83a8-cb3a098d2675.png)Kubernetes仪表板概述
- en: 'Our cluster in GKE is up-and-running! Let''s try and see if we can run a simple
    deployment on it:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在GKE中的集群已经运行起来了！让我们尝试看看是否可以在上面运行一个简单的部署：
- en: '[PRE36]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Let''s check our Kubernetes dashboard:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下我们的Kubernetes仪表板：
- en: '![](assets/8a069c1f-b7cb-4441-8f32-90576dcdab69.png)Workloads in Kubernetes
    dashboard'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: ！[](assets/8a069c1f-b7cb-4441-8f32-90576dcdab69.png)Kubernetes仪表板中的工作负载
- en: Hurray! The deployment is created and as a result two pods are scheduled and
    created.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 万岁！部署已创建，结果是安排和创建了两个pod。
- en: See also
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Advanced settings in kubeconfig* in [Chapter 8](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml),
    *Advanced Cluster Administration*'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第8章](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml)“高级集群管理”中的* kubeconfig高级设置*
- en: '*Setting resources in nodes* in Chapter 8, *Advanced Cluster Administration*'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第8章“高级集群管理”中设置节点资源
- en: '*Playing with the Web UI* in [Chapter 8](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml),
    *Advanced Cluster Administration*'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第8章](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml)中*高级集群管理*中*使用Web UI*。
- en: '*Setting up a DNS server in Kubernetes Cluster* in [Chapter 8](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml),
    *Advanced Cluster Administration*'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第8章](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml)中*高级集群管理*中*在Kubernetes集群中设置DNS服务器*。
- en: '*Authentication and authorization* in [Chapter 8](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml),
    *Advanced Cluster Administration*'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第8章](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml)中*高级集群管理*中*身份验证和授权*。
- en: Exploring CloudProvider on GKE
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GKE上探索CloudProvider
- en: GKE works as a native Kubernetes Cloud Provider, which integrates with resources
    in Kubernetes seamlessly and allows you to provision on demand, for example, VPC
    routes for the network, **Persistent Disk** (**PD**) for StorageClass, L4 load
    balancer for Service, and L4 load balancer for ingress.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: GKE作为本地Kubernetes云提供商运行，与Kubernetes中的资源无缝集成，并允许您按需进行配置，例如，为网络配置VPC路由，为StorageClass配置**持久磁盘**（PD），为服务配置L4负载均衡器，为入口配置L4负载均衡器。
- en: Getting ready
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: By default, when you create the network and launch a Kubernetes cluster in Google
    Cloud Platform with proper routes, containers can already talk to each other without
    an explicit network being set up.Beyond the resources listed previously, we don't
    need to set any settings explicitly in most cases. GKE will just work.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，在Google Cloud Platform中创建网络并启动Kubernetes集群时，具有适当路由的容器可以在不设置显式网络的情况下相互通信。除了前面列出的资源，我们在大多数情况下不需要显式设置任何设置。GKE会自动运行。
- en: How to do it…
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Let's see how convenient GKE offers about storage, network and more.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看GKE提供的存储、网络等功能有多方便。
- en: StorageClass
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StorageClass
- en: In [Chapter 2](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml), *Walking through
    Kubernetes Concepts*, we learned how to declare `PersistentVolume` and `PersistentVolumeClaim`.
    With dynamic provisioning, you can define a set of `StorageClass` with different
    physical storage backends and use them in `PersistentVolume` or `PersistentVolumeClaim`.
    Let's see how it works.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml)中*深入了解Kubernetes概念*中，我们学习了如何声明`PersistentVolume`和`PersistentVolumeClaim`。通过动态配置，您可以定义一组具有不同物理存储后端的`StorageClass`，并在`PersistentVolume`或`PersistentVolumeClaim`中使用它们。让我们看看它是如何工作的。
- en: 'To check the current default `StorageClass`, use `kubectl get storageclasses`
    command:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查当前默认的`StorageClass`，请使用`kubectl get storageclasses`命令：
- en: '[PRE37]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We can see we have a default storage class named standard and its provisioner
    is GCE PD.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们有一个名为standard的默认存储类，其提供程序是GCE PD。
- en: 'Let''s create a `PersistentVolumeClaim` request and use the standard `StorageClass`
    as the backend:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`PersistentVolumeClaim`请求，并使用标准的`StorageClass`作为后端：
- en: '[PRE38]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '`storageClassName` is the place to put the name of the `StorageClass`. If you
    put in something that doesn''t exist, PVC will not be created, since there is
    no proper mapped `StorageClass` to use:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`storageClassName`是放置`StorageClass`名称的地方。如果放入不存在的内容，PVC将不会被创建，因为没有适当映射的`StorageClass`可用：'
- en: '[PRE39]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We can see volume `pvc-1491b08e-1cfc-11e8-8589-42010a800360` has been created
    and bounded. If we list GCP disks, we''ll find there was a Persistent Disk created;
    the suffix of the disk name indicates the volume name in Kubernetes. That''s the
    magic of dynamic volume provisioning:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到卷`pvc-1491b08e-1cfc-11e8-8589-42010a800360`已经被创建并绑定。如果我们列出GCP磁盘，我们会发现已经创建了一个持久磁盘；磁盘名称的后缀表示Kubernetes中的卷名称。这就是动态卷配置的魔力：
- en: '[PRE40]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Besides the default `StorageClass`, you can also create your own. Recap this
    in [Chapter 2](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml), *Walking through Kubernetes
    Concepts*.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 除了默认的`StorageClass`，您还可以创建自己的。在[第2章](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml)中进行了回顾，*深入了解Kubernetes概念*。
- en: Service (LoadBalancer)
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务（负载均衡器）
- en: 'A `LoadBalancer` service type only works in the cloud environment that supports
    external load balancers. This allows outside traffic to be routed into target
    Pods. In GCP, a TCP load balancer will be created by a `LoadBalancer` service
    type:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoadBalancer`服务类型仅在支持外部负载均衡器的云环境中起作用。这允许外部流量路由到目标Pod。在GCP中，`LoadBalancer`服务类型将创建一个TCP负载均衡器：'
- en: 'The firewall rules for allowing traffic between the load balancer and nodes
    will be created automatically:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于允许负载均衡器和节点之间流量的防火墙规则将自动创建：
- en: '[PRE41]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Let''s check the service. The `EXTERNAL-IP` will show `<pending>` if the load
    balancer is still provisioning. Wait a while and the load balancer IP will present
    itself eventually:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们来检查服务。如果负载均衡器仍在进行配置，`EXTERNAL-IP`将显示`<pending>`。等一会儿，负载均衡器IP最终会显示出来：
- en: '[PRE42]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Let''s curl `$EXTERNAL-IP:80`, to see if it works properly:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用`$EXTERNAL-IP:80`进行curl，看看它是否正常工作：
- en: '[PRE43]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If we check the forwarding rules in GCP, we can find a rule that defines how
    the traffic goes from external IP to the target pool:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们在GCP中检查转发规则，我们可以找到一个定义了外部IP到目标池的流量如何走的规则：
- en: '[PRE44]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'A target pool is a set of instances that receive the traffic from forwarding
    rules. We could inspect the target pool by using the gcloud command as well:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目标池是一组实例，它们接收来自转发规则的流量。我们也可以使用gcloud命令来检查目标池：
- en: '[PRE45]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: We can see there are three nodes inside the pool. Those are the same three nodes
    in our Kubernetes cluster. Load balancer will dispatch the traffic to a node based
    on a hash of the source/definition IP and port. A service with `LoadBalancer`
    type looks handy; however, it can't do path-based routing. It's time for ingress
    to come into play. Ingress supports virtual hosts, path-based routing, and TLS
    termination, which is a more flexible approach to your web services.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到目标池内有三个节点。这些节点与我们的Kubernetes集群中的三个节点相同。负载均衡器将根据源/定义IP和端口的哈希将流量分发到节点上。`LoadBalancer`类型的服务看起来很方便；然而，它无法进行基于路径的路由。现在是Ingress发挥作用的时候了。Ingress支持虚拟主机、基于路径的路由和TLS终止，这是对您的Web服务更灵活的方法。
- en: Ingress
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ingress
- en: In [Chapter 5](669edaf0-c274-48fa-81d8-61150fa36df5.xhtml), *Building Continuous
    Delivery Pipelines*, we learned about the concept of ingress , and when and how
    to use it. Ingress  defines a set of rules allowing the inbound connection to
    access Kubernetes cluster services. It routes the traffic into cluster at L7,
    and the controller brings the traffic to the nodes. When GCP is the cloud provider,
    a L7 load balancer will be created if an ingress is created, as well as related
    firewall rules, health checks, backend services, forwarding rules, and a URL map.
    A URL map in GCP is a mechanism that contains a set of rules and forwards requests
    to the corresponding backend services.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](669edaf0-c274-48fa-81d8-61150fa36df5.xhtml)中，*构建持续交付流水线*，我们学习了关于Ingress的概念，以及何时以及如何使用它。Ingress定义了一组规则，允许入站连接访问Kubernetes集群服务。它在L7级别将流量路由到集群，并且控制器将流量带到节点。当GCP是云提供商时，如果创建了Ingress，将创建一个L7负载均衡器，以及相关的防火墙规则、健康检查、后端服务、转发规则和URL映射。在GCP中，URL映射是一个包含一组规则并将请求转发到相应后端服务的机制。
- en: 'In this recipe, we''ll reuse the examples from [Chapter 5](669edaf0-c274-48fa-81d8-61150fa36df5.xhtml),
    *Building Continuous Delivery Pipelines*, `Nodeport-deployment.yaml` and `echoserver.yaml`.
    Next is an illustration of how these two services work from [Chapter 5](669edaf0-c274-48fa-81d8-61150fa36df5.xhtml),
    *Building Continuous Delivery Pipelines*:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将重用[第5章](669edaf0-c274-48fa-81d8-61150fa36df5.xhtml)中的示例，*构建持续交付流水线*，`Nodeport-deployment.yaml`和`echoserver.yaml`。接下来是这两个服务如何工作的示例，来自[第5章](669edaf0-c274-48fa-81d8-61150fa36df5.xhtml)，*构建持续交付流水线*：
- en: '![](assets/9396e211-b955-4cd9-bb43-1154a5cc13ae.jpg)Ingress illustration'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/9396e211-b955-4cd9-bb43-1154a5cc13ae.jpg)Ingress示例'
- en: We will create an ingress for nginx and echoserver, that routes to different
    services. When the traffic comes in, the pod ingress controller will decide with
    service to route to.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为nginx和echoserver创建一个Ingress，路由到不同的服务。当流量进入时，pod Ingress控制器将决定路由到哪个服务。
- en: 'Here is an example for ingress . Please note that you might want to add the
    host name inside the rules section if you want the underlying services to always
    be visited from a certain host name:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个Ingress的示例。请注意，如果您希望底层服务始终从特定主机名访问，可能需要在规则部分内添加主机名：
- en: '[PRE46]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Please double-check that the underlying service is configured as a `NodePort`
    type. Otherwise you might encounter errors such as `googleapi: Error 400: Invalid
    value for field ''namedPorts[1].port'': ''0''. Must be greater than or equal to
    1, invalid error `from `loadbalancer-controller`.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '请仔细检查底层服务是否配置为`NodePort`类型。否则，您可能会遇到诸如`googleapi: Error 400: Invalid value
    for field ''namedPorts[1].port'': ''0''. Must be greater than or equal to 1, invalid
    error`的错误，来自`loadbalancer-controller`。'
- en: 'After a few minutes, the L7 load balancer will be created and you''ll be able
    to see it from the GCP console or by using the gcloud command. Let''s use `kubectl`
    to check if the backend service in INGRESS is healthy:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，L7负载均衡器将被创建，您可以从GCP控制台或使用gcloud命令来查看它。让我们使用`kubectl`来检查INGRESS中的后端服务是否健康：
- en: '[PRE47]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We can see the three backends are healthy and the related forwarding rules,
    target proxy, and URL map have been all created. We can get a comprehensive view
    from the GCP console by visiting discovery and load balancing in GKE or the Load
    balancing tab in network services:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到三个后端服务都是健康的，并且相关的转发规则、目标代理和URL映射都已创建。我们可以通过访问GCP控制台中的GKE中的发现和负载均衡或网络服务中的负载均衡选项卡来全面了解情况：
- en: '![](assets/c1509f93-dc69-4e09-b6c6-0c80c63776cc.png)Discovery and Load balancing'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c1509f93-dc69-4e09-b6c6-0c80c63776cc.png)发现和负载均衡'
- en: 'The backend is illustrated here:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 后端服务如下所示：
- en: '![](assets/69386610-e730-4510-94ff-cda84aa27e43.png)Backend services'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/69386610-e730-4510-94ff-cda84aa27e43.png)后端服务'
- en: 'From time to time, your ingress resource might encounter updates. When you
    redeploy it, there is no guarantee that GCP will allocate the same IP address
    to your load balancer. This might introduce a problem when the IP address is associated
    with a DNS name. The target IP address will need to be updated every time the
    IP is changed. This could be resolved by a static external IP address plus `kubernetes.io/INGRESS.global-static-ip-name`
    annotation:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Ingress资源可能会不时遇到更新。当您重新部署它时，不能保证GCP会为您的负载均衡器分配相同的IP地址。当IP地址与DNS名称关联时，这可能会引入问题。每次IP更改时，目标IP地址都需要更新。这可以通过静态外部IP地址加上`kubernetes.io/INGRESS.global-static-ip-name`注释来解决：
- en: '[PRE48]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Let''s describe `my-INGRESS` and see if it binds properly with the external
    IP we created :'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们描述`my-INGRESS`，看看它是否正确绑定了我们创建的外部IP：
- en: '[PRE49]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: We're all set. `Nginx` and `echoserver` can be visited via the external static
    IP `130.211.37.61`, and we're able to associate a DNS name with it by using the
    cloud DNS service in GCP.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备就绪。`Nginx`和`echoserver`可以通过外部静态IP`130.211.37.61`访问，并且我们可以通过在GCP中使用云DNS服务来将DNS名称与其关联。
- en: There's more…
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In Kubernetes v.1.9, the Kubernetes cloud controller manager was promoted to
    alpha. Cloud controller manager aims to make the cloud provider release feature
    support via its own release cycles, which could be independent from the Kubernetes
    release cycle. Then it could be independent with Kubernetes core release cycle.
    It provides common interfaces that each cloud provider can implement, which decoupling
    with Kubernetes Core logic. In the near future, we'll see more comprehensive support
    from different cloud providers!
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes v.1.9中，Kubernetes云控制器管理器被提升为alpha版。云控制器管理器旨在通过其自身的发布周期支持云提供商的发布功能，这可以独立于Kubernetes的发布周期。然后它可以独立于Kubernetes核心发布周期。它提供了每个云提供商都可以实现的通用接口，与Kubernetes核心逻辑解耦。在不久的将来，我们将看到来自不同云提供商的更全面的支持！
- en: See also
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Working with services* in [Chapter 2](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml),
    *Walking through Kubernetes Concepts*'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第2章](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml)中使用服务*，*深入了解Kubernetes概念*'
- en: '*Working with volumes* in [Chapter 2](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml),
    *Walking through Kubernetes Concepts*'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第2章](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml)中使用卷*，*深入了解Kubernetes概念*'
- en: '*Forwarding container ports* in [Chapter 3](51ca5358-d5fe-4eb2-a52d-65a399617fcf.xhtml),
    *Playing with Containers*'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第3章](51ca5358-d5fe-4eb2-a52d-65a399617fcf.xhtml)中转发容器端口*，*玩转容器*'
- en: Managing Kubernetes clusters on GKE
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GKE上管理Kubernetes集群
- en: Google Kubernetes Engines offers us the seamless experience of running Kubernetes;
    it also makes Kubernetes administration so easy. Depending on the expected peak
    time, we might want to scale the Kubernetes nodes out or in. Alternatively, we
    could use Autoscaler to do auto-scaling for the nodes. Kubernetes is an evolving
    platform. The release pace is fast. We might want to upgrade the cluster version
    from time to time, which is very easy to do. We could also use the Autoupgrade
    feature to upgrade the cluster by enabling automatically schedule feature in GKE.
    Let's see how to do it.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: Google Kubernetes Engines为我们提供了运行Kubernetes的无缝体验；它还使Kubernetes管理变得如此简单。根据预期的高峰时间，我们可能希望扩展或缩小Kubernetes节点。或者，我们可以使用自动缩放器来对节点进行自动缩放。Kubernetes是一个不断发展的平台。发布速度很快。我们可能需要不时地升级集群版本，这非常容易做到。我们还可以使用Autoupgrade功能通过在GKE中启用自动调度功能来升级集群。让我们看看如何做到这一点。
- en: Getting ready
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before setting up the administration features that GCP offers, we'll have to
    have a cluster up and running. We'll reuse the cluster we created in the Playing
    with the Google Kubernetes Engine recipe in this chapter.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置GCP提供的管理功能之前，我们必须有一个正在运行的集群。我们将在本章中重复使用我们在“玩转Google Kubernetes Engine”示例中创建的集群。
- en: How to do it…
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: In this recipe, we'll introduce how to manage the number of nodes based on usage
    and requirements. Also, we'll learn how to deal with cluster upgrades. Finally,
    we'll see how to provision a multi-zone cluster in GKE, in order to prevent a
    physical zone outage.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将介绍如何根据使用情况和要求来管理节点数量。此外，我们还将学习如何处理集群升级。最后，我们将看到如何在GKE中提供多区域集群，以防止物理区域的故障。
- en: Node pool
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 节点池
- en: 'A node pool is a set of instances in GCP that share the same configuration.
    When we launch a cluster from the `gcloud` command, we pass `--num-node=3` and
    the rest of the arguments. Then three instances will be launched inside the same
    pool, sharing the same configuration, using the same method:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 节点池是GCP中共享相同配置的一组实例。当我们从`gcloud`命令启动集群时，我们传递`--num-node=3`和其余参数。然后将在同一池内启动三个实例，共享相同的配置，使用相同的方法：
- en: '[PRE50]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Assume there is an expected heavy peak time for your service. As a Kubernetes
    administrator, you might want to resize your node pool inside the cluster.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您的服务预计会出现高峰时间。作为Kubernetes管理员，您可能希望调整集群内的节点池大小。
- en: '[PRE51]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The resize command can help you scale out and in. If the node count after resizing
    is less than before, the scheduler will migrate the pods to run on available nodes.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 调整大小命令可以帮助您扩展和缩小。如果调整大小后的节点数少于之前，调度器将迁移pod以在可用节点上运行。
- en: 'You can set the compute resource boundary for each container in the spec. You
    set requests and limits to a pod container. Assume we have a super nginx which
    requires 1024 MB memory:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为规范中的每个容器设置计算资源边界。您可以为pod容器设置请求和限制。假设我们有一个需要1024 MB内存的超级nginx：
- en: '[PRE52]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The node size we created is `f1-miro`, which only has 0.6 GM memory per node.
    It means the scheduler will never find a node with sufficient memory to run `super-nginx`.
    In this case, we can add more nodes with higher memory to the cluster by creating
    another node pool. We''ll use `g1-small` as an example, which contains 1.7 GB
    memory:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的节点大小是`f1-miro`，每个节点只有0.6 GB内存。这意味着调度器永远无法找到具有足够内存来运行`super-nginx`的节点。在这种情况下，我们可以通过创建另一个节点池向集群中添加具有更高内存的更多节点。我们将使用`g1-small`作为示例，其中包含1.7
    GB内存：
- en: '[PRE53]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Looks like we have two more powerful nodes. Let''s see the status of our super
    nginx:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们有两个更强大的节点。让我们来看看我们超级nginx的状态：
- en: '[PRE54]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'It''s running! Kubernetes scheduler will always try to find sufficient resources
    to schedule pods. In this case, there are two new nodes added to the cluster that
    can fulfill the resource requirement, so the pod is scheduled and run:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 它正在运行！Kubernetes调度器将始终尝试找到足够的资源来调度pod。在这种情况下，集群中添加了两个新节点，可以满足资源需求，因此pod被调度并运行：
- en: '[PRE55]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: From the events of the pod, we know what path it ran through. Originally, it
    couldn't find any nodes with sufficient resources and eventually it's scheduled
    to the new node named `gke-my-k8s-cluster-larger-mem-pool-a51c8da3-scw1`.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 从pod的事件中，我们知道它经过了哪些路径。最初，它找不到具有足够资源的节点，最终被调度到名为`gke-my-k8s-cluster-larger-mem-pool-a51c8da3-scw1`的新节点上。
- en: 'For making the user preference on scheduling pods on certain nodes, `nodeSelector`
    was introduced. You could either use built-in node labels, such as `beta.kubernetes.io/instance-type:
    n1-standard-1` in pod spec, or use customized labels to achieve it. For more information,
    please refer to [https://kubernetes.io/docs/concepts/configuration/assign-pod-node](https://kubernetes.io/docs/concepts/configuration/assign-pod-node).'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '为了使用户对在特定节点上调度pod的偏好，引入了`nodeSelector`。您可以在pod规范中使用内置的节点标签，例如`beta.kubernetes.io/instance-type:
    n1-standard-1`，或使用自定义标签来实现。有关更多信息，请参阅[https://kubernetes.io/docs/concepts/configuration/assign-pod-node](https://kubernetes.io/docs/concepts/configuration/assign-pod-node)。'
- en: 'Kubernetes also supports **cluster autoscaler**, which automatically resizes
    your cluster based on capacity if all nodes have insufficient resources to run
    the requested pods. To do that, we add `–enable-autoscaling` and specify the maximum
    and minimum node count when we create the new node pool:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes还支持**集群自动缩放**，根据容量自动调整集群大小，如果所有节点都没有足够的资源来运行请求的pod。为此，我们在创建新节点池时添加`–enable-autoscaling`并指定最大和最小节点数：
- en: '[PRE56]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'After a few minutes, we can see there is a new node inside our cluster:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，我们可以看到我们的集群中有一个新节点：
- en: '[PRE57]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now, let''s change the replica of our super-nginx from 1 to 4 by using `kubectl`
    edit or creating a new deployment:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过使用`kubectl`编辑或创建新的部署，将我们的超级nginx的副本从1更改为4：
- en: '[PRE58]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'We find there are two pods with a pending status:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现有两个处于挂起状态的pod：
- en: '[PRE59]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'After a few minutes, we see that there are new members in our larger mem pool,
    and all our pods get to run:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，我们看到我们的大内存池中有新成员，并且所有我们的pod都可以运行：
- en: '[PRE60]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Cluster autoscaler comes in handy and is cost-effective. When the nodes are
    over-provisioned, the additional node in the node pool will be terminated automatically.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 集群自动缩放非常方便且具有成本效益。当节点过度配置时，节点池中的额外节点将被自动终止。
- en: Multi-zone and regional clusters
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多区域和区域性集群
- en: Our `my-k8s-cluster` is currently deployed in the `us-central1-a` zone. While
    a zone is a physically isolated location in a region, it may suffer an outage.
    Google Kubernetes Engine supports multi-zone and regional deployment. Multi-zone
    clusters create a single master in a zone and provision nodes in multiple zones;
    on the other hand, a regional cluster creates multiple masters across three zones
    and provisions nodes in multiple zones.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`my-k8s-cluster`目前部署在`us-central1-a`区域。虽然区域是一个区域内的物理隔离位置，但它可能会发生故障。Google
    Kubernetes Engine支持多区域和区域部署。多区域集群在一个区域中创建一个主节点，并在多个区域中提供节点；另一方面，区域集群在三个区域中创建多个主节点，并在多个区域中提供节点。
- en: Multi-zone clusters
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多区域集群
- en: To enable multi-zone cluster, add -`-additional-zones $zone2, $zone3, …` into
    the command when you create the cluster.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 启用多区域集群，创建集群时在命令中添加`--additional-zones $zone2, $zone3, …`。
- en: Just like AWS, GCP has service quota limits as well. You could use `gcloud compute
    project-info describe –project $PROJECT_NAME` to check the quota and request an
    increase from the GCP console if needed.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 就像AWS一样，GCP也有服务配额限制。如果需要，您可以使用`gcloud compute project-info describe –project
    $PROJECT_NAME`来检查配额，并从GCP控制台请求增加。
- en: 'Let''s launch a two-nodes cluster per zone first:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先启动每个区域的两个节点集群：
- en: '[PRE61]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We find we have six nodes now:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现现在有六个节点：
- en: '[PRE62]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Let''s check if the nodes are spread across the three zones we specified:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下节点是否分布在我们指定的三个区域中：
- en: '[PRE63]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Regional clusters
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区域集群
- en: 'Regional clusters are still in the beta phase. To use these, we''ll have to
    enable the gcloud beta command. We can enable it via this command:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 区域集群仍处于测试阶段。要使用这些，我们需要启用gcloud beta命令。我们可以通过以下命令启用它：
- en: '[PRE64]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Then we should be able to use the `gcloud v1beta` command to launch the regional
    cluster:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们应该能够使用`gcloud v1beta`命令启动区域集群：
- en: '[PRE65]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The command is quite similar to the one that creates a cluster, just with two
    differences: a beta flag is added before the group name container which indicates
    it''s a `v1beta` command. The second difference is changing `--zone` to `--region`:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令与创建集群的命令非常相似，只有两个不同之处：在组名container之前添加了一个beta标志，表示这是一个`v1beta`命令。第二个不同之处是将`--zone`更改为`--region`：
- en: '[PRE66]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Cluster upgrades
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群升级
- en: 'Kubernetes is a fast-release project. GKE also keeps supporting new versions.
    It''s not uncommon to have multiple minor version updates within a month. check
    the GKE console:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是一个快速发布的项目。GKE也不断支持新版本。一个月内有多个次要版本更新并不罕见。检查GKE控制台：
- en: '![](assets/7474190c-b187-407f-aac8-f92c7e3c9ec3.png)Upgrade available information
    in the GCP console'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/7474190c-b187-407f-aac8-f92c7e3c9ec3.png)GCP控制台中的可升级信息'
- en: 'We see that an upgrade is available. 1.9.3-gke.1 in the screenshot has just
    been released and our cluster is able to upgrade:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到有一个可用的升级。截图中的1.9.3-gke.1刚刚发布，我们的集群可以升级：
- en: '![](assets/bd70a627-254a-4882-b45a-7f1c15f9b782.png)Upgrade available to 1.9.3-gke.0'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/bd70a627-254a-4882-b45a-7f1c15f9b782.png)可升级至1.9.3-gke.0'
- en: We can upgrade the cluster via the GKE console, or using gcloud command. We'll
    use the single zone (`us-central1-a`) cluster to demonstrate how to upgrade in
    the next example. When upgrading the cluster, the master is always the first citizen
    to do the upgrade. The desired node version cannot be greater than the current
    master version.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过GKE控制台或使用gcloud命令升级集群。我们将使用单区域（`us-central1-a`）集群来演示如何在下一个示例中进行升级。在升级集群时，主节点始终是首先进行升级的节点。期望的节点版本不能大于当前主节点版本。
- en: '[PRE67]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Let''s check the master''s version:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下主节点的版本：
- en: '[PRE68]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Looks good. The master has been upgraded to `v1.9.3-gke.0`, but our nodes didn''t
    get upgrade yet:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错。主节点已升级到`v1.9.3-gke.0`，但我们的节点还没有升级：
- en: '[PRE69]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'For the node upgrade, instead of upgrading them all at once, GKE performs rolling
    upgrade. It will first drain and deregister a node from the node pool, delete
    an old instance, and provision a new instance with the desired version, then add
    it back to the cluster:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 对于节点升级，GKE不会一次性升级所有节点，而是执行滚动升级。它将首先从节点池中排空和注销一个节点，删除旧实例，然后使用所需版本重新创建一个新实例，然后将其添加回集群中：
- en: '[PRE70]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: The node pool can be configured to auto-upgrade via the `--enable-autoupgrade`
    flag during cluster creation, or using the gcloud container `node-pools` update
    command to update existing node pools. For more information, please refer to [https://cloud.google.com/kubernetes-engine/docs/concepts/node-auto-upgrades](https://cloud.google.com/kubernetes-engine/docs/concepts/node-auto-upgrades).
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 节点池可以通过在集群创建期间使用`--enable-autoupgrade`标志进行自动升级，或者使用gcloud容器`node-pools`更新命令来更新现有节点池。有关更多信息，请参阅[https://cloud.google.com/kubernetes-engine/docs/concepts/node-auto-upgrades](https://cloud.google.com/kubernetes-engine/docs/concepts/node-auto-upgrades)。
- en: It will take more than 10 minutes. After that, all the nodes in the cluster
    are upgraded to `1.9.3-gke.0`.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要超过10分钟。之后，集群中的所有节点都将升级到`1.9.3-gke.0`。
- en: See also
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Advanced settings in kubeconfig* in [Chapter 8](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml),
    *Advanced Cluster Administration*'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第8章](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml)中kubeconfig的高级设置*，*高级集群管理*'
- en: '*Setting resources in nodes* in [Chapter 8](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml),
    *Advanced Cluster Administration*'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第8章](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml)中设置节点资源*，*高级集群管理*'
