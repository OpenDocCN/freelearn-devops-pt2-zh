["```\n$ cat entry.py from flask import Flask, request app = Flask(__name__) @app.route(\"/\")\ndef hello():\n return \"Hello World!\" @app.route(\"/power/<int:base>/<int:index>\")\ndef power(base, index): \nreturn \"%d\" % (base ** index) @app.route(\"/addition/<int:x>/<int:y>\")\ndef add(x, y):\n return \"%d\" % (x+y) @app.route(\"/substraction/<int:x>/<int:y>\")\ndef substract(x, y):\n return \"%d\" % (x-y) if __name__ == \"__main__\":\n    app.run(host='0.0.0.0') \n```", "```\n$ cat Dockerfile\nFROM ubuntu:14.04 # Update packages\nRUN apt-get update -y  # Install Python Setuptools RUN apt-get install -y python-setuptools git telnet curl # Install pip RUN easy_install pip # Bundle app source\nADD . /src\nWORKDIR /src    # Add and install Python modules RUN pip install Flask  # Expose EXPOSE 5000  # Run CMD [\"python\", \"entry.py\"]\n```", "```\n//name as \u201cyour_docker_hub_id/my-calc\u201d\n$ sudo docker build -t hidetosaito/my-calc .\nSending build context to Docker daemon 3.072 kB\nStep 1 : FROM ubuntu:14.04\n ---> 6cc0fc2a5ee3\nStep 2 : RUN apt-get update -y\n ---> Using cache\n\n(snip)\n\nStep 8 : EXPOSE 5000\n ---> Running in 7c52f4bfe373\n ---> 28f79bb7481f\nRemoving intermediate container 7c52f4bfe373\nStep 9 : CMD python entry.py\n ---> Running in 86b39c727572\n ---> 20ae465bf036\nRemoving intermediate container 86b39c727572\nSuccessfully built 20ae465bf036\n\n//verity your image\n$ sudo docker images\nREPOSITORY            TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nhidetosaito/my-calc   latest              20ae465bf036        19 seconds ago      284 MB\nubuntu                14.04               6cc0fc2a5ee3        3 weeks ago         187.9 MB\n```", "```\n//type your username, password and e-mail address in Docker hub\n$ sudo docker login\nUsername: hidetosaito\nPassword:\nEmail: hideto.saito@yahoo.com\nWARNING: login credentials saved in /home/ec2-user/.docker/config.json\nLogin Succeeded\n```", "```\n//push to your docker index\n$ sudo docker push hidetosaito/my-calc\nThe push refers to a repository [docker.io/hidetosaito/my-calc] (len: 1)\n20ae465bf036: Pushed\n\n(snip)\n\n92ec6d044cb3: Pushed\nlatest: digest: sha256:203b81c5a238e228c154e0b53a58e60e6eb3d1563293483ce58f48351031a474 size: 19151\n```", "```\n$ cat entry.py\nimport os\nimport httplib\nfrom flask import Flask, request, render_template\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n    return render_template('index.html')\n\n@app.route(\"/add\", methods=['POST'])\ndef add():\n    #\n    # from POST parameters\n    #\n    x = int(request.form['x'])\n    y = int(request.form['y'])\n\n    #\n    # from Kubernetes Service(environment variables)\n    #\n    my_calc_host = os.environ['MY_CALC_SERVICE_SERVICE_HOST']\n    my_calc_port = os.environ['MY_CALC_SERVICE_SERVICE_PORT']\n\n    #\n    # REST call to MicroService(my-calc)\n    #\n    client = httplib.HTTPConnection(my_calc_host, my_calc_port)\n    client.request(\"GET\", \"/addition/%d/%d\" % (x, y))\n    response = client.getresponse()\n    result = response.read()\n    return render_template('index.html', add_x=x, add_y=y,\nadd_result=result)\n\nif __name__ == \"__main__\":\n    app.debug = True\n    app.run(host='0.0.0.0')\n```", "```\n$ cat templates/index.html\n<html>\n   <body>\n   <div>\n         <form method=\"post\" action=\"/add\">\n           <input type=\"text\" name=\"x\" size=\"2\"/>\n           <input type=\"text\" name=\"y\" size=\"2\"/>\n           <input type=\"submit\" value=\"addition\"/>\n       </form>\n       {% if add_result %}\n       <p>Answer : {{ add_x }} + {{ add_y }} = {{ add_result }}</p>\n       {% endif %}\n   </div>\n   </body>\n</html>\n```", "```\n/Dockerfile /entry.py /templates/index.html\n```", "```\n//build frontend Webui image \n$ sudo docker build -t hidetosaito/my-frontend .\n\n//login to docker hub\n$ sudo docker login\n\n//push frontend webui image\n$ sudo docker push hidetosaito/my-frontend\n```", "```\n$ cat my-calc.yaml \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-calc-deploy\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      run: my-calc\n  template:\n    metadata:\n      labels:\n        run: my-calc\n    spec:\n      containers:\n      - name: my-calc\n        image: hidetosaito/my-calc\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-calc-service\nspec:\n  ports:\n    - protocol: TCP\n      port: 5000\n  type: ClusterIP\n  selector:\n     run: my-calc\n```", "```\n$ kubectl create -f my-calc.yaml \ndeployment.apps \"my-calc-deploy\" created\nservice \"my-calc-service\" created\n```", "```\n$ cat my-frontend.yaml \napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-frontend-deploy\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      run: my-frontend\n  template:\n    metadata:\n      labels:\n        run: my-frontend\n    spec:\n      containers:\n      - name: my-frontend\n        image: hidetosaito/my-frontend\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: my-frontend-service\nspec:\n  ports:\n    - protocol: TCP\n      port: 5000\n      nodePort: 30080\n  type: NodePort\n  selector:\n     run: my-frontend\n\n$ kubectl create -f my-frontend.yaml \ndeployment.apps \"my-frontend-deploy\" created\nservice \"my-frontend-service\" created\n```", "```\n$ kubectl get deploy\nNAME                 DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE my-calc-deploy       2         2         2            2           30m my-frontend-deploy   2         2         2            2           28m \n$ kubectl scale deploy my-frontend-deploy --replicas=8\ndeployment \"my-frontend-deploy\" scaled\n\n$ kubectl scale deploy my-calc-deploy --replicas=16\ndeployment \"my-calc-deploy\" scaled\n\n$ kubectl get deploy NAME                 DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE my-calc-deploy       16        16        16           16          31m my-frontend-deploy   8         8         8            8           29m \n```", "```\n//my NFS server(10.138.0.5) shares /nfs directory\n$ showmount -e 10.138.0.5\nExport list for 10.138.0.5:\n/nfs *\n\n//please change spec.nfs.path and spec.nfs.server to yours\n$ cat pv_nfs.yaml \napiVersion: \"v1\"\nkind: \"PersistentVolume\"\nmetadata:\n  name: pvnfs01\nspec:\n  capacity:\n    storage: \"100Gi\"\n  accessModes:\n    - \"ReadWriteMany\"\n  nfs:\n    path: \"/nfs\"\n    server: \"10.138.0.5\"\n\n$ kubectl create -f pv_nfs.yaml \npersistentvolume \"pvnfs01\" created\n\n$ kubectl get pv\nNAME    CAPACITY ACCESS MODES RECLAIM POLICY STATUS    CLAIM STORAGECLASS REASON AGE\npvnfs01 100Gi    RWX          Retain         Available                           5s\n```", "```\n$ cat pvc-1.yml \napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n    name: pvc-1\nspec:\n  storageClassName: \"\"\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 100Gi\n\n$ kubectl create -f pvc-1.yml \npersistentvolumeclaim \"pvc-1\" created\n\n$ kubectl get pvc\nNAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE\npvc-1 Bound pvnfs01 100Gi RWX 5s\n```", "```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ecr:*\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n```", "```\n$ aws configure AWS Access Key ID [None]: <Your AWS ACCESS KEY ID> AWS Secret Access Key [None]: <Your AWS SECRET ACCESS KEY> Default region name [None]: us-east-1 Default output format [None]: \n```", "```\n$ gcloud container images list \nERROR: (gcloud.container.images.list) Bad status during token exchange: 403 \n```", "```\n$ gcloud container images list \nListed 0 items.  \n```", "```\n$ mkdir secrets\n```", "```\n$ openssl req -newkey rsa:4096 -nodes -sha256 -keyout secrets/domain.key -x509 -days 365 -out secrets/domain.crt\nGenerating a 4096 bit RSA private key\n.............................................++\n...........................................................++\nwriting new private key to 'secrets/domain.key'\n-----\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) []:us\nState or Province Name (full name) []:California\nLocality Name (eg, city) []:Cupertino\nOrganization Name (eg, company) []:packtpub\nOrganizational Unit Name (eg, section) []:chapter5\nCommon Name (eg, fully qualified host name) []:.\nEmail Address []:.\n```", "```\n$ ls secrets/\ndomain.crt domain.key\n```", "```\n//create 8 byte random HEX string by OpenSSL \n$ openssl rand -hex -out secrets/http.secret 8\n```", "```\n$ ls secrets/\ndomain.crt domain.key http.secret\n```", "```\n//set user=user01, passwd=my-super-secure-password\n$ docker run -i httpd /bin/bash -c 'echo my-super-secure-password | /usr/local/apache2/bin/htpasswd -nBi user01' > secrets/registry_passwd \n```", "```\n$ ls secrets/ domain.crt  domain.key  http.secret  registry_passwd\n```", "```\n$ kubectl create secret generic registry-secrets --from-file secrets/\nsecret \"registry-secrets\" created\n```", "```\n$ kubectl describe secret registry-secrets Name:         registry-secrets Namespace:    default Labels:       <none> Annotations:  <none> Type:  Opaque Data ==== domain.key:       3243 bytes http.secret:      17 bytes registry_passwd:  69 bytes domain.crt:       1899 bytes\n```", "```\n$ cat private_registry.yaml apiVersion: apps/v1 kind: Deployment metadata:\n name: my-private-registry spec:\n replicas: 1 selector: matchLabels: run: my-registry template: metadata: labels: run: my-registry spec: containers: - name: my-registry image: registry env: - name: REGISTRY_HTTP_HOST value: 10.138.0.3:30500 - name: REGISTRY_HTTP_SECRET valueFrom: secretKeyRef: name: registry-secrets key: http.secret - name: REGISTRY_HTTP_TLS_CERTIFICATE value: /mnt/domain.crt - name: REGISTRY_HTTP_TLS_KEY value: /mnt/domain.key - name: REGISTRY_AUTH_HTPASSWD_REALM value: basic-realm - name: REGISTRY_AUTH_HTPASSWD_PATH value: /mnt/registry_passwd ports: - containerPort: 5000 volumeMounts: - mountPath: /var/lib/registry name: registry-storage - mountPath: /mnt name: certs volumes: - name: registry-storage persistentVolumeClaim: claimName: \"pvc-1\" - name: certs secret: secretName: registry-secrets items: - key: domain.key path: domain.key - key: domain.crt path: domain.crt - key: registry_passwd path: registry_passwd  --- apiVersion: v1 kind: Service metadata:\n name: private-registry-svc spec:\n ports: - protocol: TCP port: 5000 nodePort: 30500 type: NodePort selector: run: my-registry $ kubectl create -f private_registry.yaml deployment.apps \"my-private-registry\" created service \"private-registry-svc\" created  //can scale to multiple Pod (if you have RWX PV set) $ kubectl scale deploy my-private-registry --replicas=3 deployment \"my-private-registry\" scaled   $ kubectl get deploy NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE my-private-registry   3         3         3            3           2m  \n```", "```\n$ aws ecr create-repository --repository-name my-nginx\n{\n    \"repository\": {\n        \"registryId\": \"************\", \n        \"repositoryName\": \"my-nginx\", \n        \"repositoryArn\": \"arn:aws:ecr:us-east-1:************:repository/my-nginx\", \n        \"createdAt\": 1516608220.0, \n        \"repositoryUri\": \"************.dkr.ecr.us-east-1.amazonaws.com/my-nginx\"\n    }\n}\n```", "```\n$ aws ecr create-repository --repository-name chapter5 An error occurred (AccessDeniedException) when calling the CreateRepository operation: User: arn:aws:iam::************:user/ecr-user is not authorized to perform: ecr:CreateRepository on resource: *\n```", "```\n<gcr region>/<project-id>/<image name>:tag\n```", "```\ngcr.io/kubernetes-cookbook/my-nginx:latest\n```", "```\n//just tag nginx to your own private image\n$ docker tag nginx 10.138.0.3:30500/my-nginx\n\n//will be failed when push without login information. using complete image name with private registry as prefix\n$ docker push 10.138.0.3:30500/my-nginx\nThe push refers to a repository [10.138.0.3:30500/my-nginx]\na103d141fc98: Preparing \n73e2bd445514: Preparing \n2ec5c0a4cb57: Preparing \nno basic auth credentials\n```", "```\n//docker login\n$ docker login 10.138.0.3:30500\nUsername: user01\nPassword: \nLogin Succeeded\n\n//successfully to push\n$ docker push 10.138.0.3:30500/my-nginx\nThe push refers to a repository [10.138.0.3:30500/my-nginx]\na103d141fc98: Pushed \n73e2bd445514: Pushed \n2ec5c0a4cb57: Pushed \nlatest: digest: sha256:926b086e1234b6ae9a11589c4cece66b267890d24d1da388c96dd8795b2ffcfb size: 948\n```", "```\n//create secret named \"my-private-credential\" $ kubectl create secret docker-registry my-private-credential \\\n> --docker-server=10.138.0.3:30500 \\\n> --docker-username=user01 \\\n> --docker-password=my-super-secure-password \\\n> --docker-email=hideto.saito@example.com secret \"my-private-credential\" created\n\n//successfully to created $ kubectl get secret my-private-credential NAME TYPE DATA AGE my-private-credential kubernetes.io/dockerconfigjson 1 18s\n```", "```\n$ cat private-nginx.yaml apiVersion: v1 kind: Pod metadata:\n name: private-nginx spec:\n containers: - name: private-nginx image: **10.138.0.3:30500/my-nginx** imagePullSecrets: - name: **my-private-credential** $ kubectl create -f private-nginx.yaml pod \"private-nginx\" created  //successfully to launch your Pod using private image\n$ kubectl get pods private-nginx NAME            READY     STATUS    RESTARTS   AGE private-nginx   1/1       Running   0          10s  \n```", "```\n$ aws ecr get-login --no-include-email \n```", "```\ndocker login -u AWS -p eyJwYXlsb2FkIjoiNy(very long strings)... https://************.dkr.ecr.us-east-1.amazonaws.com\n```", "```\n$ docker tag nginx ************.dkr.ecr.us-east-1.amazonaws.com/my-nginx\n\n$ docker push ************.dkr.ecr.us-east-1.amazonaws.com/my-nginx\nThe push refers to repository [************.dkr.ecr.us-east-1.amazonaws.com/my-nginx]\na103d141fc98: Pushed \n73e2bd445514: Pushing 8.783MB/53.23MB\n2ec5c0a4cb57: Pushing 4.333MB/55.26MB\n```", "```\n$ kubectl create secret docker-registry my-ecr-secret \\\n> --docker-server=https://************.dkr.ecr.us-east-1.amazonaws.com \\\n> --docker-email=hideto.saito@example.com \\\n> --docker-username=AWS \\\n> --docker-password=eyJwYXlsb2FkIjoiS... secret \"my-ecr-secret\" created $ kubectl get secret my-ecr-secret NAME            TYPE                             DATA      AGE my-ecr-secret   kubernetes.io/dockerconfigjson   1         10s\n```", "```\n$ cat private-nginx-ecr.yaml apiVersion: v1 kind: Pod metadata:\n name: private-nginx-ecr spec:\n containers: - name: private-nginx-ecr image: **************.dkr.ecr.us-east-1.amazonaws.com/my-nginx** imagePullSecrets: - name: **my-ecr-secret** $ kubectl create -f private-nginx-ecr.yaml pod \"private-nginx-ecr\" created $ kubectl get pods private-nginx-ecr NAME                READY     STATUS    RESTARTS   AGE private-nginx-ecr   1/1       Running   0          1m\n```", "```\n$ gcloud docker -- push gcr.io/kubernetes-cookbook/my-nginx \n```", "```\n$ gcloud iam service-accounts create container-sa \nCreated service account [container-sa]. //full name is as below $ gcloud iam service-accounts list | grep container container-sa@kubernetes-cookbook.iam.gserviceaccount.com  \n```", "```\n$ gcloud projects add-iam-policy-binding kubernetes-cookbook \\\n> --member serviceAccount:container-sa@kubernetes-cookbook.iam.gserviceaccount.com \\\n> --role=roles/storage.admin \n```", "```\n$ gcloud iam service-accounts keys create container-sa.json \\\n> --iam-account container-sa@kubernetes-cookbook.iam.gserviceaccount.com \n created key [f60a81235a1ed9fbce881639f621470cb087149c] of type [json] as [container-sa.json] for [container-sa@kubernetes-cookbook.iam.gserviceaccount.com] \n```", "```\n//note that username must be _json_key \n$ cat container-sa.json | docker login --username **_json_key** --password-stdin gcr.io Login Succeeded\n```", "```\n$ docker pull gcr.io/kubernetes-cookbook/my-nginx \nUsing default tag: latest latest: Pulling from kubernetes-cookbook/my-nginx e7bb522d92ff: Pulling fs layer 6edc05228666: Pulling fs layer  \n...  \n```", "```\n$ kubectl create secret docker-registry my-gcr-secret \\ > --docker-server=gcr.io \\ > --docker-username=_json_key \\ > --docker-password=`cat container-sa.json` \\ > --docker-email=hideto.saito@example.com secret \"my-gcr-secret\" created\n```", "```\n$ cat private-nginx-gcr.yaml apiVersion: v1 kind: Pod metadata:\n name: private-nginx-gcr spec:\n containers: - name: private-nginx-gcr image: **gcr.io/kubernetes-cookbook/my-nginx** imagePullSecrets: - name: **my-gcr-secret**  $ kubectl create -f private-nginx-gcr.yaml pod \"private-nginx-gcr\" created $ kubectl get pods NAME                READY     STATUS    RESTARTS   AGE private-nginx-gcr   1/1       Running   0          47s\n```", "```\n//enable RBAC and allocate 8G memory\n$ minikube start --memory=8192 **--extra-config=apiserver.Authorization.Mode=RBAC**\n```", "```\n$ cat Dockerfile FROM jenkins/jenkins:lts   EXPOSE 8080 50000 # install Docker CE for Debian : https://docs.docker.com/engine/installation/linux/docker-ce/debian/ USER root RUN apt-get update RUN apt-get install -y sudo apt-transport-https ca-certificates curl gnupg2 software-properties-common RUN curl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\")/gpg | apt-key add - RUN add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo \"$ID\") $(lsb_release -cs) stable\" RUN apt-get update && apt-get install -y docker-ce # install kubectl binary RUN curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.9.2/bin/linux/amd64/kubectl RUN chmod +x ./kubectl RUN mv ./kubectl /usr/local/bin/kubectl # setup Jenkins plubins : https://github.com/jenkinsci/docker#script-usage RUN /usr/local/bin/install-plugins.sh docker \n```", "```\n//build your own Jenkins image $ docker build -t <your-docker-hub-account>/my-jenkins .  //push to Docker Hub $ docker push <your-docker-hub-account>/my-jenkins\n```", "```\n$ kubectl get clusterrole cluster-admin NAME            AGE cluster-admin   42m\n```", "```\n$ cat jenkins-serviceaccount.yaml apiVersion: v1 kind: ServiceAccount metadata:\n name: jenkins-sa namespace: default $ kubectl create -f jenkins-serviceaccount.yaml serviceaccount \"jenkins-sa\" created  \n```", "```\n$ cat jenkins-cluteradmin.yaml apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata:\n name: jenkins-cluster-admin roleRef:\n apiGroup: rbac.authorization.k8s.io kind: ClusterRole name: cluster-admin subjects: - kind: ServiceAccount\n name: jenkins-sa namespace: default $ kubectl create -f jenkins-cluster-admin.yaml clusterrolebinding.rbac.authorization.k8s.io \"jenkins-cluster-admin\" created  \n```", "```\n$ cat jenkins.yaml apiVersion: apps/v1 kind: Deployment ...\n spec: **serviceAccountName: jenkins-sa** containers: - name: my-jenkins image: **hidetosaito/my-jenkins** readinessProbe: initialDelaySeconds: 40 tcpSocket: port: 8080  volumeMounts:        - mountPath: **/var/run/docker.sock**\n name: docker-sock \n        - mountPath: **/var/jenkins_home**\n          name: jenkins-data volumes:      - name: docker-sock\n hostPath:          path: **/var/run/docker.sock**  - name: jenkins-data\n        hostPath:\n          path: /data/jenkins-data ... $ kubectl create -f jenkins.yaml  deployment.apps \"my-jenkins\" created service \"my-jenkins-service\" created\n```", "```\n//check Jenkins Pod status\n$ kubectl get pods NAME                          READY     STATUS    RESTARTS   AGE my-jenkins-758b89849c-t2sm9   1/1       Running   0          17m\n\n//access to Jenkins Pod $ kubectl exec -it my-jenkins-758b89849c-t2sm9 -- /bin/bash   //within Jenkins Pod, you can run docker command root@my-jenkins-758b89849c-t2sm9:/# docker pull nginx Using default tag: latest latest: Pulling from library/nginx e7bb522d92ff: Pull complete 6edc05228666: Pull complete cd866a17e81f: Pull complete Digest: sha256:926b086e1234b6ae9a11589c4cece66b267890d24d1da388c96dd8795b2ffcfb Status: Downloaded newer image for nginx:latest   //within Jenkins Pod, you can run kubectl command\nroot@my-jenkins-758b89849c-t2sm9:/# kubectl get nodes NAME                                      STATUS    ROLES     AGE       VERSION gke-chapter5-default-pool-97f6cad9-19vm   Ready     <none>    1h        v1.8.6-gke.0 gke-chapter5-default-pool-97f6cad9-1qxc   Ready     <none>    1h        v1.8.6-gke.0 gke-chapter5-default-pool-97f6cad9-cglm   Ready     <none>    1h        v1.8.6-gke.0 //go back to your terminal\nroot@my-jenkins-758b89849c-t2sm9:/# exit exit  \n```", "```\n//check pod name\n$ kubectl get pods NAME                         READY     STATUS    RESTARTS   AGE my-jenkins-cbdd6446d-ttxj5   1/1       Running   0          1m\n\n//port forward from your machine :58080 to Jenkins :8080 $ kubectl port-forward my-jenkins-cbdd6446d-ttxj5 58080:8080 Forwarding from 127.0.0.1:58080 -> 8080\n```", "```\n$ kubectl get pods NAME                         READY     STATUS    RESTARTS   AGE my-jenkins-cbdd6446d-ttxj5   1/1       Running   0          1m //now you see initialAdminPassword\n$ kubectl exec my-jenkins-cbdd6446d-ttxj5 -- /bin/bash -c 'cat /var/jenkins_home/secrets/initialAdminPassword' 47e236f0bf334f838c33f80aac206c22\n```", "```\n$ cat my-calc.yaml apiVersion: apps/v1 kind: Deployment metadata:\n name: **my-calc-deploy** spec:\n replicas: 2 selector: matchLabels: run: my-calc template: metadata: labels: run: my-calc spec: containers: - name: **my-calc** image: **hidetosaito/my-calc**\n\n//use --record to trace the history $ kubectl create -f my-calc-deploy.yaml --record deployment.apps \"my-calc-deploy\" created\n```", "```\n#!/bin/sh\n\nset +x\n\n# These 2 are defined in Deployment YAML\nDEPLOYMENT_NAME=my-calc-deploy\nCONTAINER_NAME=my-calc\n\n# change to your Docker Hub repository\nREPOSITORY=hidetosaito/my-calc\n\necho \"*********************\"\necho \"*** before deploy ***\"\necho \"*********************\"\nkubectl rollout history deployment $DEPLOYMENT_NAME\nkubectl set image deployment $DEPLOYMENT_NAME $CONTAINER_NAME=$REPOSITORY:$BUILD_NUMBER\n\necho \"******************************************\"\necho \"*** waiting to complete rolling update ***\"\necho \"******************************************\"\nkubectl rollout status --watch=true deployment $DEPLOYMENT_NAME\n\necho \"********************\"\necho \"*** after deploy ***\"\necho \"********************\"\nkubectl rollout history deployment $DEPLOYMENT_NAME\n\n```"]