- en: Building Your Own Kubernetes Cluster
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建您自己的Kubernetes集群
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Exploring the Kubernetes architecture
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Kubernetes架构
- en: Setting up a Kubernetes cluster on macOS by minikube
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过minikube在macOS上设置Kubernetes集群
- en: Setting up a Kubernetes cluster on Windows by minikube
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过minikube在Windows上设置Kubernetes集群
- en: Setting up a Kubernetes cluster on Linux by kubeadm
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过kubeadm在Linux上设置Kubernetes集群
- en: Setting up a Kubernetes cluster on Linux by Ansible (kubespray)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过Ansible（kubespray）在Linux上设置Kubernetes集群
- en: Running your first container in Kubernetes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kubernetes中运行您的第一个容器
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Welcome to your journey into Kubernetes! In this very first section, you will
    learn how to build your own Kubernetes cluster. Along with understanding each
    component and connecting them together, you will learn how to run your first container
    on Kubernetes. Having a Kubernetes cluster will help you continue your studies
    in the chapters ahead.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到您的Kubernetes之旅！在这个非常第一节中，您将学习如何构建自己的Kubernetes集群。除了理解每个组件并将它们连接在一起，您还将学习如何在Kubernetes上运行您的第一个容器。拥有一个Kubernetes集群将帮助您在接下来的章节中继续学习。
- en: Exploring the Kubernetes architecture
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Kubernetes架构
- en: Kubernetes is an open source container management tool. It is a Go language-based
    ([https://golang.org](https://golang.org)), lightweight and portable application.
    You can set up a Kubernetes cluster on a Linux-based OS to deploy, manage, and
    scale Docker container applications on multiple hosts.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是一个开源的容器管理工具。它是基于Go语言（[https://golang.org](https://golang.org)）的，轻量级且便携的应用程序。您可以在基于Linux的操作系统上设置一个Kubernetes集群，以在多个主机上部署、管理和扩展Docker容器应用程序。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Kubernetes is made up of the following components:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes由以下组件组成：
- en: Kubernetes master
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes主节点
- en: Kubernetes nodes
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes节点
- en: etcd
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: etcd
- en: Kubernetes network
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes网络
- en: 'These components are connected via a network, as shown in the following diagram:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件通过网络连接，如下图所示：
- en: '![](assets/e964924c-0254-4850-ae57-8d05133ea0aa.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e964924c-0254-4850-ae57-8d05133ea0aa.png)'
- en: 'The preceding diagram can be summarized as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图可以总结如下：
- en: '**Kubernetes master**: It connects to etcd via HTTP or HTTPS to store the data'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes主节点**：它通过HTTP或HTTPS连接到etcd以存储数据'
- en: '**Kubernetes nodes**: It connect to the Kubernetes master via HTTP or HTTPS
    to get a command and report the status'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes节点**：它通过HTTP或HTTPS连接到Kubernetes主节点以获取命令并报告状态'
- en: '**Kubernetes network**: It L2, L3 or overlay make a connection of their container
    applications'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes网络**：它的L2、L3或覆盖层连接其容器应用程序'
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: In this section, we are going to explain how to use the Kubernetes master and
    nodes to realize the main functions of the Kubernetes system.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将解释如何使用Kubernetes主节点和节点来实现Kubernetes系统的主要功能。
- en: Kubernetes master
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes主节点
- en: 'The Kubernetes master is the main component of the Kubernetes cluster. It serves
    several functionalities, such as the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes主节点是Kubernetes集群的主要组件。它提供了多种功能，例如：
- en: Authorization and authentication
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权和认证
- en: RESTful API entry point
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RESTful API入口点
- en: Container deployment scheduler to Kubernetes nodes
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器部署调度程序到Kubernetes节点
- en: Scaling and replicating controllers
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展和复制控制器
- en: Reading the configuration to set up a cluster
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读配置以设置集群
- en: 'The following diagram shows how master daemons work together to fulfill the
    aforementioned functionalities:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了主节点守护程序如何共同实现上述功能：
- en: '![](assets/d05d8b65-158f-4a4b-8a4c-b9cf00ef1133.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d05d8b65-158f-4a4b-8a4c-b9cf00ef1133.png)'
- en: There are several daemon processes that form the Kubernetes master's functionality,
    such as `kube-apiserver`, `kube-scheduler` and `kube-controller-manager`. Hypercube,
    the wrapper binary, can launch all these daemons.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个守护进程组成了Kubernetes主节点的功能，例如`kube-apiserver`、`kube-scheduler`和`kube-controller-manager`。Hypercube，这个包装二进制文件，可以启动所有这些守护进程。
- en: In addition, the Kubernetes command-line interface, kubect can control the Kubernetes
    master functionality.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Kubernetes命令行界面kubect可以控制Kubernetes主节点的功能。
- en: API server (kube-apiserver)
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API服务器（kube-apiserver）
- en: The API server provides an HTTP- or HTTPS-based RESTful API, which is the hub
    between Kubernetes components, such as kubectl, the scheduler, the replication
    controller, the etcd data store, the kubelet and kube-proxy, which runs on Kubernetes
    nodes, and so on.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: API服务器提供基于HTTP或HTTPS的RESTful API，它是Kubernetes组件之间的中心枢纽，例如kubectl、调度程序、复制控制器、etcd数据存储、运行在Kubernetes节点上的kubelet和kube-proxy等。
- en: Scheduler (kube-scheduler)
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调度程序（kube-scheduler）
- en: 'The scheduler helps to choose which container runs on which nodes. It is a
    simple algorithm that defines the priority for dispatching and binding containers
    to nodes. For example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 调度程序帮助选择哪个容器在哪个节点上运行。这是一个简单的算法，定义了分派和绑定容器到节点的优先级。例如：
- en: CPU
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU
- en: Memory
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存
- en: How many containers are running?
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多少容器正在运行？
- en: Controller manager (kube-controller-manager)
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器管理器（kube-controller-manager）
- en: 'The controller manager performs cluster operations. For example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器管理器执行集群操作。例如：
- en: Manages Kubernetes nodes
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理Kubernetes节点
- en: Creates and updates the Kubernetes internal information
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和更新Kubernetes内部信息
- en: Attempts to change the current status to the desired status
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试将当前状态更改为期望的状态
- en: Command-line interface (kubectl)
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行界面（kubectl）
- en: 'After you install the Kubernetes master, you can use the Kubernetes command-line
    interface, `kubectl`, to control the Kubernetes cluster. For example, `kubectl
    get cs` returns the status of each component. Also, `kubectl get nodes` returns
    a list of Kubernetes nodes:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Kubernetes主节点后，您可以使用Kubernetes命令行界面`kubectl`来控制Kubernetes集群。例如，`kubectl get
    cs`返回每个组件的状态。另外，`kubectl get nodes`返回Kubernetes节点的列表：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Kubernetes node
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes节点
- en: The Kubernetes node is a slave node in the Kubernetes cluster. It is controlled
    by the Kubernetes master to run container applications using Docker ([http://docker.com](http://docker.com))
    or rkt ([http://coreos.com/rkt/docs/latest/)](http://coreos.com/rkt/docs/latest/).
    In this book, we will use the Docker container runtime as the default engine.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes节点是Kubernetes集群中的从属节点。它由Kubernetes主节点控制，使用Docker（[http://docker.com](http://docker.com)）或rkt（[http://coreos.com/rkt/docs/latest/)](http://coreos.com/rkt/docs/latest/)来运行容器应用程序。在本书中，我们将使用Docker容器运行时作为默认引擎。
- en: Node or slave?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 节点还是从属节点？
- en: The term slave is used in the computer industry to represent the cluster worker
    node; however, it is also associated with discrimination. The Kubernetes project
    uses minion in the early version and node in the current version.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 术语“slave”在计算机行业中用于表示集群工作节点；然而，它也与歧视有关。Kubernetes项目在早期版本中使用minion，在当前版本中使用node。
- en: 'The following diagram displays the role and tasks of daemon processes in the
    node:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了节点中守护进程的角色和任务：
- en: '![](assets/bd21b8ae-fe86-4015-8b84-3a5e8aa502a9.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bd21b8ae-fe86-4015-8b84-3a5e8aa502a9.png)'
- en: The node also has two daemon processes, named kubelet and kube-proxy, to support
    its functionalities.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该节点还有两个守护进程，名为kubelet和kube-proxy，以支持其功能。
- en: kubelet
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: kubelet
- en: 'kubelet is the main process on the Kubernetes node that communicates with the
    Kubernetes master to handle the following operations:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: kubelet是Kubernetes节点上的主要进程，与Kubernetes主节点通信，处理以下操作：
- en: Periodically accesses the API controller to check and report
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期访问API控制器以检查和报告
- en: Performs container operations
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行容器操作
- en: Runs the HTTP server to provide simple APIs
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行HTTP服务器以提供简单的API
- en: Proxy (kube-proxy)
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理（kube-proxy）
- en: The proxy handles the network proxy and load balancer for each container. It
    changes Linux iptables rules (nat table) to control TCP and UDP packets across
    the containers.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 代理处理每个容器的网络代理和负载均衡器。它改变Linux iptables规则（nat表）以控制容器之间的TCP和UDP数据包。
- en: 'After starting the kube-proxy daemon, it configures iptables rules; you can
    use `iptables -t nat -L` or `iptables -t nat -S` to check the nat table rules,
    as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 启动kube-proxy守护程序后，它会配置iptables规则；您可以使用`iptables -t nat -L`或`iptables -t nat
    -S`来检查nat表规则，如下所示：
- en: '[PRE1]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: There are two more components to complement Kubernetes node functionalities,
    the data store etcd and the inter-container network. You can learn how they support
    the Kubernetes system in the following subsections.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 还有两个组件可以补充Kubernetes节点功能，即数据存储etcd和容器之间的网络。您可以在以下子节中了解它们如何支持Kubernetes系统。
- en: etcd
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: etcd
- en: etcd ([https://coreos.com/etcd/](https://coreos.com/etcd/)) is the distributed
    key-value data store. It can be accessed via the RESTful API to perform CRUD operations
    over the network. Kubernetes uses etcd as the main data store.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: etcd（[https://coreos.com/etcd/](https://coreos.com/etcd/)）是分布式键值数据存储。可以通过RESTful
    API访问它，以在网络上执行CRUD操作。Kubernetes使用etcd作为主要数据存储。
- en: 'You can explore the Kubernetes configuration and status in etcd (`/registry`)
    using the `curl` command, as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`curl`命令在etcd（`/registry`）中探索Kubernetes配置和状态，如下所示：
- en: '[PRE2]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Kubernetes network
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes网络
- en: Network communication between containers is the most difficult part. Because
    Kubernetes manages multiple nodes (hosts) running several containers, those containers
    on different nodes may need to communicate with each other.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 容器之间的网络通信是最困难的部分。因为Kubernetes管理着运行多个容器的多个节点（主机），不同节点上的容器可能需要相互通信。
- en: If the container's network communication is only within a single node, you can
    use Docker network or Docker compose to discover the peer. However, along with
    multiple nodes, Kubernetes uses an overlay network or **container network interface**
    (**CNI**) to achieve multiple container communication.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果容器的网络通信仅在单个节点内部，您可以使用Docker网络或Docker compose来发现对等体。然而，随着多个节点的出现，Kubernetes使用覆盖网络或容器网络接口（CNI）来实现多个容器之间的通信。
- en: See also
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: This recipe describes the basic architecture and methodology of Kubernetes and
    the related components. Understanding Kubernetes is not easy, but a step-by-step
    learning process on how to set up, configure, and manage Kubernetes is really
    fun.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 本文介绍了Kubernetes及其相关组件的基本架构和方法论。理解Kubernetes并不容易，但逐步学习如何设置、配置和管理Kubernetes的过程确实很有趣。
- en: Setting up the Kubernetes cluster on macOS by minikube
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过minikube在macOS上设置Kubernetes集群
- en: Kubernetes consists of combination of multiple open source components. These
    are developed by different parties, making it difficult to find and download all
    the related packages and install, configure, and make them work from scratch.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes由多个开源组件组合而成。这些组件由不同的团体开发，使得很难找到并下载所有相关的软件包，并从头开始安装、配置和使它们工作。
- en: Fortunately, there are some different solutions and tools that have been developed
    to set up Kubernetes clusters effortlessly. Therefore, it is highly recommended
    you use such a tool to set up Kubernetes on your environment.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，已经开发出了一些不同的解决方案和工具，可以轻松设置Kubernetes集群。因此，强烈建议您使用这样的工具在您的环境中设置Kubernetes。
- en: 'The following tools are categorized by different types of solution to build
    your own Kubernetes:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下工具按不同类型的解决方案进行分类，以构建您自己的Kubernetes：
- en: 'Self-managed solutions that include:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自管理的解决方案包括：
- en: minikube
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: minikube
- en: kubeadm
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kubeadm
- en: kubespray
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kubespray
- en: kops
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kops
- en: 'Enterprise solutions that include:'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括企业解决方案：
- en: OpenShift ([https://www.openshift.com](https://www.openshift.com))
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenShift ([https://www.openshift.com](https://www.openshift.com))
- en: Tectonic ([https://coreos.com/tectonic/](https://coreos.com/tectonic/))
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tectonic ([https://coreos.com/tectonic/](https://coreos.com/tectonic/))
- en: 'Cloud-hosted solutions that include:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括的云托管解决方案：
- en: Google Kubernetes engine ([https://cloud.google.com/kubernetes-engine/](https://cloud.google.com/kubernetes-engine/))
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Kubernetes engine ([https://cloud.google.com/kubernetes-engine/](https://cloud.google.com/kubernetes-engine/))
- en: Amazon elastic container service for Kubernetes (Amazon EKS, [https://aws.amazon.com/eks/](https://aws.amazon.com/eks/))
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon elastic container service for Kubernetes (Amazon EKS, [https://aws.amazon.com/eks/](https://aws.amazon.com/eks/))
- en: Azure Container Service (AKS, [https://azure.microsoft.com/en-us/services/container-service/](https://azure.microsoft.com/en-us/services/container-service/))
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Container Service (AKS, [https://azure.microsoft.com/en-us/services/container-service/](https://azure.microsoft.com/en-us/services/container-service/))
- en: A self-managed solution is suitable if we just want to build a development environment
    or do a proof of concept quickly.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只想构建开发环境或快速进行概念验证，自管理解决方案是合适的。
- en: By using minikube ([https://github.com/kubernetes/minikube](https://github.com/kubernetes/minikube))
    and kubeadm ([https://kubernetes.io/docs/admin/kubeadm/](https://kubernetes.io/docs/admin/kubeadm/)),
    we can easily build the desired environment on our machine locally; however, it
    is not practical if we want to build a production environment.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用minikube ([https://github.com/kubernetes/minikube](https://github.com/kubernetes/minikube))
    和kubeadm ([https://kubernetes.io/docs/admin/kubeadm/](https://kubernetes.io/docs/admin/kubeadm/)),
    我们可以在本地轻松构建所需的环境; 但是，如果我们想构建生产环境，这是不切实际的。
- en: By using kubespray ([https://github.com/kubernetes-incubator/kubespray](https://github.com/kubernetes-incubator/kubespray))
    and kops ([https://github.com/kubernetes/kops](https://github.com/kubernetes/kops)),
    we can also build a production-grade environment quickly from scratch.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用kubespray ([https://github.com/kubernetes-incubator/kubespray](https://github.com/kubernetes-incubator/kubespray))
    和kops ([https://github.com/kubernetes/kops](https://github.com/kubernetes/kops)),
    我们也可以从头快速构建生产级环境。
- en: 'An enterprise solution or cloud-hosted solution is the easiest starting point
    if we want to create a production environment. In particular, the **Google Kubernetes
    Engine** (**GKE**), which has been used by Google for many years, comes with comprehensive
    management, meaning that users don''t need to care much about the installation
    and settings. Also, Amazon EKS is a new service that was introduced at AWS re:
    Invent 2017, which is managed by the Kubernetes service on AWS.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们想创建生产环境，企业解决方案或云托管解决方案是最简单的起点。特别是**Google Kubernetes Engine** (**GKE**),
    被Google使用多年，具有全面的管理，意味着用户不需要过多关心安装和设置。此外，Amazon EKS是一个新的服务，于AWS re: Invent 2017年推出，由AWS上的Kubernetes服务管理。'
- en: Kubernetes can also run on different clouds and on-premise VMs by custom solutions.
    To get started, we will build Kubernetes using minikube on macOS desktop machines
    in this chapter.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes也可以通过自定义解决方案在不同的云和本地VM上运行。在本章中，我们将在macOS桌面机上使用minikube构建Kubernetes。
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: minikube runs Kubernetes on the Linux VM on macOS. It relies on a hypervisor
    (virtualization technology), such as VirtualBox ([https://www.virtualbox.org](https://www.virtualbox.org)),
    VMWare fusion ([https://www.vmware.com/products/fusion.html](https://www.vmware.com/products/fusion.html)),
    or hyperkit ([https://github.com/moby/hyperkit](https://github.com/moby/hyperkit))
    In addition, we will need to have the Kubernetes **command-line interface** (**CLI**)
    `kubectl`, which is used to connect through the hypervisor, to control Kubernetes.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: minikube在macOS上的Linux VM上运行Kubernetes。它依赖于hypervisor（虚拟化技术），例如VirtualBox ([https://www.virtualbox.org](https://www.virtualbox.org))，VMWare
    fusion ([https://www.vmware.com/products/fusion.html](https://www.vmware.com/products/fusion.html))或hyperkit
    ([https://github.com/moby/hyperkit](https://github.com/moby/hyperkit))。此外，我们还需要Kubernetes
    **命令行界面**（**CLI**）`kubectl`，用于通过hypervisor连接和控制Kubernetes。
- en: With minikube, you can run the entire suite of the Kubernetes stack on your
    macOS, including the Kubernetes master, node, and CLI. It is recommended that
    macOS has enough memory to run Kubernetes. By default, minikube uses VirtualBox
    as the hypervisor.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用minikube，您可以在macOS上运行整个Kubernetes堆栈，包括Kubernetes主节点和CLI。建议macOS具有足够的内存来运行Kubernetes。默认情况下，minikube使用VirtualBox作为hypervisor。
- en: In this chapter, however, we will demonstrate how to use hyperkit, which is
    the most lightweight solution. As Linux VM consumes 2 GB of memory, at least 4
    GB of memory is recommended. Note that hyperkit is built on the top of the hypervisor
    framework ([https://developer.apple.com/documentation/hypervisor](https://developer.apple.com/documentation/hypervisor))
    on macOS; therefore, macOS 10.10 Yosemite or later is required.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在本章中，我们将演示如何使用hyperkit，这是最轻量级的解决方案。由于Linux VM消耗2GB内存，建议至少4GB内存。请注意，hyperkit是建立在macOS的hypervisor框架（[https://developer.apple.com/documentation/hypervisor](https://developer.apple.com/documentation/hypervisor)）之上的，因此需要macOS
    10.10 Yosemite或更高版本。
- en: 'The following diagram shows the relationship between kubectl, the hypervisor,
    minikube, and macOS:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了kubectl、hypervisor、minikube和macOS之间的关系：
- en: '![](assets/52edf167-0558-4969-b440-eddb763d898e.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/52edf167-0558-4969-b440-eddb763d898e.png)'
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: macOS doesn't have an official package management tool, such as yum and apt-get
    on Linux. But there are some useful tools available for macOS. `Homebrew` ([https://brew.sh](https://brew.sh))
    is the most popular package management tool and manages many open source tools,
    including minikube.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: macOS没有官方的软件包管理工具，如Linux上的yum和apt-get。但是有一些对macOS有用的工具。`Homebrew` ([https://brew.sh](https://brew.sh))是最流行的软件包管理工具，管理许多开源工具，包括minikube。
- en: 'In order to install `Homebrew` on macOS, perform the following steps:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要在macOS上安装`Homebrew`，请执行以下步骤：
- en: 'Open the Terminal and then type the following command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端，然后输入以下命令：
- en: '[PRE3]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once installation is completed, you can type `/usr/local/bin/brew help` to see
    the available command options.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，您可以输入`/usr/local/bin/brew help`来查看可用的命令选项。
- en: If you just install or upgrade Xcode on your macOS, the `Homebrew` installation
    may stop. In that case, open Xcode to accept the license agreement or type `sudo
    xcodebuild -license` beforehand.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您刚刚在macOS上安装或升级Xcode，则可能会导致`Homebrew`安装停止。在这种情况下，打开Xcode以接受许可协议，或者事先输入`sudo
    xcodebuild -license`。
- en: 'Next, install the `hyperkit driver` for minikube. At the time of writing (February
    2018), HomeBrew does not support hyperkit; therefore type the following command
    to install it:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为minikube安装`hyperkit driver`。在撰写本文时（2018年2月），HomeBrew不支持hyperkit；因此，请输入以下命令进行安装：
- en: '[PRE4]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, let''s install the Kubernetes CLI. Use Homebrew with the following comment
    to install the `kubectl` command on your macOS:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们安装Kubernetes CLI。使用Homebrew和以下命令在您的macOS上安装`kubectl`命令：
- en: '[PRE5]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Finally, you can install minikube. It is not managed by Homebrew; however, Homebrew
    has an extension called `homebrew-cask` ([https://github.com/caskroom/homebrew-cask](https://github.com/caskroom/homebrew-cask))
    that supports minikube.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以安装minikube。它不是由Homebrew管理的；但是，Homebrew有一个名为`homebrew-cask`的扩展（[https://github.com/caskroom/homebrew-cask](https://github.com/caskroom/homebrew-cask)）支持minikube。
- en: 'In order to install minikube by `homebrew-cask`, just simply type the following
    command:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了通过`homebrew-cask`安装minikube，只需简单地键入以下命令：
- en: '[PRE6]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you have never installed **Docker for Mac** on your machine, you need to
    install it via `homebrew-cask` as well
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您从未在您的机器上安装过**Docker for Mac**，您也需要通过`homebrew-cask`安装它
- en: '[PRE7]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now you are all set! The following command shows whether the required packages
    have been installed on your macOS or not:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您已经准备就绪！以下命令显示了您的macOS上是否已安装所需的软件包：
- en: '[PRE8]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'minikube is suitable for setting up Kubernetes on your macOS with the following
    command, which downloads and starts a Kubernetes VM stet, and then configures
    the kubectl configuration (`~/.kube/config`):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: minikube适用于使用以下命令在您的macOS上设置Kubernetes，该命令下载并启动Kubernetes VM stet，然后配置kubectl配置（`~/.kube/config`）：
- en: '[PRE9]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After getting all the necessary packages, perform the following steps:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 获取所有必要的软件包后，执行以下步骤：
- en: Wait for a few minutes for the Kubernetes cluster setup to complete.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几分钟，直到Kubernetes集群设置完成。
- en: Use `kubectl version` to check the Kubernetes master version and `kubectl get
    cs` to see the component status.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl version`来检查Kubernetes主版本，使用`kubectl get cs`来查看组件状态。
- en: 'Also, use the `kubectl get nodes` command to check whether the Kubernetes node
    is ready or not:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，使用`kubectl get nodes`命令来检查Kubernetes节点是否准备好：
- en: '[PRE10]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now you can start to use Kubernetes on your machine. The following sections
    describe how to use the `kubectl` command to manipulate Docker containers.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以在您的机器上开始使用Kubernetes。以下部分描述了如何使用`kubectl`命令来操作Docker容器。
- en: 'Note that, in some cases, you may need to maintain the Kubernetes cluster,
    such as starting/stopping the VM or completely deleting it. The following commands 
    maintain the minikube environment:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请注意，在某些情况下，您可能需要维护Kubernetes集群，例如启动/停止VM或完全删除它。以下命令维护minikube环境：
- en: '| **Command** | **Purpose** |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **目的** |'
- en: '| `minikube start --vm-driver=hyperkit` | Starts the Kubernetes VM using the
    hyperkit driver |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `minikube start --vm-driver=hyperkit` | 使用hyperkit驱动程序启动Kubernetes VM |'
- en: '| `minikube stop` | Stops the Kubernetes VM |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `minikube stop` | 停止Kubernetes VM |'
- en: '| `minikube delete` | Deletes a Kubernetes VM image |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `minikube delete` | 删除Kubernetes VM镜像 |'
- en: '| `minikube ssh` | ssh to the Kubernetes VM guest |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `minikube ssh` | ssh到Kubernetes VM guest |'
- en: '| `minikube ip` | Shows the Kubernetes VM (node) IP address |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `minikube ip` | 显示Kubernetes VM（节点）的IP地址 |'
- en: '| `minikube update-context` | Checks and updates `~/.kube/config` if the VM
    IP address is changed |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `minikube update-context` | 检查并更新`~/.kube/config`，如果VM IP地址发生变化 |'
- en: '| `minikube dashboard` | Opens the web browser to connect the Kubernetes UI
    |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `minikube dashboard` | 打开Web浏览器连接Kubernetes UI |'
- en: 'For example, minikube starts a dashboard (the Kubernetes UI) by the default.
    If you want to access the dashboard, type `minikube dashboard`; it then opens
    your default browser and connects the Kubernetes UI, as illustrated in the following
    screenshot:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，minikube默认启动仪表板（Kubernetes UI）。如果您想访问仪表板，请键入`minikube dashboard`；然后它会打开您的默认浏览器并连接Kubernetes
    UI，如下面的屏幕截图所示：
- en: '![](assets/8d9207f5-35c3-4b5a-82cc-0025425f1ff1.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8d9207f5-35c3-4b5a-82cc-0025425f1ff1.png)'
- en: See also
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: This recipe describes how to set up a Kubernetes cluster on your macOS using
    minikube. It is the easiest way to start using Kubernetes. We also learned how
    to use kubectl, the Kubernetes command-line interface tool, which is the entry
    point to control our Kubernetes cluster!
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程描述了如何使用minikube在macOS上设置Kubernetes集群。这是开始使用Kubernetes的最简单方法。我们还学习了如何使用kubectl，即Kubernetes命令行接口工具，这是控制我们的Kubernetes集群的入口点！
- en: Setting up the Kubernetes cluster on Windows by minikube
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上通过minikube设置Kubernetes集群
- en: By nature, Docker and Kubernetes are based on a Linux-based OS. Although it
    is not ideal to use the Windows OS to explore Kubernetes, many people are using
    the Windows OS as their desktop or laptop machine. Luckily, there are a lot of
    ways to run the Linux OS on Windows using virtualization technologies, which makes
    running a Kubernetes cluster on Windows machines possible. Then, we can build
    a development environment or do a proof of concept on our local Windows machine.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，Docker和Kubernetes是基于Linux操作系统的。虽然使用Windows操作系统来探索Kubernetes并不理想，但许多人将Windows操作系统用作他们的台式机或笔记本电脑。幸运的是，有很多方法可以使用虚拟化技术在Windows上运行Linux操作系统，这使得在Windows机器上运行Kubernetes集群成为可能。然后，我们可以在本地Windows机器上构建开发环境或进行概念验证。
- en: You can run the Linux VM by using any hypervisor on Windows to set up Kubernetes
    from scratch, but using minikube ([https://github.com/kubernetes/minikube](https://github.com/kubernetes/minikube))
    is the fastest way to build a Kubernetes cluster on Windows. Note that this recipe
    is not ideal for a production environment because it will set up a Kubernetes
    on Linux VM on Windows.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Windows上的任何Hypervisor来运行Linux虚拟机，从头开始设置Kubernetes，但使用minikube ([https://github.com/kubernetes/minikube](https://github.com/kubernetes/minikube))
    是在Windows上构建Kubernetes集群的最快方法。请注意，本教程并不适用于生产环境，因为它将在Windows上的Linux虚拟机上设置Kubernetes。
- en: Getting ready
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To set up minikube on Windows requires a hypervisor, either VirtualBox ([https://www.virtualbox.org](https://www.virtualbox.org))
    or Hyper-V, because, again, minikube uses the Linux VM on Windows. This means
    that you cannot use the Windows virtual machine (for example, running the Windows
    VM on macOS by parallels).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上设置minikube需要一个Hypervisor，要么是VirtualBox ([https://www.virtualbox.org](https://www.virtualbox.org))
    要么是Hyper-V，因为minikube再次使用Windows上的Linux虚拟机。这意味着您不能使用Windows虚拟机（例如，在macOS上通过parallels运行Windows虚拟机）。
- en: However, `kubectl` , the Kubernetes CLI, supports a Windows native binary that
    can connect to Kubernetes over a network. So, you can set up a portable suite
    of Kubernetes stacks on your Windows machine.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`kubectl`，Kubernetes CLI，支持一个可以通过网络连接到Kubernetes的Windows本机二进制文件。因此，您可以在Windows机器上设置一个便携式的Kubernetes堆栈套件。
- en: 'The following diagram shows the relationship between kubectl, Hypervisor, minikube,
    and Windows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了kubectl、Hypervisor、minikube和Windows之间的关系：
- en: '![](assets/a68272cf-8a6b-4ad9-8b69-bf2e0a3b06b4.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a68272cf-8a6b-4ad9-8b69-bf2e0a3b06b4.png)'
- en: Hyper-V is required for Windows 8 Pro or later. While many users still use Windows
    7, we will use VirtualBox as the minikube hypervisor in this recipe.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 8专业版或更高版本需要Hyper-V。虽然许多用户仍在使用Windows 7，但在本教程中我们将使用VirtualBox作为minikube的Hypervisor。
- en: How to do it...
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'First of all, VirtualBox for Windows is required:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，需要Windows的VirtualBox：
- en: Go to the VirtualBox website ([https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads))
    to download the Windows installer.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往VirtualBox网站 ([https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads))
    下载Windows安装程序。
- en: 'Installation is straightforward, so we can just choose the default options
    and click Next:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装非常简单，所以我们可以选择默认选项并点击下一步：
- en: '![](assets/974c0731-431f-4311-92d5-e90fb7125196.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/974c0731-431f-4311-92d5-e90fb7125196.png)'
- en: 'Next, create the `Kubernetes` folder, which is used to store the minikube and
    kubectl binaries. Let''s create the `k8s` folder on top of the `C:` drive, as
    shown in the following screenshot:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建用于存储 minikube 和 kubectl 二进制文件的 `Kubernetes` 文件夹。让我们在 `C:` 驱动器的顶部创建 `k8s`
    文件夹，如下面的屏幕截图所示：
- en: '![](assets/0e05fcfa-9a7e-4433-8092-da2715ed76df.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0e05fcfa-9a7e-4433-8092-da2715ed76df.png)'
- en: This folder must be in the command search path, so open System Properties, then
    move to the Advanced tab.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此文件夹必须在命令搜索路径中，因此打开系统属性，然后转到高级选项卡。
- en: 'Click the Environment Variables... button, then choose Path , and then click
    the Edit... button, as shown in the following screenshot:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“环境变量...”按钮，然后选择“路径”，然后单击“编辑...”按钮，如下面的屏幕截图所示：
- en: '![](assets/5aca299b-611c-48ae-973d-e8a219ab1b47.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5aca299b-611c-48ae-973d-e8a219ab1b47.png)'
- en: 'Then, append `c:\k8s` , as follows:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，追加 `c:\k8s`，如下所示：
- en: '![](assets/06503e44-8ead-4b89-b980-9317068883c4.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/06503e44-8ead-4b89-b980-9317068883c4.png)'
- en: After clicking the OK button, log off and logo on to Windows again (or reboot)
    to apply this change.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“确定”按钮后，注销并重新登录到 Windows（或重新启动）以应用此更改。
- en: Next, download minikube for Windows. It is a single binary, so use any web browser
    to download [https://github.com/kubernetes/minikube/releases/download/v0.26.1/minikube-windows-amd64](https://github.com/kubernetes/minikube/releases/download/v0.26.1/minikube-windows-amd64)
    and then copy it to the `c:\k8s` folder, but change the filename to `minikube.exe`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，下载 Windows 版的 minikube。它是一个单一的二进制文件，因此可以使用任何网络浏览器下载 [https://github.com/kubernetes/minikube/releases/download/v0.26.1/minikube-windows-amd64](https://github.com/kubernetes/minikube/releases/download/v0.26.1/minikube-windows-amd64)，然后将其复制到
    `c:\k8s` 文件夹，但将文件名更改为 `minikube.exe`。
- en: Next, download kubectl for Windows, which can communicate with Kubernetes. It
    is also single binary like minikube. So, download [https://storage.googleapis.com/kubernetes-release/release/v1.10.2/bin/windows/amd64/kubectl.exe](https://storage.googleapis.com/kubernetes-release/release/v1.10.2/bin/windows/amd64/kubectl.exe)
    and then copy it to the `c:\k8s` folder as well.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，下载 Windows 版的 kubectl，它可以与 Kubernetes 进行通信。它也像 minikube 一样是单一的二进制文件。因此，下载
    [https://storage.googleapis.com/kubernetes-release/release/v1.10.2/bin/windows/amd64/kubectl.exe](https://storage.googleapis.com/kubernetes-release/release/v1.10.2/bin/windows/amd64/kubectl.exe)，然后也将其复制到
    `c:\k8s` 文件夹中。
- en: 'Eventually, you will see two binaries in the `c:\k8s` folder, as shown in the
    following screenshot:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终，您将在 `c:\k8s` 文件夹中看到两个二进制文件，如下面的屏幕截图所示：
- en: '![](assets/d769ed44-88be-4a27-93d7-bdb86f28fdbf.png)If you are running anti-virus
    software, it may prevent you from running `kubectl.exe` and `minikube.exe`. If
    so, please update your anti-virus software setting that allows running these two
    binaries.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/d769ed44-88be-4a27-93d7-bdb86f28fdbf.png)如果您正在运行防病毒软件，可能会阻止您运行 `kubectl.exe`
    和 `minikube.exe`。如果是这样，请更新您的防病毒软件设置，允许运行这两个二进制文件。'
- en: How it works...
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Let's get started!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: 'Open Command Prompt and then type `minikube start` , as shown in the following
    screenshot:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开命令提示符，然后键入 `minikube start`，如下面的屏幕截图所示：
- en: '![](assets/cf21415a-f5c0-4528-95d0-74ae67d5f90f.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cf21415a-f5c0-4528-95d0-74ae67d5f90f.png)'
- en: 'minikube downloads the Linux VM image and then sets up Kubernetes on the Linux
    VM; now if you open VirtualBox, you can see that the minikube guest has been registered,
    as illustrated in the following screenshot:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: minikube 下载 Linux VM 镜像，然后在 Linux VM 上设置 Kubernetes；现在，如果打开 VirtualBox，您可以看到
    minikube 客户端已经注册，如下面的屏幕截图所示：
- en: '![](assets/49a5d949-29c4-4762-8ee0-f89969082c19.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/49a5d949-29c4-4762-8ee0-f89969082c19.png)'
- en: Wait for a few minutes to complete the setup of the Kubernetes cluster.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几分钟，完成 Kubernetes 集群的设置。
- en: As per the following screenshot, type `kubectl version` to check the Kubernetes
    master version.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据下面的屏幕截图，键入 `kubectl version` 来检查 Kubernetes 主版本。
- en: 'Use the `kubectl get nodes` command to check whether the Kubernetes node is
    ready or not:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl get nodes`命令检查Kubernetes节点是否准备就绪：
- en: '![](assets/d323c09d-4c29-4862-8fdd-9ab4ab63be36.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d323c09d-4c29-4862-8fdd-9ab4ab63be36.png)'
- en: Now you can start to use Kubernetes on your machine! Again, Kubernetes is running
    on the Linux VM, as shown in the next screenshot.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以在您的机器上开始使用Kubernetes了！再次强调，Kubernetes正在Linux虚拟机上运行，如下截图所示。
- en: 'Using `minikube ssh` allows you to access the Linux VM that runs Kubernetes:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`minikube ssh`允许您访问运行Kubernetes的Linux虚拟机：
- en: '![](assets/9f745739-14ce-487c-9a3b-16ff37edefe0.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9f745739-14ce-487c-9a3b-16ff37edefe0.png)'
- en: Therefore, any Linux-based Docker image is capable of running on your Windows
    machine.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，任何基于Linux的Docker镜像都可以在您的Windows机器上运行。
- en: 'Type `minikube ip` to verify which IP address the Linux VM uses and also `minikube
    dashboard`, to open your default web browser and navigate to the Kubernetes UI
    ,as shown in the following screenshot:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 键入`minikube ip`以验证Linux虚拟机使用的IP地址，还可以使用`minikube dashboard`，打开默认的Web浏览器并导航到Kubernetes
    UI，如下截图所示：
- en: '![](assets/4cac90a8-990e-4b86-b195-f660c51d0cb4.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4cac90a8-990e-4b86-b195-f660c51d0cb4.png)'
- en: 'If you don''t need to use Kubernetes anymore, type `minikube stop` or open
    VirtualBox to stop the Linux guest and release the resource, as shown in the following
    screenshot:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您不再需要使用Kubernetes，请键入`minikube stop`或打开VirtualBox停止Linux虚拟机并释放资源，如下截图所示：
- en: '![](assets/09fe9f63-c0cf-420f-ac7d-a09f00810126.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/09fe9f63-c0cf-420f-ac7d-a09f00810126.png)'
- en: See also
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: This recipe describes how to set up a Kubernetes cluster on your Windows OS
    using minikube. It is the easiest way to start using Kubernetes. It also describes
    kubectl, the Kubernetes command-line interface tool, which is the entry point
    form which to control your Kubernetes.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程描述了如何在Windows操作系统上使用minikube设置Kubernetes集群。这是开始使用Kubernetes的最简单方法。它还描述了kubectl，Kubernetes命令行接口工具，这是控制Kubernetes的入口点。
- en: Setting up the Kubernetes cluster on Linux via kubeadm
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过kubeadm在Linux上设置Kubernetes集群
- en: In this recipe, we are going to show how to create a Kubernetes cluster along
    with kubeadm ([https://github.com/kubernetes/kubeadm](https://github.com/kubernetes/kubeadm))
    on Linux servers. Kubeadm is a command-line tool that simplifies the procedure
    of creating and managing a Kubernetes cluster. Kubeadm leverages the fast deployment
    feature of Docker, running the system services of the Kubernetes master and the
    etcd server as containers. When triggered by the `kubeadm` command, the container
    services will contact kubelet on the Kubernetes node directly; kubeadm also checks
    whether every component is healthy. Through the kubeadm setup steps, you can avoid
    having a bunch of installation and configuration commands when you build everything
    from scratch.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将展示如何在Linux服务器上使用kubeadm（[https://github.com/kubernetes/kubeadm](https://github.com/kubernetes/kubeadm)）创建Kubernetes集群。Kubeadm是一个命令行工具，简化了创建和管理Kubernetes集群的过程。Kubeadm利用Docker的快速部署功能，作为容器运行Kubernetes主节点和etcd服务器的系统服务。当由`kubeadm`命令触发时，容器服务将直接联系Kubernetes节点上的kubelet；kubeadm还会检查每个组件是否健康。通过kubeadm设置步骤，您可以避免在从头开始构建时使用大量安装和配置命令。
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will provide instructions of two types of OS:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提供两种类型操作系统的说明：
- en: Ubuntu Xenial 16.04 (LTS)
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu Xenial 16.04（LTS）
- en: CentOS 7.4
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CentOS 7.4
- en: 'Make sure the OS version is matched before continuing. Furthermore, the software
    dependency and network settings should be also verified before you proceed to
    thecd cd next step. Check the following items to prepare the environment:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 确保操作系统版本匹配后才能继续。此外，在进行下一步之前，还应验证软件依赖和网络设置。检查以下项目以准备环境：
- en: '**Every node has a unique MAC address and product UUID**: Some plugins use
    the MAC address or product UUID as a unique machine ID to identify nodes (for
    example, `kube-dns`). If they are duplicated in the cluster, kubeadm may not work
    while starting the plugin:'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每个节点都有唯一的MAC地址和产品UUID**：一些插件使用MAC地址或产品UUID作为唯一的机器ID来识别节点（例如，`kube-dns`）。如果它们在集群中重复，kubeadm在启动插件时可能无法工作：'
- en: '[PRE11]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Every node has a different hostname**: If the hostname is duplicated, the
    Kubernetes system may collect logs or statuses from multiple nodes into the same
    one.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每个节点都有不同的主机名**：如果主机名重复，Kubernetes系统可能会将多个节点的日志或状态收集到同一个节点中。'
- en: '**Docker is installed**: As mentioned previously, the Kubernetes master will
    run its daemon as a container, and every node in the cluster should get Docker
    installed. For how to perform the Docker installation, you can follow the steps
    on the official website: (Ubuntu: [https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/](https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/),
    and CentOS: [https://docs.docker.com/engine/installation/linux/docker-ce/centos/](https://docs.docker.com/engine/installation/linux/docker-ce/centos/))
    Here we have Docker CE 17.06 installed on our machines; however, only Docker versions
    1.11.2 to 1.13.1, and 17.03.x are verified with Kubernetes version 1.10.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已安装Docker**：如前所述，Kubernetes主节点将作为容器运行其守护程序，并且集群中的每个节点都应安装Docker。有关如何执行Docker安装，您可以按照官方网站上的步骤进行：（Ubuntu：[https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/](https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/)，和CentOS：[https://docs.docker.com/engine/installation/linux/docker-ce/centos/](https://docs.docker.com/engine/installation/linux/docker-ce/centos/)）在我们的机器上安装了Docker
    CE 17.06；但是，仅验证了Docker版本1.11.2至1.13.1和17.03.x与Kubernetes版本1.10兼容。'
- en: '**Network ports are available**: The Kubernetes system services need network
    ports for communication. The ports in the following table should now be occupied
    according to the role of the node:'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络端口可用**：Kubernetes系统服务需要网络端口进行通信。根据节点的角色，以下表中的端口现在应该被占用：'
- en: '| **Node role** | **Ports** | **System service** |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| **节点角色** | **端口** | **系统服务** |'
- en: '| Master | `6443` | Kubernetes API server |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| 主节点 | `6443` | Kubernetes API 服务器 |'
- en: '| `10248/10250/10255` | kubelet local healthz endpoint/Kubelet API/Heapster
    (read-only) |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `10248/10250/10255` | kubelet本地healthz端点/Kubelet API/Heapster（只读） |'
- en: '| `10251` | kube-scheduler |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `10251` | kube-scheduler |'
- en: '| `10252` | kube-controller-manager |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `10252` | kube-controller-manager |'
- en: '| `10249/10256` | kube-proxy |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `10249/10256` | kube-proxy |'
- en: '| `2379/2380` | etcd client/etcd server communication |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `2379/2380` | etcd客户端/etcd服务器通信 |'
- en: '| Node | `10250/10255` | Kubelet API/Heapster (read-only) |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| 节点 | `10250/10255` | Kubelet API/Heapster（只读） |'
- en: '| `30000~32767` | Port range reserved for exposing container service to outside
    world |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `30000~32767` | 用于将容器服务暴露给外部世界的端口范围保留 |'
- en: 'The Linux command, `netstat`, can help to check if the port is in use or not:'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux命令`netstat`可以帮助检查端口是否正在使用：
- en: '[PRE12]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Network tool packages are installed. `ethtool` and `ebtables` are two required
    utilities for kubeadm. They can be download and installed by the`apt-get` or `yum`package
    managing tools.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络工具包已安装。 `ethtool` 和 `ebtables` 是 kubeadm 的两个必需实用程序。它们可以通过`apt-get`或`yum`软件包管理工具下载和安装。
- en: How to do it...
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: The installation procedures for two Linux OSes, Ubuntu and CentOS, are going
    to be introduced separately in this recipe as they have different setups.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 将分别介绍Ubuntu和CentOS两种Linux操作系统的安装程序，因为它们有不同的设置。
- en: Package installation
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件包安装
- en: Let's get the Kubernetes packages first! The repository for downloading needs
    to be set in the source list of the package management system. Then, we are able
    to get them installed easily through the command-line.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先获取Kubernetes软件包！需要在软件包管理系统的源列表中设置下载的存储库。然后，我们可以通过命令行轻松地将它们安装。
- en: Ubuntu
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu
- en: 'To install Kubernetes packages in Ubuntu perform the following steps:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Ubuntu中安装Kubernetes软件包，请执行以下步骤：
- en: 'Some repositories are URL with HTTPS. The `apt-transport-https` package must
    be installed to access the HTTPS endpoint:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一些存储库是使用HTTPS的URL。必须安装`apt-transport-https`软件包才能访问HTTPS端点：
- en: '[PRE13]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Download the public key for accessing packages on Google Cloud, and add it
    as follows:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载访问Google Cloud软件包的公钥，并添加如下：
- en: '[PRE14]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, add a new source list for the Kubernetes packages:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为Kubernetes软件包添加一个新的源列表：
- en: '[PRE15]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, it is good to install the Kubernetes packages:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，安装Kubernetes软件包是很好的：
- en: '[PRE16]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: CentOS
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CentOS
- en: 'To install Kubernetes packages in CentOS perform the following steps:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 要在CentOS中安装Kubernetes软件包，请执行以下步骤：
- en: 'As with Ubuntu, new repository information needs to be added:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与Ubuntu一样，需要添加新的存储库信息：
- en: '[PRE17]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, we are ready to pull the packages from the Kubernetes source base via
    the `yum` command:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们准备通过`yum`命令从Kubernetes源基地拉取软件包：
- en: '[PRE18]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: No matter what OS it is, check the version of the package you get!
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无论是什么操作系统，都要检查你得到的软件包的版本！
- en: '[PRE19]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: System configuration prerequisites
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统配置先决条件
- en: Before running up the whole system by kubeadm, please check that Docker is running
    on your machine for Kubernetes. Moreover, in order to avoid critical errors while
    executing kubeadm, we will show the necessary service configuration on both the
    system and kubelet. As well as the master, please set the following configurations
    on the Kubernetes nodes to get kubelet to work fine with kubeadm.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过kubeadm运行整个系统之前，请检查Docker是否在您的机器上运行Kubernetes。此外，为了避免在执行kubeadm时出现关键错误，我们将展示系统和kubelet上必要的服务配置。与主服务器一样，请在Kubernetes节点上设置以下配置，以使kubelet与kubeadm正常工作。
- en: CentOS system settings
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CentOS系统设置
- en: 'There are other additional settings in CentOS to make Kubernetes behave correctly.
    Be aware that, even if we are not using kubeadm to manage the Kubernetes cluster,
    the following setup should be considered while running kubelet:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在CentOS中还有其他额外的设置，以使Kubernetes行为正确。请注意，即使我们不使用kubeadm来管理Kubernetes集群，运行kubelet时应考虑以下设置：
- en: 'Disable SELinux, since kubelet does not support SELinux completely:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用SELinux，因为kubelet不完全支持SELinux：
- en: '[PRE20]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can `disable SELinux` through the following command, or by `modifying the
    configuration file`:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下命令`禁用SELinux`，或者`修改配置文件`：
- en: '[PRE21]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then we''ll need to `reboot` the machine:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要`重新启动`机器：
- en: '[PRE22]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Enable the usage of iptables. To prevent some routing errors happening, add
    runtime parameters:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用iptables的使用。为了防止发生一些路由错误，添加运行时参数：
- en: '[PRE23]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Booting up the service
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动服务
- en: 'Now we can start the service. First enable and then start kubelet on your Kubernetes
    master machine:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以启动服务。首先在Kubernetes主服务器上启用，然后启动kubelet：
- en: '[PRE24]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'While checking the status of kubelet, you may be worried to see the status
    displaying activating (`auto-restart`); and you may get further frustrated to
    see the detail logs by the `journalctl` command, as follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查kubelet的状态时，您可能会担心看到状态显示为激活（`自动重启`）；您可能会通过`journalctl`命令看到详细日志，如下所示：
- en: '`error: unable to load client CA file /etc/kubernetes/pki/ca.crt: open /etc/kubernetes/pki/ca.crt:
    no such file or directory`'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`错误：无法加载客户端CA文件/etc/kubernetes/pki/ca.crt：打开/etc/kubernetes/pki/ca.crt：没有那个文件或目录`'
- en: Don't worry. kubeadm takes care of creating the certificate authorities file.
    It is defined in the service configuration file, `/etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    by argument KUBELET_AUTHZ_ARGS`. The kubelet service won't be a healthy without
    this file, so keep trying to restart the daemon by itself.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 别担心。kubeadm会负责创建证书授权文件。它在服务配置文件`/etc/systemd/system/kubelet.service.d/10-kubeadm.conf`中定义，通过参数`KUBELET_AUTHZ_ARGS`。没有这个文件，kubelet服务就不会正常工作，所以要不断尝试重新启动守护进程。
- en: 'Go ahead and start all the master daemons via kubeadm. It is worth noting that
    using kubeadm requires the root permission to achieve a service level privilege.
    For any sudoer, each kubeadm would go after the `sudo` command:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 通过kubeadm启动所有主节点守护程序。 值得注意的是，使用kubeadm需要root权限才能实现服务级别的特权。 对于任何sudoer，每个kubeadm都会在`sudo`命令之后执行：
- en: '[PRE25]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Find preflight checking error while firing command `kubeadm init`? Using following
    one to disable running swap as description.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行`kubeadm init`命令时发现预检错误？ 使用以下命令禁用运行交换。
- en: '`$ sudo kubeadm init --ignore-preflight-errors=Swap`'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ sudo kubeadm init --ignore-preflight-errors=Swap`'
- en: 'And you will see the sentence `Your Kubernetes master has initialized successfully!`
    showing on the screen. Congratulations! You are almost done! Just follow the information
    about the user environment setup below the greeting message:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您将在屏幕上看到`Your Kubernetes master has initialized successfully!`的句子。 恭喜！ 您已经快完成了！
    只需按照问候消息下面关于用户环境设置的信息进行操作：
- en: '[PRE26]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The preceding commands ensure every Kubernetes instruction is fired by your
    account execute with the proper credentials and connects to the correct server
    portal:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令确保每个Kubernetes指令都是由您的帐户以正确的凭据执行并连接到正确的服务器门户：
- en: '[PRE27]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'More than that, kubelet goes into a healthy state now:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，kubelet现在处于健康状态：
- en: '[PRE28]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Network configurations for containers
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器的网络配置
- en: After the master of the cluster is ready to handle jobs and the services are
    running, for the purpose of making containers accessible to each other through
    networking, we need to set up the network for container communication. It is even
    more important initially while building up a Kubernetes cluster with kubeadm,
    since the master daemons are all running as containers. kubeadm supports the CNI
    ([https://github.com/containernetworking/cni](https://github.com/containernetworking/cni)).
    We are going to attach the CNI via a Kubernetes network add-on.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 集群的主节点准备好处理作业并且服务正在运行后，为了使容器通过网络相互访问，我们需要为容器通信设置网络。 在使用kubeadm构建Kubernetes集群时尤为重要，因为主节点守护程序都在作为容器运行。
    kubeadm支持CNI ([https://github.com/containernetworking/cni](https://github.com/containernetworking/cni))。
    我们将通过Kubernetes网络插件附加CNI。
- en: 'There are many third-party CNI solutions that supply secured and reliable container
    network environments. Calico ([https://www.projectcalico.org](https://www.projectcalico.org)),
    one CNI provide stable container networking. Calico is light and simple, but still
    well implemented by the CNI standard and integrated with Kubernetes:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多第三方CNI解决方案，提供安全可靠的容器网络环境。 Calico ([https://www.projectcalico.org](https://www.projectcalico.org))是一个提供稳定容器网络的CNI。
    Calico轻巧简单，但仍然符合CNI标准，并与Kubernetes集成良好：
- en: '[PRE29]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here, whatever your host OS is, the command kubectl can fire any sub command
    for utilizing resources and managing systems. We use `kubectl` to apply the configuration
    of Calico to our new-born Kubernetes.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，无论您的主机操作系统是什么，命令kubectl都可以执行任何子命令来利用资源和管理系统。 我们使用`kubectl`将Calico的配置应用到我们新生的Kubernetes。
- en: More advanced management of networking and Kubernetes add-ons will be discussed
    in [Chapter 7](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml), *Building Kubernetes
    on GCP*.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 更高级的网络管理和Kubernetes插件将在[第7章](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml)中讨论，*在GCP上构建Kubernetes*。
- en: Getting a node involved
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让一个节点参与
- en: 'Let''s log in to your Kubernetes node to join the group controlled by kubeadm:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们登录到您的Kubernetes节点，加入由kubeadm控制的组：
- en: 'First, enable and start the service, `kubelet`. Every Kubernetes machine should
    have `kubelet` running on it:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，启用并启动服务`kubelet`。 每台Kubernetes机器都应该在其上运行`kubelet`：
- en: '[PRE30]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'After that, fire the `kubeadm` join command with an input flag token and the
    IP address of the master, notifying the master that it is a secured and authorized
    node. You can get the token on the master node via the `kubeadm` command:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，使用带有输入标记令牌和主节点的IP地址的`kubeadm`加入命令，通知主节点它是一个受保护和授权的节点。您可以通过`kubeadm`命令在主节点上获取令牌：
- en: '[PRE31]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In the preceding output, if `kubeadm init` succeeds, the default token will
    be generated. Copy the token and paste it onto the node, and then compose the
    following command:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的输出中，如果`kubeadm init`成功，将生成默认令牌。复制令牌并将其粘贴到节点上，然后组成以下命令：
- en: '[PRE32]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'What if you call `kubeadm token list` to list the tokens, and see they are
    all expired? You can create a new one manually by this command: `kubeadm token
    create` .'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您调用`kubeadm token list`列出令牌，并且看到它们都已过期怎么办？您可以通过此命令手动创建一个新的：`kubeadm token
    create`。
- en: 'Please make sure that the master''s firewall doesn''t block any traffic to
    port `6443`, which is for API server communication. Once you see the words `Successfully
    established connection` showing on the screen, it is time to check with the master
    if the group got the new member:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请确保主节点的防火墙不会阻止端口`6443`的任何流量，这是用于API服务器通信的端口。一旦在屏幕上看到“成功建立连接”这几个字，就是时候与主节点确认组是否有了新成员了：
- en: '[PRE33]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Well done! No matter if whether your OS is Ubuntu or CentOS, kubeadm is installed
    and kubelet is running. You can easily go through the preceding steps to build
    your Kubernetes cluster.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！无论您的操作系统是Ubuntu还是CentOS，kubeadm都已安装并且kubelet正在运行。您可以轻松地按照前面的步骤来构建您的Kubernetes集群。
- en: 'You may be wondering about the flag `discovery-token-unsafe-skip-ca-verification`
    used while joining the cluster. Remember the kubelet log that says the certificate
    file is not found? That''s it, since our Kubernetes node is brand new and clean,
    and has never connected with the master before. There is no certificate file to
    find for verification. But now, because the node has shaken hands with the master,
    the file exists. We may join in this way (in some situation requiring rejoining
    the same cluster):'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会对加入集群时使用的标记`discovery-token-unsafe-skip-ca-verification`感到困惑。还记得kubelet日志中说找不到证书文件吗？就是这样，因为我们的Kubernetes节点是全新的和干净的，并且以前从未连接过主节点。没有证书文件可供验证。但现在，因为节点已经与主节点握手，该文件存在。我们可以以这种方式加入（在某些情况下需要重新加入相同的集群）：
- en: '`kubeadm join --token $TOKEN $MASTER_IPADDR:6443 --discovery-token-ca-cert-hash
    sha256:$HASH`'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`kubeadm join --token $TOKEN $MASTER_IPADDR:6443 --discovery-token-ca-cert-hash
    sha256:$HASH`'
- en: 'The hash value can be obtained by the `openssl` command:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希值可以通过`openssl`命令获得：
- en: '[PRE34]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works...
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When kubeadm init sets up the master, there are six stages:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 当kubeadm init设置主节点时，有六个阶段：
- en: '**Generating certificate files and keys for services**: Certificated files
    and keys are used for security management during cross-node communications. They
    are located in the `/etc/kubernetes/pki` directory. Take kubelet, for example.
    It cannot access the Kubernetes API server without passing the identity verification.'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生成服务的证书文件和密钥**：证书文件和密钥用于跨节点通信期间的安全管理。它们位于`/etc/kubernetes/pki`目录中。以kubelet为例。它在未经身份验证的情况下无法访问Kubernetes
    API服务器。'
- en: '**Writing kubeconfig files**: The `kubeconfig` files define permissions, authentication,
    and configurations for kubectl actions. In this case, the Kubernetes controller
    manager and scheduler have related `kubeconfig` files to fulfill any API requests.'
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编写kubeconfig文件**：`kubeconfig`文件定义了kubectl操作的权限、身份验证和配置。在这种情况下，Kubernetes控制器管理器和调度器有相关的`kubeconfig`文件来满足任何API请求。'
- en: '**Creating service daemon YAML files**: The service daemons under kubeadm''s
    control are just like computing components running on the master. As with setting
    deployment configurations on disk, kubelet will make sure each daemon is active.'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建服务守护进程YAML文件：kubeadm控制下的服务守护进程就像在主节点上运行的计算组件一样。与在磁盘上设置部署配置一样，kubelet将确保每个守护进程处于活动状态。
- en: '**Waiting for kubelet to be alive, running the daemons as pods**: When kubelet
    is alive, it will boot up the service pods described in the files under the `/etc/kubernetes/manifests`
    directory. Moreover, kubelet guarantees to keep them activated, restarting the
    pod automatically if it crashes.'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待kubelet处于活动状态，将守护进程作为pod运行：当kubelet处于活动状态时，它将启动`/etc/kubernetes/manifests`目录下描述的服务pod。此外，kubelet保证保持它们激活，如果pod崩溃，将自动重新启动。
- en: '**Setting post-configuration for the cluster**: Some cluster configurations
    still need to be set, such as configuring **role-based accessing control** (**RBAC**)
    rules, creating a namespace, and tagging the resources.'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为集群设置后配置：仍然需要设置一些集群配置，例如配置基于角色的访问控制（RBAC）规则，创建命名空间和标记资源。
- en: '**Applying add-ons**: DNS and proxy services can be added along with the kubeadm
    system.'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用附加组件：DNS和代理服务可以与kubeadm系统一起添加。
- en: While the user enters kubeadm and joins the Kubernetes node, kubeadm will complete
    the first two stages like the master.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入kubeadm并加入Kubernetes节点时，kubeadm将完成像主节点一样的前两个阶段。
- en: If you have faced a heavy and complicated set up procedure in earlier versions
    of Kubernetes, it is quite a relief to set up a Kubernetes cluster with kubeadm.
    kubeadm reduces the overhead of configuring each daemon and starting them one
    by one. Users can still do customization on kubelet and master services, by just
    modifying a familiar file, `10-kubeadm.conf` and the YAML files under `/etc/kubernetes/manifests`.
    Kubeadm not only helps to establish the cluster but also enhances security and
    availability, saving you time.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在早期版本的Kubernetes中面临繁重和复杂的设置过程，使用kubeadm设置Kubernetes集群会让人感到宽慰。kubeadm减少了配置每个守护进程并逐个启动它们的开销。用户仍然可以在kubelet和主服务上进行自定义，只需修改熟悉的文件`10-kubeadm.conf`和`/etc/kubernetes/manifests`下的YAML文件。Kubeadm不仅有助于建立集群，还增强了安全性和可用性，为您节省时间。
- en: See also
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'We talked about how to build a Kubernetes cluster. If you''re ready to run
    your first application on it, check the last recipe in this chapter and run the
    container! And for advanced management of your cluster, you can also look at [Chapter
    8](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml), *Advanced Cluster Administration*,
    of this book:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了如何构建Kubernetes集群。如果您准备在其上运行第一个应用程序，请查看本章的最后一个配方并运行容器！对于对集群的高级管理，您还可以查看本书的[第8章](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml)，“高级集群管理”：
- en: '*Advanced settings in kubeconfig*, in [Chapter 8](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml),
    *Advanced Cluster Administration*'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kubeconfig中的高级设置，在[第8章](d82d7591-b68a-42e7-ae48-5ee5a468975e.xhtml)，“高级集群管理”
- en: Setting up the Kubernetes cluster on Linux via Ansible (kubespray)
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Ansible在Linux上设置Kubernetes集群（kubespray）
- en: If you are familiar with configuration management, such as Puppet, Chef and
    Ansible, kubespray ([https://github.com/kubernetes-incubator/kubespray](https://github.com/kubernetes-incubator/kubespray))
    is the best choice to set up a Kubernetes cluster from scratch. It provides the
    Ansible playbook that supports the majority of Linux distributions and public
    clouds, such as AWS and GCP.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉配置管理，例如Puppet、Chef和Ansible，kubespray（[https://github.com/kubernetes-incubator/kubespray](https://github.com/kubernetes-incubator/kubespray)）是从头开始设置Kubernetes集群的最佳选择。它提供了支持大多数Linux发行版和AWS、GCP等公共云的Ansible剧本。
- en: Ansible ([https://www.ansible.com](https://www.ansible.com)) is a Python-based
    SSH automation tool that can configure Linux as your desired state based on the
    configuration, which is called playbook. This cookbook describes how to use kubespray
    to set up Kubernetes on Linux.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible（[https://www.ansible.com](https://www.ansible.com)）是一种基于Python的SSH自动化工具，可以根据配置将Linux配置为所需状态，称为playbook。本教程描述了如何使用kubespray在Linux上设置Kubernetes。
- en: Getting ready
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'As of May 2018, the latest version of kubespray is 2.5.0, which supports the
    following operation systems to install Kubernetes:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2018年5月，kubespray的最新版本是2.5.0，支持以下操作系统安装Kubernetes：
- en: RHEL/CentOS 7
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RHEL/CentOS 7
- en: Ubuntu 16.04 LTS
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu 16.04 LTS
- en: According to the kubespray documentation, it also supports CoreOS and debian
    distributions. However, those distributions may need some additional steps or
    have technical difficulties. This cookbook uses CentOS 7 and Ubuntu 16.04 LTS.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 根据kubespray文档，它还支持CoreOS和debian发行版。然而，这些发行版可能需要一些额外的步骤或存在技术困难。本教程使用CentOS 7和Ubuntu
    16.04 LTS。
- en: 'In addition, you need to install Ansible on your machine. Ansible works on
    Python 2.6, 2.7, and 3.5 or higher. macOS and Linux might be the best choice to
    install Ansible because Python is preinstalled by most of macOS and Linux distributions
    by default. In order to check which version of Python you have, open a Terminal
    and type the following command:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您需要在您的机器上安装Ansible。Ansible适用于Python 2.6、2.7和3.5或更高版本。macOS和Linux可能是安装Ansible的最佳选择，因为大多数macOS和Linux发行版默认情况下都预装了Python。为了检查您的Python版本，打开终端并输入以下命令：
- en: '[PRE35]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Overall, you need at least three machines, as mentioned in the following table:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，您至少需要三台机器，如下表所示：
- en: '| **Type of host** | **Recommended OS/Distribution** |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| **主机类型** | **推荐的操作系统/发行版** |'
- en: '| Ansible | macOS or any Linux which has Python 2.6, 2.7, or 3.5 |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| Ansible | macOS或任何安装了Python 2.6、2.7或3.5的Linux |'
- en: '| Kubernetes master | RHEL/CentOS 7 or Ubuntu 16.04 LTS |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| Kubernetes主节点 | RHEL/CentOS 7或Ubuntu 16.04 LTS |'
- en: '| Kubernetes node | RHEL/CentOS 7 or Ubuntu 16.04 LTS |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| Kubernetes节点 | RHEL/CentOS 7或Ubuntu 16.04 LTS |'
- en: 'There are some network communicating with each other, so you need to at least
    open a network port (for example, AWS Security Group or GCP Firewall rule) as:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 它们之间有一些网络通信，因此您至少需要打开一个网络端口（例如，AWS安全组或GCP防火墙规则）：
- en: '**TCP/22 (ssh)**: Ansible to Kubernetes master/node host'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TCP/22（ssh）**：Ansible到Kubernetes主节点/节点主机'
- en: '**TCP/6443 (Kubernetes API server)**: Kubernetes node to master'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TCP/6443（Kubernetes API服务器）**：Kubernetes节点到主节点'
- en: '**Protocol 4 (IP encapsulated in IP)**: Kubernetes master and node to each
    other by Calico'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协议4（IP封装在IP中）**：Kubernetes主节点和节点之间通过Calico'
- en: In Protocol 4 (IP encapsulated in IP), if you are using AWS, set an ingress
    rule to specify `aws ec2 authorize-security-group-ingress --group-id <your SG
    ID> --cidr <network CIDR> --protocol 4`. In addition, if you are using GCP, set
    the firewall rule to specify as `cloud compute firewall-rules create allow-calico
    --allow 4 --network <your network name> --source-ranges <network CIDR>`.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在协议4（IP封装在IP中）中，如果您使用AWS，设置一个入口规则以指定`aws ec2 authorize-security-group-ingress
    --group-id <your SG ID> --cidr <network CIDR> --protocol 4`。此外，如果您使用GCP，设置防火墙规则以指定`cloud
    compute firewall-rules create allow-calico --allow 4 --network <your network name>
    --source-ranges <network CIDR>`。
- en: Installing pip
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装pip
- en: 'The easiest way to install Ansible, is to use pip, the Python package manager.
    Some of newer versions of Python have `pip` already (Python 2.7.9 or later and
    Python 3.4 or later):'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Ansible的最简单方法是使用pip，即Python包管理器。一些较新版本的Python已经有了`pip`（Python 2.7.9或更高版本和Python
    3.4或更高版本）：
- en: 'To confirm whether `pip` is installed or not, similar to the Python command,
    use `-V`:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认`pip`是否已安装，类似于Python命令，使用`-V`：
- en: '[PRE36]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'On the other hand, if you see the following result, you need to install `pip`:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一方面，如果您看到以下结果，您需要安装`pip`：
- en: '[PRE37]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In order to install pip, download `get-pip.py` and install by using the following
    command:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了安装pip，下载`get-pip.py`并使用以下命令安装：
- en: '[PRE38]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Installing Ansible
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Ansible
- en: 'Perform the following steps to install Ansible:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤安装Ansible：
- en: 'Once you have installed `pip`, you can install Ansible with the following command:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您安装了`pip`，您可以使用以下命令安装Ansible：
- en: '[PRE39]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`pip` scans your Python and installs the necessary libraries for Ansible, so
    it may take a few minutes to complete.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip`扫描您的Python并安装Ansible所需的库，因此可能需要几分钟才能完成。'
- en: 'Once you have successfully installed Ansible by `pip`, you can verify it with
    the following command and see output as this:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功安装了Ansible后，您可以使用以下命令验证，并查看输出如下：
- en: '[PRE40]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Installing python-netaddr
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装python-netaddr
- en: 'Next, according to kubespray''s documentation ([https://github.com/kubernetes-incubator/kubespray#requirements](https://github.com/kubernetes-incubator/kubespray#requirements)),
    it needs the `python-netaddr` package. This package can also be installed by pip,
    as shown in the following code:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，根据kubespray的文档（[https://github.com/kubernetes-incubator/kubespray#requirements](https://github.com/kubernetes-incubator/kubespray#requirements)），它需要`python-netaddr`包。该包也可以通过pip安装，如下面的代码所示：
- en: '[PRE41]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Setting up ssh public key authentication
  id: totrans-339
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置ssh公钥身份验证
- en: One more thing, as mentioned previously, Ansible is actually the ssh automation
    tool. If you log on to host via ssh, you have to have an appropriate credential
    (user/password or ssh public key) to the target machines. In this case, the target
    machines mean the Kubernetes master and nodes.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事，如前所述，Ansible实际上是ssh自动化工具。如果您通过ssh登录到主机，您必须具有适当的凭据（用户/密码或ssh公钥）到目标机器。在这种情况下，目标机器指的是Kubernetes主节点和节点。
- en: Due to security reasons, especially in the public cloud, Kubernetes uses only
    the ssh public key authentication instead of ID/password authentication.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 由于安全原因，特别是在公共云中，Kubernetes仅使用ssh公钥身份验证而不是ID/密码身份验证。
- en: 'To follow the best practice, let''s copy the ssh public key from your Ansible
    machine to the Kubernetes master/node machines:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 为了遵循最佳实践，让我们将ssh公钥从您的Ansible机器复制到Kubernetes主/节点机器：
- en: If you've already set up ssh public key authentication between the Ansible machine
    to Kubernetes candidate machines, you can skip this step.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在Ansible机器和Kubernetes候选机器之间设置了ssh公钥身份验证，则可以跳过此步骤。
- en: 'In order to create an ssh public/private key pair from your Ansible machine,
    type the following command:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了从您的Ansible机器创建一个ssh公钥/私钥对，输入以下命令：
- en: '[PRE42]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: It will ask you to set a passphrase. You may set or skip (empty) this, but you
    have to remember it.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会要求您设置一个密码。您可以设置或跳过（空），但您必须记住它。
- en: 'Once you have successfully created a key pair, you can see the private key
    as `~/.ssh/id_rsa` and public key as `~/.ssh/id_rsa.pub`. You need to append the
    public key to the target machine under `~/.ssh/authorized_keys`, as shown in the
    following screenshot:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您成功创建了密钥对，您可以看到私钥为`~/.ssh/id_rsa`，公钥为`~/.ssh/id_rsa.pub`。您需要将公钥附加到目标机器的`~/.ssh/authorized_keys`下，如下面的屏幕截图所示：
- en: '![](assets/669c5f59-6af8-4865-a8f6-5d4b7dea7d7b.png)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/669c5f59-6af8-4865-a8f6-5d4b7dea7d7b.png)'
- en: You need to copy and paste your public key to all Kubernetes master and node
    candidate machines.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要将您的公钥复制粘贴到所有Kubernetes主节点和节点候选机器上。
- en: 'To make sure your ssh public key authentication works, just ssh from the Ansible
    machine to the target host that won''t ask for your logon password, as here:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的ssh公钥身份验证有效后，只需从Ansible机器ssh到目标主机，它不会要求您的登录密码，如下所示：
- en: '[PRE43]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Now you are all set! Let's set up Kubernetes using kubespray (Ansible) from
    scratch.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备就绪！让我们从头开始使用kubespray（Ansible）设置Kubernetes。
- en: How to do it...
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'kubespray is provided through the GitHub repository ([https://github.com/kubernetes-incubator/kubespray/tags](https://github.com/kubernetes-incubator/kubespray/tags)),
    as shown in the following screenshot:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: kubespray 通过 GitHub 仓库提供（[https://github.com/kubernetes-incubator/kubespray/tags](https://github.com/kubernetes-incubator/kubespray/tags)），如下截图所示：
- en: '![](assets/59438d0b-62fd-4241-896c-f27f0e78185c.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/59438d0b-62fd-4241-896c-f27f0e78185c.png)'
- en: 'Because kubespray is an Ansible playbook, not a binary, you can download the
    latest version (as of May 2018, version 2.5.0 is the latest) of the `zip` or `tar.gz`
    to your Ansible machine directly and unarchive it with the following command:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 kubespray 是一个 Ansible playbook，而不是一个二进制文件，您可以直接在 Ansible 机器上下载最新版本（截至 2018
    年 5 月，版本 2.5.0 是最新版本）的 `zip` 或 `tar.gz` 并使用以下命令解压缩：
- en: '[PRE44]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Maintaining the Ansible inventory
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维护 Ansible 库存
- en: 'In order to perform the Ansible playbook, you need to maintain your own inventory
    file, which contains target machine IP addresses:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 为执行 Ansible playbook，您需要维护自己的包含目标机器 IP 地址的库存文件：
- en: 'There is a sample inventory file under the inventory directory, so you can
    copy it by using the following:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 inventory 目录下有一个示例库存文件，所以您可以使用以下命令进行复制：
- en: '[PRE45]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In this cookbook, we are using target machines that have the following IP addresses:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本教程中，我们使用具有以下 IP 地址的目标机器：
- en: 'Kubernetes master : `10.128.0.2`'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 主节点：`10.128.0.2`
- en: 'Kubernetes node : `10.128.0.4`'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 节点：`10.128.0.4`
- en: 'In this case, `hosts.ini` should be in the following format:'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，`hosts.ini` 应该采用以下格式：
- en: '![](assets/ea729763-477f-49f1-b64e-4ef047102ad7.png)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ea729763-477f-49f1-b64e-4ef047102ad7.png)'
- en: Please change the IP address to match your environment.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请更改 IP 地址以匹配您的环境。
- en: Note that hostname (`my-master-1` and `my-node-1`) will be set by the kubespray
    playbook based on this `hosts.ini`, so feel free to assign a meaningful hostname.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，主机名（`my-master-1` 和 `my-node-1`）将根据此 `hosts.ini` 设置为 kubespray playbook，因此可以自由分配有意义的主机名。
- en: Running the Ansible ad hoc command to test your environment
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 Ansible ad hoc 命令以测试您的环境
- en: 'Before running the kubespray playbook, let''s check whether `hosts.ini` and
    Ansible itself work properly or not:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 kubespray playbook 之前，让我们检查 `hosts.ini` 和 Ansible 本身是否正常工作：
- en: 'To do that, use the Ansible ad hoc command, using the ping module, as shown
    in the following screenshot:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，请使用 Ansible ad hoc 命令，使用 ping 模块，如下截图所示：
- en: '![](assets/f64fdf05-c6ff-4b77-9fc9-23af593c08aa.png)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f64fdf05-c6ff-4b77-9fc9-23af593c08aa.png)'
- en: 'This result indicates `SUCCESS`. But if you see the following error, probably
    the IP address is wrong or the target machine is down, so please the check target
    machine first:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此结果表示“成功”。但如果您看到以下错误，可能是 IP 地址错误或目标机器已关闭，请先检查目标机器：
- en: '![](assets/13ae1baa-a1ae-4655-8ea9-426410983ed7.png)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/13ae1baa-a1ae-4655-8ea9-426410983ed7.png)'
- en: 'Next, check your authority whether you can escalate a privilege on the target
    machine or not. In other words, whether you can run `sudo` or not. This is because
    you will need to install Kubernetes, Docker, and some related binaries, and configurations
    that need a root privilege. To confirm that, add the `-b` (become) option, as
    shown in the following screenshot:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，检查您的权限是否可以在目标机器上提升权限。换句话说，您是否可以运行 `sudo`。这是因为您需要安装 Kubernetes、Docker 和一些需要
    root 权限的相关二进制文件和配置。要确认这一点，请添加 `-b`（become）选项，如下截图所示：
- en: '![](assets/0c2f06a0-2e53-40e7-be10-cb2c28eb05ae.png)'
  id: totrans-376
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0c2f06a0-2e53-40e7-be10-cb2c28eb05ae.png)'
- en: With the `-b` option, it actually tries to perform sudo on the target machine.
    If you see `SUCCESS`, you are all set! Go to the *How it works…* section to run
    kubespray.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `-b` 选项，它实际上尝试在目标机器上执行 sudo。如果您看到“成功”，那就准备好了！转到 *它是如何工作的…* 部分来运行 kubespray。
- en: If you're unfortunate enough to see some errors, please refer to the following
    section to solve Ansible issues.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不幸看到一些错误，请参考以下部分解决Ansible问题。
- en: Ansible troubleshooting
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible故障排除
- en: The ideal situation would be to use the same Linux distribution, version, settings,
    and logon user. However, the environment will be different based on policy, compatibility,
    and other reasons. Ansible is flexible and can support many use cases to run `ssh`
    and `sudo`.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况是使用相同的Linux发行版、版本、设置和登录用户。然而，根据政策、兼容性和其他原因，环境会有所不同。Ansible灵活并且可以支持许多用例来运行`ssh`和`sudo`。
- en: Need to specify a sudo password
  id: totrans-381
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要指定sudo密码
- en: 'Based on your Linux machine setting, you may see the following error when adding
    the `-b` option. In this case, you need to type your password while running the
    `sudo` command:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的Linux机器设置，当添加`-b`选项时，您可能会看到以下错误。在这种情况下，您需要在运行`sudo`命令时输入密码：
- en: '![](assets/8cb344cb-f98a-4b6d-9526-bac1590dadbe.png)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8cb344cb-f98a-4b6d-9526-bac1590dadbe.png)'
- en: 'In this case, add `-K` (ask for the `sudo` password) and run again. It will
    ask for your sudo password when running the Ansible command, as shown in the following
    screenshot:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，添加`-K`（请求`sudo`密码）并重新运行。在运行Ansible命令时，它将要求您的sudo密码，如下截图所示：
- en: '![](assets/f2efbf16-c053-420d-9fe7-8ee7933675fd.png)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f2efbf16-c053-420d-9fe7-8ee7933675fd.png)'
- en: 'If your Linux uses the `su` command instead of `sudo`, adding `--become-method=su`
    to run the Ansible command could help. Please read the Ansible documentation for
    more details : [http://docs.ansible.com/ansible/latest/become.html](http://docs.ansible.com/ansible/latest/become.html)'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的Linux使用`su`命令而不是`sudo`，在运行Ansible命令时添加`--become-method=su`可能会有所帮助。请阅读Ansible文档以获取更多详细信息：[http://docs.ansible.com/ansible/latest/become.html](http://docs.ansible.com/ansible/latest/become.html)
- en: Need to specify different ssh logon user
  id: totrans-387
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要指定不同的ssh登录用户
- en: 'Sometimes you may need to ssh to target machines using a different logon user.
    In this case, you can append the `ansible_user` parameter to an individual host
    in `hosts.ini`. For example:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能需要使用不同的登录用户ssh到目标机器。在这种情况下，您可以在`hosts.ini`中的单个主机后附加`ansible_user`参数。例如：
- en: Use the username `kirito` to `ssh` to `my-master-1`
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用用户名`kirito`来通过`ssh`连接到`my-master-1`
- en: Use the username `asuna` to `ssh` to `my-node-1`
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用用户名`asuna`来通过`ssh`连接到`my-node-1`
- en: 'In this case, change `hosts.ini`, as shown in the following code:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，更改`hosts.ini`，如下所示的代码：
- en: '[PRE46]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Need to change ssh port
  id: totrans-393
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要更改ssh端口
- en: 'Another scenario is where you may need to run the ssh daemon on some specific
    port number rather than the default port number `22`. Ansible also supports this
    scenario and uses the `ansible_port` parameter to the individual host in `hosts.ini`,
    as shown in the following code (in the example, the `ssh` daemon is running at
    `10022` on `my-node-1`):'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种情况是您可能需要在某些特定端口号上运行ssh守护程序，而不是默认端口号`22`。Ansible也支持这种情况，并在`hosts.ini`中的单个主机上使用`ansible_port`参数，如下所示的代码（在示例中，`ssh`守护程序在`my-node-1`上以`10022`运行）：
- en: '[PRE47]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Common ansible issue
  id: totrans-396
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的ansible问题
- en: 'Ansible is flexible enough to support any other situations. If you need any
    specific parameters to customize the ssh logon for the target host, read the Ansible
    inventory documentation to find a specific parameter: [http://docs.ansible.com/ansible/latest/intro_inventory.html](http://docs.ansible.com/ansible/latest/intro_inventory.html)'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible足够灵活，可以支持任何其他情况。如果您需要任何特定参数来自定义目标主机的ssh登录，请阅读Ansible清单文档以找到特定参数：[http://docs.ansible.com/ansible/latest/intro_inventory.html](http://docs.ansible.com/ansible/latest/intro_inventory.html)
- en: 'In addition, Ansible has a configuration file, `ansible.cfg`, on top of the
    `kubespray` directory. It defines common settings for Ansible. For example, if
    you are using a very long username that usually causes an Ansible error, change
    `ansible.cfg` to set `control_path` to solve the issue, as shown in the following
    code:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Ansible还有一个配置文件`ansible.cfg`，位于`kubespray`目录的顶部。它为Ansible定义了常见设置。例如，如果您使用的是通常会导致Ansible错误的非常长的用户名，请更改`ansible.cfg`以将`control_path`设置为解决该问题，如下面的代码所示：
- en: '[PRE48]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If you plan to set up more than `10` nodes, you may need to increase ssh simultaneous
    sessions. In this case, adding the `forks` parameter also requires you to increase
    the ssh timeout from `10` seconds to `30` seconds by adding the timeout parameter,
    as shown in the following code:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划设置超过`10`个节点，则可能需要增加ssh同时会话。在这种情况下，添加`forks`参数还需要通过添加超时参数将ssh超时从`10`秒增加到`30`秒，如下面的代码所示：
- en: '[PRE49]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The following screenshot contains all of the preceding configurations in `ansible.cfg`:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图包含`ansible.cfg`中的所有先前配置：
- en: '![](assets/f7643fd9-85af-40ff-804c-f62fadabb2f3.png)'
  id: totrans-403
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f7643fd9-85af-40ff-804c-f62fadabb2f3.png)'
- en: For more details, please visit the Ansible configuration documentation at [http://docs.ansible.com/ansible/latest/intro_configuration.html](http://docs.ansible.com/ansible/latest/intro_configuration.html)
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多详细信息，请访问[http://docs.ansible.com/ansible/latest/intro_configuration.html](http://docs.ansible.com/ansible/latest/intro_configuration.html)中的Ansible配置文档。
- en: How it works...
  id: totrans-405
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Now you can start to run the kubepray playbook:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以开始运行kubepray playbook：
- en: You've already created an inventory file as `inventory/mycluster/hosts.ini`.
    Other than `hosts.ini`, you need to check and update global variable configuration
    files at `inventory/mycluster/group_vars/all.yml`.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您已经创建了一个名为`inventory/mycluster/hosts.ini`的清单文件。除了`hosts.ini`，您还需要检查和更新`inventory/mycluster/group_vars/all.yml`中的全局变量配置文件。
- en: 'There are a lot of variables defined, but at least one variable, `bootstrap_os`
    , needs to be changed from `none` to your target Linux machine. If you are using
    RHEL/CentOS7, set `bootstrap_os` as `centos`. If you are using Ubuntu 16.04 LTS,
    set `bootstrap_os` as `ubuntu` as shown in the following screenshot:'
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有很多变量被定义，但至少需要将一个变量`bootstrap_os`从`none`更改为目标Linux机器。如果您使用的是RHEL/CentOS7，请将`bootstrap_os`设置为`centos`。如果您使用的是Ubuntu
    16.04 LTS，请将`bootstrap_os`设置为`ubuntu`，如下面的屏幕截图所示：
- en: '![](assets/6d901bec-7cf7-4f38-965b-8699f376d321.png)'
  id: totrans-409
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6d901bec-7cf7-4f38-965b-8699f376d321.png)'
- en: You can also update other variables, such as `kube_version`, to change or install
    a Kubernetes version. For more details, read the documentation at [https://github.com/kubernetes-incubator/kubespray/blob/master/docs/vars.md](https://github.com/kubernetes-incubator/kubespray/blob/master/docs/vars.md).
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以更新其他变量，例如`kube_version`，以更改或安装Kubernetes版本。有关更多详细信息，请阅读[https://github.com/kubernetes-incubator/kubespray/blob/master/docs/vars.md](https://github.com/kubernetes-incubator/kubespray/blob/master/docs/vars.md)中的文档。
- en: Finally, you can execute the playbook. Use the `ansible-playbook` command instead
    of the Ansible command. Ansible-playbook runs multiple Ansible modules based on
    tasks and roles that are defined in the playbook.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，您可以执行playbook。使用`ansible-playbook`命令而不是Ansible命令。ansible-playbook根据playbook中定义的任务和角色运行多个Ansible模块。
- en: 'To run the kubespray playbook, type the ansible-playbook command with the following
    parameters:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行kubespray playbook，使用以下参数键入ansible-playbook命令：
- en: '[PRE50]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The ansible-playbook argument parameter is the same as the Ansible command.
    So, if you need to use `-K` (ask for the `sudo` password) or `--become-method=su`,
    you need to specify for ansible-playbook as well.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: ansible-playbook参数与Ansible命令相同。因此，如果您需要使用`-K`（要求`sudo`密码）或`--become-method=su`，您也需要为ansible-playbook指定。
- en: 'It takes around 5 to 10 minutes to complete based on the machine spec and network
    bandwidth. But eventually you can see `PLAY RECAP`, as shown in the following
    screenshot, to see whether it has succeeded or not:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据机器规格和网络带宽，大约需要5到10分钟才能完成。但最终您可以看到`PLAY RECAP`，如下面的截图所示，以查看是否成功：
- en: '![](assets/1402d1ac-b161-4138-a5ad-5be4b9470580.png)'
  id: totrans-416
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1402d1ac-b161-4138-a5ad-5be4b9470580.png)'
- en: 'If you see `failed=0` like in the preceding screenshot, you have been successful
    in setting up a Kubernetes cluster. You can ssh to the Kubernetes master machine
    and run the `/usr/local/bin/kubectl` command to see the status, as shown in the
    following screenshot:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您看到像前面的截图中的`failed=0`，则您已成功设置了Kubernetes集群。您可以ssh到Kubernetes主节点并运行`/usr/local/bin/kubectl`命令来查看状态，如下面的截图所示：
- en: '![](assets/8a93387d-c43c-4f24-a7d3-4c2115f4fecd.png)'
  id: totrans-418
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8a93387d-c43c-4f24-a7d3-4c2115f4fecd.png)'
- en: The preceding screenshot shows that you have been successful in setting up the
    Kubernetes version 1.10.2 master and node. You can continue to use the `kubectl`
    command to configure you Kubernetes cluster in the following chapters.
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的截图显示您已成功设置了Kubernetes版本1.10.2的主节点和节点。您可以继续使用`kubectl`命令在接下来的章节中配置Kubernetes集群。
- en: 'Unfortunately, if you see a failed count of more than 0, the Kubernetes cluster
    has probably not been set up correctly. Because failure is caused by many reasons,
    there is no single solution. It is recommended that you append the verbose option
    `-v` to see more detailed output from Ansible, as shown in the following code:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不幸的是，如果您看到失败计数超过0，那么Kubernetes集群可能没有正确设置。由于失败的原因有很多，没有单一的解决方案。建议您附加`-v`选项以查看来自Ansible的更详细的输出，如下面的代码所示：
- en: '[PRE51]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: If the failure is timeout, just retrying the ansible-playbook command again
    may solve it. Because Ansible is designed as an idempotency, if you re-perform
    the ansible-playbook command twice or more, Ansible still can configure correctly.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果失败是超时，只需重新运行ansible-playbook命令可能会解决问题。因为Ansible被设计为幂等性，如果您多次重新执行ansible-playbook命令，Ansible仍然可以正确配置。
- en: 'If the failure is change target IP address after you run ansible-playbook (for
    example, re-using the Ansible machine to set up another Kubernetes cluster), you
    need to clean up the fact cache file. It is located under `/tmp` directory, so
    you just delete this file, as shown in the following screenshot:'
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果失败是在运行ansible-playbook后更改目标IP地址（例如，重复使用Ansible机器设置另一个Kubernetes集群），则需要清理事实缓存文件。它位于`/tmp`目录下，所以您只需删除这个文件，如下面的截图所示：
- en: '![](assets/6990eb72-ec1c-4471-8af9-6cb8fdc41985.png)'
  id: totrans-424
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6990eb72-ec1c-4471-8af9-6cb8fdc41985.png)'
- en: See also
  id: totrans-425
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: This section describes how to set up the Kubernetes cluster on the Linux OS
    using kubespray. It is the Ansible playbook that supports major Linux distribution.
    Ansible is simple, but due to supporting any situation and environment, you need
    to care about some different use cases. Especially with ssh and sudo-related configurations,
    you need to understand Ansible deeper to fit it with your environment.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了如何在Linux操作系统上使用kubespray设置Kubernetes集群。这是一个支持主要Linux发行版的Ansible剧本。Ansible很简单，但由于支持任何情况和环境，您需要关注一些不同的用例。特别是在ssh和sudo相关的配置方面，您需要更深入地了解Ansible以适应您的环境。
- en: Running your first container in Kubernetes
  id: totrans-427
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Kubernetes中运行您的第一个容器
- en: Congratulations! You've built your own Kubernetes cluster in the previous recipes.
    Now, let's get on with running your very first container, nginx ([http://nginx.org/](http://nginx.org/)),
    which is an open source reverse proxy server, load balancer, and web server. Along
    with this recipe, you will create a simple nginx application and expose it to
    the outside world.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经在之前的配方中构建了自己的Kubernetes集群。现在，让我们开始运行您的第一个容器，nginx（[http://nginx.org/](http://nginx.org/)），这是一个开源的反向代理服务器、负载均衡器和Web服务器。除了这个配方，您还将创建一个简单的nginx应用程序，并将其暴露给外部世界。
- en: Getting ready
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Before you start to run your first container in Kubernetes, it''s better to
    check if your cluster is in a healthy mode. A checklist showing the following
    items would make your `kubectl` sub commands stable and successful, without unknown
    errors caused by background services:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes中运行第一个容器之前，最好检查一下您的集群是否处于健康状态。列出以下项目的清单将使您的`kubectl`子命令稳定且成功，而不会因后台服务引起未知错误：
- en: 'Checking the master daemons. Check whether the Kubernetes components are running:'
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查主节点守护程序。检查Kubernetes组件是否正在运行：
- en: '[PRE52]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Check the status of the Kubernetes master:'
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查Kubernetes主节点的状态：
- en: '[PRE53]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Check whether all the nodes are ready:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查所有节点是否准备就绪：
- en: '[PRE54]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Ideal results should look like the preceding outputs. You can successfully fire
    the `kubectl` command and get the response without errors. If any one of the checked
    items failed to meet the expectation, check out the settings in the previous recipes
    based on the management tool you used.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 理想的结果应该类似于前面的输出。您可以成功执行`kubectl`命令并获得响应而无错误。如果所检查的项目中有任何一个未能达到预期结果，请根据您使用的管理工具在前面的配方中检查设置。
- en: Check the access permission of the Docker registry, as we will use the official
    free image as an example. If you want to run your own application, be sure to
    dockerize it first! What you need to do for your custom application is to write
    a Dockerfile ([https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)),
    and build and push it into the public or private Docker registry.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查Docker注册表的访问权限，因为我们将使用官方免费镜像作为示例。如果您想运行自己的应用程序，请务必先将其docker化！对于您的自定义应用程序，您需要编写一个Dockerfile（[https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)），并将其构建并推送到公共或私有Docker注册表。
- en: Test your node connectivity with the public/private Docker registry
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 测试您的节点与公共/私有Docker注册表的连接
- en: On your node, try the Docker pull nginx command to test whether you can pull
    the image from the Docker Hub. If you're behind a proxy, please add `HTTP_PROXY`
    into your Docker configuration file([https://docs.docker.com/engine/admin/systemd/#httphttps-proxy](https://docs.docker.com/engine/admin/systemd/#httphttps-proxy)).
    If you want to run the image from the private repository in the Docker Hub, or
    the image from the private Docker registry, a Kubernetes secret is required. Please
    check *Working with secrets*, in [Chapter 2](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml),
    *Working through Kubernetes Concepts*, *for the instructions.*
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的节点上，尝试运行Docker pull nginx命令，以测试您是否可以从Docker Hub拉取镜像。如果您在代理后面，请将`HTTP_PROXY`添加到您的Docker配置文件中（[https://docs.docker.com/engine/admin/systemd/#httphttps-proxy](https://docs.docker.com/engine/admin/systemd/#httphttps-proxy)）。如果您想从Docker
    Hub的私有存储库或私有Docker注册表中运行镜像，则需要一个Kubernetes秘密。请查看*使用秘密*，在[第2章](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml)，*通过Kubernetes概念工作*，*获取说明*。
- en: How to do it...
  id: totrans-441
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: We will use the official Docker image of nginx as an example. The image is provided
    in the Docker Hub ([https://store.docker.com/images/nginx](https://store.docker.com/images/nginx)),
    and also the Docker Store ([https://hub.docker.com/_/nginx/](https://hub.docker.com/_/nginx/)).
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用nginx的官方Docker镜像作为示例。该镜像在Docker Hub（[https://store.docker.com/images/nginx](https://store.docker.com/images/nginx)）和Docker
    Store（[https://hub.docker.com/_/nginx/](https://hub.docker.com/_/nginx/)）中提供。
- en: Many of the official and public images are available on the Docker Hub or Docker
    Store so that you do not need to build them from scratch. Just pull them and set
    up your custom setting on top of them.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 许多官方和公共镜像都可以在Docker Hub或Docker Store上找到，因此你不需要从头构建它们。只需拉取它们并在其上设置自定义设置。
- en: Docker Store versus Docker Hub
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Store与Docker Hub
- en: As you may be aware, there is a more familiar official repository, Docker Hub,
    which was launched for the community for sharing the based image. Compared with
    the Docker Hub, the Docker Store is focused on enterprise applications. It provides
    a place for enterprise-level Docker images, which could be free or paid for software.
    You may feel more confident in using a more reliable image on the Docker Store.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能知道，有一个更熟悉的官方仓库，Docker Hub，它是为社区分享基于镜像而启动的。与Docker Hub相比，Docker Store更专注于企业应用。它为企业级Docker镜像提供了一个地方，这些镜像可以是免费的，也可以是付费的软件。你可能更有信心在Docker
    Store上使用更可靠的镜像。
- en: Running a HTTP server (nginx)
  id: totrans-446
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行一个HTTP服务器（nginx）
- en: 'On the Kubernetes master, we can use `kubectl run` to create a certain number
    of containers. The Kubernetes master will then schedule the pods for the nodes
    to run, with general command formatting, as follows:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes主节点上，我们可以使用`kubectl run`来创建一定数量的容器。Kubernetes主节点将安排节点运行的pod，一般的命令格式如下：
- en: '[PRE55]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The following example will create two replicas with the name `my-first-nginx`
    from the nginx image and expose port `80`. We can deploy one or more containers
    in what is referred to as a pod. In this case, we will deploy one container per
    pod. Just like a normal Docker behavior, if the nginx image doesn''t exist locally,
    it will pull it from the Docker Hub by default:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将使用nginx镜像创建两个名称为`my-first-nginx`的副本，并暴露端口`80`。我们可以在所谓的pod中部署一个或多个容器。在这种情况下，我们将每个pod部署一个容器。就像正常的Docker行为一样，如果本地不存在nginx镜像，它将默认从Docker
    Hub中拉取：
- en: '[PRE56]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The name of deployment <my-first-nginx> cannot be duplicated
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 部署的名称<my-first-nginx>不能重复
- en: 'The resource (pods, services, deployment, and so on) in one Kubernetes namespace
    cannot be duplicated. If you run the preceding command twice, the following error
    will pop up:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Kubernetes命名空间中的资源（pod、服务、部署等）不能重复。如果你运行上述命令两次，将会弹出以下错误：
- en: '[PRE57]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Let''s move on and see the current status of all the pods by `kubectl get pods`.
    Normally the status of the pods will hold on Pending for a while, since it takes
    some time for the nodes to pull the image from the registry:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续看看所有pod的当前状态，使用`kubectl get pods`。通常，pod的状态会在等待一段时间后保持在Pending状态，因为节点需要一些时间从注册表中拉取镜像：
- en: '[PRE58]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: If the pod status is not running for a long time
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 如果pod状态长时间不是运行状态
- en: "You could always use kubectl get pods to check the current status of the pods,\
    \ and kubectl describe pods `$pod_name` to check the detailed information in a\
    \ pod. If you make a typo of the image name, you might get the `ErrImagePull`\
    \ error message, and if you are pulling \Lthe images from a private repository\
    \ or registry without proper credentials, you might get the `ImagePullBackOff`\
    \ message. If you get the `Pending` status for a long time and check out the node\
    \ capacity, make sure you don't run too many replicas that exceed the node capacity.\
    \ If there are other unexpected error messages, you could either stop the pods\
    \ or the entire replication controller to force the master to schedule the tasks\
    \ again."
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以始终使用kubectl get pods来检查pod的当前状态，使用kubectl describe pods `$pod_name`来检查pod中的详细信息。如果您输入了错误的镜像名称，可能会收到`ErrImagePull`错误消息，如果您从私有存储库或注册表中拉取镜像而没有适当的凭据，可能会收到`ImagePullBackOff`消息。如果您长时间收到`Pending`状态并检查节点容量，请确保您没有运行超出节点容量的副本。如果出现其他意外错误消息，您可以停止pod或整个复制控制器，以强制主节点重新安排任务。
- en: 'You can also check the details about the deployment to see whether all the
    pods are ready:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以检查部署的详细信息，以查看所有的pod是否已准备就绪：
- en: '[PRE59]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Exposing the port for external access
  id: totrans-460
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 公开端口以供外部访问
- en: 'We might also want to create an external IP address for the nginx deployment.
    On cloud providers that support an external load balancer (such as Google compute
    engine), using the `LoadBalancer` type will provision a load balancer for external
    access. On the other hand, you can still expose the port by creating a Kubernetes
    service as follows, even though you''re not running on platforms that support
    an external load balancer. We''ll describe how to access this externally later:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能还想为nginx部署创建一个外部IP地址。在支持外部负载均衡器的云提供商上（例如Google计算引擎），使用`LoadBalancer`类型将为外部访问提供一个负载均衡器。另一方面，即使您不在支持外部负载均衡器的平台上运行，您仍然可以通过创建Kubernetes服务来公开端口，我们稍后将描述如何从外部访问这个服务：
- en: '[PRE60]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'We can see the service status we just created:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到刚刚创建的服务状态：
- en: '[PRE61]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: You may find an additional service named `kubernetes` if the service daemon
    run as a container (for example, using kubeadm as a management tool). It is for
    exposing the REST API of the Kubernetes API server internally. The pending state
    of `my-first-nginx` service's external IP indicates that it is waiting for a specific
    public IP from cloud provider. Take a look at [Chapter 6](b7e1d803-52d0-493b-9123-5848da3fa9ec.xhtml),
    *Building Kubernetes on AWS*, and [Chapter 7](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml),
    *Building Kubernetes on GCP*, for more details.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务守护程序以容器形式运行（例如使用kubeadm作为管理工具），您可能会发现一个名为`kubernetes`的额外服务。这是为了在内部公开Kubernetes
    API服务器的REST API。`my-first-nginx`服务的外部IP处于挂起状态，表明它正在等待云提供商提供特定的公共IP。更多细节请参阅[第6章](b7e1d803-52d0-493b-9123-5848da3fa9ec.xhtml)，“在AWS上构建Kubernetes”，和[第7章](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml)，“在GCP上构建Kubernetes”。
- en: Congratulations! You just ran your first container with a Kubernetes pod and
    exposed port `80` with the Kubernetes service.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您刚刚运行了您的第一个Kubernetes pod并暴露了端口`80`。
- en: Stopping the application
  id: totrans-467
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停止应用程序
- en: 'We can stop the application using commands such as the delete deployment and
    service. Before this, we suggest you read through the following code first to
    understand more about how it works:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用删除部署和服务等命令来停止应用程序。在此之前，我们建议您先阅读以下代码，以更多了解它的工作原理：
- en: '[PRE62]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: How it works…
  id: totrans-470
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Let''s take a look at the insight of the service using describe in the `kubectl`
    command. We will create one Kubernetes service with the type `LoadBalancer`, which
    will dispatch the traffic into two endpoints, `192.168.79.9` and `192.168.79.10`
    with port `80`:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用`kubectl`命令中的describe来深入了解服务。我们将创建一个类型为`LoadBalancer`的Kubernetes服务，它将把流量分发到两个端点`192.168.79.9`和`192.168.79.10`，端口为`80`：
- en: '[PRE63]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The port here is an abstract service port, which will allow any other resources
    to access the service within the cluster. The `nodePort` will be indicating the
    external port to allow external access. The `targetPort` is the port the container
    allows traffic into; by default, it will be the same port.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的端口是一个抽象的服务端口，它将允许任何其他资源在集群内访问服务。`nodePort`将指示外部端口以允许外部访问。`targetPort`是容器允许流量进入的端口；默认情况下，它将是相同的端口。
- en: 'In the following diagram, external access will access the service with `nodePort`.
    The service acts as a load balancer to dispatch the traffic to the pod using port
    `80`. The pod will then pass through the traffic into the corresponding container
    using `targetPort 80`:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，外部访问将使用`nodePort`访问服务。服务充当负载均衡器，将流量分发到使用端口`80`的pod。然后，pod将通过`targetPort
    80`将流量传递到相应的容器中：
- en: '![](assets/5f7b733a-b8aa-47b9-904e-137cc1e958f6.png)'
  id: totrans-475
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5f7b733a-b8aa-47b9-904e-137cc1e958f6.png)'
- en: 'In any nodes or master, once the inter-connection network is set up, you should
    be able to access the nginx service using `ClusterIP` `192.168.61.150` with port
    `80`:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何节点或主节点上，一旦建立了互连网络，您应该能够使用`ClusterIP` `192.168.61.150`和端口`80`访问nginx服务：
- en: '[PRE64]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'It will be the same result if we `curl` to the target port of the pod directly:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们直接`curl`到pod的目标端口，将得到相同的结果：
- en: '[PRE65]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: If you'd like to try out external access, use your browser to access the external
    IP address. Please note that the external IP address depends on which environment
    you're running in.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想尝试外部访问，请使用浏览器访问外部IP地址。请注意，外部IP地址取决于您运行的环境。
- en: 'In the Google compute engine, you could access it via a `ClusterIP` with a
    proper rewall rules setting:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 在Google计算引擎中，您可以通过适当的防火墙规则设置通过`ClusterIP`进行访问：
- en: '[PRE66]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'In a custom environment, such as on-premise data center, you could go through
    the IP address of nodes to access :'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 在自定义环境中，例如本地数据中心，您可以通过节点的IP地址进行访问：
- en: '[PRE67]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'You should be able to see the following page using a web browser:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够使用Web浏览器看到以下页面：
- en: '![](assets/a3d0dfde-0b38-463c-809f-65f6cc14f357.png)'
  id: totrans-486
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a3d0dfde-0b38-463c-809f-65f6cc14f357.png)'
- en: See also
  id: totrans-487
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'We have run our very first container in this section. Go ahead and read the
    next chapter to aquire more knowledge about Kubernetes:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经运行了我们的第一个容器。继续阅读下一章，以获取更多关于Kubernetes的知识：
- en: '[Chapter 2](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml), *Walking through Kubernetes
    Concepts*'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml)，*深入了解Kubernetes概念*'
