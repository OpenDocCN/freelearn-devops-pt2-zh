- en: Chapter 6. Developing Your Own Jenkins Plugin
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。开发您自己的Jenkins插件
- en: In the previous chapter, we focused on the high-level concepts behind Jenkins
    plugins.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们专注于Jenkins插件背后的高级概念。
- en: In this chapter, we will be hands-on as we work through the practical aspects
    of setting up our development environment, become familiar with the tools and
    conventions that we need to know about, and then create our first Jenkins plugin.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将亲自动手，通过设置我们的开发环境，熟悉我们需要了解的工具和约定，然后创建我们的第一个Jenkins插件。
- en: 'By the end of the chapter, you should be familiar with the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您应该熟悉以下内容：
- en: Using Maven for builds and dependency management
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Maven进行构建和依赖管理
- en: The structure and layout used for plugin projects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于插件项目的结构和布局
- en: Creating your own Jenkins plugin project(s)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建您自己的Jenkins插件项目
- en: Making basic code changes to your plugin source code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对插件源代码进行基本更改
- en: Compiling, packaging, and deploying your plugin to a remote Jenkins instance
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译，打包和部署插件到远程Jenkins实例
- en: Using an IDE to make changes and run Jenkins
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用IDE进行更改和运行Jenkins
- en: The basics of running and debugging Jenkins and your plugin code within an IDE
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在IDE中运行和调试Jenkins和您的插件代码的基础知识
- en: We will begin by setting up our development environment; then, as is traditional,
    we will create a very simple `Hello World` Jenkins plugin project to illustrate
    the mechanics and get us started.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先设置我们的开发环境；然后，按照传统方式，我们将创建一个非常简单的“Hello World”Jenkins插件项目，以说明机制并让我们开始。
- en: 'Most of this chapter is based on the topics covered in the Jenkins Plugin tutorial
    guide here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的大部分内容都是基于Jenkins插件教程指南中涵盖的主题：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial](https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial](https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial)'
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This page has many useful references and should be your first port of call if
    you have any difficulty with any aspect of this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面有很多有用的参考资料，如果您在本章的任何方面遇到困难，这应该是您的首要选择。
- en: We will focus initially on the tools, conventions, and frameworks and keep to
    the simplest plugin possible to provide a solid understanding of the process and
    tools used to develop plugins. We will look at extension points and more complex
    code changes in the next chapter.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先专注于工具、约定和框架，并坚持使用最简单的插件，以便对开发插件所使用的过程和工具有扎实的理解。我们将在下一章中研究扩展点和更复杂的代码更改。
- en: We will also run through the setting up of an IDE for plugin development and
    introduce basic Jenkins debugging that can be done directly from within Eclipse.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将介绍在Eclipse中直接进行的插件开发和基本Jenkins调试的IDE设置。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: To start off, we are concentrating on using Java and Maven as they are currently
    the most common tool set that are used to build plugins, but we will also take
    a look at alternative approaches such as Groovy and Gradle in the next chapter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们集中于使用Java和Maven，因为它们目前是构建插件最常用的工具集，但我们也将在下一章中看看替代方法，比如Groovy和Gradle。
- en: Let's start off by setting up your environment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始设置您的环境。
- en: An introduction to Maven
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven简介
- en: We will use Maven to build our plugin. If you are unfamiliar with Maven, don't
    worry—the main point of Maven is that you don't necessarily need to know a lot
    about Maven to use it and to get a lot from it!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Maven来构建我们的插件。如果您对Maven不熟悉，不用担心——Maven的主要观点是，您不一定需要对Maven了解很多，就可以使用它并从中获得很多好处！
- en: 'For a build tool that''s quite unusual, you may well have expected yourself
    to be knee-deep in configuration files and code. However, Maven works quite well
    without these due to the core philosophy that is at its heart: it uses *convention
    over configuration*.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个相当不寻常的构建工具来说，您可能期望自己深陷于配置文件和代码中。然而，由于Maven的核心理念是使用“约定优于配置”，因此即使没有这些文件，Maven也可以很好地工作。
- en: Maven works on the assumption that you and your project are following a set
    of standard, sensible conventions. These are nothing too weird or onerous, so
    if you are following this path, then Maven should just know where everything is
    and what you would like to achieve and will help you get up and running very quickly
    and easily.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Maven的工作假设您和您的项目遵循一套标准、合理的约定。这些并不是太奇怪或繁重的东西，所以如果您遵循这条路线，那么Maven应该知道一切在哪里，以及您想要实现什么，并将帮助您快速轻松地启动和运行。
- en: 'One of these core assumptions is related to your project structure; specifically,
    if you are using a directory layout like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个核心假设与您的项目结构有关；具体来说，如果您使用的是这样的目录布局：
- en: '| Item | Default dir (relative to the project directory) |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| 项目 | 默认目录（相对于项目目录） |'
- en: '| --- | --- |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| source code | `src/main/java` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 源代码 | `src/main/java` |'
- en: '| resources | `src/main/resources` |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 资源 | `src/main/resources` |'
- en: '| tests | `src/test` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 测试 | `src/test` |'
- en: '| complied code | `target` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 编译代码 | `target` |'
- en: '| distributable JAR | `target/classes` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 可分发的JAR | `target/classes` |'
- en: Given a project that adheres to this convention, Maven will automatically know
    how to build your code, how to test it, and how to package it all up nicely for
    you with no other configuration or intervention required, providing a lot of benefit
    for a very small cost.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个遵循这个约定的项目，Maven将自动知道如何构建您的代码，如何测试它，以及如何将所有内容打包得很好，而无需其他配置或干预，为您提供了很大的好处，成本很小。
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This is great as long as your project sticks to the path that Maven expects…
    if you stray, things can get messy very quickly! This makes Maven great for new
    and well-structured projects, but requires a bit more work when introducing legacy
    projects that have their own ideas about locations and naming conventions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 只要您的项目坚持Maven所期望的路径，这就很好……如果您偏离了，事情就会变得非常混乱！这使得Maven非常适合新的和良好结构的项目，但在引入具有其自己关于位置和命名约定的传统项目时，需要更多的工作。
- en: Installing Maven
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Maven
- en: 'Maven is a Java tool, and therefore, we need to have Java installed to use
    it. You should have Java on your system already if you''re running Jenkins locally,
    but if not, you can download a JDK for your platform from the following link—version
    6.0 or later is required:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Maven是一个Java工具，因此，我们需要安装Java才能使用它。如果你在本地运行Jenkins，你的系统上应该已经有Java了，但如果没有，你可以从以下链接下载适合你平台的JDK——需要6.0或更高版本：
- en: '[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)'
- en: 'Once you''ve got the Java prerequisite sorted out, download Maven for your
    platform from the Apache site here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你解决了Java的先决条件，就从Apache网站下载适合你平台的Maven：
- en: '[https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi)'
- en: 'Then follow the installation steps for your operating system from this page:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按照此页面上的操作系统的安装步骤进行安装：
- en: '[https://maven.apache.org/install.html](https://maven.apache.org/install.html)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://maven.apache.org/install.html](https://maven.apache.org/install.html)'
- en: On all platforms, the main requirement is to ensure that you have a `JAVA_HOME`
    variable in `PATH`, and that `PATH` also contains the Maven `bin` directory from
    the download you extracted.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有平台上，主要要求是确保你的`PATH`中有`JAVA_HOME`变量，并且`PATH`还包含你从下载中提取的Maven `bin`目录。
- en: 'Once you are set up, you should get something roughly comparable to the following
    when you run `java –version` and then `mvn –version`—I am also displaying the
    Java and Maven environment variables here for your information:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你设置好了，当你运行`java -version`然后`mvn -version`时，你应该得到与以下大致相似的东西——我也在这里显示Java和Maven环境变量供你参考：
- en: '![Installing Maven](../images/00037.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![Installing Maven](../images/00037.jpeg)'
- en: 'We now need to tell Maven about Jenkins; where it is and how to build it. We
    do this by updating the `settings.xml` file in the m2 home directory with the
    XML provided in the **Setting up Environment** section of the Jenkins Plugin Tutorial
    page mentioned earlier:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要告诉Maven关于Jenkins的情况；它在哪里以及如何构建它。我们通过更新m2主目录中的`settings.xml`文件来实现这一点，其中包含在前面提到的Jenkins插件教程页面的**设置环境**部分提供的XML：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial](https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial](https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial)'
- en: 'Find your `settings.xml` file here for Linux or Mac: `~/.m2/settings.xml`.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux或Mac中找到你的`settings.xml`文件：`~/.m2/settings.xml`。
- en: 'For Windows, the file is available at: `%USERPROFILE%\.m2\`.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，文件位于：`%USERPROFILE%\.m2\`。
- en: 'Add the following text within the `settings.xml` file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在`settings.xml`文件中添加以下文本：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It''s a good idea to make a new directory for each project. This keeps things
    clean and simple, rather than having multiple projects coexist in one folder.
    To create a directory for this project, run `mkdir` and then `cd` to enter into
    the directory as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个项目创建一个新目录是个好主意。这样做可以保持清洁和简单，而不是让多个项目共存于一个文件夹中。要为这个项目创建一个目录，运行`mkdir`，然后`cd`进入目录，如下所示：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After this, we can start the build, which will create a skeleton plugin project
    for us:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以开始构建，这将为我们创建一个骨架插件项目：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you have any issues at this point, check these three common causes first:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在这一点上有任何问题，请首先检查以下三个常见原因：
- en: Does `mvn` work in this directory? Check using `mvn -version`
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mvn`在这个目录下工作吗？使用`mvn -version`进行检查'
- en: Does Java work in this directory? Check using `java -version`
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java在这个目录下工作吗？使用`java -version`进行检查
- en: Do you have Internet connectivity? Check using `ping www.google.com`
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有互联网连接吗？使用 `ping www.google.com` 进行检查
- en: If all goes well, you will be prompted to answer a couple of simple questions;
    Maven will want you to specify the `groupId` and the `artifactId` parameters of
    your plugin.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你将被提示回答几个简单的问题；Maven将要求你指定插件的`groupId`和`artifactId`参数。
- en: 'For `groupId`, the convention is to use your domain name in reverse followed
    by the project name, all in lower case and separated by dots. Given the `donaldsimpson.co.uk`
    domain name and the `jenkinspluginexample` project name, I would use this: `uk.co.donaldsimpson.jenkinspluginexample`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`groupId`，惯例是使用你的域名倒序，然后是项目名称，全部小写并用点分隔。给定`donaldsimpson.co.uk`域名和`jenkinspluginexample`项目名称，我会使用这个：`uk.co.donaldsimpson.jenkinspluginexample`。
- en: The value of `artifactId` should be your project name, that is, `jenkinspluginexample`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`artifactId`的值应该是你的项目名称，即`jenkinspluginexample`。'
- en: 'If you are going to have several components or services comprising the `jenkinspluginexample`
    project, you should append additional service names here, such as the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`jenkinspluginexample`项目包含多个组件或服务，你应该在这里附加额外的服务名称，例如以下内容：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The intention behind this approach is to ensure that when used in conjunction
    with the group ID, each part of your project will remain uniquely and readily
    identifiable.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的目的是确保与组ID一起使用时，项目的每个部分都能保持独特和容易识别。
- en: '![Installing Maven](../images/00038.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![Installing Maven](../images/00038.jpeg)'
- en: The preceding screenshot is the result of the previous input and states that
    a version 1.0 Snapshot build has been created using the skeleton plugin, which
    has produced a very basic and the first plugin for us to examine.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图是先前输入的结果，并声明使用骨架插件创建了版本1.0快照构建，这为我们创建了一个非常基本的第一个插件供我们检查。
- en: Now take a look inside the newly created subdirectory, whose name should match
    your `artifactId`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看看新创建的子目录里面，它的名称应该与你的`artifactId`匹配。
- en: 'On exploring this directory, we should now have the generated examples of everything
    that is required to create the most basic plugin. These include the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索这个目录之后，我们现在应该生成了创建最基本插件所需的所有示例。这些包括以下内容：
- en: '`pom.xml`: A new Maven POM file for our project that contains the information
    required for Maven to build, package, and distribute our example plugin'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pom.xml`：我们项目的新Maven POM文件，其中包含Maven构建、打包和分发我们示例插件所需的信息'
- en: '`src/main`: This directory contains both a Java directory and a resources directory'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/main`：这个目录包含Java目录和资源目录'
- en: '`src/main/java`: This directory contains the `Hello World` builder class that
    we will update later'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/main/java`：这个目录包含我们稍后将更新的`Hello World`构建器类'
- en: '`src/main/resources`: This folder contains configuration and help files'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src/main/resources`：这个文件夹包含配置和帮助文件'
- en: Taking a good look around at the contents of these new folders that we just
    generated and mentioned will help you become familiar with the different files
    and structure used by Maven and Jenkins to develop, build, and distribute plugins.
    The layout follows the Maven conventions and is used for many other projects as
    well.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细查看我们刚刚生成并提到的这些新文件夹的内容，将帮助你熟悉Maven和Jenkins用于开发、构建和分发插件的不同文件和结构。布局遵循Maven的约定，并且也用于许多其他项目。
- en: As you previously saw, our new project directory has its own `pom.xml` file,
    so we should be able to build it as a Maven project—let's take a look and try
    it out!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你之前看到的，我们的新项目目录有自己的`pom.xml`文件，所以我们应该能够将其构建为一个Maven项目——让我们来看看并尝试一下！
- en: Change directory to the location of your new `pom.xml` file and have a look
    at it—you will see the various goals available in here, along with all of the
    details required to work with our project.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到新的`pom.xml`文件所在的位置，并查看它——你会看到这里提供了各种可用的目标，以及与我们的项目一起使用所需的所有细节。
- en: 'There is also a packaging declaration, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个打包声明，如下所示：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This tells Maven that you would like this project to be packaged into an HPI
    file—this is the standard file format for Jenkins plugins. Other packaging instructions
    typically include ZIP, JAR, WAR, and EAR.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉Maven你希望将这个项目打包成一个HPI文件——这是Jenkins插件的标准文件格式。其他打包指令通常包括ZIP、JAR、WAR和EAR。
- en: 'Maven also assumes that you will want to perform a standard set of tasks with
    your project—these will usually include functions, or **phases** such as the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Maven还假设你希望对项目执行一组标准任务——这些通常包括以下功能或**阶段**：
- en: '`validate`: This validates that the project is correct and all necessary information
    is available.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate`：这将验证项目是否正确，并且所有必要的信息都是可用的。'
- en: '`compile`: This compiles the source code of the project.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile`：这将编译项目的源代码。'
- en: '`test`: This tests the compiled source code using a suitable unit testing framework.
    The tests should not require the code be packaged or deployed.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test`：这将使用适当的单元测试框架测试编译后的源代码。这些测试不应该需要代码被打包或部署。'
- en: '`package`: This takes the compiled code and packages it in its distributable
    format, such as a JAR.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package`：这将编译后的代码打包成可分发的格式，比如JAR。'
- en: '`integration-test`: This processes and deploys the package, if necessary, into
    an environment where integration tests can be run.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`integration-test`：如果需要，这个过程会将包部署到集成测试环境中。'
- en: '`verify`: This runs checks to verify that the package is valid and meets quality
    criteria.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verify`：这将运行检查以验证包是否有效并符合质量标准。'
- en: '`install`: This installs the package into the local repository, for use as
    a dependency in other projects locally.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install`：这将把包安装到本地仓库，以便在其他项目中作为依赖使用。'
- en: '`deploy`: This is done in an integration or release environment. This function
    copies the final package to the remote repository to share the package with other
    developers and projects.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deploy`：这是在集成或发布环境中完成的。此功能将最终的包复制到远程存储库，以便与其他开发人员和项目共享包。'
- en: '`clean`: This cleans up artifacts created by prior builds.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean`：这将清理先前构建创建的构件。'
- en: '`site`: This generates site documentation for this project.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site`：这为该项目生成站点文档。'
- en: 'This guide has more information on Maven phases and goals and how they are
    linked:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个指南有关于Maven阶段和目标以及它们如何关联的更多信息：
- en: '[https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html](https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html](https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html)'
- en: 'If we run the `package` goal now, Maven should run through all of the prerequisite
    steps and then produce an HPI file, which we can deploy to Jenkins by running
    the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在运行`package`目标，Maven应该会运行所有先决步骤，然后生成一个HPI文件，我们可以通过运行以下命令将其部署到Jenkins：
- en: '[PRE5]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This phase will download all the required dependencies using the information
    in the POM file. It will then compile the Java code and would also run tests (if
    any existed in the expected location—`src/test`).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这个阶段将使用POM文件中的信息下载所有必需的依赖项。然后它将编译Java代码，并且如果存在测试（在预期位置`src/test`中），也会运行测试。
- en: Depending on your Internet connection, this may take some time, as Maven will
    perform an initial download for all the declared dependencies (and their dependencies!)
    that it doesn't already have locally. In subsequent runs, things should be much
    quicker, as Maven will retain the downloaded resources in the `.m2/repository`
    cache folder, which is in your home directory next to settings.xml that we updated
    earlier.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的互联网连接，这可能需要一些时间，因为Maven将对所有声明的依赖项（以及它们的依赖项！）进行初始下载，这些依赖项在本地还没有。在后续运行中，事情应该会快得多，因为Maven将在`.m2/repository`缓存文件夹中保留已下载的资源，该文件夹位于你的家目录旁边，就在我们之前更新的settings.xml文件旁边。
- en: On completion, you should now have a distributable `.hpi` file!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你现在应该有一个可分发的`.hpi`文件！
- en: '![Installing Maven](../images/00039.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![安装Maven](../images/00039.jpeg)'
- en: As you can see from the preceding image, the console output that is produced
    near the end explains that the code has been compiled into a Java Archive (`.jar`)
    file, the resources (the Jelly, configuration, and HTML files) have been included,
    and everything has, in my case, been packaged into a resultant archive named `jenkinspluginexample.hpi`,
    which now resides in the `target/` directory.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的图像中可以看出，控制台输出在最后附近解释了代码已经被编译成一个Java存档（`.jar`）文件，资源（Jelly、配置和HTML文件）已经被包含，并且一切都已经在我的情况下被打包成了一个名为`jenkinspluginexample.hpi`的结果存档，现在位于`target/`目录中。
- en: We haven't written a line of code yet, but we have just produced our first Jenkins
    plugin!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有写一行代码，但我们刚刚制作了我们的第一个Jenkins插件！
- en: 'Let''s now deploy this to a standard Jenkins instance:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将其部署到标准的Jenkins实例：
- en: Open the home page for your Jenkins instance.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的Jenkins实例的主页。
- en: Navigate to Jenkins **Home** | **Manage Jenkins**.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Jenkins的**主页** | **管理Jenkins**。
- en: Select **Manage Plugins**, and then **Advanced**.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**管理插件**，然后选择**高级**。
- en: Scroll down to the **Upload Plugin** section and click on **Browse**.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到**上传插件**部分，然后点击**浏览**。
- en: Navigate to the local folder where your new `.hpi` file is (in the target directory
    of your project):![Installing Maven](../images/00040.jpeg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您的项目目录的目标目录中的新`.hpi`文件所在的本地文件夹：![安装Maven](../images/00040.jpeg)
- en: 'After clicking the **Submit** button, you should see that your plugin is uploaded
    and installed on your Jenkins instance:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**提交**按钮后，您应该看到您的插件已上传并安装到您的Jenkins实例上：
- en: '![Installing Maven](../images/00041.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![安装Maven](../images/00041.jpeg)'
- en: You will now have a `TODO` plugin in your list of installed plugins, along with
    the Snapshot build number and your name as the author.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的已安装插件列表中将会有一个`TODO`插件，以及快照构建编号和您的名字作为作者。
- en: 'If you now click on **Configure** of any Freestyle job, there will be a new
    option to add a build step called **Say hello world**:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在点击任何自由风格作业的**配置**，将会有一个新选项添加一个名为**Say hello world**的构建步骤：
- en: '![Installing Maven](../images/00042.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![安装Maven](../images/00042.jpeg)'
- en: 'Selecting this will produce the following dialog, where you supply your name:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 选择这个选项将产生以下对话框，您需要在其中提供您的名字：
- en: '![Installing Maven](../images/00043.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![安装Maven](../images/00043.jpeg)'
- en: 'Not too surprisingly, for a `Hello World` project, this will be displayed as
    an additional build step in the console output the next time you run this job:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，对于一个`Hello World`项目，下次运行此作业时，这将显示为控制台输出中的一个额外构建步骤：
- en: '![Installing Maven](../images/00044.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![安装Maven](../images/00044.jpeg)'
- en: It looks pretty cool to have our own plugin installed and running on a Jenkins
    instance, and doing this for the first time is good fun. However, when you are
    developing a plugin, running through a process like this every time you make a
    small change is a bit more of a hassle than you may want!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jenkins实例上安装和运行我们自己的插件看起来很酷，第一次这样做很有趣。然而，当您开发插件时，每次进行小改动时都要经历这样的过程比您想象的更麻烦！
- en: Let's now look at making our first code change and a smarter and more efficient
    way to package, deploy, and test our code.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何进行第一次代码更改以及更智能、更高效地打包、部署和测试我们的代码。
- en: 'To start off with, make a tiny change as follows to the `HelloWorldBuilder.java`
    file, which is in your `src/main/java` directory:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，对`HelloWorldBuilder.java`文件进行微小的更改，该文件位于您的`src/main/java`目录中：
- en: '[PRE6]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Installing Maven](../images/00045.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![安装Maven](../images/00045.jpeg)'
- en: 'Initially, the line was this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，这行是这样的：
- en: '[PRE7]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'I have simply altered the preceding line to the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是将前一行改成了以下内容：
- en: '[PRE8]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Instead of going all the way through the previous process again—compiling,
    packaging, and deploying through the Jenkins web page and so on—just to check
    this minor update, we can perform all these steps with one simple Maven command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 与其再次经历之前的整个过程——编译、打包、通过Jenkins网页部署等等——来检查这个小更新，我们可以通过一个简单的Maven命令执行所有这些步骤：
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will compile the code (after picking up our modification), and then start
    up and run a local instance of Jenkins on your machine with our newly updated
    plugin already deployed to it—this makes the testing of your changes much easier,
    quicker, and safer too.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将编译代码（在接受我们的修改后），然后启动并在您的计算机上运行一个带有我们新更新的插件的本地Jenkins实例——这使得测试您的更改变得更容易、更快速、也更安全。
- en: 'To do this on Windows, first export the following settings:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上执行此操作，首先导出以下设置：
- en: '[PRE10]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'On Unix and Mac, do the equivalent, as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unix和Mac上，执行相应的操作，如下所示：
- en: '[PRE11]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, regardless of platform, call the `hpi:run` goal, as shown here:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，无论平台如何，调用`hpi:run`目标，如下所示：
- en: '[PRE12]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After this, you will be able to see Maven download dependencies and then start
    up a local Jetty instance that runs Jenkins with your plugin installed on it!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您将能够看到Maven下载依赖项，然后启动一个本地的Jetty实例，该实例在其中运行具有您的插件的Jenkins！
- en: 'Keep an eye on your console output, and you will see when everything is complete
    whenever the following text is displayed: **INFO: Jenkins is fully up and running**.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '密切关注控制台输出，当显示以下文本时，您将看到一切都完成了：**INFO: Jenkins is fully up and running**。'
- en: 'After this point, you can safely connect to the Jenkins instance by pointing
    your browser to the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您可以通过将浏览器指向以下位置来安全地连接到Jenkins实例：
- en: '`http://127.0.0.1:8080/jenkins/`'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://127.0.0.1:8080/jenkins/`'
- en: Note
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Do not try to connect to the `8000` port you have set in `MAVEN_OPTS`—this is
    used for debugging, which we will take a look at later. Use port `8080`, and note
    that the appended `/jenkins/` path is also required in order to connect.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 不要尝试连接到您在`MAVEN_OPTS`中设置的`8000`端口——这用于调试，我们稍后会看一下。使用端口`8080`，并注意附加的`/jenkins/`路径也是必需的，以便连接。
- en: Now, we can create and configure a new Freestyle job and add in the same build
    step as before by selecting to use our **Say hello world** job and adding our
    name to it.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建和配置一个新的自由风格作业，并通过选择使用我们的**Say hello world**作业并将我们的名字添加到其中来添加与之前相同的构建步骤。
- en: 'Running this new job should produce the expected output, as follows:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个新作业应该会产生预期的输出，如下所示：
- en: '![Installing Maven](../images/00046.jpeg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![安装Maven](../images/00046.jpeg)'
- en: This proves that our code change has been picked up and demonstrates just how
    quickly and easily you can make, test, package, deploy, and verify your plugin
    changes—one small Maven command does most of the work for you! After the initial
    setup and downloading, it's a fairly quick process too.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这证明了我们的代码更改已被接受，并展示了您可以多快多轻松地进行代码更改、测试、打包、部署和验证——一个小小的Maven命令为您完成了大部分工作！在初始设置和下载之后，这也是一个相当快速的过程。
- en: To make life even easier, we can set up an IDE to help us develop Jenkins plugins.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使生活更加轻松，我们可以设置一个IDE来帮助我们开发Jenkins插件。
- en: Note
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The official Jenkins Plugin Tutorial page is at [https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial](https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial).
    This tutorial contains steps for NetBeans, IntelliJ IDEA, and Eclipse. The first
    two are very simple, so we'll cover the Eclipse setup in more detail here.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的Jenkins插件教程页面位于[https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial](https://wiki.jenkins-ci.org/display/JENKINS/Plugin+tutorial)。该教程包含了NetBeans、IntelliJ
    IDEA和Eclipse的步骤。前两者非常简单，所以我们将在这里更详细地介绍Eclipse的设置。
- en: 'The plugin guide currently recommends using this command to generate a new
    Eclipse workspace for plugin development:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 插件指南目前建议使用此命令为插件开发生成新的Eclipse工作空间：
- en: '[PRE13]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You need to update `/path/to/workspace` to point to a suitable workspace location
    on your system—this can be anywhere you like, but ideally, next to your other
    Eclipse workspace(s).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将`/path/to/workspace`更新为系统上合适的工作空间位置，这可以是您喜欢的任何地方，但理想情况下应该与其他Eclipse工作空间相邻。
- en: Note
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: I had issues running the suggested command and found that `eclipse:add-maven-repo`
    is deprecated, so I updated this to `eclipse:configure-workspace` instead.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我在运行建议的命令时遇到了问题，并发现`eclipse:add-maven-repo`已经过时，所以我将其更新为`eclipse:configure-workspace`。
- en: 'For my project, the following worked:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我的项目，以下操作有效：
- en: '[PRE14]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Make sure you run this command from within the same directory that you have
    used to create the `Hello World` plugin, as it requires the `pom.xml` file and
    other resources from here.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您从创建“Hello World”插件的相同目录中运行此命令，因为它需要`pom.xml`文件和其他资源。
- en: On completion, this step should successfully populate a new Eclipse `.metadata`
    directory in your new workspace and have all the required settings and resources
    in your project directory.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，此步骤应成功在新的工作空间中填充一个新的Eclipse`.metadata`目录，并在您的项目目录中具有所有必需的设置和资源。
- en: 'Next, open Eclipse and switch to your chosen workspace, select **Import** (under
    the **File** menu), select **General** and then **Existing Projects into Workspace**,
    as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开Eclipse并切换到您选择的工作空间，选择**导入**（在**文件**菜单下），选择**常规**，然后选择**现有项目到工作空间**，如下所示：
- en: '![Installing Maven](../images/00047.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![安装Maven](../images/00047.jpeg)'
- en: 'Direct this dialog to the directory where you created your `Hello World` plugin
    (where the `pom.xml` file is), and Eclipse should automatically load up the project
    for you:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 将此对话框指向您创建“Hello World”插件的目录（`pom.xml`文件所在的位置），Eclipse应该会自动为您加载项目：
- en: '![Installing Maven](../images/00048.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![安装Maven](../images/00048.jpeg)'
- en: 'On completion, you should have an IDE that looks something like this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您的IDE应该看起来像这样：
- en: '![Installing Maven](../images/00049.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![安装Maven](../images/00049.jpeg)'
- en: Now you can edit the Java classes and the plugin resources from within Eclipse.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以在Eclipse中编辑Java类和插件资源。
- en: Tip
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember that you can also enable the Mylyn plugin that we set up earlier to
    keep an eye on how your most important Jenkins builds are doing!
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您还可以启用我们之前设置的Mylyn插件，以便随时关注您最重要的Jenkins构建的情况！
- en: You can also manage your project's POM file and run the Maven build from here
    too—right-click on the `pom.xml` file and select **Run as** and **Maven Build**,
    and Jenkins should start up directly in your Eclipse console now, with your plugin
    already deployed with the latest version of your code.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从这里管理项目的POM文件并运行Maven构建——右键单击`pom.xml`文件，然后选择**运行为**和**Maven构建**，Jenkins现在应该会直接在您的Eclipse控制台中启动，并且您的插件已经部署了最新版本的代码。
- en: To test this setup, try making another very simple change—in the preceding image,
    I updated the output message to **Hello again**, just to be different. Saving
    the `Hello World` builder class and then running the Maven target `hpi:run` through
    Eclipse will fire up Jenkins, and you can see the alteration made in Eclipse.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试此设置，请尝试进行另一个非常简单的更改——在前面的图像中，我将输出消息更新为**Hello again**，只是为了不同。保存`Hello World`构建器类，然后通过Eclipse运行Maven目标`hpi:run`将启动Jenkins，您可以在Eclipse中看到所做的更改。
- en: 'You can also run Jenkins in the **Debug** mode and set a breakpoint by clicking
    on the desired line of your code in Eclipse, as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在**调试**模式下运行Jenkins，并通过单击Eclipse中所需代码的行来设置断点，如下所示：
- en: '![Installing Maven](../images/00050.jpeg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![安装Maven](../images/00050.jpeg)'
- en: Here, we can see the breakpoint being activated when the build is run via Jenkins.
    At this point, the focus will automatically switch from Jenkins in the browser
    to the Eclipse IDE, where we can inspect the current values of the existing variables
    at run time. We can then walk through the code step by step by debugging the values
    in real time and monitoring the console output at each step.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到当通过Jenkins运行构建时，断点被激活。此时，焦点将自动从浏览器中的Jenkins切换到Eclipse IDE，在那里我们可以实时检查现有变量的当前值。然后，我们可以通过实时调试值并在每一步监视控制台输出来逐步走过代码。
- en: This is a very handy development feature, and setting up your Jenkins plugin
    development environment in this manner can make things much more productive—and
    your life a lot easier!
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常方便的开发功能，以这种方式设置Jenkins插件开发环境可以使事情更加高效，也可以让您的生活变得更轻松！
- en: Summary
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have built, packaged, and deployed our own "bare-bones"
    Jenkins plugin.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经构建、打包和部署了我们自己的“基本”Jenkins插件。
- en: We have looked at the tools and conventions used to develop Jenkins plugins.
    We have set up Java, Maven, and Eclipse on our development host and learned how
    to build, package, test, deploy, and even debug our own plugin.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了开发Jenkins插件所使用的工具和约定。我们在开发主机上设置了Java、Maven和Eclipse，并学会了如何构建、打包、测试、部署，甚至调试我们自己的插件。
- en: The main thing that we are still missing is what you decide to put in the middle!
    This is what we will concentrate on in the next chapter.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然缺少的主要内容是您决定放在中间的内容！这将是我们下一章的重点。
