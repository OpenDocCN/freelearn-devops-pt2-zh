- en: Chapter 2. Automating the Jenkins UI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。自动化Jenkins UI
- en: In this chapter, we will be looking at a selection of different approaches that
    can be used to alter and enhance the Jenkins **user interface** (**UI**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究一系列不同的方法，可以用来改变和增强Jenkins的**用户界面**（**UI**）。
- en: As with Jenkins as a whole, the Jenkins UI is highly customizable and has been
    clearly designed from the outset to be adaptable and extendable so that you can
    tailor and adapt it to fit your particular requirements and environment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与整个Jenkins一样，Jenkins的UI是高度可定制的，并且从一开始就明确设计为可适应和可扩展，以便您可以根据自己的特定要求和环境进行定制和调整。
- en: There are different ways in which you can customize the UI, ranging from purely
    *look and feel* cosmetic alterations to user input refinements, and then towards
    the automatic creation of Jenkins jobs and setting up a dynamic Slave Node provisioning
    system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的方式可以定制UI，从纯粹的*外观*化妆品改变到用户输入的改进，然后到Jenkins作业的自动创建和设置动态从节点供应系统。
- en: The focus and the most suitable approach is usually driven by the way in which
    Jenkins will be used; focusing on the areas that matter the most in a particular
    situation is usually where the most benefit is to be gained.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 焦点和最合适的方法通常是由Jenkins的使用方式驱动的；通常情况下，关注特定情况中最重要的领域通常是可以获得最大利益的地方。
- en: We will examine four of the most common use case scenarios in this chapter and
    the different ways in which the automation and development of the Jenkins UI could
    be helpful for each case.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究四种最常见的用例场景，以及自动化和开发Jenkins UI对每种情况可能有所帮助的不同方式。
- en: Use case scenario 1 – a large number of jobs
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例场景1 - 大量作业
- en: 'A single Jenkins instance can contain many jobs. The practical limit varies
    widely and depends on multiple factors, such as the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 单个Jenkins实例可以包含许多作业。实际限制因多种因素而异，如下所示：
- en: Hardware resources such as RAM, CPU, disk, and network performance
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件资源，如RAM、CPU、磁盘和网络性能
- en: Slave nodes—how many there are, how they are set up, and their performance
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从节点——有多少个，它们是如何设置的，以及它们的性能
- en: How well the jobs are distributed across the Master and Slave nodes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作在主节点和从节点之间分布得如何
- en: Settings of individual jobs; their size, function, history, and retention
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个别作业的设置；它们的大小、功能、历史和保留
- en: It's not unusual for a Jenkins instance to have over 1,000 jobs, or around 100
    Slave nodes attached to a Master node.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins实例拥有超过1,000个作业或大约100个从节点连接到主节点并不罕见。
- en: Managing the performance load that this causes is a big task in itself, and
    Jenkins also needs to manage the presentation and housekeeping of these jobs—your
    users will not want to look through more than 1,000 jobs just to search for the
    one they need, and we also need to make sure that old jobs are cleaned up or archived
    and that new ones can be created both easily and accurately.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 管理这造成的性能负载本身就是一项艰巨的任务，Jenkins还需要管理这些作业的呈现和清理工作——您的用户不希望浏览超过1,000个作业来搜索他们需要的作业，我们还需要确保旧作业被清理或归档，新作业可以轻松而准确地创建。
- en: If you can reduce the number of jobs you require, then administration and resource
    overheads will be reduced as a result, and performance, usability, and reliability
    will also be increased, and the user experience will be improved.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以减少所需的作业数量，那么管理和资源开销将相应减少，性能、可用性和可靠性也将提高，用户体验也将得到改善。
- en: Some planning and a little automation of the UI can often help us achieve this—let's
    take a look at a few scenarios and the possible solutions.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一些规划和对UI的一点自动化通常可以帮助我们实现这一点——让我们看看一些场景和可能的解决方案。
- en: If the most pressing issue or bottleneck is that there are too many jobs, it
    would be helpful to first understand where the need for all these jobs originates,
    and then see what we can do about alleviating that.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果最紧迫的问题或瓶颈是有太多的作业，首先了解所有这些作业的需求来源，然后看看我们能做些什么来减轻这个问题，将会很有帮助。
- en: Frequently, development teams work in Sprints and/or Releases. This usually
    means having a mainline development stream and one or more branch streams. Often
    this convention will be followed in Jenkins as well—we may want to set up Jenkins
    jobs to build and then deploy Sprint 3 or Release 49 code to integration environments,
    while deploying our mainline changes to CI and development environments. At the
    same time, there may be a logical or business requirement to support a production
    version of *everything*, just in case something goes wrong.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队经常在Sprints和/或Releases中工作。这通常意味着有一个主要的开发流和一个或多个分支流。通常这个惯例也会在Jenkins中遵循——我们可能希望设置Jenkins作业来构建然后部署Sprint
    3或Release 49代码到集成环境，同时将我们的主线更改部署到CI和开发环境。同时，可能有一个逻辑或业务要求来支持*一切*的生产版本，以防出现问题。
- en: This could mean setting up jobs that are named accordingly, such as `Sprint
    3`, and having this value hardcoded in the configuration with a pseudocode, something
    along the lines of *fetch the Sprint 3 war file and deploy it to the Sprint 3
    server…*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能意味着设置相应命名的作业，比如`Sprint 3`，并在配置中硬编码这个值，伪代码大致是*获取Sprint 3战争文件并部署到Sprint 3服务器…*。
- en: These jobs will have a finite (and probably pretty short) life and will then
    need cleaning up or updating with new values for the next Sprint or Release. This
    type of regular and manual maintenance becomes a headache very quickly, which
    further increases the possibility of human error leading to the wrong thing being
    deployed to the wrong place.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工作将有一个有限的（可能相当短的）寿命，然后需要清理或更新为下一个Sprint或Release的新值。这种定期和手动的维护很快就会成为一个头痛的问题，这进一步增加了人为错误导致错误的部署到错误的地方的可能性。
- en: 'One simple solution for this common scenario is to make use of Jenkins Environment
    Variables. If you navigate to **Manage Jenkins** | **Configure System** | **Global
    Properties**, you can create and define your own key-value pairs, which are immediately
    available to every job on any node:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种常见情况的一个简单解决方案是利用Jenkins环境变量。如果您导航到**管理Jenkins** | **配置系统** | **全局属性**，您可以创建和定义自己的键值对，这些键值对立即可用于任何节点上的每个作业：
- en: '![Use case scenario 1 – a large number of jobs](../images/00004.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![用例场景1 - 大量作业](../images/00004.jpeg)'
- en: The preceding screenshot shows a few simplistic examples of the kinds of key-value
    pairs that you may want to set up—they can be whatever you like or need though.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了您可能想设置的几种简单的键值对的示例 - 它们可以是您喜欢或需要的任何内容。
- en: 'Using this approach means that, rather than creating rafts of new jobs per
    Release or Sprint and catering to multiple concurrent Releases that will become
    obsolete shortly, you could just define two or three permanent sets of jobs that
    will pick up the key-value pairs from the location and use these to drive what
    they do—our job configuration pseudocode then changes. Initially, this in the
    form of the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法意味着，与其为每个发布或冲刺创建大量新作业，并为将很快过时的多个并发发布提供支持，您可以只定义两三个永久作业集，这些作业将从该位置获取键值对并使用它们来驱动它们的操作
    - 我们的作业配置伪代码随后发生变化。最初，它采用以下形式：
- en: '*fetch the Sprint 3 war file and deploy it to the Sprint 3 server…*'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*获取Sprint 3 war文件并部署到Sprint 3服务器...*'
- en: 'This changes to something more generic along the lines of this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些变化更通用，类似于以下内容：
- en: '*fetch the ${SPRINT} war file and deploy it to the ${SPRINT} server…*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*获取${SPRINT} war文件并部署到${SPRINT}服务器...*'
- en: This simple alteration to the approach can, in some circumstances, allow you
    to greatly reduce the number of Jenkins jobs by simply (and centrally) updating
    these Environment Variables to the new properties at the required point of your
    development life cycle—for example, at the end of a Release, Sprint, or Iteration
    cycle.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单的方法变通，有时可以让您通过（并集中）更新这些环境变量到开发生命周期所需的新属性的位置，从而大大减少Jenkins作业的数量 - 例如，在发布、冲刺或迭代周期结束时。
- en: 'This one central configuration change will immediately update all of the jobs
    so that they can use these new values, and this approach could be extended to
    include information about many other aspects of build, test, and deployment processes,
    the branch location to checkout and build from, or the environment or host that
    the built artifacts should be deployed to, and so on. The following screenshot
    shows the Console Output page where the change is reflected:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次中心配置更改将立即更新所有作业，以便它们可以使用这些新值，这种方法可以扩展到包括构建、测试和部署过程的许多其他方面的信息，要检出和构建的分支位置，或者构建的构件应该部署到的环境或主机等。下面的截图显示了反映这一变化的控制台输出页面：
- en: '![Use case scenario 1 – a large number of jobs](../images/00005.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![用例场景1 - 大量作业](../images/00005.jpeg)'
- en: If you need to create new jobs per Iteration, there are also ways in which you
    can automate the UI to simplify this process—we can use Jenkins to manage Jenkins.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要为每个迭代创建新作业，还有一些方法可以自动化UI以简化此过程 - 我们可以使用Jenkins来管理Jenkins。
- en: 'If you take a look at your Jenkins home directory on the filesystem (as defined
    by the JENKINS_HOME variable), you will see the structure used to store the settings
    for each Jenkins job: each job is represented by a folder bearing the name of
    the job it represents, with each folder containing an XML file called `config.xml`.
    Each `config.xml` file contains the settings and information for that job.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看文件系统上的Jenkins主目录（由JENKINS_HOME变量定义），您将看到用于存储每个Jenkins作业设置的结构：每个作业由一个以其代表的作业名称命名的文件夹表示，每个文件夹包含一个名为`config.xml`的XML文件。每个`config.xml`文件包含该作业的设置和信息。
- en: There are normally several other files and folders too, such as a file to track
    the number of the next build (`nextBuildNumber`) and folders that are used to
    track and store history and artifacts created by previous builds.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通常还有其他几个文件和文件夹，例如用于跟踪下一个构建的编号的文件（`nextBuildNumber`）和用于跟踪和存储先前构建创建的历史和构件的文件夹。
- en: 'The bare bones of a Jenkins job are, at its most basic form, as simple as this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins作业的基本框架，在其最基本的形式下，就是这样简单：
- en: A folder named after the job—for example, `VeryBasicJob`
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个以作业名称命名的文件夹，例如`VeryBasicJob`
- en: Inside this folder, a file called `config.xml`
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个文件夹里，一个名为`config.xml`的文件
- en: 'Inside this file, some XML along the lines of the following:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个文件里，有一些类似以下的XML：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, this minimal job contains some very simple XML tags and data
    that detail the `<description>` and `<command>` tags, and various other settings
    used by Jenkins.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这个简单的作业包含一些非常简单的XML标签和数据，详细说明了`<description>`和`<command>`标签，以及Jenkins使用的各种其他设置。
- en: 'The Jenkins UI will interpret this folder and the XML file and display the
    **Config** page like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins UI将解释此文件夹和XML文件，并显示**配置**页面如下：
- en: '![Use case scenario 1 – a large number of jobs](../images/00006.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![用例场景1 - 大量作业](../images/00006.jpeg)'
- en: When the source configuration and the frontend UI are seen side-by-side just
    as you can see in the preceding screenshot, it becomes obvious that changing the
    XML file should change the job displayed by the UI and vice-versa.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当源配置和前端UI并排显示时，就像您在前面的截图中看到的那样，很明显，改变XML文件应该改变UI显示的作业，反之亦然。
- en: So if we could automatically create these XML files and load them in to Jenkins
    somehow, we should then also be able to automate and do version control of all
    of our Jenkins jobs and allow end users to apply whatever customization they require
    at runtime, removing the need for manual intervention.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们可以自动创建这些XML文件并以某种方式加载到Jenkins中，那么我们也应该能够自动化并对所有Jenkins作业进行版本控制，并允许最终用户在运行时应用他们需要的任何自定义，从而消除手动干预的需要。
- en: Fetching folder structures and XML files from Version Control, updating these
    XML files with user-selected values, and loading the resultant configuration into
    our Jenkins instance are just the sort of tasks for which Jenkins is the ideal
    tool—we can set up Jenkins to set up Jenkins!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本控制中获取文件夹结构和XML文件，使用用户选择的值更新这些XML文件，并将生成的配置加载到我们的Jenkins实例中，这些都是Jenkins的理想工具-我们可以设置Jenkins来设置Jenkins！
- en: In short, this process can be achieved by first *templating* your XML files—replace
    all references to the variable factors (such as references to **Release**, **Sprint**,
    **Hostnames**, and so on) with something easily identifiable. Then, create the
    Jenkins jobs that enable a user to specify what they would like to use in place
    of these placeholder values.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，首先可以通过*模板化*您的XML文件来实现此过程-将所有对变量因素的引用（例如对**Release**、**Sprint**、**Hostnames**等的引用）替换为易于识别的内容。然后，创建Jenkins作业，使用户能够指定他们想要在这些占位符值的位置使用什么。
- en: The next step is to perform some string replacement (using your preferred tool—**Perl**,
    **Sed**, **Awk**, and so on) to substitute the placeholder values with the user-selected
    ones, and then you just need to load the new configuration into Jenkins at runtime.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是执行一些字符串替换（使用您喜欢的工具-**Perl**、**Sed**、**Awk**等）来用用户选择的值替换占位符值，然后您只需要在运行时将新配置加载到Jenkins中。
- en: 'To demonstrate one possible approach to this, here is a basic functional shell
    script that does the job with comments explaining what''s going on at each step.
    This uses the `Jenkins-cli.jar` file, which you can download and find out more
    about by going to your Jenkins instance and adding `/cli` to the URL, for example:
    `http://myjenkins.instance:8080/cli`.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这种可能的方法，这里有一个基本的功能性shell脚本，它使用注释解释了每个步骤的进行。这使用了`Jenkins-cli.jar`文件，您可以通过转到您的Jenkins实例并在URL中添加`/cli`来下载并了解更多信息，例如：`http://myjenkins.instance:8080/cli`。
- en: Here you will also find detailed help and information on the many features and
    abilities that Jenkins offers.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您还将找到有关Jenkins提供的许多功能和能力的详细帮助和信息。
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This simple example, when set up in a Jenkins job, could be adapted to allow
    your users to create (or clean up) new Jenkins jobs quickly, easily, and reliably
    by pulling templates from version control and allowing the user to select from
    a predefined and valid set of options.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的例子，在Jenkins作业中设置后，可以通过从版本控制中拉取模板并允许用户从预定义的有效选项集中进行选择，从而快速、轻松、可靠地允许用户创建（或清理）新的Jenkins作业。
- en: Use case scenario 2 – multiple hosts
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例场景2-多个主机
- en: The Jenkins UI can also be tailored to help in managing installations that require
    a large numbers of Slave hosts. This may be required to improve the performance
    of builds or test runs by distributing the load to other systems, or wherever
    Jenkins is used to perform functions spanning a multiple-host Operating System—something
    that Jenkins can do very easily through the built-in JNLP functionality.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins UI也可以定制，以帮助管理需要大量Slave主机的安装。这可能需要通过将负载分配到其他系统来改善构建或测试运行的性能，或者在Jenkins用于执行跨多主机操作系统的功能时-这是Jenkins可以通过内置的JNLP功能非常容易地实现的。
- en: Often, testing requirements dictate that a wide variety of different nodes running
    varying combinations of OSes and software are essential—this is common when you
    have an application that needs testing on different versions of Internet Explorer;
    each version requires a different Windows host, as each host can only support
    one version of the browser at a time.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，测试要求决定运行不同操作系统和软件组合的各种不同节点是必不可少的-当您有一个需要在不同版本的Internet Explorer上进行测试的应用程序时，这是很常见的；每个版本都需要一个不同的Windows主机，因为每个主机一次只能支持一个浏览器版本。
- en: Managing multiple and varying Slave Nodes can be problematic; however, the Jenkins
    UI provides several features that can help to simplify and automate this aspect.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 管理多个和不同的Slave节点可能会有问题；然而，Jenkins UI提供了几个功能，可以帮助简化和自动化这一方面。
- en: One of the simplest approaches to manage instances with many Slave nodes is
    to use a Slave labeling scheme and a naming convention that describes the abilities
    or functions that the individual node perform.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 管理具有许多Slave节点的实例的最简单方法之一是使用Slave标记方案和描述单个节点执行的能力或功能的命名约定。
- en: 'To do this, you first need to label your Slave nodes—this can be done as and
    when they are created, or you can go back to existing Slave Nodes and label them
    as desired—note the multiple labels specified in the following Slave definition
    page:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，首先需要对Slave节点进行标记-这可以在创建时进行，也可以返回到现有的Slave节点并根据需要对其进行标记-请注意以下Slave定义页面中指定的多个标签：
- en: '![Use case scenario 2 – multiple hosts](../images/00007.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![用例场景2-多个主机](../images/00007.jpeg)'
- en: As you can see, this simple Slave has been given multiple labels of `tomcat`,
    `java6`, and `integration`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，这个简单的Slave已被赋予`tomcat`、`java6`和`integration`的多个标签。
- en: 'We can now create or amend a job and select the **Restrict where this project
    can be run** option, as shown in the following screenshot:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建或修改一个作业，并选择**限制此项目可以运行的位置**选项，如下面的屏幕截图所示：
- en: '![Use case scenario 2 – multiple hosts](../images/00008.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![用例场景2-多个主机](../images/00008.jpeg)'
- en: If we enter a label that matches one or more existing labels (`integration`
    in this instance), then this job will be run on a node matching this label. In
    cases where there are multiple matches, the job will be run on just one of the
    nodes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们输入与一个或多个现有标签（在这种情况下为`integration`）匹配的标签，那么此作业将在与此标签匹配的节点上运行。在存在多个匹配项的情况下，作业将仅在其中一个节点上运行。
- en: This simple yet extremely powerful UI feature enables you to distribute the
    load across multiple nodes. The nodes may perform different functions, or they
    could be set up with different abilities—the labels can be whatever that helps
    you to decide what is best for your situation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单但非常强大的UI功能使您能够在多个节点之间分配负载。这些节点可以执行不同的功能，或者它们可以具有不同的能力-标签可以是任何有助于您决定对您的情况最好的东西。
- en: You could decide to distinguish between the physical characteristics of your
    nodes, such as those with a large free disk space, more memory or fast processors,
    or ones that have local databases or code deployments at the desired level, or
    with application servers or other supporting tools on them. This way you can not
    only distribute the load, but also maximize performance and reduce turnaround
    time by putting the right jobs on the hosts that are best suited for them, and
    by pooling your resources to fine-tune the response time of the various build
    tasks—getting the urgent tasks turned around as quickly as possible and leaving
    the less urgent jobs queued on a pool of dedicated servers.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以决定区分节点的物理特性，例如具有大量可用磁盘空间、更多内存或快速处理器的节点，或者具有所需级别的本地数据库或代码部署的节点，或者具有应用服务器或其他支持工具的节点。这样，您不仅可以分配负载，还可以通过将适合的作业放在最适合它们的主机上，以及通过汇集资源来优化各种构建任务的响应时间，从而最大化性能并减少周转时间，尽快完成紧急任务，并将不太紧急的作业排队在一组专用服务器上。
- en: 'This approach can be taken further using the Swarm plugin: [https://wiki.jenkins-ci.org/display/JENKINS/Swarm+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Swarm+Plugin).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Swarm插件可以进一步采用这种方法：[https://wiki.jenkins-ci.org/display/JENKINS/Swarm+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Swarm+Plugin)。
- en: This plugin provides an added functionality that enables you to automatically
    provision and connect new Slave Nodes via a UDP broadcast that discovers and connects
    new nodes to the existing Master node, thereby creating an ad hoc cluster that
    you can tailor to meet demands.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 该插件提供了一个额外的功能，可以通过UDP广播自动配置和连接新的从节点，发现并连接新的节点到现有的主节点，从而创建一个临时集群，您可以根据需求进行定制。
- en: You can use this to set things up so that when the build queue reaches a predefined
    threshold, new nodes will be dynamically provisioned and added to the pool of
    available nodes. You need to install the feature on the Master node and use the
    command-line client on the new Slave nodes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用此功能设置当构建队列达到预定义阈值时，新节点将动态配置并添加到可用节点池中。您需要在主节点上安装该功能，并在新的从节点上使用命令行客户端。
- en: Swarm nodes can also be assigned multiple labels at creation time through the
    `-labels` argument in the CLI. These values can additionally be set by the script
    that creates them; for example, the script could check for the existence of a
    local Oracle installation or a high percentage of free disk space and then use
    these results to decide which labels to apply to itself—`database`, `performance`,
    `java6`, `tomcat`, and so on accordingly.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Swarm节点在创建时也可以通过CLI中的`-labels`参数分配多个标签。这些值还可以由创建它们的脚本设置；例如，脚本可以检查本地Oracle安装的存在或大量的可用磁盘空间，然后使用这些结果来决定要应用哪些标签——例如`database`、`performance`、`java6`、`tomcat`等等。
- en: 'Another very powerful tool for dynamic host provisioning and management is
    Docker, and, not surprisingly, there is a Jenkins plugin available for this too:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常强大的动态主机配置和管理工具是Docker，而且，不出所料，Jenkins也有可用的插件：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Docker+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Docker+Plugin)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Docker+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Docker+Plugin)'
- en: Docker allows you to quickly and easily create and manage **Docker Images**
    that run in **Docker Containers**. These are quite similar in practice to virtual
    machines, but are smaller and of lighter weight, and therefore far quicker and
    easier to provision than traditional VMs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Docker允许您快速轻松地创建和管理在Docker容器中运行的Docker镜像。这些在实践中与虚拟机非常相似，但体积更小、更轻，因此比传统虚拟机更快更容易进行配置。
- en: Docker Images can also be version controlled via a **Docker Registry**, which
    works like a Git or Subversion repository for virtual machines; you can pull an
    existing Image from the Docker Index and update it to suit your requirements (as
    you would for a virtual machine—performing tasks such as deploying Tomcat, installing
    and configuring Apache, uploading some scripts, adding a version of Java, or installing
    Jenkins). Once you have customized your image, you can optionally push/publish
    it back to the index in exactly the same state that you created but under a new
    name, thus creating a template Slave that you can provision both rapidly and reliably
    to any platform that runs Docker. You can even run Docker on virtual machines—the
    possibilities that this approach provides are very interesting, and we will look
    at this in a little more detail in [Chapter 9](part0061_split_000.html#1Q5IA2-497efea050ab4b7582c7e2ed4ba920ee
    "Chapter 9. Putting Things Together") *Putting Things Together*.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Docker镜像也可以通过**Docker Registry**进行版本控制，它类似于虚拟机的Git或Subversion仓库；您可以从Docker Index中拉取现有的镜像，并更新以满足您的需求（就像为虚拟机执行任务一样——执行任务，如部署Tomcat，安装和配置Apache，上传一些脚本，添加Java的版本，或安装Jenkins）。一旦您定制了您的镜像，您可以选择将其推送/发布回到索引中，状态与您创建时完全相同，但名称不同，从而创建一个模板从节点，您可以快速可靠地配置到运行Docker的任何平台。甚至可以在虚拟机上运行Docker——这种方法提供的可能性非常有趣，我们将在[第9章](part0061_split_000.html#1Q5IA2-497efea050ab4b7582c7e2ed4ba920ee
    "第9章。将事物放在一起") *将事物放在一起*中更详细地讨论这一点。
- en: Use case scenario 3 – helping your users through UI automation
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例场景3 - 通过UI自动化帮助用户
- en: Customizing and automating the Jenkins user interface can help and empower users
    of your Jenkins instance to help themselves.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 定制和自动化Jenkins用户界面可以帮助并赋予您的Jenkins实例的用户自助帮助。
- en: By ensuring that it is possible only for your users to input valid data, we
    can greatly reduce the risk of invalid input and the resulting issues, which should
    improve the user experience too.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过确保只有用户能够输入有效数据，我们可以大大减少无效输入和由此产生的问题的风险，这也应该改善用户体验。
- en: The most common way to do this is to validate the user input at runtime. For
    example, if your job prompts the user to enter a day of the week or a build number,
    you may assign this to a variable called something like `$WEEKDAY` or `$MY_BUILD_NUM`
    respectively.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '这样做的最常见方式是在运行时验证用户输入。例如，如果您的作业提示用户输入一周中的某一天或一个构建编号，您可以分别将其分配给一个名为`$WEEKDAY`或`$MY_BUILD_NUM`的变量。 '
- en: We can then set up our job to ensure that the supplied user data is valid—if
    the value of `$WEEKDAY` is not a valid day of the week, or the user has supplied
    the build number as `Build Two` instead of an integer value that we may have been
    hoping for, we can cause the build to fail with an error message explaining what
    the user has done wrong and how to correct it, rather than allowing our job to
    carry on regardless and letting it attempt to perform a function or create something
    that we know to be invalid.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以设置我们的作业以确保提供的用户数据是有效的——如果`$WEEKDAY`的值不是一周中的有效日期，或者用户提供的构建编号是`Build Two`而不是我们希望的整数值，我们可以导致构建失败，并显示错误消息解释用户做错了什么以及如何纠正，而不是让我们的作业继续进行并让它尝试执行我们知道是无效的功能或创建某些东西。
- en: 'It is also good practice and generally helpful for all concerned if you can
    let your users know what you expect—this is easily done by setting the description
    next to the input box like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以让用户知道您的期望，这也是一个良好的做法，对所有相关方都有帮助——通过在输入框旁边设置描述，可以轻松实现这一点：
- en: '![Use case scenario 3 – helping your users through UI automation](../images/00009.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![用例场景3-通过UI自动化帮助用户](../images/00009.jpeg)'
- en: At runtime, this configuration will provide the user with a description of what
    we would like them to enter, and by setting a default value of 0, we can give
    them another hint.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，此配置将向用户提供我们希望他们输入的描述，并通过设置默认值为0，我们可以给他们另一个提示。
- en: This Jenkins job could then check that the value of `$MY_BUILD_NUM` is (as we'd
    hoped and requested) a numerical value greater than zero and less than 101, and
    then we can be reasonably happy that things are ok to continue.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这个Jenkins作业可以检查`$MY_BUILD_NUM`的值（正如我们所希望和请求的那样）是否大于零且小于101，然后我们可以相当确信事情可以继续进行。
- en: 'It is often much safer to take the next logical step and restrict the options
    that are left open to the users. This further reduces the risks and also makes
    the experience nicer for the users—they may only run certain jobs occasionally,
    and expecting them to remember what you want may be a bit much to ask at times.
    This can be achieved by presenting them with a list of valid options and ensuring
    that they pick one of them:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通常更安全的做法是采取下一个逻辑步骤，并限制用户可以选择的选项。这进一步减少了风险，也让用户体验更好——他们可能只偶尔运行某些作业，期望他们记住你想要的内容有时可能有点过分要求。这可以通过向他们呈现一系列有效选项并确保他们选择其中之一来实现：
- en: '![Use case scenario 3 – helping your users through UI automation](../images/00010.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![用例场景3-通过UI自动化帮助用户](../images/00010.jpeg)'
- en: 'The preceding information will be presented to the user at runtime like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上述信息将在运行时向用户呈现如下：
- en: '![Use case scenario 3 – helping your users through UI automation](../images/00011.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![用例场景3-通过UI自动化帮助用户](../images/00011.jpeg)'
- en: This approach should hopefully be much more robust—so long as we remember to
    check that the value of ${WEEKDAY} is not equal to **Please Select…** before we
    attempt to use it!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法应该会更加健壮，只要我们记得在尝试使用它之前检查${WEEKDAY}的值是否等于**请选择...**！
- en: This approach can be extended further by pulling in data from other sources
    and dynamically building up the options that are available to the user at runtime.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可以通过从其他来源获取数据并在运行时动态构建用户可用的选项来进一步扩展。
- en: Another useful and more powerful example is the ability to populate a selection
    list with the values derived from current Subversion Tags.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用且更强大的例子是能够使用当前Subversion标签的值填充选择列表。
- en: This can be done through the **List Subversion Tags (and more)** option for
    parameterized builds. This allows you to present the user with a current list
    of available tags to select from—as an example, these tags could be created by
    other Jenkins jobs and may contain a list of candidate builds that the user can
    select from, to have a build deployed to an environment.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过参数化构建的**列出Subversion标签（等等）**选项来实现。这允许您向用户呈现当前可用标签的列表供选择——例如，这些标签可以由其他Jenkins作业创建，并且可能包含用户可以选择的候选构建列表，以便将构建部署到环境中。
- en: 'Suppose you have a Subversion repository with the following structure:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个具有以下结构的Subversion存储库：
- en: '`https://subversionrepo/mainproject/tags/Build_12.56`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://subversionrepo/mainproject/tags/Build_12.56`'
- en: '`https://subversionrepo/mainproject/tags/Build_14.78`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://subversionrepo/mainproject/tags/Build_14.78`'
- en: '`https://subversionrepo/mainproject/tags/Build_18.20`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://subversionrepo/mainproject/tags/Build_18.20`'
- en: In this case, the user will be presented with a drop-down menu offering a choice
    of one of these three builds.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，用户将看到一个下拉菜单，提供这三个构建中的一个选择。
- en: 'The option that the user selects is assigned at runtime to the variable that
    you created, say `$BUILD_TO_DEPLOY`, and your job can then use this selection
    to check out the requested build and deploy it using the SVN URL combined with
    the user''s preferred option:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 用户选择的选项在运行时分配给您创建的变量，比如`$BUILD_TO_DEPLOY`，然后您的作业可以使用此选择来检出请求的构建并使用SVN URL与用户的首选选项部署它：
- en: '`https://subversionrepo/mainproject/tags/${BUILD_TO_DEPLOY}`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://subversionrepo/mainproject/tags/${BUILD_TO_DEPLOY}`'
- en: This functionality is provided as a part of the Subversion plugin, which is
    now a part of the core Jenkins build.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能作为Subversion插件的一部分提供，现在是核心Jenkins构建的一部分。
- en: There are many other plugins and features that you can use to structure and
    improve your UI experience—the built-in Jenkins **Views** functionality allows
    you to create a dynamic list of jobs matching your criteria. This can be expressed
    as a simple regular expression so that all the matching jobs will be presented
    in one view. This works especially well when combined with a sensible naming convention
    for jobs.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他插件和功能可以用来构建和改进您的用户界面体验 - 内置的Jenkins **Views**功能允许您创建一个动态列表，其中列出符合您条件的作业。这可以表示为一个简单的正则表达式，以便所有匹配的作业都将显示在一个视图中。当与合理的作业命名约定结合使用时，这种方法特别有效。
- en: Other approaches that may improve the user experience include setting up pipelines
    that manage job execution and flow. By setting up processes that the user can
    initiate easily, which will then carry on to work through a sequence of other
    jobs, the user only needs to trigger the first of several actions, like knocking
    over a line of dominoes, rather than trigger each build after checking that the
    previous build has completed and checking its stated output.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 其他可能改善用户体验的方法包括设置管理作业执行和流程的流水线。通过设置用户可以轻松启动的流程，然后继续执行一系列其他作业，用户只需要触发几个动作中的第一个，就像推倒多米诺骨牌一样，而不是在检查前一个构建是否已完成并检查其输出后触发每个构建。
- en: This can be achieved by simply using the built-in **Build other projects** option
    under **Post-Build Actions** for each job to create a simple sequence. Using the
    various trigger options, we can fine-tune things slightly so that certain jobs
    will stop the process if they have an issue, or can be set to carry on regardless,
    if appropriate.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过简单地使用每个作业下的内置**构建其他项目**选项来实现一个简单的序列。使用各种触发选项，我们可以微调一些东西，以便某些作业在出现问题时停止流程，或者在适当时继续进行。
- en: If you would like to add more options, there are plenty of plugins readily available
    to help you. The Build Pipeline plugin offers some useful features, and the Join
    plugin can be incredibly useful. If you would like to run multiple jobs concurrently,
    then wait for them to complete before continuing and triggering the next job—as
    ever, there's a Jenkins plugin for most occasions!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想添加更多选项，有许多插件可以帮助您。Build Pipeline插件提供了一些有用的功能，Join插件也非常有用。如果您想同时运行多个作业，然后等待它们完成后继续并触发下一个作业
    - 像往常一样，Jenkins插件几乎适用于所有场合！
- en: Use case scenario 4 – UI tweaks
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例场景4 - UI调整
- en: Sometimes Jenkins is set up and then left running in the background doing its
    thing; it's rarely checked upon or looked at unless things go wrong, and users
    are happy that things get done.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 有时Jenkins被设置好后就在后台运行，很少被检查或查看，除非出了问题，用户们都很满意事情得以完成。
- en: On other occasions, the Jenkins UI is used heavily by many people at the same
    time, all of whom will inevitably have their own requirements and priorities,
    and then the look and feel of Jenkins becomes a high priority.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他情况下，Jenkins用户界面被许多人同时大量使用，所有这些人都不可避免地会有自己的需求和优先事项，然后Jenkins的外观和感觉就成了一个高优先级。
- en: There are many ways in which you can give the users what they want, including
    setting up numerous views, each providing a different user or group with a view
    of the (Jenkins) world that suits them.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以满足用户的需求，包括设置多个视图，每个视图为不同的用户或组提供适合他们的（Jenkins）世界的视图。
- en: '![Use case scenario 4 – UI tweaks](../images/00012.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![用例场景4 - UI调整](../images/00012.jpeg)'
- en: Using the simple `.*job.*` regular expression ensures that all jobs (both present
    and future) that contain the string `"job"` in their title will be displayed on
    this view. Again, this really relies on a decent naming convention being followed,
    but if this is done, it can reduce the maintenance requirements of this aspect
    to nothing—when a new matching job is created, it's automatically added to the
    view.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用简单的`.*job.*`正则表达式确保所有包含字符串“job”在其标题中的作业（现有和未来的）都将显示在此视图中。同样，这确实依赖于一个合理的命名约定，但如果这样做了，它可以将此方面的维护要求减少到零
    - 当创建一个新的匹配作业时，它会自动添加到视图中。
- en: Plugins that provide further enhancements in this area include the Personal
    View plugin; as its name suggests, it enables users to create and manage their
    own view of the world, view **Job Filters**, and allows further tweaking. The
    **Chosen Views Tab** bar is helpful if you end up having too many Views and want
    to easily manage all of them on one screen!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个领域提供进一步增强的插件包括Personal View插件；正如其名称所示，它使用户能够创建和管理自己的世界视图，查看**作业过滤器**，并允许进一步调整。**Chosen
    Views Tab**栏非常有用，如果您最终拥有太多视图并希望轻松管理所有视图在一个屏幕上！
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the ways in which the user interface can be altered
    to suit your requirements. We looked at a few common issues and reviewed some
    possible approaches that could be used to alleviate them.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了用户界面可以如何改变以满足您的需求。我们研究了一些常见问题，并审查了一些可能用于缓解这些问题的方法。
- en: As you have seen, the Jenkins user interface is extremely powerful, and much
    of this power comes from its flexibility and extensibility.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，Jenkins用户界面非常强大，其中很大一部分力量来自于其灵活性和可扩展性。
- en: Adapting the Jenkins user interface to address whatever use case applies to
    your environment can make a massive difference to the success of your Jenkins
    installation. At the same time, it also makes the user experience much more positive
    and can guide your users to interact with Jenkins in a mutually beneficial way.
    When it's easy for people to find what they want and hard for them to make mistakes
    (for example, due to runtime validation, dynamically populated forms, and automatically-created
    suites of jobs), you should have happier users and a more robust and efficient
    Jenkins too.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 调整Jenkins用户界面以适应您环境中适用的任何用例，可以极大地改善Jenkins安装的成功。同时，它也可以使用户体验更加积极，并引导用户以互惠互利的方式与Jenkins进行交互。当人们很容易找到他们想要的东西，很难犯错（例如，由于运行时验证、动态填充的表单和自动创建的作业套件），您应该会拥有更快乐的用户和更健壮、高效的Jenkins。
- en: The in-built functionality of Jenkins can often provide enough flexibility to
    address whatever your most pressing Jenkins UI issues are; however, the wealth
    of available plugins allows you to quite easily take things much further should
    you wish to.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins的内置功能通常可以提供足够的灵活性来解决您最紧迫的Jenkins用户界面问题；然而，丰富的可用插件使您可以很容易地进一步扩展功能，如果您愿意的话。
- en: In chapters 6 and 7, we will revisit this topic in more detail when we look
    at extending the Jenkins user interface ourselves. We will see how you can develop
    and add your own customized GUI items directly to the Jenkins user interface,
    allowing you to extend things even further using Jelly, your own plugins, and
    the provided Jenkins extension points.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在第6和第7章，当我们自己查看扩展Jenkins用户界面时，我们将更详细地重新讨论这个话题。我们将看到如何开发并直接将自定义的GUI项目添加到Jenkins用户界面，使您能够使用Jelly、自己的插件和提供的Jenkins扩展点进一步扩展功能。
