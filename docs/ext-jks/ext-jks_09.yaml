- en: Chapter 9. Putting Things Together
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。把事情放在一起
- en: In this chapter, we will take a look at a selection of ways in which Jenkins
    can be extended by combining it with other languages, tools, and software.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下Jenkins如何通过与其他语言、工具和软件结合来进行扩展。
- en: 'In doing so, we will take a look at the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样做的过程中，我们将看一下以下主题：
- en: Using the Jenkins script console
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jenkins脚本控制台
- en: Developing with Groovy, Grails, and Gradle
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Groovy、Grails和Gradle进行开发
- en: Jenkins and Docker—Jenkins in Docker and Docker in Jenkins
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins和Docker——Jenkins在Docker中，Docker在Jenkins中
- en: Building Android applications with Jenkins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jenkins构建Android应用程序
- en: Building iOS applications with Jenkins
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jenkins构建iOS应用程序
- en: Covering all of these topics in detail is out of the scope of this book, but
    we will introduce the topics, explain the basic setup, and provide links for further
    information. This should provide a good enough overview and enable you to get
    started with using Jenkins with these technologies. Also, it may provide some
    ideas for extending your Jenkins setup to incorporate other tools and technologies.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 详细介绍所有这些主题超出了本书的范围，但我们将介绍这些主题，解释基本设置，并提供进一步信息的链接。这应该提供足够的概述，并使你能够开始使用Jenkins与这些技术。此外，它可能提供一些扩展你的Jenkins设置以整合其他工具和技术的想法。
- en: The Jenkins script console and Groovy
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins脚本控制台和Groovy
- en: The inbuilt script console is a very useful and powerful Jenkins extension and
    ideally suits certain types of tasks. This simple but powerful built-in web console
    allows you to run Groovy scripts on your Jenkins instance (or its slave nodes)
    from directly within the user interface, and is installed as standard.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的脚本控制台是一个非常有用和强大的Jenkins扩展，并且非常适合某些类型的任务。这个简单但功能强大的内置Web控制台允许你在用户界面中直接运行Jenkins实例（或其从节点）上的Groovy脚本，并且是标准安装。
- en: 'To access the console, either navigate to **Manage Jenkins** and then select
    **Script Console**, or simply append `/script` to your Jenkins host and port,
    like this for example:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问控制台，可以导航到**管理Jenkins**，然后选择**脚本控制台**，或者简单地将`/script`附加到你的Jenkins主机和端口，例如：
- en: '`http://jenkinshost:8080/script`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://jenkinshost:8080/script`'
- en: You should then be presented with a page similar to the following. This contains
    some introductory information and a link to the website [http://www.groovy-lang.org/](http://www.groovy-lang.org/)
    for further details on Groovy, the language that the script console uses.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你会看到一个类似下面的页面。这个页面包含一些介绍信息和一个链接到网站[http://www.groovy-lang.org/](http://www.groovy-lang.org/)，以获取有关Groovy的更多详细信息，这是脚本控制台使用的语言。
- en: '![The Jenkins script console and Groovy](../images/00072.jpeg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins脚本控制台和Groovy](../images/00072.jpeg)'
- en: 'This provided link is from the Jenkins home page:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个提供的链接来自Jenkins主页：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Script+Console](https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Script+Console)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Script+Console](https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Script+Console)'
- en: It provides a useful collection of example scripts to show you how this works
    in order to get you started.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了一系列有用的示例脚本，以向你展示这是如何工作的，以便让你开始。
- en: These example scripts cover a wide range of functions and are mostly focused
    on general Jenkins admin and housekeeping tasks—tasks that this tool suits very
    well due to its ease of use and flexibility. Using this interface, you can quickly
    and easily insert and edit code in a web page, run it with the click of a button,
    and see immediate results. There are no compilation steps or external dependencies
    to worry about.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例脚本涵盖了各种功能，并且大多集中在一般的Jenkins管理和日常任务上——这些任务非常适合这个工具，因为它易于使用且灵活。使用这个界面，你可以快速、轻松地在网页中插入和编辑代码，点击按钮运行它，并立即看到结果。没有编译步骤或外部依赖需要担心。
- en: 'For example, copying this Groovy code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，复制这个Groovy代码：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After entering the example script at [https://wiki.jenkins-ci.org/display/JENKINS/Display+timer+triggers](https://wiki.jenkins-ci.org/display/JENKINS/Display+timer+triggers)
    into the console and hitting **Run** will return the expected results—the details
    of all the scheduled jobs on this Jenkins instance (assuming you have some set
    up):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台输入示例脚本[https://wiki.jenkins-ci.org/display/JENKINS/Display+timer+triggers](https://wiki.jenkins-ci.org/display/JENKINS/Display+timer+triggers)并点击**Run**将返回预期的结果——这个Jenkins实例上所有计划任务的细节（假设你已经设置了一些）：
- en: '![The Jenkins script console and Groovy](../images/00073.jpeg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins脚本控制台和Groovy](../images/00073.jpeg)'
- en: As you can see from this very simple example and the Groovy website, the Groovy
    language is aimed at Java developers and has a very flat learning curve. It is
    an extremely powerful tool and is well suited for certain tasks. It is often used
    in situations where developing and managing your own plugin is more than you really
    want or need. A simple Groovy script that can be run and altered on the fly can
    often be a better option for these tasks.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从这个非常简单的例子和Groovy网站上看到的，Groovy语言面向Java开发人员，学习曲线非常平缓。它是一个非常强大的工具，非常适合某些任务。它经常用于开发和管理自己的插件超出了你真正想要或需要的情况。一个简单的Groovy脚本，可以随时运行和修改，通常是这些任务的更好选择。
- en: You can also create jobs that execute system Groovy scripts. These run within
    the Jenkins JVM, and therefore have access to the Jenkins internal objects and
    can interact with them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以创建执行系统Groovy脚本的作业。这些作业在Jenkins JVM内运行，因此可以访问Jenkins内部对象并与其交互。
- en: This example details the setting up of a Groovy job that monitors the status
    of your slave nodes, refer to [http://www.donaldsimpson.co.uk/2013/06/07/monitoring-jenkins-slave-nodes-with-groovy/](http://www.donaldsimpson.co.uk/2013/06/07/monitoring-jenkins-slave-nodes-with-groovy/)
    for more details.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子详细介绍了设置一个Groovy作业来监视你的从节点的状态，更多细节请参考[http://www.donaldsimpson.co.uk/2013/06/07/monitoring-jenkins-slave-nodes-with-groovy/](http://www.donaldsimpson.co.uk/2013/06/07/monitoring-jenkins-slave-nodes-with-groovy/)。
- en: 'The crux of this approach is the following simple Groovy code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的关键是以下简单的Groovy代码：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When added to a Jenkins job and run via a scheduled task, the Groovy code should
    exit with an error status whenever one or more of your existing slaves are offline,
    with the output being something along these lines:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当添加到Jenkins作业并通过计划任务运行时，Groovy代码应该在您现有的一个或多个从节点离线时以错误状态退出，输出应该是这样的：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This could obviously be extended to then perform whatever follow-up actions
    you want, for example, sending out an e-mail alert, or performing some other function
    (such as attempting to restart the slave or bringing a replacement slave online).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这显然可以扩展到执行您想要的任何后续操作，例如，发送电子邮件警报，或执行其他功能（例如，尝试重新启动从节点或将替代从节点上线）。
- en: 'This link demonstrates an approach for automatically restarting offline slave
    nodes—it''s written in Groovy too:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此链接演示了一种自动重新启动离线从节点的方法——它也是用Groovy编写的：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Monitor+and+Restart+Offline+Slaves](https://wiki.jenkins-ci.org/display/JENKINS/Monitor+and+Restart+Offline+Slaves)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Monitor+and+Restart+Offline+Slaves](https://wiki.jenkins-ci.org/display/JENKINS/Monitor+and+Restart+Offline+Slaves)'
- en: Jenkins' built-in support for Groovy allows you to quickly and easily develop
    powerful custom scripts for your own needs. The Jenkins script console home page
    also details how you can run Groovy scripts remotely, and provides a list of available
    Jenkins plugins that use and support the Groovy language. These can be set up
    to allow you to run Groovy scripts as part of your builds.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins对Groovy的内置支持允许您快速轻松地为自己的需求开发强大的自定义脚本。Jenkins脚本控制台主页还详细介绍了如何远程运行Groovy脚本，并提供了一系列可用的Jenkins插件，这些插件使用和支持Groovy语言。这些可以设置为允许您在构建的一部分中运行Groovy脚本。
- en: Groovy and Gradle as alternatives
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Groovy和Gradle作为替代方案
- en: If you are interested in Groovy, you can also use this language and a combination
    of other tools to create your own plugins—you don't have to stick to Java and
    Maven if you don't want to.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对Groovy感兴趣，您也可以使用这种语言和其他工具的组合来创建自己的插件——如果您不想的话，您不必坚持使用Java和Maven。
- en: 'This page explains how to modify your project to use a `build.gradle` file
    in place of the Maven POM file that we used previously:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本页解释了如何修改您的项目以使用`build.gradle`文件来替代我们之前使用的Maven POM文件：
- en: '[http://jenkins-ci.org/content/gradle-fy-your-jenkins-plugin-project](http://jenkins-ci.org/content/gradle-fy-your-jenkins-plugin-project)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://jenkins-ci.org/content/gradle-fy-your-jenkins-plugin-project](http://jenkins-ci.org/content/gradle-fy-your-jenkins-plugin-project)'
- en: You can then execute commands such as `gradle jpi`, `gradle check`, `gradle
    install`, and so on to build and manage the plugin life cycle without Maven.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以执行诸如`gradle jpi`、`gradle check`、`gradle install`等命令来构建和管理插件生命周期，而无需使用Maven。
- en: 'This CloudBees presentation illustrates the use of Groovy instead of Java for
    the plugin itself:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个CloudBees演示说明了使用Groovy而不是Java来编写插件本身：
- en: '[https://www.cloudbees.com/event/topic/groovy-way-write-jenkins-plugin](https://www.cloudbees.com/event/topic/groovy-way-write-jenkins-plugin)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.cloudbees.com/event/topic/groovy-way-write-jenkins-plugin](https://www.cloudbees.com/event/topic/groovy-way-write-jenkins-plugin)'
- en: This is an increasingly popular approach due to the power and simplicity of
    Groovy. It also explains how you can replace Jelly with Groovy—using the same
    language (Gradle is based on Groovy, so… it's all Groovy!) throughout the development
    process makes a lot of sense.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种越来越受欢迎的方法，因为Groovy的强大和简单。它还解释了如何用Groovy替换Jelly——在整个开发过程中使用相同的语言（Gradle基于Groovy，所以...都是Groovy！）是非常有意义的。
- en: Jenkins and Docker
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins和Docker
- en: Docker is an application that enables you to package an application along with
    all of its dependencies into a single unit (a Docker **container**) that can be
    version controlled and deployed in an easy and standardized way.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一种应用程序，它使您可以将应用程序及其所有依赖项打包成一个单一单元（Docker **容器**），可以进行版本控制并以一种简单和标准化的方式部署。
- en: 'The Docker home page explains how Docker works and how to install and use it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Docker主页解释了Docker的工作原理以及如何安装和使用它：
- en: '[https://www.docker.com/what-docker](https://www.docker.com/what-docker).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.docker.com/what-docker](https://www.docker.com/what-docker)。'
- en: Conceptually, Docker containers are similar to lightweight virtual machines,
    but they have some fundamental architectural differences that make them more lightweight
    and more efficient, as illustrated by the following Docker and virtual machine
    comparison diagrams.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，Docker容器类似于轻量级虚拟机，但它们具有一些基本的架构差异，使它们更轻量级和更高效，如下所示的Docker和虚拟机比较图所示。
- en: 'The following figure shows a normal virtual machine:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了一个正常的虚拟机：
- en: '![Jenkins and Docker](../images/00074.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins and Docker](../images/00074.jpeg)'
- en: 'The following figure shows a Docker container:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了一个Docker容器：
- en: '![Jenkins and Docker](../images/00075.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins and Docker](../images/00075.jpeg)'
- en: Docker containers can be published and managed with every change recorded. They
    are like highly efficient VMs managed under a version control system that provides
    functions similar to Git. They are also highly configurable and offer flexible
    and scalable deployment processes.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器可以发布和管理，每次更改都会记录。它们就像高效的VM一样，受版本控制系统管理，提供类似Git的功能。它们还具有高度可配置性，并提供灵活和可扩展的部署过程。
- en: In addition to the auditing and ease of use, there is also a guarantee that
    containers will be (and behave) exactly the same on any environment that is capable
    of running Docker.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 除了审计和易用性之外，还有一个保证，即容器在任何能够运行Docker的环境中都将是（并且行为）完全相同的。
- en: This can remove many of the environmental discrepancies that are normally associated
    with modern software development, eliminating the old *well, it works on my machine*
    syndrome, and the subtle variances between (supposedly identical) environments
    that sometimes cause serious and hard-to-detect issues.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以消除许多通常与现代软件开发相关的环境差异，消除了旧的“嗯，它在我的机器上可以运行”的综合症，以及（假定相同的）环境之间的微妙差异，有时会导致严重且难以检测的问题。
- en: Like Jenkins, Docker is extremely flexible, incredibly powerful, and highly
    extendable. Not surprisingly, they work extremely well together.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与Jenkins一样，Docker非常灵活、功能强大且高度可扩展。毫不奇怪，它们在一起工作得非常好。
- en: There are many ways in which you can combine and leverage the power of Docker
    and Jenkins. These approaches typically mean using either **Docker in Jenkins**
    or **Jenkins in Docker**.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以结合和利用Docker和Jenkins的功能。这些方法通常意味着使用**Jenkins中的Docker**或**Docker中的Jenkins**。
- en: Docker in Jenkins
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jenkins中的Docker
- en: Using the Docker plugin for Jenkins ([https://wiki.jenkins-ci.org/display/JENKINS/Docker+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Docker+Plugin)),
    you can set up Jenkins jobs that can perform a guaranteed *clean build* every
    time in a fresh and known-good Docker container.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Jenkins的Docker插件（[https://wiki.jenkins-ci.org/display/JENKINS/Docker+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Docker+Plugin)），您可以设置Jenkins作业，每次都可以在一个新的已知良好的Docker容器中执行保证的*干净构建*。
- en: This can be done by dynamically provisioning a new slave node for the job to
    run on (pulled from a version-controlled **Docker** **Hub**).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过为作业动态供应一个新的从属节点来完成（从版本控制的**Docker** **Hub**中拉取）。
- en: The build or tests can then be run on this environment, and the results can
    be recorded and archived. The entire environment can then be deleted with the
    guarantee that, should you ever wish to, combining that very Docker container
    with the same version of the deployed code will recreate exactly the same results
    at any future date and on any environment.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以在这个环境中运行构建或测试，并记录和存档结果。整个环境随后可以被删除，并保证，如果您愿意的话，将来任何日期和任何环境中，与部署代码的相同版本的Docker容器组合将会重新创建完全相同的结果。
- en: Jenkins in Docker
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker中的Jenkins
- en: We have previously looked at several different ways to set up and manage your
    Jenkins server. We have also stressed the importance of storing your Jenkins configuration
    in a version control system, and ensuring that you can recover from issues without
    losing data.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经看过了几种不同的设置和管理Jenkins服务器的方法。我们还强调了将Jenkins配置存储在版本控制系统中的重要性，并确保您可以在不丢失数据的情况下解决问题。
- en: Extending Jenkins to take advantage of Docker enables you to rapidly and easily
    create (or recreate) your own Jenkins environment from a known-good snapshot.
    Simply by setting up and maintaining your Jenkins server within a Docker-managed
    container, you immediately gain all the advantages and abilities that Docker offers.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将Jenkins扩展到利用Docker的能力可以让您快速、轻松地从已知良好的快照中创建（或重新创建）自己的Jenkins环境。只需在Docker管理的容器中设置和维护Jenkins服务器，您立即就能获得Docker提供的所有优势和功能。
- en: 'A popular, readymade Docker container for this approach is the CloudBees one
    here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的一个受欢迎的现成Docker容器在这里是CloudBees的一个：
- en: '[https://github.com/jenkinsci/docker](https://github.com/jenkinsci/docker)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/jenkinsci/docker](https://github.com/jenkinsci/docker)'
- en: 'Once you have Docker installed and set up on your environment, all you need
    to do is run this command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在环境中安装并设置了Docker，您只需要运行这个命令：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `Dockerfile` on the following GitHub page details how this container is
    built and some of the many alternative approaches and options that you can use
    and adapt:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下GitHub页面上的`Dockerfile`详细说明了如何构建此容器以及您可以使用和调整的许多替代方法和选项：
- en: '[https://github.com/jenkinsci/docker/blob/master/Dockerfile](https://github.com/jenkinsci/docker/blob/master/Dockerfile)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/jenkinsci/docker/blob/master/Dockerfile](https://github.com/jenkinsci/docker/blob/master/Dockerfile)'
- en: Once you have Jenkins running in Docker, you can make any changes that you may
    want, and then publish a snapshot of your altered version under your own account
    on the Docker Hub, effectively version controlling the entire setup. If you prefer,
    you can even create and maintain your own local version of the Docker Hub (running
    on Docker, of course) and publish/pull your own images to and from there.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在Docker中运行Jenkins，您可以进行任何您想要的更改，然后在Docker Hub上的您自己的帐户下发布您修改后的版本的快照，有效地对整个设置进行版本控制。如果您愿意，您甚至可以创建和维护您自己的Docker
    Hub本地版本（当然是在Docker上运行），并将您自己的图像发布/拉取到那里。
- en: Docker containers do not persist their data once the container itself dies—you
    need to save the state and publish it. As mentioned on the GitHub page though,
    you can set up persistent storage by mounting data volumes from the local filesystem
    (that is, a specified folder on the host running Docker). The contents of these
    folders (which could contain configuration information, public keys, or plugin
    data for example) can be pulled from and managed by version control too. Alternatively,
    you can create your own dedicated volume container that would allow you to manage
    all of the persistent data within another Docker container. This can also be version
    controlled and attached to your Jenkins containers as and when required.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器在容器本身死亡后不会保留其数据-您需要保存状态并发布它。尽管在GitHub页面上提到，您可以通过从本地文件系统（即运行Docker的主机上的指定文件夹）挂载数据卷来设置持久存储。这些文件夹的内容（可能包含配置信息、公钥或插件数据等）也可以从版本控制中拉取和管理。或者，您可以创建自己的专用卷容器，允许您在另一个Docker容器中管理所有持久数据。这也可以进行版本控制，并在需要时附加到您的Jenkins容器上。
- en: 'You can also set up your Jenkins slaves to run on dynamically provisioned Docker
    slaves. There are a number of Jenkins plugins for doing this, and as this is a
    rapidly evolving technology, there are bound to be many more, for example, this
    plugin:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以设置Jenkins从属以在动态供应的Docker从属上运行。有许多Jenkins插件可以做到这一点，由于这是一种快速发展的技术，肯定会有更多的插件，例如这个插件：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Docker+Slaves+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Docker+Slaves+Plugin)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Docker+Slaves+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Docker+Slaves+Plugin)'
- en: 'This detailed post on creating Jenkins slave Docker images for dynamic provisioning
    is available at:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇关于为动态供应创建Jenkins从属Docker镜像的详细帖子可以在以下链接找到：
- en: '[https://developer.jboss.org/people/pgier/blog/2014/06/30/on-demand-jenkins-slaves-using-docker](https://developer.jboss.org/people/pgier/blog/2014/06/30/on-demand-jenkins-slaves-using-docker)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.jboss.org/people/pgier/blog/2014/06/30/on-demand-jenkins-slaves-using-docker](https://developer.jboss.org/people/pgier/blog/2014/06/30/on-demand-jenkins-slaves-using-docker)'
- en: These are just a few of the (currently) most common ways of combining Jenkins
    and Docker; there are many other possibilities and more are bound to evolve soon.
    You could, for example, run your main Jenkins instance inside a Docker container
    and have it run Jenkins jobs that create other Docker containers to run your tests
    and builds, which in turn could use Docker containers!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是目前最常见的几种结合Jenkins和Docker的方式；还有许多其他可能性，而且很快可能会有更多可能性。例如，您可以在Docker容器中运行主要的Jenkins实例，并让它运行创建其他Docker容器来运行您的测试和构建的Jenkins作业，然后这些Docker容器可以使用Docker容器！
- en: There is even a **Docker in Docker** project, which allows you to create and
    manage Docker containers from inside Docker containers… many interesting possibilities!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至还有一个**Docker in Docker**项目，允许您从Docker容器内部创建和管理Docker容器...许多有趣的可能性！
- en: Jenkins and Android
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins和Android
- en: 'Jenkins can, with the help of an SDK and a few plugins, be set up to automate
    the building, deployment, testing, and publishing of Android applications. To
    build Android applications, you need the Android software development kit, which
    you can download from:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins可以借助SDK和一些插件来自动构建、部署、测试和发布Android应用程序。要构建Android应用程序，您需要Android软件开发工具包，可以从以下网址下载：
- en: '[http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html)'
- en: 'When it is downloaded, extract the archive to a local directory. Then edit
    and add the following environment variables to your system:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 下载后，将存档解压到本地目录。然后编辑并添加以下环境变量到您的系统：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once this is done, update the SDK and verify that your Jenkins user has read
    and execute permissions on the SDK executable files.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，更新SDK并验证您的Jenkins用户对SDK可执行文件具有读取和执行权限。
- en: 'To run an Android emulator as part of your build process, add this plugin to
    your Jenkins server:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要在构建过程中运行Android模拟器，请将此插件添加到您的Jenkins服务器：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Android+Emulator+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Android+Emulator+Plugin)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Android+Emulator+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Android+Emulator+Plugin)'
- en: 'Note that this will attempt to install an Android SDK for you if it doesn''t
    find one. It''s often preferable to set up the SDK, as per your requirement, in
    advance though. You can disable the autoinstall attempt through the **Automatically
    install Android components when required** option on the **Manage Jenkins** settings
    page, and specify which SDK it should use here:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果找不到Android SDK，这将尝试为您安装Android SDK。尽管如此，最好根据您的要求提前设置SDK。您可以通过**在需要时自动安装Android组件**选项在**管理Jenkins**设置页面上禁用自动安装尝试，并在此处指定应使用哪个SDK：
- en: '![Jenkins and Android](../images/00076.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins和Android](../images/00076.jpeg)'
- en: 'As described in the Android emulator plugin instructions, you should then be
    able to create a new Jenkins job that runs an Android emulator during the build
    with whatever hardware and software specification you would like to use. You can
    specify the memory, screen size and resolution, OS version, and so on, as shown
    here:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如Android模拟器插件说明中所述，您应该能够创建一个新的Jenkins作业，在构建过程中运行Android模拟器，并使用您想要使用的任何硬件和软件规格。您可以指定内存、屏幕大小和分辨率、操作系统版本等，如下所示：
- en: '![Jenkins and Android](../images/00077.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins和Android](../images/00077.jpeg)'
- en: '(Source: https://wiki.jenkins-ci.org/download/attachments/43712988/android_job-custom.png?version=1&modificationDate=1270447137000)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: (来源：https://wiki.jenkins-ci.org/download/attachments/43712988/android_job-custom.png?version=1&modificationDate=1270447137000)
- en: 'Your Jenkins job can then proceed to install your recently compiled application
    using the Android `adb` command-line tool, like this for example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Jenkins作业随后可以继续使用Android `adb`命令行工具安装您最近编译的应用程序，例如：
- en: '[PRE5]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Alternatively, you can specify a new build step that will (re)install the APK
    for you, as shown in the following diagram:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以指定一个新的构建步骤，将为您重新安装APK，如下图所示：
- en: '![Jenkins and Android](../images/00078.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins和Android](../images/00078.jpeg)'
- en: (Image taken from https://wiki.jenkins-ci.org/download/attachments/43712988/android_install-package.png?version=1&modificationDate=1299432099000)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: (图片来自https://wiki.jenkins-ci.org/download/attachments/43712988/android_install-package.png?version=1&modificationDate=1299432099000)
- en: After the application is deployed, you can include an additional test step to
    run the Android Monkey Tester tool. This will run your tests against the latest
    APK running on the Android emulator, which will emulate whatever hardware and
    software specifications you have selected. It's often useful to set up multiple
    jobs to ensure that your tests cover all the combinations and permutations of
    hardware and software that your users may have.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 应用部署后，您可以包括一个额外的测试步骤来运行Android Monkey Tester工具。这将针对Android模拟器上运行的最新APK运行您的测试，该模拟器将模拟您选择的任何硬件和软件规格。通常有用的是设置多个作业，以确保您的测试覆盖用户可能拥有的所有硬件和软件组合和排列。
- en: 'There is also a Jenkins plugin that enables you to automatically publish and
    roll out your built application to the Google Play store:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个Jenkins插件，可以使您自动将构建的应用程序发布和推出到Google Play商店：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Google+Play+Android+Publisher+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Google+Play+Android+Publisher+Plugin)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Google+Play+Android+Publisher+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Google+Play+Android+Publisher+Plugin)'
- en: 'For further details on building, deploying, and testing Android applications
    with Jenkins, this link is a great place to start:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在Jenkins中构建、部署和测试Android应用程序的更多详细信息，请从这个链接开始：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Building+an+Android+app+and+test+project](https://wiki.jenkins-ci.org/display/JENKINS/Building+an+Android+app+and+test+project)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Building+an+Android+app+and+test+project](https://wiki.jenkins-ci.org/display/JENKINS/Building+an+Android+app+and+test+project)'
- en: Jenkins and iOS
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins和iOS
- en: Your Jenkins setup and scope can also be extended to build iOS projects in a
    very similar way to the preceding steps for Android. The general idea is the same;
    install and configure an SDK (XCode for iOS), add the required Jenkins plugin,
    build and deploy the application on an emulator, run the tests against it, and
    record the outcome.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Jenkins设置和范围也可以类似地扩展到构建iOS项目，方法与前面的Android步骤非常相似。总体思路是一样的；安装和配置SDK（iOS的XCode），添加所需的Jenkins插件，构建并部署应用程序到模拟器上，对其运行测试，并记录结果。
- en: However, one important distinction for iOS builds is that you need an OS X host
    to run it on. This host can be set up as a Jenkins slave node though, with your
    iOS-based Jenkins jobs set to run on that node only.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，iOS构建的一个重要区别是您需要在OS X主机上运行它。不过，这个主机可以设置为Jenkins的从节点，您的基于iOS的Jenkins作业只能在该节点上运行。
- en: 'The host will need a local installation of XCode, which is available here:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 主机需要本地安装XCode，可以在这里获取：
- en: '[https://developer.apple.com/xcode/download/](https://developer.apple.com/xcode/download/)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://developer.apple.com/xcode/download/](https://developer.apple.com/xcode/download/)'
- en: Or it is available from within the Apple App Store.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 或者可以在Apple App Store中获取。
- en: 'This Jenkins page covers the installation and setup process in detail:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Jenkins页面详细介绍了安装和设置过程：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Xcode+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Xcode+Plugin)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Xcode+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Xcode+Plugin)'
- en: 'And here are a few additional links for further information on iOS and Jenkins:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些有关iOS和Jenkins的进一步信息的附加链接：
- en: '[http://savvyapps.com/blog/continuous-integration-ios-jenkins](http://savvyapps.com/blog/continuous-integration-ios-jenkins)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://savvyapps.com/blog/continuous-integration-ios-jenkins](http://savvyapps.com/blog/continuous-integration-ios-jenkins)'
- en: '[https://www.built.io/blog/2014/10/how-to-set-up-customized-jenkins-for-ios/](https://www.built.io/blog/2014/10/how-to-set-up-customized-jenkins-for-ios/)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.built.io/blog/2014/10/how-to-set-up-customized-jenkins-for-ios/](https://www.built.io/blog/2014/10/how-to-set-up-customized-jenkins-for-ios/)'
- en: '[http://blog.pivotal.io/labs/labs/ios-ci-jenkins](http://blog.pivotal.io/labs/labs/ios-ci-jenkins)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://blog.pivotal.io/labs/labs/ios-ci-jenkins](http://blog.pivotal.io/labs/labs/ios-ci-jenkins)'
- en: '[http://youandthegang.com/2015/continuous-integration-delivery-with-jenkins/](http://youandthegang.com/2015/continuous-integration-delivery-with-jenkins/)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://youandthegang.com/2015/continuous-integration-delivery-with-jenkins/](http://youandthegang.com/2015/continuous-integration-delivery-with-jenkins/)'
- en: Keeping your Jenkins version and plugins up to date
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持您的Jenkins版本和插件更新
- en: As with all modern software, it is important to keep your Jenkins version and
    plugins up to date.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有现代软件一样，保持您的Jenkins版本和插件更新是很重要的。
- en: 'You can subscribe to plugin release notifications via RSS here: [http://feeds.feedburner.com/JenkinsPluginReleases](http://feeds.feedburner.com/JenkinsPluginReleases)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过此处的RSS订阅插件发布通知：[http://feeds.feedburner.com/JenkinsPluginReleases](http://feeds.feedburner.com/JenkinsPluginReleases)
- en: 'Otherwise, you can subscribe here: [https://jenkins-ci.org/releases.rss](https://jenkins-ci.org/releases.rss)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以在这里订阅：[https://jenkins-ci.org/releases.rss](https://jenkins-ci.org/releases.rss)
- en: 'You can follow Jenkins release notifications on Twitter at this link: [https://twitter.com/jenkins_release](https://twitter.com/jenkins_release)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Twitter上关注Jenkins发布通知，链接在这里：[https://twitter.com/jenkins_release](https://twitter.com/jenkins_release)
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: From the brief introductions and examples in this chapter, we have seen how
    easily Jenkins can be extended and adapted to work and integrate with other languages
    and technologies, taking advantage of what they offer and allowing you to set
    up processes that work the way you want and need them to. Combining Jenkins with
    other tools enables you to create powerful and flexible build processes for a
    wide variety of projects and purposes.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章的简要介绍和示例中，我们已经看到了Jenkins如何轻松扩展和适应其他语言和技术，利用它们提供的优势，并允许您设置按您希望和需要的方式工作的流程。将Jenkins与其他工具结合使用，可以为各种项目和目的创建强大而灵活的构建流程。
- en: Jenkins integrates well with these technologies (and many others), largely due
    to its inherent flexibility and extensibility, its wealth of plugins, and the
    vibrant development, support, and user community.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins与这些技术（以及许多其他技术）很好地集成在一起，这在很大程度上归功于其固有的灵活性和可扩展性，其丰富的插件，以及充满活力的开发、支持和用户社区。
- en: Throughout this book, we have explored many different ways in which Jenkins
    can be adapted and extended to perform whatever functions you would like, from
    leveraging APIs, interacting through IDEs, and adapting the user interface to
    developing your own plugin, creating and using extension points, to embracing
    and leveraging new and emerging technologies.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们探讨了许多不同的方式，Jenkins可以被调整和扩展以执行您想要的任何功能，从利用API，通过IDE进行交互，调整用户界面到开发自己的插件，创建和使用扩展点，以及拥抱和利用新兴技术。
- en: Hopefully, these topics and skills will encourage and empower you to find new
    and interesting ways to leverage the power of Jenkins for your own projects.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这些主题和技能能够鼓励和赋予您发现利用Jenkins为您自己的项目提供动力和有趣方式的能力。
