- en: Chapter 5. Extension Points
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。扩展点
- en: In this chapter, we will introduce and explore the theory and design concepts
    used while developing Jenkins plugins. We will cover the high-level concepts here
    with some generic examples as a preparation for the next two chapters where we
    will see how to implement these ideas for real.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍并探讨开发Jenkins插件时使用的理论和设计概念。我们将在这里涵盖高层概念，并提供一些通用示例，作为下两章的准备，我们将看到如何为实际情况实现这些想法。
- en: 'In this chapter, we will take a look at the following design patterns:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下设计模式：
- en: Interfaces
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口
- en: Abstract classes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽象类
- en: Singletons
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单例
- en: 'Also, we will review several important design concepts:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将回顾几个重要的设计概念：
- en: Design by contract
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 契约设计
- en: Extension points
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展点
- en: Creating extensions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建扩展
- en: Annotations
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注解
- en: A brief history of Jenkins plugins
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins插件的简要历史
- en: There are thousands of plugins available for Jenkins, and they cover a vast
    range of tasks and provide a wealth of valuable resources for the community that
    uses and works with Jenkins. Many of the existing plugins started out by providing
    simple functions and offering limited functionalities, but the majority of them
    have grown and developed into very mature software that offers large degrees of
    functionality. Many plugins have also been incorporated into Jenkins core functionality—turning
    them from an additional and optional add-on component to code that is shipped
    within Jenkins by default.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins有数千个可用的插件，涵盖了广泛的任务范围，并为使用和使用Jenkins的社区提供了丰富的宝贵资源。许多现有的插件最初提供了简单的功能并提供了有限的功能，但其中大多数已经发展成为非常成熟的软件，提供了大量的功能。许多插件也已经并入了Jenkins核心功能，将它们从额外的可选附加组件转变为默认情况下随Jenkins一起提供的代码。
- en: A major part of the reason for the success of Jenkins and its range of plugins
    is the design philosophy that was used to develop and extend Jenkins from the
    beginning. This approach to software development has encouraged people to work
    together, enabled projects to benefit from each other, and created a highly productive
    and collaborative community of developers and contributors to this project.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins插件的成功及其插件范围的主要原因之一是一开始用于开发和扩展Jenkins的设计理念。这种软件开发方法鼓励人们共同合作，使项目能够从彼此中受益，并创建了一个高度富有成效和协作的开发者和贡献者社区。
- en: 'When you first look at developing your own plugin for Jenkins, there are several
    questions you should first address—the following link gives a detailed description
    of the steps you should take before embarking on developing your own new plugin:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当您首次考虑为Jenkins开发自己的插件时，您应该首先解决几个问题——以下链接提供了在着手开发自己的新插件之前应采取的步骤的详细描述：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Before+starting+a+new+plugin](https://wiki.jenkins-ci.org/display/JENKINS/Before+starting+a+new+plugin)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Before+starting+a+new+plugin](https://wiki.jenkins-ci.org/display/JENKINS/Before+starting+a+new+plugin)'
- en: The intention behind this is to improve the quality of the plugins and to avoid
    duplication. This approach seeks to encourage developers of both existing and
    future or proposed plugins to work together and build upon the existing functionality
    rather than have a plethora of very similar plugins, all doing something slightly
    different.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这背后的意图是提高插件的质量并避免重复。这种方法旨在鼓励现有和未来或拟议的插件的开发者共同合作，并在现有功能的基础上构建，而不是拥有大量非常相似的插件，每个插件都做一些略有不同的事情。
- en: If you are looking for some additional functionality that is not available in
    the current list of plugins, it is possible that someone might be working on providing
    this feature right now. If you publicize your requirements and intentions within
    the development community, this might save you a lot of time and trouble. Instead
    of rolling your own, you could instead offer to collaborate on the development
    of this new plugin. The end result of this collaboration is more likely to produce
    a popular and high-quality product than two developers creating a similar functionality.
    It's also possible that you will find a vast majority of the functionality that
    you are seeking already available within a related plugin, and with a little information
    and collaboration, you may be able to leverage this to add a new feature by reusing
    much of the existing code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在寻找当前插件列表中不可用的一些附加功能，有可能有人正在努力提供此功能。如果您在开发社区中公布您的需求和意图，这可能会为您节省大量时间和麻烦。您可以选择与其他开发人员合作开发这个新插件，而不是自己动手。这种合作的最终结果更有可能产生受欢迎和高质量的产品，而不是两个开发人员创建类似功能。您还可能会发现您正在寻找的大部分功能已经在相关插件中可用，并且通过一些信息和合作，您可能能够利用这些功能来重用大部分现有代码来添加新功能。
- en: All of this collaboration, code reuse, and enhancement are achieved largely
    through the use of **Extension Points**, which represent some aspect of the functionality
    of either a plugin or of Jenkins. These are interfaces and abstract classes that
    enable interaction and reuse between different plugins and the Jenkins core functionality
    through declared and publicized entry points that provide and perform services
    to a documented contract.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些协作、代码重用和增强主要是通过使用**扩展点**来实现的，这些扩展点代表插件或Jenkins功能的某些方面。这些是接口和抽象类，它们通过声明和公开的入口点实现交互和重用，提供并执行服务以符合文档化的合同。
- en: We will now take a quick look at the theory behind these ideas so that when
    we write our own plugin, we will understand what is going on behind the scenes
    and why we are doing things with this reuse and extension in mind from the start.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将快速了解这些想法背后的理论，这样当我们编写自己的插件时，我们将了解幕后发生了什么，以及为什么我们从一开始就要考虑重用和扩展。
- en: Interfaces
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接口
- en: Interfaces in Java are the mechanisms used to provide and declare a **contract**
    that defines how to interact with and reuse an existing software. The main idea
    behind this approach is that it removes the requirement of knowing how things
    are done internally; you only need to know what the required input parameters
    should be and what to expect by calling an interface. Exactly what the internal
    workings of the code are and how the processing is done are not really important,
    and as long as you adhere to the declared contract, everything should be ok.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Java中的接口是用来提供和声明**合同**的机制，该合同定义了如何与和重用现有软件进行交互。这种方法背后的主要思想是，它消除了对内部工作方式的了解要求；您只需要知道所需的输入参数应该是什么，以及通过调用接口可以期望得到什么。代码的内部工作原理和处理方式并不是真正重要的，只要您遵守声明的合同，一切都应该没问题。
- en: Another major benefit of this "design by contract" approach is that it reduces
    the impact of code and process updates on external users. For example, if you
    call an `add` interface on a class called `calculator` that takes two numbers
    and returns the result, you (as a consumer of this service) do not need to know
    or care how the addition is done—internally, the class could be simply adding
    the two Java integers together, or perhaps the input variables are being passed
    over to a web service in the cloud somewhere, which returns the answer back to
    the `calculator`. The code and the approach used could be completely redesigned
    and rewritten in any way the developers of the `calculator` desire, but as long
    as everyone sticks to the agreed contract and interface, external consumers should
    not be affected.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这种“按合同设计”的方法的另一个主要好处是，它减少了代码和流程更新对外部用户的影响。例如，如果您在名为`calculator`的类上调用一个`add`接口，该接口接受两个数字并返回结果，您（作为此服务的消费者）不需要知道或关心加法是如何完成的——在内部，该类可能只是简单地将两个Java整数相加，或者输入变量可能被传递到云中的Web服务，该服务将答案返回给`calculator`。代码和使用的方法可以完全重新设计和重写，但只要每个人都遵守约定的合同和接口，外部消费者就不应受到影响。
- en: This clearly-defined interface also makes it easier to write automated regression
    tests. When you know there is a clearly-defined and stable interface, it is usually
    simple to write tests against it that will not require much maintenance, as the
    interface is not normally likely to be changed. These tests can be automatically
    rerun as part of the CI build whenever there is a related code change, and any
    discrepancy should be easily identified.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这种明确定义的接口还使得编写自动回归测试变得更加容易。当您知道有一个明确定义和稳定的接口时，通常可以简单地针对它编写测试，这些测试不需要太多的维护，因为接口通常不太可能被更改。这些测试可以在相关代码更改时作为CI构建的一部分自动重新运行，任何差异都应该很容易被识别。
- en: 'To create an interface in Java, we use the **interface** keyword in the class
    definition:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Java中创建一个接口，我们在类定义中使用**interface**关键字：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For an external class to use this interface, we use the **implements** keyword
    in the class declaration, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要使外部类使用这个接口，我们在类声明中使用**implements**关键字，如下所示：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As the `Motorbike` class has declared that it implements `Vehicle`, it will
    need to implement each of the methods that are declared in `Vehicle`. The Java
    compiler will ensure that this is done at compile time. For our `Vehicle` example,
    the methods would probably include logical functions, such as start, stop, turn
    left, turn right, brake, and accelerate. The `Motorbike` class-specific methods
    could include specifics, such as "pop a wheelie", extending the kickstand, falling
    over, and so forth.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`Motorbike`类声明实现了`Vehicle`，它将需要实现在`Vehicle`中声明的每个方法。Java编译器将确保在编译时完成这些操作。对于我们的`Vehicle`示例，这些方法可能包括逻辑函数，例如启动、停止、左转、右转、刹车和加速。`Motorbike`类特定的方法可能包括特定的内容，例如“飙车”，伸展支架，倒下等。
- en: Abstract classes
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象类
- en: Abstract classes in Java provide a high-level functionality that can be used
    by other classes as well. You can't create an abstract class directly, but you
    can implement another class that derives from the abstract class.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Java中的抽象类提供了可以被其他类使用的高级功能。您不能直接创建抽象类，但可以实现从抽象类派生的另一个类。
- en: The simplest explanation is that an abstract class is a type of a thing, but
    is not a thing—by this, I mean that you can have an abstract class like our `Vehicle`
    example that declares all of the methods that we mentioned, but you can't ever
    create just a vehicle—you have to have something specific, such as a car, motorbike,
    hovercraft, helicopter, and so on; you can't have just a generic vehicle.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的解释是，抽象类是一种类型的东西，但不是一个具体的东西——我的意思是，您可以有一个像我们的`Vehicle`示例那样声明了我们提到的所有方法的抽象类，但您永远不能只创建一个车辆——您必须有一些具体的东西，例如汽车、摩托车、气垫船、直升机等；您不能只有一个通用的车辆。
- en: All of our vehicles are slightly different, but share the same base functionality—they
    can go, they can stop, and they can turn. This common set of functionalities could,
    therefore, be modeled as base methods of an abstract (`Vehicle`) class, and whenever
    you create a new type of vehicle, you will have all of them available to you.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的车辆都略有不同，但共享相同的基本功能——它们可以行驶，可以停止，可以转弯。因此，这一共同的功能集可以被建模为抽象（`Vehicle`）类的基本方法，每当您创建一种新类型的车辆时，您将可以使用所有这些方法。
- en: 'To create an abstract class in Java, you have to use the `abstract` keyword:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Java中创建一个抽象类，您必须使用`abstract`关键字：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Typically, an abstract class will define the methods (go, stop, turn) only,
    and the subclasses will provide their actual implementation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，抽象类只会定义方法（行驶、停止、转弯），而子类将提供它们的实际实现。
- en: 'Our `Motorbike` class would then extend this abstract class:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Motorbike`类将扩展这个抽象类。
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The subclasses that extend the abstract classes are known as **concrete classes**:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展抽象类的子类被称为**具体类**：
- en: '![Abstract classes](../images/00033.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![抽象类](../images/00033.jpeg)'
- en: Unlike the conceptual and logical grouping of abstract classes, these represent
    real, tangible objects.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 与抽象类的概念和逻辑分组不同，这些代表真实的、有形的对象。
- en: Abstraction and interfaces
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象和接口
- en: Extension points make use of both abstraction and interfaces to permit and encourage
    reuse of functionality.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展点利用抽象和接口来允许和鼓励功能的重用。
- en: In the following diagram, **Deposit Money** declares an extension point called
    **Transfer to savings**. If we consider this to be an existing piece of code,
    and for the sake of this example, if we want to create a new **Savings Account**
    object, we can extend the functionality already provided by Deposit Money and
    use this to implement a new feature called Savings Account, which extends Deposit
    Money. This means that it will use most of the Deposit Money functionality, and
    it will also offer additional functionality of its own.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，**存款**声明了一个名为**转账到储蓄**的扩展点。如果我们将其视为现有的代码，并且为了举例，如果我们想要创建一个新的**储蓄账户**对象，我们可以扩展已提供的存款功能，并使用它来实现一个名为储蓄账户的新功能，它扩展了存款。这意味着它将使用大部分存款功能，并且还将提供自己的附加功能。
- en: '![Abstraction and interfaces](../images/00034.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![抽象和接口](../images/00034.jpeg)'
- en: 'In another example, we are extending the existing `Open Account` code to `Add
    Joint Account Holder`. This uses many of the `Open Account` methods, but also
    declares some methods that are specific to a second applicant. The following diagram
    shows the relations:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个例子中，我们将现有的`开户`代码扩展到`添加联名账户持有人`。这使用了许多`开户`方法，但也声明了一些特定于第二申请人的方法。以下图表显示了关系：
- en: '![Abstraction and interfaces](../images/00035.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![抽象和接口](../images/00035.jpeg)'
- en: In cases where we have more than one application, we can extend Open Account
    to create a new **Add Joint Account Holder** object. This new object will contain
    and reuse a lot of the Open Account code, but it will do so slightly differently
    to cater to a secondary account holder.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们有多个应用程序的情况下，我们可以扩展开户来创建一个新的**添加联名账户持有人**对象。这个新对象将包含并重用大部分开户代码，但它将以稍微不同的方式来满足第二个账户持有人的需求。
- en: Abstract types are a key concept in Java programming and in object-orientated
    design, in general. They are sometimes referred to as **existential** types, which
    help to reinforce what they are—*types of a thing* but without the required implementation
    or properties to actually be *a thing*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象类型是Java编程和面向对象设计中的一个关键概念。它们有时被称为**存在**类型，这有助于强调它们是*一种东西*，但没有必要的实现或属性来实际成为*一种东西*。
- en: Singletons
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单例
- en: Before we move on from the high-level and design theory topic and take a look
    at implementing extensions in Jenkins, there is one more Java design pattern that
    we still need to cover—the Singleton pattern.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们从高级和设计理论主题转移到在Jenkins中实现扩展之前，还有一个Java设计模式我们需要涵盖——单例模式。
- en: Singletons are used when you want to ensure that there will only be either zero
    or one instance of a given class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当您希望确保给定类只有零个或一个实例时，可以使用单例。
- en: Typically, this pattern occurs when you need to control concurrent actions—by
    ensuring that there is only a maximum of one instance possible, we can be sure
    that we will not face any concurrency or race conditions, as this class (and its
    code) will *definitely* be the only possible instance at any given time. Usually,
    a Singleton will be used by many different functions, and its purpose is to handle
    and manage this demand safely.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当您需要控制并发操作时会出现这种模式——通过确保只有一个实例可能，我们可以确保不会面临任何并发或竞争条件，因为这个类（和它的代码）将*绝对*是任何给定时间的唯一可能实例。通常，一个单例将被许多不同的函数使用，其目的是安全地处理和管理这种需求。
- en: A common Singleton example is a logging utility. For example, a class that takes
    a message from several different areas of a system at any point in time. It then
    opens a log file and appends the message to the file. We wouldn't want two classes
    writing to the same log file at the same time—that would cause chaos and end horribly—so
    control and access is managed by and restricted to a maximum of one instance of
    the class. This instance will be guaranteed to have ownership and free rein to
    write to the log files, and it will be safe in the knowledge that there is no
    other instance of the same class doing the same thing at the same time—it manages
    the "write this information to the log file" function safely.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的单例示例是日志记录实用程序。例如，一个从系统的几个不同区域随时接收消息的类。然后它打开一个日志文件并将消息附加到文件中。我们不希望两个类同时写入同一个日志文件——那将引起混乱并且最终会以悲剧结束——因此控制和访问由该类的最多一个实例进行管理和限制。这个实例将被保证拥有并自由地写入日志文件，并且它将安全地知道没有其他相同类的实例在同时做同样的事情——它安全地管理“将这些信息写入日志文件”的功能。
- en: Each section of code that wishes to use the "write to log file" method will
    attempt to initialize the Singleton object. If an instance of this object already
    exists, we will reuse this, and if currently there is no instance, one will be
    created. It will then remain available for other users until the program exists,
    or it is cleaned up.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 希望使用“写入日志文件”方法的代码部分将尝试初始化单例对象。如果该对象的实例已经存在，我们将重用它，如果当前没有实例，将创建一个实例。然后它将保持可用，直到程序退出，或者被清理。
- en: 'A Singleton instantiation is managed via a private constructor so that only
    the code inside the Singleton can create it, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 单例实例化是通过私有构造函数进行管理的，以便只有单例内部的代码才能创建它，如下所示：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is known as Eager instantiation, as we will create a new Singleton object
    every time prior to invoking the `getInstance()` method.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为急切实例化，因为我们将在调用`getInstance()`方法之前每次创建一个新的单例对象。
- en: 'The alternative approach to this—and which one you use depends on your preferences
    and requirements—is to use Lazy instantiation, as shown here:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对此的另一种方法——你使用哪种取决于你的偏好和要求——是使用延迟实例化，如下所示：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, we have used a static Singleton instance and synchronized the `getInstance()`
    method. Comparing the two approaches should help you to decide the best approach
    for your needs. In UML, a Singleton can be documented like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了一个静态的单例实例，并同步了`getInstance()`方法。比较这两种方法应该有助于您决定最适合您需求的方法。在UML中，可以这样记录一个单例：
- en: '![Singletons](../images/00036.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![Singletons](../images/00036.jpeg)'
- en: Declaring an extension in Jenkins
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Jenkins中声明一个扩展
- en: As we have seen so far, creating an interface or an abstract class is simple
    once we understand the logic behind them. It's easier to declare an interface
    or an abstract class, and then implement the required functionality.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们迄今所见，一旦我们理解了它们背后的逻辑，创建一个接口或抽象类就很简单。声明一个接口或抽象类，然后实现所需的功能会更容易。
- en: Creating a Singleton is also straightforward once you understand when to use
    each design pattern and which approach suits your requirements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您了解何时使用每种设计模式以及哪种方法适合您的要求，创建一个单例也很简单。
- en: If we keep this model in mind when creating or adding components to a Jenkins
    plugin, we should be able to identify appropriate opportunities where it would
    be helpful to expose an interface and create an extension point for others to
    use. For example, if you are working on a plugin that for some reason transforms
    the history of a Jenkins job in to a CSV file so that it can be exported and analyzed
    in a spreadsheet, you will be writing functions to turn some data in to CSV values—this
    could be declared as an extension point, and as long as the data passed is of
    the specified type, others can reuse your code to convert their data to CSV too,
    rather than everyone implementing the same functions, which would cause needless
    duplication.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在创建或添加组件到Jenkins插件时牢记这一模式，我们应该能够确定适当的机会，可以在那里公开一个接口并为其他人创建一个扩展点以供使用。例如，如果您正在开发一个插件，出于某种原因将Jenkins作业的历史转换为CSV文件，以便可以导出并在电子表格中进行分析，您将编写函数将一些数据转换为CSV值——这可以声明为一个扩展点，只要传递的数据是指定类型的，其他人就可以重用您的代码将其数据转换为CSV，而不是每个人都实现相同的函数，这将导致不必要的重复。
- en: To define or create an extension in Jenkins, we use the `@Extension` annotation
    type.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Jenkins中定义或创建一个扩展，我们使用`@Extension`注释类型。
- en: This annotation is picked up by Jenkins, and the new extension will be added
    to an `ExtensionList` object, where the extension can then be found via `ExtensionFinder`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins会捕获这个注释，并将新的扩展添加到一个`ExtensionList`对象中，然后可以通过`ExtensionFinder`找到该扩展。
- en: 'More details on the extension annotation can be found here: [http://javadoc.jenkins-ci.org/?hudson/Extension.html](http://javadoc.jenkins-ci.org/?hudson/Extension.html).'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有关扩展注释的更多细节可以在这里找到：[http://javadoc.jenkins-ci.org/?hudson/Extension.html](http://javadoc.jenkins-ci.org/?hudson/Extension.html)。
- en: 'The following example shows the declaration for an `Animal` extension point:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了`Animal`扩展点的声明：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This illustrates an abstract class that implements `ExtensionPoint`: [https://wiki.jenkins-ci.org/display/JENKINS/Defining+a+new+extension+point](https://wiki.jenkins-ci.org/display/JENKINS/Defining+a+new+extension+point).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这说明了一个实现`ExtensionPoint`的抽象类：[https://wiki.jenkins-ci.org/display/JENKINS/Defining+a+new+extension+point](https://wiki.jenkins-ci.org/display/JENKINS/Defining+a+new+extension+point)。
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the concepts behind several major design patterns
    and saw when you would use each approach and why you would do so.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了几种主要设计模式背后的概念，并看到了何时使用每种方法以及为什么这样做。
- en: If you are an experienced Java programmer, these concepts should be very familiar,
    and if not, then hopefully this will serve as a foundation that will help you
    to understand not only what we are doing in the subsequent chapters, but also
    why we are doing it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是一位经验丰富的Java程序员，这些概念应该非常熟悉，如果不是，那么希望这将成为一个基础，不仅帮助您理解我们在随后章节中所做的事情，也帮助您理解我们为什么这样做。
- en: In the beginning of this chapter, we touched upon the philosophy behind plugin
    development—that people should seek to collaborate, reuse, and extend existing
    code to provide new functionality whenever possible. If everyone went off and
    created their own plugins for their own particular needs, rather than collaborating
    and contributing to existing efforts, there would be massive duplication and replication,
    and the quality would be far poorer as a result.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我们提到了插件开发背后的哲学——人们应该寻求合作，重用和扩展现有的代码，以尽可能提供新的功能。如果每个人都单独创建自己特定需求的插件，而不是合作和贡献到现有的努力中，就会出现大量重复和复制，结果质量会大大降低。
- en: This ethos and the preceding design approach has created a community of plugin
    developers who produce high quality software by providing a vast array of functionality
    that enables Jenkins users to adapt and extend Jenkins to perform an incredibly
    diverse number of tasks.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这种理念和前述的设计方法已经创造了一个插件开发者社区，他们通过提供大量功能来生产高质量的软件，使Jenkins用户能够适应和扩展Jenkins以执行非常多样化的任务。
- en: In the next chapter, we will build upon this knowledge and see the concepts
    that we have covered here being used for real when we develop our first Jenkins
    plugin.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将在这些知识的基础上构建，并看到我们在开发第一个Jenkins插件时使用的概念。
