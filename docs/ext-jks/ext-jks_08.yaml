- en: Chapter 8. Testing and Debugging Jenkins Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。测试和调试Jenkins插件
- en: In this chapter, we will take a look at the testing and debugging of Jenkins
    plugins. We will explore several popular options and approaches that are currently
    available, and we will review the benefits and suitability of each approach.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下Jenkins插件的测试和调试。我们将探讨目前可用的几种流行选项和方法，并审查每种方法的好处和适用性。
- en: Testing Jenkins plugins is reasonably straightforward if you are happy to simply
    run standard Java Unit tests, but if you wish to test and mimic interactions via
    the user interface, testing can become a little bit more involved. We will start
    off with a simple example and then look at some of the approaches and tools you
    may want to investigate further for more complex scenarios.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意简单地运行标准的Java单元测试，那么测试Jenkins插件就相当简单，但是如果您希望通过用户界面测试和模拟交互，测试可能会变得有点复杂。我们将从一个简单的例子开始，然后再看一些您可能希望进一步调查的方法和工具，以应对更复杂的情况。
- en: Being able to debug a Jenkins plugins is a valuable addition to your development
    skills—it can help you understand what is going on with your own plugin while
    you are developing it, and it can also help you to resolve issues in other plugins
    or Jenkins itself.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 能够调试Jenkins插件是您开发技能的宝贵补充—它可以帮助您了解在开发自己的插件时发生了什么，并且还可以帮助您解决其他插件或Jenkins本身的问题。
- en: 'In this chapter, we will take a look at the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下以下主题：
- en: 'Testing: Under Testing, we''ll cover the following topics:'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试：在测试下，我们将涵盖以下主题：
- en: Running tests for an existing project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为现有项目运行测试
- en: Writing your own tests
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写您自己的测试
- en: Available tools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用工具
- en: Techniques—HTML scraping, Mocking, and so on
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术—HTML抓取，模拟等
- en: 'Debugging: Under Debugging, we''ll cover the following topics:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试：在调试下，我们将涵盖以下主题：
- en: Standard log files
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准日志文件
- en: Using the local Jenkins debug session
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用本地Jenkins调试会话
- en: Connecting from an IDE
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从IDE连接
- en: The `mvnDebug` command
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mvnDebug`命令'
- en: Running tests with Maven
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven运行测试
- en: When we were exploring plugin development earlier, we learned where to find
    and how to fetch the source code for any given Jenkins plugin.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们早些时候探索插件开发时，我们学会了在哪里找到并如何获取任何给定Jenkins插件的源代码。
- en: The full source code for most plugins can be quickly and easily downloaded from
    GitHub and then built on your local machine. In many cases, this also includes
    Unit tests, which are bundled with the source code and can be found in the expected
    (by Maven convention) location of `src/test`. Examining a selection of popular
    plugins would provide you with useful information and a great starting point to
    write your own test cases.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数插件的完整源代码可以从GitHub快速轻松地下载，然后在本地机器上构建。在许多情况下，这也包括单元测试，这些测试与源代码捆绑在一起，可以在预期的（按照Maven约定）`src/test`位置找到。检查一些流行的插件将为您提供有用的信息，并为编写自己的测试用例提供一个很好的起点。
- en: The Maven `test` target will execute all of the tests and produce a summary
    of the outcome by detailing all the usual statistics such as the number of tests
    run along with how many failures and errors there were and the number of skipped
    tests.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Maven的`test`目标将执行所有测试，并通过详细说明所有通常的统计数据，如运行的测试数量以及有多少失败和错误，以及跳过的测试数量，生成结果的摘要。
- en: To demonstrate this process, we will take a look at the very popular `Green
    Balls` plugin, which simply replaces the standard blue balls in Jenkins with green
    ones.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这个过程，我们将看一下非常流行的`Green Balls`插件，它简单地用绿色的球替换了Jenkins中的标准蓝色球。
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'This link explains why Jenkins has blue balls as default:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个链接解释了为什么Jenkins默认是蓝色的球：
- en: '[http://jenkins-ci.org/content/why-does-jenkins-have-blue-balls](http://jenkins-ci.org/content/why-does-jenkins-have-blue-balls)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://jenkins-ci.org/content/why-does-jenkins-have-blue-balls](http://jenkins-ci.org/content/why-does-jenkins-have-blue-balls)'
- en: 'The Green Balls plugin homepage links to this GitHub location, where you can
    download the source and configuration files in a zip file or clone it using the
    URL provided:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 绿色球插件主页链接到这个GitHub位置，您可以在其中下载源代码和配置文件的zip文件，或使用提供的URL进行克隆：
- en: '[https://github.com/jenkinsci/greenballs-plugin](https://github.com/jenkinsci/greenballs-plugin)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/jenkinsci/greenballs-plugin](https://github.com/jenkinsci/greenballs-plugin)'
- en: 'We''re looking at this example plugin, as it contains a good variety of tests
    that cover the main topics and styles of testing—we will take a closer look at
    the contents shortly. Once you have the source code downloaded to your local machine,
    you should be able to kick off the tests by simply running the Maven `test` target:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在研究这个示例插件，因为它包含了涵盖主要主题和测试风格的各种测试—我们将很快更详细地看一下内容。一旦您将源代码下载到本地机器上，您应该能够通过简单运行Maven的`test`目标来启动测试：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This target will then run through all the prerequisite setup steps before executing
    all the tests and then report on the outcome as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，该目标将在执行所有测试之前运行所有先决设置步骤，然后报告结果，如下所示：
- en: '![Running tests with Maven](../images/00059.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![使用Maven运行测试](../images/00059.jpeg)'
- en: 'Note that a single test can be run by specifying the name of the test, as shown
    here:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，可以通过指定测试的名称来运行单个测试，如下所示：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will result in one test being run, or you can use wildcards such as this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致运行一个测试，或者您可以使用通配符，如下所示：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code results in four tests being run in this case.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码导致在这种情况下运行四个测试。
- en: 'This approach could be used to categorize your tests into logical suites—integration
    tests, nightly tests, regression tests, or unit tests—whatever you like, simply
    by applying a consistent naming convention to your test classes and then setting
    up Jenkins jobs, or running Maven targets that will perform the corresponding
    actions, for example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可以用来将您的测试分类为逻辑套件—集成测试、夜间测试、回归测试或单元测试—无论您喜欢什么，只需将一致的命名约定应用于您的测试类，然后设置Jenkins作业，或运行Maven目标，执行相应的操作，例如：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `Green B`alls plugin contains two test classes: `GreenBallFilterTest` and
    `GreenBallIntegrationTest`, which illustrate two different approaches of plugin
    testing—taking a look through their source code should help you to see how you
    can develop your own tests.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`Green Balls`插件包含两个测试类：`GreenBallFilterTest`和`GreenBallIntegrationTest`，它们展示了插件测试的两种不同方法—浏览它们的源代码应该有助于了解如何开发自己的测试。'
- en: '`GreenBallFilterTest` performs some simple pattern matching tests to ensure
    that correct images are in place:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`GreenBallFilterTest` 执行一些简单的模式匹配测试，以确保正确的图像已经就位：'
- en: '![Running tests with Maven](../images/00060.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![使用Maven运行测试](../images/00060.jpeg)'
- en: '`GreenBallIntegrationTest`, as shown in the following screenshot, extends `HudsonTestCase`
    and uses `com.gargoylesoftware.htmlunit.WebResponse` to test and interact directly
    with the deployed web components, asserting that they return the expected results:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`GreenBallIntegrationTest`，如下截图所示，扩展了`HudsonTestCase`并使用`com.gargoylesoftware.htmlunit.WebResponse`来直接测试和与部署的Web组件进行交互，断言它们返回预期的结果：'
- en: '![Running tests with Maven](../images/00061.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![使用Maven运行测试](../images/00061.jpeg)'
- en: 'This Jenkins page provides useful resources for further reading that would
    cater to more detailed and complex testing scenarios:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Jenkins页面提供了有用的资源，供进一步阅读，以满足更详细和复杂的测试场景：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Unit+Test](https://wiki.jenkins-ci.org/display/JENKINS/Unit+Test)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Unit+Test](https://wiki.jenkins-ci.org/display/JENKINS/Unit+Test)'
- en: This link covers topics such as Mocking, HTML scraping, submitting forms, JavaScript,
    and web page assertions.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此链接涵盖了模拟、HTML抓取、提交表单、JavaScript和网页断言等主题。
- en: Debugging Jenkins
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试Jenkins
- en: The remainder of this chapter focuses on debugging in a number of different
    ways in order to help in further understanding the application and its behavior
    at run time.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分侧重于以多种不同的方式进行调试，以帮助进一步了解应用程序及其运行时行为。
- en: The main focus is on using a local instance of Jenkins and an IDE to debug development
    sessions; however, it is still useful to know about the options available through
    the inbuilt logging options in Jenkins, which are sophisticated and highly customizable.
    These are often a good starting point for any kind of issue, so we will start
    with a quick overview of the options here before moving on to the type of debugging
    that you'll probably want to set up and use when developing your own code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 主要关注于使用本地的Jenkins实例和IDE来调试开发会话；然而，了解Jenkins内置日志选项的可用选项仍然很有用，这些选项是复杂且高度可定制的。这些通常是解决任何问题的良好起点，因此我们将在继续开发自己的代码时，首先快速概述这些选项，然后再转向您可能想要设置和使用的调试类型。
- en: Server debugging – a quick recap
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器调试 – 快速回顾
- en: 'Jenkins uses the `java.util.logging` package for logging; the details of this
    can be found here:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins使用`java.util.logging`包进行日志记录；有关详细信息，请参阅此处：
- en: '[https://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html](https://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html](https://docs.oracle.com/javase/7/docs/api/java/util/logging/package-summary.html)'
- en: 'The Jenkins documentation on logging is available here:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Jenkins日志记录的文档在此处可用：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Logging](https://wiki.jenkins-ci.org/display/JENKINS/Logging)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Logging](https://wiki.jenkins-ci.org/display/JENKINS/Logging)'
- en: This page explains how to go about setting up your own custom log recorders—this
    can be very useful to separate and filter all the log output to help in finding
    what you are interested in, as *everything* is often piped to the default log,
    which can make analyzing difficult.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 本页面解释了如何设置自定义日志记录器—这对于分离和过滤所有日志输出以帮助查找感兴趣的内容非常有用，因为*所有*通常都被传送到默认日志中，这可能使分析变得困难。
- en: 'The Jenkins system log can be checked out using the user interface at **Manage
    Jenkins** | **System Log** | **All Jenkins Logs**, and there are also links to
    the RSS feeds available at the bottom of the page:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用用户界面在**管理Jenkins** | **系统日志** | **所有Jenkins日志**中检查Jenkins系统日志，并且页面底部还有RSS订阅的链接可用：
- en: '![Server debugging – a quick recap](../images/00062.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![服务器调试 – 快速回顾](../images/00062.jpeg)'
- en: These can help identify and filter the different types of events within the
    system.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可以帮助识别和过滤系统中的不同类型的事件。
- en: 'For issues with slave nodes, there are log files available in the following
    location: `~/.jenkins/logs/slaves/{slavename}`.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于从节点的问题，可以在以下位置找到日志文件：`~/.jenkins/logs/slaves/{slavename}`。
- en: For job issues, historic log files are kept at `~/.jenkins/jobs/{jobname}/builds/{jobnumber}`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于作业问题，历史日志文件保存在`~/.jenkins/jobs/{jobname}/builds/{jobnumber}`。
- en: 'You can also start Jenkins at a specific logging level by adding an additional
    `–D` argument to your startup process:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过在启动过程中添加额外的`-D`参数来以特定的日志记录级别启动Jenkins：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, `level` is one of the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`level`是以下之一：
- en: '`SEVERE (highest value)`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SEVERE（最高值）`'
- en: '`WARNING`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WARNING`'
- en: '`INFO`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`INFO`'
- en: '`CONFIG`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CONFIG`'
- en: '`FINE`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FINE`'
- en: '`FINER`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FINER`'
- en: '`FINEST (lowest value)`'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FINEST（最低值）`'
- en: 'The `Off` and `All` levels are also available—see this page for further details
    and options:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`Off`和`All`级别也可用—请参阅此页面以获取更多详细信息和选项：'
- en: '[http://docs.oracle.com/javase/7/docs/api/java/util/logging/Level.html](http://docs.oracle.com/javase/7/docs/api/java/util/logging/Level.html)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.oracle.com/javase/7/docs/api/java/util/logging/Level.html](http://docs.oracle.com/javase/7/docs/api/java/util/logging/Level.html)'
- en: Debugging with IntelliJ
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用IntelliJ进行调试
- en: 'To debug from within IntelliJ, point IntelliJ to the `pom.xml` file of the
    project and then select the option from the Run menu to create a new Run/Debug
    configuration. This should lead you to a screen similar to this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要从IntelliJ中进行调试，请将IntelliJ指向项目的`pom.xml`文件，然后从运行菜单中选择选项来创建新的运行/调试配置。这应该会带您到一个类似于这样的屏幕：
- en: '![Debugging with IntelliJ](../images/00063.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![使用IntelliJ进行调试](../images/00063.jpeg)'
- en: IntelliJ will have already parsed the POM file and will be aware of the available
    targets it contains. As soon as you start typing, for example, `hpi`, you would
    be presented with a drop-down list of all matching options to select from.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ已经解析了POM文件，并且知道它包含的可用目标。一旦您开始输入，例如`hpi`，您将看到一个下拉列表，其中包含所有匹配的选项供您选择。
- en: Select and run the required target (**hpi:run** again in this case) from the
    dropdown and then click on **Debug**.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择并运行所需的目标（在这种情况下再次是**hpi:run**），然后单击**Debug**。
- en: 'You should see the familiar Jenkins startup process in the console and then
    be able to connect to a local debug session at:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在控制台中看到熟悉的Jenkins启动过程，然后能够连接到本地调试会话：
- en: '`http://localhost:8080/jenkins`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/jenkins`'
- en: 'Add a debug point to the code at the same place where we made our "Hello World"
    text change previously (double-click on the left margin of the line that says
    **hello world…** and then run the Jenkins job). This should run up to the break
    point you have set and produce this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在与之前更改“Hello World”文本的相同位置的代码中添加一个调试点（双击左边缘上写着**hello world…**的行，然后运行Jenkins作业）。这应该运行到您设置的断点并产生这个：
- en: '![Debugging with IntelliJ](../images/00064.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![使用IntelliJ进行调试](../images/00064.jpeg)'
- en: 'You can then use the debug arrows and buttons to drive through the debug process:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用调试箭头和按钮来驱动调试过程：
- en: '![Debugging with IntelliJ](../images/00065.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![使用IntelliJ进行调试](../images/00065.jpeg)'
- en: These allow you to step in to, over, or out of the current debug point, and
    you should be able to inspect the listed variables that are being updated to reflect
    the live state of the application being debugged.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这些允许您进入、跳过或退出当前的调试点，并且您应该能够检查列出的变量，以反映正在调试的应用程序的实时状态。
- en: 'For more information on debugging with IntelliJ, see this link:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用IntelliJ进行调试的更多信息，请参阅此链接：
- en: '[https://www.jetbrains.com/idea/help/stepping-through-the-program.html](https://www.jetbrains.com/idea/help/stepping-through-the-program.html)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.jetbrains.com/idea/help/stepping-through-the-program.html](https://www.jetbrains.com/idea/help/stepping-through-the-program.html)'
- en: Debugging with Eclipse
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Eclipse进行调试
- en: Debugging with Eclipse is very similar to the process described for IntelliJ
    previously.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Eclipse进行调试与之前描述的IntelliJ非常相似。
- en: 'To set your breakpoint, double-click on the left-hand side margin in the code
    window, like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置断点，请在代码窗口的左侧边缘双击，就像这样：
- en: '![Debugging with Eclipse](../images/00066.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![使用Eclipse进行调试](../images/00066.jpeg)'
- en: 'Next, right-click on the POM file in your Eclipse project and select **Debug
    as…** and the following window appears:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在Eclipse项目中右键单击POM文件，然后选择**Debug as…**，将出现以下窗口：
- en: '![Debugging with Eclipse](../images/00067.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![使用Eclipse进行调试](../images/00067.jpeg)'
- en: Specify the `hpi:run` target and then click on **Debug**; Jenkins should start
    up as usual in the Eclipse console window.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 指定`hpi:run`目标，然后单击**Debug**；Jenkins应该像往常一样在Eclipse控制台窗口中启动。
- en: As before, point your browser to `http://localhost:8080/jenkins` and then create
    or run a job that hits the breakpoint you set earlier—when this code/point is
    reached, Jenkins will freeze and the focus will switch to Eclipse, where you can
    inspect the current state of the variables and properties and navigate through
    the various debugging steps to drill further into issues or step over areas to
    see what changes and happens.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，将浏览器指向`http://localhost:8080/jenkins`，然后创建或运行一个触发您之前设置的断点的作业 - 当达到这个代码/点时，Jenkins将冻结，焦点将切换到Eclipse，在那里您可以检查当前变量和属性的状态，并浏览各种调试步骤，进一步深入问题或跳过区域以查看发生了什么变化。
- en: mvnDebug
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: mvnDebug
- en: The `mvnDebug` tool provides an alternative approach that may be of interest
    to you. To use this, run `mvnDebug hpi:run` in the command line.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`mvnDebug`工具提供了一个可能会对您感兴趣的替代方法。要使用此功能，请在命令行中运行`mvnDebug hpi:run`。'
- en: 'This should start up Maven in debug mode and a listener on port `8000` of local
    host, like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该启动Maven调试模式，并在本地主机的端口`8000`上启动监听器，就像这样：
- en: '![mvnDebug](../images/00068.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![mvnDebug](../images/00068.jpeg)'
- en: Now switch to your IDE and connect a debug session to this port. For example,
    in Eclipse, select **Run** | **Debug Configurations…**
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在切换到您的IDE，并连接到这个端口的调试会话。例如，在Eclipse中，选择**Run** | **Debug Configurations…**
- en: 'This should produce the following window from which you can select **Remote
    Java Application**. Check whether the host and the port match:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该产生以下窗口，您可以从中选择**Remote Java Application**。检查主机和端口是否匹配：
- en: '![mvnDebug](../images/00069.jpeg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![mvnDebug](../images/00069.jpeg)'
- en: Next, select **Debug** to connect to the `mvnDebug` session you started in the
    console. At this point, the `hpi:run` target will start up (in the console) and
    run Jenkins in debug mode in Maven while connected to your chosen debugger—for
    example, Eclipse.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，选择**Debug**连接到您在控制台中启动的`mvnDebug`会话。此时，`hpi:run`目标将在（控制台中）启动，并在Maven中以调试模式运行Jenkins，同时连接到您选择的调试器，例如Eclipse。
- en: 'If you examine the `mvnDebug` executable, you will see that it simply sets
    `MAVEN_DEBUG_OPTS` before running the normal `mvn` binary, as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您检查`mvnDebug`可执行文件，您会发现它只是在运行普通的`mvn`二进制文件之前设置`MAVEN_DEBUG_OPTS`，如下所示：
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This reveals that it would be easy to specify a different port if you wish,
    or you could adjust this script to add any additional parameters or settings you
    may want to include.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明，如果您愿意，可以很容易地指定不同的端口，或者您可以调整此脚本以添加您可能想要包含的任何其他参数或设置。
- en: The Jenkins Logger Console
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins Logger控制台
- en: The final topic in this chapter is the **Logger Console** that is built in to
    the debug versions of Jenkins.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后一个主题是内置在Jenkins调试版本中的**Logger Console**。
- en: 'When you start up a local dev instance of Jenkins via Maven (whether through
    the command line or an IDE), you will notice the additional **Logger Console**
    box that is included on the left-hand side of the screen:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当您通过Maven启动Jenkins的本地开发实例（无论是通过命令行还是IDE），您会注意到屏幕左侧包含的额外**Logger Console**框：
- en: '![The Jenkins Logger Console](../images/00070.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins Logger控制台](../images/00070.jpeg)'
- en: Expanding this box will reveal a **live** log output window, which you can customize
    in real time to adjust and filter in or out the types and severities of log items
    that you want to see or hide.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 展开此框将显示一个**实时**日志输出窗口，您可以实时自定义以调整和过滤您想要看到或隐藏的日志项目的类型和严重程度。
- en: Keeping **info** selected provides a very verbose level of output, which includes
    information on mouseover events and other UI interactions. These can be very useful
    when debugging UI issues.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 保持选择**info**会提供非常冗长的输出级别，其中包括有关鼠标悬停事件和其他UI交互的信息。在调试UI问题时，这些信息可能非常有用。
- en: 'Unchecking the **info** box leaves just the **warn** and **error** messages.
    The log output can be managed by pausing and optionally clearing the output and
    adjusting the filters to suit your need. The following screenshot shows the **Logger
    Console**:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 取消**info**框的勾选只留下**warn**和**error**消息。日志输出可以通过暂停和可选清除输出以及调整过滤器来满足您的需求。以下截图显示了**Logger
    Console**：
- en: '![The Jenkins Logger Console](../images/00071.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins Logger Console](../images/00071.jpeg)'
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: As you can see, there is a large range of options and approaches available for
    both testing and debugging within Jenkins. This chapter introduced some of the
    main tools and approaches that you may hopefully find useful for your own development
    processes.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，Jenkins内部有大量的选项和方法可供测试和调试。本章介绍了一些您可能会发现对自己的开发流程有用的主要工具和方法。
- en: Knowing how to test and debug your code and set up a productive development
    environment that suits your needs and preferences should improve the quality of
    your own development. It should also make things much easier further down the
    line, when you look at distributing your own plugin and are considering alternative
    development options. We will take a look at some alternative technologies and
    languages in the next chapter.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 了解如何测试和调试您的代码，并设置一个适合您需求和偏好的高效开发环境，应该会提高您自己开发的质量。当您考虑分发自己的插件并考虑替代开发选项时，这也应该会让事情变得更容易。我们将在下一章中看一些替代技术和语言。
