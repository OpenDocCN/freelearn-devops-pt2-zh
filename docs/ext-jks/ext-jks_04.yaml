- en: Chapter 4. The API and the CLI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。API和CLI
- en: In the previous chapter, we looked at several ways in which we can interact
    with Jenkins and extend its use so that developers can benefit directly from within
    their development environments.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看了几种与Jenkins交互和扩展其使用的方式，以便开发人员可以直接从他们的开发环境中受益。
- en: The plugins and add-ons that we looked at were obviously, somehow, able to fetch
    "live" data from Jenkins in order to convey this data directly to the client environment
    (the developers' IDE).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的插件和附加组件显然可以从Jenkins中获取“实时”数据，以便直接将这些数据传达到客户环境（开发人员的IDE）。
- en: In this chapter, we will take a look at how these plugins were able to access
    this information, and we will explore the various mechanisms and interfaces that
    Jenkins provides for programmatic interactions, for example, the Jenkins **Application
    Programming Interface** (**API**). We will also explore the Jenkins **Command-line
    Interface** (**CLI**), which offers a mechanism by which you can remotely interact
    with Jenkins programmatically and/or interactively.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看这些插件是如何能够访问这些信息的，并且我们将探索Jenkins为编程交互提供的各种机制和接口，例如Jenkins **应用程序编程接口**（**API**）。我们还将探索Jenkins
    **命令行界面**（**CLI**），它提供了一种远程以编程方式和/或交互方式与Jenkins进行交互的机制。
- en: Both these features are extremely powerful and are the fundamental utilities
    to extend Jenkins.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个功能都非常强大，并且是扩展Jenkins的基本实用程序。
- en: 'There are three main functions for which you would normally use the Jenkins
    API; these are as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通常您会使用Jenkins API的三个主要功能如下：
- en: Retrieving and consuming information from Jenkins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Jenkins检索和使用信息
- en: Triggering builds based on external events
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于外部事件触发构建
- en: Creating, copying, and altering the Jenkins configuration
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建、复制和更改Jenkins配置
- en: Creating an Information Radiator with the Jenkins XML API
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jenkins XML API创建信息辐射器
- en: In order to illustrate how you can use the Jenkins API to extract live information
    from Jenkins programmatically, we're going to take a high-level look at a practical
    example—creating an Information Radiator that fetches Jenkins information and
    displays it in an external web page. We will not be writing all of the code for
    this in detail; however, we will analyze the basic building blocks in sufficient
    detail so that you are able to adopt the general approach and develop your own
    customized solution in the language of your choice.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明您如何可以使用Jenkins API以编程方式从Jenkins中提取实时信息，我们将高层次地看一个实际示例 - 创建一个信息辐射器，从Jenkins获取信息并在外部网页中显示它。我们将不会详细编写所有的代码；但是，我们将详细分析基本构建块，以便您能够采用一般方法并使用您选择的语言开发自己的定制解决方案。
- en: Information Radiators are simple but useful *live* web pages that allow people
    to easily monitor the status of your most crucial Jenkins jobs in real time. This
    is quite similar to the IDE plugins we looked at earlier, but instead these indicators
    are displayed on television screens in an office to radiate the information
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 信息辐射器是简单但有用的*实时*网页，允许人们实时轻松监视您最关键的Jenkins作业的状态。这与我们之前看到的IDE插件非常相似，但是这些指示器显示在办公室的电视屏幕上，以辐射信息。
- en: The convention for Information Radiators is to *keep it simple*—to have as few
    jobs as possible and have them display a green indicator if everything is alright
    and a red indicator if there is an issue. Sometimes it's useful to show an amber
    indicator if the build is in progress. This simple system helps to highlight the
    urgent issues that need to be fixed as a top priority, and it also serves to deter
    people from checking in new changes when they can clearly see that the build is
    not currently stable; adding further alterations to an already broken system will
    only compound the issue.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 信息辐射器的约定是*保持简单* - 尽可能少地拥有作业，并且如果一切正常则显示绿色指示器，如果有问题则显示红色指示器。有时，如果构建正在进行中，则显示琥珀色指示器也是有用的。这个简单的系统有助于突出需要作为最优先解决的紧急问题，并且它还有助于阻止人们在他们清楚地看到构建当前不稳定时检入新更改；向已经破损的系统添加进一步的更改只会加剧问题。
- en: In our high-level walkthrough, we will monitor the current state of just one
    Jenkins build. You will be able to reuse and extend the same approach to monitor
    as many builds as you want to, and you will see how you can additionally pull
    in and report other details from your Jenkins jobs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的高级概述中，我们将监视一个Jenkins构建的当前状态。您可以重复使用和扩展相同的方法来监视您想要的任意数量的构建，并且您将看到如何可以额外拉取和报告来自Jenkins作业的其他细节。
- en: Note that there are many prebuilt solutions that you could use for this, including
    a variety of plugins for different needs—we are deliberately taking a DIY approach
    here in order to demonstrate the possibilities and show you how to use the Jenkins
    API.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有许多预先构建的解决方案可供您使用，包括各种不同需求的插件 - 我们在这里故意采用自定义方法，以展示可能性并向您展示如何使用Jenkins API。
- en: Getting the information from Jenkins
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Jenkins获取信息
- en: 'The first step is to get our (programmatic) hands on the information. The simplest
    way to do this is via the XML API. This simply involves appending the `/api/xml`
    string to the URL for the job you would like to monitor, as shown here: `http://yourjenkinsserver:8080/job/YourJob/api/xml`.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是获取我们（程序化）的信息。最简单的方法是通过XML API进行。这只是简单地将`/api/xml`字符串附加到您想要监视的作业的URL上，如下所示：`http://yourjenkinsserver:8080/job/YourJob/api/xml`。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that there is also a JSON API available; if this suits your needs better—simply
    replace `api/xml` with `api/json` to receive the same information in the JSON
    format.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，还有一个可用的JSON API；如果这更适合您的需求 - 只需将`api/xml`替换为`api/json`，以便以JSON格式接收相同的信息。
- en: 'If you do this in a browser, you should see XML somewhat similar to my **VeryBasicJob**
    job:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中执行此操作，您应该看到与我的**VeryBasicJob**作业类似的XML：
- en: '![Getting the information from Jenkins](../images/00025.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: 从Jenkins获取信息
- en: The text returned by the API is simple and the XML is quite self-explanatory;
    a quick look through it shows that it contains all the information that you would
    want on the job you just queried—it just needs to be processed and interpreted.
    There doesn't seem to be much available in the way of documentation for these
    XML elements; however, if you start off with as simplistic a job as possible and
    then make changes and additions to that, you should be able to figure out what
    each element does and what the possible values can be.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: API返回的文本很简单，XML本身也很简单易懂；快速浏览一下就会发现它包含了您对刚刚查询的工作所需的所有信息——只是需要进行处理和解释。对于这些XML元素，似乎没有太多的文档可用；但是，如果您从尽可能简单的工作开始，然后对其进行更改和添加，您应该能够弄清楚每个元素的作用以及可能的值。
- en: An XML processor is the best way to handle this, and your scripting or programming
    language of choice should provide you with several options to choose from. For
    example, Perl has **XML::Simple**, Python has **ElementTree**, there is **XmlParser**
    for Groovy, and **JAXP** for Java, amongst many others. If you don't have any
    of these, you could use `grep` and `awk` to find the line and the values you want
    in a shell script.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: XML处理器是处理这个问题的最佳方法，您选择的脚本或编程语言应该提供多种选择。例如，Perl有**XML::Simple**，Python有**ElementTree**，Groovy有**XmlParser**，Java有**JAXP**，还有许多其他选项。如果您没有这些，您可以在shell脚本中使用`grep`和`awk`来查找您想要的行和值。
- en: So, we now have a job that we would like to monitor, some way to fetch all the
    current information on this job, a suitable method to handle the XML, and a mechanism
    to extract the information we want.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们现在有一个我们想要监视的工作，一种获取所有当前工作信息的方法，一个适当的处理XML的方法，以及提取我们想要的信息的机制。
- en: For this example, all that we really want to know about is the current state
    of the build—the values that correspond to our red, amber, and green health indicators—and
    these are present in the XML example as the current `color` attribute of the job.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个例子，我们真正想知道的只是构建的当前状态——对应于我们的红色、琥珀色和绿色健康指示器的值——这些值作为作业的当前`color`属性存在于XML示例中。
- en: 'For example, consider the following XML tag: `<color>blue</color>`. This shows
    that we currently have a non-running and stable job, whereas `<color>blue_anime</color>`
    refers to the blue and animated health indicator icon for a job that was healthy
    for the last build and is currently building.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下XML标记：`<color>blue</color>`。这表明我们目前有一个非运行和稳定的工作，而`<color>blue_anime</color>`则指的是上次构建健康且当前正在构建的工作的蓝色和动画健康指示图标。
- en: We can simply show any mention of `anime` as amber in our Radiator. Both `<color>red</color>`
    and `<color>red_anime</color>` are the obvious equivalents for failed and running
    (but previously failed) jobs respectively. If you take a look at the XML for a
    variety of different job types and states, you will be able to spot and interpret
    the naming conventions used—just add `/api/xml` to a varied selection of jobs
    and compare them.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地将任何提到`anime`的内容显示为琥珀色在我们的信息显示器中。`<color>red</color>`和`<color>red_anime</color>`分别是失败和运行（但以前失败）的作业的明显等价物。如果您查看各种不同类型和状态的作业的XML，您将能够发现并解释所使用的命名约定——只需将`/api/xml`添加到各种作业的选择中并进行比较。
- en: Automating the job
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化工作
- en: The next hurdle for our simple Information Radiator is automating and scheduling
    the job, and, as you'd expect, we can do this very quickly and easily in Jenkins.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简单的信息显示器的下一个障碍是自动化和调度工作，正如您所期望的那样，我们可以在Jenkins中非常快速和轻松地完成这项工作。
- en: Just create a new Jenkins job that fetches the corresponding URL (with `/api/xml`
    at the end) and feed this to your XML parsing script to extract the current values.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 只需创建一个新的Jenkins作业，获取相应的URL（在末尾加上`/api/xml`），并将其传递给您的XML解析脚本以提取当前值。
- en: Many programming and scripting languages have a built-in XML or web fetching
    abilities, but if you prefer, you can use curl or wget to fetch the data and then
    pass this to your script.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 许多编程和脚本语言都具有内置的XML或网络获取功能，但如果您愿意，您也可以使用curl或wget来获取数据，然后将其传递给您的脚本。
- en: 'The Jenkins job can be scheduled to run at a frequency that suits you—you can
    do this through the inbuilt cron function using the standard cron notation; for
    example, you can set your job to run every two minutes, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins作业可以按照您的需要安排运行频率——您可以使用标准的cron表示法通过内置的cron函数来设置作业，例如，您可以将作业设置为每两分钟运行一次，如下所示：
- en: '![Automating the job](../images/00026.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![自动化工作](../images/00026.jpeg)'
- en: 'In this entry, I have specified `H/2 * * * *` to have this job run every two
    minutes. The symbol `H`, is a handy Jenkins inbuilt mechanism that allows Jenkins
    to balance and manage job scheduling. Rather than trigger all the jobs at exactly
    the same time, Jenkins is able to distribute the load for you. For more details,
    click on the **?** icon next to the **Schedule** input box, which states the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我指定了`H/2 * * * *`，以便每两分钟运行一次此作业。符号`H`是Jenkins内置的一个方便机制，允许Jenkins平衡和管理作业调度。Jenkins能够分发负载，而不是在完全相同的时间触发所有作业。要了解更多详情，请点击**Schedule**输入框旁边的**?**图标，其中写着以下内容：
- en: '**To allow periodically scheduled tasks to produce even load on the system,
    the symbol H (for hash) should be used wherever possible. For example, using 0
    0 * * * for a dozen daily jobs will cause a large spike at midnight. In contrast,
    using H H * * * would still execute each job once a day, but not all at the same
    time, better using limited resources.**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**为了让定期计划的任务对系统产生均匀的负载，应尽可能使用符号H（哈希）。例如，对于十几个每天的作业使用0 0 * * *将在午夜引起大量的负载。相比之下，使用H
    H * * *仍然每天执行每个作业一次，但不会同时执行，更好地利用有限的资源。**'
- en: If you are unfamiliar with the cron syntax, take a look at the cron man page
    (type `man cron` in a terminal) on any Linux box. There are also several helpful
    cron generators online, such as this one at [http://crontab-generator.org/](http://crontab-generator.org/),
    which can be very useful.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对cron语法不熟悉，请在任何Linux系统上查看cron手册页（在终端中键入`man cron`）。还有一些有用的cron生成器在线，比如[http://crontab-generator.org/](http://crontab-generator.org/)，这些都非常有用。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that it is highly recommended that you test and fine-tune your job
    *before* deciding on and setting a frequency for repeated builds. For example,
    if your job takes 3 minutes to run and you set it up to run every minute, things
    will not go well!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在决定和设置重复构建的频率之前，强烈建议您测试和微调您的作业*。例如，如果您的作业运行需要3分钟，而您设置它每分钟运行一次，事情将不会进行顺利！
- en: The last remaining task for this step is to store the data somewhere—I usually
    prefer a simple MySQL database, which I can update at the end of a job simply
    by passing the current runtime parameters to the MySQL binary.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步的最后一个任务是将数据存储在某个地方-我通常更喜欢一个简单的MySQL数据库，我可以通过将当前运行时参数传递给MySQL二进制文件来在作业结束时更新。
- en: Radiating the information
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 辐射信息
- en: 'The final step is to display the information from the database as a color "radiator"—this
    simply involves producing a web page that queries the data and translates this
    information to the appropriate color—red, amber, or green. This can be done in
    many languages, including PHP, JSP, and ASP if you like, but the simplest approach
    may be to have your Jenkins job write out the raw HTML to a file for you, perhaps
    something like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将数据库中的信息显示为颜色"辐射器"——这只是简单地生成一个查询数据并将这些信息转换为适当颜色-红色、琥珀色或绿色的网页。这可以用许多语言来实现，包括PHP、JSP和ASP，但最简单的方法可能是让您的Jenkins作业为您写出原始HTML到一个文件，也许像这样：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With the job updating the value for the background color as suitable. Note that
    there's a Meta refresh tag in the preceding code to reload the page every 5 seconds—you
    will need to implement something like this, otherwise you will be looking at the
    same information for a long time!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用作业更新背景颜色的值。请注意，前面的代码中有一个Meta刷新标签，每5秒重新加载页面一次-否则您将长时间看着相同的信息！
- en: Jenkins as a web server – the userContent directory
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins作为Web服务器- userContent目录
- en: 'You can even get Jenkins to act as a simple web server and host the web page
    we created for you—if you copy the file that is produced by the job to the `userContent`
    directory that is within your `JENKINS_HOME` location on the system that runs
    your Jenkins instance, you will see the file appear at this URL: `http://myjenkins:8080/userContent`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以让Jenkins充当一个简单的Web服务器，并托管我们为您创建的网页-如果您将作业生成的文件复制到`JENKINS_HOME`位置中的`userContent`目录中，您将在此URL看到该文件出现：`http://myjenkins:8080/userContent`
- en: 'This should look as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该如下所示：
- en: '![Jenkins as a web server – the userContent directory](../images/00027.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins作为Web服务器- userContent目录](../images/00027.jpeg)'
- en: 'Clicking on the **inforad.html** link will give you the following page—our
    very simple DIY Information Radiator:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**inforad.html**链接将给您以下页面-我们非常简单的DIY信息辐射器：
- en: '![Jenkins as a web server – the userContent directory](../images/00028.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Jenkins作为Web服务器- userContent目录](../images/00028.jpeg)'
- en: This simple exercise illustrates how you can query Jenkins via the API to retrieve
    and consume information in real time.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的练习说明了您如何通过API查询Jenkins以实时检索和消耗信息。
- en: The Jenkins CLI
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins CLI
- en: In this section, we will review the Jenkins CLI—this is another Jenkins extension
    point that can be extremely useful in certain situations—typically it is used
    to run commands against a remote Jenkins server, performing functions such as
    triggering builds or updating configurations.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回顾Jenkins CLI-这是另一个Jenkins扩展点，在某些情况下可能非常有用-通常用于针对远程Jenkins服务器运行命令，执行触发构建或更新配置等功能。
- en: How to set it up
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何设置
- en: In order to use the Jenkins CLI, you need the "jenkins-cli.jar" file.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用Jenkins CLI，您需要"jenkins-cli.jar"文件。
- en: 'This can be quickly and easily fetched from your own Jenkins server. If you
    append "/cli" to the web address of your Jenkins instance, you should see a page
    similar to this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以很快、很容易地从您自己的Jenkins服务器获取。如果您在Jenkins实例的Web地址后附加"/cli"，您应该会看到一个类似于这样的页面：
- en: '![How to set it up](../images/00029.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![如何设置](../images/00029.jpeg)'
- en: This URL provides everything you should need to get started with the Jenkins
    CLI.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个URL提供了您启动Jenkins CLI所需的一切。
- en: There is a link to the Jenkins Wiki topic for further information, a direct
    download link for the Jenkins-cli.jar file from your server (`http://{yourserverand:port}/jnlpJars/jenkins-cli.jar`),
    and a list of available CLI commands along with brief descriptions.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个指向Jenkins Wiki主题的链接，以获取更多信息，还有一个直接从您的服务器下载Jenkins-cli.jar文件的链接（`http://{yourserverand:port}/jnlpJars/jenkins-cli.jar`），以及可用CLI命令的列表和简要描述。
- en: How to use it
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用它
- en: 'Once you have saved the CLI jar locally (you can download it via the browser
    or use a command-line tool, such as `wget` or `curl`), you just need to have your
    Java environment set up and then execute the line detailed at the start of the
    help page, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在本地保存了CLI jar（您可以通过浏览器下载它，也可以使用命令行工具，如`wget`或`curl`），您只需要设置好您的Java环境，然后执行帮助页面开头详细说明的命令，如下所示：
- en: '`java -jar jenkins-cli.jar -s http://{yourserverand:port}/ help`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`java -jar jenkins-cli.jar -s http://{yourserverand:port}/ help`'
- en: Assuming that you have the `Jenkins-cli.jar` in the current directory and you
    updated the address to reflect your server, you should get back the basic help
    information, and you are good to go.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您在当前目录中有`Jenkins-cli.jar`，并且您更新了地址以反映您的服务器，您应该会收到基本的帮助信息，然后您就可以开始了。
- en: Triggering remote jobs via the CLI
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过CLI触发远程作业
- en: The most common and perhaps the simplest task of the CLI is triggering a remote
    job to run at a certain point in a process. This can be extremely useful when
    you are integrating Jenkins with other legacy systems and gradually introducing
    automation to a manual process. You may not be able to automate everything straight
    away, or have Jenkins control everything all at once, but if you can set up a
    Jenkins job to automate individual parts of an existing manual workflow, you can
    then introduce Jenkins gradually and work towards removing the manual steps from
    the chain piece by piece.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: CLI最常见、也许是最简单的任务是在流程的某个特定点触发远程作业运行。当您将Jenkins与其他传统系统集成并逐渐引入自动化到手动流程中时，这可能非常有用。您可能无法立即自动化所有内容，或者一次性让Jenkins控制所有内容，但是如果您可以设置一个Jenkins作业来自动化现有手动工作流程的各个部分，那么您可以逐步引入Jenkins，并逐步消除链条中的手动步骤。
- en: For example, say we have a legacy batch job that runs some form of data processing.
    This processing may take some time to run, and there may be another step that
    comes along and checks whether the processing is complete, and if so, then transfers
    the new data to another location or passes it to another process. We can start
    off by creating a Jenkins job that, when called, picks up the data, checks whether
    it is valid, and then passes it to the next part of the process. This may remove
    a manual step and reduce the overall processing time. But how does the Jenkins
    job know when to run? It may not be efficient or possible to tell whether the
    processing has completed, but we can make a small update to the process to invoke
    the Jenkins job automatically after the initial processing.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有一个传统的批处理作业，运行某种形式的数据处理。这个处理可能需要一些时间来运行，可能会有另一个步骤来检查处理是否完成，如果是的话，然后将新数据传输到另一个位置或传递给另一个进程。我们可以首先创建一个Jenkins作业，当调用时，它会接收数据，检查它是否有效，然后将其传递给流程的下一部分。这可能会消除一个手动步骤并减少整体处理时间。但是Jenkins作业如何知道何时运行？可能无法有效或可能无法告知处理是否已完成，但我们可以对流程进行小的更新，以在初始处理后自动调用Jenkins作业。
- en: 'To remotely trigger a job to run on a simplistic Jenkins server is as easy
    as this:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 远程触发在简化的Jenkins服务器上运行作业就像这样简单：
- en: '![Triggering remote jobs via the CLI](../images/00030.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![通过CLI触发远程作业](../images/00030.jpeg)'
- en: 'Here, we are first downloading the Jenkins CLI jar file to the current directory
    using `curl`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先使用`curl`将Jenkins CLI jar文件下载到当前目录：
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This step needs to be done only once. We will then invoke the remote job with
    this command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步只需要做一次。然后我们将使用这个命令调用远程作业：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Using this simple configuration, you will get no feedback of what happens;
    however, checking out `VeryBasicJob` on the Jenkins server should reveal that
    the job was triggered, and in the console output, it should also mention the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种简单的配置，您将得不到任何反馈；但是，在Jenkins服务器上检查`VeryBasicJob`应该会显示作业已触发，并且在控制台输出中，它还应该提到以下内容：
- en: '**Started from command line by anonymous**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**由匿名用户从命令行启动**'
- en: 'So, we can see that this has worked ok, but the lack of feedback isn''t very
    helpful. If we add the `–s` and `–v` arguments to the command, we will get the
    complete details of what is going on, as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们可以看到这已经可以了，但是缺乏反馈并不是很有帮助。如果我们在命令中添加`-s`和`-v`参数，我们将得到完整的详细信息，如下所示：
- en: '![Triggering remote jobs via the CLI](../images/00031.jpeg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![通过CLI触发远程作业](../images/00031.jpeg)'
- en: 'This looks much better—we can now see that we have kicked off run #9 of `VeryBasicJob`,
    which simply sleeps for 20 seconds before exiting successfully.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来好多了——我们现在可以看到我们已经启动了`VeryBasicJob`的第9次运行，它只是在成功退出之前睡了20秒。
- en: This output information could be used in the client scripts to check for a success
    or failure, or you could make a note of the job number, or record any other output
    that would be useful to know.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这些输出信息可以用于客户端脚本中检查成功或失败，或者您可以记录作业编号，或记录任何其他有用的输出。
- en: 'Obviously, we wouldn''t normally run Jenkins without some form of authentication
    in place, so in the real world things will be a little bit more complex. The user
    for whom you are running the CLI commands first needs to be granted the "Overall/Read"
    account permissions in the configure user page of Jenkins. You can then simply
    add the user name and password at the end of the command line, as shown here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们通常不会在没有任何形式的身份验证的情况下运行Jenkins，因此在现实世界中，事情会变得有点复杂。您首先需要在Jenkins的用户配置页面中为您运行CLI命令的用户授予“Overall/Read”帐户权限。然后您可以简单地在命令行的末尾添加用户名和密码，如下所示：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is enough to get things working, but it's still not great from the security
    point of view; the credentials will be visible in plain text in the script that
    you add them to, or within the history of the shell you have used, or within the
    HTTP stream if you are not using HTTPS. The credentials may also be visible as
    args that are passed to the running process when users run `ps` or `top`, and
    so on, on the same host.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这足以让事情运转起来，但从安全角度来看仍然不够好；凭据将以明文形式显示在您添加它们的脚本中，或者在您使用的shell的历史记录中，或者在您没有使用HTTPS时的HTTP流中。凭据也可能作为参数显示在用户运行`ps`或`top`等命令时传递给运行的进程，等等，在同一主机上。
- en: 'A more secure method is to set up SSH keys and pass in the private key for
    the public key. If you go to "configure" in Jenkins for your user name, you can
    set up the SSH keys for your account in the textbox provided. There are detailed
    instructions on setting up SSH here:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 更安全的方法是设置SSH密钥并传递私钥以获取公钥。如果您在Jenkins的“配置”中为您的用户名设置SSH密钥，您可以在提供的文本框中设置您的帐户的SSH密钥。这里有关设置SSH的详细说明：
- en: '[https://help.github.com/articles/generating-ssh-keys/](https://help.github.com/articles/generating-ssh-keys/)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://help.github.com/articles/generating-ssh-keys/](https://help.github.com/articles/generating-ssh-keys/)'
- en: 'Once this is done, depending on the version of Jenkins you are using, Jenkins
    may automatically check for and use your SSH credentials from any of the following
    locations:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，根据您使用的Jenkins版本，Jenkins可能会自动检查并使用您的SSH凭据来自以下任何位置：
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, you can explicitly supply the path to the key as follows (appending this
    to the command line instead of the earlier user name and password details):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以明确提供密钥的路径（将其附加到命令行而不是之前的用户名和密码详细信息）：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For jobs that require parameters (that is, those that you have set up to request
    information from the user at runtime), you can supply additional "-p" arg(s),
    as shown here:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要参数的工作（即您已设置为在运行时从用户请求信息的工作），您可以提供额外的“-p”参数，如下所示：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will be passed to the job exactly as if the user had entered the data via
    the user interface and assuming there was an input element named "sprint" configured
    for that job.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这将被传递给作业，就好像用户通过用户界面输入数据一样，并假设为该作业配置了名为“sprint”的输入元素。
- en: Updating Jenkins configuration
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新Jenkins配置
- en: Another very useful ability of the Jenkins CLI is to update the Jenkins configuration
    programmatically and remotely.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins CLI的另一个非常有用的能力是以编程方式和远程方式更新Jenkins配置。
- en: From the help page, we saw when we appended `/cli` to the server URL earlier
    that the two commands, `get-job` and `create-job`, can be very useful.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 从帮助页面上，我们看到当我们在服务器URL后附加“/cli”时，两个命令“get-job”和“create-job”非常有用。
- en: Running get-job will request Jenkins to supply the XML definition for that job.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 运行get-job将请求Jenkins提供该作业的XML定义。
- en: 'For example, consider the following command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下命令：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When this is run in my server, it will return the following output:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当在我的服务器上运行时，它将返回以下输出：
- en: '![Updating Jenkins configuration](../images/00032.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![更新Jenkins配置](../images/00032.jpeg)'
- en: This XML can be also redirected to a file by appending "`> VeryBasicJob.xml`"
    to the end of that command for example, and the file can then be added or updated
    in your Version Control software as a periodic backup.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这个XML也可以通过在命令的末尾添加“> VeryBasicJob.xml”来重定向到文件，然后可以将文件作为定期备份添加或更新到您的版本控制软件中。
- en: 'Similarly, you can choose to create a new job using the create-job command
    like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以选择使用create-job命令创建新作业，如下所示：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `MyNewJob.xml` file can, for example, be created programmatically via a
    combination of a Jenkins job, an XML template, and some user-specified input.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以通过Jenkins作业、XML模板和一些用户指定的输入的组合来编程创建`MyNewJob.xml`文件。
- en: 'We could also update an existing job using update-job in conjunction with an
    existing job name:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用update-job来更新现有作业，与现有作业名称结合使用：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This approach can be used to build a mechanism that will back up all or some
    of your Jenkins configuration to Version Control, and then, reload them programmatically
    (via Jenkins).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可以用来构建一个机制，将您的Jenkins配置的全部或部分备份到版本控制，然后通过Jenkins以编程方式重新加载它们。
- en: You can also expand this approach to perform some modifications to the XML files
    (and therefore, the job configurations they create) if changes are required; for
    example, updating the release or sprint details periodically.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，您还可以扩展此方法以对XML文件（因此也是它们创建的作业配置）进行一些修改；例如，定期更新发布或冲刺详细信息。
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the possibilities that the Jenkins API and the
    Jenkins CLI open up.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Jenkins API和Jenkins CLI打开的可能性。
- en: We have worked through some high-level examples and illustrated how you can
    go about developing your own bespoke Information Radiator using the XML API.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经通过一些高级示例并说明了如何使用XML API开发自己的定制信息辐射器。
- en: We have also outlined some of the functionalities provided by the CLI and demonstrated
    how you can use them.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还概述了CLI提供的一些功能，并演示了如何使用它们。
- en: As you can see from the openness of both of these features, the flexibility
    of Jenkins is quite amazing—it's an open platform that provides you with numerous
    ways of adapting and extending it to suit your needs and requirements, whatever
    they may be.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从这两个功能的开放性可以看出，Jenkins的灵活性非常惊人——它是一个开放平台，为您提供了许多适应和扩展它以满足您的需求和要求的方式。
- en: The way in which the plugins that we examined earlier were able to show live
    information on a remote Jenkins server is now hopefully quite obvious, and we
    will take our usage of the API and CLI still further when we later look at how
    to develop our own plugins for Jenkins.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前检查的插件能够在远程Jenkins服务器上显示实时信息的方式现在应该是非常明显的，当我们稍后看看如何为Jenkins开发我们自己的插件时，我们将进一步使用API和CLI。
- en: In the next chapter, we will explore Jenkins Extension Points, look at the theory
    behind them, and review the best practices of development.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索Jenkins扩展点，研究其背后的理论，并审查开发的最佳实践。
