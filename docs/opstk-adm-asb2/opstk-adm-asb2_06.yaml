- en: Chapter 6. Migrating Instances
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。迁移实例
- en: In this chapter, we will cover the task of migrating instances using the native
    OpenStack capability built into the Compute service (Nova). As mentioned earlier
    the existence of this functionality is unknown by many. In this chapter, we will
    prove out this capability by demonstrating how to manually migrate instances.
    As well as, review the steps required to automate this task and finally create
    a playbook with roles to fully automate instance migration to a specified compute
    node.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍使用内置在计算服务（Nova）中的OpenStack本机功能迁移实例的任务。如前所述，许多人并不知道这种功能的存在。在本章中，我们将通过演示如何手动迁移实例来证明这种功能。此外，我们将审查自动化此任务所需的步骤，并最终创建一个包含角色的playbook，以完全自动化实例迁移到指定的计算节点。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Instance migration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例迁移
- en: Automation considerations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化考虑
- en: Coding the playbook and roles
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写playbook和角色
- en: Playbook and role review
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Playbook和角色审查
- en: Instance migration
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实例迁移
- en: Whenever the topic of instance migration comes up, it normally ends in a spirited
    conversation among my OpenStack peers for various reasons. So as a responsible
    adult, I will go on recording and say that instance migration is not perfect.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每当提到实例迁移的话题时，通常会因为各种原因而引发一场激烈的讨论。因此，作为一个负责任的成年人，我将继续记录并说实例迁移并不完美。
- en: It has its flaws and can be quirky at best. Migration, whether live or not,
    does have a practical use case to your OpenStack cloud. Within OpenStack, you
    have the capability of migrating instances from one compute node to another. Some
    of the reasons you may do this is for maintenance purposes and/or to rebalance
    resource utilization across the cloud. Also, keep in mind that there are multiple
    ways to clear out a compute node for maintenance and we will cover that in more
    detail in [Chapter 8](ch08.html "Chapter 8. Setting Up Active-Active Regions"),
    *Setup Active-Active Regions*.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 它有其缺陷，可能有些古怪。无论是实时迁移还是非实时迁移，都对您的OpenStack云具有实际用途。在OpenStack中，您可以将实例从一个计算节点迁移到另一个计算节点。您可能这样做的原因之一是为了维护目的和/或在云中重新平衡资源利用率。此外，请记住，有多种方法可以清除计算节点以进行维护，我们将在[第8章](ch08.html
    "第8章。设置主动-主动区域")中更详细地介绍这一点，*设置主动-主动区域*。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As mentioned earlier, the OpenStack Compute service (Nova) has the functionality
    to migrate instances in a traditional method and the ability to live-migrate an
    instance as well.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，OpenStack计算服务（Nova）具有传统方法迁移实例和实例迁移的功能。
- en: We will first examine the traditional migration method and its properties.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先检查传统迁移方法及其属性。
- en: 'The traditional migration method will move an instance by shutting down that
    instance, coping the instance image/file to the next available compute node, starting
    the instance on the new node, and finally removing the instance from the original
    node. The areas to focus on in this method are:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 传统迁移方法将通过关闭该实例，将实例镜像/文件复制到下一个可用的计算节点，启动新节点上的实例，最后从原始节点中删除实例来移动实例。在这种方法中需要关注的区域是：
- en: The instance is shut down
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例已关闭
- en: The instance image/file will take time to copy to a new compute node
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实例镜像/文件将需要一些时间复制到新的计算节点
- en: New compute node's selection is done by Nova Scheduler; you cannot assign one
    without additional steps required
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的计算节点选择由Nova Scheduler完成；您不能在没有额外步骤的情况下分配一个
- en: The instance is then brought back online once the copying is complete
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦复制完成，实例就会重新上线
- en: As you will note, this method can be considered by some as intrusive. The idea
    of shutting down an instance to move it is generally not a desirable scenario
    back in the virtualization days. Remember that we are in a new era, *the era of
    cloud and disposable resources*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所注意到的，这种方法可能被一些人认为是侵入性的。关闭实例以移动它的想法通常不是虚拟化时代中的理想情景。请记住，我们处于一个新时代，*云和可丢弃资源的时代*。
- en: Since resources are readily available and you have the control to determine
    how to consume those resources, there should be no issues taking an instance offline.
    Right? Yes, I know that it will take a while to shake that *pet* mentality, you
    will get there. In the event the circumstances allow this, which normally means
    you did a good job distributing across your hypervisors the instances running
    your application(s), you can very easily use this method to migration instances.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于资源是随时可用的，并且您有控制权来确定如何使用这些资源，应该没有问题将实例下线。对吗？是的，我知道要摆脱那种*宠物*心态可能需要一段时间，但您会做到的。如果情况允许，通常意味着您在分布在您的hypervisors上运行应用程序的实例方面做得很好，您可以非常容易地使用这种方法来迁移实例。
- en: 'A working example of the traditional instance migration command via the OpenStackClient
    CLI would be as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过OpenStackClient CLI进行传统实例迁移命令的工作示例如下：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The other migration method would be to perform live instance migrations. This
    method would remove the requirement to shut down the instance as was highlighted
    in the traditional migration process described earlier. Instead of shutting down
    the instance, it is suspended (still in a running state) while the instance is
    reassigned to the new compute node. Much advancement has been made since the **Mitaka**
    release to improve this functionality. Such additions include the ability to track
    the migration progress, pause, or cancel a migration in flight and the possibility
    to exclude certain attached volumes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种迁移方法是执行实时实例迁移。这种方法将消除之前描述的传统迁移过程中关闭实例的要求。而不是关闭实例，它被挂起（仍处于运行状态），同时实例被重新分配到新的计算节点。自**Mitaka**发布以来，已经取得了很大进展，以改进此功能。这些新增功能包括跟踪迁移进度的能力，暂停或取消正在进行的迁移以及排除某些附加卷的可能性。
- en: 'There are additional system requirements needed in order to leverage the live
    migration functionality. Those requirements are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用实时迁移功能，还需要满足其他系统要求。这些要求如下：
- en: Some sort of shared or external storage capability must exist between your compute
    nodes
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的计算节点之间必须存在某种共享或外部存储能力
- en: With live migration, you can select the new compute node, but you must assure
    that the new node has the resources required for the new instance
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用实时迁移，您可以选择新的计算节点，但必须确保新节点具有新实例所需的资源
- en: The old and new compute nodes must have the same CPU; OpenStack releases before
    Kilo may encounter an issue if this is not the case
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧的和新的计算节点必须具有相同的CPU；如果不是这种情况，Kilo之前的OpenStack版本可能会遇到问题
- en: 'The first requirement is the most important one on the list, and it deserves
    some further explanation. The additional storage requirement can be covered in
    the following three different ways:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的第一个要求是最重要的，它值得进一步解释。附加存储要求可以通过以下三种不同方式进行满足：
- en: The first way to satisfy the demand is to configure your hypervisors to store
    and have access to share storage for instance placement. This means that the instances
    are stored on the shared storage device and not on ephemeral storage. This could
    involve mounting NFS share on the compute node to be used to store instances or
    through fiber channel sharing LUN across the compute nodes, for example.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 满足需求的第一种方法是配置您的hypervisor以存储并访问共享存储以进行实例放置。这意味着实例存储在共享存储设备上，而不是在临时存储上。这可能涉及在计算节点上挂载NFS共享以用于存储实例，或通过光纤通道在计算节点之间共享LUN，例如。
- en: The second approach to satisfying the shared/external storage requirement could
    be to leverage direct block storage where your instances are backed by image-based
    root disks.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 满足共享/外部存储要求的第二种方法可能是利用直接块存储，其中您的实例由基于镜像的根磁盘支持。
- en: The third and final approach could be the boot from volume storage capability.
    This is where you are booting instances off of Cinder-based volumes. Of course,
    you would need the Block Storage service (Cinder) enabled and configured within
    your OpenStack cloud.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三种和最后一种方法可能是来自卷存储功能的引导。这是您从Cinder基于卷引导实例的地方。当然，您需要在OpenStack云中启用和配置块存储服务（Cinder）。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A key message in relation to using the live migration capability within Nova
    is that your instances must exist on some sort of shared/external storage and
    cannot use ephemeral storage local to the compute node. More details on the required
    configuration can be found at [http://docs.openstack.org/admin-guide/compute-configuring-migrations.html](http://docs.openstack.org/admin-guide/compute-configuring-migrations.html).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在Nova中使用实时迁移功能时的一个关键消息是，您的实例必须存在于某种共享/外部存储上，并且不能使用计算节点本地的临时存储。有关所需配置的更多详细信息，请访问[http://docs.openstack.org/admin-guide/compute-configuring-migrations.html](http://docs.openstack.org/admin-guide/compute-configuring-migrations.html)。
- en: 'A working example of an instance `server migrate` command via the Nova CLI
    would be as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Nova CLI执行实例`server migrate`命令的工作示例如下：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As mentioned earlier, the whole concept of instance migration can range from
    being very simple all the way to being extremely complex. The hope here was you
    can now clearly understand what is required and the process followed during an
    instance migration. Let's now examine the process to manually migrating an instance
    using the CLI.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，实例迁移的整个概念可以从非常简单到极其复杂。希望您现在可以清楚地了解所需的内容以及实例迁移过程。现在让我们来检查使用CLI手动迁移实例的过程。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For simplicity purposes, we will demonstrate the manual commands using the OpenStack
    CLI only.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 出于简单起见，我们将仅使用OpenStack CLI演示手动命令。
- en: Manually migrating instances
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动迁移实例
- en: The Compute service (Nova) is responsible for managing the instance migration
    process. Nova behind the scenes will execute all the steps needed to reassign
    the instance(s) to the new node and the movement of the instance image/file. Just
    like with every OpenStack service, you must authenticate first either by sourcing
    the OpenRC file discussed in [Chapter 1](ch01.html "Chapter 1. Introduction to
    OpenStack"), *Introduction to OpenStack*, or by passing authentication parameters
    in-line with the command. The two tasks individually require different parameter
    values to be provided in order to successfully execute the command. The examples
    are mentioned here.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 计算服务（Nova）负责管理实例迁移过程。 Nova在幕后将执行重新分配实例到新节点以及实例镜像/文件移动所需的所有步骤。与每个OpenStack服务一样，您必须首先进行身份验证，要么通过在[第1章](ch01.html
    "第1章。OpenStack简介")中讨论的OpenRC文件中进行源化，要么通过在命令中使用内联传递身份验证参数。这两个任务分别需要提供不同的参数值，以便成功执行命令。这里提到了示例。
- en: 'An instance migration using an OpenRC file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OpenRC文件进行实例迁移：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Instance migration passing authentication parameters in-line:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过内联传递身份验证参数进行实例迁移：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After issuing the `openstack server migrate` command, I normally follow that
    up with the `openstack server show` command to report on the instance migration
    process. It is something that I normally would not use regularly when automating
    OpenStack tasks for obvious reasons. Since the migration process can take some
    time and we are executing the task manually, it helps to keep track of its progress.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 发出`openstack server migrate`命令后，我通常会跟上`openstack server show`命令，以报告实例迁移过程。这是我通常不会经常使用的东西，当自动化OpenStack任务时，这是显而易见的原因。由于迁移过程可能需要一些时间，而我们正在手动执行任务，因此有助于跟踪其进展。
- en: Another way to check it on your migration would be to use the traditional Nova
    CLI with the `nova migration-list` command.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种检查迁移的方法是使用传统的Nova CLI和`nova migration-list`命令。
- en: 'A real life working example with an OpenRC file could look something like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OpenRC文件的实际工作示例可能如下所示：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the `nova migration-list` command would appear similar to this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`nova migration-list`命令的输出将类似于这样：'
- en: '![Manually migrating instances](graphics/B06086_06_01.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![手动迁移实例](graphics/B06086_06_01.jpg)'
- en: The complete output provided in the earlier command will vary based on any previous
    migrations executed. The key information to focus on is the `Status` of the migration
    for the instance you just attempted to migrate. The status will be reported as
    either `migrating` or `finished`. Once the status is updated to `finished`, you
    can then confirm the migration of the instance.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的命令中提供的完整输出将根据之前执行的任何迁移而有所不同。要关注的关键信息是您刚刚尝试迁移的实例的迁移`Status`。状态将报告为`migrating`或`finished`。一旦状态更新为`finished`，您就可以确认实例的迁移。
- en: After migration, the instance will be in a `VERIFY_RESIZE` state by default,
    whether or not you actually resized it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移后，实例将默认处于`VERIFY_RESIZE`状态，无论您是否实际上调整了它的大小。
- en: '![Manually migrating instances](graphics/image_06_002.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![手动迁移实例](graphics/image_06_002.jpg)'
- en: 'You would then need to execute the `openstack server resize` command to put
    the instance back to the `ACTIVE` state. The following example demonstrates this
    task:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要执行`openstack server resize`命令将实例恢复到`ACTIVE`状态。以下示例演示了这个任务：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: At this point, you are good to go! Your instance would have been migrated to
    a new compute node and now running in an `ACTIVE` state. For those of us who have
    learned to accept the traditional migration process, the next statement normally
    is, why can't I migrate an instance to a specific compute node using the nova
    migrate command? We will talk about this concern in the next section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，您可以开始了！您的实例已经迁移到一个新的计算节点，并且现在处于`ACTIVE`状态。对于我们中的一些人来说，已经习惯了接受传统的迁移过程，下一个问题通常是，为什么我不能使用nova
    migrate命令将实例迁移到特定的计算节点？我们将在下一节讨论这个问题。
- en: Migrating an instance to a specific compute node
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将实例迁移到特定的计算节点
- en: The honest and straight answer to the earlier-mentioned question is that I have
    no clue why this capability was not included. Good thing is just like most things
    within OpenStack, there is always a way to get it to do what you want.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于之前提到的问题，诚实而直接的答案是我不知道为什么没有包括这个功能。好消息是，就像OpenStack内的大多数事物一样，总是有办法让它按照您的意愿去做。
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please be advised that the steps outlined next are 100% a workaround (mid-grade
    dirty workaround) and should not be used within a production environment without
    first executing multiple levels of testing to ensure expected functionality.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，下面概述的步骤是100%的解决方法（中等脏的解决方法），在未经多层测试以确保预期功能的情况下，不应在生产环境中使用。
- en: As covered in the sections earlier, you cannot migrate an instance to a specific
    compute node using the traditional migration method. This option just does not
    exist (hope that changes soon). However, you can trick the Nova Scheduler to place
    the instance on a selected compute node by disabling the other compute nodes.
    Nova Scheduler will then have no choice and migrate the instance to the compute
    node you selected. Yes, in your mind you just called me an idiot. Do not worry
    it is not as intrusive at it sounds on paper.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的章节所述，您无法使用传统的迁移方法将实例迁移到特定的计算节点。这个选项实际上是不存在的（希望很快会改变）。但是，您可以通过禁用其他计算节点来欺骗Nova调度程序，将实例放置在选定的计算节点上。Nova调度程序将别无选择，迁移实例到您选择的计算节点上。是的，在您的脑海中，您刚刚称呼我为白痴。不要担心，这在纸上听起来并不像是那么具有侵入性。
- en: The OpenStack control plane services are designed to report on the status of
    the distributed components such as compute nodes and/or Cinder nodes. The report
    received is then stored within the OpenStack database, and this is how the control
    plane services know if a particular node is up or down. Similarly, the control
    plane services can also force a report of a nodes status.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack控制平面服务旨在报告分布式组件（如计算节点和/或Cinder节点）的状态。然后，接收到的报告存储在OpenStack数据库中，控制平面服务就知道特定节点是上线还是下线。同样，控制平面服务也可以强制报告节点的状态。
- en: The Compute service (Nova) is an example service that can force a report on
    the status of a compute node. This will simply mark a compute node as up or down
    within the database and never actually do anything physically to the compute node.
    All instances running on those compute nodes will remain running, and the overall
    functionality of the node will go unchanged. However, for the time the node is
    disabled within the database, it will prevent new instances to be created there.
    If you have a very busy continuously changing OpenStack cloud and are not using
    a segregated set of compute nodes, this workaround is probably not a wise idea.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 计算服务（Nova）是一个可以强制报告计算节点状态的示例服务。这只会在数据库中标记计算节点的上线或下线状态，实际上并不会对计算节点做任何物理操作。所有运行在这些计算节点上的实例将继续运行，节点的整体功能将保持不变。然而，在数据库中禁用节点的时间内，将阻止在该节点上创建新实例。如果您的OpenStack云非常繁忙且不使用分离的计算节点集，这种解决方法可能不是一个明智的选择。
- en: Due to its intrusive nature, this felt like a perfect administrative task to
    try to automate. With something like this, timing and accuracy is very critical.
    Wasting something as small as a minute could equate to the failure of being able
    to create any number of new instances by your Cloud Consumers inside of your OpenStack
    cloud. For tasks of this nature, automation is a king. In the next few sections,
    we will review the required steps to automate this task.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其侵入性，这感觉像是一个完美的管理任务，可以尝试自动化。对于这样的任务，时间和准确性非常关键。浪费一分钟的时间可能导致无法在OpenStack云内部创建任意数量的新实例。对于这种性质的任务，自动化是王道。在接下来的几节中，我们将回顾自动化这个任务所需的步骤。
- en: Automation considerations
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化考虑
- en: This task also did not require any new framework decisions. All the other automation
    decisions we reviewed previously carried over.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务也不需要做出任何新的框架决定。我们之前审查过的所有其他自动化决策都被延续了。
- en: Before we start, it is worth noting that when automating a task such as this
    one (migrating an instance and disabling compute nodes) it is best to collect
    details concerning them both before and after the migration. Having those details
    will simplify the process of reversing your changes, if required. Yes, this will
    add additional tasks to your role making it slightly more complex but still well
    worth it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，值得注意的是，当自动化像这样的任务（迁移实例并禁用计算节点）时，最好在迁移前后收集有关它们的详细信息。拥有这些详细信息将简化您需要时撤销更改的过程。是的，这将为您的角色增加额外的任务，使其稍微复杂一些，但仍然非常值得。
- en: With this said, we are now ready to proceed with creating our next playbook
    and role.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些说法，我们现在准备继续创建我们的下一个剧本和角色。
- en: Coding the playbooks and roles
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写剧本和角色
- en: In this section, we will now create the playbook and role that will allow you
    to migrate an instance to a specific compute node using the traditional `openstack
    server migrate` command. Unlike the other tasks we have created thus far, there
    is really only one way to handle this task. We will take the steps outlined two
    sections earlier, automate them so that you only need to supply a few variable
    values, and then execute only one command.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建允许您使用传统的`openstack server migrate`命令将实例迁移到特定计算节点的剧本和角色。与迄今为止创建的其他任务不同，处理此任务实际上只有一种方法。我们将采取前两节中概述的步骤，自动化它们，以便您只需要提供一些变量值，然后执行一个命令。
- en: 'This chapter started off talking about instance migration and how there are
    two options within Nova to handle this: traditional migration and live migration.
    The traditional migration process is really a one-step process, but in order to
    properly automate this task, we will need to add a few more steps to the process.
    The brief outline of the tasks we will have to create are:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 本章开始讨论了实例迁移以及在Nova中处理此问题的两种选项：传统迁移和在线迁移。传统迁移过程实际上是一个一步过程，但为了正确自动化此任务，我们需要向该过程添加一些步骤。我们将不得不创建的任务的简要概述如下：
- en: List the compute nodes.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出计算节点。
- en: Collect premigration instance details.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集预迁移实例详细信息。
- en: Disable all compute nodes except for the one we want the instance to migrate
    to.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用除了我们希望实例迁移到的计算节点之外的所有计算节点。
- en: Migrate the instance.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 迁移实例。
- en: Enable all compute nodes.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用所有计算节点。
- en: Confirm instance migration.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认实例迁移。
- en: Collect postmigration instance details.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集迁移后实例的详细信息。
- en: Role details
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 角色详细信息
- en: 'Since we are only creating a role in this example, we can start by the `main.yml`
    file within the role directory named `instance-migrate/tasks`. The beginning contents
    of this file will look like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在此示例中我们只创建一个角色，因此可以从角色目录中的`instance-migrate/tasks`中的`main.yml`文件开始。此文件的初始内容将如下所示：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first step of retrieving the complete list of compute nodes within your
    OpenStack cloud is pretty easy using the `openstack hypervisor list` command.
    Once you get those results, it is best to strip down the output to provide just
    the information you need. Again, we will do this using the `awk` command and pipe
    (`|`) symbol. You will notice that this is similar to how we did it in the previous
    chapter. Remember that the shell module is used here because we are executing
    commands that require shell-specific operations.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 检索OpenStack云中所有计算节点的完整列表的第一步非常容易，只需使用`openstack hypervisor list`命令。一旦获得这些结果，最好将输出精简为您所需的信息。同样，我们将使用`awk`命令和管道（`|`）符号来做到这一点。您会注意到这与我们在上一章中所做的方式类似。请记住，这里使用shell模块是因为我们正在执行需要特定于shell的操作的命令。
- en: 'For this particular task, we have to get a bit magical with the `awk` commands:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个特定的任务，我们必须使用`awk`命令进行一些魔术操作：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Not only will it pull off the first three lines of the standard CLI output,
    it will also check the fourth column and print all the output except what matches
    what is passed in the `{{ desthype }}` variable. The consolidate output will then
    be registered into a variable named `hypelist`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 它不仅会提取标准CLI输出的前三行，还会检查第四列并打印所有输出，除了与`{{ desthype }}`变量匹配的内容。然后将整理后的输出注册到名为`hypelist`的变量中。
- en: 'The next task will now collect premigration instance details that will be stored
    for later use within the role. The code to accomplish this looks as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务现在将收集预迁移实例详细信息，这些信息将在角色内稍后使用。完成此操作的代码如下：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For this task, we are again using the OpenStackClient CLI to provide the instance
    details using the `openstack server list` command. You could as just as well use
    the `openstack server show` command to list the instance details. The distinct
    difference between the two commands is with the `openstack server list` command
    you can choose to display additional fields on the output. To do this, add the
    optional argument of `--long`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个任务，我们再次使用OpenStackClient CLI使用`openstack server list`命令提供实例详细信息。您也可以使用`openstack
    server show`命令列出实例详细信息。这两个命令之间的明显区别在于`openstack server list`命令可以选择在输出上显示附加字段。要执行此操作，请添加`--long`的可选参数。
- en: 'In our particular case, we want to know the compute node that the particular
    instance is currently running on. Thus, we need to make sure that the `openstack
    server list` command looks like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的特定情况下，我们想知道特定实例当前正在运行的计算节点。因此，我们需要确保`openstack server list`命令如下所示：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The third task will be to disable the compute node(s) that you do not want
    the instance to migrate to. Remember that we are only disabling the compute nodes
    within Nova and not physically changing the state of the compute node(s). The
    code to do this would look like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个任务将是禁用您不希望实例迁移到的计算节点。请记住，我们只是在Nova中禁用计算节点，而不是物理上改变计算节点的状态。执行此操作的代码将如下所示：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With the use of the `nova service-disable` command, you can tell Nova to disable
    any particular Nova-related service on remote hosts. In order to have Nova Scheduler,
    ignore/skip a compute node you need to disable the nova-compute service. The command
    also requires a reason to be provided, of which will be stored in the Nova database
    for later reference if required. It is in this task where we will use the list
    of compute node(s) stored in the `hypelist` variable collected earlier.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`nova service-disable`命令，您可以告诉Nova在远程主机上禁用任何特定的与Nova相关的服务。为了让Nova Scheduler忽略/跳过计算节点，您需要禁用nova-compute服务。该命令还需要提供一个原因，如果需要的话，将存储在Nova数据库中以供以后参考。在这个任务中，我们将使用之前收集到的`hypelist`变量中存储的计算节点列表。
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that we will not disable the compute node that we want the instance to
    be migrated to as we have filtered it out of the list already.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们不会禁用我们希望将实例迁移到的计算节点，因为我们已经将其从列表中过滤出来。
- en: 'Moving on to the fourth task, we will now execute the instance migration. At
    this point, only the compute node you have selected to receive the migrated instance
    is enabled and nothing special needs to be done in reference to the `openstack
    server migrate`. See the supporting code here:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 进入第四个任务，我们现在将执行实例迁移。在这一点上，只有您选择接收迁移实例的计算节点是启用的，关于`openstack server migrate`不需要做任何特殊的事情。支持代码请参见这里：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once the migration completes, we need to immediately enable back the compute
    node(s) that were disabled. One of the things I appreciate about OpenStack is
    if you are given a command to disable something, you are normally given a command
    to re-enable it. So we would simply execute the `nova service-enable` command.
    Again, we will use the `hypelist` variable to provide the list of compute node(s)
    to execute against. The code used is shown here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移完成后，我们需要立即重新启用被禁用的计算节点。我欣赏OpenStack的一点是，如果您被给予禁用某些东西的命令，通常也会给您一个重新启用它的命令。因此，我们只需执行`nova
    service-enable`命令。同样，我们将使用`hypelist`变量来提供要执行的计算节点列表。使用的代码如下：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that the migration is complete and the compute node(s) are all enabled,
    we can focus on completing the instance migration process. The last step in an
    instance migration is to notify Nova that you acknowledge the instance was moved.
    At first glance, I could live without this step, but in hindsight, some sort of
    confirmation does make overall sense. Code for this task can be found here:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在迁移已经完成，并且计算节点都已启用，我们可以专注于完成实例迁移过程。实例迁移的最后一步是通知Nova，您确认实例已经移动。乍一看，我可以不做这一步，但事后来看，某种确认确实是有意义的。此任务的代码可以在这里找到：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The last two final tasks will be used to provide the individual running the
    playbook with a visual confirmation of what was done. Consider this more of an
    automation fail safe and less of a requirement. With such a complex administrative
    task as this it is always a good common practice to output some details of what
    was changed on your system:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两个任务将用于向运行playbook的个人提供对所做工作的可视确认。考虑这更多是一个自动化的故障安全，而不是一个要求。对于这样一个复杂的管理任务，总是一个很好的常规做法是输出一些关于系统上发生了什么变化的细节：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'These two tasks will first collect postmigration instance details and then
    use the information collected from the `preinststat` and `postinststat` variables
    to output to the screen a synopses of the changes done. The synapsis template
    used will be:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个任务将首先收集迁移后实例的详细信息，然后使用从`preinststat`和`postinststat`变量收集到的信息在屏幕上输出变更的摘要。使用的摘要模板将是：
- en: <instance migrated> was migrated from <compute node> to <compute node> and has
    a status of <instance current status>
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: <实例已迁移>已从<计算节点>迁移到<计算节点>，状态为<实例当前状态>
- en: Tip
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Feel free to go in and change it to fit your needs. This is just my opinioned
    approach. It felt right to keep it simple while still supplying the pertinent
    details one would care about when handling a migration. Upon review of the playbook
    recap, if something went wrong and/or was implemented incorrectly you should be
    able to quickly target steps for remediation.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 随意进入并进行更改以适应您的需求。这只是我的意见方法。保持简单，同时提供处理迁移时关心的相关细节，这样做感觉是正确的。在回顾playbook时，如果出现问题和/或实施不正确，您应该能够快速定位需要纠正的步骤。
- en: Variable details
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量细节
- en: Congratulations again, you have just completed your fourth OpenStack administration
    role. To support this role, we now need to create the variable file that will
    go along with it. The variable file named `main.yml`, which will be located in
    the `instance-migrate/vars` directory.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 再次恭喜，您已经完成了第四个OpenStack管理角色。为了支持这个角色，我们现在需要创建与之配套的变量文件。变量文件名为`main.yml`，将位于`instance-migrate/vars`目录中。
- en: Tip
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Keep in mind that the values defined in the variable file are intended to be
    changed before each execution for normal everyday use.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，变量文件中定义的值是为了在正常的日常使用中在每次执行之前进行更改的。
- en: 'For this role, we kept it pretty simple on the variables front and only needed
    to define three variables:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个角色，我们在变量方面保持了相当简单，只需要定义三个变量：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s take a moment to break down each variable. The summary would be:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间来分解每个变量。总结如下：
- en: '[PRE16]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Playbook details
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Playbook细节
- en: With the variable file completed, we can move on to creating the master playbook
    file. The file will be named `migrate.yml` and saved to the `root` directory of
    the `playbook` directory.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 完成变量文件后，我们可以继续创建主playbook文件。文件名为`migrate.yml`，保存在`playbook`目录的`root`目录中。
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The playbook and role names can be anything you choose. Specific names have
    been provided here in order to allow you to easily follow along and reference
    the completed code found in the GitHub repository. The only warning is whatever
    you decide to name the roles must remain uniform when referenced from within the
    playbook(s).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: playbook和角色的名称可以是您选择的任何内容。这里提供了具体的名称，以便您可以轻松地跟踪并参考GitHub存储库中找到的完成代码。唯一的警告是，无论您决定如何命名角色，都必须在playbook中引用时保持统一。
- en: 'The contents of the `migrate.yml` file would be:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`migrate.yml`文件的内容将是：'
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The summary of this file is as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件的摘要如下：
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Adding content to our host inventory file and the global variable file was already
    done two chapters ago, so we already have that part covered. The values defined
    earlier would remain the same. Here is a quick recap of how those files are configured.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在两章前向主机清单文件和全局变量文件添加了内容，所以我们已经完成了这部分。之前定义的值将保持不变。以下是这些文件配置的快速回顾。
- en: 'The `hosts` file in the `root` directory of the playbook directory is:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`hosts`文件位于playbook目录的root目录中：'
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The global variable file inside the `group_vars/` directory is:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`group_vars/`目录中的全局变量文件是：'
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Word of caution**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**'
- en: Due to the contents of this file it should be stored as a secure file within
    whatever code repository you may use to store your Ansible playbooks/roles. Gaining
    access to this information could compromise your OpenStack cloud security.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 由于该文件的内容，它应该作为安全文件存储在您可能用来存储Ansible playbooks/roles的任何代码存储库中。获取这些信息可能会危及您的OpenStack云安全。
- en: We are moving along very smoothly now, smile, you did it! Hopefully by this
    point everything is becoming a bit clearer. Keeping with our tradition, we will
    finish up the chapter with a quick review of the playbook and role just created.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在进展非常顺利，微笑，您做到了！希望到目前为止一切都变得更加清晰。保持我们的传统，我们将以快速回顾刚刚创建的playbook和role结束本章。
- en: Reviewing playbook and role
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查playbook和role
- en: 'Let''s jump right into examining the role we created, named `instance-migrate`.
    The completed role and file, named `main.yml`, located in the `instance-migrate/tasks`
    directory, looks like this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直接开始检查我们创建的role，名为`instance-migrate`。位于`instance-migrate/tasks`目录中的已完成role和文件，名为`main.yml`，看起来是这样的：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The corresponding variable file, named `main.yml`, located in the `instance-migrate/vars`
    directory, for this role will look like this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 该角色的对应变量文件，名为`main.yml`，位于`instance-migrate/vars`目录中，将如下所示：
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, the master playbook file, named `migrate.yml`, located in the `root`
    directory of the `playbook` directory, will look like this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，位于`playbook`目录的`root`目录中的主playbook文件，名为`migrate.yml`，将如下所示：
- en: '[PRE23]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Following that we created the `hosts` file, which also is located in the `root`
    directory of the `playbook` directory:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建了`hosts`文件，它也位于`playbook`目录的`root`目录中：
- en: '[PRE24]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Finally, creating the global variable file, named `util_container`, and saving
    it to the `group_vars/` directory of the playbook would complete the playbook:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建名为`util_container`的全局变量文件，并将其保存到playbook的`group_vars/`目录中将完成playbook：
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note
  id: totrans-143
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete set of code can again be found in the GitHub repository, [https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2](https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码集可以在GitHub存储库中找到，[https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2](https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2)。
- en: 'We have finally landed on my most favorite part of creating Ansible playbooks
    and roles, which is to test out our great work. Fortunately for you, I have knocked
    out all the bugs already (wink wink). Assuming you have cloned the preceding GitHub
    repository, the command to test out the playbook from the Deployment node would
    be as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于来到了我最喜欢的部分，即测试我们的出色工作。幸运的是，我已经解决了所有的错误（眨眼）。假设您已经克隆了前面的GitHub存储库，从部署节点测试playbook的命令将如下所示：
- en: '[PRE26]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'A sample of the playbook execution output can be viewed here:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在此处查看playbook执行输出的示例：
- en: '![Reviewing playbook and role](graphics/B06086_06_03.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![审查playbook和role](graphics/B06086_06_03.jpg)'
- en: Summary
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Nice to have completed yet another chapter covering real-life OpenStack administrative
    duties. The more you create playbooks and roles, the faster you will be able to
    create new code just by simply reusing the code created earlier for other purposes.
    Before this book is over, you will have a nice collection of playbooks/roles to
    reference for future Ansible automation.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 很高兴完成了另一个涵盖现实生活中OpenStack管理职责的章节。您创建的playbooks和roles越多，您就能够通过简单地重用先前为其他目的创建的代码来更快地创建新代码。在本书结束之前，您将拥有一个不错的playbooks/roles集合，以供将来的Ansible自动化参考。
- en: Taking a moment to recap this chapter, you will recall that we covered what
    an instance migration is and why you would want to use this functionality. We
    reviewed the two possible migration methods traditional and live migration. You
    learned how to manually migrate an instance, as well as a workaround on how to
    use traditional migration to migrate an instance to a specific compute node. Finally,
    we created the Ansible playbook and role to automate that workaround approach. Overall
    instance maintenance and movement between compute nodes are continually improving.
    At some point you will not need to use some of the workaround mentioned in this
    chapter.  Stay tuned for some great improvements!
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾本章时，您会回想起我们讨论了实例迁移是什么，以及为什么您会想要使用这个功能。我们回顾了两种可能的迁移方法：传统迁移和在线迁移。您学会了如何手动迁移实例，以及如何使用传统迁移将实例迁移到特定计算节点的解决方法。最后，我们创建了Ansible
    playbook和role来自动化这种解决方法。总体而言，实例的维护和在计算节点之间的移动不断改进。在某个时候，您将不需要使用本章提到的一些解决方法。敬请期待一些很棒的改进！
- en: The next chapter is a hot topic, as many of us have been exploring container
    technology. Particularly, we focused on how to consume and use containers while
    leveraging an OpenStack cloud. There are a few approaches now available, but the
    key is automating the process so that it is a reuseable function. In the next
    chapter, we will cover each approach and show the building blocks of how to accomplish
    this successfully. Grab another cup of coffee, do a quick stretch, and let's start
    [Chapter 7](ch07.html "Chapter 7. Managing Containers on Your Cloud"), *Managing
    Containers on Your Cloud*!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章是一个热门话题，因为我们许多人都在探索容器技术。特别是，我们关注如何在利用OpenStack云的同时消耗和使用容器。现在有几种方法可用，但关键是自动化这个过程，使其成为可重复使用的功能。在下一章中，我们将介绍每种方法，并展示如何成功地完成这一过程的构建模块。再拿一杯咖啡，做个快速伸展，让我们开始《第7章》*在您的云上管理容器*！
