["```\n**$./inventory/dynamic_inventory.py | grep galera**\n\n```", "```\n**$ ansible -h**\n\n```", "```\n**$ ansible galera_container -m shell -a \"mysql -h localhost\\-e \n  'show status like \"%wsrep_cluster_%\";'\"**\n\n```", "```\n**$./inventory/dynamic_inventory.py | greprabbit_mq**\n\n```", "```\n**$ ansible rabbit_mq_container -m shell -a \"rabbitmqctlcluster_status\"**\n**$ ansible rabbit_mq_container -m shell -a \n  \"rabbitmqctllist_queues | awk '\\$2>0'\"**\n\n```", "```\n**$ openstack service list**\n\n```", "```\n**$ nova service-list**\n**$ neutron agent-list**\n\n```", "```\n**$ cd playbooks/inventory**\n**$ ./dynamic_inventory.py**\n\n```", "```\n**# check if a process is running**\n**$ ansible neutron_server_container -m shell -a \n  \"ps -ef | grep neutron-server\"**\n**# check status of a service**\n**$ ansible compute_hosts -m shell -a \"service nova-compute status\"**\n**# stop/start/restart a service (process)**\n**$ ansible glance_container -m shell -a \"service glance-registry stop\"**\n**$ ansible glance_container -m shell -a \"service glance-registry start\"**\n**$ ansible glance_container -m shell -a \"service glance-registry restart\"**\n**# parseservice logs**\n**$ ansible nova_scheduler_container -m shell -a \n  \"grep 35f83ac8 /var/log/nova/nova-scheduler.log\"**\n\n```", "```\n--- \n\n name: Install additional packages \n apt: name=\"{{ item }}\" state=present \n with_items: \n - snmpd \n\n name: Move standard config \n command: mv /etc/snmp/snmpd.conf /etc/snmp/snmpd.conf.org \n\n name: Place new config file \n template: src=snmpd.conf dest=/etc/snmp/snmpd.conf \n\n name: Update SNMP options \n shell: chdir=/bin sed -i 's+^SNMPDOPTS.*+SNMPDOPTS=\"-Lsd -Lf /dev/null -u snmp -I -smux -p /var/run/snmpd.pid -c /etc/snmp/snmpd.conf\"+' /etc/default/snmpd \n\n name: Stop SNMP service \n command: service snmpd stop \n\n name: Start SNMP service \n command: service snmpd start \n\n name: Set SNMP service to start automatically \n command: update-rc.d snmpd defaults \n\n```", "```\nrocommunity {{ SNMP_COMMUNITY }} \nsyslocation {{ SYS_LOCATION }} \nsyscontact {{ SYS_CONTACT }} \n\n```", "```\n--- \n\n name: Install additional packages \n apt: name={{item}} state=present \n with_items: \n - vim \n  - nagios3 \n  - unzip \n\n name: Backup Nagios config files \n command: cp -r /etc/nagios3 /etc/nagios3.backup \n\n name: Check Nagios service \n shell: ps -ef |grep nagios3 \n\n name: Create user .ssh directory  \n file: path=/var/lib/nagios/.ssh state=directory \n ignore_errors: yes \n\n name: Copy SSH private keys \n copy: src=id_dsa dest=/var/lib/nagios/.ssh mode=0600 \n\n name: Copy SSH public keys \n copy: src=id_dsa.pub dest=/var/lib/nagios/.ssh mode=0644 \n\n name: Copy nagios Ubuntu logo archive \n copy: src=nagios-ubuntu-logo.tar dest=/usr/share \n\n name: Decompress nagios Ubuntu logo archive \n command: chdir=/usr/share tar xvf nagios-ubuntu-logo.tar -C \n/usr/share/nagios/htdocs/images/logos/base \n\n```", "```\n--- \n\n name: Copy nagios plugins tar file \n copy: src=nagios-plugins.tar dest=/usr/share \n\n name: Decompress nagios plugins archive \n command: chdir=/usr/share tar xvf nagios-plugins.tar -C /usr/lib/nagios/plugins \n\n name: Confirm plugin file permissions  \n file: path=/usr/lib/nagios/plugins/* mode=0774  \n\n name: Confirm plugin file ownership  \n file: path=/usr/lib/nagios/plugins owner=nagios owner=nagios recurse=yes \n\n name: Copy nagios configs zip file \n copy: src=NagiosConfig.zip dest=/usr/share \n\n- name: Create rpc-nagios-configs directory  \n file: path=/etc/nagios3/rpc-nagios-configs state=directory \n\n name: Decompress nagios configs archive \n command: chdir=/usr/share unzip NagiosConfig.zip -d /etc/nagios3/rpc-nagios-configs \n\n```", "```\n--- \n\n name: Install additional packages \n apt: name={{item}} state=present \n with_items: \n  - mysql-server \n  - mysql-client \n  - php5 \n  - libapache2-mod-php5 \n  - php5-mysql \n  - php5-cli \n  - php5-common \n  - libtext-csv-xs-perl \n\n name: Download NConf binaries \n command: wget http://sourceforge.net/projects/nconf/files/nconf/1.3.0-0/nconf-1.3.0-0.tgz/download -O /usr/share/nconf-1.3.0-0.tgz \n\n name: Unpack NConf binaries \n command: chdir=/usr/share tar xzvf nconf-1.3.0-0.tgz -C /var/www/html \n\n name: Set proper NConf directory permissions \n command: chdir=/var/www/html/nconf chmod 644 config output static_cfg temp \n\n name: Copy NConf DB script \n template: src=create-nconf-db.sql dest=/usr/share \n\n name: Create NConf DB \n shell: chdir=/usr/bin mysql -u \"{{ DB_USER }}\" --password= < /usr/share/create-nconf-db.sql \n\n- name: Set NConf directory ownership \n file: path=/var/www/html/nconf owner=www-data group=www-data recurse=yes \n\n- name: Set NConf directory permissions \n file: path=/var/www/html/nconf mode=0777 \n\n- name: Stop apache \n command: service apache2 stop \n\n- name: Start apache \n command: service apache2 start \n\n```", "```\n--- \n\n name: Remove installation directories and files \n command: rm -r /var/www/html/nconf/INSTALL \n\n name: Remove installation directories and files \n command: rm /var/www/html/nconf/INSTALL.php \n\n name: Remove installation directories and files \n command: rm -r /var/www/html/nconf/UPDATE \n\n name: Remove installation directories and files \n command: rm /var/www/html/nconf/UPDATE.php \n\n```", "```\n--- \n\n name: Create Nagios user \n user: name=\"{{ USER }}\" comment=\"{{ USER }} User\"  \n ignore_errors: yes \n\n name: Create user .ssh directory  \n file: path=/home/\"{{ USER }}\"/.ssh state=directory \n\n name: Copy authorized keys \n copy: src=nagios-key dest=/home/\"{{ USER }}\"/.ssh/authorized_keys mode=0644 \n\n name: Set home directory permissions  \n file: path=/home/\"{{ USER }}\" owner=\"{{ USER }}\" group=\"{{ USER }}\" recurse=yes \n\n```", "```\n--- \n\n name: Install additional packages \n apt: name={{item}} state=present \n with_items: \n  - libnet-snmp-perl \n\n name: Create bin directory  \n file: path=/home/\"{{ USER }}\"/bin state=directory \n ignore_errors: yes \n\n name: Fix libcrypto link  \n command: chdir=/lib/x86_64-linux-gnu ln -s libcrypto.so.1.0.0 libcrypto.so.6 \n ignore_errors: yes \n\n name: Fix libssl link  \n command: chdir=/lib/x86_64-linux-gnu ln -s libssl.so.1.0.0 libssl.so.6 \n ignore_errors: yes \n\n name: Copy nagios plugins \n copy: src=check_http dest=/home/\"{{ USER }}\"/bin \n\n name: Copy nagios plugins \n copy: src=check_port.pl dest=/home/\"{{ USER }}\"/bin \n\n name: Copy nagios plugins \n copy: src=check_snmp_process.pl dest=/home/\"{{ USER }}\"/bin \n\n name: Copy nagios plugins \n copy: src=show_users dest=/home/\"{{ USER }}\"/bin \n\n name: Copy perl utils \n copy: src=utils.pm dest=/etc/perl \n\n name: Copy perl utils \n copy: src=utils.sh dest=/etc/perl \n\n name: Confirm plugin file permissions  \n file: path=/home/nagios/bin/check* mode=0777 \n\n name: Confirm plug file ownership  \n file: path=/home/nagios/bin owner=nagios group=nagios recurse=yes \n\n```", "```\n--- \n\n name: Copy NConf config file \n copy: src=nconf.php dest=/var/www/html/nconf/config mode=0644 \n\n name: Change default Nagios config to use NConf \n shell: chdir=/bin sed -i 's/^cfg_dir.*/#/g' /etc/nagios3/nagios.cfg \n\n name: Change default Nagios config to use NConf \n shell: chdir=/bin sed -i 's/^cfg_file.*/#/g' /etc/nagios3/nagios.cfg \n\n name: Make import directory \n file: path=/etc/nagios3/import state=directory \n\n name: Copy Nagios config snippet \n copy: src=nagios.txt dest=/usr/share \n\n name: Change default Nagios config to use NConf \n shell: chdir=/usr/share cat /usr/share/nagios.txt >> /etc/nagios3/nagios.cfg \n\n name: Copy updated NConf deployment script \n copy: src=deploy_local.sh dest=/var/www/html/nconf/ADD-ONS mode=0777 \n\n```", "```\nall_containers \n\n# Here are variables related to the install \n\nUSER: nagios \nSNMP_COMMUNITY: osad \nSYS_LOCATION: SAT \nSYS_CONTACT: support@rackspace.com \n\nhosts \n\n# Here are variables related to the install \n\nUSER: nagios \nSNMP_COMMUNITY: osad \nSYS_LOCATION: SAT \nSYS_CONTACT: support@rackspace.com \n\nnagios-server \n\n# Here are variables related to the install \n\nDB_NAME: NCONF_DB \nDB_USER: root \nDB_PASS: passwd \n\n```", "```\nUSER           # user to be created on the OSA nodes to match up \n                 against the default Nagios user created, \n                 the default user is 'nagios' \nSNMP_COMMUNITY # the SNMP community string used for \n                 the OSA nodes and containers  \nSYS_LOCATION   # additional SNMP information (optional) \n\nSYS_CONTACT    # additional SNMP information (optional) \n\nDB_NAME        # name of the NConf database to be created \n\nDB_USER        # root user for the local mysql server \n\nDB_PASS        # root user password for the local mysql server \n\n```", "```\n--- \n# This playbook deploys components needed for Infrastructure hosts and containers.  \n\n hosts: all_containers \n remote_user: root \n become: true \n roles: \n  - snmp-config \n\n hosts: hosts \n remote_user: root \n become: true \n roles: \n  - snmp-config \n\n```", "```\n--- \n# This playbook deploys components needed for Nagios.  \n\n hosts: nagios-server \n remote_user: root \n become: true \n roles: \n  - install-nagios \n  - nagios-plugins \n\n```", "```\n--- \n# This playbook deploys components needed for NConf.  \n\n hosts: nagios-server \n remote_user: root \n become: true \n roles: \n  - install-nconf \n\n```", "```\n--- \n# This playbook deploys components needed for NConf.  \n\n hosts: nagios-server \n remote_user: root \n become: true \n roles: \n  - nconf-post-install \n\n```", "```\n--- \n# This playbook deploys components needed for the Infrastructure hosts.  \n hosts: hosts \n remote_user: root \n become: true \n roles: \n  - create-nagios-user \n  - infra-plugin-config \n\n```", "```\n--- \n# This playbook deploys components needed for NConf.  \n\n hosts: nagios-server \n remote_user: root \n become: true \n roles: \n  - nagios-post-install \n\n```", "```\n[nagios-server] \n021579-nagios01 \n\n```", "```\n--- \n\n name: Install additional packages \n apt: name=\"{{ item }}\" state=present \n with_items: \n  - snmpd \n\n name: Move standard config \n command: mv /etc/snmp/snmpd.conf /etc/snmp/snmpd.conf.org \n\n name: Place new config file \n template: src=snmpd.conf dest=/etc/snmp/snmpd.conf \n\n name: Update SNMP options \n shell: chdir=/bin sed -i 's+^SNMPDOPTS.*+SNMPDOPTS=\"-Lsd -Lf /dev/null -u snmp -I -smux -p /var/run/snmpd.pid -c /etc/snmp/snmpd.conf\"+' /etc/default/snmpd \n\n name: Stop SNMP service \n command: service snmpd stop \n\n name: Start SNMP service \n command: service snmpd start \n\n name: Set SNMP service to start automatically \n command: update-rc.d snmpd defaults \n\n```", "```\n--- \n\n name: Install additional packages \n apt: name={{item}} state=present \n with_items: \n  - vim \n  - nagios3 \n  - unzip \n\n name: Backup Nagios config files \n command: cp -r /etc/nagios3 /etc/nagios3.backup \n\n name: Check Nagios service \n shell: ps -ef |grep nagios3 \n\n name: Create user .ssh directory  \n file: path=/var/lib/nagios/.ssh state=directory \n ignore_errors: yes \n\n name: Copy SSH private keys \n copy: src=id_dsa dest=/var/lib/nagios/.ssh mode=0600 \n\n name: Copy SSH public keys \n copy: src=id_dsa.pub dest=/var/lib/nagios/.ssh mode=0644 \n\n name: Copy nagios Ubuntu logo archive \n copy: src=nagios-ubuntu-logo.tar dest=/usr/share \n\n name: Decompress nagios Ubuntu logo archive \n command: chdir=/usr/share tar xvf nagios-ubuntu-logo.tar -C /usr/share/nagios/htdocs/images/logos/base \n\n```", "```\n--- \n\n name: Copy nagios plugins tar file \n copy: src=nagios-plugins.tar dest=/usr/share \n\n name: Decompress nagios plugins archive \n command: chdir=/usr/share tar xvf nagios-plugins.tar -C /usr/lib/nagios/plugins \n\n name: Confirm plugin file permissions  \n file: path=/usr/lib/nagios/plugins/* mode=0774  \n\n name: Confirm plugin file ownership  \n file: path=/usr/lib/nagios/plugins owner=nagios owner=nagios recurse=yes \n\n name: Copy nagios configs zip file \n copy: src=NagiosConfig.zip dest=/usr/share \n\n name: Create rpc-nagios-configs directory  \n file: path=/etc/nagios3/rpc-nagios-configs state=directory \n\n name: Decompress nagios configs archive \n command: chdir=/usr/share unzip NagiosConfig.zip -d /etc/nagios3/rpc-nagios-configs \n\n```", "```\n--- \n\n name: Install additional packages \n apt: name={{item}} state=present \n with_items: \n  - mysql-server \n  - mysql-client \n  - php5 \n  - libapache2-mod-php5 \n  - php5-mysql \n  - php5-cli \n  - php5-common \n  - libtext-csv-xs-perl \n\n- name: Download NConf binaries \n command: wget http://sourceforge.net/projects/nconf/files/nconf/1.3.0-0/nconf-1.3.0-0.tgz/download -O /usr/share/nconf-1.3.0-0.tgz \n\n name: Unpack NConf binaries \n command: chdir=/usr/share tar xzvf nconf-1.3.0-0.tgz -C /var/www/html \n\n name: Set proper NConf directory permissions \n command: chdir=/var/www/html/nconf chmod 644 config output static_cfg temp \n\n- name: Copy NConf DB script \n template: src=create-nconf-db.sql dest=/usr/share \n\n name: Create NConf DB \n shell: chdir=/usr/bin mysql -u \"{{ DB_USER }}\" --password= < /usr/share/create-nconf-db.sql \n\n- name: Set NConf directory ownership \n file: path=/var/www/html/nconf owner=www-data group=www-data recurse=yes \n\n name: Set NConf directory permissions \n file: path=/var/www/html/nconf mode=0777 \n\n name: Stop apache \n command: service apache2 stop \n\n name: Start apache \n command: service apache2 start \n\n```", "```\n--- \n name: Remove installation directories and files \n command: rm -r /var/www/html/nconf/INSTALL \n\n name: Remove installation directories and files \n command: rm /var/www/html/nconf/INSTALL.php \n\n name: Remove installation directories and files \n command: rm -r /var/www/html/nconf/UPDATE \n\n name: Remove installation directories and files \n command: rm /var/www/html/nconf/UPDATE.php \n\n```", "```\n--- \n\n name: Create Nagios user \n user: name=\"{{ USER }}\" comment=\"{{ USER }} User\"  \n ignore_errors: yes \n\n name: Create user .ssh directory  \n file: path=/home/\"{{ USER }}\"/.ssh state=directory \n\n name: Copy authorized keys \n copy: src=nagios-key dest=/home/\"{{ USER }}\"/.ssh/authorized_keys mode=0644 \n\n name: Set home directory permissions  \n file: path=/home/\"{{ USER }}\" owner=\"{{ USER }}\" group=\"{{ USER }}\" recurse=yes \n\n```", "```\n--- \n\n name: Install additional packages \n apt: name={{item}} state=present \n with_items: \n  - libnet-snmp-perl \n\n name: Create bin directory  \n file: path=/home/\"{{ USER }}\"/bin state=directory \n ignore_errors: yes \n\n name: Fix libcrypto link  \n command: chdir=/lib/x86_64-linux-gnu ln -s libcrypto.so.1.0.0 libcrypto.so.6 \n ignore_errors: yes \n\n name: Fix libcrypto link  \n command: chdir=/lib/x86_64-linux-gnu ln -s libssl.so.1.0.0 libssl.so.6 \n ignore_errors: yes \n\n name: Copy nagios plugins \n copy: src=check_http dest=/home/\"{{ USER }}\"/bin \n\n name: Copy nagios plugins \n copy: src=check_port.pl dest=/home/\"{{ USER }}\"/bin \n\n name: Copy nagios plugins \n copy: src=check_snmp_process.pl dest=/home/\"{{ USER }}\"/bin \n\n name: Copy nagios plugins \n copy: src=show_users dest=/home/\"{{ USER }}\"/bin \n\n name: Copy perl utils \n copy: src=utils.pm dest=/etc/perl \n\n name: Copy perl utils \n copy: src=utils.sh dest=/etc/perl \n\n name: Confirm plugin file permissions  \n file: path=/home/nagios/bin/check* mode=0777 \n\n name: Confirm plug file ownership  \n file: path=/home/nagios/bin owner=nagios group=nagios recurse=yes \n\n```", "```\n--- \n\n name: Copy NConf config file \n copy: src=nconf.php dest=/var/www/html/nconf/config mode=0644 \n\n name: Change default Nagios config to use NConf \n shell: chdir=/bin sed -i 's/^cfg_dir.*/#/g' /etc/nagios3/nagios.cfg \n\n name: Change default Nagios config to use NConf \n shell: chdir=/bin sed -i 's/^cfg_file.*/#/g' /etc/nagios3/nagios.cfg \n\n name: Make import directory \n file: path=/etc/nagios3/import state=directory \n\n name: Copy Nagios config snippet \n copy: src=nagios.txt dest=/usr/share \n\n name: Change default Nagios config to use NConf \n shell: chdir=/usr/share cat /usr/share/nagios.txt >> /etc/nagios3/nagios.cfg \n\n name: Copy updated NConf deployment script \n copy: src=deploy_local.sh dest=/var/www/html/nconf/ADD-ONS mode=0777 \n\n```", "```\n# Here are variables related to the install \n\nUSER: nagios \nSNMP_COMMUNITY: osad \nSYS_LOCATION: SAT \nSYS_CONTACT: support@rackspace.com \n\n```", "```\n# Here are variables related to the install \n\nUSER: nagios \nSNMP_COMMUNITY: osad \nSYS_LOCATION: SAT \nSYS_CONTACT: support@rackspace.com \n\n```", "```\n# Here are variables related to the install \n\nDB_NAME: NCONF_DB \nDB_USER: root \nDB_PASS: passwd \n\n```", "```\n       --- \n       # This playbook deploys components needed for Infrastructure hosts and  \n       containers.  \n\n        hosts: all_containers \n        remote_user: root \n        become: true \n        roles: \n         - snmp-config \n\n        hosts: hosts \n        remote_user: root \n        become: true \n        roles: \n         - snmp-config \n\n```", "```\n       --- \n       # This playbook deploys components needed for Nagios.  \n\n        hosts: nagios-server \n        remote_user: root \n        become: true \n        roles: \n         - install-nagios \n         - nagios-plugins \n\n```", "```\n       --- \n       # This playbook deploys components needed for NConf.  \n\n        hosts: nagios-server \n        remote_user: root \n        become: true \n        roles: \n         - install-nconf \n\n```", "```\n       --- \n       # This playbook deploys components needed for NConf.  \n\n        hosts: nagios-server \n        remote_user: root \n        become: true \n        roles: \n         - nconf-post-install \n\n```", "```\n       --- \n       # This playbook deploys components needed for the Infrastructure hosts.  \n\n        hosts: hosts \n        remote_user: root \n        become: true \n        roles: \n         - create-nagios-user \n         - infra-plugin-config \n\n```", "```\n       --- \n       # This playbook deploys components needed for NConf.  \n\n        hosts: nagios-server \n        remote_user: root \n        become: true \n        roles: \n         - nagios-post-install \n\n```", "```\n[nagios-server] \n021579-nagios01 \n\n```", "```\n    **$ cd os-admin-with-ansible-v2/nagios-openstack**\n    **$ mkdir /opt/openstack-ansible/playbooks/groups_vars**\n    **$ cp ~/nagios-openstack/group_vars/* /opt/openstack-\n           ansible/playbooks/group_vars**\n    **$ cp -r ~/nagios-openstack/roles/* /opt/openstack-ansible/roles**\n    **$ cp ~/nagios-openstack/base* /opt/openstack-ansible/playbooks**\n    **$ cp ~/nagios-openstack/hosts /opt/openstack-ansible/playbooks**\n\n    ```", "```\n    **$ cd /opt/openstack-ansible/** \n    **$ openstack-ansible -i inventory/dynamic_inventory.py \n         playbooks/base.yml**\n\n    ```", "```\n    **$ ansible all_containers -m shell -a \"service snmpd start\"**\n    **$ ansible hosts -m shell -a \"service snmpd start\"**\n\n    ```", "```\n    **$ cd playbooks**\n    **$ openstack-ansible -i hosts base-nagios.yml**\n\n    ```", "```\n    **$ cd /etc/nagios3**\n    **$ sudo htpasswd -c /etc/nagios3/htpasswd.users nagiosadmin**\n    **$ service nagios3 restart**\n\n    ```", "```\n    **$ openstack-ansible -i hosts base-nconf.yml**\n\n    ```", "```\n                    DBNAME: same as what you inputed in the variables file above \n                    DBUSER: same as what you inputed in the variables file above \n                    DBPASS: same as what you inputed in the variables file above \n                    NCONFDIR: /var/www/html/nconf \n                    NAGIOS_BIN: /usr/sbin/nagios3 \n\n        ```", "```\n        **$ openstack-ansible -i hosts post-nconf-install.yml**\n\n        ```", "```\n    **$ cd ..**\n    **$ openstack-ansible -i \n            inventory/dynamic_inventory.py \n            playbooks/base-infra.yml**\n\n    ```", "```\n           define service { \n            service_description     infra1_check_ssh_process_glance-api \n            check_command           check_by_ssh_process!<glance container\n                                    IP>!glance-api \n            check_period            24x7 \n            notification_period     24x7 \n            host_name              <OSAD node name> \n            contact_groups         +admins,rpc-openstack-support \n            use                    rpc-service \n           } \n\n    ```", "```\n           define host { \n              host_name           <OSAD node name> \n              address            <OSAD node IP> \n              icon_image_alt        Ubuntu 14.04 \n              icon_image          base/ubuntu.gif \n              statusmap_image        base/ubuntu.gd2 \n              check_command         check-host-alive \n              check_period         24x7 \n              notification_period      24x7 \n              contact_groups        +admins,rpc-openstack-support \n              use              rpc-node \n          } \n\n    ```", "```\n    **$USER10$=<random SNMP community string of your choice, keep it\n           simple>**\n\n    ```", "```\n    **$ cd /var/www/html/nconf**\n    **$ bin/add_items_from_nagios.pl -c \n             timeperiod -f /path/to/timeperiods.cfg -s**\n    **$ bin/add_items_from_nagios.pl -c \n             misccommand -f /path/to/misccommands.cfg -s**\n    **$ bin/add_items_from_nagios.pl -c \n             checkcommand -f  \n             /path/to/checkcommands.cfg -s**\n    **$ bin/add_items_from_nagios.pl -c contact -f \n             /path/to/contacts.cfg -s**\n    **$ bin/add_items_from_nagios.pl -c \n             contactgroup -f \n           /path/to/contactgroups.cfg -s**\n    **$ bin/add_items_from_nagios.pl -c \n             host-template -f \n           /path/to/host_templates.cfg -s**\n    **$ bin/add_items_from_nagios.pl -c \n             service-template -f  \n             /path/to/service_templates.cfg -s**\n    **$ bin/add_items_from_nagios.pl -c hostgroup -f \n             /path/to/hostgroups.cfg -s**\n    **$ bin/add_items_from_nagios.pl -c host -f \n             /path/to/hosts.cfg -s**\n    **$ bin/add_items_from_nagios.pl -c advanced-\n             service -f /path/to/advanced-services.cfg -s**\n\n    ```", "```\n    **$ cd playbooks**\n    **$ openstack-ansible -i hosts post-nagios-\n           install.yml**\n\n    ```", "```\n    **$ cd /var/www/html/nconf/ADD-ONS**\n    **$ ./deploy_local.sh**\n\n    ```"]