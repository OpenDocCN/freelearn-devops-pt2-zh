["```\n**$ mkdir elk-containers**\n**$ cd elk-containers**\n**$ ansible-container init**\n\n```", "```\nansible/ \n  container.yml \n  main.yml \n  meta.yml \n  requirements.txt \n  requirements.yml \n  ansible.cfg \n\n```", "```\nversion: \"1\" \nservices: \n # Add your containers here, specifying the base image you want to build from \n # For example: \n # \n # web: \n #    image: ubuntu:trusty \n   #  ports: \n   #     - \"80:80\" \n   #  command: ['/usr/bin/dumb-init', '/usr/sbin/apache2ctl', '-D', 'FOREGROUND'] \n #    dev_overrides: \n #   environment: \n #    - \"DEBUG=1\" \n # \nregistries: {} \n # Add optional registries used for deployment. For example: \n # google: \n #  url: https://gcr.io \n #  namespace: my-cool-project-xxxxxx  \n\n```", "```\n# This should be your Ansible playbooks to provision your containers. \n# An inventory will be automatically created using the names of the services \n# from your container.yml file. \n# Add any roles or other modules you'll need to this directory too. \n# For many examples of roles, check out Ansible Galaxy: https://galaxy.ansible.com/ \n# \n--- \n- hosts: all \n gather_facts: false \n\n```", "```\n**$ cd elk-containers**\n**$ ansible-container install chouseknecht.kibana-container**\n**$ ansible-container install chouseknecht.elasticsearch-container**\n**$ ansible-container install chouseknecht.logstash-container**\n\n```", "```\nversion: '1' \nservices: \n kibana: \n    image: centos:7 \n    ports: \n    - 5601:5601 \n    user: kibana \n    links: \n    - elasticsearch \n    working_dir: /opt/kibana/bin \n    command: [./kibana] \n elasticsearch: \n    image: centos:7 \n    ports: \n    - 9200:9200 \n    expose: \n    - 9300 \n    restart: always \n    user: elasticsearch \n    working_dir: /usr/share/elasticsearch/bin \n    command: [./elasticsearch] \n logstash: \n image: centos:7 \n    ports: \n    - 5044:5044 \n    links: \n    - elasticsearch \n    restart: always \n    working_dir: /opt/logstash/bin \n    command: [./logstash, agent, -f, /etc/logstash/conf.d] \n    environment: \n    - JAVACMD=/usr/bin/java \n\n # volumes: \n   # - your_configuration_volume:/etc/logstash/conf.d \n # Add your containers here, specifying the base image you want to build from \n # For example: \n # \n # web: \n #    image: ubuntu:trusty \n #    ports: \n #       - \"80:80\" \n   #  command: ['/usr/bin/dumb-init', '/usr/sbin/apache2ctl', '-D', 'FOREGROUND'] \n #    dev_overrides: \n   #     environment: \n   #        - \"DEBUG=1\" \n # \nregistries: {} \n # Add optional registries used for deployment. For example: \n   # google: \n #      url: https://gcr.io \n   #    namespace: my-cool-project-xxxxxx \n\n```", "```\n- hosts: all \n gather_facts: false \n- hosts: kibana \n roles: \n - role: chouseknecht.kibana-container \n    kibana_host: 0.0.0.0 \n    kibana_port: 5601 \n    kibana_elasticsearch_url: http://elasticsearch:9200 \n    kibana_index: .kibana \n    kibana_log_dest: stdout \n    kibana_logging_silent: false \n    kibana_logging_quiet: false \n    kibana_logging_verbose: true \n- hosts: elasticsearch \n roles: \n - role: chouseknecht.elasticsearch-container \n    elasticsearch_network_host: 0.0.0.0 \n    elasticsearch_http_port: 9200 \n    elasticsearch_script_inline: true \n    elasticsearch_script_indexed: true \n    elasticsearch_data: /usr/share/elasticsearch/data \n    elasticsearch_logs: /usr/share/elasticsearch/logs \n    elasticsearch_config: /usr/share/elasticsearch/config \n    java_home: '' \n- hosts: logstash \n roles: \n - role: chouseknecht.logstash-container \n    logstash_elasticsearch_hosts: \n    - http://elasticsearch:9200 \n\n    logstash_listen_port_beats: 5044 \n\n    logstash_local_syslog_path: /var/log/syslog \n    logstash_monitor_local_syslog: true \n\n    logstash_ssl_dir: /etc/pki/logstash \n  logstash_ssl_certificate_file: '' \n  logstash_ssl_key_file: '' \n\n  logstash_enabled_on_boot: yes \n\n  logstash_install_plugins: \n  - logstash-input-beats \n\n```", "```\n- src: chouseknecht.kibana-container \n- src: chouseknecht.elasticsearch-container \n- src: geerlingguy.java \n- src: chouseknecht.logstash-container \n\n```", "```\n**$ ansible-container build**\n\n```", "```\n**$ ansible-container run -d**\n\n```", "```\n**$ docker stop <container ID>**\n**$ docker rm <container ID>**\n\n```", "```\n**$ git clone https://github.com/kubernetes-incubator/kargo.git**\n**$ cd kargo**\n\n```", "```\n# Ansible managed: /etc/ansible/roles/openstack_openrc/templates/openrc.j2 \nexport LC_ALL=C \n\n# COMMON CINDER ENVS \nexport CINDER_ENDPOINT_TYPE=publicURL \n\n# COMMON NOVA ENVS \nexport NOVA_ENDPOINT_TYPE=publicURL \n\n# COMMON OPENSTACK ENVS \nexport OS_ENDPOINT_TYPE=publicURL \nexport OS_USERNAME=admin \nexport OS_PASSWORD=passwd \nexport OS_PROJECT_NAME=admin \nexport OS_TENANT_NAME=admin \n**export OS_TENANT_ID=bcf04d870b4c469cb1728e71ef9a6422** \nexport OS_AUTH_URL=https://192.168.0.249:5000/v3 \nexport OS_NO_CACHE=1 \nexport OS_USER_DOMAIN_NAME=Default \nexport OS_PROJECT_DOMAIN_NAME=Default \nexport OS_INTERFACE=publicURL \n**export OS_REGION_NAME=RegionOne** \n\n# For openstackclient \nexport OS_IDENTITY_API_VERSION=3 \nexport OS_AUTH_VERSION=3 \n\n```", "```\n... \nexechealthz_version: 1.1 \nexechealthz_image_repo: \"gcr.io/google_containers/exechealthz-amd64\" \nexechealthz_image_tag: \"{{ exechealthz_version }}\" \nhyperkube_image_repo: \"quay.io/coreos/hyperkube\" \n**hyperkube_image_tag: \"{{ kube_version }}_coreos.0\"**\n\n```", "```\n... \nexechealthz_version: 1.1 \nexechealthz_image_repo: \"gcr.io/google_containers/exechealthz-amd64\" \nexechealthz_image_tag: \"{{ exechealthz_version }}\" \nhyperkube_image_repo: \"quay.io/coreos/hyperkube\" \n**hyperkube_image_tag: \"v{{ kube_version }}_coreos.0\"**\n\n```", "```\n[kube-master] \nkubes-1 \nkubes-2 \n[etcd] \nkubes-3 \nkubes-4 \n\n[kube-node] \nkubes-5 \nkubes-6 \nkubes-7 \n\n[k8s-cluster:children] \nkube-node \nkube-master \netcd \n\n```", "```\n**$ ansible-playbook -i inventory/os-inventory -b cluster.yml**\n\n```", "```\n**$ heat stack-create coreos --template-file=heat-coreos-prod.yaml -- \n  parameters=\"key-name=my-key;user-data=cloud-config-prod.yaml;\n  network=24b9b982-b847-4d0e-9088-61acbf92a37f\"**\n\n```", "```\n--- \n# This playbook deploys the ELK stack on CoreOS \n\n- name: Bootstrap CoreOS \n hosts: coreos \n gather_facts: False \n roles: \n - defunctzombie.coreos-bootstrap \n\n```", "```\n**$ ansible-galaxy install defunctzombie.coreos-bootstrap**\n\n```", "```\n- name: Deploy ELK Stack \n hosts: coreos \n remote_user: core \n become: false \n tasks: \n    - name: Start etcd \n       service: name=etcd.service state=started \n       become: true \n\n    - name: Install docker-py \n       shell: /home/core/bin/pip install docker-py==1.9.0 docker-compose==1.8.0 \n\n```", "```\n - name: Pull Elasticsearch container \n       docker_image: name=elasticsearch \n\n    - name: Pull Kibana container \n       docker_image: name=kibana \n\n    - name: Pull Logstash container \n     docker_image: name=logstash \n\n  - name: Launch Elasticsearch container \n   docker_container: \n    name: elasticsearch-cont \n          image: elasticsearch \n          state: started \n\n    - name: Launch Kibana container \n       docker_container: \n          name: kibana-cont \n          image: kibana \n          state: started \n\n    - name: Launch Logstash container \n     docker_container: \n    name: logstash-cont \n    image: logstash \n    state: started \n\n```", "```\n[coreos] \n162.209.96.54 \n\n[coreos:vars] \nansible_ssh_user=core \nansible_python_interpreter=/home/core/bin/python \nansible_pip_interpreter=/home/core/bin/pip \n\n```", "```\n# This defaults to KVM, if you are deploying on a host that is not KVM capable \n# change this to your hypervisor type: IE \"qemu\", \"lxc\". \n**nova_virt_type: lxd**\n\n```", "```\n# LXD Options for nova compute \nlxd_trust_password: \n\n```", "```\n**$ wget http://cloud-images.ubuntu.com/trusty/current/\n  trusty-server-cloudimg-amd64-root.tar.gz**\n**$ glance image-create --name=trusty-LXD --visibility=public --container-\n  format=bare --disk-format=raw \n  --file=trusty-server-cloudimg-amd64-root.tar.gz**\n\n```", "```\n**$ nova boot --image=<image name> --flavor=<flavor> --nic net-id=<network ID> --security-group=<security group> --min-count <number of containers> <container name>**\n**$ nova boot --image=trusty-LXD --flavor=m1.small --nic net-id=eb283939-2c65-4ecb-9d9f-cbbea9bf252c --security-group default --min-count 3 first-lxd-container**\n\n```", "```\n--- \n# This playbook deploys the ELK stack on CoreOS \n\n- name: Bootstrap CoreOS \n hosts: coreos \n gather_facts: False \n roles: \n    - defunctzombie.coreos-bootstrap \n\n- name: Deploy ELK Stack \n hosts: coreos \n remote_user: core \n become: false \n tasks: \n    - name: Start etcd \n       service: name=etcd.service state=started \n       become: true \n\n    - name: Install docker-py \n       shell: /home/core/bin/pip install docker-py==1.9.0 docker-compose==1.8.0 \n\n    - name: Pull Elasticsearch container \n       docker_image: name=elasticsearch \n\n    - name: Pull Kibana container \n       docker_image: name=kibana \n\n    - name: Pull Logstash container \n       docker_image: name=logstash \n\n    - name: Launch Elasticsearch container \n       docker_container: \n          name: elasticsearch-cont \n          image: elasticsearch \n          state: started \n\n  - name: Launch Kibana container \n   docker_container: \n          name: kibana-cont \n          image: kibana \n          state: started \n\n    - name: Launch Logstash container \n       docker_container: \n          name: logstash-cont \n        image: logstash \n    state: started \n\n```", "```\n- name: Check if bootstrap is needed \n raw: stat $HOME/.bootstrapped \n register: need_bootstrap \n ignore_errors: True \n\n- name: Run bootstrap.sh \n script: bootstrap.sh \n when: need_bootstrap | failed \n\n- name: Check if we need to install pip \n shell: \"{{ansible_python_interpreter}} -m pip --version\" \n register: need_pip \n ignore_errors: True \n changed_when: false \n when: need_bootstrap | failed \n\n- name: Copy get-pip.py \n copy: src=get-pip.py dest=~/get-pip.py \n when: need_pip | failed \n\n- name: Install pip \n shell: \"{{ansible_python_interpreter}} ~/get-pip.py\" \n when: need_pip | failed \n\n- name: Remove get-pip.py \n file: path=~/get-pip.py state=absent \n when: need_pip | failed \n\n- name: Install pip launcher \n copy: src=runner dest=~/bin/pip mode=0755 \n when: need_pip | failed \n\n```", "```\n[coreos] \n162.209.96.54 \n\n[coreos:vars] \nansible_ssh_user=core \nansible_python_interpreter=/home/core/bin/python \nansible_pip_interpreter=/home/core/bin/pip \n\n```", "```\n**$ cd os-admin-with-ansible-v2**\n**$ cd ansible-coreos**\n**$ ansible-playbook -i hosts base.yml**\n\n```"]