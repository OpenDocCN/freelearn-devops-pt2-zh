- en: Chapter 8. Setting Up Active-Active Regions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。设置Active-Active区域
- en: In this chapter, we will focus on demonstrating one of the very useful built-in
    features of OpenStack. This would be the capability of being able to centrally
    manage multiple OpenStack regions that could be running in separate geographical
    locations. The concept of regions within OpenStack is not a new one, but ask yourself
    whether you have ever actually seen it done. On many occasions, I found myself
    unclear on the steps needed to accomplish this. Well today is the day you will
    have a positive response to that question.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点介绍OpenStack的一个非常有用的内置功能。这将是能够集中管理多个可能在不同地理位置运行的OpenStack区域的能力。OpenStack中的区域概念并不新鲜，但请问你是否曾经真正见过它的实现。在许多场合，我发现自己对完成这些步骤感到不清楚。今天是你将对这个问题有一个积极回答的日子。
- en: 'With stability and availability currently being popular topics within the OpenStack
    community, I thought it would be good to share a viable use case to accomplish
    cloud high availability. This will be just one of the many ways a cloud operator
    could set this up. As we may already know, OpenStack can meet numerous high-availability
    requirements. We will briefly review those scenarios and then transition to why
    you would use this functionality. As with all the previous chapters, we will then
    complete the chapter by demonstrating how to automate setting up Active-Active
    cloud regions using Ansible. We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 稳定性和可用性目前是OpenStack社区中热门话题，我认为分享一个可行的用例来实现云高可用性是很好的。这将是云操作员可以设置的许多方式之一。正如我们可能已经知道的，OpenStack可以满足许多高可用性要求。我们将简要回顾这些场景，然后转向为什么要使用这个功能。与之前的所有章节一样，我们将通过演示如何使用Ansible自动设置Active-Active云区域来完成本章。本章将涵盖以下主题：
- en: Reviewing OpenStack high availability scenarios
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾OpenStack高可用性场景
- en: Why to use Active-Active cloud regions?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么要使用Active-Active云区域？
- en: Setting up Active-Active cloud regions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Active-Active云区域
- en: Creating and setting up Admin region
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和设置管理员区域
- en: Configuring active regions' authentication
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置活动区域的身份验证
- en: Coding the playbooks and roles
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写playbooks和roles
- en: Reviewing the playbook and roles
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾playbook和roles
- en: Reviewing OpenStack high availability scenarios
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾OpenStack高可用性场景
- en: This topic happens to be one of those I always enjoy discussing. **high availability**
    (**HA**) and disaster recovery always become very emotional conversations among
    IT folks for obvious reasons. Your neck is on the line, so to speak, to make sure
    that your organization's systems remain online in the event of a disaster/failure.
    In days of old local system, HA and cold (unused) disaster recovery sites were
    good enough. The current agility of cloud now offers up new and better options
    for system stability. Do not settle for the old solutions. You have options!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个话题恰好是我总是喜欢讨论的话题之一。**高可用性**（**HA**）和灾难恢复总是因为明显的原因在IT人员中引起非常情绪化的对话。可以说，你的命运掌握在手中，确保你的组织系统在灾难/故障发生时保持在线。在过去，本地系统、HA和冷（未使用）灾难恢复站点已经足够了。云的当前灵活性现在为系统稳定性提供了新的更好的选择。不要满足于旧的解决方案。你有选择！
- en: 'As repeated earlier, there are multiple ways to accomplish HA with OpenStack.
    We will outline three possible scenarios that I have found to be successful and
    would meet most organizations'' HA requirements. The three possible scenarios
    are listed here with a diagram to add additional context:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，有多种方法可以实现OpenStack的HA。我们将概述三种可能成功的场景，并满足大多数组织的HA要求。以下是三种可能的场景，附加了图表以提供更多上下文：
- en: '**Multiple data centers**: Multiple OpenStack regions are spanned across multiple
    geographically located data centers'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多个数据中心**：多个OpenStack区域跨越多个地理位置的数据中心'
- en: '**Single data center**: Multiple OpenStack regions are within one data center'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单数据中心**：一个数据中心内有多个OpenStack区域'
- en: '**Availability zones**: Using paired availability zones within a single OpenStack
    region located within one data center'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用区**：在一个数据中心内的单个OpenStack区域中使用成对的可用区'
- en: '![Reviewing OpenStack high availability scenarios](graphics/image_08_001.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![回顾OpenStack高可用性场景](graphics/image_08_001.jpg)'
- en: Multiple data centers
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多个数据中心
- en: We would start with the most complex of the three scenarios. This scenario includes
    the concept of deploying multiple sets of OpenStack regions across numerous data
    centers and having them operate as one cloud system. While this may sound complicated,
    it is not as difficult as it sounds. The complexity comes into play when it comes
    time to tie them altogether and then of course when you go to support/manage them
    all. This model not only gives you HA across data centers (multiple Active-Active
    regions), but it also provides HA within each data center individually (independent
    Active-Active region). You would have to have multiple layers of failures in order
    to take your cloud offline.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从三种情景中最复杂的情景开始。这种情景包括在多个数据中心部署多组OpenStack区域，并使它们作为一个云系统运行的概念。虽然这听起来复杂，但实际上并不像听起来那么困难。当将它们全部绑定在一起时，以及当您去支持/管理它们时，复杂性就会出现。这种模式不仅为您提供了跨数据中心的HA（多个Active-Active区域），而且还在每个数据中心内提供了HA（独立的Active-Active区域）。您必须经历多层故障才能使您的云下线。
- en: '![Multiple data centers](graphics/image_08_002.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![多个数据中心](graphics/image_08_002.jpg)'
- en: Single data center
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单数据中心
- en: Similar to the preceding scenario, with the major difference being that, it
    is only restricted to a single data center. In this scenario, you could deploy
    a single set of OpenStack Active-Active regions restrained to just one data center.
    This model would only provide HA within the data center where the regions are
    running. If that particular data center catches fire, your cloud would be **So
    Out of Luck** (**SOL**).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的情景类似，主要区别在于，它只限于单个数据中心。在这种情况下，您可以部署一组仅限于一个数据中心的OpenStack Active-Active区域。这种模型只会在运行区域的数据中心内提供高可用性。如果该数据中心发生火灾，您的云将**彻底倒霉**（**SOL**）。
- en: If left with few options, this model could still save you from complete cloud
    failure.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有其他选择，这种模型仍然可以避免完全的云故障。
- en: '![Single data center](graphics/image_08_003.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![单个数据中心](graphics/image_08_003.jpg)'
- en: Availability Zones
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用区域
- en: This last scenario may be the simplest option but can certainly do the job in
    delivering guest-level HA. Yes, it does fall short if you are seeking to gain
    a true disaster recovery design. By leveraging multiple AZs, you can spread the
    instances across separate compute nodes using the anti-affinity filter, in essence
    providing the guest-level HA.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情景可能是最简单的选择，但肯定可以在提供客户级别的高可用性方面发挥作用。是的，如果您希望获得真正的灾难恢复设计，这种模型就不够了。通过利用多个AZ，您可以使用反亲和性过滤器将实例分布在不同的计算节点上，从而提供客户级别的高可用性。
- en: Now, let's focus on a simple paired down version of the multiple data center
    model we described earlier. We will review why you may be interested in using
    the Active-Active region approach.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们专注于我们之前描述的多数据中心模型的简化版本。我们将回顾为什么您可能有兴趣使用Active-Active区域方法。
- en: '![Availability Zones](graphics/B06086_08_10.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![可用区域](graphics/B06086_08_10.jpg)'
- en: Why to use Active-Active cloud regions?
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要使用Active-Active云区域？
- en: Outside of just the plain awesomeness of being able to actively use more than
    one OpenStack region, the Active-Active cloud region approach provides the best
    use of your overall cloud investment. No more are the days of having to perform
    DR tests simply because the second site is not regularly used. Plus you gain the
    added bonus of a centralized management region. A *win-win* situation all over
    the place.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了能够积极使用多个OpenStack区域的纯粹令人敬畏之外，Active-Active云区域方法还能最大限度地利用您的整体云投资。不再需要因为第二个站点不经常使用而进行灾难恢复测试。此外，您还获得了集中管理区域的额外好处。处处都是*双赢*的局面。
- en: 'So, let''s go deeper into the architecture in order to deliver an OpenStack
    Active-Active region. The following diagram explains the architecture in its simplest
    form:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们深入了解架构，以提供一个OpenStack Active-Active区域。以下图表以最简单的形式解释了架构：
- en: '![Why to use Active-Active cloud regions?](graphics/image_08_004.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![为什么要使用Active-Active云区域？](graphics/image_08_004.jpg)'
- en: 'The components of the preceding architecture are:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 上述架构的组件是：
- en: Two separate OpenStack cloud deployments, which in turn equates to two regions.
    In this example, we have **Region A** and **Region B**. These regions run the
    core OpenStack services except Keystone and Horizon. Each region can have any
    and as many complimentary AZs as you wish.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个独立的OpenStack云部署，也就是两个区域。在这个例子中，我们有**A区**和**B区**。这些区域运行核心OpenStack服务，除了Keystone和Horizon。每个区域可以有任意数量的互补AZ。
- en: Create another OpenStack region solely dedicated to hosting the Keystone and
    Horizon services. This region could be classified as the Admin region.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建另一个专门用于托管Keystone和Horizon服务的OpenStack区域。这个区域可以被归类为Admin区域。
- en: Regions A and B would then leverage the Admin region to handle authentication
    and GUI web interface by centralizing user, tenant, and project management/creation
    as well as providing a single web dashboard to manage all the active regions.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，A区和B区将利用Admin区域来处理身份验证和GUI Web界面，通过集中用户、租户和项目管理/创建，并提供一个单一的Web仪表板来管理所有活动区域。
- en: Setting up Active-Active cloud regions
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Active-Active云区域
- en: The process to implement it is relatively straightforward, but it does require
    distinct attention to detail. Outlining the steps beforehand I have found to be
    very useful and avoid missing steps. I have also learned that performing the changes
    manually (aka by hand) does not normally end well either. The process of editing
    the services configuration files does leave open the door of making edits by mistake,
    which leads to services that will not start. No good!!! Not even mentioning that
    it makes the process to implement take three times as long. First, we will review
    the steps manually and then in the following section, we will learn how to automate
    the setup process as much as possible. All I can say is thank heavens for Ansible!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 实施这一过程相对简单，但确实需要特别注意细节。提前概述步骤非常有用，可以避免遗漏步骤。我还了解到，手动执行更改通常也不会有好结果。编辑服务配置文件的过程会导致错误修改，导致服务无法启动。不好！！！更不用说这会使实施过程时间变长三倍。首先，我们将手动回顾步骤，然后在接下来的部分，我们将学习如何尽可能自动化设置过程。我只能说感谢Ansible！
- en: 'In this section, we will review the manual steps to set up Active-Active OpenStack
    cloud regions. A brief snapshot of the steps is outlined here:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将回顾设置Active-Active OpenStack云区域的手动步骤。以下是步骤的简要概述：
- en: Inventory each region's endpoints and take note of the URLs.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录每个区域的端点并注意URL。
- en: Create service user accounts on the Admin region.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Admin区域创建服务用户帐户。
- en: Create services on the Admin region.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Admin区域创建服务。
- en: Register each region's endpoints to the Admin region.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个区域的端点注册到Admin区域。
- en: Adjust the Admin region's identity endpoint.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整Admin区域的身份端点。
- en: Configure each of the region's services to authenticate against the Admin region
    identity service instead of the local region's identity service.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置每个区域的服务，以便对Admin区域的身份验证服务进行身份验证，而不是本地区域的身份验证服务。
- en: Now, let's go step-by-step through each configuration step shown here demonstrating
    the working configuration examples.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们逐步通过这里显示的每个配置步骤，演示工作配置示例。
- en: Region endpoint inventory
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 区域端点清单
- en: 'This step would be a simple query of the endpoints of each region you want
    to include in the Active-Active setup. Since we are using **openstack-ansible**
    (**OSA**) to deploy our OpenStack clouds, you will need to connect into the utility
    container of each region in order to use the OpenStack CLI. Once connected and
    you source the OpenRC file, the command would be:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步将是简单地查询您想要包括在主-主设置中的每个区域的端点。由于我们使用**openstack-ansible**（**OSA**）来部署我们的OpenStack云，您需要连接到每个区域的实用程序容器，以便使用OpenStack
    CLI。一旦连接并源化OpenRC文件，命令将是：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output of this command should look similar to this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的输出应该类似于这样：
- en: '![Region endpoint inventory](graphics/image_08_005.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![区域端点清单](graphics/image_08_005.jpg)'
- en: Keep in mind that our focus here is to just take note of the public endpoints
    available.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们这里的重点是要注意可用的公共端点。
- en: 'Since openstack-ansible installs the OpenStack services into LXC containers,
    you will need to know how to connect to each container for use of the CLI and
    to configure/maintain the services. The LXC command to list all the containers
    running on the control plane server is `lxc-ls -fancy`, and the output will look
    similar to the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于openstack-ansible将OpenStack服务安装到LXC容器中，您需要知道如何连接到每个容器以使用CLI并配置/维护服务。列出在控制平面服务器上运行的所有容器的LXC命令是`lxc-ls
    -fancy`，输出将类似于以下内容：
- en: '![Region endpoint inventory](graphics/image_08_006.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![区域端点清单](graphics/image_08_006.jpg)'
- en: Admin region configurations
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理区域配置
- en: The next steps will now involve customizing the install and configuration of
    the Admin region. This will be your centralized management region servicing only
    authentication requests. The Admin region can exist in the same data center as
    one of the other regions or in an entirely separate region from the other. Obviously,
    network connectivity between the data centers would be required. Please follow
    the instructions given later in order to do this.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤将涉及定制管理区域的安装和配置。这将是您的集中管理区域，只为身份验证请求提供服务。管理区域可以存在于与其他区域相同的数据中心，也可以存在于与其他区域完全不同的区域。显然，数据中心之间需要网络连接。请按照稍后给出的说明进行操作。
- en: Creating service user accounts on the Admin region
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在管理区域创建服务用户帐户
- en: 'At this point, you should have a functioning Admin region running only the
    identity service (Keystone) and the web dashboard (Horizon). Only those two services
    should be present and active. Since we want to use the Admin region to manage
    the other regions, you must make it aware of the other regions services and endpoints.
    This process starts with creating the service user accounts on the Admin region:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您应该有一个仅运行身份服务（Keystone）和Web仪表板（Horizon）的运行中的管理区域。只有这两个服务应该存在并处于活动状态。由于我们希望使用管理区域来管理其他区域，您必须让它了解其他区域的服务和端点。这个过程从在管理区域上创建服务用户帐户开始：
- en: 'For this step, we will create the service user accounts using the CLI with
    the following command:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这一步，我们将使用以下命令使用CLI创建服务用户帐户：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A working example of the command would look like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的一个工作示例看起来像这样：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we must assign the new user just created a role with the proper permissions.
    The CLI command to accomplish this is here:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们必须为刚刚创建的新用户分配一个具有适当权限的角色。完成此操作的CLI命令在这里：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A working example of the command would look like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的一个工作示例看起来像这样：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now that we have the service user accounts created, we can transition on to
    the next step of registering the new services on the Admin region.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了服务用户帐户，我们可以过渡到在管理区域上注册新服务的下一步。
- en: Creating services on the Admin region
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在管理区域创建服务
- en: In this step we are simply creating placeholders on the Admin region for the
    services running on the active regions. Remember that the active regions have
    the other core services running on them and the Admin region will handle the authentication
    for them. The Admin region then has to be aware of the services.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们只是在管理区域为活动区域上运行的服务创建占位符。请记住，活动区域上运行其他核心服务，管理区域将为它们处理身份验证。然后管理区域必须知道这些服务。
- en: 'The services will be registered on the Admin region using the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在管理区域上注册服务：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'A working example of the command would look like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令的一个工作示例看起来像这样：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The next step will now be to register the active regions endpoints on the Admin
    region. This step requires a level of precision, as the endpoint URL is what the
    Admin region will use to make functional calls. If the URL is incorrect or mistyped,
    the service will be considered down per the Admin region.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步将是在管理区域注册活动区域的端点。这一步需要一定的精度，因为端点URL是管理区域用来进行功能调用的。如果URL不正确或输入错误，服务将被管理区域视为已关闭。
- en: Registering each region's endpoints to the Admin region
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将每个区域的端点注册到管理区域
- en: The process of registering the active region's endpoints involves using the
    endpoint inventory we started with earlier. The key points here are that you must
    use the IP address from the public endpoints of each region. The IP address assigned
    to the public endpoint needs to be a public IP address (accessible over the Internet)
    or an internal IP address accessible between each data center. Again, the Admin
    region will use this URL to make service calls, so the endpoint must be reachable.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注册活动区域端点的过程涉及使用我们之前开始的端点清单。这里的关键点是，您必须使用每个区域公共端点的IP地址。分配给公共端点的IP地址需要是公共IP地址（可通过互联网访问）或在每个数据中心之间可访问的内部IP地址。再次强调，管理区域将使用此URL进行服务调用，因此端点必须是可访问的。
- en: 'You will be required to register two types of endpoints: **public** and **internal**.
    I discovered this key component during the setup process. Some of the OpenStack
    services leverage the internal endpoints solely, whereas others will use the public
    endpoints. In order to avoid any issues, we will register both. Technically, there
    is zero risk to registering both and it is a good practice.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要注册两种类型的端点：**公共**和**内部**。我在设置过程中发现了这个关键组件。一些OpenStack服务仅利用内部端点，而其他服务将使用公共端点。为了避免任何问题，我们将注册两者。从技术上讲，注册两者没有任何风险，这是一个好的做法。
- en: 'An example of the command to register the service is as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注册服务的命令示例如下：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'A set of working examples of the command would look like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一组命令的工作示例如下：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding step needs to be repeated for every active region you wish to
    join under the Admin region. As depicted in the earlier example, we would execute
    this step for **Region A** and **Region B**.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的步骤需要为您希望加入Admin区域的每个活动区域重复执行。如前面的示例所示，我们将为**Region A**和**Region B**执行此步骤。
- en: Adjusting the Admin regions' identity endpoint
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调整Admin区域的身份端点
- en: The last step in setting up the Admin region is to make sure that the active
    regions can successfully connect to the identity service running there. The same
    principle shared earlier about having to expose the services public endpoint applies
    here as well  for Keystone . Every cloud setup may differ slightly, so this step
    may not be required for all clouds.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Admin区域的最后一步是确保活动区域可以成功连接到那里运行的身份服务。之前分享的关于必须公开服务公共端点的原则在这里同样适用于Keystone。每个云设置可能略有不同，因此并非所有云都需要此步骤。
- en: 'In order to evaluate if you need to make this adjustment, execute the following
    command and determine if the public and admin endpoints have local IP addresses
    configured for the URL:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了评估是否需要进行此调整，请执行以下命令，并确定公共和管理员端点是否为URL配置了本地IP地址：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If the output looks similar to this, you must disable the public and admin
    endpoints after creating new ones with either a public IP or IP address accessible
    between data centers. More details on how to handle this will be shared here:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果输出看起来类似于这样，您必须在创建新的公共IP或数据中心之间可访问的IP地址后禁用公共和管理员端点。有关如何处理此问题的更多详细信息将在此处分享：
- en: '![Adjusting the Admin regions'' identity endpoint](graphics/image_08_007.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![调整Admin区域的身份端点](graphics/image_08_007.jpg)'
- en: 'In order to create the new public and admin endpoints and then disable the
    current ones, you would execute the following commands:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建新的公共和管理员端点，然后禁用当前的端点，您将执行以下命令：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Once completed, upon issuing the `openstack endpoint list --service identity`
    command, the output should look similar to this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，执行`openstack endpoint list --service identity`命令，输出应该类似于这样：
- en: '![Adjusting the Admin regions'' identity endpoint](graphics/image_08_008.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![调整Admin区域的身份端点](graphics/image_08_008.jpg)'
- en: Active region configurations
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动区域配置
- en: This section will include the steps to setting up the active regions that will
    be part of your Active-Active cloud design. These are the regions running the
    core OpenStack services. At this point, we have the Admin region set up to communicate
    with these active regions. Now we must configure the core services to authenticate
    through the Admin region instead of using the local identity service (Keystone).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将包括设置活动区域的步骤，这些区域将成为您的Active-Active云设计的一部分。这些区域运行核心OpenStack服务。在这一点上，我们已经设置了Admin区域，以便与这些活动区域进行通信。现在，我们必须配置核心服务，通过Admin区域进行身份验证，而不是使用本地身份服务（Keystone）。
- en: You cannot deploy an OpenStack cloud without first setting up a local identity
    service. The identity service has to be the first service installed and thus would
    exist on the active regions. To have the services not use the local identity service,
    you must reconfigure each service. Simply disabling the local identity service
    is not enough to make this work. The process of reconfiguring each core service
    includes editing the configuration file. As already mentioned earlier, editing
    the service configuration files leaves the door open to make edits by mistake
    that could then lead to that service not starting.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署本地身份服务之前，您无法部署OpenStack云。身份服务必须是第一个安装的服务，因此将存在于活动区域。要使服务不使用本地身份服务，您必须重新配置每个服务。仅仅禁用本地身份服务是不够的。重新配置每个核心服务的过程包括编辑配置文件。如前所述，编辑服务配置文件会留下错误编辑的可能性，这可能导致该服务无法启动。
- en: 'This is where you must work smarter and not harder. Ask yourself: Is there
    a tool that can assist in such a task? Yes, the answer yet again is Ansible! Ansible
    can assist in making those many service configuration changes greatly minimizing
    typos. In [Chapter 2](ch02.html "Chapter 2. Introduction to Ansible"), *Introduction
    to Ansible*, we briefly discussed Ansible ad hoc commands. Ad hoc commands allow
    direct module commands to be run without wrapping the task into a playbook or
    role.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您必须更聪明而不是更努力的地方。问问自己：有没有工具可以帮助完成这样的任务？是的，答案再次是Ansible！Ansible可以帮助大大减少打字错误，从而进行许多服务配置更改。在[第2章](ch02.html
    "第2章。介绍Ansible")中，*介绍Ansible*，我们简要讨论了Ansible的临时命令。临时命令允许直接运行模块命令，而无需将任务包装成playbook或role。
- en: 'A basic example of an ad hoc command would look like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 临时命令的基本示例如下：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In our situation, we need to connect to a specific container running on the
    control plane and make a change to that services configuration file. This needs
    to be repeated for each core service running on that active region. Good news
    is that we can leverage the dynamic inventory part of the openstack-ansible deployment
    to make the overall process simpler. Let's use the following example as a sample
    to show how it can be accomplished.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们需要连接到运行在控制平面上的特定容器，并更改该服务的配置文件。这需要针对在该活动区域上运行的每个核心服务重复进行。好消息是，我们可以利用openstack-ansible部署的动态清单部分来简化整个过程。让我们使用以下示例作为示例，展示如何完成这个过程。
- en: 'In this example, we will attempt to make the required changes to the image
    service (Glance) on the Alpha region. So, the things we know are:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将尝试对Alpha区域的镜像服务（Glance）进行所需的更改。所以，我们知道的是：
- en: You must connect to the Glance container
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须连接到Glance容器
- en: Using the `sed` command, we will need to leverage the shell Ansible module
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`sed`命令，我们需要利用shell Ansible模块
- en: We have a `sed` command prepared that will change the `auth_url` value within
    the `glance-api.conf` file
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们准备了一个`sed`命令，将更改`glance-api.conf`文件中的`auth_url`值
- en: 'A further breakdown of the command parameters would now be:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，命令参数的进一步细分将是：
- en: '[PRE12]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In order to leverage the dynamic inventory feature part of the *openstack-ansible
    install*, you must execute these commands from the deployment node (the node used
    to deploy the region). As well as, you much execute the commands while within
    the `/opt/openstack-ansible/playbooks` directory.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了利用*openstack-ansible安装*的动态清单功能，您必须从部署节点（用于部署该区域的节点）执行这些命令。此外，您必须在`/opt/openstack-ansible/playbooks`目录中执行这些命令。
- en: 'A working example of the command would then look like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的一个工作示例将如下所示：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can use the preceding principles to make the required changes to all the
    services on your active regions. Make sure to remember to restart the services
    after the configuration file changes are made.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用前面的原则对活动区域上的所有服务进行所需的更改。确保记住在更改配置文件后重新启动服务。
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Coding the playbooks and roles
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写playbooks和roles
- en: In this section, we will now create the playbooks and roles to set up the Admin
    region. We will also then outline the Ansible ad hoc commands needed to complete
    the other steps to set up the Active-Active clouds. When creating Ansible automation
    code for something of this nature, I typically like to create multiple tasks broken
    out into separate roles. This format allows you to be able to reuse roles created
    with other playbooks. We will end up with two playbooks and two roles to automate
    the steps to set up the Admin region. In the end, we will then recap the playbooks
    consuming those roles.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建playbooks和roles来设置管理区域。我们还将概述设置Active-Active云所需的Ansible临时命令的其他步骤。在为这类事情创建Ansible自动化代码时，我通常喜欢创建多个任务，分解成单独的角色。这种格式允许您能够重用与其他playbooks创建的角色。最终，我们将得到两个playbooks和两个角色，以自动化设置管理区域的步骤。最后，我们将总结使用这些角色的playbooks。
- en: In the other half of this section, we will also outline the Ansible ad hoc commands
    needed to complete the other steps to set up the Active-Active clouds. You could
    surely collect the commands together to create playbooks and roles. I felt that
    this would be a few hundred lines of unnecessary code, so I went with drafting
    the commands and using search-and-replace.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的另一半中，我们还将概述设置Active-Active云所需的Ansible临时命令。您可以收集命令以创建playbooks和roles。我觉得这将是几百行不必要的代码，所以我选择了起草命令并使用搜索和替换。
- en: Setting up the Admin region
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置管理区域
- en: 'The first role we will create will include those tasks needed to configure
    the Admin region. The name of the file will be `main.yml`, located within the
    role directory named `config-admin-region/tasks`. The contents of this file will
    look like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建的第一个角色将包括配置管理区域所需的任务。文件的名称将是`main.yml`，位于名为`config-admin-region/tasks`的角色目录中。该文件的内容将如下所示：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The first task will create the service user accounts on the Admin region. The
    second task will then assign the admin role to the users just created. The last
    task will then create the placeholder for the services hosted on the active regions.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个任务将在管理区域创建服务用户帐户。然后，第二个任务将分配管理员角色给刚刚创建的用户。最后一个任务将在活动区域创建服务的占位符。
- en: 'The next role to be created will handle the tasks of registering each region''s
    endpoints within the Admin region. Just as with the previous role, the file will
    be named `main.yml`, located within the role directory named `register-endpoints/tasks`.
    The contents of this file will look like this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要创建的角色将处理在管理区域内注册每个区域端点的任务。与前一个角色一样，文件的名称将是`main.yml`，位于名为`register-endpoints/tasks`的角色目录中。该文件的内容将如下所示：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The role only has one task that is to use the CLI command of service endpoint
    `create to register` the endpoints. In this circumstance, we used the `with_together`
    parameter so that we could loop through the four parameters defined as variables.
    This way you can rerun the playbook with only having to adjust the variable values.
    As in our case, we would need to run this playbook twice, one for internal endpoints
    and one for the public endpoints.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 该角色只有一个任务，即使用服务端点`create to register`的CLI命令来注册端点。在这种情况下，我们使用了`with_together`参数，以便可以循环遍历四个变量定义的参数。这样，您可以只需调整变量值就可以重新运行playbook。在我们的情况下，我们需要运行这个playbook两次，一次用于内部端点，一次用于公共端点。
- en: To support these roles, we now need to create the variable file that will go
    along with it. For these two roles, we will use role-defined variable files to
    simplify things a bit. The variable file will be stored within the `role` directory
    inside another directory named `vars`. The file inside of that directory will
    be named `main.yml`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持这些角色，我们现在需要创建与之配套的变量文件。对于这两个角色，我们将使用角色定义的变量文件来简化一些事情。变量文件将存储在`role`目录中，另一个名为`vars`的目录中。该目录中的文件将命名为`main.yml`。
- en: 'The contents of the variable file corresponding to the role named `config-admin-region`
    will look like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 与名为`config-admin-region`的角色对应的变量文件的内容如下：
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The contents of the second variable file corresponding to the role named `register-endpoints`
    will look like this:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 与名为`register-endpoints`的角色对应的第二个变量文件的内容如下：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Keep in mind that the values defined in the variable file are intended to be
    changed before each execution for normal everyday use.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，变量文件中定义的值旨在在每次执行正常日常使用之前更改。
- en: 'Let''s take a moment to break down the variables and their expected use. The
    summary would be:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间来分解变量及其预期用途。总结如下：
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With the variable file completed, we can move on to creating the master playbook
    files. For our demonstration, I decided to break up the playbook files into two
    separate files. This was totally my choice and could be combined into one file
    with no issues. I felt that having two separate master playbooks would make it
    easier to rerun when you need to register multiple sets of endpoints. The list
    of playbook files will be described here:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 变量文件完成后，我们可以继续创建主剧本文件。为了演示，我决定将剧本文件分成两个单独的文件。这完全是我的选择，可以合并成一个文件而不会出现问题。我觉得有两个单独的主剧本会更容易在需要注册多组端点时重新运行。以下是剧本文件的列表：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The playbook and role names can be anything you choose. Specific names have
    been provided here in order to allow you to easily follow along and reference
    the completed code found in the GitHub repository. The only warning is whatever
    you decide to name the roles must remain uniform when referenced from within the
    playbook(s).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 剧本和角色的名称可以是您选择的任何内容。这里提供了具体的名称，以便您可以轻松跟踪并引用GitHub存储库中找到的完成代码。唯一的警告是，无论您决定如何命名角色，在剧本中引用时必须保持统一。
- en: Setting up Active regions
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置活动区域
- en: This is where we will use the Ansible ad hoc commands to finish up the configuration.
    As mentioned earlier, we will leverage the dynamic inventory capabilities part
    of openstack-ansible deployment model to accomplish this. These commands will
    reconfigure the OpenStack services to use the Admin region to authenticate. Here
    is a snippet of the commands that you need to execute to reconfigure the core
    services on each region becoming part of the Active-Active region setup.  The
    full list of commands can be found in the **os-admin-with-ansible/os-admin-with-ansible-v2**
    Github repository within a file named `configure-region-authentication.txt` located
    on the `root` directory.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将使用Ansible临时命令完成配置的地方。如前所述，我们将利用openstack-ansible部署模型的动态清单功能来实现这一目标。这些命令将重新配置OpenStack服务以使用Admin区域进行身份验证。以下是您需要执行的命令片段，以重新配置每个区域上的核心服务，成为Active-Active区域设置的一部分。完整的命令列表可以在**os-admin-with-ansible/os-admin-with-ansible-v2**
    Github存储库中的`root`目录中的名为`configure-region-authentication.txt`的文件中找到。
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The approach I have found to be the best and most efficient is to do a search
    for the placeholder of `<admin region IP>` and replace it with the public IP or
    internal IP associated with Admin region. You can do it with any text editor and
    it can be set with commands to execute against any region.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现最好和最有效的方法是搜索占位符`<admin region IP>`并将其替换为与Admin区域关联的公共IP或内部IP。您可以使用任何文本编辑器进行操作，并且可以设置为针对任何区域执行的命令。
- en: Well done everyone! You just configured your OpenStack cloud with multiple regions
    that are all active. As always, for us to keep up with our tradition, we will
    finish up the chapter with a quick review of the playbook and role just created.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 大家做得很好！您刚刚配置了具有多个活动区域的OpenStack云。与往常一样，为了保持我们的传统，我们将以快速回顾刚刚创建的剧本和角色结束本章。
- en: Reviewing playbooks and roles
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查剧本和角色
- en: Let's jump right into examining the roles we created.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即开始检查我们创建的角色。
- en: 'The completed role and file, named `main.yml`, located in the `config-admin-region/tasks`
    directory, looks like this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的角色和文件名为`main.yml`，位于`config-admin-region/tasks`目录中，如下所示：
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The completed role and file, named `main.yml`, located in the `register-endpoints/tasks`
    directory, looks like this:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的角色和文件名为`main.yml`，位于`register-endpoints/tasks`目录中，如下所示：
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The corresponding role local variable files are both named `main.yml` and are
    saved to the `vars` directory of the role:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的角色本地变量文件都命名为`main.yml`，并保存在角色的`vars`目录中：
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Next, we created the following master playbook files; all will be located in
    the `root` directory of the `playbook` directory:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建了以下主剧本文件；所有文件都位于`playbook`目录的`root`目录中：
- en: '`config-admin.yml`:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config-admin.yml`：'
- en: '[PRE25]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`register-endpoints.yml`:'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`register-endpoints.yml`：'
- en: '[PRE26]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the end of this, we created the `hosts` file, which also is located in the
    `root` directory of the `playbook` directory:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建了`hosts`文件，它也位于`playbook`目录的`root`目录中：
- en: '[PRE27]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete set of code can again be found in the GitHub repository at [https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2](https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码集可以再次在GitHub存储库中找到[https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2](https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2)。
- en: 'Now the fun part, time to test out our new playbooks and roles. You will need
    to also execute the additional ad hoc commands described earlier to completely
    test out this functionality. Assuming that you have cloned the GitHub repository
    mentioned earlier, the command to test out the playbook from the Deployment node
    would be as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是有趣的部分，是时候测试我们的新playbooks和角色了。您还需要执行之前描述的额外的临时命令，以完全测试此功能。假设您已经克隆了之前提到的GitHub存储库，从部署节点测试playbook的命令将如下所示：
- en: '[PRE28]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, you would execute the commands found in the file named `configure-region-authentication.txt`,
    located in the `root` directory of the `playbook` directory. If all went well
    you would be able to log into the web dashboard of the Admin region and see the
    following when you click on the project name on the top header of the page:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将执行`configure-region-authentication.txt`文件中的命令，该文件位于`playbook`目录的`root`目录中。如果一切顺利，您将能够登录到管理区域的Web仪表板，并在页面顶部标题中单击项目名称时看到以下内容：
- en: '![Reviewing playbooks and roles](graphics/B06086_08_09.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![审查playbooks和角色](graphics/B06086_08_09.jpg)'
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Yes! You just set up your OpenStack cloud in an Active-Active design. The flexibility
    and reliability you just gained solves for most mainstream HA requirements. Have
    fun jumping between the regions and separating out your application resources
    within one or two clicks. Before concluding this chapter, let's take a moment
    to recap this chapter. We talked through the benefits that OpenStack offers out
    of the box to handle high-availability requirements. Then, we transitioned to
    some possible reasons you would want to use Active-Active cloud regions. Next,
    we walked through the steps of how to set up the Active-Active cloud regions.
    Finally, we developed Ansible playbooks and roles to automate setting up the Admin
    region.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 是的！您刚刚在Active-Active设计中设置了您的OpenStack云。您刚刚获得的灵活性和可靠性解决了大多数主流HA要求。在区域之间跳转并在一两次点击内分离应用程序资源会很有趣。在结束本章之前，让我们花点时间回顾一下本章。我们讨论了OpenStack提供的开箱即用的处理高可用性要求的好处。然后，我们过渡到您可能想要使用Active-Active云区域的一些可能原因。接下来，我们将介绍如何设置Active-Active云区域的步骤。最后，我们开发了Ansible
    playbooks和角色来自动设置管理区域。
- en: The next chapter happens to also be something that came in as a customer demand
    for a pretty large OpenStack cloud. There is no cloud operator out there who does
    not want to know or have a complete inventory of their cloud. Tracking resources,
    auditing users, and recapping network utilization are just a few things part of
    the daily/weekly routine for us. Imagine that you can have a complete report created
    in one command. Is it possible? Well I am not telling. You will have to read on
    to [Chapter 9](ch09.html "Chapter 9. Inventory Your Cloud"), *Inventory your Cloud*,
    to find out.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章恰好也是一个相当大的OpenStack云作为客户需求而提出的。没有任何云运营商不想知道或拥有他们的云的完整清单。跟踪资源、审计用户和总结网络利用率只是我们日常/每周例行工作的一部分。想象一下，您可以通过一个命令创建完整的报告。这可能吗？好吧，我不告诉你。您将不得不继续阅读[第9章](ch09.html
    "第9章。清点您的云")，“清点您的云”，以找出答案。
