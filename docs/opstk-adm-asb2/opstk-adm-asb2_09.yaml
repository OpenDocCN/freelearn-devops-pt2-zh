- en: Chapter 9. Inventory Your Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。清单您的云
- en: I am very excited to dive into this chapter, as we will focus on a topic that
    is considered challenging when administering an OpenStack cloud. Gathering metrics
    around the system being consumed is a pretty high item on the daily priority list.
    The bad news is OpenStack does not necessarily make this an easy task. In OpenStack's
    defense, I will say that there has been great work done around the most recent
    releases to improve this. The new **OpenStackClient** (**OSC**) has done a better
    job, allowing the Cloud Operator to pull together various different metrics about
    the cloud.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常兴奋地进入这一章，因为我们将专注于在管理OpenStack云时被认为具有挑战性的一个主题。收集有关正在使用的系统的指标是日常优先事项清单上的一个非常重要的项目。坏消息是，OpenStack并不一定使这成为一项容易的任务。为了辩护OpenStack，我会说最近的版本已经做了很多工作来改进这一点。新的OpenStackClient（OSC）做得更好，允许云操作员汇总有关云的各种不同指标。
- en: In the meantime, there are ways to collect these metrics in an ad hoc fashion
    and then put a very simple report together. As with most things related to OpenStack,
    there are a few ways to approach it. After attempting to do this using multiple
    methods, I found that it was easily accomplished by executing queries against
    the OpenStack databases. I know, I know...no one wants to touch the database.
    In my past life, I used to be a DBA, and one thing I learned from that experience
    is that simple clearly defined queries are harmless to any database. Combining
    that theory and using a tool such as Ansible to pull all the information collected
    together is a winning combo. In this chapter, we will review how you can dynamically
    inventory various pieces of your OpenStack cloud resources. We will learn what
    metrics are of value and how that information can be stored for later reference
    as well. This is an extremely powerful tool to have as a Cloud operator.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，有办法以临时方式收集这些指标，然后制作一个非常简单的报告。与OpenStack相关的大多数事情一样，有几种方法可以解决。在尝试使用多种方法进行此操作后，我发现通过对OpenStack数据库执行查询很容易实现。我知道，我知道……没有人想要触碰数据库。在过去的生活中，我曾经是一名数据库管理员，从那段经历中我学到的一件事是，简单明了的查询对任何数据库都是无害的。结合这个理论，并使用诸如Ansible之类的工具将收集到的所有信息汇总在一起是一个成功的组合。在本章中，我们将回顾如何动态地对OpenStack云资源的各个部分进行清单。我们将学习哪些指标具有价值，以及如何将这些信息存储以供以后参考。作为云操作员，拥有这样一个极其强大的工具是非常有用的。
- en: Collecting cloud metrics
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集云指标
- en: User report
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户报告
- en: Project report
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目报告
- en: Network report
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络报告
- en: Volume report
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卷度报告
- en: Cloud-at-a-Glance report
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一目了然的云报告
- en: Coding the playbook and roles
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写操作手册和角色
- en: Review playbook and role
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查操作手册和角色
- en: Collecting cloud metrics
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集云指标
- en: The first step in this process is to determine what metrics are important to
    you. Keep in mind that the approach outlined here is just my very opinioned way
    of tackling this. As a Cloud operator, you may have a different way you wish to
    handle this. Use this as a springboard to get you started.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程的第一步是确定对您来说哪些指标是重要的。请记住，这里概述的方法只是我个人处理这个问题的方式。作为云操作员，您可能有不同的处理方式。将其作为一个起点来帮助您开始。
- en: From my experience, it is best to pull together user, project, network, and
    volume metrics. Then, take all that data, combine it together, and output total
    cloud utilization metrics. This is very similar to what the Horizon dashboard
    does. While it is easy to log into Horizon and do a quick review, what if you
    wanted to provide a comprehensive report to your leadership? Or maybe you wanted
    to take a point-in-time snapshot to compare cloud utilization over a time period.
    There may be a possible requirement to audit your cloud one day. There exists
    no real easy way to do this in a report format without using a third-party tool.
    All these scenarios can be satisfied using the approach outlined next.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，最好汇总用户、项目、网络和卷度指标。然后，将所有数据合并在一起，输出总的云利用率指标。这与Horizon仪表板的功能非常相似。虽然登录Horizon并进行快速审查很容易，但如果您想向领导提供全面的报告呢？或者您可能想要拍摄一个时间点的快照，以比较一段时间内的云利用情况。将来可能需要对您的云进行审计。在不使用第三方工具的情况下，没有真正简单的方法以报告格式来做到这一点。下面的方法可以满足所有这些情况。
- en: Let's start at the beginning by taking a look at collecting user metrics first.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从收集用户指标开始。
- en: User report
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户报告
- en: 'Capturing information about the users defined in your cloud is probably the
    simplest metric to record. When the day comes that you have to audit your cloud
    for compliance and security reasons, you will note that you list out the users
    and even list out the roles assigned to users, but not both together. Similarly,
    you can list out the users in a project but not the role assigned to that user
    for that project together. You can see where I am going with this. It would only
    make sense to have a complete list of the users with their IDs, what roles they
    are assigned, and to what project(s) they have access to in one report. Using
    the following simple database query you can very easily attain this information:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获有关云中定义的用户的信息可能是记录的最简单的指标。当有一天您必须因合规性和安全原因对您的云进行审计时，您会注意到您列出了用户，甚至列出了分配给用户的角色，但没有将两者结合在一起。同样，您可以列出项目中的用户，但没有将分配给该用户的项目的角色一起列出。您可以看出我要说的是什么。将用户的完整列表与他们的ID、分配给他们的角色以及他们可以访问的项目一起列在一份报告中是很有意义的。使用以下简单的数据库查询，您可以非常容易地获得这些信息：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This query will combine data from four different tables within the database
    named **keystone**. The keystone database is the owner of all the user-related
    data. Each table within the database has at least one primary key that can be
    used to link the data together. Here is a quick breakdown of the tables used here
    and their functions:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询将结合数据库中名为keystone的四个不同表的数据。keystone数据库是所有与用户相关的数据的所有者。数据库中的每个表至少有一个可以用来将数据联系在一起的主键。以下是这里使用的表及其功能的快速概述：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, we will focus on only pulling back the necessary columns from
    the four tables. To make things a bit easier to read, we also renamed a few of
    the column labels. Finally, we will sort the data by the project name in an ascending
    order to give us a clean and easy output. I promise not to go much further into
    the weeds on this SQL query. This is a book on OpenStack and Ansible, not SQL
    commands, right?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将专注于从四个表中只拉回必要的列。为了让事情变得更容易阅读，我们还重新命名了一些列标签。最后，我们将按项目名称按升序对数据进行排序，以便得到清晰和简单的输出。我保证不会在这个SQL查询中深入探讨太多。这是一本关于OpenStack和Ansible的书，不是SQL命令，对吧？
- en: Tip
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Always try to use the ID column of the table to link data from other tables
    when possible. The ID column will always be a unique value that will provide reliable
    data correlation every time. Using columns that contain item name values could
    eventually cause a conflict if a row exists in the table with duplicate values.
    Even OpenStack on the whole uses this approach, as you will note that anything
    created within OpenStack has an ID associated with it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 始终尝试使用表的ID列来在可能的情况下链接其他表中的数据。ID列将始终是一个唯一值，每次都会提供可靠的数据关联。如果使用包含项目名称值的列，最终可能会导致冲突，如果表中存在具有重复值的行。即使整个OpenStack也使用这种方法，您会注意到在OpenStack中创建的任何内容都有一个与之关联的ID。
- en: 'After executing this query, the output will look something similar to this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此查询后，输出将类似于以下内容：
- en: '![User report](graphics/image_09_001.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![用户报告](graphics/image_09_001.jpg)'
- en: Project report
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目报告
- en: 'Having a clear view of what project(s) exist within your cloud and the resources
    being used can be very valuable throughout the overall cloud lifecycle. Doing
    department or division chargebacks seems to be a very popular approach in recent days.
    Pulling these metrics as a point-in-time resources review can provide clarity
    around how many resources each project is using. To successfully accomplish this,
    the vCPU, memory, and disk metrics must be collected for each project. Using the
    following simple database query, you can very easily attain this information:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个云生命周期中，清晰地了解云中存在的项目和正在使用的资源可以非常有价值。最近，部门或部门费用分摊似乎是一种非常流行的方法。将这些指标作为时间点资源审查可以清楚地了解每个项目正在使用多少资源。为了成功完成这一点，必须为每个项目收集vCPU、内存和磁盘指标。使用以下简单的数据库查询，您可以非常容易地获得这些信息：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This query will combine data from two different tables that live within two
    separate databases, `nova` and `keystone`. The `nova` database is the owner of
    all the instance-related data. The `keystone` database was reviewed in the earlier
    section. Just as in the previous example, each table has at least one primary
    key. Here is a quick breakdown of the tables used here and their functions:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此查询将合并来自两个不同数据库（`nova`和`keystone`）中的数据。`nova`数据库拥有所有与实例相关的数据。`keystone`数据库在前面的部分中已经审查过。就像之前的例子一样，每个表至少有一个主键。以下是这里使用的表及其功能的快速概述：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In order to attain this data, we had to get a bit crafty and pull the resource
    metrics directly from the table containing the raw instance information. If we
    had Ceilometer installed, there would be a specific database where these metrics
    were recorded on a much more micro level. Since we do not have this functionality
    available at the present time, this method is the best thing available. In this
    query, we will again only return the necessary columns and rename column labels.
    In the end, we will narrow down the output to include only active instances and
    sort the data by the project name in ascending order. So, by pulling the resource
    information about each instance and correlating it to each project where the instance
    belongs, we are able to create simple output similar to this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得这些数据，我们必须有点巧妙，并直接从包含原始实例信息的表中提取资源指标。如果我们安装了Ceilometer，将会有一个特定的数据库，记录这些指标在更微观的水平上。由于我们目前没有这个功能，这种方法是目前可用的最好方法。在此查询中，我们将再次只返回必要的列并重新命名列标签。最后，我们将缩小输出范围，只包括活动实例，并按项目名称按升序对数据进行排序。因此，通过获取每个实例的资源信息并将其与实例所属的每个项目相关联，我们能够创建类似于这样的简单输出：
- en: '![Project report](graphics/image_09_002.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![项目报告](graphics/image_09_002.jpg)'
- en: Network report
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络报告
- en: 'Having a snapshot of the Neutron networks created on your cloud may not seem
    critical to managing your overall OpenStack cloud. Trust me in the big picture
    it is. Unnecessary or incorrectly configured networks could add latency to overall
    cloud functionality. It is not the network directly that could cause this, but
    rather the security groups related to each project(s) network existing. This information
    can mainly aid in troubleshooting project-reported issues. It provides a quick
    reference as to what networks exist within what project and the network **Classless
    Inter-Domain Routing (CIDR)** aka network address space associated. Natively,
    the networking service (Neutron) within one command does not provide such a report.
    Just as earlier, we will pull this information directly from the database. Using
    the following simple database query, we will collect the network ID, name, subnet,
    CIDR assigned, status, and associated project:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的云上创建的Neutron网络的快照可能看起来对管理整个OpenStack云并不重要。相信我，在大局中是重要的。不必要或配置不正确的网络可能会给整个云功能增加延迟。直接导致这种情况的并不是网络本身，而是与每个项目相关的安全组的存在。这些信息主要可以帮助解决项目报告的问题。它提供了一个快速参考，了解每个项目中存在哪些网络以及与之关联的网络**无类域间路由选择（CIDR）**，即网络地址空间。在本地，网络服务（Neutron）在一个命令中并不提供这样的报告。就像之前一样，我们将直接从数据库中提取这些信息。使用以下简单的数据库查询，我们将收集网络ID、名称、子网、分配的CIDR、状态和关联的项目：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'For this query, we will combine data from three different tables that live
    within two separate databases, `neutron` and `keystone`. The `neutron` database
    is the owner of all the network-related data. Here is a quick breakdown of the
    tables used here and their functions:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个查询，我们将合并来自两个不同数据库`neutron`和`keystone`中的三个不同表的数据。`neutron`数据库拥有所有与网络相关的数据。以下是这里使用的表及其功能的快速概述：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Collecting these metrics was rather straightforward because most of the data
    existed within the networks table. All we had to do is pull in the matching CIDR
    taken from the subnet table and then bring in the project name associated with
    that network. While putting this query together, I noticed that there was an issue
    joining the `keystone` and `neutron` database tables. Apparently, the `neutron`
    database defined the schema for the ID column differently, and the following value
    had to be added to the inner join statement: `COLLATE utf8_unicode_ci`. In the
    end, the output will be sorted by the project names in ascending order. An example
    of the output will look similar to this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 收集这些指标相当简单，因为大部分数据都存在于网络表中。我们所要做的就是从子网表中提取匹配的CIDR，然后引入与该网络相关联的项目名称。在组合这个查询的过程中，我注意到`keystone`和`neutron`数据库表之间存在连接问题。显然，`neutron`数据库对ID列的模式定义不同，因此必须在内部连接语句中添加以下值：`COLLATE
    utf8_unicode_ci`。最终，输出将按项目名称按升序排序。输出的示例将类似于：
- en: '![Network report](graphics/image_09_003.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![网络报告](graphics/image_09_003.jpg)'
- en: Volume report
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 卷报告
- en: 'The capability to have detailed reports on the overall volume consumption within
    the cloud seems to be rather a big gap currently within OpenStack. The Block Storage
    service (Cinder) is responsible for maintaining and tracking the volumes within
    the cloud. To get accurate metrics, we would need to query Cinder directly. It
    would be nice to have a report to breakdown the number of volumes created per
    project. Then, be able to have a quick roll-up report to show how much volume
    storage each project is using. Now since Cinder supports multiple storage backends,
    you would be best to keep track of the volume type consumption as well. As Cinder
    matures, I am sure that this will become an easier task, but for now, we can again
    query the database directly to pull out the metrics we are seeking. The following
    are examples of the database queries used to collect these metrics:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中对整体卷消耗进行详细报告的能力似乎是OpenStack目前的一个较大的空白。块存储服务（Cinder）负责在云中维护和跟踪卷。为了获得准确的指标，我们需要直接查询Cinder。能够有一份报告来分解每个项目创建的卷的数量将是很好的。然后，能够有一个快速的汇总报告来显示每个项目使用了多少卷存储。现在由于Cinder支持多个存储后端，最好跟踪卷类型的消耗情况。随着Cinder的成熟，我相信这将成为一个更容易的任务，但目前，我们可以再次直接查询数据库以提取我们正在寻找的指标。以下是用于收集这些指标的数据库查询的示例：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For this query, at least three separate tables were involved with two databases,
    `cinder` and `keystone`. As you can see, collecting this information was quite
    involved. It required us to issue three separate `SELECT` statements. The first
    `SELECT` statement will correlate the raw volume information from the volumes
    table with the project data from the keystone table. Also, within this same statement,
    we will include the name of the volume type. Since the volumes table contains
    both active and inactive volumes, there had to be an additional filter applied
    to return only the active volumes. The complete output will then be sorted by
    the project name in ascending order. The output for the first query will look
    similar to this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个查询，至少涉及两个数据库`cinder`和`keystone`中的三个不同表。如您所见，收集这些信息相当复杂。我们需要发出三个单独的`SELECT`语句。第一个`SELECT`语句将从卷表中关联原始卷信息和来自keystone表的项目数据。此外，在同一个语句中，我们将包括卷类型的名称。由于卷表包含活动和非活动卷，必须应用额外的过滤器来仅返回活动卷。完整的输出将按项目名称按升序排序。第一个查询的输出将类似于这样：
- en: '![Volume report](graphics/image_09_004.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![卷报告](graphics/image_09_004.jpg)'
- en: 'The next `SELECT` statement will query the database to collect the metrics
    for the total volume consumption per project. It is very similar to the previous
    statement, but the main difference here is we are going to add the `volume_usage_GB`
    column together for each project to calculate the total consumption amounts. The
    output for the second query will look similar to this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个`SELECT`语句将查询数据库，收集每个项目的总卷消耗指标。它与前一个语句非常相似，但这里的主要区别是我们将为每个项目添加`volume_usage_GB`列，以计算总消耗量。第二个查询的输出将类似于这样：
- en: '![Volume report](graphics/image_09_005.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![卷报告](graphics/image_09_005.jpg)'
- en: 'The final `SELECT` statement focuses on reporting the volume type consumption.
    Since the volume''s table only records the volume type ID, we had to inner join
    the `volume_types` table to pull in the actual volume name defined when created.
    This was something also done for the other previously mentioned statements. The
    output for the third query will look similar to this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的`SELECT`语句专注于报告卷类型的消耗情况。由于卷表仅记录卷类型ID，我们必须内部连接`volume_types`表，以引入创建时定义的实际卷名称。这也是之前提到的其他语句所做的事情。第三个查询的输出将类似于：
- en: '![Volume report](graphics/image_09_006.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![卷报告](graphics/image_09_006.jpg)'
- en: Cloud-at-a-Glance report
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一览云报告
- en: 'This report is meant to be a very quick snapshot of the clouds overall consumption.
    It pulls back the total number of users, projects, volumes, and networks existing
    within your cloud. As well as, the total number of vCPU, memory, and ephemeral
    disk currently used. Here are the database queries used to collect this data:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这份报告旨在快速概述云的整体消耗情况。它返回云中存在的用户、项目、卷和网络的总数。以及当前使用的vCPU、内存和临时磁盘的总数。以下是用于收集这些数据的数据库查询：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `SELECT` statements used basically add together the columns from the table
    being called. The column name is then renamed to a more descriptive label and
    finally filtered to ignore any rows not in an active state. Once executed, the
    output of the preceding queries will look similar to this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上使用的`SELECT`语句是将被调用的表中的列相加。然后将列名重命名为更具描述性的标签，最后进行过滤，忽略任何不处于活动状态的行。一旦执行，前面查询的输出将类似于这样：
- en: '![Cloud-at-a-Glance report](graphics/image_09_007.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![一览云报告](graphics/image_09_007.jpg)'
- en: Now that we know how to collect the metrics for our reports, let's go and learn
    how we can automate this task completely.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何收集报告的指标，让我们去学习如何完全自动化这个任务。
- en: Coding the playbooks and roles
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写playbooks和roles
- en: In this section, we will now create the playbook and roles to generate a comprehensive
    *Cloud Report*. Once the playbook is executed, the output and end result will
    be two reports consisting of the information we learned how to collect in the
    previous section. These two reports will be saved into a directory determined
    by you for retrieval. At that point, you can literally send it to leadership and/or
    peers for review. In the next chapter, we will learn how you can take things further
    and directly e-mail out the report as an added bonus.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建playbook和roles来生成全面的*云报告*。一旦执行playbook，输出和最终结果将是两份报告，包括我们在上一节中学习如何收集的信息。这两份报告将保存在您确定的目录中以便检索。在那时，您可以直接将其发送给领导和/或同行进行审查。在下一章中，我们将学习如何进一步进行，并直接通过电子邮件发送报告作为额外的奖励。
- en: Very similar to the previous chapter, we will break up the multiple tasks into
    separate roles to keep things organized. We will next review the six roles used
    to automate creating our Cloud Report.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章非常相似，我们将将多个任务分解为单独的角色，以保持组织。接下来，我们将审查用于自动创建我们的云报告的六个角色。
- en: cloud-inventory
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云清单
- en: 'The first role we will create will include those tasks needed to set up the
    foundation for the cloud report. The name of the file will be `main.yml` located
    within the role directory named `cloud-inventory/tasks`. The contents of this
    file will look like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建的第一个角色将包括设置云报告基础所需的任务。文件名将是`main.yml`，位于名为`cloud-inventory/tasks`的角色目录中。该文件的内容将如下所示：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The first three tasks are simply handling the prerequisite steps needed to create
    the report. This would include creating the directory where the report is saved,
    coping with the SQL script to be executed, and adding the header to the report.
    The overall idea is to create a visually appealing, accurate, and flexible report.
    This is accomplished by adding the report run time/date dynamically and naming
    the report accordingly. The final task will execute the `cloud_report.sql` file
    directly against the MySQL databases found in the Galera container of your cloud.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个任务只是处理创建报告所需的先决步骤。这将包括创建报告保存的目录，处理要执行的SQL脚本，并向报告添加标题。总体思路是创建一个视觉上吸引人、准确且灵活的报告。这是通过动态添加报告运行时间/日期并相应命名报告来实现的。最后一个任务将直接针对云中Galera容器中找到的MySQL数据库执行`cloud_report.sql`文件。
- en: The `cloud_report.sql` file contains the SQL query described in the **Cloud-at-a-Glance**
    Report section earlier. This file can be found within the `cloud-inventory/files`
    directory of this role.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`cloud_report.sql`文件包含前面**一览云报告**部分中描述的SQL查询。该文件可以在此角色的`cloud-inventory/files`目录中找到。'
- en: cloud-usage
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云使用
- en: 'The next role in the line-up will create the second report that will outline
    the current cloud utilization broken down per project. The file will be named
    `main.yml` located within the role directory named `cloud-usage/tasks`. The contents
    of this file will look like this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的角色将创建第二份报告，概述当前云利用率按项目分解。该文件将命名为`main.yml`，位于名为`cloud-usage/tasks`的角色目录中。该文件的内容将如下所示：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'All the report pre-setup work is being handled in the first and third task
    shown earlier (creating the report directory and header). To gather the metrics
    we needed for this report, we can use native OpenStack CLI commands. The two commands
    used are: `openstack project list` and `usage show`. These commands are executed
    as part of the second and fourth tasks shown above. The last task in this role
    will retrieve the report from the remote location and move it locally to where
    the playbook/roles are executed.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所有报告的预设置工作都在前面显示的第一和第三个任务中处理（创建报告目录和标题）。为了收集我们需要的报告指标，我们可以使用本机OpenStack CLI命令。使用的两个命令是：`openstack
    project list`和`usage show`。这些命令作为上面显示的第二和第四个任务的一部分执行。此角色中的最后一个任务将从远程位置检索报告并将其移动到playbook/roles执行的本地位置。
- en: user-inventory
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户清单
- en: 'This role will be responsible for executing **User Report** described in the
    earlier section. The file will be named `main.yml` within the role directory name
    `user-inventory/tasks`. Here, you will find the contents of this file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 该角色将负责执行前面部分描述的**用户报告**。文件将命名为`main.yml`，位于名为`user-inventory/tasks`的角色目录中。在这里，您将找到该文件的内容：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In an attempt to make the reports modular and not dependent on each other, I
    had each role create a report working directory and inserted report-specific headers.
    This way, you can include or exclude whichever roles/reports you wish.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使报告模块化且不相互依赖，我让每个角色创建一个报告工作目录并插入特定于报告的标题。这样，您可以包含或排除您希望的任何角色/报告。
- en: 'The basic principle used to create this role will be repeated for the remaining
    roles. It consists of the following steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 用于创建此角色的基本原则将重复用于其余角色。它包括以下步骤：
- en: Create the report working directory; if the directory already exists, it will
    continue reporting no error
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建报告工作目录；如果目录已经存在，它将继续报告无错误
- en: Copy the SQL script to the remote location
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将SQL脚本复制到远程位置
- en: Add custom header information to the report
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向报告添加自定义标题信息
- en: Execute the SQL script to generate the specific subreport
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行SQL脚本以生成特定子报告
- en: The `user_report.sql` file contains the SQL query described in the earlier section
    covering the **User Report**. Now that we have the framework defined, we can move
    quickly through the remaining roles.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`user_report.sql`文件包含了前面部分描述的**用户报告**中的SQL查询。现在我们已经定义了框架，我们可以快速地完成剩下的角色。'
- en: project-inventory
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: project-inventory
- en: 'The purpose of this role is to execute the **Project Report** we reviewed in
    the earlier section. The file will be named `main.yml` within the role directory
    named `project-inventory/tasks`. Here, you will find the contents of this file:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个角色的目的是执行我们在前面部分审查过的**项目报告**。文件将被命名为`main.yml`，存放在名为`project-inventory/tasks`的角色目录中。在这里，你会找到这个文件的内容：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Since this role will follow the same steps outlined for the user-inventory role,
    we will draw attention to the unique function executed. For this role, the `project_report.sql`
    file will contain the SQL query described in the **Project Report** section earlier.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个角色将遵循为用户清单角色概述的相同步骤，我们将注意力集中在执行的独特功能上。对于这个角色，`project_report.sql`文件将包含前面**项目报告**部分中描述的SQL查询。
- en: network-inventory
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: network-inventory
- en: 'The purpose of this role is to execute the **Network Report** we reviewed in
    the earlier section. The file will be named `main.yml` within the role directory
    named `network-inventory/tasks`. Here, you will find the contents of this file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个角色的目的是执行我们在前面部分审查过的**网络报告**。文件将被命名为`main.yml`，存放在名为`network-inventory/tasks`的角色目录中。在这里，你会找到这个文件的内容：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: volume-inventory
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: volume-inventory
- en: 'This last role will execute the final subreport, which is the **Volume Report**
    we covered earlier. The file will be named `main.yml` within the role directory
    named `volume-inventory/tasks`. Here, you will find the contents of this file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最后的角色将执行我们之前涵盖的**卷报告**的最终子报告。文件将被命名为`main.yml`，存放在名为`volume-inventory/tasks`的角色目录中。在这里，你会找到这个文件的内容：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: One special thing worth noting for this role is the last task uses the `fetch`
    Ansible module to retrieve the report created from the remote location where it
    was created. This is the same behavior used in the cloud-usage role. Personally,
    I thought this module was very convenient and kept us from having to handle a
    series of secure copy commands. That is never a good time for anyone.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的一件特别的事情是，这个角色的最后一个任务使用`fetch` Ansible模块从远程位置检索创建的报告。这与云使用角色中使用的行为相同。就个人而言，我觉得这个模块非常方便，让我们不必处理一系列的安全复制命令。这对任何人来说都不是一个好时机。
- en: To support these roles, we now need to create the variable files that will go
    along with it. Since we will use two separate hosts to execute the series of roles
    against, there will be two global variable files needed. The file names are `util_container`
    and `galera_container`, and they will be saved to the `group_vars/` directory
    of the playbook.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持这些角色，我们现在需要创建与之配套的变量文件。由于我们将使用两个单独的主机来执行一系列角色，所以需要两个全局变量文件。文件名分别是`util_container`和`galera_container`，它们将被保存到playbook的`group_vars/`目录中。
- en: Tip
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Keep in mind that the values defined in the variable file are intended to be
    changed before each execution for normal everyday use.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，变量文件中定义的值是为了在正常的日常使用中在每次执行前进行更改的。
- en: 'You should note a few new variables that were defined for the new roles. Among
    the standard variables needed to authenticate into your OpenStack cloud, we have
    added some new variables related to the report creation and location:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该注意到为新角色定义的一些新变量。除了用于认证进入你的OpenStack云的标准变量之外，我们还添加了一些与报告创建和位置相关的新变量：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Word of caution:**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**'
- en: Due to the contents of this file, it should be stored as a secure file within
    whatever code repository you may use to store your Ansible playbooks/roles. Gaining
    access to this information could compromise your OpenStack cloud security.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个文件的内容，它应该被存储为一个安全文件，无论你使用什么代码库来存储你的Ansible playbooks/roles。获取这些信息可能会危及你的OpenStack云安全。
- en: 'Let''s take a moment to break down the new variables. The summary is:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间来分解新的变量。总结如下：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Since there are two global variable files that share the same variable names,
    please make sure to keep the variable value in sync if you want both reports in
    the same directory. This is not a requirement, as each report (Cloud Report and
    Cloud Usage) can exist independently. Just felt like it was worth mentioning as
    to not to cause confusion.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于有两个共享相同变量名的全局变量文件，请确保如果你希望两个报告存在于同一个目录中，保持变量值同步。这不是一个要求，因为每个报告（云报告和云使用）都可以独立存在。只是觉得值得一提，以免引起混淆。
- en: 'With the variable file completed, we can move on to creating the master playbook
    file. Since our goal is to create one report on the clouds resources (remember
    that we added the Cloud Usage report as a bonus), we will call all the roles from
    one playbook. The complete contents of the playbook file will end up looking similar
    to this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 变量文件完成后，我们可以继续创建主要的playbook文件。由于我们的目标是创建一个关于云资源的报告（记住我们将云使用报告作为奖励添加了进来），我们将从一个playbook中调用所有的角色。playbook文件的完整内容最终看起来会类似于这样：
- en: '[PRE16]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As mentioned, all the roles we created to inventory the cloud will be executed
    in the order displayed in the playbook. All the roles use the same host with the
    exception of the cloud-usage role. The reason behind this is that we used OpenStack
    CLI commands in that role and that then required the use of the `util_container`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 正如提到的，我们创建的所有用于清点云的角色将按照playbook中显示的顺序执行。所有的角色都使用相同的主机，除了云使用角色。背后的原因是我们在那个角色中使用了OpenStack
    CLI命令，这就需要使用`util_container`。
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The playbook and role names can be anything you choose. Specific names have
    been provided here in order to allow you to easily follow along and reference
    the completed code found in the GitHub repository. The only warning is that whatever
    you decide to name the roles, it must remain uniform when referenced from within
    the playbook(s).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: playbook和role的名称可以是您选择的任何内容。这里提供了具体的名称，以便您可以轻松地跟踪并引用GitHub存储库中找到的已完成代码。唯一的警告是，无论您决定如何命名角色，当在playbook中引用时，它必须保持统一。
- en: 'So since we now have one additional host involved in this playbook, we must
    add this host to your inventory file named `hosts`. With adding the new host placeholder,
    the host file will now look like this example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，由于我们现在在此playbook中涉及了一个额外的主机，我们必须将此主机添加到名为`hosts`的清单文件中。通过添加新主机占位符，主机文件现在将如下所示：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: I am extremely excited to confirm that we are now ready to start running some
    cloud reports. In keeping with our tradition, we will finish up the chapter with
    a quick review of the playbook and role just created.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我非常兴奋地确认我们现在已经准备好开始运行一些云报告了。按照我们的传统，我们将以快速回顾刚刚创建的playbook和role来结束本章。
- en: Reviewing playbooks and roles
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查playbooks和roles
- en: Let's jump right into examining the roles we created.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即开始审查我们创建的roles。
- en: 'The completed role and file named `main.yml` located in the `cloud-inventory/tasks`
    directory looks like this:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 位于`cloud-inventory/tasks`目录中的已完成的role和名为`main.yml`的文件如下所示：
- en: '[PRE18]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The completed role and file named `main.yml` located in the `cloud-usage/tasks`
    directory looks like this:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 位于`cloud-usage/tasks`目录中的已完成的role和名为`main.yml`的文件如下所示：
- en: '[PRE19]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The completed role and file named `main.yml` located in the `user-inventory/tasks`
    directory looks like this:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 位于`user-inventory/tasks`目录中的已完成的role和名为`main.yml`的文件如下所示：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The completed role and file named `main.yml` located in the `project-inventory/tasks`
    directory looks like this:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 位于`project-inventory/tasks`目录中的已完成的role和名为`main.yml`的文件如下所示：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The completed role and file named `main.yml` located in the `network-inventory/tasks`
    directory looks like this:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 位于`network-inventory/tasks`目录中的已完成的role和名为`main.yml`的文件如下所示：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The completed role and file named `main.yml` located in the `volume-inventory/tasks`
    directory looks like this:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 位于`volume-inventory/tasks`目录中的已完成的role和名为`main.yml`的文件如下所示：
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The corresponding global variable file is named `util_container` and is saved
    to the `group_vars/` directory of the complete playbook:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的全局变量文件名为`util_container`，保存在完整playbook的`group_vars/`目录中：
- en: '[PRE24]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The corresponding global variable file is named `galera_container`, and it
    is saved to the `group_vars/` directory of the complete playbook:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的全局变量文件名为`galera_container`，保存在完整playbook的`group_vars/`目录中：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now the master playbook file has been created and will be located in the `root`
    directory of the `playbook` directory:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在主playbook文件已经创建，并将位于`playbook`目录的`root`目录中：
- en: '**inventory.yml**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**inventory.yml**'
- en: '[PRE26]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Finally, we created the `hosts` file, which also is located in the `root` directory
    of the `playbook` directory:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建了`hosts`文件，也位于`playbook`目录的`root`目录中：
- en: '[PRE27]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注
- en: 'The complete set of code can again be found in the following GitHub repository:
    [https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2/tree/master/cloud-inventory](https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2/tree/master/cloud-inventory).'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码集可以在以下GitHub存储库中找到：[https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2/tree/master/cloud-inventory](https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2/tree/master/cloud-inventory)。
- en: 'Before we finish up this topic, we of course need to test out our work. At
    the end of running this playbook and roles, you will have two reports to review.
    Assuming that you have cloned the GitHub repository earlier, the command to test
    out the playbook from the Deployment node is as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束这个话题之前，当然需要测试我们的工作。在运行此playbook和roles结束时，您将有两份报告需要审查。假设您之前已经克隆了GitHub存储库，从部署节点测试playbook的命令如下：
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Assuming that the playbook ran successfully and completed with no errors, you
    will find the two reports created in the directory you specified in the global
    variable file. The report should look similar to this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 假设playbook成功运行并且没有错误，您将在全局变量文件中指定的目录中找到创建的两个报告。报告应该类似于这样：
- en: '![Reviewing playbooks and roles](graphics/image_09_008.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![审查playbooks和roles](graphics/image_09_008.jpg)'
- en: '...'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '![Reviewing playbooks and roles](graphics/image_09_009.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![审查playbooks和roles](graphics/image_09_009.jpg)'
- en: Job well done yet again! Hoping that these cloud reports can really help in
    simplifying your day-to-day OpenStack administrative tasks!
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 再次干得好！希望这些云报告能够真正帮助简化您日常的OpenStack管理任务！
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Our OpenStack administration toolbox is starting to look pretty full by this
    point in the book. Cannot stress enough how important it is to have a snapshot
    of your cloud state. These reports could be a good starting point to having that.
     Before concluding this chapter, let's take a moment to recap this chapter. Together
    we reviewed some gaps in OpenStack regarding reports on the clouds inventory and
    how you can overcome them. Then details were provided on how you can get access
    to the metrics and statistics we would need by querying the database.  Next, we
    examined the custom SQL queries used to pull out the data from the database in
    detail. Finally, we developed Ansible playbook and role to automate generating
    the cloud reports.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的OpenStack管理工具箱在本书中已经开始看起来相当丰富。强调拥有云状态的快照有多么重要是无法言喻的。这些报告可能是拥有快照的一个很好的起点。在结束本章之前，让我们花一点时间回顾本章。我们一起审查了OpenStack关于云库存报告的一些空白以及您如何克服它们。然后提供了如何通过查询数据库来获取我们需要的指标和统计信息的详细信息。接下来，我们详细研究了用于从数据库中提取数据的自定义SQL查询。最后，我们开发了Ansible
    playbook和role来自动生成云报告。
- en: It saddens me a bit to say that the next chapter is our last chapter. With that
    said, it most certainly happens to probably be one of the most important chapters.
    Knowing the health of your cloud is tantamount to having a working OpenStack ecosystem.
    Due to the modular nature of OpenStack, you will have many services to keep track
    of. Having them all working properly is what creates the great harmony within
    OpenStack. While you can certainly do it manually, I am sure that you would agree
    automating such a task is much more ideal. Please read on to the next chapter
    to learn how you can monitor the health of your cloud automatically and even have
    a health report delivered right to your inbox.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾地说，下一章是我们的最后一章。话虽如此，它肯定是最重要的章节之一。了解您的云的健康状况对于拥有一个正常运行的OpenStack生态系统至关重要。由于OpenStack的模块化性质，您将有许多服务需要跟踪。让它们都正常工作是在OpenStack内部创造了良好的和谐。虽然您当然可以手动完成，但我相信您会同意自动化这样的任务更理想。请继续阅读下一章，了解如何可以自动监控您的云的健康状况，甚至将健康报告直接发送到您的收件箱。
