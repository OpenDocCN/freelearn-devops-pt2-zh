- en: Chapter 3. Creating Multiple Users/Projects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。创建多个用户/项目
- en: 'We have finally arrived to the part of the book where we put hands to the keyboard
    and create our very first OpenStack administration playbook. The task of creating
    users and projects for your OpenStack cloud is literally one of the first steps
    in setting up your cloud for user consumption. So, it is good to start here. We
    will step through how one would manually do this first and then transition into
    creating a playbook with roles to fully automate it. While creating the playbook/role,
    I will try to highlight any possible concerns and flexible ways you can accomplish
    it using Ansible. The following topics will be covered in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于到达了本书的部分，我们将动手创建我们的第一个OpenStack管理playbook。为您的OpenStack云创建用户和项目实际上是设置云供用户使用的第一步。因此，从这里开始是很好的。我们将首先逐步介绍如何手动执行此操作，然后过渡到创建具有角色的playbook以完全自动化。在创建playbook/role时，我将尝试强调可能的问题以及您可以使用Ansible实现它的灵活方式。本章将涵盖以下主题：
- en: Creating users and projects
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户和项目
- en: Automation considerations
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化考虑
- en: Coding the playbook and roles
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写playbook和roles
- en: Playbook and role review
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Playbook和角色审查
- en: Creating users and projects
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户和项目
- en: Although creating new users and projects seems like a trivial task as a cloud
    operator/administrator, it does become a burden if asked to create 10, 20, or
    50 users and 5, 10, or 20 projects. The process of first creating the user (with
    a corresponding complex secure password), next creating the project for the user,
    and finally linking that user to that project while assigning that user with the
    appropriate role.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管作为云操作员/管理员创建新用户和项目似乎是一个微不足道的任务，但如果要求创建10、20或50个用户和5、10或20个项目，它确实会成为一个负担。首先创建用户（具有相应的复杂安全密码），然后为用户创建项目，最后将用户链接到该项目并为该用户分配适当的角色。
- en: 'Imagine doing that over and over again. Boring! The first thing you learn as
    an administrator of anything is: figure out what your daily tasks are and then
    determine how to get them completed as fast/easily as possible. This is exactly
    what we are going to do here.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一遍又一遍地这样做。无聊！作为任何管理员，您学到的第一件事是：找出您的日常任务是什么，然后确定如何尽快/轻松地完成它们。这正是我们要在这里做的事情。
- en: Manually creating users and projects
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动创建用户和项目
- en: To further demonstrate the steps outlined earlier, we will walk through the
    commands used to create a user and a project.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步演示前面概述的步骤，我们将演示用于创建用户和项目的命令。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For simplicity purposes, we will demonstrate the manual commands using the OpenStack
    CLI only.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 出于简单起见，我们将仅使用OpenStack CLI演示手动命令。
- en: Creating a user
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建用户
- en: 'Creating a user within OpenStack involves sending requests to the Identity
    service (Keystone). The Keystone request can be executed by either first sourcing
    the OpenRC file discussed in [Chapter 1](ch01.html "Chapter 1. Introduction to
    OpenStack"), *Introduction to OpenStack* or by passing the `--os-cloud` authentication
    parameter in line with the command (this is shown in the second example later).
    Next, you would be responsible for providing the required parameter values such
    as the user name and password with the command. See the following example:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在OpenStack中创建用户涉及向身份服务（Keystone）发送请求。Keystone请求可以通过首先使用OpenRC文件或通过在命令中传递`--os-cloud`认证参数来执行（稍后的第二个示例中显示）。接下来，您需要负责提供命令所需的参数值，例如用户名和密码。请参阅以下示例：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Or we can also use this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们也可以使用这个：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output will look similar to this:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于这样：
- en: '![Creating a user](graphics/image_03_001.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![创建用户](graphics/image_03_001.jpg)'
- en: Creating a project
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建项目
- en: 'As touched on previously, a project (formerly known as a tenant) is a segregated
    area of your cloud where you can assign users. That user can be restricted to
    just that project or allowed access to multiple projects. The process of creating
    a project is similar to the user creation process mentioned earlier. You can continue
    to execute CLI commands once you source the OpenRC file or pass an authentication
    parameter with each command. Imagine that the OpenRC file was already sourced,
    see the following example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，项目（以前称为租户）是云中的一个隔离区域，您可以在其中分配用户。该用户可以仅限于该项目，也可以允许访问多个项目。创建项目的过程类似于前面提到的创建用户的过程。一旦您使用OpenRC文件或在每个命令中传递认证参数，就可以继续执行CLI命令。假设OpenRC文件已经被加载，请参阅以下示例：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output will look similar to this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于这样：
- en: '![Creating a project](graphics/image_03_002.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![创建项目](graphics/image_03_002.jpg)'
- en: Assigning a role and project access to users
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为用户分配角色和项目访问权限
- en: 'Still using the Keystone service, you would assign a specific role (user permissions)
    to a designated project for the user just created. There are default roles that
    come with a base OpenStack cloud: `admin` and `_member_`. You can also create
    custom roles as well. You would need the name of the role and project you wish
    to assign to the user. If the OpenRC file was still sourced, see the following
    example. For this command no output is printed to the screen:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然使用Keystone服务，您将为刚刚创建的用户指定一个特定的角色（用户权限）到指定的项目。基本OpenStack云带有默认角色：`admin`和`_member_`。您还可以创建自定义角色。您需要角色和要分配给用户的项目的名称。如果OpenRC文件仍然被加载，请参阅以下示例。对于此命令，屏幕上不会打印任何输出：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: At this point, you would have created a user and a project and have assigned
    that user to the project with a role, which is all done manually. Let's move forward
    into reviewing some of the considerations around the thought of automating all
    the steps mentioned earlier.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经手动创建了一个用户和一个项目，并将该用户分配给了该项目的一个角色。让我们继续审查围绕自动化前面提到的所有步骤的一些考虑。
- en: Automation considerations
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化考虑
- en: The idea of taking a manual task and creating an automation script, no matter
    the automation tool, requires some base framework decisions to be made. This is
    to keep consistency within your code and allow the easy adoption of your code
    by someone else. Have you ever tried using scripts created by someone else and
    they had no code standards? It is confusing, and you waste time attempting to
    understand their approach.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 将手动任务转化为自动化脚本的想法，无论使用哪种自动化工具，都需要做出一些基本框架决策。这是为了保持代码的一致性，并允许其他人轻松采用您的代码。您是否曾经尝试使用其他人创建的脚本，而他们没有代码标准？这很令人困惑，您会浪费时间试图理解他们的方法。
- en: 'In our case, we are going to make some framework decisions ahead of time and
    keep that consistency. My biggest disclaimer before we get started reviewing the
    considerations in order to set our framework decisions is:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们将提前做出一些框架决定并保持一致性。在我们开始审查考虑因素以设置我们的框架决策之前，我最大的免责声明是：
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are many ways to approach automating tasks for OpenStack with Ansible;
    the one shown in this book is just one way I personally have found success with
    and most certainly not the only way. The playbooks/roles are intended to be working
    examples that you can use as or adjust/improve for your personal use cases.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以使用Ansible自动化OpenStack的任务；本书中展示的方法只是我个人发现成功的一种方式，当然不是唯一的方式。playbooks/roles旨在成为您可以用作或调整/改进个人用例的工作示例。
- en: Now that this has been said, let's get on with it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 既然这样说了，让我们继续吧。
- en: Defining variables globally or per role
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局定义变量还是每个角色
- en: This topic may not seem important enough to review, but in reality with Ansible
    you have more options than usual. With that thought, you will have to decide on
    how you will define your variables within the roles.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个话题可能看起来不够重要，但实际上，使用Ansible时，您有比通常更多的选择。考虑到这一点，您将不得不决定如何在角色中定义变量。
- en: Ansible has a variable definition hierarchy it follows. You have the option
    to define the value of a variable placed within your playbook/role globally, assigning
    it to a group of hosts or local to that specific role only. Defining the value
    globally would mean that all playbooks/roles could use that value and apply it
    to a group of hosts. Verses if you set the value locally to that role, the role
    will pick up the variables from here first.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible遵循变量定义层次结构。您可以选择在全局范围内定义放置在playbook/role中的变量的值，将其分配给一组主机或仅在特定角色中本地定义。在全局范围内定义值意味着所有playbooks/roles都可以使用该值并将其应用于一组主机。相反，如果您将值设置为本地角色，角色将首先从这里获取变量。
- en: Globally defined variables value would be defined within a file located in the
    `group_vars/` directory of the playbook. The filename would have to match a group
    name set in the `hosts` file. To recap this process, please refer to the Defining
    variable values section in [Chapter 2](ch02.html "Chapter 2. Introduction to Ansible"),
    *Introduction to Ansible*. The advantage of this approach is you can set the variable
    value once and have your playbooks/roles just reuse the value. It simplifies defining
    variables overall and the task of updating the values as needed. The negative
    aspect to this approach is if you wish to reuse a variable name and want to provide
    a different value on a per role basis. This is where the alternative option comes
    into play.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 全局定义的变量值将在playbook的`group_vars/`目录中的文件中定义。文件名必须与`hosts`文件中设置的组名匹配。请参考[第二章](ch02.html
    "第二章。Ansible简介")中的定义变量值部分，回顾这个过程，*Ansible简介*。这种方法的优点是您可以一次设置变量值，并使您的playbooks/roles重复使用该值。这简化了整体定义变量和根据需要更新值的任务。这种方法的负面影响是，如果您希望重用变量名称并希望为每个角色提供不同的值。这就是另一种选择的作用。
- en: Defining the variable value local to the role allows the reuse of a variable
    name and the capability to define different values for that variable. Through
    my experimentation of creating playbooks/roles against an OpenStack cloud, I have
    found defining the variables locally to the role seems to be the best option.
    My overall approach to creating roles is to create roles to be as simple as possible
    and to accomplish a single administrative task. Try not to combine multiple administrative
    tasks into a single role. Keeping the role simple enables the ability to reuse
    the role and keeps in line with Ansible's best practices.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在角色中本地定义变量值允许重用变量名称并能够为该变量定义不同的值。通过我的实验，我发现在角色中本地定义变量似乎是最佳选择。我创建角色的整体方法是尽可能简单地创建角色并完成单个管理任务。尽量不要将多个管理任务合并到一个角色中。保持角色简单可以使角色可重用，并符合Ansible的最佳实践。
- en: So, the first framework decision we are making here is to define variable values
    locally to the role. Now we can move on to the next consideration/decision point,
    which is whether to use the OpenStack API or CLI to execute administrative commands.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在这里做出的第一个框架决定是在角色中本地定义变量值。现在我们可以继续下一个考虑/决策点，即是否使用OpenStack API或CLI来执行管理命令。
- en: OpenStack API or CLI?
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenStack API还是CLI？
- en: Again, this decision may seem unimportant at a high level. Deciding to use the
    OpenStack API or CLI could drastically change the overall structure and approach
    to creating your playbooks/roles. In [Chapter 1](ch01.html "Chapter 1. Introduction
    to OpenStack"), *Introduction to OpenStack*, we covered the differences between
    the OpenStack API and CLI.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这个决定在高层面上可能看起来不重要。决定使用OpenStack API还是CLI可能会极大地改变创建playbooks/roles的整体结构和方法。在[第一章](ch01.html
    "第一章。OpenStack简介")中，*OpenStack简介*，我们介绍了OpenStack API和CLI之间的区别。
- en: One thing that should have stood out is that the CLI is much easier to use and
    code against with Ansible. Keep in mind that the CLI still executes API commands
    behind the scenes dealing with all the token and JSON interpretation stuff for
    you. This allows zero loss in functionality.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一个应该引起注意的事情是，CLI在使用Ansible时更容易使用和编码。请记住，CLI仍然在幕后执行API命令，处理所有令牌和JSON解释工作。这允许功能上零损失。
- en: The second framework decision we are declaring is to use the native OpenStack
    modules that come with Ansible when making calls to your OpenStack cloud. The
    only deviation from this decision would be to use CLI commands if there is not
    a module available to handle a task we need coded. With this decision, we have
    also chosen to use the `clouds.yaml` file mentioned in [Chapter 2](ch02.html "Chapter 2. Introduction
    to Ansible"), *Introduction to Ansible* to store our credentials.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们宣布的第二个框架决定是在调用OpenStack云时使用Ansible提供的本机OpenStack模块。唯一偏离这一决定的情况是，如果没有可用的模块来处理我们需要编码的任务，我们将使用CLI命令。通过这个决定，我们还选择使用[第2章](ch02.html
    "第2章。Ansible简介")中提到的`clouds.yaml`文件来存储我们的凭据。
- en: One last consideration now is to decide from where do we wish to execute the
    playbooks.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在最后一个考虑是决定从哪里执行playbooks。
- en: Where to run Ansible
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在哪里运行Ansible
- en: 'My next statement may be a bit obvious, but the playbooks need to be executed
    from a workstation/server with Ansible installed. Now that we have this out of
    the way, let''s explore our options:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我的下一个声明可能有点显而易见，但playbooks需要在安装了Ansible的工作站/服务器上执行。既然我们已经解决了这个问题，让我们探索一下我们的选择：
- en: My first recommendation is not to run the playbooks directly from any of the
    OpenStack controller nodes. The controller nodes have plenty of work to do just
    to keep OpenStack going, no need to add additional burden.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的第一个建议是不要直接从任何OpenStack控制器节点运行playbooks。控制器节点已经有很多工作要做，只需保持OpenStack运行，无需增加额外负担。
- en: The other option is to execute the playbooks from some sort of centralized Ansible
    server in your environment. Although this is a totally viable option, I have a
    better one for you.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个选择是在您的环境中从某种集中式的Ansible服务器执行playbooks。虽然这是一个完全可行的选择，但我有一个更好的选择给你。
- en: Since I am a huge fan and advocate for the **openstack-ansible** (**OSA**) method
    of deploying OpenStack, the playbooks/roles out of the box will use some of the
    great features offered with OSA. My last sentence may seem a bit off topic, but
    it will make more sense shortly.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我是**openstack-ansible**（**OSA**）部署OpenStack的忠实粉丝和倡导者，开箱即用的playbooks/roles将使用OSA提供的一些出色功能。我的最后一句话可能看起来有点离题，但很快就会更有意义。
- en: One of the greatest features that come with running OSA is the built-in dynamic
    inventory script. This feature removes your burden of keeping inventory of your
    OpenStack service locations in a `hosts` file. In order to benefit from this feature,
    you would need to execute the playbooks/roles from the OSA deployment server.
    This in the big picture makes sense to keep all the Ansible playbooks/roles together
    (deployment and administration scripts).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 运行OSA的最大特点之一是内置的动态清单脚本。这个功能消除了您在`hosts`文件中保持OpenStack服务位置清单的负担。为了从这个功能中受益，您需要从OSA部署服务器执行playbooks/roles。从大局上来看，将所有Ansible
    playbooks/roles（部署和管理脚本）放在一起是有意义的。
- en: The other compelling reason why this is the best option is that the OSA deployment
    server is already set up to communicate with the LXC containers where the OpenStack
    services are located. This point becomes very important when/if you want to make
    OpenStack service configuration changes with Ansible.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最佳选择的另一个令人信服的原因是，OSA部署服务器已经设置好，可以与LXC容器通信，OpenStack服务就位于其中。当您想要使用Ansible进行OpenStack服务配置更改时，这一点变得非常重要。
- en: The last feature of OSA that I would like to highlight is the fact that it comes
    with a container designated just to administer your OpenStack cloud called the
    **utility** container. That container comes with every OpenStack service CLI package
    installed and ready to go. Yes, this is one less thing for you to worry about.
    This is one of the main reasons why I love me some OSA.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要强调OSA的最后一个特性是，它带有一个专门用于管理您的OpenStack云的容器，称为**utility**容器。该容器已安装并准备好使用每个OpenStack服务CLI包。是的，这是您需要担心的一件小事。这是我喜欢OSA的主要原因之一。
- en: We now have our last framework decision, which is to execute the playbooks from
    the OSA deployment server in order to take full advantage of all the features
    OSA has to offer us (it just feels right). Now that we are all armed with a ton
    of good information and coding framework, all we have left is to create our first
    playbook and roles.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了最后的框架决定，即从OSA部署服务器执行playbooks，以充分利用OSA为我们提供的所有功能（这感觉就对了）。现在我们都掌握了大量的好信息和编码框架，我们唯一剩下的就是创建我们的第一个playbook和roles。
- en: Coding the playbooks and roles
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写playbooks和roles
- en: 'Before we start, we should first reflect back to the beginning of this chapter.
    We outlined the steps to create users and projects within your OpenStack cloud.
    Here, they are again for a quick reference:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们应该先回顾本章的开头。我们概述了在OpenStack云中创建用户和项目的步骤。这里，它们再次出现，供快速参考：
- en: Creating the user (with a corresponding complex secure password)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户（附带复杂安全密码）
- en: Creating the project for the user
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为用户创建项目
- en: Linking that user to that project while assigning that user with the appropriate
    role
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用户链接到项目，并为该用户分配适当的角色
- en: The first step to tackle is the user creation portion of the process. Creating
    the user is a simple task within OpenStack, so why not add some administration
    flare to go along with it. A part of the process of creating a user is assigning
    that user an appropriate password. We will include that as part of the role that
    creates the user and the project we will assign the user to.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 解决的第一步是处理流程中的用户创建部分。在OpenStack中创建用户是一个简单的任务，那么为什么不添加一些管理风格呢。创建用户的过程中的一部分是为该用户分配一个适当的密码。我们将把这作为创建用户的角色的一部分，并将该用户分配给项目。
- en: When creating a playbook, I normally start with creating roles to handle the
    administrative tasks needed. The role will contain all the executable code against
    the OpenStack cloud. The playbook will contain the host to run the role against
    (in this case, it will be the utility container), the role(s) to execute, and
    other execution settings. The role to handle this administrative task will be
    named `create-users-env`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 创建playbook时，我通常从创建角色开始，以处理所需的管理任务。该角色将包含针对OpenStack云的所有可执行代码。Playbook将包含要针对的主机（在本例中，将是实用容器）、要执行的角色以及其他执行设置。处理此管理任务的角色将被命名为`create-users-env`。
- en: 'The directory structure for our playbook will start off looking something like
    this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们playbook的目录结构将开始看起来像这样：
- en: '[PRE4]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Since we will start with the role task file assembly, let''s create the `main.yml`
    file within the `create-users-env/tasks` directory. The initail contents of this
    file will look like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将从角色任务文件组装开始，让我们在`create-users-env/tasks`目录中创建`main.yml`文件。该文件的初始内容如下：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we can walk through in more detail the three preceding tasks that were
    just added to the role. The very first following task sets the groundwork to use
    the `apg` package, which generates several random passwords:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以更详细地讨论刚刚添加到角色中的前三个任务。第一个任务为使用`apg`包设置了使用`apg`包的基础，该包生成几个随机密码：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Since in the second task we will use the `apg` package to generate passwords
    for us, we had to make sure that it was installed on the host executing the playbook/role.
    The `apt` module from Ansible is a very useful tool to manage Debian/Ubuntu packages.
    Defining the `{{item}}` parameter value with the module allows us to loop through
    multiple packages listed later inside the `with_items` statement. In this particular
    case, it is not needed since we are only installing one package, but at the same
    time does us no harm. Moving on to the second task:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在第二个任务中，我们将使用`apg`包为我们生成密码，因此我们必须确保它已安装在执行playbook/角色的主机上。Ansible的`apt`模块是管理Debian/Ubuntu软件包的非常有用的工具。使用`{{item}}`参数值定义模块，允许我们循环遍历稍后在`with_items`语句中列出的多个软件包。在这种特殊情况下，这并不需要，因为我们只安装一个软件包，但同时也不会对我们造成伤害。接下来是第二个任务：
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The second task now will execute the `apg` package using the command module
    from Ansible.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在第二个任务将使用Ansible的命令模块执行`apg`包。
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The command module will be one of the mostly used modules when working with
    Ansible. It basically can handle executing any command/package with the exception
    of any commands that will use shell variables and shell-specific operations, such
    as: `<`, `>`, `|`, and `&`.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 命令模块将是在使用Ansible时最常用的模块之一。它基本上可以处理执行任何命令/包，但不能处理使用shell变量和特定于shell的操作的命令，例如：`<`、`>`、`|`和`&`。
- en: With the command module, we are passing the `apg` command with specific parameters
    `-n {{ pass_cnt }} -M NCL -q`. Most of the parameters are standard options for
    `apg` with the exception of the variable defined `{{ pass_cnt }}`. Setting this
    parameter allows us to adjust the number of passwords generated from the variable
    file set for this role (found in the `create-users-env/vars` directory). We will
    examine the variable file shortly. One of the last steps in this task is to register
    the output of the `apg` command into a variable named `passwdss`. This variable
    will be used later in this role.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令模块，我们传递了带有特定参数`-n {{ pass_cnt }} -M NCL -q`的`apg`命令。大多数参数都是`apg`的标准选项，除了定义的变量`{{
    pass_cnt }}`。设置此参数允许我们从为该角色设置的变量文件（位于`create-users-env/vars`目录中）中调整生成的密码数量。我们将很快查看变量文件。此任务的最后一步是将`apg`命令的输出注册到名为`passwdss`的变量中。稍后将在此角色中使用此变量。
- en: 'The third task added to the role will now create the user within your OpenStack
    cloud. As seen here again, using the `os_user` module, we will execute the Keystone
    command to create a user with authentication parameters:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 添加到角色的第三个任务现在将在您的OpenStack云中创建用户。再次看到，使用`os_user`模块，我们将执行Keystone命令以创建具有认证参数的用户：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Within the task, we will also define a few variables to be used:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在任务中，我们还将定义一些要使用的变量：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tip
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Placing variables within your commands sets you up to create roles with core
    code that you will not have to update every time it is used. It is a much simpler
    process to just update variable files instead of continuously altering role tasks.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将变量放在命令中，可以让您创建具有核心代码的角色，而无需每次使用时都更新。只需更新变量文件比不断修改角色任务要简单得多。
- en: The other special item part of this task is the use of the `with_together` Ansible
    loop command. This command allows us to loop through separate sets of variable
    values pairing them together in the defined order. Since the passwords are random,
    we do not care what user gets which password.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 此任务的另一个特殊部分是使用`with_together` Ansible循环命令。此命令允许我们循环遍历分别设置的变量值，并按照定义的顺序将它们配对在一起。由于密码是随机的，我们不在乎哪个用户得到哪个密码。
- en: 'So now that we have our user creation code in the role, the next step is to
    create the user''s project. The next two tasks are shown here:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在角色中有了用户创建代码，下一步是创建用户的项目。下面显示了接下来的两个任务：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This first task will create the project with the `os-project` module. Project
    name and description will come from the `tenantid` variable. The next preceding
    task will then assign the user we created earlier to this newly created project
    with a role value set by the `urole` variable.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个第一个任务将使用`os-project`模块创建项目。项目名称和描述将来自`tenantid`变量。接下来的任务将使用`urole`变量设置的角色值，将我们之前创建的用户分配给这个新创建的项目。
- en: You will note that these tasks are very similar to the previous task used to
    create the user and also use similar Ansible parameters. As you can see, it will
    begin to form a repeated pattern. This really helps simply the code creation.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到这些任务与之前用于创建用户的任务非常相似，并且使用类似的Ansible参数。正如您所看到的，它将开始形成一个重复的模式。这确实有助于简化代码的创建。
- en: 'The last task part of the role will simply provide an output of the users created
    and their corresponding passwords. This step will give you (as the cloud operator)
    a very simple output with all the information you would need to save and/or pass
    on to the cloud consumer. Although this step is not required to complete the overall
    administrative task, it is nice. See the following task:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 角色的最后一个任务部分将简单地提供已创建用户及其对应密码的输出。这一步将为您（作为云操作员）提供一个非常简单的输出，其中包含您需要保存和/或传递给云消费者的所有信息。虽然这一步不是完成整体管理任务所必需的，但它很好。请参阅以下任务：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In this task, we will use the `debug` module to show the output of the variable
    we set either manually or dynamically using the `register` Ansible command. The
    output will look something like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个任务中，我们将使用`debug`模块来显示我们手动设置或使用`register`Ansible命令动态设置的变量的输出。输出将看起来像这样：
- en: '![Coding the playbooks and roles](graphics/image_03_003.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![编写playbooks和roles](graphics/image_03_003.jpg)'
- en: Believe it or not, you have just created your very first OpenStack administration
    role. To support this role, we now need to create the variable file that will
    go along with it. The variable filename, `main.yml`, located in the `create-users-env/vars`
    directory, is very similar in structure to the task file.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 信不信由你，你刚刚创建了你的第一个OpenStack管理角色。为了支持这个角色，我们现在需要创建与之配套的变量文件。位于`create-users-env/vars`目录中的变量文件名为`main.yml`，在结构上与任务文件非常相似。
- en: Tip
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Keep in mind that the values defined in the variable file are intended to be
    changed before each execution for normal every day use.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，变量文件中定义的值是为了在每次执行正常的日常使用之前进行更改的。
- en: 'The values shown in the following example are just working examples. Let''s
    take a look:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例中显示的值只是工作示例。让我们来看一下：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s take a moment to break down each variable. The summary would be:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间来分解每个变量。摘要如下：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This pretty much concludes what is involved in creating a variable file. We
    can now move on to the base of this playbook and create the master playbook file
    named `base.yml`, located in the `root` directory of the playbook directory. The
    contents of the `base.yml` file would be:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上总结了创建变量文件所涉及的内容。现在我们可以继续进行这个playbook的基础，并创建名为`base.yml`的主playbook文件，它位于playbook目录的root目录中。`base.yml`文件的内容将是：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The summary of this file is as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件的摘要如下：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The last two areas of attention left before completing the playbook and making
    it ready for execution are creating the hosts inventory file and the global variable
    file. In this case, we are using a static host inventory file to keep things simple,
    but in future chapters, we will instead use the OSA dynamic inventory file. Because
    we are using the static inventory file, we will have to discover the name and/or
    IP address of the utility container.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成playbook并使其准备好执行之前，还有最后两个需要注意的地方，即创建主机清单文件和全局变量文件。在这种情况下，我们使用静态主机清单文件来保持简单，但在未来的章节中，我们将使用OSA动态清单文件。因为我们使用静态清单文件，所以我们必须发现实用容器的名称和/或IP地址。
- en: 'This can be accomplished by running the following command on any of the controller
    nodes:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过在任何控制节点上运行以下命令来完成：
- en: '[PRE16]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, look for something similar to the highlighted item in the output:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在输出中查找类似于突出显示的项目：
- en: '![Coding the playbooks and roles](graphics/image_03_004.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![编写playbooks和roles](graphics/image_03_004.jpg)'
- en: 'Then, add the utility container IP address to the hosts file as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将实用容器的IP地址添加到hosts文件中，如下所示：
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Last but not least, you then would create the global variable file inside the
    `group_vars/` directory. Remember that the file must be named to match the host
    or host group defined in the master playbook. Since we called the host group `util_container`,
    we must then name the variable file the exact same name. The contents of the `util_container`
    global variable file would be:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但并非最不重要的是，然后您将在`group_vars/`目录中创建全局变量文件。请记住，该文件的名称必须与主playbook中定义的主机或主机组的名称相匹配。由于我们称主机组为`util_container`，因此必须将变量文件命名为完全相同的名称。`util_container`全局变量文件的内容将是：
- en: '[PRE18]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tip
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**ProTip**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**专业提示**'
- en: Always create/use an automation service account when executing commands against
    a system remotely. Never use the built-in admin and/or your personal account for
    that system. The use of service accounts makes for simple troubleshooting and
    system audits.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在远程执行系统命令时，始终创建/使用自动化服务帐户。永远不要使用内置的管理员和/或您个人的帐户来执行该系统的命令。使用服务帐户可以简化故障排除和系统审核。
- en: Guess what...you made it! We have just completely finished our very first OpenStack
    administration playbook and role. Let's finish up this chapter with a quick review
    of the playbook and role just created.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 猜猜...你成功了！我们刚刚完成了我们的第一个OpenStack管理playbook和role。让我们通过快速回顾刚刚创建的playbook和role来完成本章。
- en: Reviewing playbooks and roles
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查playbooks和roles
- en: 'To get right to it, we can start from the top with the role we created named
    `create-users-env`. The completed role and file named `main.yml` located in the
    `create-users-env/tasks` directory looks like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 直奔主题，我们可以从我们创建的名为`create-users-env`的角色开始。位于`create-users-env/tasks`目录中的完成角色和名为`main.yml`的文件如下所示：
- en: '[PRE19]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The corresponding variable file named `main.yml`, located in the `create-users-env/vars`
    directory, for this role will look like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 该角色的对应变量文件名为`main.yml`，位于`create-users-env/vars`目录中，如下所示：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, the master playbook file named `base.yml`, located in the `root` directory
    of the playbook directory, will look like this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，位于playbook目录的root目录中的名为`base.yml`的主playbook文件将如下所示：
- en: '[PRE21]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Following that we created the `hosts` file, which also is located in the `root`
    directory of the `playbook` directory.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建了`hosts`文件，它也位于`playbook`目录的`root`目录中。
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Finally, we wrapped this playbook all up by creating the global variable file
    named `util_container`, saving it to the `group_vars/` directory of the `playbook`
    directory:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过创建名为`util_container`的全局变量文件，将其保存到`playbook`目录的`group_vars/`目录中，将这个playbook全部完成：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As promised earlier, I felt that it was very important to provide the fully
    working Ansible playbooks and roles for your consumption. You can use them as
    is and/or as a springboard to creating new/improved Ansible code. The code can
    be found in the GitHub repository, [https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2](https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前承诺的，我觉得为您提供完全可用的Ansible playbook和role非常重要。您可以直接使用它们，或者作为创建新/改进的Ansible代码的跳板。代码可以在GitHub存储库中找到，[https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2](https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2)。
- en: 'Now of course, we have to test out our work. Assuming that you have cloned
    the GitHub repository mentioned earlier, the command to test out the playbook
    from the Deployment node would be as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当然，我们必须测试我们的工作。假设您已经克隆了之前提到的GitHub存储库，从部署节点测试playbook的命令如下：
- en: '[PRE24]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: See now that was not so bad, right? Ansible really does a great job in streamlining
    the effort involved in automating OpenStack administrative tasks. You can now
    reuse that role over and over again, cutting the amount of time creating users
    and projects down to single digit minutes. The time investment is well worth the
    benefits.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看，这并不那么糟糕，对吧？Ansible确实在简化自动化OpenStack管理任务所需的工作方面做得很好。您现在可以一次又一次地重复使用该角色，将创建用户和项目的时间缩短到几分钟。这种时间投资是非常值得的。
- en: In this chapter, we created users and projects within OpenStack via the API
    and CLI. We gathered an understanding of basic automation considerations. We also
    developed Ansible playbooks and roles to automate the user and project creation.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过API和CLI在OpenStack中创建了用户和项目。我们了解了基本的自动化考虑。我们还开发了Ansible playbook和role来自动化用户和项目的创建。
- en: With this great foundation, we are ready to move on to our next administrative
    task of customizing your clouds quotas. The next chapter will include a general
    understanding of what quotas are and how they are used within your OpenStack cloud.
    We will then transition to the exercise of creating quotas manually and then concluding
    with how to automate that task with Ansible. See you in [Chapter 4](ch04.html
    "Chapter 4. Customizing Your Clouds Quotas"), *Customizing Your Clouds Quotas*!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个良好的基础，我们准备继续进行下一个管理任务，即定制您的云配额。下一章将包括对配额的一般理解以及它们在您的OpenStack云中的使用方式。然后我们将过渡到手动创建配额的练习，最后讲解如何使用Ansible自动化这项任务。我们在[第四章](ch04.html
    "第四章。定制您的云配额")中见！
