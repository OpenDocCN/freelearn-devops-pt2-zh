["```\n    sudo apt-get install w3af\n\n    ```", "```\n    python wapiti  http://localhost:8080 -m \"-all,xss,exec\" -x http://localhost:8080/pluginManager/* -v2\n\n    ```", "```\n    Report\n    ------\n    A report has been generated in the file\n    ~/.wapiti/generated_report\n    ~/.wapiti/generated_report/index.html with a browser to see this report.\n\n    ```", "```\n    python wapiti http://localhost:8080 -m \"-all,xss,permanentxss\" -x http://localhost:8080/pluginManager/*\n\n    ```", "```\n    [*] Loading modules :\n    mod_crlf, mod_exec, mod_file, mod_sql, mod_xss, mod_backup, mod_htaccess, mod_blindsql, mod_permanentxss, mod_nikto\n    [+] Launching module xss\n    [+] Launching module permanentxss\n\n    ```", "```\n    def printFile(location) {\n    pub = new File(location)\n    if (pub.exists()){ \n    println \"Location ${location}\"\n    pub.eachLine{line->println line}\n        } else{\n    println \"${location} does not exist\"\n        }\n    }\n\n    printFile(\"/etc/passwd\")\n    printFile(\"/var/lib/jenkins/.ssh/id_rsa\")\n    printFile(\"C:/Windows/System32/drivers/etc/hosts\")\n    ```", "```\ndn: ou=mycompany,dc=nodomain\nobjectClass: organizationalUnit\nou: mycompany\n\ndn: ou=people,ou=mycompany,dc=nodomain\nobjectClass: organizationalUnit\nou: people\n\ndn: ou=groups,ou=mycompany,dc=nodomain\nobjectClass: organizationalUnit\nou: groups\n\ndn: uid=tester1,ou=people,ou=mycompany,dc=nodomain\nobjectClass: inetOrgPerson\nuid: tester1\nsn: Tester\ncn: I AM A Tester\ndisplayName: tester1 Tester\nuserPassword: changeme\nmail: tester1.tester@dev.null\n\ndn: cn=dev,ou=groups,ou=mycompany,dc=nodomain\nobjectclass: groupofnames\ncn: Development\ndescription: Group for Development projects\nmember: uid=tester1,ou=people,dc=mycompany,dc=nodomain\n\n```", "```\n    sudo apt-get install slapdldap-utils\n\n    ```", "```\n    ldapadd -x -D cn=admin,dc=nodomain -W -f ./basic_example.ldif\n\n    ```", "```\nsudo apt-get install libnet-ldap-perl\n\n```", "```\n    #!/usr/bin/perl\n    use Net::LDAP;\n    use Net::LDAP::Utilqw(ldap_error_text);\n\n    my $dn_part=\"ou=people,ou=mycompany,dc=nodomain\";\n    my $home=\"/var/lib/jenkins/userContent\";\n    my $user=$ENV{'U'};\n    my $pass=$ENV{'P'};\n\n    my $ldap = Net::LDAP->new(\"localhost\");\n    my $result =$ldap->bind(\"uid=$user,$dn_part\", password=>$pass);\n    if ($result->code){\n    my $message=ldap_error_text($result->code);\n    print \"dn=$dn\\nError Message: $message\\n\";\n    exit(1);\n        }\n    # Do some provisioning\n    unless (-e  \"$home/$user.html\"){\n    open(HTML, \">$home/$user.html\");\n    print HTML \"Hello <b>$user</b> here is some information\";\n    close(HTML);\n    }\n    exit(0);\n    ```", "```\n    #!/usr/bin/perl\n    print \"guest,all\";\n    exit(0);\n    ```", "```\n    #!/usr/bin/perl\n    my $user=$ENV{'U'};\n    my $pass=$ENV{'P'};\n    my $min=5;\n\n    if ((length($user) < $min) || (length($pass) < $min)) {\n        //Do something here for failed logins\n    exit (-1);\n    }\n    exit(0);\n    ```", "```\n    sudo chown jenkins:jenkins /var/lib/jenkins/login2.pl\n\n    ```", "```\n    #!/usr/bin/perl\n    use URI;\n    use URI::Escape;\n    my $raw_user=$ENV{'U'};\n    my $group=uri_escape($raw_user);\n    print \"grp_$group\";\n    exit(0);\n    ```", "```\n    sudo chown jenkins:jenkins /var/lib/jenkins/group2.pl\n\n    ```", "```\n<script>alert('Do something');</script>\n```", "```\n    dn: uid=tester121,ou=people,ou=mycompany,dc=nodomain\n    objectClass: inetOrgPerson\n    uid: tester121\n    sn: Tester\n    givenName: Tester121 Tester\n    cn: Tester121 Tester\n    displayName: Tester121 Tester\n    userPassword: changeme\n    mail: 121.tester@dev.null\n    ```", "```\n    ldapadd -x -D cn=admin,dc=nodomain -W -f ./basic_example.ldif\n\n    ```", "```\n    #!/usr/bin/perl\n    use Net::LDAP;\n    use Net::LDAP::Utilqw(ldap_error_text);\n\n    my $number_users=2;\n    my $counter=0;\n    my $start=100;\n\n    my $ldap = Net::LDAP->new(\"localhost\");\n    $ldap->bind(\"cn=admin,dc=nodomain\",password=>\"your_password\");\n\n    while ($counter < $number_users){\n      $counter++;\n        $total=$counter+$start;\n    my $dn=\"uid=tester$total,ou=people,ou=mycompany,dc=nodomain\";\n    my $result = $ldap->delete($dn); \n    if ($result->code){\n    my $message=ldap_error_text($result->code);\n    print \"dn=$dn\\nError Message: $message\\n\";\n        }\n    }\n    ```", "```\nmy$result=$ldap->add($dn,attrs=>[ @$whatToCreate]);\n```", "```\n    org.acegisecurity.AuthenticationServiceException: LdapCallback;[LDAP: error code 32 - No Such Object]; nested exception is javax.naming.NameNotFoundException: [LDAP: error code 32 - No Such Object]; remaining name 'ou=people,dc=mycompany ,dc=nodomain'\n\n    ```", "```\n    org.acegisecurity.BadCredentialsException: Bad credentials\n\n    ```", "```\n    <!--\n    <Connector port=\"8080\" protocol=\"HTTP/1.1\"   …..\n    -->\n    ```", "```\n    <Connector port=\"9443\"  protocol=\"org.apache.coyote.http11.Http11Protocol\" SSLEnabled=\"true\"\n    maxThreads=\"150\" scheme=\"https\" secure=\"true\"\n    keystoreFile=\"${user.home}/.keystore\" keystorePass=\"changeit\"\n    clientAuth=\"false\" sslProtocol=\"TLS\" />\n    ```", "```\n    keytool -genkey -alias tomcat -keyalg RSA\n\n    ```", "```\n    <!--\n      <bean class=\"org.jasig.cas.authentication.handler.support.SimpleTestUsernamePasswordAuthenticationHandler\" />\n    -->\n    ```", "```\n    <bean  class=\"org.jasig.cas.adaptors.ldap.BindLdapAuthenticationHandler\">\n    <property name=\"filter\" value=\"uid=%u\" />\n    <property name=\"searchBase\" value=\"ou=people,ou=mycompany,dc=nodomain\" />\n    <property name=\"contextSource\" ref=\"contextSource\" />\n    </bean>\n    </list>\n    </property>\n    </bean>\n    ```", "```\n    <bean id=\"contextSource\" class=\"org.springframework.ldap.core.support.LdapContextSource\">\n    <property name=\"pooled\" value=\"false\"/>\n    <property name=\"urls\">\n    <list>\n    <value>ldap://localhost/</value>\n    </list>\n    </property>\n    <property name=\"userDn\" value=\"cn=admin,dc=nodomain\"/>\n    <property name=\"password\" value=\"adminpassword\"/>\n    <property name=\"baseEnvironmentProperties\">\n    <map>\n    <entry>\n    <key><value>java.naming.security.authentication</value>\n    </key>\n    <value>simple</value>\n    </entry>\n    </map>\n    </property>\n    </bean>\n    ```", "```\nWHO: [username: test]\nWHAT: error.authentication.credentials.bad\nACTION: TICKET_GRANTING_TICKET_NOT_CREATED\nAPPLICATION: CAS\nWHEN: Mon Aug 08 21:14:22 CEST 2011\nCLIENT IP ADDRESS: 127.0.0.1\nSERVER IP ADDRESS: 127.0.0.1\n\n```", "```\n    sudo keytool -import -alias myprivateroot -keystore ./cacerts -file  location_of_exported certificate\n\n    ```", "```\nsh dependency-check.sh –advancedHelp\n\n```", "```\n-n,--noupdate             Disables the automatic updating of the CPE data.\n\n```"]