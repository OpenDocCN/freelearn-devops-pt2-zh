- en: Continuous Delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will show the reader how to integrate their build pipeline and
    deployments with a Kubernetes cluster. It will cover the concept of using Gulp.js
    and Jenkins in conjunction with your Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with continuous deployment pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Gulp.js with Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Jenkins with Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating with continuous delivery pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous integration and delivery are key components to modern development
    shops. *Speed to marke*t or *mean-time-to-revenue* are crucial for any company
    that is creating their own software. We'll see how Kubernetes can help you.
  prefs: []
  type: TYPE_NORMAL
- en: '**CI/CD** (short for **Continuous Integration / Continuous Delivery**) often
    requires ephemeral build and test servers to be available whenever changes are
    pushed to the code repository. Docker and Kubernetes are well suited for this
    task, as it''s easy to create containers in a few seconds and just as easy to
    remove them after builds are run. In addition, if you already have a large portion
    of infrastructure available on your cluster, it can make sense to utilize the
    idle capacity for builds and testing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, we will explore two popular tools used in building and deploying
    software:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gulp.js**: This is a simple task runner used to automate the build process
    using **JavaScript** and **Node.js**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jenkins**: This is a fully-fledged continuous integration server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gulp.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gulp.js gives us the framework to do *Build as code*. Similar to *Infrastructure
    as code*, this allows us to programmatically define our build process. We will
    walk through a short example to demonstrate how you can create a complete workflow
    from a Docker image build to the final Kubernetes service.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this section of the article, you will need a **NodeJS** environment installed
    and ready including the **node package manager** (**npm**). If you do not already
    have these packages installed, you can find instructions for installing them at
    [https://docs.npmjs.com/getting-started/installing-node](https://docs.npmjs.com/getting-started/installing-node).
  prefs: []
  type: TYPE_NORMAL
- en: You can check whether NodeJS is installed correctly with a `node -v` command.
  prefs: []
  type: TYPE_NORMAL
- en: You'll also need **Docker CE** and a **DockerHub** account to push a new image.
    You can find instructions to install Docker CE at [https://docs.docker.com/installation/](https://docs.docker.com/installation/).
  prefs: []
  type: TYPE_NORMAL
- en: You can easily create a DockerHub account at [https://hub.docker.com/](https://hub.docker.com/).
  prefs: []
  type: TYPE_NORMAL
- en: After you have your credentials, you can log in with the CLI using `$ docker
    login` command.
  prefs: []
  type: TYPE_NORMAL
- en: Gulp build example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by creating a project directory named `node-gulp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will install the `gulp` package and check whether it''s ready by running
    the `npm` command with the version flag, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You may need to open a new terminal window to make sure that `gulp` is on your
    path. Also, make sure to navigate back to your `node-gulp` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will install `gulp` locally in our project folder as well as the `gulp-git`
    and `gulp-shell` plugins, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to create a Kubernetes controller and service definition file,
    as well as a `gulpfile.js` file, to run all our tasks. Again, these files are
    available in the book file bundle, if you wish to copy them instead. Refer to
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 7-1*: `node-gulp-controller.yaml`'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, we have a basic controller. You will need to replace `**<your
    username>**/node-gulp:latest` with your Docker Hub username:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 7-2*: `node-gulp-service.yaml`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we have a simple service that selects the pods from our controller and
    creates an external load balancer for access, as earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '*Listing 7-3*: `gulpfile.js`'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have the `gulpfile.js` file. This is where all our build tasks are
    defined. Again, fill in your Docker Hub username in both the `**<your username>**/node-gulp`
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Looking through the file, first, the clone task downloads our image source code
    from GitHub. The pull tasks execute a `git` pull on the cloned repository. Next,
    the `docker-build` command builds an image from the `container-info` subfolder
    and pushes it to DockerHub. Finally, we have the `create-kube-pod` and `update-kube-pod`
    commands. As you can guess, the `create-kube-pod` command creates our controller
    and service for the first time, whereas the `update-kube-pod` command simply replaces
    the controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and run these commands and see our end-to-end workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The first time through, you can run the `create-kube-pod` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is all there is to it. If we run a quick `kubectl` describe command for
    the `node-gulp` service, we can get the external IP for our new service. Browse
    to that IP and you''ll see the familiar `container-info` application running.
    Note that the host starts with `node-gulp`, just as we named it in the previously
    mentioned pod definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06302_07_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Service launched by Gulp build
  prefs: []
  type: TYPE_NORMAL
- en: 'On subsequent updates, run the `pull` and `update-kube-pod` commands, as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is a very simple example, but you can begin to see how easy it is to coordinate
    your build and deployment end to end with a few simple lines of code. Next, we
    will look at how to use Kubernetes to actually run builds using Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes plugin for Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way we can use Kubernetes for our CI/CD pipeline is to run our Jenkins build
    slaves in a containerized environment. Luckily, there is already a plugin, written
    by Carlos Sanchez, which allows you to run Jenkins slaves in Kubernetes' pods.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You'll need a Jenkins server handy for this next example. If you don't have
    one you can use, there is a Docker image available at [https://hub.docker.com/_/jenkins/](https://hub.docker.com/_/jenkins/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Running it from the Docker CLI is as simple as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Installing plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Log in to your Jenkins server, and from your home dashboard, click on Manage
    Jenkins. Then, select Manage Plugins from the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'A note for those installing a new Jenkins server: When you first log in to
    the Jenkins server, it asks you to install plugins. Choose the default ones or
    no plugins will be installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06302_07_02.png)'
  prefs: []
  type: TYPE_IMG
- en: Jenkins main dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'The credentials plugin is required, but should be installed by default. We
    can check the Installed tab if in doubt, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06302_07_03.png)'
  prefs: []
  type: TYPE_IMG
- en: Jenkins installed plugins
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can click on the Available tab. The Kubernetes plugin should be located
    under Cluster Management and Distributed Build or Misc (cloud). There are many
    plugins, so you can alternatively search for Kubernetes on the page. Check the
    box for Kubernetes Plugin and click on Install without restart.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will install theKubernetes Plugin and the Durable Task Plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06302_07_04.png)'
  prefs: []
  type: TYPE_IMG
- en: Plugin installation
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to install a nonstandard version or just like to tinker, you can
    optionally download the plugins. The latest **Kubernetes** and **Durable Task**
    plugins can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Kubernetes plugin: [https://wiki.jenkins-ci.org/display/JENKINS/Kubernetes+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Kubernetes+Plugin)
            Durable Task plugin: [https://wiki.jenkins-ci.org/display/JENKINS/Durable+Task+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Durable+Task+Plugin)
    Next, we can click on the Advanced tab and scroll down to Upload Plugin. Navigate
    to the `durable-task.hpi` file and click on Upload. You should see a screen that
    shows an installing progress bar. After a minute or two, it will update to Success.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, install the main Kubernetes plugin. On the left-hand side, click on
    Manage Plugins and then the Advanced tab once again. This time, upload the `kubernetes.hpi`
    file and click on Upload. After a few minutes, the installation should be complete.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Kubernetes plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Click on Back to Dashboard or the Jenkins link in the top-left corner. From
    the main dashboard page, click on the Credentials link. Choose a domain from the
    list; in my case, I just used the default Global credentials domain. Click on
    Add Credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06302_07_05.png)'
  prefs: []
  type: TYPE_IMG
- en: Add credentials screen
  prefs: []
  type: TYPE_NORMAL
- en: 'Leave Kind as Username with password and Scope as Global. Add your Kubernetes
    admin credentials. Remember that you can find these by running the `config` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can leave ID blank, give it a sensible description, and click on the OK
    button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have our credentials saved, we can add our Kubernetes server. Click
    on the Jenkins link in the top-left corner and then Manage Jenkins. From there,
    select Configure System and scroll all the way down to the Cloud section. Select
    Kubernetes from the Add a new cloud dropdown and a Kubernetes section will appear,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06302_07_06_EDIT.png)'
  prefs: []
  type: TYPE_IMG
- en: New Kubernetes cloud settings
  prefs: []
  type: TYPE_NORMAL
- en: You'll need to specify the URL for your master in the form of `https://<Master
    IP>/`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, choose the credentials we added from the drop-down list. Since Kubernetes
    use a self-signed certificate by default, you'll also need to check the Disable
    https certificate check checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: Click on Test Connection and if all goes well, you should see Connection successful
    appearing next to the button.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using an older version of the plugin, you may not see the Disable
    https certificate check checkbox. If this is the case, you will need to install
    the self-signed certificate directly on the **Jenkins Master**.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we will add a pod template by choosing Kubernetes Pod Template from
    the Add Pod Template dropdown next to Images.
  prefs: []
  type: TYPE_NORMAL
- en: This will create another new section. Use `jenkins-slave` for the Name and Labels
    section. Click on Add next to Containers and again use `jenkins-slave` for the
    Name. Use `csanchez/jenkins-slave` for the Docker Image and leave `/home/jenkins`
    for the Working Directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Labels can be used later on in the build settings to force the build to use
    the Kubernetes cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06302_07_07.png)'
  prefs: []
  type: TYPE_IMG
- en: Kubernetes cluster addition
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the Pod Template that expands below the cluster addition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06302_07_08.png)'
  prefs: []
  type: TYPE_IMG
- en: Kubernetes pod template
  prefs: []
  type: TYPE_NORMAL
- en: Click on Save and you are all set. Now, new builds created in Jenkins can use
    the slaves in the Kubernetes pod we just created.
  prefs: []
  type: TYPE_NORMAL
- en: Here is another note about firewalls. The Jenkins Master will need to be reachable
    by all the machines in your Kubernetes cluster, as the pod could land anywhere.
    You can find out your port settings in Jenkins under Manage Jenkins and Configure
    Global Security.
  prefs: []
  type: TYPE_NORMAL
- en: Bonus fun
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Fabric8** bills itself as an integration platform. It includes a variety
    of logging, monitoring, and continuous delivery tools. It also has a nice console,
    an API registry, and a 3D game that lets you shoot at your pods. It''s a very
    cool project, and it actually runs on Kubernetes. Refer to [http://fabric8.io/](http://fabric8.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: It's an easy single command to set up on your Kubernetes cluster, so refer to
    [http://fabric8.io/guide/getStarted/gke.html](http://fabric8.io/guide/getStarted/gke.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We looked at two continuous integration tools that can be used with Kubernetes.
    We did a brief walk-through of deploying the Gulp.js task on our cluster. We also
    looked at a new plugin used to integrate Jenkins build slaves into your Kubernetes
    cluster. You should now have a better sense of how Kubernetes can integrate with
    your own CI/CD pipeline.
  prefs: []
  type: TYPE_NORMAL
