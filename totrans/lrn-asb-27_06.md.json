["```\n--- \n- hosts: database \n  remote_user: vagrant\n  tasks: \n    - name: Count processes running on the remote system \n      shell: ps | wc -l \n      register: remote_processes_number \n    - name: Print remote running processes \n      debug: \n        msg: '{{ remote_processes_number.stdout }}' \n    - name: Count processes running on the local system \n      local_action: shell ps | wc -l \n      register: local_processes_number \n    - name: Print local running processes \n      debug: \n        msg: '{{ local_processes_number.stdout }}' \n```", "```\nansible-playbook -i hosts local_action.yaml\n```", "```\nPLAY [database] ****************************************************\nTASK [Gathering Facts] *********************************************\nok: [db01.fale.io]\nTASK [Count processes running on the remote system] ****************\nchanged: [db01.fale.io]\nTASK [Print remote running processes] ******************************\nok: [db01.fale.io] => {\n \"msg\": \"6\"\n}\nTASK [Count processes running on the local system] *****************\nchanged: [db01.fale.io -> localhost]\nTASK [Print local running processes] *******************************\nok: [db01.fale.io] => {\n \"msg\": \"9\"\n}\nPLAY RECAP *********************************************************\ndb01.fale.io                : ok=5 changed=2 unreachable=0 failed=0 \n```", "```\n--- \n- hosts: database \n  remote_user: vagrant\n  tasks: \n    - name: Count processes running on the remote system \n      shell: ps | wc -l \n      register: remote_processes_number \n    - name: Print remote running processes \n      debug: \n        msg: '{{ remote_processes_number.stdout }}' \n    - name: Count processes running on the local system \n      shell: ps | wc -l \n      delegate_to: localhost \n      register: local_processes_number \n    - name: Print local running processes \n      debug: \n        msg: '{{ local_processes_number.stdout }}' \n```", "```\nansible-playbook -i hosts delegate_to.yaml\n```", "```\nPLAY [database] **************************************************\n\nTASK [Gathering Facts] *******************************************\nok: [db01.fale.io]\nTASK [Count processes running on the remote system] **************\nchanged: [db01.fale.io]\nTASK [Print remote running processes] ****************************\nok: [db01.fale.io] => {\n \"msg\": \"6\"\n}\nTASK [Count processes running on the local system] ***************\nchanged: [db01.fale.io -> localhost]\n\nTASK [Print local running processes] *****************************\nok: [db01.fale.io] => {\n \"msg\": \"9\"\n}\nPLAY RECAP *******************************************************\ndb01.fale.io              : ok=5 changed=2 unreachable=0 failed=0 \n```", "```\nIf os = \"redhat\" \n  Install httpd \nElse if os = \"debian\" \n  Install apache2 \nEnd \n```", "```\n--- \n- hosts: webserver \n  remote_user: vagrant\n  tasks: \n    - name: Print the ansible_os_family value \n      debug: \n        msg: '{{ ansible_os_family }}' \n    - name: Ensure the httpd package is updated \n      yum: \n        name: httpd \n        state: latest \n      become: True \n      when: ansible_os_family == 'RedHat' \n    - name: Ensure the apache2 package is updated \n      apt: \n        name: apache2 \n        state: latest \n      become: True \n      when: ansible_os_family == 'Debian' \n```", "```\nansible-playbook -i hosts conditional_httpd.yaml\n```", "```\nPLAY [webserver] ***********************************************\n\nTASK [Gathering Facts] *****************************************\nok: [ws03.fale.io]\nok: [ws02.fale.io]\nok: [ws01.fale.io]\n\nTASK [Print the ansible_os_family value] ***********************\nok: [ws01.fale.io] => {\n \"msg\": \"RedHat\"\n}\nok: [ws02.fale.io] => {\n \"msg\": \"RedHat\"\n}\nok: [ws03.fale.io] => {\n \"msg\": \"Debian\"\n}\n...\n```", "```\n--- \n- hosts: all \n  remote_user: vagrant\n  vars: \n    backup: True \n  tasks: \n    - name: Copy the crontab in tmp if the backup variable is true \n      copy: \n        src: /etc/crontab \n        dest: /tmp/crontab \n        remote_src: True \n      when: backup \n```", "```\nansible-playbook -i hosts crontab_backup.yaml\n```", "```\nPLAY [all] ***************************************************\n\nTASK [Gathering Facts] ***************************************\nok: [ws03.fale.io]\nok: [ws01.fale.io]\nok: [db01.fale.io]\nok: [ws02.fale.io]\n\nTASK [Copy the crontab in tmp if the backup variable is true]\nchanged: [ws03.fale.io]\nchanged: [ws02.fale.io]\nchanged: [ws01.fale.io]\nchanged: [db01.fale.io]\n\nPLAY RECAP ***************************************************\ndb01.fale.io          : ok=2 changed=1 unreachable=0 failed=0 \nws01.fale.io          : ok=2 changed=1 unreachable=0 failed=0 \nws02.fale.io          : ok=2 changed=1 unreachable=0 failed=0 \nws03.fale.io          : ok=2 changed=1 unreachable=0 failed=0 \n```", "```\nansible-playbook -i hosts crontab_backup.yaml --extra-vars=\"backup=False\"\n```", "```\nPLAY [all] ***************************************************\n\nTASK [Gathering Facts] ***************************************\nok: [ws03.fale.io]\nok: [ws01.fale.io]\nok: [db01.fale.io]\nok: [ws02.fale.io]\n\nTASK [Copy the crontab in tmp if the backup variable is true]\nskipping: [ws01.fale.io]\nskipping: [ws02.fale.io]\nskipping: [ws03.fale.io]\nskipping: [db01.fale.io]\n\nPLAY RECAP ***************************************************\ndb01.fale.io          : ok=1 changed=0 unreachable=0 failed=0 \nws01.fale.io          : ok=1 changed=0 unreachable=0 failed=0 \nws02.fale.io          : ok=1 changed=0 unreachable=0 failed=0 \nws03.fale.io          : ok=1 changed=0 unreachable=0 failed=0 \n```", "```\n--- \n- hosts: all \n  remote_user: ansible \n  vars: \n    backup: True \n  tasks: \n    - name: Check if the backup_folder is set \n      fail: \n        msg: 'The backup_folder needs to be set' \n      when: backup_folder is not defined or backup_folder == “” \n    - name: Copy the crontab in tmp if the backup variable is true \n      copy: \n        src: /etc/crontab \n        dest: '{{ backup_folder }}/crontab' \n        remote_src: True \n      when: backup \n```", "```\n - include: FILENAME.yaml \n```", "```\n- include: FILENAME.yaml variable1=\"value1\" variable2=\"value2\"\n```", "```\n--- \n- hosts: webserver \n  remote_user: vagrant\n  tasks: \n    - name: Ensure the HTTPd package is installed \n      yum: \n        name: httpd \n        state: present \n      become: True \n    - name: Ensure the HTTPd service is enabled and running \n      service: \n        name: httpd \n        state: started \n        enabled: True \n      become: True \n    - name: Ensure HTTP can pass the firewall \n      firewalld: \n service: http \n        state: enabled \n        permanent: True \n        immediate: True \n      become: True \n   ...\n```", "```\nansible-playbook -i hosts webserver.yaml\n```", "```\nPLAY [webserver] *********************************************\n\nTASK [Gathering Facts] ***************************************\nok: [ws01.fale.io]\nok: [ws02.fale.io]\n\nTASK [Ensure the HTTPd package is installed] *****************\nok: [ws01.fale.io]\nok: [ws02.fale.io]\n\nTASK [Ensure the HTTPd service is enabled and running] *******\nchanged: [ws02.fale.io]\nchanged: [ws01.fale.io]\n\n...\n```", "```\nPLAY [webserver] *********************************************\n\nTASK [Gathering Facts] ***************************************\nok: [ws01.fale.io]\nok: [ws02.fale.io]\n\nTASK [Ensure the HTTPd package is installed] *****************\nok: [ws01.fale.io]\nok: [ws02.fale.io]\n\nTASK [Ensure the HTTPd service is enabled and running] *******\nok: [ws02.fale.io]\nok: [ws01.fale.io]\n\nTASK [Ensure HTTP can pass the firewall] *********************\nok: [ws02.fale.io]\nok: [ws01.fale.io]\n\nTASK [Ensure HTTPd configuration is updated] *****************\nok: [ws02.fale.io]\nok: [ws01.fale.io]\n\nPLAY RECAP ***************************************************\nws01.fale.io          : ok=5 changed=0 unreachable=0 failed=0 \nws02.fale.io          : ok=5 changed=0 unreachable=0 failed=0\n```", "```\n    ├── ansible.cfg\n    ├── hosts\n    ├── master.yaml\n    ├── playbooks\n    │   ├── firstrun.yaml\n    │   └── groups\n    │       ├── database.yaml\n    │       └── webserver.yaml\n    └── roles\n        ├── common\n        ├── database\n        └── webserver\n\n```", "```\n---\n- name: Ensure EPEL is enabled \n  yum: \n    name: epel-release \n    state: present \n  become: True \n- name: Ensure libselinux-python is present \n  yum: \n    name: libselinux-python \n    state: present \n  become: True \n- name: Ensure libsemanage-python is present \n  yum: \n    name: libsemanage-python \n    state: present \n  become: True \n...\n```", "```\ncommon/ \n├── tasks \n│   └── main.yaml \n└── templates \n    └── motd \n```", "```\n--- \n- hosts: database \n  user: vagrant \n  roles: \n  - common \n```", "```\n--- \n- hosts: webserver \n  user: vagrant \n  roles: \n  - common \n```", "```\n[defaults] \ninventory = hosts \nhost_key_checking = False \nroles_path = roles \n```", "```\n--- \n- import_playbook: playbooks/groups/database.yaml \n- import_playbook: playbooks/groups/webserver.yaml \n```", "```\nansible-playbook master.yaml \n```", "```\nPLAY [database] ********************************************** \nTASK [Gathering Facts] ***************************************\nok: [db01.fale.io]\n\nTASK [common : Ensure EPEL is enabled] ***********************\nok: [db01.fale.io]\n\nTASK [common : Ensure libselinux-python is present] **********\nok: [db01.fale.io]\n\nTASK [common : Ensure libsemanage-python is present] *********\nok: [db01.fale.io]\n\nTASK [common : Ensure we have last version of every package] *\nok: [db01.fale.io]\n...\n```", "```\n--- \n- name: Ensure the HTTPd package is installed \n  yum: \n    name: httpd \n    state: present \n  become: True \n- name: Ensure the HTTPd service is enabled and running \n  service: \n    name: httpd \n    state: started \n    enabled: True \n  become: True \n- name: Ensure HTTP can pass the firewall \n  firewalld: \n    service: http \n    state: enabled \n    permanent: True \n    immediate: True \n  become: True \n... \n```", "```\n<html> \n    <body> \n        <h1>Hello World!</h1> \n        <p>This page was created on {{ ansible_date_time.date }}.</p> \n        <p>This machine can be reached on the following IP addresses</p> \n        <ul> \n{% for address in ansible_all_ipv4_addresses %} \n            <li>{{ address }}</li> \n{% endfor %} \n        </ul> \n    </body> \n</html> \n```", "```\n--- \n- name: Restart HTTPd \n  service: \n    name: httpd \n    state: restarted \n  become: True \n```", "```\n--- \n- hosts: webserver \n  user: ansible \n  roles: \n  - common \n  - webserver \n```", "```\nansible-playbook playbooks/groups/webserver.yaml \n```", "```\nPLAY [webserver] *********************************************\n\nTASK [Gathering Facts] ***************************************\nok: [ws01.fale.io]\nok: [ws02.fale.io]\n\nTASK [common : Ensure EPEL is enabled] ***********************\nok: [ws01.fale.io]\nok: [ws02.fale.io]\n\nTASK [common : Ensure libselinux-python is present] **********\nok: [ws01.fale.io]\nok: [ws02.fale.io]\n\nTASK [common : Ensure libsemanage-python is present] *********\nok: [ws01.fale.io]\nok: [ws02.fale.io]\n\n...\n```", "```\n{{ myvar | filter }}\n```", "```\n{{ myvar | filter(2) }}\n```", "```\n{{ users | to_nice_json }}\n```", "```\n{{ users | to_nice_yaml }}\n```", "```\n{{ backup_disk | default(\"/dev/sdf\") }}\n```", "```\n{{ ['a', 'b', 'c', 'd'] | random }} \n```", "```\n{{ 100 | random }}\n```", "```\n{{ 50  | random(10) }}\n```", "```\n{{ 50 | random(20, 10) }}\n```", "```\n{{ [\"This\", \"is\", \"a\", \"string\"] | join(\" \") }} \n```", "```\n{{ variable | b64encode }} \n```", "```\n{{ \"aGFoYWhhaGE=\" | b64decode }} \n```", "```\necho 'ansible' > .password\n```", "```\nansible-vault create secret.yaml\n```", "```\ncat secret.yaml\n```", "```\n$ANSIBLE_VAULT;1.1;AES256\n65396465353561366635653333333962383237346234626265633461353664346532613566393365\n3263633761383434363766613962386637383465643130320a633862343137306563323236313930\n32653533316238633731363338646332373935353935323133666535386335386437373539393365\n3433356539333232650a643737326362396333623432336530303663366533303465343737643739\n63373438316435626138646236643663313639303333306330313039376134353131323865373330\n6333663133353730303561303535356230653533346364613830\n```", "```\nansible-vault --vault-password-file=.password edit secret.yaml \n```", "```\nansible-vault --vault-password-file=.password view secret.yaml\n```", "```\nansible-vault --vault-password-file=.password decrypt secret.yaml \n```", "```\nThis is a password protected file\n```", "```\nansible-vault --vault-password-file=.password encrypt secret.yaml\n```", "```\nansible-vault --vault-password-file=.password --new-vault-password-file=.newpassword rekey secret.yaml \n```", "```\n$ANSIBLE_VAULT;1.1;AES256\n32623466356639646661326164313965313366393935623236323465356265313630353930346135\n3730616433353331376537343962366661616363386235330a643261303132336437613464636332\n36656564653836616238383836383562633037376533376135663034316263323764656531656137\n3462323739653339360a613933633865383837393331616363653765646165363333303232633132\n63393237383231393738316465356636396133306132303932396263333735643230316361383339\n3365393438636530646366336166353865376139393361396539\n```", "```\n$ ansible-playbook site.yml --vault-password-file .password\n```", "```\n$ ansible-playbook site.yml --vault-password-file ~/.get_password.py \n```", "```\n- name: ssh_password \n  prompt: Enter ssh_password \n  private: True \n  encryption: md5_crypt \n  confirm: True \n  salt_size: 7 \n```", "```\nname: ssh_password  \n```", "```\nprompt: Enter ssh password  \n```", "```\nprivate: True  \n```", "```\nencrypt: md5_crypt\nsalt_size: 7  \n```", "```\nconfirm: True  \n```", "```\n- name: Running a script\n  shell: script.sh\n    password: my_password  \n```", "```\nREMOTE_MODULE command script.sh password=VALUE_HIDDEN #USE_SHELL  \n```", "```\n- name: Running a script\n  shell: script.sh\n    password: my_password\n  no_log: True  \n```"]