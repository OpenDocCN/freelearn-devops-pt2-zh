- en: Continuous Delivery Using Jenkins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Jenkins 进行持续交付
- en: 'We will begin this chapter with a Continuous Delivery design that covers the
    following areas:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从一个覆盖以下领域的持续交付设计开始本章：
- en: Branching strategy
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分支策略
- en: A list of tools for Continuous Delivery
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续交付工具列表
- en: A Jenkins pipeline structure
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Jenkins 流水线结构
- en: The **Continuous Delivery** (**CD**) design will serve as a blueprint that will
    guide the readers in answering the how, why, and where of the CD being implemented.
    The design will cover all the necessary steps involved in implementing an end-to-end
    CD pipeline.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续交付**（**CD**）设计将作为一个蓝图，指导读者回答 CD 的如何、为什么和在哪里实施的问题。设计将涵盖实施端到端 CD 流水线所涉及的所有必要步骤。'
- en: The CD design, discussed in this chapter, should be considered as a template
    for implementing CD, and not a full and final model. All the tools used can be
    modified and replaced to suit the purpose.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章讨论的 CD 设计应被视为实施 CD 的模板，而不是一个完整和最终的模型。所有使用的工具都可以修改和替换以适应目的。
- en: Jenkins CD design
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins CD 设计
- en: In this section, we will go through a very general CD design.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一节中，我们将介绍一个非常通用的 CD 设计。
- en: Branching strategy
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支策略
- en: 'In [Chapter 7](0699eee2-c25d-468e-ba6a-741f9068abce.xhtml), *Continuous Integration
    Using Jenkins*, we followed a branching strategy for the CI that included the
    following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 7 章](0699eee2-c25d-468e-ba6a-741f9068abce.xhtml) *Jenkins 使用持续集成* 中，我们遵循了以下的分支策略：
- en: The master branch
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主分支
- en: The integration branch
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成分支
- en: The feature branch
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能分支
- en: This branching strategy is a slimmer version of the *GitFlow workflow* branching
    model.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个分支策略是 *GitFlow 工作流* 分支模型的一个精简版。
- en: While CI can be performed on integration/development branches or feature branches,
    CD is carried out only on the integration and release branches.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 CI 可以在集成/开发分支或功能分支上执行，但 CD 只在集成和发布分支上执行。
- en: The release branch
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布分支
- en: 'Some teams go with the strategy of having a release branch. A release branch
    is created after a successfully-tested code goes live in production (distributed
    to customers) from the master branch. The purpose of creating a release branch
    is to support bug fixes on the respective release:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一些团队采用有发布分支的策略。发布分支是在成功测试的代码从主分支中发布到生产环境（分发给客户）后创建的。创建发布分支的目的是支持对相应发布的错误修复：
- en: '![](img/37e7abda-0552-457b-a75c-a61fceddf129.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/37e7abda-0552-457b-a75c-a61fceddf129.png)'
- en: Branching strategy
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 分支策略
- en: CD pipeline
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CD 流水线
- en: 'We are now at the heart of the CD design. We will not create a new pipeline;
    instead, we will build on the existing CI Multibranch Pipeline in Jenkins. The
    new CD pipeline will have the following stages:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在来到了 CD 设计的核心。我们不会创建一个新的流水线；相反，我们将在 Jenkins 中基于现有的 CI 多分支流水线上构建。新的 CD 流水线将包括以下阶段：
- en: Fetch the code from the **version control system** (**VCS**) on a push event
    (initialization of the CI pipeline).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在推送事件（CI 流水线的初始化）上从**版本控制系统**（**VCS**）获取代码。
- en: Build and unit test the code; publish a unit test report on Jenkins.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建和单元测试代码；在 Jenkins 上发布单元测试报告。
- en: Perform static code analysis on the code and upload the result to SonarQube.
    Fail the pipeline if the number of bugs crosses the threshold defined in the quality
    gate.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对代码进行静态代码分析并将结果上传到 SonarQube。如果错误数量超过质量门限定义的阈值，则流水线失败。
- en: Perform integration testing; publish a unit test report on Jenkins.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行集成测试；在 Jenkins 上发布单元测试报告。
- en: Upload the built artifacts to Artifactory along with some meaningful properties.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将构建好的产物与一些有意义的属性一起上传到 Artifactory。
- en: Deploy the binaries to the testing environment.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将二进制文件部署到测试环境。
- en: Execute testing (quality analysis).
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行测试（质量分析）。
- en: Promote the solution in Artifactory and mark it as a release candidate.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推广解决方案到 Artifactory 并将其标记为发布候选版本。
- en: The purpose of the preceding CD pipeline is to automate the process of continuously
    deploying, testing (QA), and promoting the build artifacts in the binary repository.
    Reporting for failures/success happens at every step. Let us discuss these pipelines
    and their constituents in detail.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 CD 流水线的目的是自动化持续部署、测试（QA）并推动构建产物到二进制存储库的过程。每个步骤都会报告失败/成功。让我们详细讨论这些流水线及其组成部分。
- en: In the real world, the QA may contain multiple stages of testing, such as performance
    testing, user acceptance testing, component testing, and so on. To keep things
    simple, we will perform only performance testing in our example CD pipeline.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，QA 可能包含多个测试阶段，例如性能测试、用户验收测试、组件测试等。为了简化问题，我们将在示例 CD 流水线中仅执行性能测试。
- en: Toolset for CD
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CD 工具集
- en: The example project for which we are implementing CI is a simple Maven project.
    Therefore, we will see Jenkins working closely with many other tools.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在实施 CI 的示例项目是一个简单的 Maven 项目。因此，我们将看到 Jenkins 与许多其他工具密切配合。
- en: 'The following table contains the list of tools and technologies involved in
    everything that we will be seeing:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格包含我们将要看到的所有工具和技术的列表：
- en: '| **Tool/Technology** | **Description** |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| **工具/技术** | **描述** |'
- en: '| Java | Primary programming language used for coding |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| Java | 主要用于编码的编程语言 |'
- en: '| Maven | Build tool |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| Maven | 构建工具 |'
- en: '| JUnit | Unit test and integration test tools |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| JUnit | 单元测试和集成测试工具 |'
- en: '| Jenkins | CI tool |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| Jenkins | CI 工具 |'
- en: '| GitHub | VCS |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| GitHub | 版本控制系统 |'
- en: '| SonarQube | Static code analysis tool |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| SonarQube | 静态代码分析工具 |'
- en: '| Artifactory | Binary repository manager |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| Artifactory | 二进制仓库管理器 |'
- en: '| Apache Tomcat | Application server to host the solution |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| Apache Tomcat | 用于托管解决方案的应用服务器 |'
- en: '| Apache JMeter | Performance testing tool |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| Apache JMeter | 性能测试工具 |'
- en: Creating a Docker image – performance testing
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Docker 镜像 - 性能测试
- en: 'In this section, we will create a Docker image for our **performance testing**
    (**PT**). This Docker image will be used by Jenkins to create Docker containers,
    wherein we will deploy our built solution and execute our performance tests. Follow
    the given steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为我们的**性能测试**（**PT**）创建一个 Docker 镜像。这个 Docker 镜像将被 Jenkins 用来创建 Docker
    容器，在其中我们将部署我们构建的解决方案并执行我们的性能测试。按照以下步骤进行：
- en: 'Log in to your Docker server. Give the following command to check the available
    Docker images:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的 Docker 服务器。执行以下命令以检查可用的 Docker 镜像：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'From the following screenshot, you can see I have three Docker images (`ubuntu`,
    `hello-world`, and `maven-build-slave-0.1`) already on my Docker server:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下截图中，您可以看到我已经在我的 Docker 服务器上有三个 Docker 镜像（`ubuntu`、`hello-world` 和 `maven-build-slave-0.1`）：
- en: '![](img/cd806558-9290-422f-843b-89af36ee38a2.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd806558-9290-422f-843b-89af36ee38a2.png)'
- en: Listing the Docker images
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 列出 Docker 镜像
- en: We will build a new Docker image for running our PT using the Ubuntu Docker
    image.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用 Ubuntu Docker 镜像构建一个新的 Docker 镜像来运行我们的 PT。
- en: 'Let us upgrade our Ubuntu Docker image with all the necessary application that
    we need to run our tests, which are as follows:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们升级我们的 Ubuntu Docker 镜像，添加我们运行测试所需的所有必要应用程序，如下所示：
- en: Java JDK (latest)
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java JDK（最新版）
- en: Apache Tomcat (8.5)
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache Tomcat（8.5）
- en: Apache JMeter
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Apache JMeter
- en: A user account to log in the Docker container
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于登录 Docker 容器的用户账号
- en: OpenSSH daemon (to accept SSH connection)
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSSH 守护程序（接受 SSH 连接）
- en: Curl
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Curl
- en: 'Execute the following command to run a Docker container using the Ubuntu Docker
    image. This will create a container and open up its bash shell:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以使用 Ubuntu Docker 镜像运行 Docker 容器。这将创建一个容器并打开其 bash shell：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, install all the required application as you would do on any normal Ubuntu
    machine. Let''s begin with creating a `jenkins` user:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，安装所有所需的应用程序，就像您在任何普通的 Ubuntu 机器上做的一样。让我们从创建一个`jenkins`用户开始：
- en: 'Execute the following command and follow the user creation steps, shown as
    follows:'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令，并按照以下所示的用户创建步骤进行：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/f509ecad-31db-44c1-9812-d40924045d39.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f509ecad-31db-44c1-9812-d40924045d39.png)'
- en: Creating a user
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用户
- en: 'Check the new user, using the switch user command:'
  id: totrans-67
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用切换用户命令检查新用户：
- en: '[PRE3]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Switch back to the `root` user by typing `exit`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`exit`切换回`root`用户。
- en: 'Next, we will install the SSH server. Execute the following commands in sequence:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将安装 SSH 服务器。按照以下命令的顺序执行：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Follow the given steps to install Java:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤安装 Java：
- en: 'Update the package index:'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新软件包索引：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, install Java. The following command will install the **Java Runtime Environment**
    (**JRE**):'
  id: totrans-75
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，安装 Java。执行以下命令将安装**Java 运行时环境**（**JRE**）：
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The best way to install Tomcat 8.5 is to download the latest binary release
    and then configure it manually:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Tomcat 8.5 的最佳方法是下载最新的二进制版本，然后手动配置它：
- en: 'Move to the `/tmp` directory and download Apache Tomcat 8.5, using the following
    commands:'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到 `/tmp` 目录，并下载 Apache Tomcat 8.5，使用以下命令：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We will install Tomcat inside the `home/jenkins/` directory. To do so, first
    switch to the `jenkins` user. Create a `tomcat` directory inside `/home/jenkins/`:'
  id: totrans-80
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在 `home/jenkins/` 目录中安装 Tomcat。为此，请首先切换到 `jenkins` 用户。在 `/home/jenkins/`
    中创建一个 `tomcat` 目录：
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then extract the archive to it:'
  id: totrans-82
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将存档解压到其中：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Switch back to the `root` userby typing `exit`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `exit` 切换回 `root` 用户。
- en: 'Apache JMeter is a good tool to perform performance testing. It''s free and
    open source. It can run in both GUI and command-line mode, which makes it a suitable
    candidate for automating performance testing:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Apache JMeter 是执行性能测试的好工具。它是免费和开源的。它可以在 GUI 和命令行模式下运行，这使其成为自动化性能测试的合适选择：
- en: 'Move to the `/tmp` directory:'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 `/tmp` 目录：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Download `apache-jmeter-3.1.tgz`, or whichever is the latest stable version,
    from [http://jmeter.apache.org/download_jmeter.cgi](http://jmeter.apache.org/download_jmeter.cgi):'
  id: totrans-88
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://jmeter.apache.org/download_jmeter.cgi](http://jmeter.apache.org/download_jmeter.cgi)
    下载 `apache-jmeter-3.1.tgz`，或者是最新的稳定版本：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will install JMeter inside the `opt/jmeter/` directory. To do so, create
    a `jmeter` directory inside `/opt`:'
  id: totrans-90
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将 JMeter 安装在 `opt/jmeter/` 目录中。为此，请在 `/opt` 中创建一个 `jmeter` 目录：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then extract the archive to the `/opt/jmeter/` directory and also give it the
    appropriate permissions:'
  id: totrans-92
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将存档解压到 `/opt/jmeter/` 目录，并为其分配适当的权限：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Follow the given step to install `curl`:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照给定步骤安装 `curl`：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Follow the given steps to save all the changes that we made to the Docker image:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照给定的步骤保存我们对 Docker 镜像所做的所有更改：
- en: Exit the container by typing `exit`.
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `exit` 退出容器。
- en: We need to save (`commit`) all the changes that we did to our Docker container.
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要保存（`commit`）我们对 Docker 容器所做的所有更改。
- en: 'Get the `CONTAINER ID` of the container that we worked on recently by listing
    all the inactive containers, as shown in the following screenshot after the command:'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过列出所有非活动容器，获取我们最近使用的容器的 `CONTAINER ID`，如下屏幕截图中在命令之后所示：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](img/326c64cd-d3bf-4fa2-8020-d8731154e286.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/326c64cd-d3bf-4fa2-8020-d8731154e286.png)'
- en: Listing inactive containers
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 列出非活动容器
- en: 'Note the `CONTAINER ID`, and execute the following command to save (`commit`)
    the changes that we made to our container:'
  id: totrans-103
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意 `CONTAINER ID`，并执行以下命令保存（`commit`）我们对容器所做的更改：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'I have named my container `performance-test-agent-0.1`, as shown in the following
    screenshot:'
  id: totrans-105
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我已将我的容器命名为 `performance-test-agent-0.1`，如下屏幕截图所示：
- en: '![](img/62e687de-76e9-4bab-991c-729c89603e8c.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62e687de-76e9-4bab-991c-729c89603e8c.png)'
- en: Docker commit command
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Docker commit 命令
- en: Once you have committed the changes, a new Docker image gets created.
  id: totrans-108
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交更改后，将创建一个新的 Docker 镜像。
- en: 'Execute the following `docker` command to list images, as shown in the following
    screenshot after the command:'
  id: totrans-109
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下 `docker` 命令以列出镜像，如下屏幕截图中在命令之后所示：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/4e968dab-db63-4073-aedd-8995d881c7ec.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e968dab-db63-4073-aedd-8995d881c7ec.png)'
- en: Listing the Docker images
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 列出 Docker 镜像
- en: You can see our new Docker image with the name `performance-test-agent-0.1`.
    We will now configure our Jenkins server to use the `performance-test-agent-0.1` Docker
    image to create Jenkins slaves (build agents).
  id: totrans-113
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以看到我们的新 Docker 镜像，名称为 `performance-test-agent-0.1`。我们现在将配置我们的 Jenkins 服务器使用
    `performance-test-agent-0.1` Docker 镜像来创建 Jenkins 从节点（构建代理）。
- en: Adding Docker container credentials in Jenkins
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Jenkins 中添加 Docker 容器凭据
- en: 'Follow the given steps to add credentials inside Jenkins to allow it to talk
    to Docker:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给定的步骤在 Jenkins 中添加凭据，以允许其与 Docker 通信：
- en: From the Jenkins dashboard, navigate to Credentials | System | Global credentials
    (unrestricted).
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Jenkins 仪表板导航到**凭据** | **系统** | **全局凭据（不受限制）**。
- en: Click on the **Add Credentials** link on the left-hand side menu to create a
    new credential (see the following screenshot).
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击左侧菜单上的**添加凭据**链接以创建新的凭据（参见以下屏幕截图）。
- en: Choose **Kind** as Username with Password.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**类型**为**用户名与密码**。
- en: Leave the Scope field to its default value.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**范围**字段保留为其默认值。
- en: Add a username for your Docker image (`jenkins`, as per our example) under the Username field.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**用户名**字段下为您的 Docker 镜像（按照我们的示例，为 `jenkins`）添加一个用户名。
- en: Under the Password field, add the password.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**密码**字段下面添加密码。
- en: Add an ID under the ID field, and a description under the Description field.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**ID**字段下添加一个 ID，并在**描述**字段下添加描述。
- en: 'Once done, click on the OK button:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，单击**OK**按钮：
- en: '![](img/47b38548-a70f-4df2-8ca8-25e3525af551.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47b38548-a70f-4df2-8ca8-25e3525af551.png)'
- en: Creating credentials inside Jenkins
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jenkins 内创建凭据
- en: Updating the Docker settings inside Jenkins
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新 Jenkins 内的 Docker 设置
- en: 'Follow the given steps to update the Docker settings inside Jenkins:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给定的步骤更新 Jenkins 内的 Docker 设置：
- en: From the Jenkins dashboard, click on **Manage Jenkins** | **Configure System**.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Jenkins 仪表板中，点击**管理 Jenkins** | **配置系统**。
- en: Scroll all the way down to the **Cloud** section.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到**云**部分的底部。
- en: Under the Cloud section, click on the **Add Docker Template** button and choose
    **Docker Template**.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Cloud 部分下，点击**添加 Docker 模板**按钮，然后选择**Docker 模板**。
- en: You will be presented with a lot of settings to configure (see the following
    screenshot). However, to keep this demonstration simple, let us stick to the important
    settings.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将看到很多要配置的设置（参见下面的截图）。然而，为了保持这个演示简单，让我们坚持重要的设置。
- en: Under the **Docker Image** field, enter the name of the Docker image that we
    created earlier. In my case, it is `performance-test-agent-0.1`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Docker 镜像**字段下，输入我们之前创建的 Docker 镜像的名称。在我的情况下，它是`performance-test-agent-0.1`。
- en: Under the **Labels** field, add a label. The Docker container will be recognized,
    using this label by your Jenkins pipeline. I have added the `docker_pt` label.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**标签**字段下，添加一个标签。使用此标签，您的 Jenkins 管道将识别 Docker 容器。我添加了`docker_pt`标签。
- en: '**Launch Method** should be Docker SSH computer launcher.'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**启动方法**应为 Docker SSH 计算机启动器。'
- en: Under the **Credentials** field, choose the credentials that we created to access
    the Docker container.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**凭据**字段下，选择我们创建的用于访问 Docker 容器的凭据。
- en: Make sure that the Pull strategy option is set to Never pull.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保拉取策略选项设置为永不拉取。
- en: Leave the rest of the options to their default values.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其余选项保持为默认值。
- en: 'Once done, click on **Apply** and then **Save**:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，点击**应用**，然后点击**保存**：
- en: '![](img/792f399f-263f-45c0-98b2-8431a6e73315.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/792f399f-263f-45c0-98b2-8431a6e73315.png)'
- en: Creating a Docker Template for integration testing
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为集成测试创建 Docker 模板
- en: Creating a performance test using JMeter
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JMeter 创建性能测试
- en: In this section, we will learn how to create a simple performance test using
    the JMeter tool. The steps mentioned should be performed on your local machine.
    The following steps are performed on a machine with Ubuntu 16.04.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用 JMeter 工具创建一个简单的性能测试。所述步骤应在您的本地机器上执行。以下步骤在具有 Ubuntu 16.04 的机器上执行。
- en: Installing Java
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Java
- en: 'Follow the given steps to install Java:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给定步骤安装 Java：
- en: 'Update the package index:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新软件包索引：
- en: '[PRE18]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, install Java. The following command will install the JRE:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，安装 Java。以下命令将安装 JRE：
- en: '[PRE19]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To set the `JAVA_HOME` environment variable, first get the Java installation
    location. Do this by executing the following command:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要设置`JAVA_HOME`环境变量，首先获取 Java 安装位置。通过执行以下命令来执行此操作：
- en: '[PRE20]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Copy the resultant path and update the `JAVA_HOME` variable inside the `/etc/environment`
    file.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制结果路径并更新`/etc/environment`文件中的`JAVA_HOME`变量。
- en: Installing Apache JMeter
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Apache JMeter
- en: 'Follow the given steps to install Apache JMeter:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给定步骤安装 Apache JMeter：
- en: 'Move to the `/tmp` directory:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入`/tmp`目录：
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Download `apache-jmeter-3.1.tgz`, or whichever is the latest stable version,
    from [http://jmeter.apache.org/download_jmeter.cgi](http://jmeter.apache.org/download_jmeter.cgi):'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://jmeter.apache.org/download_jmeter.cgi](http://jmeter.apache.org/download_jmeter.cgi)下载`apache-jmeter-3.1.tgz`，或者是最新的稳定版本：
- en: '[PRE22]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We will install JMeter inside the `/opt/jmeter` directory. To do so, create
    a `jmeter` directory inside `/opt`:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在`/opt`目录下安装 JMeter。为此，在`/opt`内创建一个`jmeter`目录：
- en: '[PRE23]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then extract the archive to it:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将归档文件解压到其中：
- en: '[PRE24]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Starting JMeter
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动 JMeter
- en: 'Follow the given steps to start JMeter:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给定步骤启动 JMeter：
- en: 'To start JMeter, move to the JMeter installation directory and run the `jmeter.sh`,
    script using the following command:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启动 JMeter，请移动到 JMeter 安装目录并运行`jmeter.sh`脚本，使用以下命令：
- en: '[PRE25]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The JMeter GUI utility will open up in a new window.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JMeter GUI 实用程序将在一个新窗口中打开。
- en: Creating a performance test case
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建性能测试用例
- en: 'By default, you will see an example test plan. We will create a new test plan
    by modifying the existing template:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，您将看到一个示例测试计划。我们将通过修改现有模板来创建一个新的测试计划：
- en: 'Rename the test plan to `Hello_World_Test_Plan`, as shown in the following
    screenshot:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将测试计划重命名为`Hello_World_Test_Plan`，如下截图所示：
- en: '![](img/a956195c-a5df-4d44-915a-e6d07b529020.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a956195c-a5df-4d44-915a-e6d07b529020.png)'
- en: Creating a test plan
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 创建测试计划
- en: 'Save it inside the `examples` folder by clicking on the Save button from the
    menu items or by clicking *Ctrl* + *S*, as shown in the following screenshot:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击菜单项中的保存按钮或点击*Ctrl* + *S*，将其保存在`examples`文件夹内，如下截图所示：
- en: '![](img/7b1dafe8-34ef-48f6-a714-94b9fde90f54.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b1dafe8-34ef-48f6-a714-94b9fde90f54.png)'
- en: Saving the test plan
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 保存测试计划
- en: Creating a thread group
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个线程组
- en: 'Follow the given steps to create a thread group:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给定步骤创建一个线程组：
- en: 'Add a thread group. To do so, right-click on `Hello_World_Test_Plan` and select
    **Add** | **Threads (Users)** | **Thread Group**:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个线程组。要这样做，请右键单击`Hello_World_Test_Plan`，然后选择**添加** | **线程（用户）** | **线程组**：
- en: '![](img/141ed30d-e9c4-4c9e-99b4-aaddef0ec338.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/141ed30d-e9c4-4c9e-99b4-aaddef0ec338.png)'
- en: Creating a thread group
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个线程组
- en: 'In the resultant page, give your thread group a name and fill the options as
    follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生成的页面中，为你的线程组命名并填写以下选项：
- en: Select **Continue** for the option **Action to be taken after a Sampler error**.
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**继续**以进行 **采样器错误后要执行的操作**。
- en: Add **Number of Threads (users)** as `1`.
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**线程数（用户）**添加为`1`。
- en: Add **Ramp-Up Period (in seconds)** as `1`.
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**上升时间（秒）**添加为`1`。
- en: 'Add **Loop Count** as `1`:'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**循环次数**添加为`1`：
- en: '![](img/a53d3e48-1049-44b7-9afd-f6af7bddaf20.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a53d3e48-1049-44b7-9afd-f6af7bddaf20.png)'
- en: Configuring a thread group
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 配置一个线程组
- en: Creating a sampler
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个采样器
- en: 'Follow the given steps to create a sampler:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给定步骤创建一个采样器：
- en: 'Right-click on `Hello_World_Test_Plan` and select **Add** | **Sampler** | **HTTP
    Request**:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Hello_World_Test_Plan`，然后选择**添加** | **采样器** | **HTTP 请求**：
- en: '![](img/6b05ed69-1771-48e8-a77b-e3ec50e0dae7.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b05ed69-1771-48e8-a77b-e3ec50e0dae7.png)'
- en: Adding a Sampler
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个采样器
- en: 'Name the HTTP Request appropriately and fill the options as follows:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 适当命名 HTTP 请求并填写以下选项：
- en: Add **Server Name or IP** as `<IP Address of your Testing Server machine>`.
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**服务器名称或 IP**添加为`<您的测试服务器机器的 IP 地址>`。
- en: Add Port Number as `8080`.
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加端口号为`8080`。
- en: 'Add **Path** as `/hello.0.0.1/`:'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**路径**添加为`/hello.0.0.1/`：
- en: '![](img/bf85ab3c-ee78-483f-930b-00c251dbadfc.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf85ab3c-ee78-483f-930b-00c251dbadfc.png)'
- en: Configuring a sampler
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 配置采样器
- en: Adding a listener
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个监听器
- en: 'Follow the given steps to add a listener:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 按照给定步骤添加一个监听器：
- en: 'Right-click on `Hello_World_Test_Plan` and select **Add** | **Listener** |
    **View Results Tree**:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Hello_World_Test_Plan`，然后选择**添加** | **监听器** | **查看结果树**：
- en: '![](img/5b778cfb-8997-45e4-a40b-912e5322b473.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b778cfb-8997-45e4-a40b-912e5322b473.png)'
- en: Adding a Listener
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个监听器
- en: Do nothing; leave all the fields as they are.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么都不做；将所有字段保持原样。
- en: Save the whole configuration by clicking on the Save button in the menu items
    or by clicking *Ctrl* + *S*.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击菜单项中的保存按钮或点击*Ctrl* + *S*保存整个配置。
- en: Copy the `.jmx` file from `/opt/jmeter/bin/examples`*.*
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`/opt/jmeter/bin/examples`*.*复制`.jmx`文件。
- en: Under your Maven project, create a folder named `pt` inside the `src` directory
    and add the `.jmx` file inside it.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 Maven 项目下，创建一个名为`pt`的文件夹，在`src`目录中，并将`.jmx`文件放入其中。
- en: Upload the code to GitHub.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将代码上传到 GitHub。
- en: The CD pipeline
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**CD 管道**'
- en: We have all the required tools and the Docker image is ready. In this section,
    we will create a pipeline in Jenkins that will describe our CD process.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拥有所有必需的工具，Docker 镜像已准备就绪。在本节中，我们将在 Jenkins 中创建一个管道，描述我们的 CD 过程。
- en: Writing the Jenkinsfile for CD
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 CD 编写 Jenkinsfile
- en: We will build on the CI pipeline that we created earlier. Let's first revisit
    our CI pipeline, and then we will add some new stages to it as part of the CD
    process.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在之前创建的 CI 管道基础上进行。让我们首先重新审视我们的 CI 管道，然后我们将作为 CD 过程的一部分添加一些新的阶段。
- en: Revisiting the pipeline code for CI
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新审视 CI 管道的代码
- en: 'The following is the complete combined code that was part of the CI:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是作为 CI 的一部分的完整组合代码：
- en: '[PRE26]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Pipeline code to stash the build artifacts
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于存储构建产物的管道代码
- en: 'The Jenkins pipeline uses a feature called `stash` to pass build artifacts
    across nodes. In the following step, we will `stash` a few build artifacts that
    we wish to pass to the `docker_pt` node, wherein we will perform our performance
    test:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 管道使用称为 `stash` 的功能在节点之间传递构建产物。在接下来的步骤中，我们将 `stash` 一些希望传递到`docker_pt`节点的构建产物：
- en: '[PRE27]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the preceding code:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中：
- en: '`name`: Name for the stash'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：存储的名称'
- en: '`includes`: Comma-separated files to include'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`includes`：要包含的逗号分隔文件'
- en: Spawning a Docker container – performance testing
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成一个 Docker 容器 - 性能测试
- en: 'First, let us create a pipeline code that will create a Docker container (Jenkins
    slave) using the `performance-test-agent-0.1` Docker image for performance testing:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个管道代码，该代码将使用`performance-test-agent-0.1` Docker 镜像为性能测试创建一个 Docker
    容器（Jenkins 从节点）：
- en: '[PRE28]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Where `docker_pt` is the label for the `performance-test-agent-0.1` Docker template.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`docker_pt`是`performance-test-agent-0.1` Docker 模板的标签。
- en: 'We would like to perform the following tasks on the `docker_pt` node:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要在`docker_pt`节点上执行以下任务：
- en: Start Tomcat.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Tomcat。
- en: Deploy the build artifacts to Tomcat on the testing environment.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将构建产物部署到测试环境上的 Tomcat。
- en: Perform performance testing.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行性能测试。
- en: Promote the build artifacts inside Artifactory.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Artifactory 中提升构建工件。
- en: All the preceding tasks are various stages of our CD pipeline. Let's write the
    pipeline code for each one of them.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 所有前述任务都是我们 CD 管道的各个阶段。让我们为每一个阶段编写管道代码。
- en: Pipeline code to start Apache Tomcat
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动 Apache Tomcat 的管道代码
- en: 'The pipeline code to start Apache Tomcat on the performance testing agent is
    a simple shell script that will run the `./startup.sh` script present inside the
    Tomcat installation directory:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在性能测试代理上启动 Apache Tomcat 的管道代码是一个简单的 shell 脚本，将运行Tomcat安装目录中存在的 `./startup.sh`
    脚本：
- en: '[PRE29]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Wrap the preceding step inside a `stage` called `Start Tomcat`:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述步骤包装在名为 `启动 Tomcat` 的 `stage` 中：
- en: '[PRE30]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Pipeline code to deploy build artifacts
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署构建工件的管道代码
- en: 'The pipeline code to deploy build artifacts happens in two steps. First, we
    will un-stash the binary package that we stashed from the previous node Docker
    block. Then, we deploy the un-stashed files into the `webapps` folder inside the
    Tomcat installation directory on our testing environment. The code is as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 部署构建工件的管道代码分为两个步骤。首先，我们将从上一个节点 Docker 块中存储的二进制包取出。然后，我们将未存储的文件部署到我们的测试环境中 Tomcat
    安装目录下的 `webapps` 文件夹中。代码如下：
- en: '[PRE31]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Wrap the preceding step inside a `stage` called `Deploy`:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述步骤包装在名为 `部署` 的 `stage` 中：
- en: '[PRE32]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Pipeline code to run performance testing
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行性能测试的管道代码
- en: 'The pipeline code to execute the performance testing is a simple shell script
    that evokes the `jmeter.sh` script and passes the `.jmx` file to it. The test
    result is stored inside a `.jtl` file that is then archived. The code is as follows:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 执行性能测试的管道代码是一个简单的 shell 脚本，调用 `jmeter.sh` 脚本并将 `.jmx` 文件传递给它。测试结果存储在一个 `.jtl`
    文件中，然后进行归档。代码如下：
- en: '[PRE33]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The following table gives the description the preceding code snippet:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格给出了上述代码片段的描述：
- en: '| **Code** | **Description** |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| **代码** | **描述** |'
- en: '| `./jmeter.sh -n -t <path to the .jmx file> -l <path to save the .jtl file>`
    | This is the `jmeter` command to execute the performance test plan (the `.jmx`
    files) and generate a test result (the `.jtl` files). |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| `./jmeter.sh -n -t <.jmx 文件的路径> -l <保存 .jtl 文件的路径>` | 这是执行性能测试计划（`.jmx` 文件）并生成测试结果（`.jtl`
    文件）的 `jmeter` 命令。 |'
- en: '| `step([$class: ''ArtifactArchiver'', artifacts: ''**/*.jtl''])` | This line
    of code will archive all files with the `.jtl` extension. |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| `step([$class: ''ArtifactArchiver'', artifacts: ''**/*.jtl''])` | 此行代码将归档所有扩展名为
    `.jtl` 的文件。 |'
- en: 'Wrap the previous step inside a `stage` called `Performance Testing`:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 将上一步包装在名为 `性能测试` 的 `stage` 中：
- en: '[PRE34]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Pipeline code to promote build artifacts in Artifactory
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Artifactory 中提升构建工件的管道代码
- en: 'The way we are going to promote build artifacts in Artifactory is by using
    the properties (key-value pair) feature. All builds that have passed performance
    testing will be applied a `Performance-Tested=Yes` tag. The code is as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 Artifactory 中提升构建工件的方式是使用属性（键值对）功能。所有通过性能测试的构建都将应用一个 `Performance-Tested=Yes`
    标签。代码如下：
- en: '[PRE35]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The following table gives the description the preceding code snippet:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格给出了上述代码片段的描述：
- en: '| **Code** | **Description** |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| **代码** | **描述** |'
- en: '| `withCredentials([usernameColonPassword(credentialsId: ''artifactory-account'',
    variable: ''credentials'')]) {``}` | We are using the `withCredentials` plugin
    inside Jenkins to pass Artifactory credentials to the `curl` command. |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `withCredentials([usernameColonPassword(credentialsId: ''artifactory-account'',
    variable: ''credentials'')]) {``}` | 我们在 Jenkins 中使用 `withCredentials` 插件将 Artifactory
    凭据传递给 `curl` 命令。 |'
- en: '| `curl -u<username>:password -X PUT "<artifactory server URL>/api/storage/<artifactory
    repository name>?properties=key-value"` | This is the `curl` command to update
    the property (key-value pair) on the build artifact present inside Artifactory.
    The `curl` command makes use of the REST API features of Artifactory. |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `curl -u<用户名>:密码 -X PUT "<artifactory服务器URL>/api/storage/<artifactory存储库名称>?properties=key-value"`
    | 这是更新 Artifactory 中构建工件属性（键值对）的 `curl` 命令。`curl` 命令利用了 Artifactory 的 REST API
    功能。 |'
- en: 'Wrap the previous step inside a `stage` called `Promote build in Artifactory`:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 将上一步包装在名为 `在Artifactory中提升构建` 的 `stage` 中：
- en: '[PRE36]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Combined CD pipeline code
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合CD管道代码
- en: 'The following is the complete combined code that will run inside the `docker_pt`
    node:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是完整的组合代码，将在 `docker_pt` 节点中运行：
- en: '[PRE37]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Let us combine the preceding code with the pipeline code for CI to get the
    complete CD pipeline code, shown as follows:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将上述代码与 CI 的管道代码结合起来，得到完整的 CD 管道代码，如下所示：
- en: '[PRE38]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: CD in action
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CD 运行情况
- en: 'Make some changes on your GitHub code or just trigger the Jenkins pipeline
    from the Jenkins dashboard:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的 GitHub 代码上进行一些更改，或者仅从 Jenkins 仪表板触发 Jenkins 流水线：
- en: 'Log in to Jenkins, and from the Jenkins dashboard click on your Multibranch
    Pipeline. You should see something like the following:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 Jenkins，并从 Jenkins 仪表板单击您的 Multibranch Pipeline。您应该会看到类似以下内容：
- en: '![](img/254111d5-9f2e-4f30-9332-c02d289e5f0b.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](img/254111d5-9f2e-4f30-9332-c02d289e5f0b.png)'
- en: Jenkins CD pipeline in action
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins CD 流水线实践
- en: 'Log in to the Artifactory server and see if the code has been uploaded and
    promoted using the properties, shown as follows:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 Artifactory 服务器，查看代码是否已使用下列属性上传和推广：
- en: '![](img/2e2b9422-cd5c-4416-b89b-a217114f070f.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e2b9422-cd5c-4416-b89b-a217114f070f.png)'
- en: Build artifacts being promoted inside Artifactory
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 构建产物正在 Artifactory 中推广
- en: Let us see our CD pipeline in Jenkins Blue Ocean. To do so, navigate to your
    Jenkins Multibranch CD pipeline (<`Jenkins URL>/job/<Jenkins multibranch pipeline
    name>/`).
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在 Jenkins Blue Ocean 中看看我们的 CD 流水线。要做到这一点，请导航到您的 Jenkins Multibranch CD 流水线（<`Jenkins
    URL>/job/<Jenkins multibranch pipeline name>/`）。
- en: On the pipeline page, click on the Open Blue Ocean link available on the left-hand
    side menu.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在流水线页面上，单击左侧菜单中的 Open Blue Ocean 链接。
- en: 'You will be taken to your Multibranch Pipeline page in Blue Ocean, as shown
    in the following screenshot:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被带到 Blue Ocean 中的 Multibranch Pipeline 页面，如以下截图所示：
- en: '![](img/d9717ae3-3dd7-4a38-bf60-9a40464a1d42.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9717ae3-3dd7-4a38-bf60-9a40464a1d42.png)'
- en: 'Click on the master branch to see its pipeline. You should see something like
    the following:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击主分支以查看其流水线。您应该会看到类似以下内容：
- en: '![](img/83069db0-08c4-4210-8b28-c951e83858ec.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/83069db0-08c4-4210-8b28-c951e83858ec.png)'
- en: Summary
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to create an end-to-end CD pipeline that gets
    triggered on a push event, performs builds, static code analysis, and integration
    testing, uploads the successfully tested binary artifact to Artifactory, deploys
    the code to the testing environment, performs some automated testing, and promotes
    the binaries in Artifactory.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建一个端到端的 CD 流水线，在推送事件上触发，执行构建、静态代码分析和集成测试，将成功测试的二进制产物上传到 Artifactory，部署代码到测试环境，执行一些自动化测试，并在
    Artifactory 中推广二进制产物。
- en: The CD design discussed in the book can be modified to suit the needs of any
    type of project. The users just need to identify the right tools and configurations
    that can be used with Jenkins.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 书中讨论的 CD 设计可以修改以满足任何类型项目的需求。用户只需识别可以与 Jenkins 配合使用的正确工具和配置。
- en: In the next chapter, we will learn about Continuous Deployment, how different
    it is from Continuous Delivery, and more.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习有关持续部署的内容，它与持续交付有何不同，以及更多。
