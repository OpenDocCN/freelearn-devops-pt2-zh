- en: Setting Up a Hardened WordPress with Encrypted Automated Backups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the basic setup is done, let's pick up various security automation
    scenarios and look at them one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Everyone would agree that setting up a secure website and keeping it secured
    is a fairly common security requirement. And since it is so common, it would be
    useful for a lot of people who are tasked with building and managing websites
    to stay secure to look at that specific scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Are you aware that, according to Wikipedia, 27.5% of the top 10 million websites
    use WordPress? According to another statistic, 58.7% of all websites with known
    software on the entire web run WordPress.
  prefs: []
  type: TYPE_NORMAL
- en: If there are so many, an automated secure way of setting up and maintaining
    WordPress should be useful for some readers.
  prefs: []
  type: TYPE_NORMAL
- en: Even if WordPress is something that doesn't interest you a lot, bear in mind
    that the overall steps to set up and secure a LAMP/LEMP stack application are
    universal.
  prefs: []
  type: TYPE_NORMAL
- en: 'For us, setting up a hardened WordPress with encrypted automated backups can
    be broken down into the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a Linux/Windows server with security measures in place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up a web server (Apache/Nginx on Linux and IIS on Windows).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up a database server (MySQL) on the same host.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up WordPress using a command-line utility called **WP-CLI**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up backup for the site files and the database which is incremental,
    encrypted, and most importantly, automated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this chapter, we will do all of this using Ansible playbooks and roles. We
    will assume that the server that we plan to deploy our WordPress website on is
    already up and running and we are able to connect to it. We will store the backup
    in an already configured AWS S3 bucket, for which the access key and secret access
    key is already provisioned.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: CLI for WordPress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why Ansible for this setup?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A complete WordPress installation, step-by-step
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an Apache2 web server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What if you don't want to roll your own? The Trellis stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why would we use Trellis, and when is it a good idea to use it?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling TLS/SSL with Let's Encrypt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WordPress on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CLI for WordPress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using a tool called WP-CLI, which allows us to do many things in
    WordPress that traditionally require a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: WP-CLI is the CLI for WordPress. You can update plugins, configure multisite
    installs, and much more, without using a web browser. For more information on
    WP-CLI, visit [https://WP-CLI.org/](https://wp-cli.org/), and for WordPress, visit [https://wordpress.org/](https://wordpress.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following command will download and set up a WordPress:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A complete example can be found at [https://developer.WordPress.org/cli/commands/core/#examples](https://developer.wordpress.org/cli/commands/core/#examples):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This example gives us a glimpse of the power of the WP-CLI tool when invoked
    from an Ansible playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Why Ansible for this setup?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible is made for security automation and hardening. It uses YAML syntax,
    which helps us to codify our entire process of repeated tasks. By using this,
    we can automate the process of continuous delivery and deployment of infrastructure
    using roles and playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: The modular approach enables us to perform tasks very simply. For example, the
    operations teams can write a playbook to set up a WordPress site and the security
    team can create another role which can harden the WordPress site.
  prefs: []
  type: TYPE_NORMAL
- en: It is very easy to use the modules for repeatability, and the output is idempotent,
    which means creating standards for the servers, applications, and infrastructure.
    Some use cases include creating base images for organizations using internal policy
    standards.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible uses SSH protocol, which is by default secured with encrypted transmission
    and host encryption. Also, there are no dependency issues while dealing with different
    types of operating systems. It uses Python to perform; this can be easily extended,
    based on our use case.
  prefs: []
  type: TYPE_NORMAL
- en: A complete WordPress installation step-by-step
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will go ahead and do a complete setup of WordPress, the
    required database server, hardening, and backup. Our platform of choice is Linux
    (Ubuntu 16.04) with nginx web server and with PHP-FPM for PHP runtime. We will
    use duply to set up the backups which will get stored in AWS S3.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up nginx web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Setting up nginx is as simple as `sudo apt-get install nginx`, but configuring
    for our use case and managing the configuration''s automated way is where Ansible
    gives the power. Let''s look at the following snippet of nginx''s role from the
    playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we are adding the signing key, then adding the
    repository, then installing. This ensures that we can also perform integrity checks
    while downloading packages from the repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we are using Jinja2 templating to perform the configuration changes, which
    can be predefined in our configuration before updating in the server.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To set up WordPress CMS, we need to have a database and PHP installed, so we
    will be installing MySQL as a database and PHP-FPM for processing.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up MySQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already seen how to set up MySQL in the previous chapter. Here, we
    will see how to create new users and databases for the WordPress application.
    Then we will apply the hardening steps via Ansible modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code snippet describes creating a new database and user and assigning
    that user full permission to the WordPress application database using the `mysql_db` and `mysql_user`
    modules, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PHP for WordPress setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following code snippet uses different modules to perform the installation
    of PHP and other required packages. Then it updates the PHP-FPM configuration
    using the `replace` module. Finally, it also updates the nginx configuration to
    update the PHP-FPM processing using the `template` module, and restarts the service
    to apply the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Installing WordPress using WP-CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following code snippet will install and set up WordPress so it is up and
    running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Hardening SSH service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This will be like a more traditional approach, with a modern automated method,
    using Ansible. Some of the items included here are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Disabling the `root` user login, and instead creating a different user, and,
    if required, providing the `sudo` privilege:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Using key-based authentication to log in. Unlike with password-based authentication,
    we can generate SSH keys and add the public key to the authorized keys:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Some of the configuration tweaks using the SSH configuration file; for example, `PermitRootLogin`,
    `PubkeyAuthentication`, and `PasswordAuthentication`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We can also set up services like `fail2ban` for protecting against basic attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, we can enable MFA, if required to log in. For more information, visit
    [https://www.digitalocean.com/community/tutorials/how-to-set-up-multi-factor-authentication-for-ssh-on-ubuntu-16-04](https://www.digitalocean.com/community/tutorials/how-to-set-up-multi-factor-authentication-for-ssh-on-ubuntu-16-04).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following playbook will provide more advanced features for SSH hardening
    by dev-sec team: [https://github.com/dev-sec/ansible-ssh-hardening](https://github.com/dev-sec/ansible-ssh-hardening)
  prefs: []
  type: TYPE_NORMAL
- en: Hardening a database service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have seen setting up the database. The following code snippet shows how
    we can harden the MySQL service by binding it to localhost and the required interfaces
    for interacting with the application. It then removes the anonymous user and test
    databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Hardening nginx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we can start looking at things like disabling server tokens to not display
    version information, adding headers like `X-XSS-Protection`, and many other configuration
    tweaks. Most of these changes are done via configuration changes, and Ansible
    allows us to version and control and automate these changes based on user requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: The nginx server version information can be blocked by adding the `server_tokens
    off;` value to the configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add_header X-XSS-Protection "1; mode=block";` will enable the cross-site scripting
    (XSS) filter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSLv3 can be disabled by adding  `ssl_protocols TLSv1 TLSv1.1 TLSv1.2;`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This list can be pretty large, based on the use case and scenario:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code snippet contains nginx configuration template for updating
    the hardened nginx configuration changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Mozilla runs an updated web page on guidance for SSL/TLS at [https://wiki.mozilla.org/Security/Server_Side_TLS](https://wiki.mozilla.org/Security/Server_Side_TLS). The
    guidance offers an opinion on what cipher suites to use, and other security measures.
    Additionally, if you trust their judgment, you can also use their SSL/TLS configuration
    generator to quickly generate a configuration for your web server configuration.
    For more information, visit [https://mozilla.github.io/server-side-tls/ssl-config-generator/](https://mozilla.github.io/server-side-tls/ssl-config-generator/).
  prefs: []
  type: TYPE_NORMAL
- en: Whichever configuration you decide to use, the template needs to be named as `hardened-nginx-config.j2`.
  prefs: []
  type: TYPE_NORMAL
- en: Hardening WordPress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This includes basic checks for WordPress security misconfigurations. Some of
    them include:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Directory and file permissions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Username and attachment enumeration blocking. The following code snippet is
    part of nginx''s configuration:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Disallowing file edits in the WordPress editor:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: There are many other checks we can add as the configuration changes and updates.
  prefs: []
  type: TYPE_NORMAL
- en: Hardening a host firewall service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following code snippet is for installing and configuring the **uncomplicated
    firewall** (**UFW**) with its required services and rules. Ansible even has a
    module for UFW, so the following snippet starts with installing this and enabling
    logging. It follows this by adding default policies, like default denying all
    incoming and allowing outgoing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then it will add SSH, HTTP, and HTTPS services to allow incoming. These options
    are completely configurable, as required. Then it will enable and add to startup
    programs that apply the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Setting up automated encrypted backups in AWS S3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Backups are always something that most of us feel should be done, but they seem
    quite a chore. Over the years, people have done extensive work to ensure we can
    have simple enough ways to back up and restore our data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In today''s day and age, a great backup solution/software should be able to
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Feature** | **Remark** |'
  prefs: []
  type: TYPE_TB
- en: '| Automated | Automation allows for process around it |'
  prefs: []
  type: TYPE_TB
- en: '| Incremental | While storage is cheap overall, if we want backups at five minute intervals,
    what has changed should be backed up |'
  prefs: []
  type: TYPE_TB
- en: '| Encrypted before it leaves our server | This is to ensure that we have security
    of data at rest and in motion |'
  prefs: []
  type: TYPE_TB
- en: '| Cheap | While we care about our data, a good back up solution will be much
    cheaper than the server which needs to be backed up |'
  prefs: []
  type: TYPE_TB
- en: 'For our backup solution, we will pick up the following stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software** | Duply - A wrapper over duplicity, a Python script  |'
  prefs: []
  type: TYPE_TB
- en: '| **Storage** | While duply offers many backends, it works really well with
    AWS S3  |'
  prefs: []
  type: TYPE_TB
- en: '| **Encryption** | By using GPG, we can use asymmetric public and private key
    pairs |'
  prefs: []
  type: TYPE_TB
- en: 'The following code snippet is to set up duply for encrypted automated backups
    from the server to AWS S3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Executing playbook against an Ubuntu 16.04 server using Ansible Tower
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we are ready with the playbook and updating the variables as required,
    we can go ahead and execute the playbook. Before that, we have to create the template
    in Ansible Tower to perform this operation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/266b5435-4813-4632-b833-57f4ab04cb58.png)'
  prefs: []
  type: TYPE_IMG
- en: Ansible Tower job template for WordPress setup playbook
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5ade359b-1b20-4bf1-8ac1-cd68381d87ac.png)'
  prefs: []
  type: TYPE_IMG
- en: WordPress setup playbook job execution
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3958664f-96b6-458d-bac0-11c931a7a00f.png)'
  prefs: []
  type: TYPE_IMG
- en: WordPress website with HTTPS
  prefs: []
  type: TYPE_NORMAL
- en: Secure automated the WordPress updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following code snippet is to run the backups and update WordPress core,
    themes, and plugins. This can be scheduled via an Ansible Tower job for every
    day:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Scheduling via Ansible Tower for daily updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible Tower allows us to schedule jobs to run automatically against servers.
    We can configure this in templates by configuring the start date and repeat frequency
    to execute the playbook.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f760e32-86f5-44da-afc2-6cbb8965f516.png)'
  prefs: []
  type: TYPE_IMG
- en: Ansible Tower job scheduling for automated WordPress updates
  prefs: []
  type: TYPE_NORMAL
- en: 'Otherwise, we can use the `cron` job template to perform this daily and add
    this template while deploying the WordPress setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Setting up Apache2 web server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already seen this in our LEMP stack setup, and it''s very similar.
    But here, we have to use the required modules for working with WordPress. The
    following code snippet shows how we can use templating to perform configuration
    updates in the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Enabling TLS/SSL with Let's Encrypt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use a command-line tool offered by Let's Encrypt to get free SSL/TLS
    certificates in an open, automated manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tool is capable of reading and understanding an nginx virtual host file
    and generating the relevant certificates completely automatically, without any
    kind of manual intervention:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Let's Encrypt has become an extremely popular and secure way of enabling SSL/TLS
    on a website.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of June 2017, Let's Encrypt had issued over 100 million free SSL/TLS
    certificates in an automatic manner. For more information, visit [https://letsencrypt.org/2017/06/28/hundred-million-certs.html](https://letsencrypt.org/2017/06/28/hundred-million-certs.html).
  prefs: []
  type: TYPE_NORMAL
- en: What if you don't want to roll your own? The Trellis stack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Trellis stack is a way for development teams to have a local staging and production
    setup for WordPress websites.
  prefs: []
  type: TYPE_NORMAL
- en: Trellis is an open source MIT license set of Ansible playbooks for a WordPress
    LEMP stack.
  prefs: []
  type: TYPE_NORMAL
- en: Why would we use Trellis, and when is it a good idea to use it?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Trellis is a full-fledged project, based on various tools held together by Ansible.
    In many ways, it is a better alternative to using the playbook for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If you are expected to build/develop, deploy, and then maintain the production
    of a WordPress website or websites, then Trellis is a good choice.
  prefs: []
  type: TYPE_NORMAL
- en: The only caveat is that a lot of the features available are more useful if there
    is a team doing development and deployment. Otherwise, the stack is opinionated,
    and you may be saddled with some software choices that you may not like.
  prefs: []
  type: TYPE_NORMAL
- en: WordPress on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is one of the new things we are going to perform now. Until now, we have
    been setting up things in Linux based operating systems. Now we are going to set
    up IIS web server in the Windows operating system, which requires that we enable
    the `WinRM` feature in Windows services to perform Ansible playbook execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to make sure that the `pywinrm` module is installed in the control
    machine; we can install it by executing the following `pip` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How to enable WinRM in Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To simplify this process, Ansible provides a PowerShell script, which needs
    to be run as an administrator in the PowerShell console. Download the PowerShell
    script from [https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1](https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1).
  prefs: []
  type: TYPE_NORMAL
- en: 'On a Windows machine, open the command prompt as an administrator and run the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you opened port `5986` for the Windows machine in firewall rules.
    For more references, about Windows setup, visit [http://docs.ansible.com/ansible/latest/intro_windows.html](http://docs.ansible.com/ansible/latest/intro_windows.html).
  prefs: []
  type: TYPE_NORMAL
- en: Running Ansible against a Windows server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's test by executing a simple ping module against the Windows server.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to create the `inventory` file, which includes the options for
    connecting the Windows `winrm` service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To execute the Windows ping module, we can run the following Ansible command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/f2ec7fad-707a-4d82-9128-f61098edddd3.png)'
  prefs: []
  type: TYPE_IMG
- en: To learn more about the different available modules in Windows, refer to [http://docs.ansible.com/ansible/latest/list_of_windows_modules.html](http://docs.ansible.com/ansible/latest/list_of_windows_modules.html).
  prefs: []
  type: TYPE_NORMAL
- en: Installing IIS server using playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following code snippet explains how we can install and start the IIS service
    in the Windows server operating system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/d1c4c6a1-656c-4c98-93a3-aa7201ba86ff.png)'
  prefs: []
  type: TYPE_IMG
- en: We will be using Chocolatey (for more information, visit [https://chocolatey.org/](https://chocolatey.org/)),
    a package manager for Windows, for advanced installations and setup in Windows.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is installing the Web Platform Installer.
  prefs: []
  type: TYPE_NORMAL
- en: The Microsoft Web Platform Installer (Web PI) is a free tool that makes getting
    the latest components of the Microsoft Web Platform, including **Internet Information
    Services** (**IIS**), SQL Server Express, .NET Framework, and Visual Web Developer,
    easy. For more information, visit [https://www.microsoft.com/web/downloads/platform.aspx](https://www.microsoft.com/web/downloads/platform.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this is installed, we can install MySQL and WordPress using this:'
  prefs: []
  type: TYPE_NORMAL
- en: The following playbook runs the PowerShell script created by [https://gist.github.com/chrisloweau/8a15516d551a87b096620134c3624b73](https://gist.github.com/chrisloweau/8a15516d551a87b096620134c3624b73). Please
    refer to [http://www.lowefamily.com.au/2017/04/11/how-to-install-wordpress-on-windows-server-2016/](http://www.lowefamily.com.au/2017/04/11/how-to-install-wordpress-on-windows-server-2016/)
    for more details about the PowerShell script.
  prefs: []
  type: TYPE_NORMAL
- en: This setup requires some of the prerequirements. Which includes setting up the
    PowerShell execution policy and windows version supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to setup the Execution Policy by running the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This script only supports Windows Server 2016 operating system and Windows 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following Ansible playbook is executing PowerShell script to setup WordPress
    in Windows operating system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: After the execution it returns the output similar to the following. Then we
    can navigate to the IP address and follow the instructions to setup the WordPress
    final configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was all about WordPress. We used Ansible to create a fairly secure
    installation of WordPress by default. By changing the default values for the database,
    web server, and WordPress, we utilized the ability to codify security knowledge
    using Ansible playbooks. Additionally, by setting up automated, incremental, encrypted
    backups, we allowed for resilience and continuity in the face of the worst that
    could happen.
  prefs: []
  type: TYPE_NORMAL
- en: We took a brief look at how to enable Windows for working with Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at Elastic stack for setting up a centralized
    logging infrastructures. This will serve us well not only for storing all kinds
    of logs but will also alert and notify us in case we are attacked. We will also
    learn how to deploy serverless defenses to automatically block attackers.
  prefs: []
  type: TYPE_NORMAL
