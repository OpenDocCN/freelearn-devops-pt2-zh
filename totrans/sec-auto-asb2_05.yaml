- en: Automating Web Application Security Testing Using OWASP ZAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The OWASP **Zed Attack Proxy** (commonly known as **ZAP**) is one of the most
    popular web application security testing tools. It has many features that allow
    it to be used for manual security testing; it also fits nicely into **continuous
    integration/continuous delivery** (**CI/CD**) environments after some tweaking
    and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: More details about the project can be found at [https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project](https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project).
  prefs: []
  type: TYPE_NORMAL
- en: '**Open Web Application Security Project** (**OWASP**) is a worldwide not-for-profit
    charitable organization focused on improving the security of software. Read more
    about OWASP projects and resources at [https://www.owasp.org](https://www.owasp.org).'
  prefs: []
  type: TYPE_NORMAL
- en: 'OWASP ZAP includes many different tools and features in one package. For a
    pentester tasked with doing the security testing of web applications, the following
    features are invaluable:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Feature** | **Use case** |'
  prefs: []
  type: TYPE_TB
- en: '| Intercepting proxy | This allows us to intercept requests and responses in
    the browser |'
  prefs: []
  type: TYPE_TB
- en: '| Active scanner | Automatically run web security scans against targets |'
  prefs: []
  type: TYPE_TB
- en: '| Passive scanner | Glean information about security issues from pages that
    get downloaded using spider tools and so on |'
  prefs: []
  type: TYPE_TB
- en: '| Spiders | Before ZAP can attack an application, it creates a site map of
    the application by crawling all the possible web pages on it |'
  prefs: []
  type: TYPE_TB
- en: '| REST API | Allows ZAP to be run in headless mode and to be controlled for
    running automated scanner, spider, and get the results |'
  prefs: []
  type: TYPE_TB
- en: As you may have guessed, in this chapter, for security automation we will invoke
    ZAP in headless mode and use the API interfaces provided by it to do the scanning
    and security testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'ZAP is a Java-based software. The typical way of using it will involve the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Java Runtime Environment** (**JRE**) 7 or more recent installed in the operating
    system of your choice (macOS, Windows, Linux)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install ZAP using package managers, installers from the official downloads page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the latest updated stable links here: [https://github.com/zaproxy/zaproxy/wiki/Downloads](https://github.com/zaproxy/zaproxy/wiki/Downloads).
  prefs: []
  type: TYPE_NORMAL
- en: While we can build a playbook to do exactly that, the developer world is moving
    toward concepts of CI/CD and continuous security. An approach in which we can
    bootstrap a stable version of ZAP as and when required would be ideal.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to achieve that is to use OWASP ZAP as a container. In fact, this
    is the kind of setup Mozilla uses ZAP in a CI/CD pipeline to verify the baseline
    security controls at every release.
  prefs: []
  type: TYPE_NORMAL
- en: If you are wondering about the connection between Mozilla and OWASP ZAP, Simon
    Bennetts leads the OWASP ZAP project and works at Mozilla. Read his blog post
    about ZAP baseline scans at [https://blog.mozilla.org/security/2017/01/25/setting-a-baseline-for-web-security-controls/](https://blog.mozilla.org/security/2017/01/25/setting-a-baseline-for-web-security-controls/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing OWASP ZAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to use OWASP ZAP as a container in this chapter, which requires
    container runtime in the host operating system. The team behind OWASP ZAP releases
    ZAP Docker images on a weekly basis via Docker Hub. The approach of pulling Docker
    images based on tags is popular in modern DevOps environments and it makes sense
    that we talk about automation with respect to that.
  prefs: []
  type: TYPE_NORMAL
- en: Official ZAP is now available with stable and weekly releases via the Docker
    container at Docker Hub: [https://github.com/zaproxy/zaproxy/wiki/Docker](https://github.com/zaproxy/zaproxy/wiki/Docker).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker runtime
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Docker** is an open platform for developers and system administrators to
    build, ship, and run distributed applications whether on laptops, data center
    VMs, or the cloud. To learn more about Docker, refer to [https://www.docker.com/what-docker](https://www.docker.com/what-docker).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following playbook will install Docker Community Edition software in Ubuntu
    16.04:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Docker requires a 64-bit version OS and a Linux kernel version equal to or greater
    than 3.10\. Docker runtime is available for Windows and macOS as well. For the
    purposes of this chapter, the containers we will use are Linux-based. So the runtime
    can be in Windows, but the container running in that will be a Linux-based one.
    These are the standard OWASP ZAP containers available for use.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP ZAP Docker container setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The two new modules to deal with Docker containers that we will be using here
    are `docker_image` and `docker_container`.
  prefs: []
  type: TYPE_NORMAL
- en: These modules require you to be using a 2.1 and higher version of Ansible. Right
    now would be a good time to check your version of Ansible using the `—version`
    flag.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need to get the latest stable version using `pip`, run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following playbook will take some time to complete as it has to download
    about 1 GB of data from the internet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the following configuration, we are saying `api.disablekey=true`, which means
    we are not using any API key. This can be overwritten by giving the specific API
    key. `api.addrs.addr.name=.*` and `api.addrs.addr.regex=true` will allow all IP
    addresses to connect to the ZAP API.  More information about ZAP API key settings
    can be found at [https://github.com/zaproxy/zaproxy/wiki/FAQapikey](https://github.com/zaproxy/zaproxy/wiki/FAQapikey).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access the ZAP API interface by navigating to `http://ZAPSERVERIPADDRESS:8090`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd7413f7-b766-41af-b24f-9d79ce0dbc07.png)'
  prefs: []
  type: TYPE_IMG
- en: OWASP ZAP API Web UI
  prefs: []
  type: TYPE_NORMAL
- en: A specialized tool for working with Containers - Ansible Container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, we are using Docker modules to perform container operations. A new
    tool, `ansible-container`, provides an Ansible-centric workflow for building,
    running, testing, and deploying containers.
  prefs: []
  type: TYPE_NORMAL
- en: This allows us to build, push, and run containers using existing playbooks.
    Dockerfiles are like writing shell scripts, therefore, `ansible-container` will
    allow us to codify those Dockerfiles and build them using existing playbooks rather
    writing complex scripts.
  prefs: []
  type: TYPE_NORMAL
- en: The `ansible-container` supports various orchestration tools, such as Kubernetes
    and OpenShift. It can also be used to push the build images to private registries
    such as Google Container Registry and Docker Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Read more about `ansible-container` at [https://docs.ansible.com/ansible-container](https://docs.ansible.com/ansible-container/).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring ZAP Baseline scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ZAP Baseline scan is a script that is available in the ZAP Docker images.
  prefs: []
  type: TYPE_NORMAL
- en: More details about OWASP ZAP Baseline scan can be found at [https://github.com/zaproxy/zaproxy/wiki/ZAP-Baseline-Scan](https://github.com/zaproxy/zaproxy/wiki/ZAP-Baseline-Scan).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the script does:'
  prefs: []
  type: TYPE_NORMAL
- en: Runs ZAP spider against the specified target for one minute and then does a
    passive scan
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, reports all alerts as warnings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This script is intended to be ideal to run in a CI/CD environment, even against
    production sites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before setting up and running the ZAP Baseline scan, we want to run a simple
    vulnerable application so that all scans and testing using ZAP are running against
    that application, rather than running the scans against real-world applications,
    which is illegal without permission.
  prefs: []
  type: TYPE_NORMAL
- en: Running a vulnerable application container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using the **Damn Vulnerable Web Services** (**DVWS**) application
    (for more information, you can visit [https://github.com/snoopysecurity/dvws](https://github.com/snoopysecurity/dvws)).
    It is an insecure web application with multiple vulnerable web service components
    that can be used to learn real-world web service vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following playbook will set up the Docker container for running the DVWS
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the playbook is successfully executed, we can navigate to `http://DVWSSERVERIP`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/938c0a0d-3b89-43b5-9fa4-88a534cf121d.png)'
  prefs: []
  type: TYPE_IMG
- en: DVWS application home page
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to perform our OWASP ZAP Baseline scan against the DVWS application,
    by running the Baseline scan playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Running an OWASP ZAP Baseline scan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following playbook runs the Docker Baseline scan against a given website
    URL. It also stores the output of the Baseline''s scan in the host system in HTML,
    Markdown, and XML formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s explore the parameters of the preceding playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '`website_url` is the domain (or) URL that you want to perform the Baseline
    scan, we can pass this via `--extra-vars "website_url: http://192.168.33.111"` from
    the `ansible-playbook` command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reports_location` is the path to ZAP host machine where reports get stored'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot is the scanning report output from OWASP ZAP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/576c1909-a7c7-43a8-90e3-93ced983ca3c.png)'
  prefs: []
  type: TYPE_IMG
- en: OWASP ZAP Baseline scan HTML report
  prefs: []
  type: TYPE_NORMAL
- en: To generate reports in the Markdown and XML formats, add `-w report.md` and
    `-x report.xml`, respectively, to command.
  prefs: []
  type: TYPE_NORMAL
- en: Security testing against web applications and websites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we have seen how to run a Baseline scan using the OWASP ZAP container.
    Now we will see how we can perform active scans against web applications. An active
    scan may cause the vulnerability to be exploited in the application. Also, this
    type of scan requires extra configuration, which includes authentication and sensitive
    functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Running ZAP full scan against DVWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following playbook will run the full scan against the DVWS application.
    Now we can see that the playbook looks almost similar, except the flags sent to
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The OWASP ZAP full scan checks for a lot of vulnerabilities, which includes
    OWASP TOP 10 (for more information visit [https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project](https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project))
    and many others. This can be intrusive to the application and it sends active
    requests to the application. It may cause damage to the functionality based on
    the vulnerability that exists in the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1f77783-9cb8-4c72-9f58-15f022c2e90c.png)'
  prefs: []
  type: TYPE_IMG
- en: OWASP ZAP full scan for DVWS application report
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot is the report from the OWASP ZAP full scan for the
    DVWS application. We can clearly see the difference between the Baseline scan
    and the full scan, based on the number of vulnerabilities, different types of
    vulnerabilities, and risk rating.
  prefs: []
  type: TYPE_NORMAL
- en: Testing web APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to the ZAP Baseline scan, the fine folks behind ZAP provide a script
    as part of their live and weekly Docker images. We can use it to run scans against
    API endpoints defined either by OpenAPI specification or **Simple Object Access
    Protocol** (**SOAP**).
  prefs: []
  type: TYPE_NORMAL
- en: 'The script can understand the API specifications and import all the definitions.
    Based on this, it runs an active scan against all the URLs found:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Continuous scanning workflow using ZAP and Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins is an open source automation server. It is used extensively in CI/CD
    pipelines. These pipelines usually refer to a series of automated steps that occur
    based on triggers, such as code commits to version control software or a new release
    being created.
  prefs: []
  type: TYPE_NORMAL
- en: 'We already saw the example of ZAP Baseline''s scans being part of the Mozilla
    release cycle. We can integrate ZAP with Jenkins. While there are many ways we
    can do this, a useful set of steps will be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Based on a trigger, a new ZAP instance is ready for scanning
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ZAP instance runs against an automatically deployed application
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The results of the scan are captured and stored in some format
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we choose, the results can also create tickets in bug tracking systems such
    as Atlassian Jira
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For this, we will set up our pipeline infrastructure first:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up Jenkins using a playbook
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the official OWASP ZAP Jenkins plugin
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Trigger the workflow using another playbook
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The official OWASP ZAP Jenkins plugin can be found at [https://wiki.jenkins.io/display/JENKINS/zap+plugin](https://wiki.jenkins.io/display/JENKINS/zap+plugin).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Set up Jenkins on the server to be used as a CI/CD platform for OWASP ZAP.
    This will return the Jenkins administrator password and once it has been done,
    we can install the Ansible plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can add the playbook to the project. When the new trigger happens
    in the Jenkins build, the playbook will start to scan the website to perform the
    Baseline scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f4b742a-1eb2-48e3-bc56-962db8f2ad5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the playbook triggers, it will execute the playbook against the URL and
    return the ZAP Baseline scan output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0530335e-2a45-4cf4-9d97-14eb53e6e209.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up the OWASP ZAP Jenkins plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OWASP ZAP working in tandem with Jenkins is a fairly well-known setup. We already
    know how to set up Jenkins. We can install the official ZAP Jenkins plugin using
    our playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Once the playbook is ready, a bit of manual configuration is required. We start
    after our playbook has installed Jenkins and restarted the server so that the
    plugin is available for our build jobs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new build job and call it `ZAP-Jenkins`, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/532650b3-2529-4ef8-baf2-c5271b1626dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will be a freestyle project for us. Now we will add the magic of ZAP to
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c01a9481-e741-4a27-a5f7-81fe43a0427f.png)'
  prefs: []
  type: TYPE_IMG
- en: We are following the instructions as given on the Jenkins page for the official
    plugin: [https://wiki.jenkins.io/display/JENKINS/zap+plugin](https://wiki.jenkins.io/display/JENKINS/zap+plugin).
  prefs: []
  type: TYPE_NORMAL
- en: Some assembly required
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Specify the interface''s IP address and the port number on which ZAP should
    be listening. Usually, this port is `8080`, but since Jenkins is listening on
    that, we choose `8090`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/730cfcc9-281b-48be-afb8-c5a4b7b6b73a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For JDK, we choose the only available option, InheritFromJob:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9f243189-aa25-4418-8fae-a1833c4c4153.png)'
  prefs: []
  type: TYPE_IMG
- en: For the installation method, we select the ZAP that is already installed on `/usr/share/owasp-zap`. We
    add this value to a `ZAPROXY_HOME` environment variable in `/etc/environment`.
  prefs: []
  type: TYPE_NORMAL
- en: 'By doing this, we have ensured that the environment variable values will survive
    a system reboot as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4eccf484-5cca-4f5f-b724-4804d0f95444.png)'
  prefs: []
  type: TYPE_IMG
- en: We specify a fairly small value for a timeout to ensure that in case something
    goes wrong, we don't have to wait long to see that the build failed or ZAP isn't
    responding.
  prefs: []
  type: TYPE_NORMAL
- en: We also specify a command-line option to tell Jenkins what the install directory
    for ZAP is.
  prefs: []
  type: TYPE_NORMAL
- en: You may need to click on the Advanced button to see these options.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/590e44b0-85bf-4458-b085-843093366d5a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We specify the path to the ZAP home directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7ca7ac48-5b26-44b3-829a-db3204f326b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then we configure where we plan to load the ZAP session from:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af32082a-c625-49a8-b04f-6df0f587185d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The context name, scope, and exclusions are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e38dc8c-b8a3-4846-95cd-5d4052862e9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the starting point of the URL to test. The kind of test we are planning
    to do is Spider Scan, default Active Scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4480cb66-d930-4888-827e-5930f8108cb9.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, we specify the filename for the report that will be generated. We are
    adding the `BUILD_ID` variable to ensure that we don't have to worry about overwriting
    the reports.
  prefs: []
  type: TYPE_NORMAL
- en: Triggering the build (ZAP scan)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the job is configured, we are ready to trigger the build. Of course, you
    can manually click Build now and get going.
  prefs: []
  type: TYPE_NORMAL
- en: But we will configure the build job to be triggered remotely, and at the same
    time pass the necessary target information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under General check This project is parameterized:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97119a78-d832-4e6e-8063-b7a9e494be69.png)'
  prefs: []
  type: TYPE_IMG
- en: Inside that, we add a `TARGET` parameter with a default value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under Build Triggers, we specify an authentication token to be passed as a
    parameter while remotely triggering a build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0fe9b5c7-ca95-4b00-a6e3-c38d88445237.png)'
  prefs: []
  type: TYPE_IMG
- en: Try to ensure that this token is sufficiently lengthy and random, and not the
    simple word we have used as an example.
  prefs: []
  type: TYPE_NORMAL
- en: A great way to generate sufficiently random strings in Linux/macOS is to use
    the OpenSSL command. For the `hex` output (`20` is the length of the output),
    use `**openssl rand -hex 20**`. For the `base64` output (`24` is the length of
    the output), use `**openssl rand -base64 24**`.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, all we have to do is note the API Token of the logged in user
    (from `http://JENKINS-URL/user/admin/configure`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f484ebee-c98d-4148-baba-a06dbcb14ad7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking Show API Token will show the token:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d828b98f-18ee-4aac-8e5a-7c704816525d.png)'
  prefs: []
  type: TYPE_IMG
- en: We can now use a command-line tool, such as `curl`, to see if this works.
  prefs: []
  type: TYPE_NORMAL
- en: The format of the link is `curl "http://username:API-TOKEN@JENKINS-URL/job/ZAP-Jenkins/buildWithParameters?TARGET=http://demo.testfire.net&token=ansible2security"`.
  prefs: []
  type: TYPE_NORMAL
- en: This will trigger the build and the application will get scanned for security
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: Playbook to do this with automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To perform the preceding trigger, we can use the following Ansible playbook.
    This can be used in our Ansible Tower to schedule the scan as well.
  prefs: []
  type: TYPE_NORMAL
- en: The following playbook can store the the API Token key using Ansible Vault,
    feature to store secret data in an encrypted format in playbooks. We will learn
    more about Ansible Vault usage in [Chapter 11](695004a2-b349-4e80-aead-17615c65f356.xhtml),
    *Ansible Security Best Practices, References and Further Reading*.
  prefs: []
  type: TYPE_NORMAL
- en: To create an Ansible Vault encrypted variable, run the following command. When
    it prompts for a password, give a password to encrypt this variable and it requires
    while executing the playbook
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After executing, it returns the encrypted variable which we can use in the
    playbook it self directly as a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To perform the `ansible-vault` decryption while executing the playbook, the
    playbook execution command looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: ZAP Docker and Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a great blog series by the folks at Mozilla about configuring the ZAP
    Docker with Jenkins. Rather than repeating what they have to say, we thought it
    made sense to point you to the first post in that series.
  prefs: []
  type: TYPE_NORMAL
- en: For further reading, you can check out the interesting blog *Dockerized, OWASP-ZAP
    security scanning, in Jenkins, part one at *[https://blog.mozilla.org/webqa/2016/05/11/docker-owasp-zap-part-one/](https://blog.mozilla.org/webqa/2016/05/11/docker-owasp-zap-part-one/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OWASP ZAP is a great addition to any security team's arsenal of tools. It provides
    complete flexibility in terms of what we can do with it and how it can fit into
    our setup. By combining ZAP with Jenkins, we can quickly set up a decent production-worthy
    continuous scanning workflow and align our process around it. Ansible allows us
    to install and configure all of these great tools using playbooks. This is great
    as it is mostly a one-time effort and then we can start seeing the results and
    the reports for ZAP.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we are on our way to automating security tools, next we shall see the
    most popular vulnerability assessment tool, Nessus, and how we can build a similar
    workflow for vulnerability assessment for software and networks.
  prefs: []
  type: TYPE_NORMAL
