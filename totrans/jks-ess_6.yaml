- en: Chapter 6. Managing Code Quality and Notifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '|   | *"Limit your burden by making very small incremental changes"* |   |'
  prefs: []
  type: TYPE_TB
- en: '|   | --*Anonymous* |'
  prefs: []
  type: TYPE_TB
- en: We saw how various customers are using Jenkins on Cloud, based on their requirements.
    We also saw cloud-based offerings from Red Hat OpenShift and CloudBees, and case
    studies to understand how Jenkins is used effectively. Now, it is time to know
    about additional aspects of code quality inspection and notification on build
    failure.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will teach you how to integrate static code analysis behavior into
    Jenkins. Code quality is an extremely vital feature that impacts application's
    effectiveness and by integrating it with sonar, Checkstyle, FindBugs, and other
    tools, the user gets an insight into problematic portions of code.
  prefs: []
  type: TYPE_NORMAL
- en: Integration with Sonar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Static code analysis Plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E-mail Notifications on Build status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integration with Sonar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Quality of code is one of the important facets of DevOps culture. It provides
    quality checks that highlight the level of reliability, security, efficiency,
    portability, manageability, and so on. It helps to find bugs or possibility of
    bugs in the source code and sets culture to align with coding standards in the
    organization.
  prefs: []
  type: TYPE_NORMAL
- en: SonarQube is the open source platform for continuous inspection of code quality.
    It supports Java, C#, PHP, Python, C/C++, Flex, Groovy, JavaScript, PL/SQL, COBOL,
    Objective-C, Android development, and so on. It provides reports on coding standards,
    code coverage, complex code, unit tests, duplicated code, potential bugs, comments,
    design and architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [http://www.sonarqube.org/downloads/](http://www.sonarqube.org/downloads/),
    and download SonarQube 5.1.![Integration with Sonar](img/3471_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract files, and it will look similar to the following screenshot:![Integration
    with Sonar](img/3471_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `bin` folder to run SonarQube based on the operating system on which
    you want to run Sonar.![Integration with Sonar](img/3471_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a folder based on your platform, in our case, we are installing it on
    CentOS, and so we will select `linux-x86-64`.![Integration with Sonar](img/3471_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the terminal and go to the SonarQube home directory; go to `bin/linux-x86-64/`
    and run `sonar.sh`. We need to use parameters with `sonar.sh`, as shown in the
    following usage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Integration with Sonar](img/3471_06_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Visit `http://localhost:9000/` or `http://<IP address>:9000/`.![Integration
    with Sonar](img/3471_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explore **Rules** in the SonaQube dashboard.![Integration with Sonar](img/3471_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify **Settings** in the SonaQube dashboard.![Integration with Sonar](img/3471_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create `sonar-project.properties`, and save it in a repository where the project
    is stored:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Install the SonarQube plugin in Jenkins. To know more on this, visit [https://wiki.jenkins-ci.org/display/JENKINS/SonarQube+plugin](https://wiki.jenkins-ci.org/display/JENKINS/SonarQube+plugin).![Integration
    with Sonar](img/3471_06_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Manage Jenkins** and go to **Configure System**. Go to the **SonarQube**
    section, and configure SonarQube in Jenkins.![Integration with Sonar](img/3471_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add Build step to **Invoke Standalone SonarQube Analysis** in a build Job.![Integration
    with Sonar](img/3471_06_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the build job, and if you get a certificate error, execute the `svn export`
    command to solve the certificate issue.![Integration with Sonar](img/3471_06_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the `svn export` command to solve certificate issue on a virtual machine
    where SonarQube and Jenkins are installed, as shown in the following screenshot:![Integration
    with Sonar](img/3471_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the build job.![Integration with Sonar](img/3471_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the Sonar execution steps in the console.![Integration with Sonar](img/3471_06_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refresh the dashboard of SonarQube, and we will be able to see details on the
    recently executed build in SonarQube, as shown in the following screenshot:![Integration
    with Sonar](img/3471_06_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To get more details on code verification, click on the project, and we will
    be able to get details on **Lines of Code**, **Duplications**, **Complexity**,
    and so on.![Integration with Sonar](img/3471_06_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explore more things on SonarQube and Jenkins integration, as in the following
    steps.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Static Code Analysis Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Static Code Analysis Plugins provide utilities for the static code analysis
    plugins. Jenkins interprets the result files of several static code analysis tools
    with the use of different plugins for configuration and parsing. We can have more
    flexibility with these plugins to build exactly what you want.
  prefs: []
  type: TYPE_NORMAL
- en: To install any of these plugins, go to the Jenkins dashboard, click on **Manage
    Jenkins**, and select the **Manage Plugins** link. Go to the **Available** tab,
    find the respective plugin, and select it. Click on **Download now**, and install
    after restart.
  prefs: []
  type: TYPE_NORMAL
- en: 'All these results are visualized by the same backend. The following plugins
    use the same visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: Checkstyle Plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Checkstyle plugin generates the report for an open source static code analysis
    program, Checkstyle.
  prefs: []
  type: TYPE_NORMAL
- en: To know more about the Checkstyle plugin, visit [https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin).
  prefs: []
  type: TYPE_NORMAL
- en: FindBugs Plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The FindBugs plugin is supported by the Static Analysis Collector plugin that
    shows the results in aggregated trend graphs, health reporting, and builds stability.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about this, visit [https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin).
  prefs: []
  type: TYPE_NORMAL
- en: Compiler Warnings Plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Compiler Warnings plugin generates the trend report for compiler warnings
    in the console log, or in log files.
  prefs: []
  type: TYPE_NORMAL
- en: To know more, visit [https://wiki.jenkins-ci.org/display/JENKINS/Warnings+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Warnings+Plugin).
  prefs: []
  type: TYPE_NORMAL
- en: To publish the combined results of Checkstyle, FindBugs, and compiler warnings
    plugins, go to the **Build** section of any job, and click on **Add post-build
    action** and select **Publish combined analysis results**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Compiler Warnings Plugin](img/3471_06_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also see these results with the use of the Dashboard View plugin.
  prefs: []
  type: TYPE_NORMAL
- en: In the configuration of a Dashboard view, click on **Edit** **View** and select
    checkboxes in the **Number of warnings** section. Add **Dashboard Portlets** in
    different sections for Checkstyle, Compiler, and Findbug.
  prefs: []
  type: TYPE_NORMAL
- en: '![Compiler Warnings Plugin](img/3471_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Verify the view after all the changes and running build jobs.
  prefs: []
  type: TYPE_NORMAL
- en: '![Compiler Warnings Plugin](img/3471_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The following plugins are also useful.
  prefs: []
  type: TYPE_NORMAL
- en: DRY Plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The DRY plugin shows the duplicate code blocks in your project. It only shows
    the results of duplicate code checker tools.
  prefs: []
  type: TYPE_NORMAL
- en: To know more, visit [https://wiki.jenkins-ci.org/display/JENKINS/DRY+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/DRY+Plugin).
  prefs: []
  type: TYPE_NORMAL
- en: PMD Plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PMD plugin scans the `pmd.xml` files in the build workspace, and reports
    warnings.
  prefs: []
  type: TYPE_NORMAL
- en: To know more, visit [https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin).
  prefs: []
  type: TYPE_NORMAL
- en: Task Scanner Plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Task Scanner plugin scans the workspace files for open tasks and provides
    a trend report.
  prefs: []
  type: TYPE_NORMAL
- en: To know more, visit [https://wiki.jenkins-ci.org/display/JENKINS/Task+Scanner+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Task+Scanner+Plugin).
  prefs: []
  type: TYPE_NORMAL
- en: CCM Plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The CCM plugin provides details on cyclomatic complexity for .NET code.
  prefs: []
  type: TYPE_NORMAL
- en: To know more, visit [https://wiki.jenkins-ci.org/display/JENKINS/CCM+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/CCM+Plugin).
  prefs: []
  type: TYPE_NORMAL
- en: Android Lint Plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Android Lint plugin parses the output from the Android lint tool.
  prefs: []
  type: TYPE_NORMAL
- en: To know more, visit [https://wiki.jenkins-ci.org/display/JENKINS/Android+Lint+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Android+Lint+Plugin).
  prefs: []
  type: TYPE_NORMAL
- en: OWASP Dependency-Check Plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Dependency-Check Jenkins Plugin features the ability to perform a dependency
    analysis build.
  prefs: []
  type: TYPE_NORMAL
- en: To know more, visit [https://wiki.jenkins-ci.org/display/JENKINS/OWASP+Dependency-Check+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/OWASP+Dependency-Check+Plugin).
  prefs: []
  type: TYPE_NORMAL
- en: E-mail notifications on build status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To send an e-mail notification based on build status, we need to configure SMTP
    details. Click on **Manage Jenkins**, and go to **Configure System**. Go to the
    **E-mail Notification** section.
  prefs: []
  type: TYPE_NORMAL
- en: '![E-mail notifications on build status](img/3471_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Go to build Job configuration, and click on **Add post-build action**. Select
    **E-mail Notification**. Provide the recipients list and save.
  prefs: []
  type: TYPE_NORMAL
- en: '![E-mail notifications on build status](img/3471_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Run the build job, and a broken build will result in an e-mail notification
    in the mailbox.
  prefs: []
  type: TYPE_NORMAL
- en: Self-test questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q1\. Which languages are supported by SonarQube?
  prefs: []
  type: TYPE_NORMAL
- en: Java
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C#
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C/C++
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JavaScript
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Which among these is not a Static Code Analysis plugin?
  prefs: []
  type: TYPE_NORMAL
- en: DRY Plugin
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PMD Plugin
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Task Scanner Plugin
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: FindBugs Plugin
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here again, we are at the end of another chapter. We need to remember that every
    new beginning comes from some other beginning's end. To summarize, we learned
    how to manage code quality of applications configured, and how to use notification
    features to send information to developers based on the failed build. We also
    covered some static code analysis plugins in short, to get some idea about it.
    In the next chapter, we will learn how to manage and monitor Jenkins.
  prefs: []
  type: TYPE_NORMAL
