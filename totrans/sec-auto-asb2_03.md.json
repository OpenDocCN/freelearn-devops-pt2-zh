["```\nwp core install # with some options such as url, title of the website etc. etc.\n```", "```\nwp core install --url=example.com --title=Example --admin_user=supervisor --admin_password=strongpassword --admin_email=info@example.com\n```", "```\n- name: adding nginx signing key\n  apt_key:\n    url: http://nginx.org/keys/nginx_signing.key\n    state: present\n\n- name: adding sources.list deb url for nginx\n  lineinfile:\n    dest: /etc/apt/sources.list\n    line: \"deb http://nginx.org/packages/mainline/ubuntu/ trusty nginx\"\n\n- name: update the cache and install nginx server\n  apt:\n    name: nginx\n    update_cache: yes\n    state: present\n\n- name: updating customized templates for nginx configuration\n  template:\n    src: \"{{ item.src }}\"\n    dest: \"{{ item.dst }}\"\n\n  with_items:\n    - { src: \"templates/defautlt.conf.j2\", dst: \"/etc/nginx/conf.d/default.conf\" }    \n\n  notify\n    - start nginx\n    - startup nginx\n```", "```\n- name: create WordPress database\n    mysql_db:\n      name: \"{{ WordPress_database_name }}\"\n      state: present\n      login_user: root\n      login_password: \"{{ mysql_root_password }}\"\n\n- name: create WordPress database user\n    mysql_user:\n      name: \"{{ WordPress_database_username }}\"\n      password: \"{{ WordPress_database_password }}\"\n      priv: '\"{{ WordPress_database_name }}\".*:ALL'\n      state: present\n      login_user: root\n      login_password: \"{{ mysql_root_password }}\"\n```", "```\n- name: installing php\n  apt:\n    name: \"{{ item }}\"\n    state: present\n    update_cache: yes\n\n  with_items:\n    - php\n    - php-curl\n    - php-fpm\n    - php-mysql\n    - php-xmlrpc\n\n- name: configuring php.ini for php processor\n  replace:\n    path: /etc/php5/fpm/php.ini\n    regex: ';cgi.fix_pathinfo=1'\n    replace: 'cgi.fix_pathinfo=0'\n    backup: yes\n\n- name: enable and restart the php fpm service\n  service:\n    name: php7.0-fpm\n    enabled: yes\n    state: restarted\n\n- name: update the nginx configuration to support php-fpm\n  template:\n    src: \"{{ item.src }}\"\n    dest: \"{{ item.dst }}\"\n\n  with_items:\n    - { src: \"defautlt.conf.j2\", dst: \"/etc/nginx/conf.d/default.conf\" }\n\n- name: restart the nginx\n  service:\n    state: restarted\n    name: nginx\n```", "```\n- debug:\n  msg: ensure you have installed lamp (or) lemp stack\n\n- name: downloading WordPress cli aka wp-cli\n  get_url:\n    url: https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n    dest: /usr/local/bin/wp\n    mode: 0755\n\n- name: download latest WordPress locally\n  command: wp core download\n  become_user: \"{{ new_user_name }}\"\n  args:\n    chdir: /var/www/html/\n\n- name: WordPress site configuration\n  command: \"wp core config --dbname={{ WordPress_database_name }} --dbuser={{ WordPress_database_username }} --dbpass={{ WordPress_database_password }}\n\n- name: information for WordPress site\n  command: \"wp core install --url={{ WordPress_site_name }} --title={{ WordPress_site_title }} --admin_user={{ WordPress_admin_username }} --admin_password={{ WordPress_admin_password }} --admin_email={{ WordPress_admin_email }}\"\n```", "```\n    - name: create new user\n      user:\n        name: \"{{ new_user_name }}\"\n        password: \"{{ new_user_password }}\"\n        shell: /bin/bash\n        groups: sudo\n        append: yes\n```", "```\n    - name: add ssh key for new user\n      authorized_key:\n        user: \"{{ new_user_name }}\"\n        key: \"{{ lookup('file', '/home/user/.ssh/id_rsa.pub') }}\"\n        state: present\n```", "```\n    - name: ssh configuration tweaks\n      lineinfile:\n        dest: /etc/ssh/sshd_config\n        state: present\n        line: \"{{ item }}\"\n        backups: yes\n\n      with_items:\n        - \"PermitRootLogin no\"\n        - \"PasswordAuthentication no\"\n\n      notify:\n        - restart ssh\n```", "```\n- name: delete anonymous mysql user for localhost\n  mysql_user:\n    user: \"\"\n    state: absent\n    login_password: \"{{ mysql_root_password }}\"\n    login_user: root\n\n- name: secure mysql root user\n  mysql_user:\n    user: \"root\"\n    password: \"{{ mysql_root_password }}\"\n    host: \"{{ item }}\"\n    login_password: \"{{ mysql_root_password }}\"\n    login_user: root\n\n  with_items:\n    - 127.0.0.1\n    - localhost\n    - ::1\n    - \"{{ ansible_fqdn }}\"\n\n- name: removes mysql test database\n  mysql_db:\n    db: test\n    state: absent\n    login_password: \"{{ mysql_root_password }}\"\n    login_user: root\n```", "```\n    - name: update the hardened nginx configuration changes\n      template:\n        src: \"hardened-nginx-config.j2\"\n        dest: \"/etc/nginx/sites-available/default\"\n\n      notify:\n        - restart nginx\n```", "```\n    - name: update the file permissions\n      file:\n        path: \"{{ WordPress_install_directory }}\"\n        recurse: yes\n        owner: \"{{ new_user_name }}\"\n        group: www-data\n\n    - name: updating file and directory permissions\n      shell: \"{{ item }}\"\n\n      with_items:\n        - \"find {{ WordPress_install_directory }} -type d -exec chmod\n         755 {} \\;\"\n        - \"find {{ WordPress_install_directory }} -type f -exec chmod \n        644 {} \\;\"\n```", "```\n    # Username enumeration block\n    if ($args ~ \"^/?author=([0-9]*)\"){\n        return 403;\n    }\n\n    # Attachment enumeration block\n    if ($query_string ~ \"attachment_id=([0-9]*)\"){\n        return 403;\n    }\n```", "```\n    - name: update the WordPress configuration\n      lineinfile:\n        path: /var/www/html/wp-config.php\n        line: \"{{ item }}\"\n\n      with_items:\n        - define('FS_METHOD', 'direct');\n        - define('DISALLOW_FILE_EDIT', true);\n```", "```\n- name: installing ufw package\n  apt:\n    name: \"ufw\"\n    update_cache: yes\n    state: present\n\n- name: enable ufw logging\n  ufw:\n    logging: on\n\n- name: default ufw setting\n  ufw:\n    direction: \"{{ item.direction }}\"\n    policy: \"{{ item.policy }}\"\n\n  with_items:\n    - { direction: 'incoming', policy: 'deny' }\n    - { direction: 'outgoing', policy: 'allow' }\n\n- name: allow required ports to access server\n  ufw:\n    rule: \"{{ item.policy }}\"\n    port: \"{{ item.port }}\"\n    proto: \"{{ item.protocol }}\"\n\n  with_items:\n    - { port: \"22\", protocol: \"tcp\", policy: \"allow\" }\n    - { port: \"80\", protocol: \"tcp\", policy: \"allow\" }\n    - { port: \"443\", protocol: \"tcp\", policy: \"allow\" }\n\n- name: enable ufw\n  ufw:\n    state: enabled\n\n- name: restart ufw and add to start up programs\n  service:\n    name: ufw\n    state: restarted\n    enabled: yes\n```", "```\n- name: installing duply\n  apt:\n    name: \"{{ item }}\"\n    update_cache: yes\n    state: present\n\n  with_items:\n    - python-boto\n    - duply\n\n- name: check if we already have backup directory\n  stat:\n    path: \"/root/.duply/{{ new_backup_name }}\"\n  register: duply_dir_stats\n\n- name: create backup directories\n  shell: duply {{ new_backup_name }} create\n  when: duply_dir_stats.stat.exists == False\n\n- name: update the duply configuration\n  template:\n    src: \"{{ item.src }}\"\n    dest: \"{{ item.dest }}\"\n\n  with_items:\n    - { src: conf.j2, dest: /root/.duply/{{ new_backup_name }}/conf }\n    - { src: exclude.j2, dest: /root/.duply/{{ new_backup_name }}/exclude }\n\n- name: create cron job for automated backups\n  template:\n    src: duply-backup.j2\n    dest: /etc/cron.hourly/duply-backup\n```", "```\n- name: running backup using duply\n  command: /etc/cron.hourly/duply-backup\n\n- name: updating WordPress core\n  command: wp core update\n  register: wp_core_update_output\n  ignore_errors: yes\n\n- name: wp core update output\n  debug:\n    msg: \"{{ wp_core_update_output.stdout }}\"\n\n- name: updating WordPress themes\n  command: wp theme update --all\n  register: wp_theme_update_output\n  ignore_errors: yes\n\n- name: wp themes update output\n  debug:\n    msg: \"{{ wp_theme_update_output.stdout }}\"\n\n- name: updating WordPress plugins\n  command: wp plugin update --all\n  register: wp_plugin_update_output\n  ignore_errors: yes\n\n- name: wp plugins update output\n  debug:\n    msg: \"{{ wp_plugin_update_output.stdout }}\"\n```", "```\n#!/bin/bash\n\n/etc/cron.hourly/duply-backup\nwp core update\nwp theme update --all\nwp plugin update --all\n```", "```\n- name: installing apache2 server\n  apt:\n    name: \"apache2\"\n    update_cache: yes\n    state: present\n\n- name: updating customized templates for apache2 configuration\n  template:\n    src: \"{{ item.src }}\"\n    dest: \"{{ item.dst }}\"\n    mode: 0644\n\n  with_tems:\n    - { src: apache2.conf.j2, dst: /etc/apache2/conf.d/apache2.conf }\n    - { src: 000-default.conf.j2, dst: /etc/apache2/sites-available/000-default.conf }\n    - { src: default-ssl.conf.j2, dst: /etc/apache2/sites-available/default-ssl.conf }\n\n- name: adding custom link for sites-enabled from sites-available\n  file:\n    src: \"{{ item.src }}\"\n    dest: \"{{ item.dest }}\"\n    state: link\n\n  with_items:\n    - { src: '/etc/apache2/sites-available/000-default.conf', dest: '/etc/apache2/sites-enabled/000-default.conf' }\n    - { src: '/etc/apache2/sites-available/default-ssl.conf', dest: '/etc/apache2/sites-enabled/default-ssl.conf' }\n\n  notify:\n    - start apache2\n    - startup apache2\n```", "```\n- name: adding certbot ppa\n  apt_repository:\n    repo: \"ppa:certbot/certbot\"\n\n- name: install certbot\n  apt:\n    name: \"{{ item }}\"\n    update_cache: yes\n    state: present\n\n  with_items:\n    - python-certbot-nginx\n\n- name: check if we have generated a cert already\n  stat:\n    path: \"/etc/letsencrypt/live/{{ website_domain_name }}/fullchain.pem\"\n  register: cert_stats\n\n- name: run certbot to generate the certificates\n  shell: \"certbot certonly --standalone -d {{ website_domain_name }} --email {{ service_admin_email }} --non-interactive --agree-tos\"\n  when: cert_stats.stat.exists == False\n\n- name: configuring site files\n  template:\n    src: website.conf\n    dest: \"/etc/nginx/sites-available/{{ website_domain_name }}\"\n\n- name: restart nginx\n  service:\n    name: nginx\n    state: restarted\n\n```", "```\npip install \"pywinrm>=0.2.2\"\n```", "```\npowershell.exe -File ConfigureRemotingForAnsible.ps1 -CertValidityDays 100\n```", "```\n[windows]\n192.168.56.120 ansible_user=Administrator ansible_password=strongpassowrd ansible_connection=winrm ansible_winrm_server_cert_validation=ignore ansible_port=5986\n```", "```\nansible -i inventory windows -m win_ping\n```", "```\n- name: Install and start IIS web server in Windows server\n  hosts: winblows\n\n  tasks:\n    - name: Install IIS\n      win_feature:\n        name: \"Web-Server\"\n        state: present\n        restart: yes\n        include_sub_features: yes\n        include_management_tools: yes\n\n```", "```\n Set-ExecutionPolicy RemoteSigned CurrentUser\n```", "```\n- name: Windows Wordpress Setup Playbook\n  hosts: winblows\n\n  tasks:\n    - name: download wordpress setup script\n      win_get_url:\n        url: https://gist.githubusercontent.com/chrisloweau/8a15516d551a87b096620134c3624b73/raw/b7a94e025b3cbf11c3f183d20e87c07de86124a3/wordpress-install.ps1\n        dest: ~\\Downloads\\wordpress-install.ps1\n\n    # This requires `Set-ExecutionPolicy RemoteSigned CurrentUser` to All\n    - name: running windows wordpress script\n      win_shell: ~\\Downloads\\wordpress-install.ps1\n      args:\n        chdir: ~\\Downloads\\wordpress-install.ps1\n      register: output\n\n    - debug:\n        msg: \"{{ output.stdout }}\"\n```", "```\nInstallation Complete!\n\nMySQL Accounts\n       root = 2*Bb!o4#4T2yy/*44ngb\n  wordpress = B*OGGrg{{ghr$35nGt4rU\n\nConnect your web browser to http://192.168.56.100/ to complete this WordPress\ninstallation.\n```"]