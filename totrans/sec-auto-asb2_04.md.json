["```\n- name: install python 2\n  raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)\n\n- name: accepting oracle java license agreement\n  debconf:\n    name: 'oracle-java8-installer'\n    question: 'shared/accepted-oracle-license-v1-1'\n    value: 'true'\n    vtype: 'select'\n\n- name: adding ppa repo for oracle java by webupd8team\n  apt_repository:\n    repo: 'ppa:webupd8team/java'\n    state: present\n    update_cache: yes\n\n- name: installing java nginx apache2-utils and git\n  apt:\n    name: \"{{ item }}\"\n    state: present\n    update_cache: yes\n\n  with_items:\n    - python-software-properties\n    - oracle-java8-installer\n    - nginx\n    - apache2-utils\n    - python-pip\n    - python-passlib\n```", "```\n- name: adding elastic gpg key for elasticsearch\n  apt_key:\n    url: \"https://artifacts.elastic.co/GPG-KEY-elasticsearch\"\n    state: present\n\n- name: adding the elastic repository\n  apt_repository:\n    repo: \"deb https://artifacts.elastic.co/packages/5.x/apt stable main\"\n    state: present\n\n- name: installing elasticsearch\n  apt:\n    name: \"{{ item }}\"\n    state: present\n    update_cache: yes\n\n  with_items:\n    - elasticsearch\n\n- name: adding elasticsearch to the startup programs\n  service:\n    name: elasticsearch\n    enabled: yes\n\n  notify:\n    - start elasticsearch\n```", "```\n- name: creating elasticsearch backup repo directory at {{ elasticsearch_backups_repo_path }}\n  file:\n    path: \"{{ elasticsearch_backups_repo_path }}\"\n    state: directory\n    mode: 0755\n    owner: elasticsearch\n    group: elasticsearch\n\n- name: configuring elasticsearch.yml file\n  template:\n    src: \"{{ item.src }}\"\n    dest: /etc/elasticsearch/\"{{ item.dst }}\"\n\n  with_items:\n    - { src: 'elasticsearch.yml.j2', dst: 'elasticsearch.yml' }\n    - { src: 'jvm.options.j2', dst: 'jvm.options' }\n\n  notify:\n    - restart elasticsearch\n```", "```\n- name: start elasticsearch\n  service:\n    name: elasticsearch\n    state: started\n\n- name: restart elasticsearch\n  service:\n    name: elasticsearch\n    state: restarted\n```", "```\n- name: adding elastic gpg key for logstash\n  apt_key:\n    url: \"https://artifacts.elastic.co/GPG-KEY-elasticsearch\"\n    state: present\n\n- name: adding the elastic repository\n  apt_repository:\n    repo: \"deb https://artifacts.elastic.co/packages/5.x/apt stable main\"\n    state: present\n\n- name: installing logstash\n  apt:\n    name: \"{{ item }}\"\n    state: present\n    update_cache: yes\n\n  with_items:\n    - logstash\n\n- name: adding logstash to the startup programs\n  service:\n    name: logstash\n    enabled: yes\n\n  notify:\n    - start logstash\n```", "```\n- name: logstash configuration files\n  template:\n    src: \"{{ item.src }}\"\n    dest: /etc/logstash/conf.d/\"{{ item.dst }}\"\n\n  with_items:\n    - { src: '02-beats-input.conf.j2', dst: '02-beats-input.conf' }\n    - { src: '10-sshlog-filter.conf.j2', dst: '10-sshlog-filter.conf' }\n    - { src: '11-weblog-filter.conf.j2', dst: '11-weblog-filter.conf' }\n    - { src: '30-elasticsearch-output.conf.j2', dst: '10-elasticsearch-output.conf' }\n\n  notify:\n    - restart logstash\n```", "```\n# 02-beats-input.conf.j2\ninput {\n    beats {\n        port => 5044\n        ssl => true\n        ssl_certificate => \"/etc/pki/tls/certs/logstash-forwarder.crt\"\n        ssl_key => \"/etc/pki/tls/private/logstash-forwarder.key\"\n    }\n}\n```", "```\n#10-sshlog-filter.conf.j2\nfilter {\n    if [type] == \"sshlog\" {\n        grok {\n            match => [ \"message\", \"%{SYSLOGTIMESTAMP:syslog_date} %{SYSLOGHOST:syslog_host} %{DATA:syslog_program}(?:\\[%{POSINT}\\])?: %{WORD:login} password for %{USERNAME:username} from %{IP:ip} %{GREEDYDATA}\",\n            \"message\", \"%{SYSLOGTIMESTAMP:syslog_date} %{SYSLOGHOST:syslog_host} %{DATA:syslog_program}(?:\\[%{POSINT}\\])?: message repeated 2 times: \\[ %{WORD:login} password for %{USERNAME:username} from %{IP:ip} %{GREEDYDATA}\",\n            \"message\", \"%{SYSLOGTIMESTAMP:syslog_date} %{SYSLOGHOST:syslog_host} %{DATA:syslog_program}(?:\\[%{POSINT}\\])?: %{WORD:login} password for invalid user %{USERNAME:username} from %{IP:ip} %{GREEDYDATA}\",\n            \"message\", \"%{SYSLOGTIMESTAMP:syslog_date} %{SYSLOGHOST:syslog_host} %{DATA:syslog_program}(?:\\[%{POSINT}\\])?: %{WORD:login} %{WORD:auth_method} for %{USERNAME:username} from %{IP:ip} %{GREEDYDATA}\" ]\n        }\n\n        date {\n            match => [ \"timestamp\", \"dd/MMM/YYYY:HH:mm:ss Z\" ]\n            locale => en\n        }\n\n        geoip {\n            source => \"ip\"\n        }\n    }\n}\n```", "```\n#11-weblog-filter.conf.j2\nfilter {\n    if [type] == \"weblog\" {\n        grok {\n        match => { \"message\" => '%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \\[%{HTTPDATE:timestamp}\\] \"%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response:int} (?:-|%{NUMBER:bytes:int}) %{QS:referrer} %{QS:agent}' }\n        }\n\n        date {\n        match => [ \"timestamp\", \"dd/MMM/YYYY:HH:mm:ss Z\" ]\n        locale => en\n        }\n\n        geoip {\n            source => \"clientip\"\n        }\n\n        useragent {\n            source => \"agent\"\n            target => \"useragent\"\n        }\n    }\n}\n```", "```\n#30-elasticsearch-output.conf.j2\noutput {\n    elasticsearch {\n        hosts => [\"localhost:9200\"]\n        manage_template => false\n        index => \"%{[@metadata][beat]}-%{+YYYY.MM.dd}\"\n        document_type => \"%{[@metadata][type]}\"\n    }\n}\n```", "```\n- name: adding elastic gpg key for kibana\n  apt_key:\n    url: \"https://artifacts.elastic.co/GPG-KEY-elasticsearch\"\n    state: present\n\n- name: adding the elastic repository\n  apt_repository:\n    repo: \"deb https://artifacts.elastic.co/packages/5.x/apt stable main\"\n    state: present\n\n- name: installing kibana\n  apt:\n    name: \"{{ item }}\"\n    state: present\n    update_cache: yes\n\n  with_items:\n    - kibana\n\n- name: adding kibana to the startup programs\n  service:\n    name: kibana\n    enabled: yes\n\n  notify:\n    - start kibana\n```", "```\nserver {\n    listen 80;\n    server_name localhost;\n    auth_basic \"Restricted Access\";\n    auth_basic_user_file /etc/nginx/htpasswd.users;\n    location / {\n        proxy_pass http://localhost:5601;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```", "```\n#command: htpasswd -c /etc/nginx/htpasswd.users\n- name: htpasswd generation\n  htpasswd:\n    path: \"/etc/nginx/htpasswd.users\"\n    name: \"{{ basic_auth_username }}\"\n    password: \"{{ basic_auth_password }}\"\n    owner: root\n    group: root\n    mode: 0644\n\n- name: nginx virtualhost configuration\n  template:\n    src: \"templates/nginxdefault.j2\"\n    dest: \"/etc/nginx/sites-available/default\"\n\n  notify:\n    - restart nginx\n```", "```\n- name: adding elastic gpg key for filebeat\n  apt_key:\n    url: \"https://artifacts.elastic.co/GPG-KEY-elasticsearch\"\n    state: present\n\n- name: adding the elastic repository\n  apt_repository:\n    repo: \"deb https://artifacts.elastic.co/packages/5.x/apt stable main\"\n    state: present\n\n- name: installing filebeat\n  apt:\n    name: \"{{ item }}\"\n    state: present\n    update_cache: yes\n\n  with_items:\n    - apt-transport-https\n    - filebeat\n\n- name: adding filebeat to the startup programs\n  service:\n    name: filebeat\n    enabled: yes\n\n  notify:\n    - start filebeat\n```", "```\nfilebeat:\n  prospectors:\n    -\n      paths:\n        - /var/log/auth.log\n        # - /var/log/syslog\n        # - /var/log/*.log\n      document_type: sshlog\n    -\n      paths:\n        - /var/log/nginx/access.log\n      document_type: weblog\n\n  registry_file: /var/lib/filebeat/registry\n\noutput:\n logstash:\n   hosts: [\"{{ logstash_server_ip }}:5044\"]\n   bulk_max_size: 1024\n   ssl:\n    certificate_authorities: [\"/etc/pki/tls/certs/logstash-forwarder.crt\"]\n\nlogging:\n files:\n   rotateeverybytes: 10485760 # = 10MB\n```", "```\n- name: installing pre requisuites for elastalert\n  apt:\n    name: \"{{ item }}\"\n    state: present\n    update_cache: yes\n\n  with_items:\n    - python-pip\n    - python-dev\n    - libffi-dev\n    - libssl-dev\n    - python-setuptools\n    - build-essential\n\n- name: installing elastalert\n  pip:\n    name: elastalert\n\n- name: creating elastalert directories\n  file: \n    path: \"{{ item }}\"\n    state: directory\n    mode: 0755\n\n  with_items:\n    - /opt/elastalert/rules\n    - /opt/elastalert/config\n\n- name: creating elastalert configuration\n  template:\n    src: \"{{ item.src }}\"\n    dest: \"{{ item.dst }}\"\n\n  with_items:\n    - { src: 'elastalert-config.j2', dst: '/opt/elastalert/config/config.yml' }\n    - { src: 'elastalert-service.j2', dst: '/lib/systemd/system/elastalert.service' }\n    - { src: 'elastalert-sshrule.j2', dst: '/opt/elastalert/rules/ssh-bruteforce.yml' }\n\n- name: enable elastalert service\n  service:\n    name: elastalert\n    state: started\n    enabled: yes\n\n```", "```\n[Unit]\nDescription=elastalert\nAfter=multi-user.target\n\n[Service]\nType=simple\nWorkingDirectory=/opt/elastalert\nExecStart=/usr/local/bin/elastalert --config /opt/elastalert/config/config.yml\n\n[Install]\nWantedBy=multi-user.target\n```", "```\n- name: adding certbot ppa\n  apt_repository:\n    repo: \"ppa:certbot/certbot\"\n\n- name: install certbot\n  apt:\n    name: \"{{ item }}\"\n    update_cache: yes\n    state: present\n\n  with_items:\n    - python-certbot-nginx\n\n- name: check if we have generated a cert already\n  stat:\n    path: \"/etc/letsencrypt/live/{{ website_domain_name }}/fullchain.pem\"\n    register: cert_stats\n\n- name: run certbot to generate the certificates\n  shell: \"certbot certonly --standalone -d {{ website_domain_name }} --email {{ service_admin_email }} --non-interactive --agree-tos\"\n  when: cert_stats.stat.exists == False\n\n- name: configuring site files\n  template:\n    src: website.conf\n    dest: \"/etc/nginx/sites-available/{{ website_domain_name }}\"\n\n- name: restart nginx\n  service:\n    name: nginx\n    state: restarted\n```", "```\nes_host: localhost\nes_port: 9200\nname: \"SSH Bruteforce attack alert\"\ntype: frequency\nindex: filebeat-*\nnum_events: 20\ntimeframe:\n  minutes: 1\n# For more info: http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html\n\nfilter:\n- query:\n    query_string:\n      query: '_type:sshlog AND login:failed AND (username: \"ubuntu\" OR username: \"root\")'\n\nalert:\n  - slack:\n      slack_webhook_url: \"https://hooks.slack.com/services/xxxxx\"\n      slack_username_override: \"attack-bot\"\n      slack_emoji_override: \"robot_face\"\n  - command: [\"/usr/bin/curl\", \"https://xxxxxxxxxxx.execute-api.us-east-1.amazonaws.com/dev/zzzzzzzzzzzzzz/ip/inframonitor/%(ip)s\"]\n\nrealert:\n  minutes: 0\n```", "```\nmodule.exports = {\n    region: \"us-east-1\",                                        // AWS Region to deploy in\n    accessToken: \"YOUR_R4NDOM_S3CR3T_ACCESS_TOKEN_GOES_HERE\",   // Accesstoken to make requests to blacklist\n    aclLimit: 20,                                               // Maximum number of acl rules\n    ruleStartId: 10,                                            // Starting id for acl entries\n    aclId: \"YOUR_ACL_ID\",                                       // AclId that you want to be managed\n    tableName: \"blacklist_ip\",                                  // DynamoDB table that will be created\n    ruleValidity: 5                                             // Validity of Blacklist rule in minutes \n}\n```", "```\n...\n\nfunctions:\n  blacklist:\n    handler: handler.blacklistip\n    events:\n     - http:\n         path: blacklistip\n         method: get\n\n  handleexpiry:\n    handler: handler.handleexpiry\n    events:\n     - schedule: rate(1 minute)\n\n...\n```", "```\n- name: installing node run time and npm\n  apt:\n    name: \"{{ item }}\"\n    state: present\n    update_cache: yes\n\n  with_items:\n    - nodejs\n    - npm\n\n- name: installing serverless package\n  npm:\n    name: \"{{ item }}\"\n    global: yes\n    state: present\n\n  with_items:\n    - serverless\n    - aws-sdk\n\n- name: copy the setup files\n  template:\n    src: \"{{ item.src }}\"\n    dest: \"{{ item.dst }}\"\n\n  with_items:\n    - { src: 'config.js.j2', dst: '/opt/serverless/config.js' }\n    - { src: 'handler.js.j2', dst: '/opt/serverless/handler.js' }\n    - { src: 'iamRoleStatements.json.j2', dst: '/opt/serverless/iamRoleStatements.json' }\n    - { src: 'initDb.js.j2', dst: '/opt/serverless/initDb.js' }\n    - { src: 'serverless.yml.j2', dst: '/opt/serverless/serverless.yml' }\n    - { src: 'aws-credentials.j2', dst: '~/.aws/credentials' }\n\n- name: create dynamo db table\n  command: node initDb.js\n  args:\n    chdir: /opt/serverless/\n\n- name: deploy the serverless\n  command: serverless deploy\n  args:\n    chdir: /opt/serverless/\n```"]