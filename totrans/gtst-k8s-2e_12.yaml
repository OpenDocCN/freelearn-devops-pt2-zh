- en: Towards Production Ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll look at considerations to move to production. We will
    also show some helpful tools and third-party projects available in the Kubernetes
    community at large and where you can go to get more help.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Production characteristics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Kubernetes ecosystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where to get help?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ready for production
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We walked through a number of typical operations using Kubernetes. As we saw,
    K8s offers a variety of features and abstractions that ease the burden of day-to-day
    management for container deployments.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many characteristics that define a production ready system for containers.
    The following diagram provides a high-level view of the major concerns for production
    ready clusters. This is by no means an exhaustive list, but it''s meant to provide
    some solid ground heading into production operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B06302_12_01.png)'
  prefs: []
  type: TYPE_IMG
- en: Production characteristics for container operations
  prefs: []
  type: TYPE_NORMAL
- en: We saw how the core concepts and abstractions of Kubernetes address a few of
    these concerns. The service abstraction has built-in service discovery and health
    checking at both the service and application level. We also get seamless application
    updates and scalability from the replication controller and deployment constructs.
    All the core abstractions of services, replication controllers, replica sets,
    and pods work with a core scheduling and affinity rulesets and give us easy service
    and application composition.
  prefs: []
  type: TYPE_NORMAL
- en: There is built-in support for a variety of persistent storage options, and the
    networking model provides manageable network operations with options to work with
    other third-party providers. Also, we took a brief look at CI/CD integration with
    some of the popular tools in the marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, we have built-in system events tracking, and with the major cloud
    providers, an out-of-the-box setup for monitoring and logging. We also saw how
    this can be extended to third-party providers such as **StackDriver** and **Sysdig**.
    These services also address overall node health and proactive trend deviation
    alerts.
  prefs: []
  type: TYPE_NORMAL
- en: The core constructs also help us address high availability in our application
    and service layers. The scheduler can be used with autoscaling mechanisms to provide
    this at a node level. Then there is support for making the Kubernetes master itself
    highly available. In [Chapter 9](94a98b1d-202e-43ba-a517-3be079d3a20c.xhtml),
    *Cluster Federation*, we took a brief look at the new federation capabilities
    that which promise a multi-cloud and multi-datacenter model for the future.
  prefs: []
  type: TYPE_NORMAL
- en: We finally explored a new breed of operating systems that give us a slim base
    to build on and secure update mechanisms for patching and updates. The slim base,
    together with scheduling, can help us with efficient resource utilization. In
    addition, we looked at some hardened concerns and explored the image trust and
    verification tools available. Security is a wide topic and capabilities matrix
    exist for this topic alone.
  prefs: []
  type: TYPE_NORMAL
- en: Ready, set, go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While there are still some gaps, a variety of the remaining security and operation
    concerns are actively being addressed by third-party companies, as we will see
    in the following section. Going forward, the Kubernetes project will continue
    to evolve, and the community of projects and partners around K8s and Docker will
    also grow. The community is closing the remaining gaps at a phenomenal pace.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party companies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since the Kubernetes project's initial release, there has been a growing ecosystem
    of partners. We looked at CoreOS, Sysdig, and many others in the previous chapters,
    but there are a variety of projects and companies in this space. We will highlight
    a few that may be useful as you move towards production. This is by no means an
    exhaustive list and it is merely meant to provide some interesting starting points.
  prefs: []
  type: TYPE_NORMAL
- en: Private registries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many situations, organizations will not want to place their applications
    and/or intellectual property in public repositories. For those cases, a private
    registry solution is helpful in securely integrating deployments end to end.
  prefs: []
  type: TYPE_NORMAL
- en: Google Cloud offers the **Google Container Registry** at [https://cloud.google.com/container-registry/](https://cloud.google.com/container-registry/).
  prefs: []
  type: TYPE_NORMAL
- en: Docker has its own **Trusted Registry** offering at [https://www.docker.com/docker-trusted-registry](https://www.docker.com/docker-trusted-registry).
  prefs: []
  type: TYPE_NORMAL
- en: '**Quay.io** also provides secure private registries, vulnerability scanning,
    and comes from the CoreOS team at [https://quay.io/](https://quay.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: Google Container Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google was the main author of the original Kubernetes project and is still a
    major contributor. Although this book has mostly focused on running Kubernetes
    on our own, Google is also offering a fully managed container service through
    the Google Cloud Platform.
  prefs: []
  type: TYPE_NORMAL
- en: Find more information on the **Google Container Engine** (**GKE**) website at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/container-engine/](https://cloud.google.com/container-engine/).'
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes will be installed on GCE and will be managed by Google engineers.
    They also provide private registries and integration with your existing private
    networks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Create your first GKE cluster** From the GCP console, in Compute, click on
    Container Engine, and then on Container Clusters.'
  prefs: []
  type: TYPE_NORMAL
- en: If this is your first time creating a cluster, you'll have an information box
    in the middle of the page. Click on the Create a container cluster button.
  prefs: []
  type: TYPE_NORMAL
- en: Choose a name for your cluster and the zone. You'll also be able to choose the
    machine type (instance size) for your nodes and how many nodes (cluster size)
    you want in your cluster. You'll also see a choice for node image, which lets
    you choose the base OS and machine image for the nodes themselves. The master
    is managed and updated by the Google team themselves. Leave Stackdriver Logging and
    Stackdriver Monitoring checked. Click on Create, and in a few minutes, you'll
    have a new cluster ready for use.
  prefs: []
  type: TYPE_NORMAL
- en: You'll need `kubectl` that is included with the Google SDK to begin using your
    GKE cluster. Refer to [Chapter 1](772262b1-5b78-4a9b-bbb4-09c6fd858fdf.xhtml),
    *Introduction to Kubernetes*, for details on installing the SDK. Once we have
    the SDK, we can configure `kubectl` and the SDK for our cluster using the steps
    outlined at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://cloud.google.com/container-engine/docs/before-you-begin#install_kubectl](https://cloud.google.com/container-engine/docs/before-you-begin#install_kubectl).'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Container Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another cloud-managed offering is Microsoft's **Azure Container Service** (**ACS**).
    ACS is really nice because it allows you to choose from industry standard tools
    such as Docker Swarm, Kubernetes, and Mesos. It then creates a managed cluster
    for you, but uses one of these tool sets as the foundation. The advantage is that
    you can still use the tool's native API and management tools, but leave the management
    of the cloud infrastructure to Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Find out more about ACS at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://azure.microsoft.com/en-us/services/container-service/](https://azure.microsoft.com/en-us/services/container-service/).'
  prefs: []
  type: TYPE_NORMAL
- en: ClusterHQ
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ClusterHQ provides a solution for bringing stateful data into your containerized
    applications. They provide Flocker, a tool for managing persistent storage volumes
    with containers, and FlockerHub which provides a storage repository for your data
    volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the ClusterHQ website for more information at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://clusterhq.com/](https://clusterhq.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Portworx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Portworx is another player in the storage space. It provides solutions for bringing
    persistence storage to your containers. Additionally, it has features for snapshotting,
    encryption, and even multi-cloud replication.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the portworx website for more information at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://portworx.com/](https://portworx.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Shippable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Shippable is a continuous integration, continuous deployment, and release automation
    platform that has built-in support for a variety of modern container environments.
    The product touts supporting any language with a uniform support for packaging
    and test.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the Shippable website for more information at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://app.shippable.com/](https://app.shippable.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Twistlock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Twistlock.io **is a vulnerability and hardening tool tailor-made for containers.
    It provides the ability to enforce policies, hardens according to CIS standards,
    and scans images in any popular registry for vulnerabilities. It also provides
    scan integration with popular CI/CD tools and RBAC solutions for many orchestration
    tools such as Kubernetes.'
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the Twistlock website for more information at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.twistlock.io/](https://www.twistlock.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: AquaSec
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AquaSec is another security tool providing a variety of features. Image scanning
    with popular registries, policy enforcement, user access control, and container
    hardening are all covered. Additionally, AquaSec has some interesting functionality
    in network segmentation.
  prefs: []
  type: TYPE_NORMAL
- en: Please refer to the Aqua's website for more information at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.aquasec.com/](https://www.aquasec.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: Mesosphere (Kubernetes on Mesos)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Mesosphere** itself is building a commercially supported product (**DCOS**)
    around the open-source Apache Mesos project. **Apac**he Mesos is a cluster management
    system that offers scheduling and resource sharing a bit like Kubernetes itself,
    but at a much higher level. The open-source project is used by several well-known
    companies, such as **Twitter** and **AirBnB**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get more information on the Mesos OS project and the Mesosphere offerings at
    these sites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://mesos.apache.org/](http://mesos.apache.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://mesosphere.com/](https://mesosphere.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Mesos by its nature is modular and allows the use of different frameworks for
    a variety of platforms. A Kubernetes framework is now available, so we can take
    advantage of the cluster managing in Mesos while still maintaining the useful
    application-level abstractions in K8s. Refer to the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/kubernetes-incubator/kube-mesos-framework](https://github.com/kubernetes-incubator/kube-mesos-framework)'
  prefs: []
  type: TYPE_NORMAL
- en: Deis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Deis** project provides an open-source **Platform as a Service** (**PaaS**)
    solution based on and around Kubernetes. This allows companies to deploy their
    own PaaS on-premise or on the public cloud. Deis provides tools for application
    composition and deployment, package management (at the pod level), and service
    brokering.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can refer to the following website for more information on Deis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://deis.com/](https://deis.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: OpenShift
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another PaaS solution is **OpenShift** from Red Hat. The OpenShift platform
    uses the Red Hat Atomic platform as a secure and slim OS for running containers.
    In version 3, Kubernetes has been added as the orchestration layer for all container
    operations on your PaaS. This is a great combination to manage PaaS installations
    at a large scale.
  prefs: []
  type: TYPE_NORMAL
- en: More information on OpenShift can be found at [https://enterprise.openshift.com/.](https://enterprise.openshift.com/)
  prefs: []
  type: TYPE_NORMAL
- en: Where to learn more?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Kubernetes project is an open-source effort, so there is a broad community
    of contributors and enthusiasts. One great resource in order to find more assistance
    is the Kubernetes **Slack** channel: [http://slack.kubernetes.io/](http://slack.kubernetes.io/)'
  prefs: []
  type: TYPE_NORMAL
- en: There is also a Kubernetes group on Google groups. You can join it at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://groups.google.com/forum/#!forum/kubernetes-users](https://groups.google.com/forum/#!forum/kubernetes-users).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you enjoyed this book, you can find more of my articles, how-tos, and various
    musings on my blogs and Twitter page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://medium.com/@grizzbaier](https://medium.com/@grizzbaier)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://twitter.com/grizzbaier](https://twitter.com/grizzbaier)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we left a few breadcrumbs to guide you on your continued
    journey with Kubernetes. You should have a solid set of production characteristics
    to get you started. There is a wide community in both the Docker and Kubernetes
    world. There are also a few additional resources that we provided if you need
    a friendly face along the way.
  prefs: []
  type: TYPE_NORMAL
- en: By now, we have seen the full spectrum of container operations with Kubernetes.
    You should be more confident in how Kubernetes can streamline the management of
    your container deployments and how you can plan to move containers off the developer
    laptops onto production servers. Now get out there and start shipping your containers!
  prefs: []
  type: TYPE_NORMAL
