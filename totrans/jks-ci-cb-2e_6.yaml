- en: Chapter 6. Testing Remotely
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a WAR file from Jenkins to Tomcat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating multiple Jenkins nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom setup scripts for slave nodes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing with FitNesse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activating FitNesse HtmlUnit fixtures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Selenium IDE tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triggering failsafe integration tests with Selenium WebDriver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating JMeter test plans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting JMeter performance metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional testing using JMeter assertions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling Sakai web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing test plans with SoapUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting SoapUI test results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will have run performance and functional tests
    against a web application and web services. Two typical setup recipes are included:
    the first is the deployment of a WAR file through Jenkins to an application server,
    the second is the creation of multiple slave nodes, ready to move the hard work
    of testing away from the master node.'
  prefs: []
  type: TYPE_NORMAL
- en: Remote testing through Jenkins considerably increases the number of dependencies
    in your infrastructure and thus the maintenance effort. Remote testing is a problem
    that is domain specific, decreasing the size of the audience that can write tests.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter emphasizes the need to make test writing accessible to a large
    audience. Embracing the largest possible audience improves the chances that the
    tests defend the intent of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The technologies highlighted include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**FitNesse**: This is a wiki with which you can write different types of tests.
    Having a wiki-like language to express and change tests on-the-fly gives functional
    administrators, consultants, and the end user a place to express their needs.
    You will be shown how to run FitNesse tests through Jenkins. FitNesse is also
    a framework where you can extend Java interfaces to create new testing types.
    The testing types are called fixtures; there are a number of fixtures available,
    including ones for database testing, running tools from the command line, and
    functional testing of web applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JMeter**: This is a popular open source tool for stress testing. It can also
    be used to functionally test through the use of assertions. JMeter has a GUI that
    allows you to build test plans. The test plans are then stored in XML format.
    JMeter is executable through a Maven or Ant script. JMeter is very efficient and
    one instance is normally enough to hit your infrastructure hard. However, for
    super-high-load scenarios JMeter can trigger an array of JMeter instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selenium**: This is the de-facto industrial standard for the functional testing
    of web applications. With Selenium IDE, you can record your actions within Firefox
    or Chrome, saving them in HTML format to replay later. The tests can be re-run
    through Maven using Selenium RC (Remote Control). It is common to use Jenkins
    slaves with different OSes and browser types to run the tests. The alternative
    is to use Selenium grid ([https://code.google.com/p/selenium/wiki/Grid2](https://code.google.com/p/selenium/wiki/Grid2)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selenium and TestNG unit tests**: A programmer-specific approach to functional
    testing is to write unit tests using the TestNG framework. The unit tests apply
    the Selenium WebDriver framework. Selenium RC is a proxy that controls the web
    browser. In contrast, the WebDriver framework uses native API calls to control
    the web browser. You can even run the HtmlUnit framework removing the dependency
    of a real web browser. This enables OS independent testing, but removes the ability
    to test for browser-specific dependencies. WebDriver supports many different browser
    types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SoapUI**: This simplifies the creation of functional tests for web services.
    The tool can read **WSDL** (**Web Service Definition Language**) files publicized
    by web services, using the information to generate the skeleton for functional
    tests. The GUI makes it easy to understand the process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a WAR file from Jenkins to Tomcat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The three main approaches to deploying web applications for integration tests
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the web app locally in a container such as Jetty brought to life during
    a Jenkins job. The applications database is normally in-memory and the data stored
    is not persisted past the end of the job. This saves cleaning up and eliminates
    unnecessary dependency on the infrastructure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A nightly build is created where the application is rebuilt through a scheduler.
    No polling of the SCM is needed. The advantages of this approach are a distributed
    team that knows exactly when and at which URL a new build exists, and that the
    deployment script is thin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy to an application server. First, package the web application in Jenkins
    and then the deploy is ready for testing by a second Jenkins job. The disadvantage
    of this approach is that you are replacing an application on the fly and the host
    server might not always respond stably.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, you will be using the Deploy plugin to deploy a WAR file to
    a remote Tomcat 7 server. This plugin can deploy across a range of server types
    and version ranges including Tomcat, GlassFish, and JBoss.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the Deploy plugin for Jenkins Deploy plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Deploy+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Deploy+Plugin)).
    Download the latest version of Tomcat 7 and unpack ([http://tomcat.apache.org/download-70.cgi](http://tomcat.apache.org/download-70.cgi)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a Maven project for a simple WAR file from the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Commit the newly created project to your Git or subversion repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To avoid conflict with Jenkins listening on port `8080`, under the Tomcat root
    directory edit `conf/server.xml` change the default connector port number to `38887`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'From the command line, start Tomcat:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Log in to Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Maven project named `ch6.remote.deploy`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Source Code Management** section, check the **Subversion** radio
    box, adding your own subversion repository URL to the **Repository URL**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **build** section, for **Goals and options** add `clean package`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Post-build Actions** section, check **Deploy war/ear to a container**
    adding the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**WAR/EAR files**: `target/simplewar.war`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container**: Tomcat 7.x'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manager user name**: `jenkins_build`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manager password**: `mylongpassword`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tomcat URL**: `http://localhost:38887`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The build will fail with output similar to: **java.io.IOException: Server returned
    HTTP response code: 401 for URL: http://localhost:38887/manager/text/list**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit `conf/tomcat-users.xml` by adding the following before `</tomcat-users>`
    :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Restart Tomcat.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Jenkins, build the job again. The build will now succeed. Reviewing the
    Tomcat log `logs/catalina.out` will reveal output similar to: **Oct 06, 2014 9:37:11
    PM org.apache.catalina.startup.HostConfig deployWAR**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**INFO: Deploying web application archive /xxxxx/apache-tomcat-7.0.23/webapps/simplewar.war**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With a web browser visit `http://localhost:38887/simplewar/`, as shown in the
    following screenshot:![How to do it...](img/0082OS_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A potential gotcha: if you misspell the name of the WAR file in your post build
    configuration then it will fail silently and the build will still succeed.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At the time of writing, the Deploy plugin deploys to the following server types
    and versions:'
  prefs: []
  type: TYPE_NORMAL
- en: Tomcat 4.x/5.x/6.x/7.x
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JBoss 3.x/4.x
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GlassFish 2.x/3.x
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, Jenkins packages a simple WAR file and deploys to a Tomcat instance.
    By default, Tomcat listens on port `8080` as does Jenkins. By editing `conf/server.xml`,
    the port was moved to `38887` avoiding conflict.
  prefs: []
  type: TYPE_NORMAL
- en: The Jenkins plugin calls the Tomcat Manager. After failing to deploy with a
    `401` not authorized error ([http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html)),
    you created a Tomcat user with the required roles. In fact, the new user has more
    power than is needed for deployment. The user has the power to review JMX data
    for monitoring. This helps you with debugging later.
  prefs: []
  type: TYPE_NORMAL
- en: When deploying in production, use an SSL connection to avoid sending unencrypted
    passwords over the wire.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On startup, the Tomcat logs mention that the Apache Tomcat Native library is
    missing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**INFO: The APR based Apache Tomcat Native library which allows optimal performance
    in production environments was not found on the java.library.path: /usr/java/packages/lib/i386:/usr/lib/i386-linux-gnu/jni:/lib/i386-linux-gnu:/usr/lib/i386-linux-gnu:/usr/lib/jni:/lib:/usr/lib**.'
  prefs: []
  type: TYPE_NORMAL
- en: The library improves the performance when running on a Linux platform, and it
    is based on Apache Portable Runtime Projects effort ([http://apr.apache.org/](http://apr.apache.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code in `bin/tomcat-native.tar.gz`. The build instructions
    can be found at [http://tomcat.apache.org/native-doc/](http://tomcat.apache.org/native-doc/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Configuring Jetty for integration tests* recipe in [Chapter 3](ch03.html
    "Chapter 3. Building Software"), *Building Software*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating multiple Jenkins nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing is a heavyweight process. If you want to scale your services then you
    will need to plan to offset most of the work to other nodes.
  prefs: []
  type: TYPE_NORMAL
- en: One evolutionary path for Jenkins in an organization is to start off with one
    Jenkins master. As the number of jobs increases we need to push off the heavier
    jobs such as testing to slaves. This leaves the master the lighter and more specialized
    work of aggregating the results. There are other reasons as well to farm out testing,
    for example for functional testing when you want to use different web browsers
    under different OS or run .NET applications natively.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe uses the Multi slave config plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Multi+slave+config+plugin](https://wiki.jenkins-ci.org/display/JENKINS/Multi+slave+config+plugin))
    to install an extra Jenkins node locally. It is Linux-specific, allowing Jenkins
    to install, configure, and command the slave through SSH.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Jenkins, install the Multi slave config plugin. You will also need to have
    a test instance of Ubuntu as described in the *Using a test Jenkins instance*
    recipe, [Chapter 1](ch01.html "Chapter 1. Maintaining Jenkins"), *Maintaining
    Jenkins*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From the command line of the slave node create the user `jenkins-unix-nodex`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate a private key and a public certificate for the master Jenkins with
    an empty passphase:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the `.ssh` directory and the Jenkins public certificate to `.ssh/authorized_keys`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the ownership and group of `authorized_keys` to `jenkins-unix-nodex`:`jenkins-unix-nodex`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test that you can log in without a password as `jenkins` to `jenkins-unix-nodex`.`jenkins-unix-nodex`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need to accept the key fingerprint.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Log in to Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the credentials store (`localhost:8080/credential-store`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Global credentials** link, as shown in the following screenshot:![How
    to do it...](img/0082OS_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add Credentials**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Kind**: SSH username with private key'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scope**: **Global**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Username**: `jenkins-unix-nodex`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Private Key**: **From the Jenkins master ~ /.ssh**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Save**.![How to do it...](img/0082OS_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the **MultiSlave Config Plugin** under **Manage Jenkins** (`localhost:8080/multi-slave-config-plugin/?`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add Slaves**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add to **Create slaves by names separated with space**: **unix-node01** and
    then click on **Proceed**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Multi Slave Config Plugin – Add slaves** screen, add the following
    details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Description**: **I am a dumb Ubuntu node**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**# of executors**: **2**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remote FS root**: **/home/jenkins-unix-nodex**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Set labels**: **unix dumb functional**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select for launch method **Launch slave agents on Unix machines via SSH** and
    add the details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Host**: **localhost**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Credentials**: **jenkins-unix-nodex**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the main page. You will now see that the **Build Executor Status**
    includes the **Master** and **unix-node01**, as shown in the following screenshot:![How
    to do it...](img/0082OS_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, you have deployed one node locally to a *NIX box. A second
    user account is used. The account is provisioned with the public key of the Jenkins
    user for easier administration: Jenkins can now use `ssh` and `scp` without a
    password.'
  prefs: []
  type: TYPE_NORMAL
- en: The Multi slave config plugin takes the drudgery out of deploying slave nodes.
    It allows you to copy from one template slave and deploy a number of nodes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jenkins can run nodes in a number of different ways: using SSH, the master
    runs a custom script, or through Windows services ([https://wiki.jenkins-ci.org/display/JENKINS/Distributed+builds](https://wiki.jenkins-ci.org/display/JENKINS/Distributed+builds)).
    The most reliable approach is through the SSH protocol. The strength of this approach
    is multifold:'
  prefs: []
  type: TYPE_NORMAL
- en: The use of SSH is popular, implying a shallow learning curve for a large audience.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH is a reliable technology that has been battle-hardened over many generations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are SSH daemons for most operating systems, not just for *NIX. One alternative
    is to install **Cygwin** ([http://www.cygwin.com/](http://www.cygwin.com/)) with
    an SSH daemon on Windows.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to have your Unix scripts running in Windows under Cygwin, consider
    installing the Cygpath plugin. The plugin converts Unix-style paths to Windows-style.
    For more information, visit
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Cygpath+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Cygpath+Plugin).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The configured node has three labels assigned: `unix`, `dumb`, and `functional`.
    When creating a new job, checking the setting **Restrict where this project can
    be run** and adding one of the labels will ensure that the job is run on a node
    with that label.'
  prefs: []
  type: TYPE_NORMAL
- en: The master calculates which node to run a job based on a priority list. Unless
    otherwise configured, jobs created when there was only a master will still run
    on the master. Newer jobs will run by default on the slaves.
  prefs: []
  type: TYPE_NORMAL
- en: When deploying more than one Jenkins node, it saves effort if you are consistent
    with the structure of their environments. Consider using a virtual environment
    starting from the same basic set of images. **CloudBees** ([http://www.cloudbees.com](http://www.cloudbees.com))
    is one example of a commercial service centered on the deployment of virtual instances.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can find more information about installing a Windows service for a Jenkins
    slave at [https://wiki.jenkins-ci.org/display/JENKINS/Step+by+step+guide+to+set+up+master+and+slave+machines](https://wiki.jenkins-ci.org/display/JENKINS/Step+by+step+guide+to+set+up+master+and+slave+machines).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since Version 1.446 ([http://jenkins-ci.org/changelog](http://jenkins-ci.org/changelog)),
    Jenkins has an in-built SSH daemon. This will decrease the amount of effort writing
    client-side code. The command-line interface is accessible through the SSH protocol.
    You can set the port number of the daemon through the Jenkins management web page
    or leave the port number to float.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jenkins publishes the port number using header information for **X-SSH-Endpoint**.
    To see for yourself, use curl ([http://curl.haxx.se/](http://curl.haxx.se/)) to
    find out what headers are returned from Jenkins. For example, for *NIX systems
    from the command line try:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The header information is sent to `stdout` for you to view and the body is sent
    to `/dev/null` which is the system location that ignores all input.
  prefs: []
  type: TYPE_NORMAL
- en: 'The response from Jenkins will be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using a test Jenkins instance* recipe in [Chapter 1](ch01.html "Chapter 1. Maintaining
    Jenkins"), *Maintaining Jenkins*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Custom setup scripts for slave nodes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom setup scripts for slave nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows you how to run your own initialization scripts on slave nodes.
    This allows you to perform node system cleanups, check health, set up tests, and
    a multitude of other necessary tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe to work, you will need to have installed a slave node as described
    by the *Creating multiple Jenkins nodes* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: You will also have installed the Slave Setup plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Slave+Setup+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Slave+Setup+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a free-style job named `ch6.remote.slave.setup`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check **Restrict** where this project can run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the text `dumb` to **Label Expression**, as shown in the following screenshot:![How
    to do it...](img/0082OS_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save** and thenbuild the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Back to Dashboard**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Build Executor Status** click on the **unix-node01**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Script Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following text to the **Script Console** and then click on **Run**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the directory `/var/lib/jenkins/myfiles`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the file `/var/lib/jenkins/myfiles/banner.sh` with the following text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit the **Configure system** page (`http://localhost:8080/configure`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Slave Setup** section, click on the **Add** button for the **Slave
    Setups list**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**setup files directory**: `/var/lib/jenkins/myfiles`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**setup script after copy**: `./banner.sh`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Label Expression**: `dumb`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_06_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Check **deploy on save now**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job `ch6.remote.slave.setup`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the workspace. You will now see a `banner.txt` file with content similar
    to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You used the Slave Setup plugin to copy `banner.sh` from `/var/lib/jenkins`
    to the home directory of the slave, `banner.sh`. This action runs before each
    job run on the node.
  prefs: []
  type: TYPE_NORMAL
- en: Checking **deploy on save now** makes sure that the script on the slave is fresh.
  prefs: []
  type: TYPE_NORMAL
- en: You used the script console to discover the home location of the node. You also
    verified that the workspace contained a directory for the `ch6.remote.slave.setup`
    job with the same name as the job.
  prefs: []
  type: TYPE_NORMAL
- en: In the job, you restricted where it ran to the nodes with the **dumb** label.
    This way you are certain that the job runs on the node.
  prefs: []
  type: TYPE_NORMAL
- en: '`banner.sh` uses the `sh` shell by default that is really pointing to `bash`
    the **Bourne Again Shell** ([http://www.gnu.org/software/bash/](http://www.gnu.org/software/bash/)),
    or `dash` the **Debian Almquist Shell** ([http://gondor.apana.org.au/~herbert/dash/](http://gondor.apana.org.au/~herbert/dash/)).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the reasoning behind the use of dash in Ubuntu visit [https://wiki.ubuntu.com/DashAsBinSh](https://wiki.ubuntu.com/DashAsBinSh).
  prefs: []
  type: TYPE_NORMAL
- en: To show that it has run, the script outputs to `banner.txt,` a small banner
    with a time stamp. The last command in the script moves `banner.txt` to the jobs
    directory under the nodes workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Once the job has run, the slave copies the workspace back to the Jenkins master's
    workspace. Later you viewed the results.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If your Jenkins node supports other languages, such as Perl, you can run them
    by adding the `#!` convention as the first line of your script, pointing to the
    full path of the binary of the scripting language. To discover the path to the
    binary, you can use the nodes script console and run the `which` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This results in `/usr/bin/perl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A "Hello World" Perl script would then look like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating multiple Jenkins nodes* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing with FitNesse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FitNesse ([http://fitnesse.org](http://fitnesse.org)) is a fully integrated
    standalone wiki and acceptance-testing framework. You can write tests in tables
    and run them. Writing tests in a wiki language widens the audience of potential
    test writers and decreases the initial efforts required to learning a new framework.
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing with FitNesse](img/0082OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If a test passes, the table row is displayed in green. If it fails, it is displayed
    in red. The tests can be surrounded by wiki content delivering context information
    such as user stories at the same location as the tests. You can also consider
    creating mock-ups of your web applications in FitNesse next to the tests and pointing
    the tests at those mock-ups.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe describes how to run FitNesse remotely and display the results within
    Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the latest stable FitNesse JAR from [http://fitnesse.org/FitNesseDownload](http://fitnesse.org/FitNesseDownload).
    Install the FitNesse plugins for Jenkins from [https://wiki.jenkins-ci.org/display/JENKINS/FitNesse+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/FitNesse+Plugin).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The release number used to test this recipe was `20140901`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create the directories `fit/logs` and place them in the fit directory `fitnesse-standalone.jar`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the FitNesse help from the command line and review the options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run FitNesse from the command line and review the startup output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using a web browser, visit `http://localhost:39996`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Acceptance Test** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Suite** link. This will activate a set of tests. Depending on
    your computer, the tests may take a few minutes to complete. The direct link is
    `http://localhost:39996/FitNesse.SuiteAcceptanceTests?suite`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Test History** link. You will need to log on as user `tester`
    with password `test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the log in the `fit/logs` directory. After running the suite again,
    you will now see an entry similar to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Log in to Jenkins and create a free-style software project named `ch6.remote.fitnesse`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **build** section, select the **Execute fitnesse tests** option from
    **Add Build step**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the option **FitNesse instance is already running**, adding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Fitnesses Host**: `localhost`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fitnesses Port**: `39996`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target Page**: `FitNesse.SuiteAcceptanceTests?suite`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the **Is target a suite?** option
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP Timeout (ms)**: `180000`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Path to fitnesse xml results file**: `fitnesse-results.xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Post-build Actions** section, check the **Publish FitNesse results**
    report option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the value `fitnesse-results.xml` to the input **Path to fitnesse xml results
    file**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the latest job by clicking on the link **FitNesse Results**.![How to
    do it...](img/0082OS_06_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'FitNesse has a built-in set of acceptance tests that it uses to check itself
    for regressions. The Jenkins plugin calls the test and asks for the results to
    be returned in XML format using an HTTP `GET` request with the URL: `http://localhost:39996/FitNesse.SuiteAcceptanceTests?suite&format=xml`.
    The results look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The Jenkins plugin then parses the XML and generates a report.
  prefs: []
  type: TYPE_NORMAL
- en: By default, there is no security enabled on FitNesse pages. In this recipe,
    a username and password were defined during start-up. However, we did not take
    this further and define the security permissions on the page. To activate, you
    will need to go to the properties link on the left-hand side of a page and check
    the security permission for `secure-test`.
  prefs: []
  type: TYPE_NORMAL
- en: You can also authenticate through a list of users in a text file or Kerberos/ActiveDirectory.
    For more details review [http://fitnesse.org/FitNesse.FullReferenceGuide.UserGuide.AdministeringFitNesse.SecurityDescription](http://fitnesse.org/FitNesse.FullReferenceGuide.UserGuide.AdministeringFitNesse.SecurityDescription).
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a contributed plugin for LDAP authentication: [https://github.com/timander/fitnesse-ldap-authenticator](https://github.com/timander/fitnesse-ldap-authenticator)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Consider applying `security in depth`: adding IP restrictions through a firewall
    on the FitNesse server creates an extra layer of defense. For example, you can
    place an Apache server in front of the wiki, and enabling SSL/TLS ensures encrypted
    passwords. A thinner alternative to Apache is Nginx: [http://wiki.nginx.org](http://wiki.nginx.org).'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will find the source code with information on building the newest version
    of FitNesse at its GitHub home: [https://github.com/unclebob/fitnesse](https://github.com/unclebob/fitnesse)'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you like FitNesse, why not involve yourself in the community discussions?
    You can subscribe to its Yahoo group at `<[fitnesse-subscribe@yahoogroups.com](mailto:fitnesse-subscribe@yahoogroups.com)>`
    and then post messages at `<[fitnesse@yahoogroups.com.](mailto:fitnesse@yahoogroups.com.)>`
    Yahoo''s usage guidelines discusses the general etiquette: [http://info.yahoo.com/guidelines/us/yahoo/groups/](http://info.yahoo.com/guidelines/us/yahoo/groups/)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Activating FitNesse HtmlUnit fixtures* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activating FitNesse HtmlUnit fixtures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FitNesse is an extendable testing framework. It is possible to write your own
    testing types known as fixtures and call the new test types through FitNesse tables.
    This allows Jenkins to run alternative tests from the ones available.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to integrate functional tests using an HtmlUnit fixture.
    The same approach can be used for other fixtures as well.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe assumes that you have already performed the *Testing with FitNesse*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visit [http://sourceforge.net/projects/htmlfixtureim/](http://sourceforge.net/projects/htmlfixtureim/)
    and download and unpack `HtmlFixture-2.5.1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the `HtmlFixture-2.5.1/lib` directory to the `FitNesseRoot` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy `HtmlFixture-2.5.1/log4j.properties` to `FitNesseRoot/log4j.properties`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start FitNesse:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In a web browser, visit `http://localhost:39996/root?edit`, adding the following
    content, replacing `FitHome` with the fully qualified path to the home of your
    Fitnesse server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit `http://localhost:39996`. In the left-hand menu, click on **Edit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the bottom of the page, add the text `ThisIsMyPageTest`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the new **ThisIsMyPageTest** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Tools** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Properties**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Page Type** test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A pop-up appears asking for your **username** and **password**. Type `tester`
    and `test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be returned to the **ThisisMyPageTest** page; click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit** button on the left-hand side menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content after the line starting with `!contents`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Test**.![How to do it...](img/0082OS_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Jenkins under **New Job**, copy **existing job** / **copy** from `ch6.remote.fitness`
    to **Job name** `ch6.remote.fitness_fixture`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **build** section, under **Target** | **Target Page** replace `FitNesse.SuiteAcceptanceTests`
    with `ThisIsMyPageTest`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck **Is target a suite?**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job. It fails because the extra debugging information sent with the
    results confuses the Jenkins plugin parser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit the test page `http://localhost:39996/ThisIsMyPageTest?edit,` replacing
    the contents of the test table with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the Jenkins job again. The results will now be parsed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fixtures are written in Java. By placing the downloaded libraries in the FitNesse
    `lib` directory, you are making them accessible. You then defined the classpath
    and location of the fixture in the root page, allowing the fixture to be loaded
    at start-up. For more details, review the file `HtmlFixture-2.5.1/README`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you created the link using wiki CamelCase notation to the non-existent
    **ThisIsMyPageTest** page. An HtmlUnit fixture test was then added.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you needed to import the fixture whose library path was defined in the
    Root page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Next, some example descriptive wiki content was added to show that you can create
    a story without affecting the tests. Finally, the tests were added.
  prefs: []
  type: TYPE_NORMAL
- en: The first row of the table `!|HtmlFixture|` defines which fixture to use. The
    second row stores the location to test.
  prefs: []
  type: TYPE_NORMAL
- en: Print commands such as `Print Cookies` or `Print Response` `Headers` return
    information that is useful for building tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are not sure of a list of acceptable commands, then deliberately make
    a syntax error and the commands are returned as results. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `Has Text` command is an assertion and will fail if `log in` is not found
    in the text of the returned page.
  prefs: []
  type: TYPE_NORMAL
- en: By focusing on a specific element and then `Set Value`, you can add input to
    a form.
  prefs: []
  type: TYPE_NORMAL
- en: 'During testing, if you want to display the returned content for a particular
    request then you need three columns; for example, the first row displays the returned
    page and the second does not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Returning HTML pages as part of the results adds extra information to the results
    that the Jenkins plugin needs to parse. This is prone to failure. Therefore, in
    step 19 you removed the extra columns, ensuring reliable parsing.
  prefs: []
  type: TYPE_NORMAL
- en: Full documentation for this fixture can be found at [http://htmlfixtureim.sourceforge.net/documentation.shtml](http://htmlfixtureim.sourceforge.net/documentation.shtml).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'FitNesse has the potential to increase the vocabulary of remote tests that
    Jenkins can perform. A few interesting fixtures to review are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RestFixture for REST services**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/smartrics/RestFixture/wiki](https://github.com/smartrics/RestFixture/wiki)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Webtestfixtures using Selenium for web-based functional testing**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://sourceforge.net/projects/webtestfixtures/](http://sourceforge.net/projects/webtestfixtures/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**DBfit that allows you to test databases**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://gojko.net/fitnesse/dbfit/](http://gojko.net/fitnesse/dbfit/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Testing with FitNesse* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Selenium IDE tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium IDE allows you to record your clicks within web pages in Firefox and
    replay them. This is good for functional testing. The test plans are saved in
    HTML format.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe shows you how to replay the tests automatically using Maven and
    then Jenkins. It uses an in-memory X-server **Xvfb** ([http://en.wikipedia.org/wiki/Xvfb](http://en.wikipedia.org/wiki/Xvfb))
    so that Firefox can be run on an otherwise headless server. Maven runs the tests
    using Selenium RC, which then acts as a proxy between the tests and the browser.
    Although we record with Firefox, you can run the tests with other browser types
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: With the release of Selenium 2.0, the Selenium server now has built-in grid
    functionality ([https://code.google.com/p/selenium/wiki/Grid2](https://code.google.com/p/selenium/wiki/Grid2)).
    It is beyond the scope of this chapter to discuss this other than to note that
    Selenium grid allows you to run Selenium tests in parallel across a number of
    OS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the Selenium HTML report plugin ([https://wiki.jenkins-ci.org/display/JENKINS/seleniumhtmlreport+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/seleniumhtmlreport+Plugin))
    and EnvInject plugin ([https://wiki.jenkins-ci.org/display/JENKINS/EnvInject+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/EnvInject+Plugin)).
    Both Xvfb and Firefox are also required. To install Xvfb in an Ubuntu Linux environment
    run `sudo apt-get install xvfb`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the Jenkins plugin manager, the plugin is called the Environment Injector
    plugin, whereas in the wiki it is called the EnvInject plugin. It can be confusing,
    but both names belong to the same plugin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From the command line, create a simple Maven project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the newly created `pom.xml` file, add the following `build` section just
    before the `</project>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `src/test/resources/log4j.properties` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make the directory `src/test/resources/selenium`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the file `src/test/resources/selenium/TestSuite.xhtml` with the content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The HTML will render into the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_06_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Create the test file `src/test/resources/selenium/MyTest.xhtml` with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The HTML will render as per the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_06_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Run the Maven project from the command line, verifying that the build succeeds,
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run `mvn clean` and then commit the project to your subversion repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to Jenkins and create a Maven job named `ch6.remote.selenium_html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Global** section (at the top of the configuration page), check **Prepare
    an environment for the job** adding `DISPLAY=:20` for **Properties Content**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Source Code Management** section, check **Subversion** and add your
    subversion URL to **Repository URL**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **build** section, add `clean integration-test –Dlog4j.configuration=file./src/test/resources/log4j.properties`
    to **Goals and options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Post-build Actions** section, check **Publish Selenium HTML Report**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `target/results` to **Selenium test results location**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check **Set build result state to failure if an exception occurred while parsing
    results file**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job, reviewing the results, as shown in the following screenshot:![How
    to do it...](img/0082OS_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A primitive Selenium IDE test suite was created comprising two HTML pages. The
    first `TestSuite.xhtml` defines the suite as having HTML links to the tests. We
    have only one test defined in `MyTest.xhtml`.
  prefs: []
  type: TYPE_NORMAL
- en: The test hits the login page for your local Jenkins and verifies that the **log
    in** text is present.
  prefs: []
  type: TYPE_NORMAL
- en: The `pom.xml` file defines phases for bringing up and tearing down the Xvfb
    server. The default configuration is for Xvfb to accept input on `DISPLAY 20`.
  prefs: []
  type: TYPE_NORMAL
- en: Maven assumes that the Xvfb binary is installed and does not try to download
    it as a dependency. The same is true for the Firefox browser. This makes for a
    fragile OS-specific configuration. In a complex Jenkins environment, it is this
    type of dependency that is the most likely to fail. There has to be a significant
    advantage in automating functional testing to offset the increased maintenance
    effort.
  prefs: []
  type: TYPE_NORMAL
- en: The option `Multiwindow` is set to true as the tests run in their own Firefox
    window. The option `Background` is set to true so that Maven runs the tests in
    the background. The results are stored in the relative location `./target/results/selenium.html`
    ready for the Jenkins plugin to parse. For more information on the Selenium-Maven-plugin,
    visit [http://mojo.codehaus.org/selenium-maven-plugin/](http://mojo.codehaus.org/selenium-maven-plugin/).
  prefs: []
  type: TYPE_NORMAL
- en: The Jenkins job sets the `DISPLAY` variable to `20` so that Firefox renders
    within Xvfb. It then runs the Maven job and generates the results page. The results
    are then parsed by the Jenkins plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two ways to increase the reliability of your automatic functional tests are:'
  prefs: []
  type: TYPE_NORMAL
- en: Use HtmlUnit, which does not need OS-specific configuration. However, you will
    then lose the ability to perform cross-browser checks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run WebDriver instead of Selenium RC. WebDriver uses native API calls that function
    more reliably. Like Selenium RC, WebDriver can be run against a number of different
    browser types.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next recipe will showcase using unit testing with WebDriver and HtmlUnit.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On my development Jenkins Ubuntu server, the job running this recipe broke.
    The reason was that the dependencies in the Maven plugin for Selenium did not
    like the newer version of Firefox that was installed by an auto-update script.
    The resolution to the problem was to install a known working binary for Firefox
    under the Jenkins home directory and point directly at the binary in the `pom.xml`
    file, replacing `<browser>*firefox</browser>` with `<browser>*firefox Path</browser>`.
  prefs: []
  type: TYPE_NORMAL
- en: Here, the `Path` is similar to `/var/lib/Jenkins/firefox/firefox-bin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another cause of issues is the need to create a custom profile for Firefox
    that includes helper plugins to stop pop-ups or the rejection of self-signed certificates.
    For more complete information review: [http://docs.seleniumhq.org/docs/](http://docs.seleniumhq.org/docs/)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An alternative to Firefox is Chrome. There is a Jenkins plugin that helps provision
    chrome across Jenkins nodes ([https://wiki.jenkins-ci.org/display/JENKINS/ChromeDriver+plugin](https://wiki.jenkins-ci.org/display/JENKINS/ChromeDriver+plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: In the Maven `pom.xml` file, you will have to change the browser to `*chrome`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Triggering failsafe integration tests with Selenium WebDriver* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triggering failsafe integration tests with Selenium WebDriver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit tests are a natural way for programmers to defend their code against regressions.
    Unit tests are lightweight and easy to run. Writing unit tests should be as easy
    as writing print statements. JUnit ([http://www.junit.org/](http://www.junit.org/))
    is a popular unit test framework for Java, TestNG ([http://testng.org/doc/index.html](http://testng.org/doc/index.html))
    is another.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe uses WebDriver and HtmlUnit in combination with TestNG to write
    simple automated functional tests. Using HtmlUnit instead of a real browser makes
    for stable OS-agnostic tests that, although they do not test browser compatibility,
    can spot the majority of functional failures.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a project directory. Review the Maven Compiler plugin documentation ([http://maven.apache.org/plugins/maven-compiler-plugin/](http://maven.apache.org/plugins/maven-compiler-plugin/)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create `pom.xml` with the content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the directory named `src/test/java/nl/berg/packt/webdriver` by adding
    the `TestIT.java` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the top-level project directory, run `mvn clean verify`. The build should
    succeed with output similar to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Commit the code to your subversion repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to Jenkins and create a new maven project named `ch6.remote.driver`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Source Code Management** section, check **Subversion.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Modules** | **Repository URL**, add the location of your local subversion
    repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **build** section for **Goals and options**, add `clean verify`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job. After a successful build, you will see a link to **Latest Test
    Results** that details the functional tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven uses the Failsafe plugin ([http://maven.apache.org/surefire/maven-failsafe-plugin/](http://maven.apache.org/surefire/maven-failsafe-plugin/))
    to run integration tests. The plugin does not fail a build if its `integration-test`
    phase contains failures. Rather, it allows the `post-integration-test` phase to
    run, allowing teardown duties to occur.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `pom.xml` file has two dependencies mentioned: one for TestNG and the other
    for HtmlUnit driver. If you are going to use a real browser then you will need
    to define their Maven dependencies.'
  prefs: []
  type: TYPE_NORMAL
- en: For further details on how the Failsafe plugin works with the TestNG framework,
    see [http://maven.apache.org/plugins/maven-failsafe-plugin/examples/testng.html](http://maven.apache.org/plugins/maven-failsafe-plugin/examples/testng.html)
  prefs: []
  type: TYPE_NORMAL
- en: The Java class uses annotations to define in which part of the unit testing
    cycle the code will be called. `@BeforeSuite` calls the creation of the WebDriver
    instance at the start of the suite of tests. `@AfterSuite` closes down the driver
    after the tests have run. `@test` defines a method as a test.
  prefs: []
  type: TYPE_NORMAL
- en: The test visits the Google page and verifies the existence of the title. HtmlUnit
    notices some errors in the style sheet and JavaScript of the returned Google page
    and resources; however, the assertion succeeds.
  prefs: []
  type: TYPE_NORMAL
- en: The main weakness of the example tests is the failure to separate out the assertions
    from the navigation of web pages. Consider creating Java classes according to
    the web page ([https://code.google.com/p/selenium/wiki/PageObjects](https://code.google.com/p/selenium/wiki/PageObjects)).
    Page objects return other page objects. The test assertions are then run in separate
    classes comparing the members of the page objects returned with expected values.
    This design pattern supports a greater degree of reusability.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An excellent framework in Groovy that supports the page object architecture
    is **Geb** ([http://www.gebish.org/](http://www.gebish.org/)).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '80 percent of all sensory information processed by the brain is delivered through
    the eyes. A picture can save a thousand words of descriptive text. WebDriver has
    the ability to capture screenshots. For example, the following code for the Firefox
    driver saves a screenshot to `loginpage_firefox.png`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Unfortunately, the HtmlUnit driver does not create screenshots: [http://code.google.com/p/selenium/issues/detail?id=1361](http://code.google.com/p/selenium/issues/detail?id=1361).'
  prefs: []
  type: TYPE_NORMAL
- en: However, you can find an experimental update at [https://groups.google.com/forum/#!msg/selenium-developers/PTR_j4xLVRM/k2yVq01Fa7oJ](https://groups.google.com/forum/#!msg/selenium-developers/PTR_j4xLVRM/k2yVq01Fa7oJ).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Running Selenium IDE tests* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Activating FitNesse HtmlUnit fixtures* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating JMeter test plans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JMeter ([http://jmeter.apache.org](http://jmeter.apache.org)) is an open source
    tool for stress testing. It allows you to visually create a test plan and then
    hammer systems based on that plan.
  prefs: []
  type: TYPE_NORMAL
- en: JMeter can make many types of requests known as **samplers**. It can sample
    HTTP, LDAP, and databases, use scripts, and much more. It can report back visually
    with **listeners**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A beginner''s book on JMeter is: Apache JMeter by Emily H. Halili published
    by Packt Publishing, ISBN 1847192955 ([http://www.packtpub.com/beginning-apache-jmeter](http://www.packtpub.com/beginning-apache-jmeter)).'
  prefs: []
  type: TYPE_NORMAL
- en: Two more advanced books from the same publisher are [https://www.packtpub.com/application-development/performance-testing-jmeter-29](https://www.packtpub.com/application-development/performance-testing-jmeter-29)
    and [https://www.packtpub.com/application-development/jmeter-cookbook-raw](https://www.packtpub.com/application-development/jmeter-cookbook-raw).
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will write a test plan for hitting web pages whose URLs
    are defined in a text file. In the next recipe, *Reporting JMeter test plans*,
    you will configure Jenkins to run JMeter test plans.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download and unpack a modern version of JMeter. ([http://jmeter.apache.org/download_jmeter.cgi](http://jmeter.apache.org/download_jmeter.cgi)).
    JMeter is a Java application and so will run on any system that has Java correctly
    installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create the subdirectories `plans` and `example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a CSV file `./data/URLS.csv` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the JMeter GUI—for example, `./bin/jmeter.sh` or `jmeter.bat,` depending
    on the OS. The GUI will start up with a new test plan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Test Plan** then select **Add** | **Threads (Users)** | **Thread
    Group**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the **Number of Threads (users)** to **2**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on **Test Plan** then select **Add** | **Config Element** | **CSV
    Data Set Config**. Add the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Filename**: Full path to the CSV file'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Variable Names (comma-delimited**): `HOST`, `PORT`, `URL`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delimiter (use ''\t''for tab)**: `,`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Right-click on **Test Plan**, then select **Add** | **Config Element** | **HTTP
    cookie Manager**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Test Plan**, then select **Add** | **Listener** | **View Tree
    Results**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on **Thread Group**, then select **Add** | **Sampler** | **HTTP
    request**. Add the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: `${HOST}:${PORT}${URL}`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server Name or IP**: `${HOST}`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port Number**: `${PORT}`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Under **Optional Tasks**, check **Retrieve All Embedded Resources from HTML
    Files**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Test Plan** and then **File** | **Save**. Save the test plan to `example/jmeter_example.jmx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the test plan by pressing *Ctrl* + *R*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **View Results Tree** and explore the responses:![How to do it...](img/0082OS_06_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit this project to your subversion repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JMeter uses threads to run requests in parallel. Each thread is supposed to
    approximately simulate one user. In reality, a real user hits the system a lot
    less hard than a thread. Threads can hit the system many times a second, whereas
    typically a user clicks approximately once every twenty seconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'The test plan uses a number of elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Thread Group**:This defines the number of threads that run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cookie manager**: This keeps track of cookies per thread. This is important
    if you want to keep track through cookies between requests. For example, if a
    thread logs in to a Tomcat server the unique `Jsessionid` needs to be stored for
    each thread.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CSV Data Set Config**: This element parses the content of a CSV, file putting
    values in the `HOST`, `PORT`, and `URL` variables. A new line of the CSV file
    is read for each thread, once per iteration. The variables are expanded in the
    elements by using the `${variable_name}` notation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View Results Tree**: This listener displays the results in the GUI as a tree
    of requests and responses. This is great for debugging but should be removed later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A common mistake is to assume that a thread is equivalent to a user. The main
    difference is that threads can respond faster than an average user. If you do
    not add delay factors in the request then you can really hammer your applications
    with a few threads. For example, a delay of 25 seconds per click is typical for
    the online systems at the University of Amsterdam.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are looking to coax out multithreading issues in your applications then
    use a random delay element rather than a constant delay. This is also a better
    simulation of a typical user interaction.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Consider storing user agents and other browser headers in a text file and then
    picking the values up for HTTP requests through the CSV Data Set Config element.
    This is useful if resources returned to your web browser, such as JavaScript or
    images, depend on the user agent. JMeter can then loop through the user agents,
    asserting that the resources exist.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Reporting JMeter performance metrics* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Functional testing using JMeter assertions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting JMeter performance metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will be shown how to configure Jenkins to run a JMeter test
    plan, and then collect and report the results. The passing of variables from an
    Ant script to JMeter will also be explained.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is assumed that you have run through the last recipe creating the JMeter
    test plan. You will also need to install the Jenkins performance plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Performance+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Performance+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open `./examples/jmeter_example.jmx` in JMeter and save as `./plans/URL_ping.jmx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **CSV Data Set Config** changing **Filename** to `${__property(csv)}`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **File** menu select the **Save** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `build.xml` file at the top level of your project with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Commit the updates to your subversion project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new free-style job with the name `ch6.remote.jmeter`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Source Code Management**, check **Subversion**, adding your subversion
    repository URL to **Repository URL**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **build** section, add the build step **Invoke Ant**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Advanced** in the new **Invoke Ant** subsection, adding for properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the **Post-build Actions** section, check **Publish Performance test result
    report**. Add the input `jmeter_results/*.jtl` to **Report Files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job a couple of times and review the results found under the **Performance
    trend** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `build.xml` file is an Ant script that sets up the environment and then
    calls the JMeter Ant tasks defined in the library `/extras/ant-jmeter-1.0.9.jar`.
    The JAR file is installed as part of the standard JMeter distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Any JMeter test plan found under the `plans` directory will be run. Moving the
    test plan from the `examples` directory to the `plans` directory activates it.
    The results are aggregated in `jmeter_results/LoadTestResults.jtl`.
  prefs: []
  type: TYPE_NORMAL
- en: The Ant script passes the `csv` variable to the JMeter test plan; the location
    of the CSV file `${basedir}/data/URLS.csv`. `${basedir}`is automatically defined
    by Ant. As the name suggests it is the base directory of the Ant project.
  prefs: []
  type: TYPE_NORMAL
- en: You can call JMeter functions within its elements using the structure `${__functioncall(parameters)}`.
    You have added the function call `${__property(csv)}` to the test plan CSV Data
    Set Configelement. The function pulls in the value of `csv` that was defined in
    the Ant script.
  prefs: []
  type: TYPE_NORMAL
- en: The Jenkins job runs the Ant script, which in turn runs the JMeter test plans
    and aggregates the results. The Jenkins performance plugin then parses the results,
    creating a report.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To build complex test plans speedily, consider using the transparent proxy ([http://jmeter.apache.org/usermanual/component_reference.html#HTTP_Proxy_Server](http://jmeter.apache.org/usermanual/component_reference.html#HTTP_Proxy_Server))
    built into JMeter. You can run it on a given port on your local machine, setting
    the proxy preferences in your web browser to match. The recorded JMeter elements
    will then give you a good idea of the parameters sent in the captured requests.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative is **BadBoy** ([http://www.badboysoftware.biz/docs/jmeter.htm](http://www.badboysoftware.biz/docs/jmeter.htm)),
    which has its own built-in web browser. It allows you to record your actions in
    a similar way to Selenium IDE and then save to a JMeter plan.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating JMeter test plans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Functional testing using JMeter assertions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional testing using JMeter assertions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show you how to use JMeter assertions in combination with a
    Jenkins job. JMeter can test the responses to its HTTP requests and other samplers
    with assertions. This allows JMeter to fail Jenkins builds based on a range of
    JMeter tests. This approach is especially important when starting a mockup of
    a web from an HTML application whose underlying code is changing rapidly.
  prefs: []
  type: TYPE_NORMAL
- en: The test plan logs in and out of your local instance of Jenkins checking size,
    duration, and text found in the login response.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We assume that you have already performed the *Creating JMeter test plans* and
    *Reporting JMeter performance metrics* recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The recipe requires the creation of a user `tester1` in Jenkins. Feel free to
    change the username and password. Remember to delete the test user once it is
    no longer needed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a user in Jenkins named `tester1` with password `testtest`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run JMeter. In the **Test Plan** element change the **Name** to `LoginLogoutPlan,`
    adding for **User defined Variables**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: `USER` and **Value**: `tester1`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name**: `PASS` and **Value**: `testtest`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_06_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Right-click on **Test Plan** then select **Add** | **Config Element** | **HTTP
    cookie Manager**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Test Plan** and then select **Add** | **Listener** | **View
    Tree Results**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Test Plan** and then select **Add** | **Threads (Users)** |
    **Thread Group**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Thread Group** and then select **Add** | **Sampler** | **HTTP
    Request**, as shown in the following screenshot:![How to do it...](img/0082OS_06_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following details to the **HTTP Request Sampler**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: `/j_aceqi_security_check`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server Name or IP**: `localhost`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port Number**: `8080`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Path**: `/j_aceqi_security_check`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Under the section **Send Parameters With the Request** add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: `j_username` and **Value**: `${USER}`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name**: `j_password` and **Value**: `${PASS}`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Right-click on **Thread Group** and then select **Add** | **Sampler** | **HTTP
    Request**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the following details to the **HTTP Request Sampler**. If necessary drag-and-drop
    the newly created element so that it is placed after `/j_acegi_security_check`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following details to the **HTTP Request Sampler**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: `/logout`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server Name or IP**: `localhost`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port Number**: `8080`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Path**: `/logout`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the test plan to the location `./plans/LoginLogoutPlan_without_assertions.jmx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit the changes to your local subversion repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Jenkins run the previously created job `ch6.remote.jmeter`. Notice that at
    the **Performance Report** link the `/j_acegi_security_check` HTTP request sampler
    succeeds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy `./plans/LoginLogoutPlan_without_assertions.jmx` to `./plans/LoginLogoutPlan.jmx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In JMeter edit `./plans/LoginLogoutPlan.jmx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the JMeter element `j_acegi_security_check`, selecting **Add**
    | **Assertion** | **Duration Assertion**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the newly created assertion set **Duration in milliseconds** to `1000`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the JMeter element `j_acegi_security_check`, selecting **Add**
    | **Assertion** | **Size Assertion**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the newly created assertion set **Size in bytes:** to `40000` and checking
    **Type of Comparison** to **<**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on the JMeter element `j_acegi_security_check`, selecting **Add**
    | **Assertion** | **Response Assertion** with the details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Apply to** section check **Main Sample only**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Response Field to Test** section check **Text Response**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Pattern Matching Rules** section check **Contains**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For **Patterns to Test** add **<title>Dashboard [Jenkins]</title>**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_06_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Save the test plan and commit to your local subversion repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run JMeter (*Ctrl* + *R*) and review the **View Results Tree**. Notice that
    the size and response assertions fail.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Jenkins run the previously created job `ch6.remote.jmeter`. Notice that within
    the **Performance Report** link the `/j_acegi_security_check` also fails.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The scaffolding from the previous recipe has not changed. Any JMeter test plan
    found under the `plans` directory is called during the running of the Jenkins
    job.
  prefs: []
  type: TYPE_NORMAL
- en: You created a new test plan with two HTTP request samplers. The first sampler
    posts to the login URL `/j_acegi_security_check` with the variables `j_username`
    and `j_password`. The response contains a cookie with a valid session ID that
    is stored in the cookie manager. Three assertion elements were also added as children
    under the HTTP request login sampler. If any of the assertions fail then the HTTP
    request result fails. In Jenkins, you can configure the job to fail or to warn
    based on definable thresholds.
  prefs: []
  type: TYPE_NORMAL
- en: 'The three assertions are typical for a test plan. These are:'
  prefs: []
  type: TYPE_NORMAL
- en: An assertion on the size of the result returned. The size should not be greater
    than 40,000 bytes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An assertion for duration. If the response takes too long then you have a performance
    regression that you want to check further.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most powerful assertion is for checking for text patterns.—in this case,
    reviewing details about the returned title. The JMeter element can also parse
    text against regular patterns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JMeter has the power to hammer away with requests. 200 threads each firing,
    one request per second, is roughly equivalent to 5,000 users simultaneously logged
    in to an application clicking once every 25 seconds. A rough rule of thumb is
    that approximately 10 percent of the membership of a site is logged in to an application
    in the busiest hour of the year. Therefore, 200 threads hitting once a second
    is good for a total membership of 50,000 users.
  prefs: []
  type: TYPE_NORMAL
- en: The understanding of usage patterns is also important; the less you know about
    how your system is going to be used, the wider a safety margin you will have to
    build in. It is not uncommon to plan for 100 percent extra capacity. The extra
    capacity may well be the difference between you going on holiday or not.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To expand its load creation capabilities, JMeter has the ability to run a number
    of JMeter slave nodes. For an official tutorial on this subject review: [http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.pdf](http://jmeter.apache.org/usermanual/jmeter_distributed_testing_step_by_step.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating JMeter test plans* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reporting JMeter performance metrics* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling Sakai web services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sakai CLE is an application used by many hundreds of universities around the
    world. Based on more than a million lines of Java code, Sakai CLE allows students
    to interact with online course and project sites. It empowers instructors to make
    those sites easily.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will enable web services and write your own simple ping
    service. In the next recipe, you will write tests for these services.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find links to the newest downloads under [http://sakaiproject.org](http://sakaiproject.org).
  prefs: []
  type: TYPE_NORMAL
- en: Download and unpack Sakai CLE version 2.8.1 from [http://source.sakaiproject.org/release/2.8.1](http://source.sakaiproject.org/release/2.8.1).
  prefs: []
  type: TYPE_NORMAL
- en: The newest release can be found at [http://source.sakaiproject.org/release](http://source.sakaiproject.org/release).
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the server will take more time on its first startup than later
    startups. This is due to the initial creation of sample courses.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit `sakai/sakai.properties` to include:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run Sakai from the root folder `./start-sakai.sh` for *NIX systems or `./start-sakai.bat`
    for Windows. If Jenkins or another service is running on port `8080` Sakai will
    fail with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Stop Sakai `./stop-sakai.sh` or `./stop-sakai.bat`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `conf/server.xml` to move the port number to `39955`, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run Sakai from the root folder `./start-sakai.sh` for NIX systems or `./start-sakai.bat`
    for Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The first startup may take a long time as demonstration data is populated into
    a built in database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In a web browser visit `http://localhost:39955/portal`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in in as user `admin` with password `admin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit `http://localhost:39955/sakai-axis/SakaiScript.jws?wsdl`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a simple unauthenticated web service by adding the following content
    to `./webapps/sakai-axis/PingTest.jws`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To verify that the service is available, visit `http://localhost:39955/sakai-axis/PingTest.jws?wsdl`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To verify that REST services are available, visit `http://localhost:39955/direct`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Sakai package is self-contained with its own database and Tomcat server.
    Its main configuration file is `sakai/sakai.properties`. You updated it to allow
    the use of web services from anywhere. In real-world deployments, the IP address
    is more restricted.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid port conflict with your local Jenkins server, the Tomcat `conf/server.xml`
    file was modified.
  prefs: []
  type: TYPE_NORMAL
- en: Sakai has both REST and SOAP web services. You will find the REST services underneath
    the `/direct` URL. The many services are described at `/direct/describe`. Services
    are supplied one level down. For example, to create or delete users, you would
    need to use the user service described at `/direct/user/describe`.
  prefs: []
  type: TYPE_NORMAL
- en: The REST services use the Sakai Framework to register with Entitybroker ([https://confluence.sakaiproject.org/display/SAKDEV/Entity+Provider+and+Broker](https://confluence.sakaiproject.org/display/SAKDEV/Entity+Provider+and+Broker)).
    Entitybroker ensures consistent handling between services, saving coding effort.
    Entitybroker takes care of supplying the services information in the right format.
    To view who Sakai thinks you currently are in XML format visit `http://localhost:39955/direct/user/current.xml`
    and to view JSON format replace `current.xml` with `current.json`.
  prefs: []
  type: TYPE_NORMAL
- en: The SOAP services are based on the Apache AXIS framework ([http://axis.apache.org/axis/](http://axis.apache.org/axis/)).
    To create a new SOAP-based web service you dropped a text file in the `webapps/sakai-axis`
    directory with the extension `.jws`. Apache AXIS compiles the code on the fly
    the first time it is called. This allows for rapid application development, as
    any modifications to the text files are seen immediately by the caller.
  prefs: []
  type: TYPE_NORMAL
- en: The `PingTest` includes a class without a package. The class name is the same
    as the filename with the `.jws` extension removed. Any public methods become web
    services. If you visit `http://localhost:39955/sakai-axis/SakaiScript.jws?wsdl`
    you will notice that the `youCantSeeMe` method is not publicized; that is because
    it has a private scope.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the interesting web services require logging in to Sakai through `/sakai-axis/SakaiLogin.jws`
    using the method `login` passing the `username` and `password` as strings. The
    returned string is a **GUID** (a long random string of letters and numbers) that
    is needed to pass to other methods as evidence of authentication.
  prefs: []
  type: TYPE_NORMAL
- en: To log out at the end of the transaction, use the method `logout` passing to
    it the GUID.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sakai CLE is not only a learning management system, it is also a framework that
    makes developing new tools straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'The programmer''s cafe for new Sakai developers can be found at the following
    URL: [https://confluence.sakaiproject.org/display/BOOT/Programmer%27s+Cafe](https://confluence.sakaiproject.org/display/BOOT/Programmer%27s+Cafe)'
  prefs: []
  type: TYPE_NORMAL
- en: Boot camps based on the programmer's cafe occur periodically at Sakai conferences
    or through consultancy engagements. The boot camps walk developers through creating
    their first Sakai tools using Eclipse as the standard IDE of choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the book *Sakai CLE Courseware Management: The Official Guide*,
    *Packt Publishing*, at [http://www.packtpub.com/sakai-cle-courseware-management-for-elearning-research/book](http://www.packtpub.com/sakai-cle-courseware-management-for-elearning-research/book).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another related product is the Apereo **Open Academic Environment** (**OAE**)
    [http://www.oaeproject.org/](http://www.oaeproject.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Apereo OAE, like Sakai, is community-sourced. It has unique capabilities such
    as the ability to run in multiple organizations at the same time, looking different
    for each, and being able to search documents between organizations or not, depending
    on how you configure groups.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Writing test plans with SoapUI* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reporting SoapUI test results* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing test plans with SoapUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SoapUI ([http://www.soapui.org/](http://www.soapui.org/)) is a tool that allows
    the efficient writing of functional, performance and security tests, mostly for
    web services.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will be using SoapUI to create a basic functional test against
    the Sakai SOAP web service created in the last recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As described in the previous recipe, we assume that you have Sakai CLE running
    on port `39955` with the `PingTest` service available.
  prefs: []
  type: TYPE_NORMAL
- en: To download and install SoapUI, visit [http://www.soapui.org/getting-started/installing-soapui/installing-on-windows.html](http://www.soapui.org/getting-started/installing-soapui/installing-on-windows.html)
    and follow the installation instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Linux package to work with older versions of SoapUI, you may have to
    uncomment the following line in the SoapUI startup script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe was tested against version 5.0.0 of SoapUI.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start SoapUI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Projects** and select **New Soap Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the dialog box with the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Project Name**: `SakaiSoapTests`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Initial WSDL/WADL**: `http://localhost:39955/sakai-axis/PingTest.jws?wsdl`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_06_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Check **Create TestSuite**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** for the **Generate TestSuite** dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK** for **TestSuite to create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left-hand side navigator click on the **+** icon next to **PingTestSoapBinding
    TestSuite**.![How to do it...](img/0082OS_06_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** icon next to **ping TestCase**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** icon next to **Test Steps (1)**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **ping** and then select **Open Editor**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the top of the editor, click on the **Add Assertion** icon ![How to do it...](img/0082OS_06_21.jpg).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Assertion Contains** and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Content** select `NOT IN TEXT` and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left-hand side navigation, right-click on **PingTestSoapBinding TestSuite**
    and select **Show TestSuite Editor**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the editor click on the **Start tests** icon ![How to do it...](img/0082OS_06_22.jpg).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the results. The **ping TestCase** fails due to the assertion and the
    **pong TestCase** succeeds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the directory named `src/test/soapui`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **SakaiSoapTest** and then **Save Project as** `SakaiSoapTests-soapui-project.xml`
    in directory `src/test/soapui`.![How to do it...](img/0082OS_06_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SoapUI takes the drudgery out of making test suites for Soap services. SoapUI
    used the `PingTest` WSDL file to discover the details of the service.
  prefs: []
  type: TYPE_NORMAL
- en: WSDL stands for **Web Services Description Language** ([http://www.w3.org/TR/wsdl](http://www.w3.org/TR/wsdl)).
    An XML file with information on the location and use of the `PingTest` service
    is generated.
  prefs: []
  type: TYPE_NORMAL
- en: From the WSDL file, SoapUI created a basic test for the `Ping` and `Pong` services.
    You added an assertion under the `Ping` service, checking that the text `NOT IN
    TEXT` exists in the SOAP response. As the text does exist, the assertion failed.
  prefs: []
  type: TYPE_NORMAL
- en: SoapUI has a wide range of assertions that it can enforce, including checking
    for Xpath or Xquery matches, checking for status codes, or assertions tested by
    custom scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the project was saved in XML format ready for reuse in a Maven project
    in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SoapUI does a lot more than functional tests for web services. It performs security
    tests by checking boundary input. It also has a load runner for stress testing.
  prefs: []
  type: TYPE_NORMAL
- en: Another important feature is its ability to build mock services from WSDL files.
    This allows the building of tests locally while the web services are still being
    developed. Early creation of tests reduces the number of defects that reach production,
    lowering costs. You can find an excellent introduction to mock services at [http://www.soapui.org/Service-Mocking/mocking-soap-services.html](http://www.soapui.org/Service-Mocking/mocking-soap-services.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Enabling Sakai web services* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reporting SoapUI test results* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting SoapUI test results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will be creating a Maven project that runs the SoapUI test
    created in the previous recipe. A Jenkins project using the xUnit plugin ([https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin))
    will then parse the results and generate a detailed report.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the Jenkins xUnit plugin. Run both the *Enabling Sakai web services*
    and *Writing test plans with SoapUI* recipes. You will now have Sakai CLE running
    and a SoapUI test plan ready to use.
  prefs: []
  type: TYPE_NORMAL
- en: To experiment with the newest version of the Maven plugin visit [http://www.soapui.org/Test-Automation/maven-2x.html](http://www.soapui.org/Test-Automation/maven-2x.html)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a project directory. At the root of the project, add a `pom.xml` file
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Verify that you have correctly placed the SoapUI project at `src/test/soapui/SakaiSoapTests-soapui-project.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run from the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Log in to Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Maven project named `ch6.remote.soapui`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Source Code Management** section, check **Subversion,** adding your
    **Repository URL**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **build** section, under **Goals and options**, add `clean test`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Post-build Actions** section, check **Publish testing tools result
    report**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **JUnit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **JUNIT Pattern** add `**/target/surefire-reports/TEST-PingTestSoapBinding_TestSuite.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Latest Test Result** link. You will see one failed and one successful
    job, as shown in the following screenshot:![How to do it...](img/0082OS_06_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will find the full details of the failure at `http://localhost:8080/job/ch6.remote.soapui/ws/target/surefire-reports/PingTestSoapBinding_TestSuite-ping_TestCase-ping-0-FAILED.txt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Maven project uses the maven-soapui `plugin` ([http://www.soapui.org/Test-Automation/maven-2x.html](http://www.soapui.org/Test-Automation/maven-2x.html)).
    As the plugin is not available in one of the main Maven repositories, you had
    to configure it to use the `eviwarePluginRepository` repository.
  prefs: []
  type: TYPE_NORMAL
- en: The SoapUI plugin was configured to pick up its plan from the project file `src/test/soapui/SakaiSoapTests-soapui-project.xml`
    and save the results relative to the `project.build.directory`, which is the root
    of the workspace.
  prefs: []
  type: TYPE_NORMAL
- en: 'The options set were:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '`junitReport` set to `true` tells the plugin to create a JUnit report. `exportwAll`
    set to `true` implies that the results of all tests are exported, not just the
    errors. This option is useful during the debugging phase and should be set to
    `on` unless you have severe disc space constraints. `printReport` set to `true`
    ensures Maven sends a small test report to the console with output similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SoapUI 4.0.1 TestCaseRunner Summary**'
  prefs: []
  type: TYPE_NORMAL
- en: '**-----------------------------**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Total TestSuites: 1**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Total TestCases: 2 (1 failed)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Total Request Assertions: 1**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Total Failed Assertions: 1**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Total Exported Results: 1**'
  prefs: []
  type: TYPE_NORMAL
- en: '**[ERROR] java.lang.Exception: Not Contains in [ping] failed;**'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Response contains token [Insecure answer =>?]]**'
  prefs: []
  type: TYPE_NORMAL
- en: The ping test case failed as the assertion failed. The pong test case succeeded
    as the service existed. Therefore, even without assertions, using the auto generation
    feature of SoapUI allows you to quickly generate a scaffold that ensures that
    all services are running. You can always add assertions later as the project develops.
  prefs: []
  type: TYPE_NORMAL
- en: Creation of the Jenkins job is straightforward. The xUnit plugin allows you
    to pull in many types of unit test including the JUnit ones created from the Maven
    project. The location is set in step 10 as `**/target/surefire-reports/TEST-PingTestSoapBinding_TestSuite.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The custom reports option is yet another way of pulling in your own custom data
    and displaying its historic trends within Jenkins. It works by parsing the XML
    results found by the plugin with a custom style sheet. This gives you a great
    deal of flexibility in adding your own custom results.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ping service is dangerous as it does not filter input, and the input is
    reflected back through the output.
  prefs: []
  type: TYPE_NORMAL
- en: Many web applications use web services to load content into a page, to avoid
    reloading the full page. A typical example is when you type in a search term and
    alternative suggestions are shown on the fly. With a little social engineering
    magic, a victim will end up sending a request including scripting to the web service.
    On returning the response, the script is run in the client browser. This bypasses
    the intent of the same origin policy ([http://en.wikipedia.org/wiki/Same_origin_policy](http://en.wikipedia.org/wiki/Same_origin_policy)).
    This is known as a non-persistent attack as the script is not persisted to storage.
  prefs: []
  type: TYPE_NORMAL
- en: Web services are more difficult to test than web pages for XSS attacks. Luckily,
    SoapUI simplifies the testing process to a manageable level. You can find an introductory
    tutorial on SoapUI security tests at [http://www.soapui.org/Security/working-with-security-tests.html](http://www.soapui.org/Security/working-with-security-tests.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Enabling Sakai web services* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Writing test plans with SoapUI* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
