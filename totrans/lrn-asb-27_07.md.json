["```\n[default]\naws_access_key_id = YOUR_ACCESS_KEY\naws_secret_access_key = YOUR_SECRET_KEY\n```", "```\n- hosts: localhost\n  tasks:  \n```", "```\n    - name: Ensure key pair is present\n      ec2_key:\n        name: fale\n        key_material: \"{{ lookup('file', '~/.ssh/fale.pub') }}\"\n```", "```\n    - name: Ensure VPC network is present\n      ec2_vpc_net:\n        name: NET_NAME\n        state: present\n        cidr_block: 10.0.0.0/16\n        region: AWS_REGION\n      register: aws_net\n    - name: Ensure the VPC subnetwork is present\n      ec2_vpc_subnet:\n        state: present\n        az: AWS_AZ\n        vpc_id: '{{ aws_simple_net.vpc_id }}'\n        cidr: 10.0.1.0/24\n      register: aws_subnet\n```", "```\n   - name: Ensure key pair is present\n      ec2_key:\n        name: fale\n        key_material: \"{{ lookup('file', '~/.ssh/fale.pub') }}\"\n    - name: Gather information of the EC2 VPC net in eu-west-1\n ec2_vpc_net_facts:\n region: eu-west-1\n register: aws_simple_net\n - name: Gather information of the EC2 VPC subnet in eu-west-1\n ec2_vpc_subnet_facts:\n region: eu-west-1\n filters:\n vpc-id: '{{ aws_simple_net.vpcs.0.id }}'\n register: aws_simple_subnet\n```", "```\n    - name: Ensure wssg Security Group is present\n      ec2_group:\n        name: wssg\n        description: Web Security Group\n        region: eu-west-1\n        vpc_id: '{{ aws_simple_net.vpcs.0.id }}'\n        rules:\n          - proto: tcp \n            from_port: 22\n            to_port: 22\n            cidr_ip: 0.0.0.0/0\n          - proto: tcp \n            from_port: 80\n            to_port: 80\n            cidr_ip: 0.0.0.0/0\n          - proto: tcp \n            from_port: 443 \n            to_port: 443 \n            cidr_ip: 0.0.0.0/0\n        rules_egress:\n          - proto: all \n            cidr_ip: 0.0.0.0/0\n      register: aws_simple_wssg\n```", "```\n    - name: Ensure dbsg Security Group is present\n      ec2_group:\n        name: dbsg\n        description: DB Security Group\n        region: eu-west-1\n        vpc_id: '{{ aws_simple_net.vpcs.0.id }}'\n        rules:\n          - proto: tcp\n            from_port: 3036\n            to_port: 3036\n            group_id: '{{ aws_simple_wssg.group_id }}'\n        rules_egress:\n          - proto: all\n            cidr_ip: 0.0.0.0/0\n```", "```\n    - name: Setup instances\n      ec2:\n        assign_public_ip: '{{ item.assign_public_ip }}'\n        image: ami-3548444c\n        region: eu-west-1\n        exact_count: 1\n        key_name: fale\n        count_tag:\n          Name: '{{ item.name }}'\n        instance_tags:\n          Name: '{{ item.name }}'\n        instance_type: t2.micro\n        group_id: '{{ item.group_id }}'\n        vpc_subnet_id: '{{ aws_simple_subnet.subnets.0.id }}'\n        volumes:\n          - device_name: /dev/sda1\n            volume_type: gp2\n            volume_size: 10\n            delete_on_termination: True\n      register: aws_simple_instances\n      with_items:\n        - name: ws01.simple.aws.fale.io\n          group_id: '{{ aws_simple_wssg.group_id }}'\n          assign_public_ip: True\n        - name: ws02.simple.aws.fale.io\n          group_id: '{{ aws_simple_wssg.group_id }}'\n          assign_public_ip: True\n        - name: db01.simple.aws.fale.io\n          group_id: '{{ aws_simple_dbsg.group_id }}'\n          assign_public_ip: False \n```", "```\n    - name: Add route53 entry for server SERVER_NAME\n      route53:\n        command: create\n        zone: ZONE_NAME\n        record: RECORD_TO_ADD\n        type: RECORD_TYPE\n        ttl: TIME_TO_LIVE\n        value: IP_VALUES\n        wait: True\n```", "```\n    - name: Add route53 rules for instances\n      route53:\n        command: create\n        zone: aws.fale.io\n        record: '{{ item.tagged_instances.0.tags.Name }}'\n        type: A\n        ttl: 1\n        value: '{{ item.tagged_instances.0.public_ip }}'\n        wait: True\n      with_items: '{{ aws_simple_instances.results }}'\n      when: item.tagged_instances.0.public_ip\n    - name: Add internal route53 rules for instances\n      route53:\n        command: create\n        zone: aws.fale.io\n        private_zone: True\n        record: '{{ item.tagged_instances.0.tags.Name }}'\n        type: A\n        ttl: 1\n        value: '{{ item.tagged_instances.0.private_ip }}'\n        wait: True\n      with_items: '{{ aws_simple_instances.results }}'  \n```", "```\n---\n- hosts: localhost\n  tasks:\n    - name: Ensure key pair is present\n      ec2_key:\n        name: fale\n        key_material: \"{{ lookup('file', '~/.ssh/fale.pub') }}\"\n    - name: Gather information of the EC2 VPC net in eu-west-1\n      ec2_vpc_net_facts:\n        region: eu-west-1\n      register: aws_simple_net\n    - name: Gather information of the EC2 VPC subnet in eu-west-1\n      ec2_vpc_subnet_facts:\n        region: eu-west-1\n        filters:\n          vpc-id: '{{ aws_simple_net.vpcs.0.id }}'\n      register: aws_simple_subnet\n   ...\n```", "```\n    - name: Setup instances\n      ec2:\n        assign_public_ip: '{{ item.assign_public_ip }}'\n        image: ami-3548444c\n        region: eu-west-1\n        exact_count: 1\n        key_name: fale\n        count_tag:\n          Name: '{{ item.name }}'\n        instance_tags:\n          Name: '{{ item.name }}'\n        instance_type: t2.micro\n        group_id: '{{ item.group_id }}'\n        vpc_subnet_id: '{{ item.vpc_subnet_id }}'\n        volumes:\n          - device_name: /dev/sda1\n            volume_type: gp2\n            volume_size: 10\n            delete_on_termination: True\n    ...\n```", "```\n- hosts: localhost\n  tasks:\n    - name: Add the SSH Key to Digital Ocean\n      digital_ocean:\n        state: present\n        command: ssh\n        name: SSH_KEY_NAME\n        ssh_pub_key: 'ssh-rsa AAAA...'\n        api_token: XXX\n      register: ssh_key\n```", "```\n    - name: Add the SSH Key to Digital Ocean\n      digital_ocean:\n        state: present\n        command: ssh\n        name: faleKey\n        ssh_pub_key: \"{{ lookup('file', '~/.ssh/fale.pub') }}\"\n        api_token: ee02b...2f11d\n      register: ssh_key\n```", "```\nPLAY [all] ***********************************************************\n\nTASK [Gathering Facts] ***********************************************\nok: [localhost]\n\nTASK [Add the SSH Key to Digital Ocean] ******************************\nchanged: [localhost]\n\nPLAY RECAP ***********************************************************\nlocalhost : ok=2 changed=1 unreachable=0 failed=0\n```", "```\n - name: Ensure the ws and db servers are present\n   digital_ocean:\n     state: present\n     ssh_key_ids: KEY_ID\n     name: '{{ item }}'\n     api_token: DIGITAL_OCEAN_KEY\n     size_id: 512mb\n     region_id: lon1\n     image_id: centos-7-0-x64\n     unique_name: True\n   with_items:\n     - WEBSERVER 1\n     - WEBSERVER 2\n     - DBSERVER 1\n```", "```\n    - name: Ensure the ws and db servers are present\n      digital_ocean:\n        state: present\n        ssh_key_ids: '{{ ssh_key.ssh_key.id }}'\n        name: '{{ item }}'\n        api_token: ee02b...2f11d\n        size_id: 512mb\n        region_id: lon1\n        image_id: centos-7-x64\n        unique_name: True\n      with_items:\n        - ws01.do.fale.io\n        - ws02.do.fale.io\n        - db01.do.fale.io\n      register: droplets\n```", "```\n    - name: Ensure domain resolve properly\n      digital_ocean_domain:\n        api_token: ee02b...2f11d\n        state: present\n        name: '{{ item.droplet.name }}'\n        ip: '{{ item.droplet.ip_address }}'\n      with_items: '{{ droplets.results }}'\n```", "```\n---\n- hosts: localhost\n  tasks:\n    - name: Ensure domain is present\n      digital_ocean_domain:\n        api_token: ee02b...2f11d\n        state: present\n        name: do.fale.io\n        ip: 127.0.0.1\n    - name: Add the SSH Key to Digital Ocean\n      digital_ocean:\n        state: present\n        command: ssh\n        name: faleKey\n        ssh_pub_key: \"{{ lookup('file', '~/.ssh/fale.pub') }}\"\n        api_token: ee02b...2f11d\n      register: ssh_key\n   ...\n```", "```\nansible-playbook playbooks/do_provision.yaml \n```", "```\nPLAY [localhost] *****************************************************\n\nTASK [Gathering Facts] ***********************************************\nok: [localhost]\n\nTASK [Ensure domain is present] **************************************\nchanged: [localhost]\n\nTASK [Add the SSH Key to Digital Ocean] ******************************\nchanged: [localhost]\n\nTASK [Ensure the ws and db servers are present] **********************\nchanged: [localhost] => (item=ws01.do.fale.io)\nchanged: [localhost] => (item=ws02.do.fale.io)\nchanged: [localhost] => (item=db01.do.fale.io)\n\n...\n```", "```\n[default]\nsubscription_id: __AZURE_SUBSCRIPTION_ID__\nclient_id: __AZURE_CLIENT_ID__ secret: __AZURE_SECRET__\n```", "```\n    - name: Create resource group\n      azure_rm_resourcegroup:\n        name: myResourceGroup\n        location: eastus\n```", "```\n     - name: Create Azure VM\n            hosts: localhost\n            tasks:\n      - name: Create resource group\n            azure_rm_resourcegroup:\n            name: myResourceGroup\n            location: eastus\n      - name: Create virtual network\n            azure_rm_virtualnetwork:\n            resource_group: myResourceGroup\n            name: myVnet\n           address_prefixes: \"10.0.0.0/16\"\n    - name: Add subnet\n           azure_rm_subnet:\n           resource_group: myResourceGroup\n          name: mySubnet\n          address_prefix: \"10.0.1.0/24\"\n          virtual_network: myVnet\n```", "```\n    - name: Create public IP address\n      azure_rm_publicipaddress:\n        resource_group: myResourceGroup\n        allocation_method: Static\n        name: myPublicIP\n      register: output_ip_address\n    - name: Dump public IP for VM which will be created\n      debug:\n        msg: \"The public IP is {{ output_ip_address.state.ip_address }}.\"\n    - name: Create Network Security Group that allows SSH \n      azure_rm_securitygroup:\n        resource_group: myResourceGroup\n        name: myNetworkSecurityGroup\n        rules:\n          - name: SSH \n            protocol: Tcp \n            destination_port_range: 22\n            access: Allow\n            priority: 1001\n            direction: Inbound\n    - name: Create virtual network inteface card\n      azure_rm_networkinterface:\n        resource_group: myResourceGroup\n        name: myNIC\n        virtual_network: myVnet\n        subnet: mySubnet\n        public_ip_name: myPublicIP\n        security_group: myNetworkSecurityGroup\n```", "```\n    - name: Create VM\n      azure_rm_virtualmachine:\n        resource_group: myResourceGroup\n        name: myVM\n        vm_size: Standard_DS1_v2\n        admin_username: azureuser\n        ssh_password_enabled: false\n        ssh_public_keys:\n          - path: /home/azureuser/.ssh/authorized_keys\n            key_data: \"{{ lookup('file', '~/.ssh/fale.pub') }}\"\n        network_interfaces: myNIC\n        image:\n          offer: CentOS\n          publisher: OpenLogic\n          sku: '7.5'\n        version: latest\n```"]