["```\ndef main(): \n    # Parsing argument file \n    args = {} \n    args_file = sys.argv[1] \n    args_data = file(args_file).read() \n    arguments = shlex.split(args_data) \n    for arg in arguments: \n        if '=' in arg: \n            (key, value) = arg.split('=') \n            args[key] = value \n    user = args['user'] \n\n    # Check if user exists \n    try: \n        pwd.getpwnam(user) \n        success = True \n        ret_msg = 'User %s exists' % user \n    except KeyError: \n        success = False \n        ret_msg = 'User %s does not exists' % user \n...\n```", "```\n#!/usr/bin/env python \n\nimport pwd \nimport sys \nimport shlex \nimport json \n```", "```\ndef main(): \n    # Parsing argument file \n    args = {} \n    args_file = sys.argv[1] \n    args_data = file(args_file).read() \n    arguments = shlex.split(args_data) \n    for arg in arguments: \n        if '=' in arg: \n            (key, value) = arg.split('=') \n            args[key] = value \n    user = args['user'] \n```", "```\n    # Check if user exists \n    try: \n        pwd.getpwnam(user) \n        success = True \n        ret_msg = 'User %s exists' % user \n    except KeyError: \n        success = False \n        ret_msg = 'User %s does not exists' % user \n```", "```\n    # Error handling and JSON return \n    if success: \n        print json.dumps({ \n            'msg': ret_msg \n        }) \n        sys.exit(0) \n    else: \n        print json.dumps({ \n            'failed': True, \n            'msg': ret_msg \n        }) \n        sys.exit(1) \n```", "```\n---\n- hosts: localhost\n  connection: local\n  vars:\n    user_ok: root\n    user_ko: this_user_does_not_exists\n  tasks:\n    - name: 'Check if user {{ user_ok }} exists'\n      check_user:\n        user: '{{ user_ok }}'\n    - name: 'Check if user {{ user_ko }} exists'\n      check_user:\n        user: '{{ user_ko }}'\n```", "```\nansible-playbook playbooks/check_user.yaml\n```", "```\nPLAY [localhost] ***************************************************\n\nTASK [Gathering Facts] *********************************************\nok: [localhost]\n\nTASK [Check if user root exists] ***********************************\nok: [localhost]\n\nTASK [Check if user this_user_does_not_exists exists] **************\nfatal: [localhost]: FAILED! => {\"changed\": false, \"msg\": \"User this_user_does_not_exists does not exists\"}\n to retry, use: --limit @playbooks/check_user.retry\n\nPLAY RECAP *********************************************************\nlocalhost                   : ok=2 changed=0 unreachable=0 failed=1\n```", "```\n#!/usr/bin/env python \n\nimport pwd \nfrom ansible.module_utils.basic import AnsibleModule \n\ndef main(): \n    # Parsing argument file \n    module = AnsibleModule( \n        argument_spec = dict( \n            user = dict(required=True) \n        ) \n    ) \n    user = module.params.get('user') \n\n    # Check if user exists \n    try: \n        pwd.getpwnam(user) \n        success = True \n        ret_msg = 'User %s exists' % user \n    except KeyError: \n        success = False \n        ret_msg = 'User %s does not exists' % user \n\n...\n```", "```\n#!/usr/bin/env python \n\nimport pwd \nfrom ansible.module_utils.basic import AnsibleModule \n```", "```\n    # Parsing argument file \n    module = AnsibleModule( \n        argument_spec = dict( \n            user = dict(required=True) \n        ) \n    ) \n    user = module.params.get('user') \n```", "```\n    # Error handling and JSON return \n    if success: \n        module.exit_json(msg=ret_msg) \n    else: \n        module.fail_json(msg=ret_msg) \n```", "```\n---\n- hosts: localhost\n  connection: local\n  vars:\n    user_ok: root\n    user_ko: this_user_does_not_exists\n  tasks:\n    - name: 'Check if user {{ user_ok }} exists'\n      check_user_py2:\n        user: '{{ user_ok }}'\n    - name: 'Check if user {{ user_ko }} exists'\n      check_user_py2:\n        user: '{{ user_ko }}'\n```", "```\nansible-playbook playbooks/check_user_py2.yaml\n```", "```\nPLAY [localhost] ***************************************************\n\nTASK [Gathering Facts] *********************************************\nok: [localhost]\n\nTASK [Check if user root exists] ***********************************\nok: [localhost]\n\nTASK [Check if user this_user_does_not_exists exists] **************\nfatal: [localhost]: FAILED! => {\"changed\": false, \"msg\": \"User this_user_does_not_exists does not exists\"}\n to retry, use: --limit @playbooks/check_user_py2.retry\n\nPLAY RECAP *********************************************************\nlocalhost                   : ok=2 changed=0 unreachable=0 failed=1\n```", "```\n#!/usr/bin/env python \n\nimport pwd \nfrom ansible.module_utils.basic import AnsibleModule \n\nclass CheckUser: \n    def __init__(self, user): \n        self.user = user \n\n    # Check if user exists \n    def check_user(self): \n        uid = '' \n        gid = '' \n        try: \n            user = pwd.getpwnam(self.user) \n            success = True \n            ret_msg = 'User %s exists' % self.user \n            uid = user.pw_uid \n            gid = user.pw_gid \n        except KeyError: \n            success = False \n            ret_msg = 'User %s does not exists' % self.user \n        return success, ret_msg, uid, gid \n\n...\n```", "```\n---\n- hosts: localhost\n  connection: local\n  vars:\n    user: root\n  tasks:\n    - name: 'Retrive {{ user }} data if it exists'\n      check_user_id:\n        user: '{{ user }}'\n      register: user_data\n    - name: 'Print user {{ user }} data'\n      debug:\n        msg: '{{ user_data }}'\n```", "```\nansible-playbook playbooks/check_user_id.yaml\n```", "```\nPLAY [localhost] ***************************************************\n\nTASK [Gathering Facts] *********************************************\nok: [localhost] \nTASK [Retrive root data if it exists] ******************************\nok: [localhost]\n\nTASK [Print user root data] ****************************************\nok: [localhost] => {\n \"msg\": {\n \"changed\": false, \n \"failed\": false, \n \"gid\": 0, \n \"msg\": \"User root exists\", \n \"uid\": 0\n }\n}\n\nPLAY RECAP *********************************************************\nlocalhost : ok=3 changed=0 unreachable=0 failed=0\n```", "```\ngit clone git://github.com/ansible/ansible.git --recursive\n```", "```\nsource ansible/hacking/env-setup\n```", "```\nansible/hacking/test-module -m library/check_user_id.py -a \"user=root\"\n```", "```\n* including generated source, if any, saving to: /home/fale/.ansible_module_generated \n* ansiballz module detected; extracted module source to: /home/fale/debug_dir \n*********************************** \nRAW OUTPUT \n\n{\"msg\": \"User root exists\", \"invocation\": {\"module_args\": {\"user\": \"root\"}}, \"gid\": 0, \"uid\": 0, \"changed\": false} \n\n*********************************** \nPARSED OUTPUT \n{ \n    \"changed\": false, \n    \"gid\": 0, \n    \"invocation\": { \n        \"module_args\": { \n            \"user\": \"root\" \n        } \n    }, \n    \"msg\": \"User root exists\", \n    \"uid\": 0 \n}\n```", "```\n#!/bin/bash \nsource $1 \n\nSERVICE=$service_name \n\nJAVA_PIDS=$(/usr/java/default/bin/jps | grep ${SERVICE} | awk '{print $1}') \n\nif [ ${JAVA_PIDS} ]; then \n    for JAVA_PID in ${JAVA_PIDS}; do \n        /usr/bin/kill -9 ${JAVA_PID} \n    done \n    echo \"failed=False msg=\\\"Killed all the orphaned processes for ${SERVICE}\\\"\" \n    exit 0 \nelse \n    echo \"failed=False msg=\\\"No orphaned processes to kill for ${SERVICE}\\\"\" \n    exit 0 \nfi\n```", "```\nsource $1 \n\nSERVICE=$service_name \n```", "```\nif [ ${JAVA_PIDS} ]; then \n    for JAVA_PID in ${JAVA_PIDS}; do \n        /usr/bin/kill -9 ${JAVA_PID} \n    done \n    echo \"failed=False msg=\\\"Killed all the orphaned processes for ${SERVICE}\\\"\" \n    exit 0 \n```", "```\nelse \n    echo \"failed=False msg=\\\"No orphaned processes to kill for ${SERVICE}\\\"\" \n    exit 0 \nfi \n```", "```\nservice_name=jenkins\n```", "```\nbash library/kill_java.sh /tmp/arguments\n```", "```\nfailed=False msg=\"No orphaned processes to kill for jenkins\"\n```", "```\n#!/usr/bin/env ruby \n\nrequire 'rsync' \nrequire 'json' \n\nsrc = '' \ndest = '' \nret_msg = '' \nSUCCESS = '' \n\ndef print_message(state, msg, key='failed') \n    message = { \n        key => state, \n        \"msg\" => msg \n    } \n    print message.to_json \n    exit 1 if state == false \n    exit 0 \n...\n```", "```\ngem install rsync\n```", "```\n#!/usr/bin/env ruby \n\nrequire 'rsync' \nrequire 'json' \n\nsrc = '' \ndest = '' \nret_msg = '' \nSUCCESS = '' \n\ndef print_message(state, msg, key='failed') \n    message = { \n        key => state, \n        \"msg\" => msg \n    } \n    print message.to_json \n    exit 1 if state == false \n    exit 0 \nend\n```", "```\nargs_file = ARGV[0] \ndata = File.read(args_file) \narguments = data.split(\" \") \narguments.each do |argument| \n    print_message(false, \"Argument should be name-value pairs. Example name=foo\") if not argument.include?(\"=\") \n    field, value = argument.split(\"=\") \n    if field == \"src\" \n        src = value \n    elsif field == \"dest\" \n        dest = value \n    else print_message(false, \"Invalid argument provided. Valid arguments are src and dest.\") \n    end \nend \n```", "```\nresult = Rsync.run(\"#{src}\", \"#{dest}\") \nif result.success? \n    success = true \n    ret_msg = \"Copied file successfully\" \nelse \n    success = false \n    ret_msg = result.error \nend \n```", "```\nif success \n    print_message(false, \"#{ret_msg}\") \nelse \n    print_message(true, \"#{ret_msg}\") \nend\n```", "```\nsrc=/etc/resolv.conf dest=/tmp/resolv_backup.conf\n```", "```\nruby library/rsync.rb /tmp/arguments\n```", "```\n{\"failed\":false,\"msg\":\"Copied file successfully\"} \n```", "```\n#!/usr/bin/env python \n\nimport pwd \nfrom ansible.module_utils.basic import AnsibleModule \n\nclass User: \n    def __init__(self, user): \n        self.user = user \n\n    # Check if user exists \n    def check_if_user_exists(self): \n        try: \n            user = pwd.getpwnam(self.user) \n            success = True \n            ret_msg = 'User %s exists' % self.user \n        except KeyError: \n            success = False \n            ret_msg = 'User %s does not exists' % self.user \n        return success, ret_msg \n\n ...\n```", "```\npip install nose\n```", "```\nfrom nose.tools import assert_equals, assert_false, assert_true \nimport imp \nimp.load_source(\"check_user\",\"check_user_py3.py\") \nfrom check_user import User \n\ndef test_check_user_positive(): \n    chkusr = User(\"root\") \n    success, ret_msg = chkusr.check_if_user_exists() \n    assert_true(success) \n    assert_equals('User root exists', ret_msg) \n\ndef test_check_user_negative(): \n    chkusr = User(\"this_user_does_not_exists\") \n    success, ret_msg = chkusr.check_if_user_exists() \n    assert_false(success) \n    assert_equals('User this_user_does_not_exists does not exists', ret_msg) \n```", "```\ncd library\nnosetests -v test_check_users_py3.py\n```", "```\ntest_check_user_py3.test_check_user_positive ... ok test_check_user_py3.test_check_user_negative ... ok --------------------------------------------------- Ran 2 tests in 0.001sOK\n```"]