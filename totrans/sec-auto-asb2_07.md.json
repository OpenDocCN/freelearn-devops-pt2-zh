["```\n$ ansible-galaxy install dev-sec.os-hardening\n- hosts: localhost\n  become: yes\n  roles:\n    - dev-sec.os-hardening\n\n```", "```\n$ ansible-galaxy install git+https://github.com/openstack/ansible-hardening\n\n```", "```\n- name: STIGs ansible-hardening for automated security hardening\n  hosts: servers\n  become: yes\n  remote_user: \"{{ remote_user_name }}\"\n  vars:\n    remote_user_name: vagrant\n    security_ntp_servers:\n      - time.nist.gov\n      - time.google.com\n\n  roles:\n    - ansible-hardening\n```", "```\n- hosts: all\n  become: yes\n  vars:\n    oscap_profile: xccdf_org.ssgproject.content_profile_pci-dss\n    oscap_policy: ssg-rhel7-ds\n\n  tasks:\n  - name: install openscap scanner\n    package:\n      name: \"{{ item }}\"\n      state: latest\n    with_items:\n    - openscap-scanner\n    - scap-security-guide\n\n  - block:\n    - name: run openscap\n      command: >\n        oscap xccdf eval\n        --profile {{ oscap_profile }}\n        --results-arf /tmp/oscap-arf.xml\n        --report /tmp/oscap-report.html\n        --fetch-remote-resources\n        /usr/share/xml/scap/ssg/content/{{ oscap_policy }}.xml\n\n    always:\n    - name: download report\n      fetch:\n        src: /tmp/oscap-report.html\n        dest: ./{{ inventory_hostname }}.html\n        flat: yes\n```", "```\n$ git clone https://github.com/oguya/cis-ubuntu-14-ansible.git\n$ cd cis-ubuntu-14-ansible\n```", "```\n$ ansible-playbook -i inventory cis.yml\n```", "```\n        - name: AWS CIS Benchmarks playbook\n          hosts: localhost\n          become: yes\n          vars:\n            aws_access_key: XXXXXXXX\n            aws_secret_key: XXXXXXXX\n\n          tasks:\n            - name: installing aws cli and ansi2html\n              pip:\n                name: \"{{ item }}\"\n\n            with_items:\n              - awscli\n              - ansi2html\n\n            - name: downloading and setting up prowler\n              get_url:\n                url:         https://raw.githubusercontent.com/Alfresco/prowler/master\n        /prowler\n                dest: /usr/bin/prowler\n                mode: 0755\n\n            - name: running prowler full scan\n              shell: \"prowler | ansi2html -la > ./aws-cis-report-{{         ansible_date_time.epoch }}.html\"\n              environment:\n                AWS_ACCESS_KEY_ID: \"{{ aws_access_key }}\"\n                AWS_SECRET_ACCESS_KEY: \"{{ aws_secret_key }}\"\n\n            - name: AWS CIS Benchmarks report downloaded\n              debug:\n                msg: \"Report can be found at ./aws-cis-report-{{         ansible_date_time.epoch }}.html\"\n```", "```\n- name: Lynis security audit playbook\n  hosts: lynis\n  remote_user: ubuntu\n  become: yes\n  vars:\n    # refer to https://packages.cisofy.com/community\n    code_name: xenial\n\n  tasks:\n    - name: adding lynis repo key\n      apt_key:\n        keyserver: keyserver.ubuntu.com\n        id: C80E383C3DE9F082E01391A0366C67DE91CA5D5F\n        state: present\n\n    - name: installing apt-transport-https\n      apt:\n        name: apt-transport-https\n        state: present\n\n    - name: adding repo\n      apt_repository:\n        repo: \"deb https://packages.cisofy.com/community/lynis/deb/ {{ code_name }} main\"\n        state: present\n        filename: \"cisofy-lynis\"\n\n    - name: installing lynis\n      apt:\n        name: lynis\n        update_cache: yes\n        state: present\n\n    - name: audit scan the system\n      shell: lynis audit system > /tmp/lynis-output.log\n\n    - name: downloading report locally\n      fetch:\n        src: /tmp/lynis-output.log\n        dest: ./{{ inventory_hostname }}-lynis-report-{{ ansible_date_time.date }}.log\n        flat: yes\n\n    - name: report location\n      debug:\n        msg: \"Report can be found at ./{{ inventory_hostname }}-lynis-report-{{ ansible_date_time.date }}.log\"\n```", "```\n- name: Windows Security Updates\n  hosts: winblows\n\n  tasks:\n    - name: install all critical and security updates\n      win_updates:\n        category_names:\n        - CriticalUpdates\n        - SecurityUpdates\n        state: installed\n      register: update_result\n\n    - name: reboot host if required\n      win_reboot:\n      when: update_result.reboot_required\n```", "```\n- name: Windows Audit Playbook\n  hosts: winblows\n\n  tasks:\n    - name: download audit script\n      win_get_url:\n        url: https://raw.githubusercontent.com/alanrenouf/Windows-Workstation-and-Server-Audit/master/Audit.ps1\n        dest: C:\\Audit.ps1\n\n    - name: running windows audit script\n      win_shell: C:\\Audit.ps1\n      args:\n        chdir: C:\\\n```", "```\n- name: Basic NMAP Scan Playbook\n  hosts: localhost\n  gather_facts: false\n  vars:\n    top_ports: 1000\n    network_hosts:\n      - 192.168.1.1\n      - scanme.nmap.org\n      - 127.0.0.1\n      - 192.168.11.0/24\n\n  tasks:\n    - name: check if nmap installed and install\n      apt:\n        name: nmap\n        update_cache: yes\n        state: present\n      become: yes\n\n    - name: top ports scan\n      shell: \"nmap --top-ports {{ top_ports }} -Pn -oA nmap-scan-%Y-%m-%d {{ network_hosts|join(' ') }}\"\n```", "```\n- name: Advanced NMAP Scan using NSE\n  hosts: localhost\n  vars:\n    ports:\n      - 80\n      - 443\n    scan_host: scanme.nmap.org \n\n  tasks:\n    - name: Running Nmap NSE scan\n      shell: \"nmap -Pn -p {{ ports|join(',') }} --script {{ item }} -oA nmap-{{ item }}-results-%Y-%m-%d {{ scan_host }}\"\n\n      with_items:\n        - http-methods\n        - http-enum\n```", "```\n- name: AWS Security Audit using Scout2\n  hosts: localhost\n  become: yes\n\n  tasks:\n    - name: installing python and pip\n      apt:\n        name: \"{{ item }}\"\n        state: present\n        update_cache: yes\n\n      with_items:\n        - python\n        - python-pip\n\n    - name: install aws scout2\n      pip:\n        name: awsscout2\n```", "```\n# https://raw.githubusercontent.com/nccgroup/Scout2/master/tests/data/rule-configs/iam-password-policy.json\n{\n    \"aws_account_id\": \"123456789012\",\n    \"services\": {\n        \"iam\": {\n            \"password_policy\": {\n                \"ExpirePasswords\": false,\n                \"MinimumPasswordLength\": \"1\",\n                \"PasswordReusePrevention\": false,\n                \"RequireLowercaseCharacters\": false,\n                \"RequireNumbers\": false,\n                \"RequireSymbols\": false,\n                \"RequireUppercaseCharacters\": false\n            }\n        }\n    }\n}\n```", "```\n- name: AWS Security Audit using Scout2\n  hosts: localhost\n  vars:\n    aws_access_key: XXXXXXXX\n    aws_secret_key: XXXXXXXX\n\n  tasks:\n    - name: running scout2 scan\n      # If you are performing from less memory system add --thread-config 1 to below command\n      command: \"Scout2\"\n      environment:\n        AWS_ACCESS_KEY_ID: \"{{ aws_access_key }}\"\n        AWS_SECRET_ACCESS_KEY: \"{{ aws_secret_key }}\"\n\n    - name: AWS Scout2 report downloaded\n      debug:\n        msg: \"Report can be found at ./report.html\"\n```", "```\n- name: Brakeman Scanning Playbook\n  hosts: scanner\n  remote_user: ubuntu\n  become: yes\n  gather_facts: false\n  vars:\n    repo_url: https://github.com/OWASP/railsgoat.git\n    output_dir: /tmp/railsgoat/\n    report_name: report.html\n\n  tasks:\n    - name: installing ruby and git\n      apt:\n        name: \"{{ item }}\"\n        update_cache: yes\n        state: present\n\n      with_items:\n        - ruby-full\n        - git\n\n    - name: installing brakeman gem\n      gem:\n        name: brakeman\n        state: present\n\n    - name: cloning the {{ repo_url }}\n      git:\n        repo: \"{{ repo_url }}\"\n        dest: \"{{ output_dir }}\"\n\n    - name: Brakeman scanning in action\n      # Output available in text, html, tabs, json, markdown and csv formats\n      command: \"brakeman -p {{ output_dir }} -o {{ output_dir }}report.html\"\n      # Error handling for brakeman output\n      failed_when: result.rc != 3\n      register: result\n\n    - name: Downloading the report\n      fetch:\n        src: \"{{ output_dir }}/report.html\"\n        dest: \"{{ report_name }}\"\n        flat: yes\n\n    - debug:\n        msg: \"Report can be found at {{ report_name }}\"\n```", "```\n- name: OWASP Dependency Check Playbook\n  hosts: scanner\n  remote_user: ubuntu\n  become: yes\n  vars:\n    repo_url: https://github.com/psiinon/bodgeit.git\n    output_dir: /tmp/bodgeit/\n    project_name: bodgeit\n    report_name: report.html\n\n  tasks:\n    - name: installing pre requisuites\n      apt:\n        name: \"{{ item }}\"\n        state: present\n        update_cache: yes\n\n      with_items:\n        - git\n        - unzip\n        - mono-runtime\n        - mono-devel\n        - default-jre\n\n    - name: downloading owasp dependency-check\n      unarchive:\n        src: http://dl.bintray.com/jeremy-long/owasp/dependency-check-3.0.2-release.zip\n        dest: /usr/share/\n        remote_src: yes\n\n    - name: adding symlink to the system\n      file:\n        src: /usr/share/dependency-check/bin/dependency-check.sh\n        dest: /usr/bin/dependency-check\n        mode: 0755\n        state: link\n\n    - name: cloning the {{ repo_url }}\n      git:\n        repo: \"{{ repo_url }}\"\n        dest: \"{{ output_dir }}\"\n\n    - name: updating CVE database\n      command: \"dependency-check --updateonly\"\n\n    - name: OWASP dependency-check scanning in action\n      # Output available in XML, HTML, CSV, JSON, VULN, ALL formats\n      command: \"dependency-check --project {{ project_name }} --scan {{ output_dir }} -o {{ output_dir }}{{ project_name }}-report.html\"\n\n    - name: Downloading the report\n      fetch:\n        src: \"{{ output_dir }}{{ project_name }}-report.html\"\n        dest: \"{{ report_name }}\"\n        flat: yes\n\n    - debug:\n        msg: \"Report can be found at {{ report_name }}\" \n```", "```\n- name: Nikto Playbook\n  hosts: scanner\n  remote_user: ubuntu\n  become: yes\n  vars:\n    domain_name: idontexistdomainnamewebsite.com # Add the domain to scan\n    report_name: report.html\n\n  tasks:\n    - name: installing pre requisuites\n      apt:\n        name: \"{{ item }}\"\n        state: present\n        update_cache: yes\n\n      with_items:\n        - git\n        - perl\n        - libnet-ssleay-perl\n        - openssl\n        - libauthen-pam-perl\n        - libio-pty-perl\n        - libmd-dev\n\n    - name: downloading nikto\n      git:\n        repo: https://github.com/sullo/nikto.git\n        dest: /usr/share/nikto/\n\n    - name: Nikto scanning in action\n      # Output available in csv, html, msf+, nbe, txt, xml formats\n      command: \"/usr/share/nikto/program/nikto.pl -h {{ domain_name }} -o /tmp/{{ domain_name }}-report.html\"\n\n    - name: downloading the report\n      fetch:\n        src: \"/tmp/{{ domain_name }}-report.html\"\n        dest: \"{{ report_name }}\"\n        flat: yes\n\n    - debug:\n        msg: \"Report can be found at {{ report_name }}\"\n```", "```\n- name: WPScan Playbook\n  hosts: localhost\n  vars:\n    domain_name: www.idontexistdomainnamewebsite.com # Specify the domain to scan\n    wpscan_container: wpscanteam/wpscan\n    scan_name: wpscan\n    output_dir: /tmp # Specify the output directory to store results\n\n  tasks:\n    # This playbook assumes docker already installed\n    - name: Downloading {{ wpscan_container }} docker container\n      docker_image:\n        name: \"{{ wpscan_container }}\"\n\n    - name: creating output report file\n      file:\n        path: \"{{output_dir }}/{{ domain_name }}.txt\"\n        state: touch\n\n    - name: Scanning {{ domain_name }} website using WPScan\n      docker_container:\n        name: \"{{ scan_name }}\"\n        image: \"{{ wpscan_container }}\"\n        interactive: yes\n        auto_remove: yes\n        state: started\n        volumes: \"/tmp/{{ domain_name }}.txt:/wpscan/data/output.txt\"\n        command: [\"--update\", \"--follow-redirection\", \"--url\", \"{{ domain_name }}\", \"--log\", \"/wpscan/data/output.txt\"]\n\n    - name: WPScan report downloaded\n      debug:\n        msg: \"The report can be found at /tmp/{{ domain_name }}.txt\"\n```", "```\n- name: test play\n  hosts: webservers\n  serial: 1\n```", "```\n- name: test play\n  hosts: webservers\n  serial: \"20%\"\n```", "```\n# The batch sizes can be a list as well\n- name: test play\n  hosts: webservers\n  serial:\n    - \"1\"\n    - \"20%\"\n    - \"100%\"\n```", "```\n[proxyserver]\nproxy ansible_host=192.168.100.100 ansible_user=ubuntu ansible_password=passwordgoeshere\n\n[blue]\nblueserver ansible_host=192.168.100.10 ansible_user=ubuntu ansible_password=passwordgoeshere\n\n[green]\ngreenserver ansible_host=192.168.100.20 ansible_user=ubuntu ansible_password=passwordgoeshere\n\n[webservers:children]\nblue\ngreen\n\n[prod:children]\nwebservers\nproxyserver\n```", "```\n- name: running common role\n  hosts: prod\n  gather_facts: false\n  become: yes\n  serial: 100%\n  roles:\n    - common\n\n- name: running haproxy role\n  hosts: proxyserver\n  become: yes \n  roles:\n    - haproxy\n\n- name: running webserver role\n  hosts: webservers\n  become: yes \n  serial: 100% \n  roles:\n    - nginx\n\n- name: updating blue code\n  hosts: blue\n  become: yes \n  roles:\n    - bluecode\n\n- name: updating green code\n  hosts: green\n  become: yes \n  roles:\n    - greencode\n```", "```\n- name: installing python if not installed\n  raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)\n\n- name: updating and installing git, curl\n  apt:\n    name: \"{{ item }}\"\n    state: present\n    update_cache: yes\n\n  with_items:\n    - git\n    - curl\n\n# Also we can include common any monitoring and security hardening tasks\n```", "```\n- name: adding haproxy repo\n  apt_repository:\n    repo: ppa:vbernat/haproxy-1.7\n\n- name: updating and installing haproxy\n  apt:\n    name: haproxy\n    state: present\n    update_cache: yes\n\n- name: updating the haproxy configuration\n  template:\n    src: haproxy.cfg.j2\n    dest: /etc/haproxy/haproxy.cfg\n\n- name: starting the haproxy service\n  service:\n    name: haproxy\n    state: started\n    enabled: yes\n```", "```\nglobal\n  log /dev/log local0\n  log /dev/log local1 notice\n  chroot /var/lib/haproxy\n  stats socket /run/haproxy/admin.sock mode 660 level admin\n  stats timeout 30s\n  user haproxy\n  group haproxy\n  daemon\n\n  # Default SSL material locations\n  ca-base /etc/ssl/certs\n  crt-base /etc/ssl/private\n\n  # Default ciphers to use on SSL-enabled listening sockets.\n  # For more information, see ciphers(1SSL). This list is from:\n  # https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/\n  # An alternative list with additional directives can be obtained from\n  # https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy\n  ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS\n  ssl-default-bind-options no-sslv3\n\ndefaults\n  log global\n  mode http\n  option httplog\n  option dontlognull\n        timeout connect 5000\n        timeout client 50000\n        timeout server 50000\n  errorfile 400 /etc/haproxy/errors/400.http\n  errorfile 403 /etc/haproxy/errors/403.http\n  errorfile 408 /etc/haproxy/errors/408.http\n  errorfile 500 /etc/haproxy/errors/500.http\n  errorfile 502 /etc/haproxy/errors/502.http\n  errorfile 503 /etc/haproxy/errors/503.http\n  errorfile 504 /etc/haproxy/errors/504.http\n\nfrontend http_front\n   bind *:80\n   stats uri /haproxy?stats\n   default_backend http_back\n\nbackend http_back\n   balance roundrobin\n   server {{ hostvars.blueserver.ansible_host }} {{ hostvars.blueserver.ansible_host }}:80 check\n   #server {{ hostvars.greenserver.ansible_host }} {{ hostvars.greenserver.ansible_host }}:80 check\n```", "```\nserver {{ hostvars.blueserver.ansible_host }} {{ hostvars.blueserver.ansible_host }}:80 check\n```", "```\n- name: installing nginx\n  apt:\n    name: nginx\n    state: present\n    update_cache: yes\n\n- name: starting the nginx service\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n```", "```\n<html>\n    <body bgcolor=\"blue\">\n       <h1 align=\"center\">Welcome to Blue Deployment</h1>\n    </body>\n</html>\n<html>\n    <body bgcolor=\"green\">\n        <h1 align=\"center\">Welcome to Green Deployment</h1>\n    </body>\n</html>\n```", "```\n- name: Updating to GREEN deployment\n  hosts: proxyserver\n  become: yes \n\n  tasks:\n    - name: updating proxy configuration\n      template:\n        src: haproxy.cfg.j2\n        dest: /etc/haproxy/haproxy.cfg\n\n    - name: updating the service\n      service:\n        name: haproxy\n        state: reloaded\n\n    - debug:\n        msg: \"GREEN deployment successful. Please check your server :)\"\n```"]