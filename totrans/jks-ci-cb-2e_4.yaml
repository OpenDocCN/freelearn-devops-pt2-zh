- en: Chapter 4. Communicating Through Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Skinning Jenkins with the simple themes plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skinning and provisioning Jenkins using a WAR overlay
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a home page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating HTML reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Efficient use of views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving screen space with the Dashboard View plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making noise with HTML5 browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An extreme view for reception areas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile presentation using Google Calendar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile apps for Android and iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing your audience with Google Analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplifying powerful visualizations using the R plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explores communication through Jenkins, recognizing that there
    are different target audiences.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins is a talented communicator. Its home page displays the status of all
    jobs, allowing you to make quick decisions. You can easily set up multiple views,
    prioritizing information naturally. Jenkins, with its hordes of plugins, notifies
    you by e-mail, dashboards, and Google services. It shouts at you through mobile
    devices, radiates information as you walk past big screens, and fires at you with
    USB sponge missile launchers.
  prefs: []
  type: TYPE_NORMAL
- en: Its primary audience is developers, but don't forget the wider audience that
    wants to use the software being developed. Seeing Jenkins regularly building with
    consistent views and a corporate look and feel builds confidence in the software's
    roadmap. This chapter includes recipes to help you reach this wider audience.
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating a coherent communication strategy, there are many Jenkins-specific
    details to configure. Here are a few that will be considered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Notifications**: Developers need to know quickly when something is broken.
    Jenkins has many plugins: you should select a few that suit the team''s ethos.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page decoration**: A page decorator is a plugin that adds content to each
    page. You can cheaply generate a corporate look and feel by adding your own style
    sheets and JavaScript.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overlaying Jenkins**: Using the Maven WAR plugin, you can overlay your own
    content on top of Jenkins. You can use this to add custom content and provision
    resources such as home pages, which will enhance the corporate look and feel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Optimize the views**: Front page views are lists of jobs that are displayed
    in a tab. The front page is used by the audience to quickly decide which job to
    select for review. Plugins expand the choice of view types and optimize information
    digestion. This potentially avoids the need to look further, saving precious time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drive by notification**: Extreme views that radiate information visually
    look great on large monitors. If you place a monitor by watering holes such as
    receptions or coffee machines, then passers-by will absorb the ebb and flow of
    job status changes. The view sublimely hints at the professionalism of your company
    and the stability of your product''s roadmap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keeping track of your audience**: If you are openly communicating then you
    should track usage patterns so that you can improve services. Consider connecting
    your Jenkins pages to Google Analytics or Piwik, an open source analytics application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Subversion repository**'
  prefs: []
  type: TYPE_NORMAL
- en: From this chapter onwards you will need either a Git or a subversion repository.
    This will allow you to use Jenkins in the most natural way possible. For the sake
    of brevity, we mention only subversion in the recipes, but it is easy to choose
    Git. If you do not already have a repository, there are a number of free or semi-free
    services you can sign up to on the Internet, for example, [http://www.straw-dogs.co.uk/09/20/6-free-svn-project-hosting-services/](http://www.straw-dogs.co.uk/09/20/6-free-svn-project-hosting-services/)
    or an example of a Git repository [https://bitbucket.org/](https://bitbucket.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can consider setting up subversion or Git locally. For Ubuntu
    installation instructions, visit [https://help.ubuntu.com/community/Subversion](https://help.ubuntu.com/community/Subversion)
    and [https://help.ubuntu.com/lts/serverguide/git.html](https://help.ubuntu.com/lts/serverguide/git.html).
  prefs: []
  type: TYPE_NORMAL
- en: Skinning Jenkins with the simple themes plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe modifies the Jenkins look and feel through the themes plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'The themes plugin is a page decorator: it decorates each page with extra HTML
    tags. The plugin allows you to upload a style sheet and JavaScript file. The files
    are then reachable through a local URL. Each Jenkins page is then decorated with
    HTML tags that use the URLs to pull in your uploaded files. Although straightforward,
    when properly crafted, the visual effects are powerful.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the themes plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Simple+Theme+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Simple+Theme+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Under the Jenkins `userContent` directory, create a file named `my.js` with
    the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `mycss.css` file in the Jenkins `userContent` directory with the following
    lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download and unpack the icon archive [http://sourceforge.net/projects/openiconlibrary/files/0.11/open_icon_library-standard-0.11.tar.bz2/download](http://sourceforge.net/projects/openiconlibrary/files/0.11/open_icon_library-standard-0.11.tar.bz2/download)
    and review the available icons. Alternatively, you can use the icon included in
    the download from the book's website ([www.packtpub.com/support](http://www.packtpub.com/support)).
    Add an icon to the `userContent` directory renaming to `camera.png`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit the Jenkins main configuration page: `/configure`. Under the **Theme**
    section, fill in the location of the CSS and JavaScript files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**URL of theme CSS**: `/userContent/myjavascript.css`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**URL of theme JS**: `/userContent/mycss.js`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the Jenkins home page and review your work, as shown in the following
    screenshot:![How to do it...](img/0082OS_04_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The simple themes plugin is a page decorator. It adds the following information
    to every page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The JavaScript writes a heading near the top of the generated pages with `id="test"`.
    Triggering the cascading style sheet rule through the CSS locator `#test` adds
    the camera icon to the background.
  prefs: []
  type: TYPE_NORMAL
- en: The picture dimensions are not properly tailored for the top of the screen;
    they are trimmed by the browser. This is a problem you can solve later by experimenting.
  prefs: []
  type: TYPE_NORMAL
- en: The second CSS rule is triggered for `main-table,` which is part of the standard
    front page generated by Jenkins. The full camera icon is displayed there.
  prefs: []
  type: TYPE_NORMAL
- en: On visiting other parts of Jenkins, you will notice that the camera icon looks
    out of context and is oversized. You will need time to modify the CSS and JavaScript
    to generate better effects. With care and custom code, you can skin Jenkins to
    fit your corporate image.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**CSS 3 quirks**'
  prefs: []
  type: TYPE_NORMAL
- en: There are quirks in the support for the various CSS standards between browser
    types and versions. For an overview, please visit [http://www.quirksmode.org/css/contents.html](http://www.quirksmode.org/css/contents.html).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are a few more things for you to consider.
  prefs: []
  type: TYPE_NORMAL
- en: CSS 3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'CSS 3 has a number of features. To draw a button around the header generated
    by the JavaScript, change the `#test` section of the CSS file to the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Using Firefox, the CSS rule generated the following button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![CSS 3](img/0082OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For the impatient, you can download a CSS 3 cheat sheet at the Smashing Magazine
    website: [http://coding.smashingmagazine.com/wp-content/uploads/images/css3-cheat-sheet/css3-cheat-sheet.pdf](http://coding.smashingmagazine.com/wp-content/uploads/images/css3-cheat-sheet/css3-cheat-sheet.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: Included JavaScript library frameworks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jenkins uses the YUI library [http://yuilibrary.com/](http://yuilibrary.com/).
    Decorated in each HTML page, the core YUI library (`/scripts/yui/yahoo/yahoo-min.js`)
    is pulled in ready for reuse. However, many web developers are used to jQuery.
    You can include this library as well by installing the jQuery plugin ([https://wiki.jenkins-ci.org/display/JENKINS/jQuery+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/jQuery+Plugin)).
    You can also consider adding your favorite JavaScript library to the Jenkins `/scripts`
    directory through a WAR overlay (see the next recipe).
  prefs: []
  type: TYPE_NORMAL
- en: Trust but verify
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With great power comes great responsibility. If only a few administrators maintain
    your Jenkins deployment, then you can most likely trust everyone to add JavaScript
    with no harmful side effects. However, if you have a large set of administrators
    who use a wide range of Java libraries, then your maintenance and security risks
    increase rapidly. Please consider your security policy and at least add the audit
    trail plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Audit+Trail+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Audit+Trail+Plugin))
    to keep track of actions.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Skinning and provisioning Jenkins using a WAR overlay* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Generating a home page* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skinning and provisioning Jenkins using a WAR overlay
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe describes how to overlay content onto the Jenkins WAR file. With
    a WAR overlay, you can change the Jenkins look and feel ready for corporate branding
    and content provisioning of home pages. The basic example of adding your own custom
    `favicon.ico` (the icon in your web browser's address bar) is used. It requires
    little effort to include more content.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins keeps its versions as dependencies in a Maven repository. You can use
    Maven to pull in the WAR file, expand it, add content, and then repackage. This
    enables you to provision resources such as images, home pages, the icon in the
    address bar called a `fav` icon, and `robots.txt` that affects how search engines
    look through your content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Be careful: using a WAR overlay will be cheap if the structure and the graphical
    content of Jenkins do not radically change over time. However, if the overlay
    does break the structure, then you might not spot this until you perform detailed
    functional tests.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also consider minimal changes through a WAR overlay, perhaps only changing
    `favicon.ico`, adding images and `userContent,` then using the simple theme plugin
    (see the preceding recipe) to do the styling.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create the directory named `ch4.communicating/war_overlay` for the files in
    this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Browse to the Maven repository [http://repo.jenkins-ci.org/releases/org/jenkins-ci/main/jenkins-war/](http://repo.jenkins-ci.org/releases/org/jenkins-ci/main/jenkins-war/)and
    review the Jenkins dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the following `pom.xml` file. Feel free to update to a newer Jenkins
    version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit a `favicon.ico` generation website such as [http://www.favicon.cc/](http://www.favicon.cc/).
    Following their instructions, create your own `favicon.ico`. Alternatively, use
    the example provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `favicon.ico` to the `src/main/webapp` location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the directory `src/main/webapp/META-INF` and add a file named `context.xml`
    with the following line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In your top-level directory, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the newly generated target directory, you will see the WAR file `overlay-1.437.war`.
    Review the content, verifying that you have modified `favicon.ico`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Optional] Deploy the WAR file to a local Tomcat server, verify, and browse
    the updated Jenkins server:![How to do it...](img/0082OS_04_03.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jenkins has its WAR files exposed through a central Maven repository. This allows
    you to pull in specific versions of Jenkins through standard Maven dependency
    management.
  prefs: []
  type: TYPE_NORMAL
- en: Maven uses conventions. It expects to find the content to overlay at `src/main/webapp`
    or `src/main/resources`.
  prefs: []
  type: TYPE_NORMAL
- en: The `context.xml` file defines certain behaviors for a web application such
    as database settings. In this example, the setting `logEffectiveWebXML` is asking
    Tomcat to log specific information on startup of the application ([http://tomcat.apache.org/tomcat-7.0-doc/config/context.html](http://tomcat.apache.org/tomcat-7.0-doc/config/context.html)).
    The setting was recommended in the Jenkins Wiki ([https://wiki.jenkins-ci.org/display/JENKINS/Installation+via+Maven+WAR+Overlay](https://wiki.jenkins-ci.org/display/JENKINS/Installation+via+Maven+WAR+Overlay)).
    The file is placed in the `META-INF` directory as Tomcat picks up the settings
    here without the need for a server restart.
  prefs: []
  type: TYPE_NORMAL
- en: The `<packaging>war</packaging>` tag tells Maven to use the WAR plugin for packaging.
  prefs: []
  type: TYPE_NORMAL
- en: You used the same version number in the name of the final overlayed WAR as the
    original Jenkins WAR version. It makes it easier to spot if the Jenkins version
    changes. This again highlights that using conventions aids readability and decreases
    the opportunity for mistakes. When deploying from your acceptance environment
    to production, you should remove the version number.
  prefs: []
  type: TYPE_NORMAL
- en: In the `pom.xml` file, you defined [http://repo.jenkins-ci.org/releases](http://repo.jenkins-ci.org/releases)
    as the repository in which to find Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: The Jenkins WAR file is pulled in as a dependency of type `war` and scope `runtime`.
    The runtime scope indicates that the dependency is not required for compilation,
    but is for execution. For more detailed information on scoping, review [http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope](http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope).
  prefs: []
  type: TYPE_NORMAL
- en: For further details about WAR overlays, review [http://maven.apache.org/plugins/maven-war-plugin/index.html](http://maven.apache.org/plugins/maven-war-plugin/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Avoiding work**'
  prefs: []
  type: TYPE_NORMAL
- en: To limit maintenance effort, it is better to install extra content rather than
    replacing content that might be used elsewhere or by third-party plugins.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a lot of details that you need to cover if you wish to fully modify
    the look and feel of Jenkins. The following sections mention some of the details.
  prefs: []
  type: TYPE_NORMAL
- en: Which types of content can you replace?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Jenkins server deploys to two main locations. The first location is the
    core application and the second is the workspace which stores information that
    changes. To gain a fuller understanding of the content, review the directory structure.
    A useful command in Linux is the tree command, which displays the directory structure.
    To install under Ubuntu, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'For the Jenkins Ubuntu workspace, using the following command generates a tree
    view of the workspace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**├── fingerprints** (directory to store checksums to uniquely identify files)'
  prefs: []
  type: TYPE_NORMAL
- en: '**├── jobs** (stores job configuration and build results)'
  prefs: []
  type: TYPE_NORMAL
- en: '**├── plugins** (where plugins are deployed and usually configured)'
  prefs: []
  type: TYPE_NORMAL
- en: '**├── tools** (where tools such as Maven and Ant are deployed)'
  prefs: []
  type: TYPE_NORMAL
- en: '**├── updates** (updates)'
  prefs: []
  type: TYPE_NORMAL
- en: '**├── userContent** (content made available under the URL `/userContent`)'
  prefs: []
  type: TYPE_NORMAL
- en: '**└── users** (user information displayed under the `/me` URL)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The default Ubuntu location of the web app is `/var/run/jenkins/war`. If you
    are running Jenkins from the command line, then the option for placing the web
    app is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**├── css** (location of Jenkins style sheets)'
  prefs: []
  type: TYPE_NORMAL
- en: '**├── executable** (used for running Jenkins from the command line)'
  prefs: []
  type: TYPE_NORMAL
- en: '**├── favicon.ico** (the icon we replaced in this recipe)'
  prefs: []
  type: TYPE_NORMAL
- en: '**├── help** (directory with help content)'
  prefs: []
  type: TYPE_NORMAL
- en: '**├── images** (graphics in different sizes)'
  prefs: []
  type: TYPE_NORMAL
- en: '**├── META-INF** (location for manifest file and `pom.xml` file that generated
    the WAR)'
  prefs: []
  type: TYPE_NORMAL
- en: '**├── robots.txt** (used to tell search engines where they are allowed to crawl)'
  prefs: []
  type: TYPE_NORMAL
- en: '**├── scripts** (JavaScript library location)'
  prefs: []
  type: TYPE_NORMAL
- en: '**├── WEB-INF** (main location for the servlet part of the web application)'
  prefs: []
  type: TYPE_NORMAL
- en: '**└── winstone.jar** (The servlet container: [http://winstone.sourceforge.net/](http://winstone.sourceforge.net/))'
  prefs: []
  type: TYPE_NORMAL
- en: Search engines and robots.txt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are adding your own custom content, such as user home pages, company
    contact information, or product details, then consider modifying the top-level
    `robots.txt` file. At present, it excludes search engines from all content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can find the full details of the structure of the `robots.txt` at [http://www.w3.org/TR/html4/appendix/notes.html#h-B.4.1.1](http://www.w3.org/TR/html4/appendix/notes.html#h-B.4.1.1).
  prefs: []
  type: TYPE_NORMAL
- en: Google uses richer structures that allow as well as disallow; see [https://developers.google.com/webmasters/control-crawl-index/docs/robots_txt?csw=1](https://developers.google.com/webmasters/control-crawl-index/docs/robots_txt?csw=1)
  prefs: []
  type: TYPE_NORMAL
- en: The following `robots.txt` allows access by the Google crawler to the directory
    `/userContent/corporate/`. It is an open question whether all web crawlers will
    honor the intent.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To help secure your Jenkins infrastructure, refer to recipes in [Chapter 2](ch02.html
    "Chapter 2. Enhancing Security"), *Enhancing Security*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Skinning Jenkins with the simple themes plugin* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Generating a home page* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a home page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The user's home page is a great place to express your organization's identity.
    You can create a consistent look and feel that express your team's spirit.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will explore the manipulation of home pages found under the`/user/userid`
    directory and configured by the user through the Jenkins`/me` URL.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A similar plugin worth reviewing is the Gravatar plugin. You can find the plugins
    home page at [https://wiki.jenkins-ci.org/display/JENKINS/Gravatar+plugin](https://wiki.jenkins-ci.org/display/JENKINS/Gravatar+plugin)
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the Avatar plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Avatar+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Avatar+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: Create a Jenkins account for the user `fakeuser`. You can configure Jenkins
    with a number of authentication strategies; the choice will affect how you create
    a user. One example is to use Project-based matrix tactics detailed in the *Reviewing
    project-based matrix tactics via a custom group script* recipe in [Chapter 2](ch02.html
    "Chapter 2. Enhancing Security"), *Enhancing Security*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will not get this recipe to work unless as a Jenkins administrator you configure
    the **Markup Formatter** under the **Configure Global Security** page as **Raw**.
    By doing so you allow anyone who can edit descriptions to inject their own script
    code. If you are a very trusting small team of developers, this may be an OK practice.
    However, in general consider this a security issue.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Browse to the location [http://en.wikipedia.org/wiki/Wikipedia:Public_domain_image_resources](http://en.wikipedia.org/wiki/Wikipedia:Public_domain_image_resources)
    for a list of public domain sources of images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for open source images at [http://commons.wikimedia.org/wiki/Main_Page](http://commons.wikimedia.org/wiki/Main_Page).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the image from [http://commons.wikimedia.org/wiki/File%3ACharles_Richardson_(W_H_Gibbs_1888).jpg](http://commons.wikimedia.org/wiki/File%3ACharles_Richardson_(W_H_Gibbs_1888).jpg)
    by clicking on the **Download Image File: 75 px** link, as shown in the following
    screenshot:![How to do it...](img/0082OS_04_04.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If the image is no longer available then choose another.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Log in to your sacrificial Jenkins server as `fakeuser` and visit their configuration
    page at `http://localhost:8080/user/fakeuser/configure`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upload the image under the **Avatar** section:![How to do it...](img/0082OS_04_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the URL `http://localhost:8080/user/fakeuser/avatar/image`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will now be able to use this known URL whenever you want to display your
    avatar.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following text to the user profile description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit the `/user/fakeuser` page. You will have a link in the description named
    **Switch**. If you click on the link, the **HELLO WORLD** content will appear
    or disappear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the user directory for the `fakeuser` to a directory `fakeuser2`, for example,
    `/var/lib/jenkins/user/fakeuser`. In the `config.xml` file found in the `fakeuser2`
    directory, change the value of the tag `<fullName>`from `fakeuser` to `fakeuser2`.
    Change the `<emailAddress>` value to `fakeuser2@dev.null`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in as `fakeuser2` with the same password as `fakeuser`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the home page `/user/fakeuser2`. Notice the update to the e-mail address.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Avatar plugin allows you to upload an image to Jenkins. The image's URL
    is in a fixed location. You can reuse it with the simple themes plugin to add
    content without using a WAR overlay.
  prefs: []
  type: TYPE_NORMAL
- en: There is a vast number of public domain and open source images freely available.
    Before generating your own content, it is worth reviewing resources on the Internet.
    If you create content, consider donating to an open source archive such as [archive.org](http://archive.org).
  prefs: []
  type: TYPE_NORMAL
- en: Unless you filter the description (refer to the *Exposing information through
    build descriptions* recipe in [Chapter 3](ch03.html "Chapter 3. Building Software"),
    *Building Software*) for HTML tags and JavaScript, you can use custom JavaScript
    or CSS animations to add eye candy to your personalized Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Your `fakeuser` information is stored in `/user/fakeuser/config.xml`. By copying
    it to another directory and slightly modifying the `config.xml` file you have
    created a new user account. The format is readable and easy to structure into
    a template for the creation of yet more accounts. You created the `fakeuser2`
    account to demonstrate this point.
  prefs: []
  type: TYPE_NORMAL
- en: By using the WAR overlay recipe and adding extra `/user/username` directories
    containing customized `config.xml` files, you can control Jenkins user populations,
    for example, from a central provisioning script or at the first login attempt,
    using a custom authorization script (refer to the *Using Script Realm authentication
    for provisioning* recipe in [Chapter 2](ch02.html "Chapter 2. Enhancing Security"),
    *Enhancing Security*).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can enforce consistency by using a template `config.xml`. This will enforce
    a wider uniform structure. You can set the initial password to a known value or
    empty. An empty password only makes sense if the time from creation of the user
    to the first login is very short. You should consider this bad practice, a problem
    waiting to happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The description is stored under the description tag. The content is stored
    as URL escaped text. For example,`<h1>Description</h1>` is stored as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: A number of plugins also store their configuration in the same `config.xml`.
    As you increase the number of plugins in your Jenkins server, which is natural
    as you get to know the product, you will need to occasionally review the completeness
    of your template.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Skinning Jenkins with the simple themes plugin* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Skinning and provisioning Jenkins using a WAR overlay* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reviewing project-based matrix tactics via a custom group script* recipe
    in [Chapter 2](ch02.html "Chapter 2. Enhancing Security"), *Enhancing Security*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating HTML reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The left-hand side menu of a jobs dashboard is valuable real estate. The developer's
    eyes naturally scan this area. This recipe describes how you can add a link from
    a custom HTML report to the menu, getting the report noticed more quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the HTML publisher plugin ([https://wiki.jenkins-ci.org/display/JENKINS/HTML+Publisher+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/HTML+Publisher+Plugin)).
    We assume that you have a subversion repository with the Packt code committed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a free-style software project and name it `ch4.html_report`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Source Code Management** section, click on **Subversion**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Modules** section, add `Repo/ch4.communicating/html_report` to **Repository
    URL**, where `Repo` is the URL to your subversion repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the **Post-build Actions** section, check **Publish HTML reports**. Add
    the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**HTML directory to archive**: `target/custom_report`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Index pages[s]**: `index.html`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Report title**: `My HTML Report`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tick the **Keep past HTML reports** checkbox
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job and review the left-hand side menu. You will now see a link to your
    report, as shown in the following screenshot:![How to do it...](img/0082OS_04_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your subversion repo contains an `index.html` file that is pulled into the workspace
    of the job. The plugin works as advertised and adds a link pointing to the HTML
    report. This allows your audience to efficiently find your custom-generated information.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The example report is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: It pulls in the main Jenkins style sheet `/css/style.css`.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible that when you update a style sheet in an application, you do
    not see the changes in your browser until you have cleaned your browser cache.
    Jenkins gets around this latency issue in a clever way. It uses a URL with a unique
    number that changes with each Jenkins version. For example, for the `css` directory
    you have two URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/static/uniquenumber/css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most Jenkins URLs use the later form. Consider doing so for your style sheets.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The unique number changes per version, so you will need to update the URL for
    each upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: When running the `site` goal in a Maven build, a local website is generated
    ([http://maven.apache.org/plugins/maven-site-plugin](http://maven.apache.org/plugins/maven-site-plugin)).
    This website has a fixed URL inside the Jenkins job that you can point at with
    the **My HTML Report** link. This brings documentation such as test results within
    easy reach.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Efficient use of views* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Saving screen space with the Dashboard View plugin* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Efficient use of views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins' addictive ease of configuration lends itself to creating a large number
    of jobs. This increases the volume of information exposed to developers. Jenkins
    needs to avoid chaos by utilizing browser space efficiently. One approach is to
    define minimal views. In this recipe, you will use the DropDown ViewsTabBar plugin.
    It removes views as tabs and replaces the tabs with one select box. This aids
    in quicker navigation. You will also be shown how to provision lots of jobs quickly
    using a simple HTML form generated by a script.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this recipe, you will be creating a large number of views that you may want
    to delete later. If you are using a virtual box image, consider cloning the image
    and deleting it after you have finished.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the DropDown ViewsTabBar plugin ([https://wiki.jenkins-ci.org/display/JENKINS/DropDown+ViewsTabBar+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/DropDown+ViewsTabBar+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Copy and paste the following Perl script into an executable file named `create.pl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an HTML file from the output of the Perl script, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In a web browser, as an administrator, log in to Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the job `Template1,` adding any details you wish. This is your template
    job that will be copied into many other jobs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Load `form.html` into the same browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on one of the **Create CH4.fake** buttons. Jenkins returns an error message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit **Configure Global Security** on `http://localhost:8080/configureSecurity`
    and uncheck the **Prevent Cross Site Request Forgery exploits** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on all of the **Create CH4.fake** buttons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the front page of Jenkins and verify that the jobs have been created and
    are based on the `Template1` job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a large number of views with a random selection of jobs. Review the front
    page, noting the chaos.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the configuration screen `/configure,` selecting **DropDownViewsTabBar
    provides a drop down menu for selecting views** in the **View Tab Bar** select
    box**.** In the subsection **DropDownViewsTabBar**, check the **Show Job Counts**
    box, as shown in the following screenshot:![How to do it...](img/0082OS_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button:![How to do it...](img/0082OS_04_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Jenkins, visit **Configure Global Security** `http://localhost:8080/configureSecurity`
    and check the **Prevent Cross Site Request Forgery exploits** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The form works as long as the bread crumbing security feature in Jenkins is
    turned off. The feature, when turned on, generates a random number that the form
    has to return when you submit. This allows Jenkins to know that the form is part
    of a valid conversation with the server. The HTTP status error generated is in
    the 4xx range which implies that the client input is invalid. If Jenkins returned
    a 5xx error then that would imply a server error. We therefore had to turn the
    feature off when submitting our own data. We do not recommend this in a production
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have logged in to Jenkins as an administrator, you can create jobs.
    You can do this through the GUI or by sending POST information. In this recipe,
    we copied a job named `Template1` to new jobs starting with the name `CH4.fake`,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The POST variables you used were `name` for the name of the new job, and `from`
    for the name of your template job. The URL for the POST action is `/createItem?mode=copy`.
  prefs: []
  type: TYPE_NORMAL
- en: To change the hostname and port number, you will have to update the `$host`
    variable found in the Perl script.
  prefs: []
  type: TYPE_NORMAL
- en: To delete a job, the Perl script generated forms with actions pointing to `/job/Jobname/doDelete`
    (for example, `/job/CH4.fake.1/doDelete`). No extra variables were needed.
  prefs: []
  type: TYPE_NORMAL
- en: To increase the number of form entries, you can change the variable `$end` from
    `20`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jenkins uses a standard library, Stapler ([http://stapler.kohsuke.org/what-is.html](http://stapler.kohsuke.org/what-is.html)),
    to bind services to URLs. Plugins also use Stapler. When you install plugins,
    the number of potential actions also increases. This means that you can activate
    a lot of actions through HTML forms similar to this recipe. You will discover
    in [Chapter 7](ch07.html "Chapter 7. Exploring Plugins"), *Exploring Plugins*,
    that writing binding code to Stapler requires minimal effort.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Saving screen space with the Dashboard View plugin* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving screen space with the Dashboard View plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the *Efficient use of views* recipe, you discovered that you can save horizontal
    tab space using the Views plugin. In this recipe, you will use the Dashboard View
    plugin to condense the use of the horizontal space. Condensing the horizontal
    space aids in assimilating information efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: The Dashboard View plugin allows you configure areas of a view to display specific
    functionality—for example, a grid view of the jobs or an area of the view that
    shows the subset of jobs failing. The user can drag-and-drop the areas around
    the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The developers have made the dashboard easily extensible, so expect more choices
    later.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the Dashboard View plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Dashboard+View](https://wiki.jenkins-ci.org/display/JENKINS/Dashboard+View)).
    Either create a few jobs by hand or use the HTML form that provisioned jobs in
    the last recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a Jenkins administrator, log in to the home page of your Jenkins instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new view by clicking on the **+** sign in the second tab at the top
    of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **Dashboard** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Jobs** sections, select a few of your fake jobs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the **Dashboard Portlet** as the default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK**. You will now see a blank view screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left-hand side menu, click on the **Edit View** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Dashboard Portlets** section of the view, select the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add Dashboard Portlet to the top of the view: **- Jobs Grid**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add Dashboard Portlet to bottom of the view: **- Unstable Jobs**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: At the bottom of the configuration screen, click on the **OK** button. You will
    now see the **Dashboard** view:![How to do it...](img/0082OS_04_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can expand or contract the areas of functionality with the arrow icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Dashboard plugin divides up the screen into areas. During dashboard configuration,
    you choose the jobs grid and the unstable jobs portlets. Other dashboard portlets
    include a jobs list, latest builds, slave statistics, test statistics chart or
    grid, and the test trend chart. There will be more choices as the plugin matures.
  prefs: []
  type: TYPE_NORMAL
- en: The **Job grid** portlet saves space compared to other views, as the density
    of jobs displayed is high.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are also using the Many **Views** tab (see the preceding recipe) there
    is a little glitch. When you click on the dashboard tag, the original set of views
    is displayed rather than the select box.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Dashboard plugin provides a framework for other plugin developers to create
    dashboard views. One example of this type of usage is the Project Statistics plugin
    ([https://wiki.jenkins-ci.org/display/JENKINS/Project+Statistics+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Project+Statistics+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating HTML reports* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Efficient use of views* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making noise with HTML5 browsers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe describes how to send a custom sound to a Jenkins user's browser
    when an event occurs, such as a successful build. You can also send sound messages
    at arbitrary times. Not only is this good for developers who enjoy being shouted
    at, sang at by famous actors, and so on, but also for system administrators who
    are looking for a computer in a large server farm.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the Jenkins sounds plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Sounds+plugin](https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Sounds+plugin)).
    Make sure that you have a compliant web browser installed, such as a current version
    of Firefox or Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more details of HTML5 compliancy in browsers, consider reviewing: [http://en.wikipedia.org/wiki/Comparison_of_layout_engines_%28HTML5%29](http://en.wikipedia.org/wiki/Comparison_of_layout_engines_%28HTML5%29).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log in as a Jenkins administrator and visit the **Configure System** screen
    `/configure`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Jenkins Sound** section, check **Play through HTML5 Audio enabled
    Browser**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If Jenkins has problems finding the sound archive with an error message such
    as `File not found 'file:/C:/Users/Alan/.jenkins/jar:file:/C:/Users/Alan/.jenkins/plugins/sounds/WEB-INF/lib/classes.jar/sound-archive.zip`',
    then unzip the `classes.jar` file and move the `sounds-archive.zip` file to the
    same directory mentioned in the error message. Finally, point the configuration
    to the archive, for example, `file:/C:/Users/Alan/.jenkins/plugins/sounds/WEB-INF/lib/sound-archive.zip`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Job creation** link found on the Jenkins home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **New Job** with the **Job name** `ch4.sound`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Build a free-style software project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Post-build Actions** section, check the **Jenkins Sounds** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add two sounds: **EXPLODE** and **doh**:![How to do it...](img/0082OS_04_11.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Build Now** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On success, your browser will play the `EXPLODE` wav file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit your job so that it fails, for example, by adding a non-existent source
    code repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the job again. On failure, your web browser will play the `doh` wav file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have successfully configured your job to play different sounds based on
    the success or failure of the build.
  prefs: []
  type: TYPE_NORMAL
- en: You can refine how the plugin reacts further by configuring which event transitions
    will trigger a sound, for example, if the previous build result was a failure
    and the current build result is a success. This is defined in the **For previous
    build result** set of checkboxes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The plugin works as a page decorator. It adds the following JavaScript that
    asynchronously polls for new sounds. Your browser is doing the majority of the
    work, freeing server resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The sound plugin also allows you to stream arbitrary sounds to connected web
    browsers. Not only is this useful for practical jokes and motivational speeches
    directed at your distributed team, you can also perform useful actions such as
    a 10-minute warning alert before restarting a server.
  prefs: []
  type: TYPE_NORMAL
- en: You can find some decent sound collections at [http://www.archive.org/details/opensource_audio](http://www.archive.org/details/opensource_audio).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can find a copy of the One Laptop per Child music library
    at [http://www.archive.org/details/OpenPathMusic44V2](http://www.archive.org/details/OpenPathMusic44V2).
    Within the collection, you will discover `shenai.wav`. First, add the sound somewhere
    on the Internet where it can be found. A good place is the Jenkins `userContent`
    directory. To play the sound on any connected web browser, you will need to visit
    the trigger address (replacing `localhost:8080` with your own address):'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/sounds/playSound?src=http://localhost:8080/userContent/shenai.wav`'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Keeping in contact with Jenkins through Firefox* recipe in [Chapter 1](ch01.html
    "Chapter 1. Maintaining Jenkins"), *Maintaining Jenkins*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An extreme view for reception areas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Agile projects emphasize the role of communication over the need to document.
    **Information radiators** aid in returning feedback quickly. Information radiators
    have two main characteristics: they change over time and the data presented is
    easy to digest.'
  prefs: []
  type: TYPE_NORMAL
- en: The eXtreme Feedback Panel plugin is one example of an information radiator.
    It is a highly visual Jenkins view. If the layout is formatted consistently and
    displayed on a large monitor, it is ideal for the task. Consider this also as
    a positive advertisement of your development process. You can display behind your
    reception desk or in a well-visited social area such as near the coffee machine
    or project room.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will add the eXtreme Feedback Panel plugin and modify its
    appearance through HTML tags in the description.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the eXtreme Feedback Panel plugin ([https://wiki.jenkins-ci.org/display/JENKINS/eXtreme+Feedback+Panel+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/eXtreme+Feedback+Panel+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a job with a descriptive name such as `Blackboard Report Pro Access`
    and add the following description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a new view (`/newView`) named `eXtreme`. Check the **eXtremeFeedBack
    Panel** and then click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select 6-24 already created jobs including the one previously created in this
    recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the number of columns as **2**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the refresh time in seconds as **20**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Show Job descriptions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Experiment with the settings (especially the pixel size of the fonts). Optimizing
    the view depends on the monitors used and the distance from the monitor that the
    audience view at, as shown in the following screenshot:![How to do it...](img/0082OS_04_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting up and running this information radiator was easy. The results deliver
    a beautifully rendered view of the dynamics of your software process.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the refresh rate to 20 seconds is debatable. A long delay between updates
    dulls the viewer's interest.
  prefs: []
  type: TYPE_NORMAL
- en: You have written one description that is partially formatted in the extreme
    view, but HTML escaped in the jobs configuration page and elsewhere in Jenkins.
    You can see that the information area is easier to digest than the other projects.
    This highlights the need to write consistent descriptions that follow in-house
    conventions, below a certain length to fit naturally on the screen. A longer,
    more descriptive name for a job helps the viewer understand the job's context
    better.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A short cut to configuring views is through the URL `http://localhost:8080/view/Jobname/configure`,
    replacing any spaces in `Jobname` with `%20`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Information radiators are fun and take a rich variety of shapes and forms. From
    different views displayed in large monitors, to USB sponge missile firing and
    abuse from the voices of famous actors (see the *Making noise with HTML5 browsers*
    recipe).
  prefs: []
  type: TYPE_NORMAL
- en: 'A number of example electronic projects worth exploring in Jenkins are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Lava Lamps**: [https://wiki.jenkins-ci.org/display/JENKINS/Lava+Lamp+Notifier](https://wiki.jenkins-ci.org/display/JENKINS/Lava+Lamp+Notifier)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**USB missile launcher**: [https://github.com/codedance/Retaliation](https://github.com/codedance/Retaliation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Traffic lights**: [http://code.google.com/p/hudsontrafficlights/](http://code.google.com/p/hudsontrafficlights/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember, let's be careful out there.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Saving screen space with the Dashboard View plugin* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Making noise with HTML5 browsers* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile presentation using Google Calendar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins plugins can push build history to different well-known social media
    services. Modern Android or iOS telephones have preinstalled applications for
    both these services, lowering the barrier to adoption. In this recipe, we will
    configure Jenkins to work with Google Calendar.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download and install the Google Calendar plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Google+Calendar+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Google+Calendar+Plugin)).
    Make sure you have a test user account for Gmail.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log in to Gmail and visit the **Calendar** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new calendar under the **My Calendars** section by clicking on the
    **Add** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the calendar name `Test for Jenkins`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create Calendar**. By default, the new calendar is private. Keep
    it private for the time being.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **My Calendars** section, click on the down icon next to **Test for
    Jenkins**. Select the option **Calendar settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the XML button **Copy the link location**:![How to do it...](img/0082OS_04_13a.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the **Embed this calendar** section. It describes how to add your calendar
    to a web page. Cut and paste the supplied code to an empty HTML page. Save and
    view in a web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to Jenkins as an administrator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new job named `Test_G`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Post build** section, check **Publish job status to Google Calendar**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the calendar details you copied from the XML button to the **Calendar URL**
    text box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add your Gmail login name and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Your Gmail credentials will be stored in the `server.xml` file in plain text.
    Unless your server is properly secured, this is not recommended.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_04_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build your job, making sure it succeeds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to Gmail. Visit the **Calendar** page. You will now see the build's success
    has been published, as shown in the following screenshot:![How to do it...](img/0082OS_04_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By creating a calendar in Google and using just three configuration settings,
    you have exposed selected Jenkins jobs to Google Calendar. With the same amount
    of configuration, you can connect most modern smartphones and tablets to the calendar.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Jenkins has a credentials manager that you can find at `http://localhost:8080/credential-store/.`
    The credential manager works with a number of plugins; however, at the time of
    writing not with the Google Calendar plugin. For the most up-to-date compatibility
    information visit: [https://wiki.jenkins-ci.org/display/JENKINS/Credentials+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Credentials+Plugin)'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Under the Jenkins workspace in the plugins directory, you will find an HTML
    file for the Google plugins configuration help `/plugins/gcal/help-projectConfig.html`
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the contents with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'After restarting the Jenkins server, visit the plugin configuration `/configure`.You
    will now see the new content, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/0082OS_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This example is an anti-pattern. If you need to change content for local needs,
    then it is much better to work with the community, adding to the Jenkins SCM that
    everyone can see and improve.
  prefs: []
  type: TYPE_NORMAL
- en: You will be told immediately that your content is not internationalized. It
    needs to be translated into the languages that Jenkins supports natively. Luckily,
    at the bottom of every Jenkins page, there is a link that volunteers can use to
    upload translations. The translation requires minimal startup effort and is an
    easy way to start with an open source project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more development details on how to use property files for internationalization
    in Jenkins, read [https://wiki.jenkins-ci.org/display/JENKINS/Internationalization](https://wiki.jenkins-ci.org/display/JENKINS/Internationalization).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Mobile apps for Android and iOS* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile apps for Android and iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of rich mobile apps for notification of Jenkins job statuses.
    This recipe points you to their home pages, so that you can select your favorite.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need a Jenkins instance reachable from the Internet or use [http://ci.jenkins-ci.org/](http://ci.jenkins-ci.org/),
    an excellent example of best practices. We also assume that you have a mobile
    device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As an administrator, visit the **Configure System** (`/configure`) screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the Jenkins URL; if it is pointing to `localhost,` change it so that
    your server links can be reached from the Internet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visit the following app pages and if compatible install and use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**JenkinsMobi** ([http://www.jenkins-ci.mobi](http://www.jenkins-ci.mobi))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blamer** ([http://www.androidzoom.com/android_applications/tools/blamer_bavqz.html](http://www.androidzoom.com/android_applications/tools/blamer_bavqz.html)
    and [https://github.com/mhussain/Blamer](https://github.com/mhussain/Blamer))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jenkins Mood widget** ([https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Mood+monitoring+widget+for+Android](https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+Mood+monitoring+widget+for+Android))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jenkins Mobile Monitor** ([http://www.androidzoom.com/android_applications/tools/jenkins-mobile-monitor_bmibm.html](http://www.androidzoom.com/android_applications/tools/jenkins-mobile-monitor_bmibm.html))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hudson Helper** ([http://wiki.hudson-ci.org/display/HUDSON/Hudson+Helper+iPhone+and+iPod+Touch+App](http://wiki.hudson-ci.org/display/HUDSON/Hudson+Helper+iPhone+and+iPod+Touch+App))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hudson2Go Lite** ([http://www.androidzoom.com/android_applications/tools/hudson2go-lite_nane.html](http://www.androidzoom.com/android_applications/tools/hudson2go-lite_nane.html))'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On your mobile device, search Google Marketplace or iTunes and install any new
    Jenkins apps that are free and have positive user recommendations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the apps pull in information using the RSS feeds from Jenkins such as
    `/rssLatest` and `/rssFailed` and then load the linked pages through a mobile
    web browser. Unless the Jenkins URL is properly configured, the links will break
    and `404` `page not found` errors will be returned by your browser.
  prefs: []
  type: TYPE_NORMAL
- en: You will soon notice there is a delicate balance between the refresh rate of
    your app potentially generating too many notifications, versus receiving timely
    information.
  prefs: []
  type: TYPE_NORMAL
- en: The **JenkinsMobi** application runs in both Android and iOS operating systems.
    It gathers its data using the remote API with XML ([http://www.slideshare.net/lucamilanesio/jenkinsmobi-jenkins-xml-api-for-mobile-applications](http://www.slideshare.net/lucamilanesio/jenkinsmobi-jenkins-xml-api-for-mobile-applications))
    rather than the more raw RSS feeds. This choice allowed the app writers to add
    a wide range of features, making it arguably the most compelling app in the collection.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are a few more things for you to consider.
  prefs: []
  type: TYPE_NORMAL
- en: Android 1.6 and Hudson apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jenkins split off from the source code of Hudson due to an argument about trademarking
    the Hudson name ([http://en.wikipedia.org/wiki/Jenkins_%28software%29](http://en.wikipedia.org/wiki/Jenkins_%28software%29)).
    Most developers moved over to working with Jenkins. This left much of the third-party
    Hudson code either less supported or rebranded to Jenkins. However, Hudson and
    Jenkins have a large common base, including the content of the RSS feeds. This
    may well diverge in detail over time. For older Android versions, such as Android
    1.6, you will not see any Jenkins apps in the Google Marketplace. Try looking
    for Hudson apps instead. They mostly work on Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Virtualbox and the Android x86 project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a number of options for running Android apps. The easiest is to download
    through the Google Marketplace onto a mobile device. However, if you want to play
    with Android apps in a sand box on your PC, consider downloading the Android SDK
    ([http://developer.android.com/sdk/index.html](http://developer.android.com/sdk/index.html))
    and use an emulator and a tool such as `adb` ([http://developer.android.com/guide/developing/tools/adb.html](http://developer.android.com/guide/developing/tools/adb.html))
    to upload and install apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also run a virtual machine through VirtualBox, VMware Player, and so
    on, and install an x86 image ([http://www.android-x86.org](http://www.android-x86.org)).
    A significant advantage of this approach is the raw speed of the Android OS, plus
    the ability to save the virtual machine in a specific state. However, you will
    not always get Google Marketplace preinstalled. You will either have to find particular
    apps'' `.apk` file yourself or add other marketplaces such as **Slide me** ([http://m.slideme.org](http://m.slideme.org)).
    Unfortunately, secondary marketplaces give you much less choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Virtualbox and the Android x86 project](img/0082OS_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Windows Android emulator [http://bluestacks.com/home.html](http://bluestacks.com/home.html)
    shows great promise. Not only is it an emulator, it also provides a cloud service
    to move apps from your mobile device into and out of the emulation. This promises
    to be an efficient approach for development. However, if you do choose to use
    this emulator, please thoroughly review the license you agree to on installation.
    BlueStacks wishes to obtain detailed information about your system to help improve
    their product.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Mobile presentation using Google Calendar* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowing your audience with Google Analytics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have a policy of pushing your build history or other information such
    as home pages to the public, then you will want to know viewer habits. One approach
    is to use Google Analytics. With Google, you can watch in real time as visitors
    arrive at your site. The detailed reporting mentions things such as overall volume
    of traffic, browser types, (for example, if mobile apps are hitting your site),
    entry points, and country origins. This is particularly useful as your product
    reaches key points in its roadmap and you want to gain insight into customer interest.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will create a Google Analytics account and configure tracking
    in Jenkins. You will then watch traffic live.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the Google Analytics plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Google+Analytics+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Google+Analytics+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are not the owner of your Jenkins URL, please ask for permission first
    before creating a Google Analytics profile.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log in with your Gmail account to Google Analytics ([http://www.google.com/analytics/](http://www.google.com/analytics/)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the details of the **Create New Account** page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Account Name**: My Jenkins Server'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Website Name**: Jenkins Server X'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Website URL**: This is the same as the Jenkins URL in the `/configure` screen
    of Jenkins.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reporting Time zone**: Enter the correct value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **Data Sharing Settings** | **Sharing Setting** | **Do not share my Google
    Analytics data**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Get Tracking ID**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **I Accept** for the **Google Analytics Terms of Service Agreement**
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Create Account**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are now in the **Accounts** page for your newly created profile. Copy the
    **TrackingID,** which will look something like `UA-121212121212121-1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a second browser and log in as an administrator to Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Jenkins Configure System** screen (`/configure`), add the **Profile
    ID** that you copied from the Google Analytics **Web Property ID** and set the
    **Domain Name** equal to your Jenkins URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the home page of Jenkins so that tracking is triggered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to Google Analytics, and you should still be on the **Tracking code**
    tab. Click on **Save** at the bottom of the page. You will now see that the warning
    **Tracking not installed** has disappeared.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The plugin decorates each Jenkins page with a JavaScript page tracker that
    includes the domain and profile ID. The JavaScript is kept fresh by being pulled
    in from the Google Analytics hosts, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Google Analytics has the ability to drill into the details of your web usage
    thoroughly. Consider browsing Jenkins and reviewing the traffic generated through
    the real-time reporting feature.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google regularly updates its analytics services. If you notice any changes then
    the help page for analytics will document them ([https://support.google.com/analytics](https://support.google.com/analytics)).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The open source version of Google Analytics is Piwik ([http://piwik.org/](http://piwik.org/)).
    You can set up a server locally and use the equivalent Jenkins plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Piwik+Analytics+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Piwik+Analytics+Plugin))
    to generate statistics. This has the advantage of keeping your local data usage
    under your control.
  prefs: []
  type: TYPE_NORMAL
- en: As you would expect, the Piwik plugin is a page decorator injecting in a similar
    way to JavaScript as the Google Analytics plugin.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Generating a home page* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplifying powerful visualizations using the R plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: R is a popular programming language for statistics [http://en.wikipedia.org/wiki/R_(programming_language)](http://en.wikipedia.org/wiki/R_(programming_language)).
    It has many hundreds of extensions and has a powerful set of graphical capabilities.
    In this recipe, we will show you how to use the graphical capabilities of R within
    your Jenkins jobs and then point you to some excellent starter resources.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a full list of plugins that improve the UI of Jenkins, including Jenkins
    graphical capabilities, visit [https://wiki.jenkins-ci.org/display/JENKINS/Plugins#Plugins-UIplugins](https://wiki.jenkins-ci.org/display/JENKINS/Plugins#Plugins-UIplugins).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the R plugin ([https://wiki.jenkins-ci.org/display/JENKINS/R+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/R+Plugin)).
    Review the R installation documentation ([http://cran.r-project.org/doc/manuals/r-release/R-admin.html](http://cran.r-project.org/doc/manuals/r-release/R-admin.html)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From the command line install the R language:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Review the available R packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a free-style job with the name `ch4.powerfull.visualizations`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Build** section, under **Add build step**, select **Execute R script**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Script** text area add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Build Now** icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Beneath **Build History**, click on the **Workspace** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the generated graphics by clicking on the links **freq_1.pdf**, **pie_1.pdf**,
    and **scatter_1.pdf**, as shown in the following screenshot:![How to do it...](img/0082OS_04_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot is a histogram of the values from the random data generated
    by the R script during the build process. The data simulates class sizes within
    a large project.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Another view is a pie chart. The fake data represents the number of failed jobs
    for each day of the week. If you plot this against your own values, you might
    see particularly bad days, such as the day before or after the weekend. This might
    have implications for how developers work, or how motivation is distributed through
    the week.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the job and review the **Workspace**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Console Output**. You will see output similar to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click on **Back to Proj**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Workspace**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With a few lines of R code, you have generated three different well-presented
    PDF graphs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The R plugin ran a script as part of the build. The script printed out the
    `WORKSPACE` and other Jenkins environment variables to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, a filename is set with the build number appended to the string `pie_`.
    This allows the script to generate a different filename each time it is run, as
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The script now opens output to the location defined in the `filename` variable,
    through the command `pdf(file=filename)`. By default, the output directory is
    the job's workspace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we define fake data for the graph, representing the number of failed
    jobs on any given day of the week. Notice that in the simulated world Friday is
    a bad day:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Plot a pie graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'For the second graph, we generated 10,000 pieces of random data within a normal
    distribution. The fake data represents the number of lines of active code that
    ran for a given job, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The `hist` command generates a frequency plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The third graph is a scatter plot with 3,000 data points generated at random
    within a normal distribution. This represents a typical sampling process, such
    as the number of potential defects found using Sonar or FindBugs, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: We will leave it as an exercise for the reader to link real data to the graphing
    capabilities of R.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are a couple more points for you to think about.
  prefs: []
  type: TYPE_NORMAL
- en: RStudio or StatET
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A popular IDE for R is **RStudio** ([http://www.rstudio.com/](http://www.rstudio.com/)).
    The open source edition is free. The feature set includes a source code editor
    with code completion and syntax highlighting, integrated help, solid debugging
    features, and a slew of other features, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![RStudio or StatET](img/0082OS_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An alternative for the Eclipse environment is the StatET plugin ([http://www.walware.de/goto/statet](http://www.walware.de/goto/statet)).
  prefs: []
  type: TYPE_NORMAL
- en: Quickly getting help
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first place to start to learn R is by typing `help.start()` from the R console.
    The command launches a browser with an overview of the main documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want descriptions of R commands then typing `?` before a command generates
    detailed help documentation. For example, in the recipe we looked at the use of
    the `rnorm` command. Typing `?rnorm` produces documentation similar to:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Normal Distribution**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Density, distribution function, quantile function and random generation for
    the normal distribution with mean equal to mean and standard deviation equal to
    sd.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Usage**'
  prefs: []
  type: TYPE_NORMAL
- en: '**dnorm(x, mean = 0, sd = 1, log = FALSE)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**rnorm(n, mean = 0, sd = 1)**'
  prefs: []
  type: TYPE_NORMAL
- en: For more information
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The R language is well documented. Here are a number of useful resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Camp** ([https://www.datacamp.com/courses](https://www.datacamp.com/courses)):
    This is a great collection of free online courses including a basic introduction
    and a more detailed course on statistics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**R programming for those coming from other languages** ([http://www.johndcook.com/blog/r_language_for_programmers/](http://www.johndcook.com/blog/r_language_for_programmers/)):
    This is a quick introduction to potential gotchas for new programmers with experience
    in other languages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**R style guide by Google** ([https://google-styleguide.googlecode.com/svn/trunk/Rguide.xml](https://google-styleguide.googlecode.com/svn/trunk/Rguide.xml)):
    If you follow these guidelines, your code will be consistent and readable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MOOCs**: There are a number of online courses available from Edx, Coursera,
    and so on. It is well worth reviewing their listings for relevance. For the most
    up-to-date listings of Coursera courses, visit [https://www.coursera.org/courses](https://www.coursera.org/courses).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Two-minute tutorials** ([http://www.twotorials.com/](http://www.twotorials.com/)):
    This contains many two-minute YouTube examples of what you can do in R.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wiki books on R** ([http://en.wikibooks.org/wiki/Category:R_Programming](http://en.wikibooks.org/wiki/Category:R_Programming)):
    This has great articles and examples assembled together in one place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Analyzing project data with the R plugin* recipe in [Chapter 5](ch05.html
    "Chapter 5. Using Metrics to Improve Quality"), *Using Metrics to Improve Quality*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
