["```\n    sudo passwd\n\n    ```", "```\n    sudo apt-get update\n    sudo apt-get upgrade\n\n    ```", "```\n    sudo apt-get install dkms\n\n    ```", "```\n    sudo apt-get install jenkins\n\n    ```", "```\n    sudo /etc/init.d/vboxadd setup\n\n    ```", "```\n    sudo gedit /etc/group\n    vboxsf:x:1001:Jenkins\n\n    ```", "```\n    sudo gedit /etc/default/jenkins\n    JENKINS_HOME=/media/sf_workspacej\n\n    ```", "```\nSEVERE: Cannot perform a backup. Please be sure jenkins/hudson has write privileges in the configured backup path {0}.\n\n```", "```\n#!/usr/bin/perl\nuse File::Find;\nmy $content = \"/var/lib/jenkins\";\nmy $exclude_pattern = '^.*\\.(war)|(class)|(jar)$';\nfind( \\&excluded_file_summary, $content );\nsubexcluded_file_summary {\n  if ((-f $File::Find::name)&&( $File::Find::name =~/$exclude_pattern/)){\nprint \"$File::Find::name\\n\";\n  }\n}\n```", "```\nsudo /etc/init.d/jenkins restart\n\n```", "```\n    <numExecutors>3</numExecutors>\n    ```", "```\n    <?xml version='1.0' encoding='UTF-8'?>\n    <org.jvnet.hudson.plugins.thinbackup.ThinBackupPluginImpl plugin=\"thinBackup@1.7.4\">\n    <fullBackupSchedule>1 0 * *  7</fullBackupSchedule>\n    <diffBackupSchedule>1 1 * * *</diffBackupSchedule>\n    <backupPath>/data/jenkins/backups</backupPath>\n    <nrMaxStoredFull>61</nrMaxStoredFull>\n    <excludedFilesRegex></excludedFilesRegex>\n    <waitForIdle>false</waitForIdle>\n    <forceQuietModeTimeout>120</forceQuietModeTimeout>\n    <cleanupDiff>true</cleanupDiff>\n    <moveOldBackupsToZipFile>true</moveOldBackupsToZipFile>\n    <backupBuildResults>true</backupBuildResults>\n    <backupBuildArchive>true</backupBuildArchive>\n    <backupUserContents>true</backupUserContents>\n    <backupNextBuildNumber>true</backupNextBuildNumber>\n    <backupBuildsToKeepOnly>true</backupBuildsToKeepOnly>\n    </org.jvnet.hudson.plugins.thinbackup.ThinBackupPluginImpl>\n    ```", "```\n<org.jvnet.hudson.plugins.thinbackup.ThinBackupPluginImpl>\n```", "```\n<garbage>yeuchblllllllaaaaaa</garbage>\n```", "```\n    sudo apt-get install nginx\n\n    ```", "```\n    Usage: nginx {start|stop|restart|reload|force-reload|status|configtest|rotate|upgrade}\n\n    ```", "```\n    * nginx is running\n\n    ```", "```\n    sudo gedit /usr/share/nginx/html/index.html.\n\n    ```", "```\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n    access_log /var/log/nginx/access.log;\n    error_log /var/log/nginx/error.log;\n    ```", "```\n    listen 8000 default_server;\n    listen [::]:8000 default_server ipv6only=on;\n    ```", "```\n    sudo /etc/init.d/nginx configtest\n    * Testing nginx configuration   [ OK ]\n\n    ```", "```\n    sudo /etc/init.d/nginx restart\n    * Restarting nginx nginx\n\n    ```", "```\naccess_log /var/log/nginx/access.log;\nerror_log /var/log/nginx/error.log;\n```", "```\naccess_log /var/log/nginx/HOST_PORT_access.log;\nerror_log /var/log/nginx/HOST_PORT_error.log;\n```", "```\n    proxy_redirect          off;\n    proxy_set_header        Host            $host;\n    proxy_set_header        X-Real-IP       $remote_addr;\n    proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n    client_max_body_size    10m;\n    client_body_buffer_size 128k;\n    proxy_connect_timeout   90;\n    proxy_send_timeout      90;\n    proxy_read_timeout      90;\n    proxy_buffers           32 4k;\n    ```", "```\n    server {\n    listen   80;\n    server_name  localhost;\n    access_log  /var/log/nginx/jenkins _8080_proxypass_access.log;\n    error_log  /var/log/nginx/jenkins_8080_proxypass_access.log;\n\n    location / {\n    proxy_pass      http://127.0.0.1:7070/;\n    include         /etc/nginx/proxy.conf;\n            }\n    }\n    ```", "```\n    * Testing nginx configuration   [ OK ]\n\n    ```", "```\n    sudo /etc/init.d/nginx restart\n\n    ```", "```\n    127.0.0.1 - - [25/Jun/2014:17:50:50 +0200] \"GET / HTTP/1.1\" 499 0 \"-\" \"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:30.0) Gecko/20100101 Firefox/30.0\"\n\n    ```", "```\n    location / {\n    proxy_pass      http://127.0.0.1:8080/;\n    include         /etc/nginx/proxy.conf;\n            }\n    ```", "```\n    sudo /etc/init.d/nginx configtest\n    * Testing nginx configuration   [ OK ]\n\n    ```", "```\n    sudo /etc/init.d/nginx restart\n\n    ```", "```\nserver {\nlisten   80;\nserver_name  localhost;\n```", "```\naccess_log  /var/log/nginx/Jenkins_8080_proxypass_access.log;\nerror_log  /var/log/nginx/jenkins_8080_proxypass_access.log;\n```", "```\nlocation / {\n```", "```\n  proxy_pass      http://127.0.0.1:8080/;\n```", "```\ninclude         /etc/nginx/proxy.conf;\n```", "```\nproxy_set_header        X-Real-IP       $remote_addr;\nproxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n```", "```\nclient_max_body_size    10m;\nclient_body_buffer_size 128k;\nproxy_connect_timeout   90;\nproxy_send_timeout      90;\nproxy_read_timeout      90;\nproxy_buffers           32 4k;\n```", "```\njava –jar jenkins.war –httpsport=8443 –httpPort=-1\n\n```", "```\nsudo –jar jenkins.war  --httpPort=80 --httpListenAddress=127.0.0.2\n\n```", "```\nserver {\nlisten 80;\nreturn 301 https://$host$request_uri;\n}\n```", "```\nserver {\nlisten 443;\nserver_name localhost;\n\nssl on;\nssl_certificate /etc/nginx/ssl/server.crt;\nssl_certificate_key /etc/nginx/ssl/server.key;\n```", "```\nlocation / {\nproxy_pass              http://127.0.0.1:8080;\n```", "```\n    error /no tests/\n    ```", "```\n    error /HARD_LIMIT/\n    warn /SOFT_LIMIT/\n    ```", "```\n    use File::Find;\n    my $content = \"/var/lib/jenkins\";\n    if ($#ARGV != 1 ) {\n      print \"[MISCONFIG ERROR] usage: hard soft (in Bytes)\\n\";\n      exit(-1);\n    }\n    my $total_bytes=0;\n    my $hard_limit=$ARGV[0];\n    my $soft_limit=$ARGV[1];\n\n    find( \\&size_summary, $content );\n\n    if ($total_bytes>= $hard_limit){\n    print \"[HARD_LIMIT ERROR] $total_bytes>= $hard_limit (Bytes)\\n\";\n    }elseif ($total_bytes>= $soft_limit){\n    print \"[SOFT_LIMIT WARN] $total_bytes>= $soft_limit (Bytes)\\n\";\n    }else{\n    print \"[SUCCESS] total bytes = $total_bytes\\n\";\n    }\n\n    subsize_summary {\n      if (-f $File::Find::name){\n        $total_bytes+= -s $File::Find::name;\n      }\n    }\n    ```", "```\nroot = jenkins.model.Jenkins.instance.getRootDir()\ncount = 0\nsize =0\nmaxsize=1024*1024*32\nroot.eachFileRecurse() { file ->\ncount++\nsize+=file.size();\nif (file.size() >maxsize) {\nprintln \"Thinking about deleting: ${file.getPath()}\"\n            // do things to large files here\n        }\n}\nprintln \"Space used ${size/(1024*1024)} MB Number of files ${count}\"\n```", "```\n    java -jar jenkins-cli.jar -s \n    http://host  login --username username\n\n    ```", "```\n    java -jar jenkins-cli.jar -s \n    http://host   help\n\n    ```", "```\n    java -jar jenkins-cli.jar -s http://host groovy large_files.groovy\n\n    ```", "```\n    java -jar jenkins-cli.jar -s http://host logout.\n\n    ```", "```\n    import java.util.Random\n    Random random = new Random()\n\n    hudson.model.Hudson.instance.items.each{ job ->\n    println (\"Class: ${job.class}\")\n    println (\"Name: ${job.name}\")\n    println (\"Root Dir: ${job.rootDir}\")\n    println (\"URL: ${job.url}\")\n    println (\"Absolute URL: ${job.absoluteUrl}\")\n\n    if (\"MyTest\".equals(job.name)){\n      println (\"Description: ${job.description}\")\n    job.setDescription(\"This is a test id: ${random.nextInt(99999999)}\")\n    }\n    }\n    ```", "```\n    for (slave in hudson.model.Hudson.instance.slaves) {\n    println \"Slave class: ${slave.class}\"\n    println \"Slave name: ${slave.name}\"\n    println \"Slave URL: ${slave.rootPath}\"\n    println \"Slave URL: ${slave.labelString}\\n\"\n    }\n    ```", "```\n    Import hudson.model.Run;\n    Import java.text.DateFormat;\n\n    def warning='<font color=\\'red\\'>[ARCHIVE]</font> '\n    def now=new Date()\n\n    for (job in hudson.model.Hudson.instance.items) {\n    println \"\\nName: ${job.name}\"\n        Run lastSuccessfulBuild = job.getLastSuccessfulBuild()\n    if (lastSuccessfulBuild != null) {\n    def time = lastSuccessfulBuild.getTimestamp().getTime()\n    if (now.year.equals(time.year)){\n    println(\"Project has same year as build\");\n    }else {\n    if (job.description.startsWith(warning)){\n    println(\"Description has already been changed\");\n    }else{\n    job.setDescription(\"${warning}${job.description}\")\n            }\n         }\n       }\n    }\n    ```"]