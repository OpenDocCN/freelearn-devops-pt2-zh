["```\n- name: Docker bench security playbook\n  hosts: docker\n  remote_user: ubuntu\n  become: yes\n\n  tasks:\n    - name: make sure git installed\n      apt:\n        name: git\n        state: present\n\n    - name: download the docker bench security\n      git:\n        repo: https://github.com/docker/docker-bench-security.git\n        dest: /opt/docker-bench-security\n\n    - name: running docker-bench-security scan\n      command: docker-bench-security.sh -l /tmp/output.log\n      args:\n        chdir: /opt/docker-bench-security/\n\n    - name: downloading report locally\n      fetch:\n        src: /tmp/output.log\n        dest: \"{{ playbook_dir }}/{{ inventory_hostname }}-docker-report-{{ ansible_date_time.date }}.log\"\n        flat: yes\n\n    - name: report location\n      debug:\n        msg: \"Report can be found at {{ playbook_dir }}/{{ inventory_hostname }}-docker-report-{{ ansible_date_time.date }}.log\"</mark>\n```", "```\n- name: Clair Scanner Server Setup\n  hosts: docker\n  remote_user: ubuntu\n  become: yes\n\n  tasks:\n    - name: setting up clair-db\n      docker_container:\n        name: clair_db\n        image: arminc/clair-db\n        exposed_ports:\n          - 5432\n\n    - name: setting up clair-local-scan\n      docker_container:\n        name: clair\n        image: arminc/clair-local-scan:v2.0.1\n        ports:\n          - \"6060:6060\"\n        links:\n          - \"clair_db:postgres\"\n```", "```\n- name: Scanning containers using clair-scanner\n  hosts: docker\n  remote_user: ubuntu\n  become: yes\n  vars:\n    image_to_scan: \"debian:sid\"   #container to scan for vulnerabilities\n    clair_server: \"http://192.168.1.10:6060\"    #clair server api endpoint\n\n  tasks:\n    - name: downloading and setting up clair-scanner binary\n      get_url:\n        url: https://github.com/arminc/clair-scanner/releases/download/v6/clair-scanner_linux_amd64\n        dest: /usr/local/bin/clair-scanner\n        mode: 0755\n\n    - name: scanning {{ image_to_scan }} container for vulnerabilities\n      command: clair-scanner -r /tmp/{{ image_to_scan }}-scan-report.json -c {{ clair_server }} --ip 0.0.0.0 {{ image_to_scan }}\n      register: scan_output\n      ignore_errors: yes\n\n    - name: downloading the report locally\n      fetch:\n        src: /tmp/{{ image_to_scan }}-scan-report.json\n        dest: {{ playbook_dir }}/{{ image_to_scan }}-scan-report.json\n        flat: yes\n```", "```\n- name: anchore server setup\n  hosts: anchore\n  become: yes\n  vars:\n    db_password: changeme\n    admin_password: secretpassword\n\n  tasks:\n    - name: creating volumes\n      file:\n        path: \"{{ item }}\"\n        recurse: yes\n        state: directory\n\n      with_items:\n        - /root/aevolume/db\n        - /root/aevolume/config\n\n    - name: copying anchore-engine configuration\n      template:\n        src: config.yaml.j2\n        dest: /root/aevolume/config/config.yaml\n\n    - name: starting anchore-db container\n      docker_container:\n        name: anchore-db\n        image: postgres:9\n        volumes:\n          - \"/root/aevolume/db/:/var/lib/postgresql/data/pgdata/\"\n        env:\n          POSTGRES_PASSWORD: \"{{ db_password }}\"\n          PGDATA: \"/var/lib/postgresql/data/pgdata/\"\n\n    - name: starting anchore-engine container\n      docker_container:\n        name: anchore-engine\n        image: anchore/anchore-engine\n        ports:\n          - 8228:8228\n          - 8338:8338\n        volumes:\n          - \"/root/aevolume/config/config.yaml:/config/config.yaml:ro\"\n          - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n        links:\n          - anchore-db:anchore-db\n```", "```\n- name: anchore-cli scan\n  hosts: anchore\n  become: yes\n  vars:\n    scan_image_name: \"docker.io/library/ubuntu:latest\"\n    anchore_vars:\n      ANCHORE_CLI_URL: http://localhost:8228/v1\n      ANCHORE_CLI_USER: admin\n      ANCHORE_CLI_PASS: secretpassword\n\n  tasks:\n    - name: installing anchore-cli\n      pip:\n        name: \"{{ item }}\"\n\n      with_items:\n        - anchorecli\n        - pyyaml\n\n    - name: downloading image\n      docker_image: \n        name: \"{{ scan_image_name }}\"\n\n    - name: adding image for analysis\n      command: \"anchore-cli image add {{ scan_image_name }}\"\n      environment: \"{{anchore_vars}}\"\n\n    - name: wait for analysis to compelte\n      command: \"anchore-cli image content {{ scan_image_name }} os\"\n      register: analysis\n      until: analysis.rc != 1\n      retries: 10\n      delay: 30\n      ignore_errors: yes\n      environment: \"{{anchore_vars}}\"\n\n    - name: vulnerabilities results\n      command: \"anchore-cli image vuln {{ scan_image_name }} os\"\n      register: vuln_output\n      environment: \"{{anchore_vars}}\"\n\n    - name: \"vulnerabilities in {{ scan_image_name }}\"\n      debug:\n        msg: \"{{ vuln_output.stdout_lines }}\"\n```", "```\n- name: setting up vuls using docker containers\n  hosts: vuls\n  become: yes\n\n  roles:\n    - vuls_containers_download\n    - vuls_database_download\n```", "```\n- name: pulling containers locally\n  docker_image:\n    name: \"{{ item }}\"\n    pull: yes\n\n  with_items:\n    - vuls/go-cve-dictionary\n    - vuls/goval-dictionary\n    - vuls/vuls\n```", "```\n- name: fetching NVD database locally\n  docker_container:\n    name: \"cve-{{ item }}\"\n    image: vuls/go-cve-dictionary\n    auto_remove: yes\n    interactive: yes\n    state: started\n    command: fetchnvd -years \"{{ item }}\"\n    volumes:\n      - \"{{ vuls_data_directory }}:/vuls\"\n      - \"{{ vuls_data_directory }}/go-cve-dictionary-log:/var/log/vuls\"\n  with_sequence: start=2002 end=\"{{ nvd_database_years }}\"\n\n- name: fetching redhat oval data\n  docker_container:\n    name: \"redhat-oval-{{ item }}\"\n    image: vuls/goval-dictionary\n    auto_remove: yes\n    interactive: yes\n    state: started\n    command: fetch-redhat \"{{ item }}\"\n    volumes:\n      - \"{{ vuls_data_directory }}:/vuls\"\n      - \"{{ vuls_data_directory }}/goval-dictionary-log:/var/log/vuls\"\n  with_items: \"{{ redhat_oval_versions }}\"\n\n- name: fetching ubuntu oval data\n  docker_container:\n    name: \"ubuntu-oval-{{ item }}\"\n    image: vuls/goval-dictionary\n    auto_remove: yes\n    interactive: yes\n    state: started\n    command: \"fetch-ubuntu {{ item }}\"\n    volumes:\n      - \"{{ vuls_data_directory }}:/vuls\"\n      - \"{{ vuls_data_directory }}/goval-dictionary-log:/var/log/vuls\"\n  with_items: \"{{ ubuntu_oval_versions }}\"\n```", "```\nvuls_data_directory: \"/vuls_data\"\nnvd_database_years: 2017\nredhat_oval_versions:\n  - 6\n  - 7\nubuntu_oval_versions:\n  - 12\n  - 14\n  - 16\n```", "```\n- name: scanning and reporting using vuls\n  hosts: vuls\n  become: yes\n  vars:\n    vuls_data_directory: \"/vuls_data\"\n    slack_web_hook_url: https://hooks.slack.com/services/XXXXXXX/XXXXXXXXXXXXXXXXXXXXX\n    slack_channel: \"#vuls\"\n    slack_emoji: \":ghost:\"\n    server_to_scan: 192.168.33.80\n    server_username: vagrant\n    server_key_file_name: 192-168-33-80\n\n  tasks:\n    - name: copying configuraiton file and ssh keys\n      template:\n        src: \"{{ item.src }}\"\n        dest: \"{{ item.dst }}\"\n        mode: 0400\n\n      with_items:\n         - { src: 'config.toml', dst: '/root/config.toml' }\n         - { src: '192-168-33-80', dst: '/root/.ssh/192-168-33-80' } \n\n    - name: running config test\n      docker_container:\n        name: configtest\n        image: vuls/vuls\n        auto_remove: yes\n        interactive: yes\n        state: started\n        command: configtest -config=/root/config.toml\n        volumes:\n          - \"/root/.ssh:/root/.ssh:ro\"\n          - \"{{ vuls_data_directory }}:/vuls\"\n          - \"{{ vuls_data_directory }}/vuls-log:/var/log/vuls\"\n          - \"/root/config.toml:/root/config.toml:ro\"\n\n    - name: running vuls scanner\n      docker_container:\n        name: vulsscan\n        image: vuls/vuls\n        auto_remove: yes\n        interactive: yes\n        state: started\n        command: scan -config=/root/config.toml\n        volumes:\n          - \"/root/.ssh:/root/.ssh:ro\"\n          - \"{{ vuls_data_directory }}:/vuls\"\n          - \"{{ vuls_data_directory }}/vuls-log:/var/log/vuls\"\n          - \"/root/config.toml:/root/config.toml:ro\"\n          - \"/etc/localtime:/etc/localtime:ro\"\n        env:\n          TZ: \"Asia/Kolkata\"\n\n    - name: sending slack report\n      docker_container:\n        name: vulsreport\n        image: vuls/vuls\n        auto_remove: yes\n        interactive: yes\n        state: started\n        command: report -cvedb-path=/vuls/cve.sqlite3 -ovaldb-path=/vuls/oval.sqlite3 --to-slack -config=/root/config.toml\n        volumes:\n          - \"/root/.ssh:/root/.ssh:ro\"\n          - \"{{ vuls_data_directory }}:/vuls\"\n          - \"{{ vuls_data_directory }}/vuls-log:/var/log/vuls\"\n          - \"/root/config.toml:/root/config.toml:ro\"\n          - \"/etc/localtime:/etc/localtime:ro\"\n\n    - name: vuls webui report\n      docker_container:\n        name: vulswebui\n        image: vuls/vulsrepo\n        interactive: yes\n        volumes:\n          - \"{{ vuls_data_directory }}:/vuls\"\n        ports:\n          - \"80:5111\"\n```", "```\n[slack]\nhookURL = \"{{ slack_web_hook_url}}\"\nchannel = \"{{ slack_channel }}\"\niconEmoji = \"{{ slack_emoji }}\"\n\n[servers]\n\n[servers.{{ server_key_file_name }}]\nhost = \"{{ server_to_scan }}\"\nuser = \"{{ server_username }}\"\nkeyPath = \"/root/.ssh/{{ server_key_file_name }}\"\n```", "```\n- name: setting up osquery\n  hosts: linuxservers\n  become: yes\n\n  tasks:\n    - name: installing osquery\n      apt:\n        deb: https://pkg.osquery.io/deb/osquery_2.10.2_1.linux.amd64.deb\n        update_cache: yes\n\n    - name: adding osquery configuration\n      template:\n        src: \"{{ item.src }}\"\n        dest: \"{{ item.dst }}\"\n\n      with_items:\n        - { src: fim.conf, dst: /usr/share/osquery/packs/fim.conf }\n        - { src: osquery.conf, dst: /etc/osquery/osquery.conf }\n\n    - name: starting and enabling osquery service\n      service:\n        name: osqueryd\n        state: started\n        enabled: yes\n```", "```\n{\n  \"queries\": {\n    \"file_events\": {\n      \"query\": \"select * from file_events;\",\n      \"removed\": false,\n      \"interval\": 300\n    }\n  },\n  \"file_paths\": {\n    \"homes\": [\n      \"/root/.ssh/%%\",\n      \"/home/%/.ssh/%%\"\n    ],\n      \"etc\": [\n      \"/etc/%%\"\n    ],\n      \"home\": [\n      \"/home/%%\"\n    ],\n      \"tmp\": [\n      \"/tmp/%%\"\n    ]\n  }\n}\n```", "```\n{\n  \"options\": {\n    \"config_plugin\": \"filesystem\",\n    \"logger_plugin\": \"filesystem\",\n    \"logger_path\": \"/var/log/osquery\",\n    \"disable_logging\": \"false\",\n    \"log_result_events\": \"true\",\n    \"schedule_splay_percent\": \"10\",\n    \"pidfile\": \"/var/osquery/osquery.pidfile\",\n    \"events_expiry\": \"3600\",\n    \"database_path\": \"/var/osquery/osquery.db\",\n    \"verbose\": \"false\",\n    \"worker_threads\": \"2\",\n    \"enable_monitor\": \"true\",\n    \"disable_events\": \"false\",\n    \"disable_audit\": \"false\",\n    \"audit_allow_config\": \"true\",\n    \"host_identifier\": \"hostname\",\n    \"enable_syslog\": \"true\",\n    \"audit_allow_sockets\": \"true\",\n    \"schedule_default_interval\": \"3600\" \n  },\n  \"schedule\": {\n    \"crontab\": {\n      \"query\": \"SELECT * FROM crontab;\",\n      \"interval\": 300\n    },\n    \"system_profile\": {\n      \"query\": \"SELECT * FROM osquery_schedule;\"\n    }, \n    \"system_info\": {\n      \"query\": \"SELECT hostname, cpu_brand, physical_memory FROM system_info;\",\n      \"interval\": 3600\n    }\n  },\n  \"decorators\": {\n    \"load\": [\n      \"SELECT uuid AS host_uuid FROM system_info;\",\n      \"SELECT user AS username FROM logged_in_users ORDER BY time DESC LIMIT 1;\"\n    ]\n  },\n  \"packs\": {\n     \"fim\": \"/usr/share/osquery/packs/fim.conf\",\n     \"osquery-monitoring\": \"/usr/share/osquery/packs/osquery-monitoring.conf\",\n     \"incident-response\": \"/usr/share/osquery/packs/incident-response.conf\",\n     \"it-compliance\": \"/usr/share/osquery/packs/it-compliance.conf\",\n     \"vuln-management\": \"/usr/share/osquery/packs/vuln-management.conf\"\n  }\n}\n```"]