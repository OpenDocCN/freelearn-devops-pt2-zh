["```\nwget https://releases.hashicorp.com/vagrant/1.8.5/vagrant_1.8.5_x86_64.deb\n```", "```\nsudo dpkg -i vagrant_1.8.5_x86_64.deb \nsudo apt-get install -f\n```", "```\nvagrant --version\n```", "```\nVagrant 1.8.5\n```", "```\ndeb http://download.virtualbox.org/virtualbox/debian \\\nxenial contrib\n```", "```\nwget -q \\\nhttps://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | \nsudo apt-key add - \nwget -q \\\nhttps://www.virtualbox.org/download/oracle_vbox.asc -O- | \nsudo apt-key add –\n\n```", "```\nsudo apt-get update \nsudo apt-get install virtualbox-5.1\n```", "```\nVBoxManage –-version\n```", "```\n5.1.6r110634\n```", "```\nsudo nano Vagrantfile\n```", "```\n# -*- mode: ruby -*-\n# vi: set ft=ruby :\nVagrant.configure(2) do |config|\nconfig.vm.box = \"ubuntu/xenial64\"\n\nconfig.vm.define :node1 do |node1_config|\nnode1_config.vm.network \"private_network\", ip:\"192.168.56.31\"\nnode1_config.vm.provider :virtualbox do |vb|\nvb.customize [\"modifyvm\", :id, \"--memory\", \"2048\"]\nvb.customize [\"modifyvm\", :id, \"--cpus\", \"2\"]\nend\nend\nend\n```", "```\n vagrant up node1\n```", "```\n vagrant ssh node1\n```", "```\nWelcome to Ubuntu 16.04.2 LTS (GNU/Linux 4.4.0-83-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n Get cloud support with Ubuntu Advantage Cloud Guest:\n http://www.ubuntu.com/business/services/cloud\n0 packages can be updated.\n0 updates are security updates.\n\nubuntu@ubuntu-xenial:~$\n```", "```\nadduser jenkins\n```", "```\nAdding user `jenkins' ...\nAdding new group `jenkins' (1001) ...\nAdding new user `jenkins' (1001) with group `jenkins' ...\nCreating home directory `/home/jenkins' ...\nCopying files from `/etc/skel' ...\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully\nChanging the user information for jenkins\nEnter the new value, or press ENTER for the default\n Full Name []: Nikhil Pathania\n Room Number []:\n Work Phone []:\n Home Phone []:\n Other []:\nIs the information correct? [Y/n] Y\n```", "```\nsu jenkins\n```", "```\nsudo apt-get update\n\nsudo apt-get install openssh-server\n\nsudo mkdir /var/run/sshd\n```", "```\nsudo apt-get update\n```", "```\nsudo apt-get install default-jre\n```", "```\ncd /tmp\n\nwget https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.11/bin/apache-tomcat-8.5.11-deployer.tar.gz\n```", "```\nmkdir $HOME/tomcat\n```", "```\nsudo tar xzvf apache-tomcat-8*tar.gz \\\n-C $HOME/tomcat --strip-components=1\n```", "```\nnode('docker') {\n  stage('Poll') {\n    checkout scm\n  }\n  stage('Build & Unit test'){\n    sh 'mvn clean verify -DskipITs=true';\n    junit '**/target/surefire-reports/TEST-*.xml'\n    archive 'target/*.jar'\n  }\n  stage('Static Code Analysis'){\n    sh 'mvn clean verify sonar:sonar -Dsonar.projectName=example-project\n    -Dsonar.projectKey=example-project\n    -Dsonar.projectVersion=$BUILD_NUMBER';\n  }\n  stage ('Integration Test'){\n    sh 'mvn clean verify -Dsurefire.skip=true';\n    junit '**/target/failsafe-reports/TEST-*.xml'\n    archive 'target/*.jar'\n  }\n  stage ('Publish'){\n    def server = Artifactory.server 'Default Artifactory Server'\n    def uploadSpec = \"\"\"{\n      \"files\": [\n        {\n           \"pattern\": \"target/hello-0.0.1.war\",\n           \"target\": \"example-project/${BUILD_NUMBER}/\",\n           \"props\": \"Integration-Tested=Yes;Performance-Tested=No\"\n        }\n      ]\n    }\"\"\"\n    server.upload(uploadSpec)\n  }\n  stash includes:\n   'target/hello-0.0.1.war,src/pt/Hello_World_Test_Plan.jmx',\n  name: 'binary'\n}\nnode('docker_pt') {\n  stage ('Start Tomcat'){\n    sh '''cd /home/jenkins/tomcat/bin\n    ./startup.sh''';\n  }\n  stage ('Deploy '){\n    unstash 'binary'\n    sh 'cp target/hello-0.0.1.war /home/jenkins/tomcat/webapps/';\n  }\n  stage ('Performance Testing'){\n    sh '''cd /opt/jmeter/bin/\n    ./jmeter.sh -n -t $WORKSPACE/src/pt/Hello_World_Test_Plan.jmx -l\n    $WORKSPACE/test_report.jtl''';\n    step([$class: 'ArtifactArchiver', artifacts: '**/*.jtl'])\n  }\n  stage ('Promote build in Artifactory'){\n    withCredentials([usernameColonPassword(credentialsId:\n     'artifactory-account', variable: 'credentials')]) {\n      sh 'curl -u${credentials} -X PUT\n      \"http://192.168.56.102:8081/artifactory/api/storage/example-project/\n      ${BUILD_NUMBER}/hello-0.0.1.war?properties=Performance-Tested=Yes\"';\n    }\n  }\n}\n```", "```\nnode('production') {\n}\n```", "```\n\"files\": [\n    {\n      \"pattern\": \"[Mandatory]\",\n      \"target\": \"[Mandatory]\",\n      \"props\": \"[Optional]\",\n      \"recursive\": \"[Optional, Default: 'true']\",\n      \"flat\" : \"[Optional, Default: 'true']\",\n      \"regexp\": \"[Optional, Default: 'false']\"\n    }\n  ]\n```", "```\ndef server = Artifactory.server 'Default Artifactory Server'\ndef downloadSpec = \"\"\"{\n  \"files\": [\n    {\n        \"pattern\": \"example-project/$BUILD_NUMBER/*.zip\",\n        \"target\": \"/home/jenkins/tomcat/webapps/\"\n        \"props\": \"Performance-Tested=Yes;Integration-Tested=Yes\",\n    }\n  ]\n}\"\"\nserver.download(downloadSpec)\n```", "```\nstage ('Deploy to Prod'){\n  def server = Artifactory.server 'Default Artifactory Server'\n  def downloadSpec = \"\"\"{\n    \"files\": [\n      {\n        \"pattern\": \"example-project/$BUILD_NUMBER/*.zip\",\n        \"target\": \"/home/jenkins/tomcat/webapps/\"\n        \"props\": \"Performance-Tested=Yes;Integration-Tested=Yes\",\n      }\n    ]\n  }\"\"\nserver.download(downloadSpec)\n}\n```", "```\nnode ('production') {\n  stage ('Deploy to Prod'){    def server = Artifactory.server 'Default Artifactory Server'\n    def downloadSpec = \"\"\"{\n      \"files\": [\n        {\n          \"pattern\": \"example-project/$BUILD_NUMBER/*.zip\",\n          \"target\": \"/home/jenkins/tomcat/webapps/\"\n          \"props\": \"Performance-Tested=Yes;Integration-Tested=Yes\",\n        }\n      ]\n    }\"\"\n    server.download(downloadSpec)\n  }\n}\n```", "```\nnode('docker') {\n  stage('Poll') {\n    checkout scm\n  }\n  stage('Build & Unit test'){\n    sh 'mvn clean verify -DskipITs=true';\n    junit '**/target/surefire-reports/TEST-*.xml'\n    archive 'target/*.jar'\n  }\n  stage('Static Code Analysis'){\n    sh 'mvn clean verify sonar:sonar -Dsonar.projectName=example-project\n    -Dsonar.projectKey=example-project\n    -Dsonar.projectVersion=$BUILD_NUMBER';\n  }\n  stage ('Integration Test'){\n    sh 'mvn clean verify -Dsurefire.skip=true';\n    junit '**/target/failsafe-reports/TEST-*.xml'\n    archive 'target/*.jar'\n  }\n  stage ('Publish'){\n    def server = Artifactory.server 'Default Artifactory Server'\n    def uploadSpec = \"\"\"{\n      \"files\": [\n        {\n          \"pattern\": \"target/hello-0.0.1.war\",\n          \"target\": \"example-project/${BUILD_NUMBER}/\",\n          \"props\": \"Integration-Tested=Yes;Performance-Tested=No\"\n        }\n      ]\n    }\"\"\"\n    server.upload(uploadSpec)\n  }\n  stash includes:\n   'target/hello-0.0.1.war,src/pt/Hello_World_Test_Plan.jmx',\n  name: 'binary'\n}\nnode('docker_pt') {\n  stage ('Start Tomcat'){\n    sh '''cd /home/jenkins/tomcat/bin\n    ./startup.sh''';\n  }\n  stage ('Deploy '){\n    unstash 'binary'\n    sh 'cp target/hello-0.0.1.war /home/jenkins/tomcat/webapps/';\n  }\n  stage ('Performance Testing'){\n    sh '''cd /opt/jmeter/bin/\n    ./jmeter.sh -n -t $WORKSPACE/src/pt/Hello_World_Test_Plan.jmx -l\n    $WORKSPACE/test_report.jtl''';\n    step([$class: 'ArtifactArchiver', artifacts: '**/*.jtl'])\n  }\n  stage ('Promote build in Artifactory'){\n    withCredentials([usernameColonPassword(credentialsId:\n     'artifactory-account', variable: 'credentials')]) {\n      sh 'curl -u${credentials} -X PUT\n      \"http://192.168.56.102:8081/artifactory/api/storage/example-project/\n      ${BUILD_NUMBER}/hello-0.0.1.war?properties=Performance-Tested=Yes\"';\n    }\n  }\n}\nnode ('production') {  stage ('Deploy to Prod'){    def server = Artifactory.server 'Default Artifactory Server'\n    def downloadSpec = \"\"\"{\n      \"files\": [\n        {\n          \"pattern\": \"example-project/$BUILD_NUMBER/*.zip\",\n          \"target\": \"/home/jenkins/tomcat/webapps/\"\n          \"props\": \"Performance-Tested=Yes;Integration-Tested=Yes\",\n        }\n      ]\n    }\"\"\n    server.download(downloadSpec)\n  }\n}\n```", "```\nnode('docker') {\n  stage('Poll') {\n    checkout scm\n  }\n  stage('Build & Unit test'){\n    sh 'mvn clean verify -DskipITs=true';\n    junit '**/target/surefire-reports/TEST-*.xml'\n    archive 'target/*.jar'\n  }\n  stage('Static Code Analysis'){\n    sh 'mvn clean verify sonar:sonar\n    -Dsonar.projectName=example-project\n    -Dsonar.projectKey=example-project\n    -Dsonar.projectVersion=$BUILD_NUMBER';\n  }\n  stage ('Integration Test'){\n    sh 'mvn clean verify -Dsurefire.skip=true';\n    junit '**/target/failsafe-reports/TEST-*.xml'\n    archive 'target/*.jar'\n  }\n  stage ('Publish'){\n    def server = Artifactory.server\n      'Default Artifactory Server'\n    def uploadSpec = \"\"\"{\n      \"files\": [\n        {\n           \"pattern\": \"target/hello-0.0.1.war\",\n           \"target\": \"example-project/${BUILD_NUMBER}/\",\n           \"props\": \"Integration-Tested=Yes;\n             Performance-Tested=No\"\n        }\n      ]\n    }\"\"\"\n    server.upload(uploadSpec)\n  }\n  stash includes:\n   'target/hello-0.0.1.war,src/pt/Hello_World_Test_Plan.jmx',\n  name: 'binary'\n}\nnode('docker_pt') {\n  stage ('Start Tomcat'){\n    sh '''cd /home/jenkins/tomcat/bin\n    ./startup.sh''';\n  }\n  stage ('Deploy '){\n    unstash 'binary'\n    sh 'cp target/hello-0.0.1.war /home/jenkins/tomcat/webapps/';\n  }\n  stage ('Performance Testing'){\n    sh '''cd /opt/jmeter/bin/\n    ./jmeter.sh -n -t $WORKSPACE/src/pt/Hello_World_Test_Plan.jmx\n    -l $WORKSPACE/test_report.jtl''';\n    step([$class: 'ArtifactArchiver', artifacts: '**/*.jtl'])\n  }\n  stage ('Promote build in Artifactory'){\n    withCredentials([usernameColonPassword(credentialsId:\n     'artifactory-account', variable: 'credentials')]) {\n      sh 'curl -u${credentials} -X PUT\n      \"http://192.168.56.102:8081/artifactory/api/storage/\n       example-project/${BUILD_NUMBER}/hello-0.0.1.war?\n       properties=Performance-Tested=Yes\"';\n    }\n  }\n}\nnode ('production') {  stage ('Deploy to Prod'){    def server = Artifactory.server \n     'Default Artifactory Server'\n    def downloadSpec = \"\"\"{\n      \"files\": [\n        {\n          \"pattern\": \"example-project/$BUILD_NUMBER/*.zip\",\n          \"target\": \"/home/jenkins/tomcat/webapps/\"\n          \"props\": \"Performance-Tested=Yes;\n             Integration-Tested=Yes\",\n        }\n      ]\n    }\"\"\n    server.download(downloadSpec)\n  }\n}\n```"]