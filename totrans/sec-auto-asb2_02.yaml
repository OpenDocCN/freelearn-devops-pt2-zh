- en: Ansible Tower, Jenkins, and Other Automation Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible Tower、Jenkins 和其他自动化工具
- en: Ansible is powerful. Once you realize the innumerable benefits of writing down
    a way to configure and provision systems, you will never want to go back. In fact,
    you may want to go ahead and write playbooks for complex cloud environments to
    deploying stacks for data scientists. The rule of thumb is if you can script it,
    you can create a playbook for it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 很强大。一旦你意识到写下配置和提供系统的方式的无数好处，你就再也不想回去了。事实上，你可能想要继续为复杂的云环境编写 playbooks，为数据科学家部署堆栈。经验法则是，如果你可以编写脚本，你就可以为其创建一个
    playbook。
- en: 'Let''s assume that you have gone ahead and done just that. Build different
    playbooks for a variety of scenarios. If you see the advantages of codifying how
    infrastructure is built and provisioned, you will obviously want to put your playbooks
    under version control:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经这样做了。为各种场景构建不同的 playbooks。如果你看到了将基础架构的构建和配置编码化的优势，你显然会想要将你的 playbooks 放入版本控制下：
- en: '![](img/c7d7e4ae-5685-4cd2-b4aa-fbb1f6e6dd35.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7d7e4ae-5685-4cd2-b4aa-fbb1f6e6dd35.png)'
- en: Multiple playbooks stored under version control, ready to be deployed to systems
    for provisioning
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在版本控制下的多个 playbooks，准备部署到系统进行配置
- en: 'At this point, we have solved interesting challenges surrounding automation:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经解决了围绕自动化的有趣挑战：
- en: We now have the ability to *replay* commands against multiple targets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在我们有了对多个目标执行 *重放* 命令的能力
- en: Remember that if the playbooks are in an idempotent manner, we can safely run
    them *n* number of times against our targets without any worries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记住，如果 playbooks 是以幂等的方式，我们可以安全地对我们的目标运行它们 *n* 次而不必担心任何问题
- en: By virtue of them being text-based documents, we get versioning and all the
    benefits that come from doing so
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 凭借它们是基于文本的文档，我们获得了版本控制和由此带来的所有好处
- en: 'What is still manual is the fact that we need someone or something to execute
    the `ansible-playbook` command. Not only that, this someone or something will
    need to do the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在仍然需要手动的是，我们需要某人或某物来执行 `ansible-playbook` 命令。不仅如此，这个某人或某物还需要执行以下操作：
- en: Remember when to execute the playbooks
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记住何时执行 playbooks
- en: Schedule them accordingly
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相应地安排它们的时间表
- en: Store secrets safely (usually we require the SSH key to be able to login)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全存储秘密（通常我们需要 SSH 密钥才能登录）
- en: Store the output or remember to rerun a playbook if something failed
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储输出或记住重新运行 playbook 如果出现失败的情况
- en: We can all aspire to be that spectacular when it comes to remembering the small
    things, or we can accept that these detail-oriented, scheduling-based tasks are
    better left to competent software rather than superhumans!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想起记住细微之处时，我们都可以渴望成为那样的壮观人物，或者我们可以接受，这些注重细节、基于调度的任务最好由称职的软件而不是超人来完成！
- en: '![](img/5754dba5-fa69-4104-9f99-8777b6372c2a.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5754dba5-fa69-4104-9f99-8777b6372c2a.png)'
- en: Superhumans will have the ability to remember, schedule, execute, and notify
    about playbooks
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 超人将有能力记住、安排、执行并通知有关 playbooks 的情况
- en: It turns out we don't all have to become superhumans. We can simply use scheduling
    and automation tools such as Ansible Tower, Jenkins, or Rundeck to do all of what
    we have defined previously, and more.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 原来我们并不都需要成为超人。我们可以简单地使用安排和自动化工具，比如 Ansible Tower、Jenkins 或 Rundeck 来完成我们之前定义的所有任务，以及更多。
- en: In this chapter, we will look at all the three tools that we mentioned to understand
    what do they offer so as to take our automation to the next level of abstraction
    of automation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将查看我们提到的所有三个工具，以了解它们提供了什么，以便将我们的自动化提升到自动化的下一个抽象层次。
- en: 'Specifically, we will cover the following topics:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将涵盖以下主题：
- en: Installing and configuring Ansible Tower
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置 Ansible Tower
- en: Using Ansible Tower to manage playbooks and schedule
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible Tower 管理 playbooks 和调度
- en: Installing and configuring Jenkins
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置 Jenkins
- en: Installing and configuring Rundeck
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置 Rundeck
- en: Scheduling tools to enable the next abstraction of automation
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用调度工具来启用下一层次的自动化
- en: 'Scheduling and automation tools enable us to automate tasks such as continuous
    integration and continuous delivery. They are able to do this by providing the
    following fairly standard services:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 调度和自动化工具使我们能够自动化诸如持续集成和持续交付等任务。它们能够通过提供以下相当标准的服务来实现这一点：
- en: A web-based UI we can use to configure them
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用基于 web 的 UI 来配置它们
- en: Usually, a REST-based API so that we can use their features programmatically
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常，这是一个基于 REST 的 API，以便我们可以以编程方式使用它们的功能
- en: The ability to authenticate against its local store or possibly another service
    (OAuth/**Security Assertion Markup Language** (**SAML**))
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They all fundamentally give us a clear way to automate tasks to suit our workflow
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most security-related automation does boil down to doing a similar task over
    and over again and looking at the differences. This is especially true when you
    are in the line of doing security operations and security assessments.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Remember that by using Ansible roles and the playbooks containing them, we are
    already on our way to doing security automation. Now our aim is to take away the
    grunt work of remembering to execute those playbooks and get going.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three primary contenders that are used for this kind of automation.
    They are listed and described here:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Tower
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rundeck
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Tools** | **Our take** | **License ** |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
- en: '| Ansible Tower | Brilliant tool by the makers of Ansible so fits very well
    with the idea of IT automation, which we extend to our security needs. | Paid
    with a free trial |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
- en: '| Jenkins | The workhorse and the mainstay of a lot of CI/CD pipelines. Has
    hundreds of plugins to extend its core functionality. The best option if price
    or license is a concern. | Free and open source  |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
- en: '| Rundeck | Great tool for job scheduling and automation.  | A paid pro version
    is available |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
- en: In this chapter, we will install and configure all three tools to get you started.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat, who bought Ansible in the October 2015, has indicated that they plan
    to open source Ansible Tower. They made this announcement at AnsibleFest 2016\.
    You can follow the progress of that at [https://www.ansible.com/open-tower](https://www.ansible.com/open-tower).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Getting up and running
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start by setting up each of the three tools we mentioned and look at some
    of their features.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Ansible Tower
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are multiple ways to install the Ansible Tower trial version. The simplest
    way to get set up is by using their existing images from [https://www.ansible.com/tower-trial](https://www.ansible.com/tower-trial).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: You can also set up manually using their bundle installation. Please have a
    look at the requirements before installing at [http://docs.ansible.com/ansible-tower/3.1.4/html/installandreference/index.html](http://docs.ansible.com/ansible-tower/3.1.4/html/installandreference/index.html).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following commands to install Ansible Tower in the Ubuntu 16.04 operating
    system:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then edit the inventory file for updating password and other variables and run
    the setup. The inventory file contains `admin_password` for the tower administrator
    login account, `pg_host` and `pg_port` are Postgres database it will be required
    if we are setting up multi-node setup. Then finally `rabbitmq` details for queuing
    operations.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you have Vagrant installed, you can simply download their Vagrant box to
    get going.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you have Vagrant installed in your host system before running the
    following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '`$ vagrant init ansible/tower`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '`$ vagrant up`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '`$ vagrant ssh`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ vagrant ssh`'
- en: It will prompt you to enter  IP address, username, and password to login to
    the Ansible Tower dashboard.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 它会提示您输入 IP 地址、用户名和密码以登录到 Ansible Tower 仪表板。
- en: '![](img/5d64f647-7035-4b4f-929d-25e92ffadc07.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d64f647-7035-4b4f-929d-25e92ffadc07.png)'
- en: 'Then navigate the browser to `https://10.42.0.42` and accept the SSL error
    to proceed. This SSL error can be fixed by providing the valid certificates in
    the configuration at `/etc/tower` and need to restart the Ansible Tower service.
    Enter the login credentials to access the Ansible Tower dashboard:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在浏览器中导航至 `https://10.42.0.42` 并接受 SSL 错误以继续。可以通过在 `/etc/tower` 配置中提供有效证书来修复此
    SSL 错误，并需要重新启动 Ansible Tower 服务。输入登录凭据以访问 Ansible Tower 仪表板：
- en: '![](img/129dc8fb-abed-4a43-853a-5a00bf690e8d.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/129dc8fb-abed-4a43-853a-5a00bf690e8d.png)'
- en: 'Once you log in, it will prompt you for the Ansible Tower license:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，会提示您输入 Ansible Tower 许可证：
- en: '![](img/7046a7ee-92b0-49ba-8cf5-05e48c05cd10.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7046a7ee-92b0-49ba-8cf5-05e48c05cd10.png)'
- en: 'Ansible Tower also provides **Role-Based Authentication Control** (**RBAC**),
    which provides a granular level of control for different users and groups to manage
    Tower. The following screenshot shows a new user being created with the System
    Administrator privilege:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower 还提供了**基于角色的身份验证控制**（**RBAC**），为不同的用户和组提供了细粒度的控制，以管理 Tower。下面的截图显示了使用系统管理员权限创建新用户的过程：
- en: '![](img/d59cb20b-cb31-40c8-8cb6-4e551ec6a913.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d59cb20b-cb31-40c8-8cb6-4e551ec6a913.png)'
- en: 'To add inventory into Ansible Tower, we can simply enter it manually, we can
    also use a dynamic script to gather inventory from cloud providers by providing
    the authentication (or) access key. The following screenshot shows how we can
    add the inventory into Ansible Tower, we can also provide variables for different
    hosts by providing it in YAML or JSON format:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 要将清单添加到 Ansible Tower 中，我们可以简单地手动输入它，还可以使用动态脚本从云提供商那里收集清单，方法是提供身份验证（或）访问密钥。下面的截图显示了我们如何将清单添加到
    Ansible Tower 中，还可以通过在 YAML 或 JSON 格式中提供变量来为不同的主机提供变量：
- en: '![](img/567b4e71-7c73-4b16-b147-56168d855c54.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/567b4e71-7c73-4b16-b147-56168d855c54.png)'
- en: We can also add credentials (or) keys to the tower by providing them in credential
    management, which can be reused as well.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过在凭据管理中提供它们来向 tower 添加凭据（或）密钥，这些凭据也可以重复使用。
- en: Secrets store in Ansible Tower are encrypted with a symmetric key unique to
    each Ansible Tower cluster. Once stored in the Ansible Tower database, the credentials
    may only be used, not viewed, in the web interface. The types of credentials that
    Ansible Tower can store are passwords, SSH keys, Ansible Vault keys, and cloud
    credentials.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower 中存储的秘密信息使用每个 Ansible Tower 集群独有的对称密钥进行加密。一旦存储在 Ansible Tower 数据库中，凭据只能在
    Web 界面中使用，而不能查看。Ansible Tower 可以存储的凭据类型包括密码、SSH 密钥、Ansible Vault 密钥和云凭据。
- en: '![](img/78d67f33-0a8a-440d-a564-5ad6814bf7f0.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78d67f33-0a8a-440d-a564-5ad6814bf7f0.png)'
- en: 'Once we have the inventory gathered, we can create jobs to perform the playbook
    or ad-hoc command operations:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们收集了清单，就可以创建作业来执行 Playbook 或即席命令操作：
- en: '![](img/4c1877ad-17b2-4efe-b7e8-674c83e238c9.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c1877ad-17b2-4efe-b7e8-674c83e238c9.png)'
- en: 'Here we have selected the `shell` module and are running the `uname -a` command
    against both nodes:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们选择了 `shell` 模块，并针对两个节点运行了 `uname -a` 命令：
- en: '![](img/fc8e0186-52a9-4dce-b9f7-a65a0e4c3183.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc8e0186-52a9-4dce-b9f7-a65a0e4c3183.png)'
- en: 'Once we launch the execution, we can see the standard output in the dashboard.
    We can also access this using REST API:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动执行，我们就可以在仪表板中看到标准输出。我们也可以使用 REST API 访问：
- en: '![](img/3ff8c0c0-ec93-40ec-923a-60daef08eb5b.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ff8c0c0-ec93-40ec-923a-60daef08eb5b.png)'
- en: Please refer to the Ansible Tower documentation for more detailed references.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 Ansible Tower 文档获取更详细的参考资料。
- en: There is another way of using Ansible Tower: `tower-cli` is a command-line tool
    for Ansible Tower. Get started with the  `pip install ansible-tower-cli` command.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一种使用 Ansible Tower 的方式：`tower-cli` 是 Ansible Tower 的命令行工具。可以通过 `pip install
    ansible-tower-cli` 命令开始使用。
- en: The Ansible Tower REST API is a pretty powerful way to interact with the system
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower REST API 是与系统交互的一种非常强大的方式。
- en: This basically allows you to design your playbook workflow and so on using an
    easy-to-follow web GUI with the added flexibility of calling this from another
    CI/CD tool such as Jenkins.  Jenkins is, incidentally, the next software to set
    up and learn.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上允许您使用易于遵循的 Web GUI 设计 Playbook 工作流程等，同时还可以从另一个 CI/CD 工具（如 Jenkins）调用此功能。顺便说一句，Jenkins
    是接下来要设置和学习的软件。
- en: Setting up Jenkins
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Jenkins
- en: Let's use an Ansible playbook to install Jenkins and get started with it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用一个 Ansible playbook 来安装 Jenkins 并开始使用它。
- en: The following code snippet is a snippet of an Ansible playbook we wrote for
    setting up Jenkins in the Ubuntu 16.04 OS.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段是我们为在 Ubuntu 16.04 操作系统中设置 Jenkins 编写的 Ansible playbook 的片段。
- en: 'Once the setup has been done, playbook returns the default administrator password
    required to log in to the application for the first time:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 完成设置后，Playbook 将返回首次登录到应用程序所需的默认管理员密码：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To set up Jenkins, run the following command. Where `192.168.1.7` is the server
    IP address where Jenkins will be installed:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 Jenkins，请运行以下命令。其中 `192.168.1.7` 是 Jenkins 将被安装在的服务器 IP 地址：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we can configure Jenkins to install plugins, run scheduled jobs, and do
    many other things. First, we have to navigate to the Jenkins dashboard by browsing
    to `http://192.168.1.7:8080` and providing the auto-generated password. If the
    playbook runs without any errors, it will display the password at the end of the
    play:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以配置 Jenkins 来安装插件、运行定期作业以及执行许多其他操作。首先，我们必须通过浏览到 `http://192.168.1.7:8080`
    并提供自动生成的密码来导航到 Jenkins 仪表板。如果 Playbook 在没有任何错误的情况下运行，则会在操作结束时显示密码：
- en: '![](img/b53f3348-ad91-47a6-8fed-99f1792e07ce.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b53f3348-ad91-47a6-8fed-99f1792e07ce.png)'
- en: 'Create the new user by filling in the details and confirming to log in to the
    Jenkins console:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过填写详细信息并确认登录到 Jenkins 控制台来创建新用户：
- en: '![](img/3655c6ce-9792-4549-86ec-846d12b19063.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3655c6ce-9792-4549-86ec-846d12b19063.png)'
- en: 'Now we can install custom plugins in Jenkins, navigate to the Manage Jenkins
    tab, select Manage Plugins, then navigate to the Available tab. In the Filter:
    enter the plugin name as `Ansible`. Then select the checkbox and click Install
    without restart:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在 Jenkins 中安装自定义插件，导航至“管理 Jenkins”选项卡，选择“管理插件”，然后导航至“可用”选项卡。在“过滤器:”中输入插件名称为
    `Ansible`。然后选中复选框，单击“安装但不重新启动”：
- en: '![](img/fdaded9b-7399-4635-a2e5-635a9d4ea6bf.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fdaded9b-7399-4635-a2e5-635a9d4ea6bf.png)'
- en: 'Now we are ready to work with the Ansible plugin for Jenkins. Create a new
    project in the main dashboard, give it a name, and select Freestyle project to
    proceed:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备好使用 Jenkins 的 Ansible 插件了。在主仪表板中创建一个新项目，为其命名，然后选择自由风格项目以继续：
- en: '![](img/eff81a92-6242-49ab-8ebc-4b35971e64b7.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eff81a92-6242-49ab-8ebc-4b35971e64b7.png)'
- en: 'Now we can configure the build options, this is where Jenkins will give us
    more flexibility to define our own triggers, build instructions, and post build
    scripts:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以配置构建选项，这是 Jenkins 将为我们提供更大灵活性以定义我们自己的触发器、构建说明和后构建脚本的地方：
- en: '![](img/d7712e23-9f6d-4743-a9b5-abca87358929.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7712e23-9f6d-4743-a9b5-abca87358929.png)'
- en: The preceding screenshot is an example of a build invoking an Ansible ad-hoc
    command. This can be modified to ansible-playbook or any other scripts based on
    certain events.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图是一个构建调用 Ansible 临时命令的示例。这可以根据某些事件修改为 ansible-playbook 或基于特定事件的任何其他脚本。
- en: The Jenkins Ansible plugin also provides useful features such as configuring
    advanced commands and passing credentials, keys from Jenkins itself.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins Ansible 插件还提供了有用的功能，例如从 Jenkins 本身配置高级命令和传递凭据、密钥。
- en: 'Once the build triggers based on an event, this can be sent to some artifact
    storage, it can also be available in the Jenkins build console output:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦基于事件触发了构建，它可以被发送到某个构件存储中，也可以在 Jenkins 构建控制台输出中找到：
- en: '![](img/e933fb26-6493-48e9-b312-e52850dbcda8.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e933fb26-6493-48e9-b312-e52850dbcda8.png)'
- en: This is a really very powerful way to perform dynamic operations such as triggering
    automated server and stacks setup based on a code push to the repository, as well
    as scheduled scans and automated reporting.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是执行动态操作的非常强大的方式，例如基于对存储库的代码推送触发自动服务器和堆栈设置，以及定期扫描和自动报告。
- en: Setting up Rundeck
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Rundeck
- en: 'The following Ansible playbook will set up Rundeck on the Ubuntu 16.04 OS.
     It also adds the Rundeck service to start up the process:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Ansible playbook 将在 Ubuntu 16.04 操作系统上设置 Rundeck。它还添加了启动进程的 Rundeck 服务：
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To set up Rundeck, run the following command. Where `192.168.1.7` is the server
    IP address where Rundeck will install:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 Rundeck，请运行以下命令。其中 `192.168.1.7` 是 Rundeck 将安装在的服务器 IP 地址：
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once it is successfully executed, navigate the browser to `http://192.168.1.7:4440`
    and you can see the login panel for the Rundeck application. The default username
    and password to log in to Rundeck is `admin`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 成功执行后，在浏览器中导航至 `http://192.168.1.7:4440`，您将看到 Rundeck 应用程序的登录面板。登录到 Rundeck
    的默认用户名和密码是 `admin`：
- en: '![](img/c8287e07-3bd9-4c2c-93c0-f1101585a763.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8287e07-3bd9-4c2c-93c0-f1101585a763.png)'
- en: 'Now we can create a new project to start working on. Provide a new Project
    Name and go with the default settings for now:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个新项目开始工作。提供一个新的项目名称，并暂时使用默认设置：
- en: '![](img/08461d41-6711-4464-8591-a6d421ca287b.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/08461d41-6711-4464-8591-a6d421ca287b.png)'
- en: 'Now, we can add multiple hosts into Rundeck to perform multiple actions. The
    following screenshot shows an example of running the  `uname -a` command across
    multiple nodes, which matches `osArch: amd64`, we can also create filters for
    different use cases:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，我们可以将多个主机添加到 Rundeck 中执行多个操作。下面的屏幕截图显示了在多个节点上运行 `uname -a` 命令的示例，与 `osArch:
    amd64` 匹配，我们也可以为不同的用例创建过滤器：'
- en: '![](img/2d416d9a-ffe1-45d0-beb7-05149da3c0d1.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2d416d9a-ffe1-45d0-beb7-05149da3c0d1.png)'
- en: Using Rundeck, we can also schedule jobs to run at certain times and store the
    output in different formats. Rundeck also provides a REST API that can be integrated
    into the existing tool set.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Rundeck，我们还可以按照特定时间安排作业运行，并以不同的格式存储输出。Rundeck 还提供了可集成到现有工具集中的 REST API。
- en: Security automation use cases
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全自动化用例。
- en: 'Now that once we have the tools set up, let''s go through some of the standard
    tasks that allow us to do useful things with them. In case you haven''t noticed,
    we love lists. Here is a list of tasks that will prepare you to build layers of
    automation for the stuff that is important to you:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦我们设置好了工具，让我们来执行一些标准任务，以便让我们可以利用它们做一些有用的事情。如果你还没注意到，我们喜欢列表。以下是一些任务的列表，这些任务将使您能够为对您重要的事物构建自动化层：
- en: Adding playbooks or connecting your source code management (SCM) tools, such
    as GitHub/GitLab/BitBucket
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 playbooks 或连接您的源代码管理（SCM）工具，如 GitHub/GitLab/BitBucket。
- en: Authentication and data security
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 身份验证和数据安全。
- en: Logging output and managing reports for the automation jobs
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录输出和管理自动化作业的报告。
- en: Job scheduling
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作业调度。
- en: Alerting, notifications, and webhooks
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 警报、通知和 Webhooks。
- en: Adding playbooks
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 playbooks。
- en: When starting out, either we would like to add our custom playbooks to the IT
    automation tools or we may be adding them to SCM tools such as GitHub, GitLab,
    and BitBucket. We will configure and add our playbooks to all of the three tools
    being discussed here.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 刚开始时，我们可能希望将自定义 playbooks 添加到 IT 自动化工具中，或者可能将它们添加到 SCM 工具，如 GitHub、GitLab 和
    BitBucket 中。我们将配置并将我们的 playbooks 添加到这里讨论的所有三个工具中。
- en: Ansible Tower configuration
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible Tower 配置。
- en: Ansible Tower has multiple features to add playbooks to perform scheduling and
    execution. We will see how we can add custom written playbooks (manual) and add
    playbooks from version control systems such as Git. Pulling playbooks from  Ansible
    Galaxy as well. Ansible Galaxy is your hub for finding, reusing, and sharing the
    best Ansible content.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower 有多个功能可添加 playbooks 进行调度和执行。我们将看看如何添加自定义编写的 playbooks（手动）以及从 Git
    等版本控制系统添加 playbooks。还可以从 Ansible Galaxy 拉取 playbooks。Ansible Galaxy 是您查找、重用和共享最佳
    Ansible 内容的中心。
- en: To add playbooks into Ansible Tower, we have to start by creating projects,
    then select theSCM TYPE as Manual, and add the playbooks that already exist.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 playbooks 添加到 Ansible Tower 中，我们必须首先创建项目，然后选择 SCM 类型为 Manual，并添加已经存在的 playbooks。
- en: '**Warning**: There are no available playbook directories in `/var/lib/awx/projects`.
    Either that directory is empty, or all of the contents are already assigned to
    other projects. Create a new directory there and make sure the playbook files
    can be read by the `awx` system user, or have Tower directly retrieve your playbooks
    from source control using the SCM type option previously discussed.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告**：`/var/lib/awx/projects` 中没有可用的 playbook 目录。要么该目录为空，要么所有内容已分配给其他项目。在那里创建一个新目录，并确保
    `awx` 系统用户可以读取 playbook 文件，或者让 Tower 使用前面讨论过的 SCM 类型选项直接从源代码控制中检索您的 playbooks。'
- en: 'We can choose the SCM TYPE set to Git and provide a `github.com` URL pointing
    to a playbook:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择 SCM 类型设置为 Git，并提供指向 playbook 的 `github.com` URL：
- en: '![](img/554af815-f886-4992-9ff5-d82187098819.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/554af815-f886-4992-9ff5-d82187098819.png)'
- en: Git SCM to add playbooks into projects
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Git SCM 添加 playbooks 到项目中。
- en: We can also change the `PROJECTS_ROOT` under CONFIGURE TOWER to change this
    location.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在 CONFIGURE TOWER 下更改 `PROJECTS_ROOT` 来更改此位置。
- en: 'The added playbooks are executed by creating a job template. Then we can schedule
    these jobs (or) we can launch directly:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 添加的 playbooks 是通过创建作业模板来执行的。然后我们可以安排这些作业（或者）可以直接启动：
- en: 'Following is the screenshot of a new job template creation for playbook execution:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为 playbook 执行创建的新作业模板的屏幕截图：
- en: '**![](img/c33ce511-85d7-4df6-b2c0-5d1edf3052e8.png)**'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**![图片](img/c33ce511-85d7-4df6-b2c0-5d1edf3052e8.png)**'
- en: Playbook execution job template
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Playbook 执行作业模板。
- en: 'A job run is successful with output in the following screenshot:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe07b80e-0344-4855-a6f8-5f3e1dbdd6b0.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
- en: Playbook execution output in Ansible Tower
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins Ansible integration configuration
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not surprisingly, Jenkins supports SCM to use playbooks and local directories
    for manual playbooks too. This can be configured with the build options. Jenkins
    supports both ad-hoc commands and playbooks to trigger as a build (or) post-build
    action.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how we can point our repository and specify
    a branch as well. We can also specify credentials if we want to access private
    repositories:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c2733a7a-ebce-4801-8289-a147ebadb44a.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
- en: Adding Github (SCM) based playbooks for build
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we can add the Playbook path by specifying the location of the playbook
    and defining inventory and variables as required:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0028f394-5ea7-4bd2-be0d-5a599f72cd9c.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: Start playbook execution when build triggers
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can execute the Jenkins job by triggering the Jenkins build (or)
    we can integrate this with other tools:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bcef17b5-87e0-489b-a2a3-24e8c8ebac4c.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
- en: Jenkins build output of playbook execution
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Rundeck configuration
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rundeck supports adding custom playbooks, as well as SCM and many other options.
    The following screenshots show different options to add playbooks and modules
    in Rundeck using the jobs feature.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/525750e9-851f-4874-be36-3c44b66ec960.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: Rundeck has multiple options for us to choose from
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6e072793-3c21-494b-9ad5-e2befc0fa520.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
- en: Rundeck Ansible Playbook configuration for variables and keys
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8baeae91-7dfc-441e-be3b-becacc09fc15.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
- en: Rundeck job definition including overview of job details
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Authentication and  data security
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we talk about automation and working with systems, we should talk about
    security. We are going to keep talking about security automation as that is the
    title of the book.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the security features the tools offer include:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: RBAC (authentication and authorization)
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web application over TLS/SSL (security for data in motion)
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encryption for storing secrets (security for data at rest)
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RBAC for Ansible Tower
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ansible Tower supports RBAC to manage multiple users with different permissions
    and roles. It also supports **Lightweight Directory Access Protocol** (**LDAP**) integration
    in the enterprise version to support Active Directory. This feature allows us
    to create different levels of users for accessing Ansible Tower. For example:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: The operations team requires a system administrator role to perform playbook
    execution and other activities like monitoring
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The security team requires a system auditor role to perform audit check for
    compliance standards such as **Payment Card Industry Data Security Standard**
    (**PCI DSS**) or even internal policy validation
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Normal users, such as team members, might just want to see how things are going,
    in the form of status updates and failure (or) success of job status
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/10acb85d-52aa-4b55-8780-f959c561b05b.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: Users can be assigned to different types of roles
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以被分配到不同类型的角色
- en: TLS/SSL for Ansible Tower
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible Tower 的 TLS/SSL
- en: By default, Ansible Tower uses HTTPS using self-signed certificates at `/etc/tower/tower.cert`
    and `/etc/tower/tower.key`, these can be configured in the setup script. We can
    also update this later with the same filenames.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Ansible Tower 使用自签名证书在 `/etc/tower/tower.cert` 和 `/etc/tower/tower.key`
    上进行 HTTPS，这些可以在设置脚本中配置。以后我们也可以使用相同的文件名进行更新。
- en: For more information visit [http://docs.ansible.com/ansible-tower/latest/html/installandreference/install_notes_reqs.html#installation-notes](http://docs.ansible.com/ansible-tower/latest/html/installandreference/install_notes_reqs.html#installation-notes).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 获取更多信息，请访问 [http://docs.ansible.com/ansible-tower/latest/html/installandreference/install_notes_reqs.html#installation-notes](http://docs.ansible.com/ansible-tower/latest/html/installandreference/install_notes_reqs.html#installation-notes)。
- en: Encryption and data security for Ansible Tower
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible Tower 的加密和数据安全
- en: Ansible Tower has been created with built-in security for handling encryption
    of credentials that includes passwords and keys. It uses Ansible Vault to perform
    this operation. It encrypts passwords and key information in the database.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower 已经创建了内置安全性，用于处理包括密码和密钥在内的凭据的加密。它使用 Ansible Vault 执行此操作。它将数据库中的密码和密钥信息进行加密。
- en: Read more at [http://docs.ansible.com/ansible-tower/latest/html/userguide/credentials.html](http://docs.ansible.com/ansible-tower/latest/html/userguide/credentials.html).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多请访问 [http://docs.ansible.com/ansible-tower/latest/html/userguide/credentials.html](http://docs.ansible.com/ansible-tower/latest/html/userguide/credentials.html)。
- en: RBAC for Jenkins
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins 的 RBAC
- en: 'In Jenkins, which is a more generic tool, we can extend its functionality by
    using a plugin. The Role Strategy Plugin is a community plugin to manage roles
    for Jenkins. Using it, we can create different access level controls for users
    and groups:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Jenkins 中，这是一个更通用的工具，我们可以通过使用插件来扩展其功能。Role Strategy Plugin 是一个管理 Jenkins 角色的社区插件。使用它，我们可以为用户和组创建不同的访问级别控制：
- en: '![](img/c745e9a1-51da-4ea4-bb21-0d3b65ed6b4c.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c745e9a1-51da-4ea4-bb21-0d3b65ed6b4c.png)'
- en: Role strategy plugin of Jenkins
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 的角色策略插件
- en: Roles usually need to align with the team settings and business requirements.
    You may want to fine-tune this per your requirements.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 角色通常需要与团队设置和业务要求保持一致。您可能希望根据您的要求进行微调。
- en: Read more at [https://wiki.jenkins.io/display/JENKINS/Role+Strategy+Plugin](https://wiki.jenkins.io/display/JENKINS/Role+Strategy+Plugin).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多请访问 [https://wiki.jenkins.io/display/JENKINS/Role+Strategy+Plugin](https://wiki.jenkins.io/display/JENKINS/Role+Strategy+Plugin)。
- en: TLS/SSL for Jenkins
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins 的 TLS/SSL
- en: By default, Jenkins runs as plain old HTTP. To enable HTTPS, we can use a reverse
    proxy, such as Nginx, in front of Jenkins to serve as HTTPS.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Jenkins 作为普通的 HTTP 运行。要启用 HTTPS，我们可以使用反向代理，例如 Nginx，在 Jenkins 前端充当 HTTPS
    服务。
- en: For reference, visit [https://www.digitalocean.com/community/tutorials/how-to-configure-jenkins-with-ssl-using-an-nginx-reverse-proxy](https://www.digitalocean.com/community/tutorials/how-to-configure-jenkins-with-ssl-using-an-nginx-reverse-proxy).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 有关参考，请访问 [https://www.digitalocean.com/community/tutorials/how-to-configure-jenkins-with-ssl-using-an-nginx-reverse-proxy](https://www.digitalocean.com/community/tutorials/how-to-configure-jenkins-with-ssl-using-an-nginx-reverse-proxy)。
- en: Encryption and data security for Jenkins
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins 的加密和数据安全
- en: We are using Jenkins' default credential feature. This will store the keys and
    passwords in the local filesystem. There are also different plugins available
    for Jenkins to handle this, such as [https://wiki.jenkins.io/display/JENKINS/Credentials+Plugin](https://wiki.jenkins.io/display/JENKINS/Credentials+Plugin).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用 Jenkins 的默认凭据功能。这将把密钥和密码存储在本地文件系统中。还有不同的 Jenkins 插件可用于处理此问题，例如 [https://wiki.jenkins.io/display/JENKINS/Credentials+Plugin](https://wiki.jenkins.io/display/JENKINS/Credentials+Plugin)。
- en: 'The following screenshot is a reference to show how we can add credentials
    in Jenkins:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是一个参考，显示了我们如何在 Jenkins 中添加凭据：
- en: '![](img/0c385f10-eced-4595-8d00-6e8fcfab0550.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c385f10-eced-4595-8d00-6e8fcfab0550.png)'
- en: RBAC for Rundeck
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rundeck 的 RBAC
- en: Rundeck also provides RBAC as Ansible Tower. Unlike Tower, here we have to configure
    using the YAML configuration file in `/etc/rundeck/`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Rundeck 也提供了 RBAC，就像 Ansible Tower 一样。与 Tower 不同，在 `/etc/rundeck/` 中我们必须使用 YAML
    配置文件进行配置。
- en: 'The following code snippet is an example of creating an admin user policy:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段是创建管理员用户策略的示例：
- en: '[PRE7]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For more information about creating different policies, visit [http://rundeck.org/docs/administration/access-control-policy.html](http://rundeck.org/docs/administration/access-control-policy.html).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 有关创建不同策略的更多信息，请访问 [http://rundeck.org/docs/administration/access-control-policy.html](http://rundeck.org/docs/administration/access-control-policy.html)。
- en: HTTP/TLS for Rundeck
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rundeck 的 HTTP/TLS
- en: 'HTTPS can be configured for Rundeck using the `/etc/rundeck/ssl/ssl.properties`
    file:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '可以使用 `/etc/rundeck/ssl/ssl.properties` 文件为 Rundeck 配置 HTTPS： '
- en: '[PRE8]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For more information, visit [http://rundeck.org/docs/administration/configuring-ssl.html](http://rundeck.org/docs/administration/configuring-ssl.html).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请访问 [http://rundeck.org/docs/administration/configuring-ssl.html](http://rundeck.org/docs/administration/configuring-ssl.html)。
- en: Encryption and data security for Rundeck
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rundeck 的加密和数据安全
- en: Credentials, such as password and keys, are stored in local storage and encrypted
    and use the Rundeck key store to encrypt and decrypt. This also supports different
    key store plugins to use key storage, such as the storage converter plugin. Access
    to the keys in the storage facilities is restricted by use of the **access** **control
    list** (**ACL**) policies.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 凭证，例如密码和密钥，存储在本地存储中并加密，使用 Rundeck 密钥存储进行加密和解密。这还支持使用不同的密钥存储插件来使用密钥存储，例如存储转换器插件。对存储设施中的密钥的访问受到
    **访问控制列表** (**ACL**) 策略的限制。
- en: Output of the playbooks
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: playbooks 的输出
- en: Once the automation jobs have finished, we would like to know what happened.
    Did they run completely, were there any errors faced, and so on. We would like
    to know where can we see the output of the playbooks executing and if any other
    logs that get created.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦自动化作业完成，我们想知道发生了什么。它们是否完全运行，是否遇到任何错误等。我们想知道在哪里可以看到执行 playbooks 的输出以及是否创建了任何其他日志。
- en: Report management for Ansible Tower
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible Tower 的报告管理
- en: By default, Ansible Tower itself is a reporting platform for the status of the
    playbooks, job executions, and inventory collection. The Ansible Tower dashboard
    gives an overview of the total projects, inventories, hosts, and status of the
    jobs.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Ansible Tower 本身是 playbooks、作业执行和清单收集状态的报告平台。Ansible Tower 仪表板提供了项目总数、清单、主机和作业状态的概览。
- en: The output can be consumed in the dashboard, standard out, or by using the REST
    API and we can get this via `tower-cli` command line tool as well, which is just
    a pre-built command line tool for interfacing with the REST API.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 输出可以在仪表板、标准输出中使用，也可以通过 REST API 获取，并且我们也可以通过 `tower-cli` 命令行工具获取，这只是一个用于与 REST
    API 交互的预构建命令行工具。
- en: '![](img/b8421697-957d-4527-a83c-bd6fe22d6635.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8421697-957d-4527-a83c-bd6fe22d6635.png)'
- en: Ansible Tower dashboard
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower 仪表板
- en: '![](img/ae0d5c7e-73d7-4508-aa80-ed924e9c1699.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0d5c7e-73d7-4508-aa80-ed924e9c1699.png)'
- en: Ansible Tower standard output
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower 的标准输出
- en: '![](img/adfa2820-d792-48fb-8012-0e03a7eb070f.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/adfa2820-d792-48fb-8012-0e03a7eb070f.png)'
- en: Ansible Tower REST API
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Tower REST API
- en: Report management for Jenkins
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins 的报告管理
- en: Jenkins provides both standard output and REST API for managing reporting. Jenkins
    has a very large community and there are multiple plugins available, such as HTML
    Publisher Plugin and Cucumber Reports Plugin.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 提供了用于管理报告的标准输出和 REST API。Jenkins 拥有一个庞大的社区，有多个可用的插件，例如 HTML Publisher
    Plugin 和 Cucumber Reports Plugin。
- en: 'These plugins provide visual representation of the output:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这些插件提供了输出的可视化表示：
- en: '![](img/15fd8b11-130c-42e3-9def-8c0b684f6d18.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15fd8b11-130c-42e3-9def-8c0b684f6d18.png)'
- en: Standard output by the Jenkins job console
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 作业控制台的标准输出
- en: Report management for Rundeck
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rundeck 的报告管理
- en: 'Rundeck also provides both a standard output and a REST API to query the results:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Rundeck 还提供了标准输出和 REST API 来查询结果：
- en: '![](img/f50f2cbf-da86-4ca6-ac4f-184e84d63b84.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f50f2cbf-da86-4ca6-ac4f-184e84d63b84.png)'
- en: Output of a job that can be consumed via stdout, TXT, and HTML formats
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 stdout、TXT 和 HTML 格式消耗的作业输出
- en: Scheduling of jobs
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业的调度
- en: The scheduling of jobs is simple and straightforward in Ansible Tower. For a
    job, you can specify a schedule and the options are mostly like cron.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ansible Tower 中，作业的调度简单而直接。对于一个作业，你可以指定一个时间表，选项大多类似于 cron。
- en: For example, you can say that you have a daily scan template and would like
    it to be executed at 4 a.m. every day for the next three months. This kind of
    schedule makes our meta automation very flexible and powerful.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以说你有一个每天扫描的模板，并希望在未来三个月的每天上午 4 点执行它。这种类型的时间表使我们的元自动化非常灵活和强大。
- en: Alerting, notifications, and webhooks
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 警报、通知和 webhook
- en: 'Tower supports multiple ways of alerting and notifying users as per configuration.
    This can even be configured to make an HTTP `POST` request to a URL of your choice
    using a webhook:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Tower 支持多种方式的警报和通知用户按配置。甚至可以配置它使用 webhook 向您选择的 URL 发送 HTTP `POST` 请求：
- en: '![](img/de4acb14-dd56-484a-9dc7-3092d583ff66.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/de4acb14-dd56-484a-9dc7-3092d583ff66.png)'
- en: Ansible Tower notification using slack webhook
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 slack webhook 的 Ansible Tower 通知
- en: Summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We completed a whirlwind tour of some IT automation and scheduler software.
    Our main aim was to introduce the software and highlight some of its common features.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快速浏览了一些 IT 自动化和调度软件。我们的主要目的是介绍该软件并突出其一些常见功能。
- en: 'These features include the following:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能包括以下内容：
- en: Offering encryption for our secrets
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的秘密提供加密
- en: Running as per our schedule requirements
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据我们的时间表要求运行
- en: The ability to get good reports
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获得良好报告的能力
- en: We already know about Ansible roles that allow us to reuse and create great
    playbooks. Coupled with these features, we have a complete automation system ready.
    Not only we will be able to run our tasks and jobs as many times as we like, we
    will get updates on how they ran. Also, since our tasks run on protected servers,
    it is important that the secrets we share for them to run are safe as well.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了允许我们重复使用和创建出色 playbooks 的 Ansible 角色。结合这些功能，我们有一个完整的自动化系统准备好了。我们不仅能够随意运行我们的任务和作业多次，还会得到关于它们运行情况的更新。此外，由于我们的任务在受保护的服务器上运行，因此重要的是我们分享的用于运行的秘密也是安全的。
- en: In the next chapter, we move away from thinking about the mechanics of Ansible
    automation to squarely thinking about security automation in specific situations.
    Automating our server's patches is the most obvious, and possibly popular, requirement.
    We will apply security automation techniques and approaches to set up a hardened
    WordPress and enable encrypted backups.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将不再考虑 Ansible 自动化的机制，而是直接思考特定情况下的安全自动化。自动化服务器的补丁是最明显、可能也是最受欢迎的需求。我们将应用安全自动化技术和方法来设置一个强化的
    WordPress，并启用加密备份。
