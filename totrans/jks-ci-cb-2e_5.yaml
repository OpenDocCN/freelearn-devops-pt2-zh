- en: Chapter 5. Using Metrics to Improve Quality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Estimating the value of your project through Sloccount
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking for "smelly" code through code coverage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activating more PMD rulesets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom PMD rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding bugs with FindBugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling extra FindBug rules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding security defects with FindBugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying HTML validity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reporting with JavaNCSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking style using an external pom.xml file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faking Checkstyle results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Jenkins with SonarQube
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing project data with the R plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Some of the build files and code have deliberate mistakes, such as bad naming
    conventions, poor coding structures, or platform-specific encoding.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: These defects exist to give Jenkins a target to fire tests against.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explores the use of Jenkins plugins to display code metrics and
    fail builds. Automation lowers costs and improves consistency. The process does
    not get tired. If you decide the success and failure criteria before a project
    starts, then this will remove a degree of subjective debate from release meetings.
  prefs: []
  type: TYPE_NORMAL
- en: In 2002, NIST estimated that software defects were costing America around 60
    billion dollars per year ([http://www.abeacha.com/NIST_press_release_bugs_cost.htm](http://www.abeacha.com/NIST_press_release_bugs_cost.htm)).
    Expect the cost to have increased considerably since.
  prefs: []
  type: TYPE_NORMAL
- en: To save money and improve quality, you need to remove defects as early in the
    software lifecycle as possible. The Jenkins test automation creates a safety net
    of measurements. Another key benefit is that, once you have added tests, it is
    easy to develop similar tests for other projects.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins works well with best practices such as **Test Driven Development** (**TDD**)
    or **Behavior Driven Development** (**BDD**). Using TDD, you write tests that
    fail first and then build the functionality needed to pass the tests. With BDD,
    the project team writes the description of tests in terms of behavior. This makes
    the description understandable to a wider audience. The wider audience has more
    influence over the details of the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Regression tests increase confidence that you have not broken code while refactoring
    software. The more coverage of code by tests, the more confidence. The recipe
    *Looking for "smelly" code through code coverage* shows you how to measure coverage
    with Cobertura ([https://cobertura.github.io/cobertura/](https://cobertura.github.io/cobertura/)).
    A similar framework is Emma ([http://emma.sourceforge.net/](http://emma.sourceforge.net/)).
    You will also find recipes on static code review through PMD and FindBugs. Static
    means that you can look at the code without running it. PMD looks at the `.java`
    files for particular bug patterns. It is relatively easy to write new bug detection
    rules using the PMD rules designer. FindBugs scans the compiled `.class` files;
    you can review the application `.jar` files directly. FindBugs rules are accurate,
    mostly pointing at real defects. In this chapter, you will use FindBugs to search
    for security defects and PMD to search for design rule violations.
  prefs: []
  type: TYPE_NORMAL
- en: Also mentioned in this chapter is the use of Java classes with known defects.
    We will use the classes to check the value of the testing tools. This is a similar
    approach to benchmarks for virus checkers, where virus checkers parse files with
    known virus signatures. The advantage of injecting known defects is that you get
    to understand the rules that are violated. This is a great way to collect real
    defects found in your projects, and to characterize and reuse real defects. Consider
    adding your own classes to projects to see if the QA process picks up the defects.
  prefs: []
  type: TYPE_NORMAL
- en: Good documentation and source code structure aid the maintainability and readability
    of your code. Sun coding conventions enforce a consistent standard across projects.
    In this chapter, you will use Checkstyle and JavaNCSS to measure your source code
    against Sun coding conventions ([http://www.oracle.com/technetwork/java/codeconventions-150003.pdf](http://www.oracle.com/technetwork/java/codeconventions-150003.pdf)).
  prefs: []
  type: TYPE_NORMAL
- en: The results generated by the Jenkins plugins can be aggregated into one report
    through the violations plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Violations](https://wiki.jenkins-ci.org/display/JENKINS/Violations)).
    There are other plugins specific to a given tool, for example for PMD or FindBugs
    plugins. The plugins are supported by the Analysis Collector plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Analysis+Collector+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Analysis+Collector+Plugin)),
    which aggregates the other reports into a consistent whole. The individual plugin
    reports can be displayed through the Portlets dashboard plugin, which was discussed
    in the *Saving screen space with the Dashboard View plugin* recipe in [Chapter
    4](ch04.html "Chapter 4. Communicating Through Jenkins"), *Communicating Through
    Jenkins*.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins is not limited to testing Java; a number of plugins such as SLOCCount
    or the DRY plugin (it spots duplication of code) are language-agnostic. There
    is even specific support for NUnit testing in .NET or compilation to other languages.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'NUnit, JUnit, RUnit, and several other unit testing frameworks follow the xUnit
    standard. For a detailed overview review the Wikipedia entry: [http://en.wikipedia.org/wiki/XUnit](http://en.wikipedia.org/wiki/XUnit)'
  prefs: []
  type: TYPE_NORMAL
- en: If you are missing specific functionality, you can always build your own Jenkins
    plugin as detailed in [Chapter 7](ch07.html "Chapter 7. Exploring Plugins"), *Exploring
    Plugins*.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of good introductions to software metrics. These include
    a wikibook on the details of the metrics ([http://en.wikibooks.org/wiki/Introduction_to_Software_Engineering/Quality/Metrics](http://en.wikibooks.org/wiki/Introduction_to_Software_Engineering/Quality/Metrics))
    and a well written book by Diomidis Spinellis, *Code Quality: The Open Source
    Perspective*.'
  prefs: []
  type: TYPE_NORMAL
- en: In the *Integrating Jenkins with SonarQube* recipe of this chapter, you will
    link Jenkins projects to Sonar reports. Sonar is a specialized tool that collects
    software metrics and breaks them down into an understandable report. Sonar details
    the quality of a project. It uses a wide range of metrics including the results
    of tools such as FindBugs and PMD mentioned in this chapter. The project itself
    is evolving rapidly. Consider using Jenkins for early warnings and to spot obvious
    defects such as a bad commit. You can then use Sonar for a deeper review.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you will run R code that parses all the files in a project and reports
    simple metrics. This custom process is easily adapted for complex analyses based
    on the wealth of statistical packages included in the R language.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the time of writing, both the FindBugs and PMD Jenkins plugins require a
    specific version of Maven. As an administrator, you can install the Maven version
    automatically through the main configuration screen (`http://hostname/configure`)
    under the **Maven** section by pressing the **Add Maven** button. Later when you
    create a job, Jenkins will give you a choice of Maven versions.
  prefs: []
  type: TYPE_NORMAL
- en: When dealing with multimodule Maven projects, the Maven plugins generate a series
    of results. The Maven project type rigidly assumes the results are stored in conventional
    locations, but this does not always happen consistently. With free-style projects,
    you can explicitly tell Jenkins plugins where to find the results using regular
    expressions that are consistent with Ant filesets ([http://ant.apache.org/manual/Types/fileset.html](http://ant.apache.org/manual/Types/fileset.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Estimating the value of your project through sloccount
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way to gain insight into the value of a project is to count the number of
    lines of code in the project and divide the count between code languages. SLOCCount
    pronounced "sloc-count" written by Dr. David Wheeler ([http://www.dwheeler.com/sloccount/](http://www.dwheeler.com/sloccount/))
    is a command-line tool suite for counting physical source lines of code (SLOC)
    in potentially large software systems. From these metrics, you can estimate how
    many hours it would take to write the code and the estimated development costs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Install the SLOCCount plugin ([https://wiki.jenkins-ci.org/display/JENKINS/SLOCCount+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/SLOCCount+Plugin)).
    Create a new directory for this recipe''s code. Install SLOCCount on the Jenkins
    instance as mentioned at [http://www.dwheeler.com/sloccount](http://www.dwheeler.com/sloccount).
    If you are running a Debian OS, the following installation command will work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For details on how to install SLOCCount on other systems, please review: [http://www.dwheeler.com/sloccount/sloccount.html](http://www.dwheeler.com/sloccount/sloccount.html)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a free-style project and name it `ch5.quality.sloccount`. Add `SLOCCOUNT
    REPORT Project` as the description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the **Source Code Management** section, check **Subversion**, adding
    for the **Repository URL**: [https://source.sakaiproject.org/svn/shortenedurl/trunk](https://source.sakaiproject.org/svn/shortenedurl/trunk).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **Build** section, select **Execute shell** from the **Add build**
    step. Add the `/usr/bin/sloccount --duplicates --wide --details . >./sloccount.sc
    command`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Post-build Actions** section, check the **Publish SLOCCount analysis
    results** adding to the text input **SLOCCount reports**, `sloccount.sc`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the job and review the details. You will now see an overview in the relevant
    language, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the top level, you will also see a time series of how the lines of code
    per language evolve over time. It is useful for managers that need to estimate
    the resources needed to complete projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The report also allows you to drill down into specific files. The larger the
    file, the easier it is for a developer to lose track of the meaning of the code.
    If you see a particularly large file then it might be worth reviewing, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To compare the report you generated with the wider Sakai project, visit [https://www.openhub.net/p/sakai#](https://www.openhub.net/p/sakai#).
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe pulls in realistic code, a Java-based service that makes shortened
    URLs ([https://confluence.sakaiproject.org/display/SHRTURL](https://confluence.sakaiproject.org/display/SHRTURL)).
    The Jenkins plugin converts the results generated by SLOCCount into detailed information.
    The report is divided into a four-tabbed table summed and sorted by files, modules,
    folders, and languages. From this information, you can estimate the degree of
    effort it would take to recreate the project from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: The description of the job includes a URL pointing to open hub ([http://blog.openhub.net/2014/07/black-duck-open-hub/](http://blog.openhub.net/2014/07/black-duck-open-hub/)),
    a trusted third-person service. Open hub is a well-known service with well-described
    privacy rules ([http://blog.openhub.net/privacy/](http://blog.openhub.net/privacy/)).
    However, if you do not have complete trust in the reputation of a third-party
    service, then don't link in through a Jenkins description.
  prefs: []
  type: TYPE_NORMAL
- en: 'Information about the Sakai Learning Management System can be found by visiting
    [https://www.openhub.net/p/sakai#](https://www.openhub.net/p/sakai#). The shortened
    URL service is one small part of this whole. The combined statistics allow visitors
    to gain a better understanding of the wider context, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/0082OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here are a few more details to consider.
  prefs: []
  type: TYPE_NORMAL
- en: Software cost estimation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SLOCCount uses the COCOMO model ([http://en.wikipedia.org/wiki/COCOMO](http://en.wikipedia.org/wiki/COCOMO))
    to estimate the cost of projects. You will not see this in the Jenkins report,
    but you can generate the estimated costs if you run SLOCCount from the command
    line.
  prefs: []
  type: TYPE_NORMAL
- en: Cost is estimated as `effort * personcost * overhead`.
  prefs: []
  type: TYPE_NORMAL
- en: The element that changes most over time is person cost (in dollars). You can
    change the value with the command-line argument `–personcost`.
  prefs: []
  type: TYPE_NORMAL
- en: Goodbye Google code search; hello code.ohoh.net
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Google has announced that it has closed its source code search engine. Luckily,
    [code.ohloh.net](http://code.ohloh.net) (formerly [koders.com](http://koders.com)),
    another viable search engine, announced that it will provide coverage of the code
    bases described at [ohloh.net](http://ohloh.net). With this search engine, you
    will be able to review a significant selection of open source projects. The search
    engine complements the code you can search for within your favorite online repositories
    such as GitHub and Bitbucket.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Knowing your audience with Google Analytics* recipe in [Chapter 4](ch04.html
    "Chapter 4. Communicating Through Jenkins"), *Communicating Through Jenkins*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Analyzing project data with the R plugin* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking for "smelly" code through code coverage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses **Cobertura** ([http://cobertura.sourceforge.net/](http://cobertura.sourceforge.net/))
    to find code that is not covered by unit tests.
  prefs: []
  type: TYPE_NORMAL
- en: Without consistent practice, writing unit tests will become as difficult as
    writing debugging information to `stdout`. Most popular Java-specific IDEs have
    inbuilt support for running unit tests. Maven runs them as part of the test goal.
    If your code does not have regression tests, the code is more likely to break
    during refactoring. Measuring code coverage can be used to search for hotspots
    of non-tested code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For more information you can review: [http://onjava.com/onjava/2007/03/02/statement-branch-and-path-coverage-testing-in-java.html](http://onjava.com/onjava/2007/03/02/statement-branch-and-path-coverage-testing-in-java.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the Cobertura code coverage plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Cobertura+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Cobertura+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Generate a template project by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the code coverage of the unmodified project with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Review the output from Maven. It will look similar to the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In a web browser, view `/target/site/cobertura/index.html`. Notice there is
    no code coverage, as shown in the following screenshot:![How to do it...](img/0082OS_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following content to `src/main/java/nl/berg/packt/coverage/Dicey.java`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `src/test/java/nl/berg/packt/coverage/AppTest.java` to instantiate a
    new `Dicey` object by changing the `testApp()` method to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the code coverage of the JUnit tests with the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Review the Maven output, noticing that `println` from within the `Dicey` constructor
    is also included:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In a web browser, open `view /target/site/cobertura/index.html`. Your project
    now has code coverage and you can see which lines of code have not yet been called,
    as shown in the following screenshot:![How to do it...](img/0082OS_05_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following **build** section to your `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test the code coverage of the JUnit tests with the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit the location `target/site/cobertura,` noting that results are now also
    being stored in `coverage.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `mvn clean` to remove the target directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the Maven project to your subversion repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new **Maven** job named `ch5.quality.coverage`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Source Code Management** section, check **Subversion** and add your
    repository location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Build** section under **Goals and options** add `clean cobertura:cobertura`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **Post-Build actions** section check **Publish Cobertura Coverage
    Report**. For the Cobertura xml report pattern input add `**/target/site/cobertura/coverage.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Build Now** twice for the job, to generate a trend and then review
    the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The trend graph is a line plot of the percentage of classes, conditions (such
    as branches of `if` statements), files, lines of code, methods, and packages covered.
    Jenkins displays each type with a different colored line, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_05_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cobertura instruments Java bytecode during compilation. The Maven plugin generates
    both an HTML and XML report. The HTML report allows you to quickly review the
    code status from the command line. The XML report is needed for parsing by the
    Jenkins plugin.
  prefs: []
  type: TYPE_NORMAL
- en: You placed the plugin configuration in the **build** section rather than the
    reporting section to avoid having to run the **site** goal with its extra phases.
  prefs: []
  type: TYPE_NORMAL
- en: The free-style project was used so that the Cobertura plugin picks up multiple
    XML reports. This was defined by the fileset `**/target/site/cobertura/coverage.xml`,
    which states that any report is called `coverage.xml` under any `target/site/cobertura`
    directory underneath the workspace.
  prefs: []
  type: TYPE_NORMAL
- en: Maven ran `clean cobertura:cobertura`. The `clean` goal removes all target directories,
    including any previously compiled and instrumented code. The `cobertura:cobertura`
    goal compiles and instruments the code, runs unit tests, and then generates a
    report.
  prefs: []
  type: TYPE_NORMAL
- en: The `testApp` unit test called the constructor for the `Dicey` class. The constructor
    randomly generates a number from 1 to 6, which mimics a dice, and then chooses
    between two branches of an `if` statement. The cobertura report allows you to
    zoom in to the source code and discover which choice was made. The report is good
    for identifying missed tests. If you refactor the code, you will not have unit
    tests in these areas to spot when the code accidentally changes behavior. The
    report is also good at spotting code of greater complexity than its surroundings.
    The more complex the code, the harder it is to understand and the easier it is
    to introduce mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following article is a great example of how to use cobertura and the meaning
    behind the generated metrics: [http://www.ibm.com/developerworks/java/library/j-cq01316/index.html?ca=drs](http://www.ibm.com/developerworks/java/library/j-cq01316/index.html?ca=drs).'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An alternative open source tool to Cobertura is Emma ([http://emma.sourceforge.net](http://emma.sourceforge.net)).
    Emma also has an associated Jenkins plugin [https://wiki.jenkins-ci.org/display/JENKINS/Emma+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Emma+Plugin).
    In Maven, you do not have to add any configuration to the `pom.xml` file. You
    simply need to run the goals `clean emma:emma package` and point the Jenkins plugin
    at the results.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another alternative framework is Jacoco ([http://www.eclemma.org/index.html](http://www.eclemma.org/index.html)).
    Jacoco is designed as a descendant of Emma. You can find a full description of
    its Jenkins plugin at: [https://wiki.jenkins-ci.org/display/JENKINS/JaCoCo+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/JaCoCo+Plugin).'
  prefs: []
  type: TYPE_NORMAL
- en: Activating more PMD rulesets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PMD has rules for capturing particular bugs. It bundles those rules into rulesets.
    For example, there is a ruleset with a theme about Android programming and another
    for code size or design. By default, three non-controversial PMD rulesets are
    measured:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic**: This ruleset has obvious practices that every developer should follow,
    such as don''t ignore the exceptions that are caught'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unused code**: This ruleset finds code that is never used, and lines that
    can be eliminated, avoiding waste and aiding readability'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Imports**: This ruleset spots unnecessary imports'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe shows you how to enable more rules. The main risk is that the extra
    rules generate a lot of false positives, making it difficult to see real defects.
    The benefit is that you will capture a wider range of defects, some of which are
    costly if they get to production.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the Jenkins PMD plugin ([https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Jenkins bug [Jenkins-22252]**'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://issues.jenkins-ci.org/browse/JENKINS-22252](https://issues.jenkins-ci.org/browse/JENKINS-22252)'
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Maven 3.2.1 in combination with Jenkins does not work
    with the PMD plugin. The short-term solution is to use Maven 3.0.5 in your build.
    However, by the time you read this warning, I expect the issue to have been resolved.
  prefs: []
  type: TYPE_NORMAL
- en: You can automatically install different versions of Java, Maven, or Ant from
    Jenkins' main configuration screen (`http://localhost:8080/configure`)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Generate a template project by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Java class `src/main/java/nl/berg/packt/pmd/PMDCandle.java` with the
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test your unmodified project with the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Review the directory target, and you will notice the results `java-basic.xml`,
    `java-imports.xml`, `java-unusedcode.xml`, and the aggregated results `pmd.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the `target/site/pmd.html` file in a web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following reporting section to your `pom.xml file`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test your project with the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: View in a web browser the file `target/site/pmd.html`, noticing that extra violations
    have now been found. This is due to the extra rules added to the `pom.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `mvn clean` to remove the `target` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the source code to your subversion repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new **Maven** Jenkins job named `ch5.quality.pmd` with the following
    details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Source Code Management** | **Subversion**: your repository'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build** | **Goals and options**: `clean pmd:pmd`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build Settings**: **Publish PMD analysis results**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Build Now** twice for the job to generate a trend. Review the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The top level report summarizes the number of defects and their priorities.
    It also mentions some of the details underneath, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can then zoom into the code and look at the highlighted areas for defects:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Maven PMD plugin tests a wide range of rulesets. When you download the
    binary package from the PMD website ([http://pmd.sourceforge.net/](http://pmd.sourceforge.net/)),
    you can find the paths of the rulesets by listing the content of the `pmd.jar`
    file. Under a *NIX system the command to do this is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You added a standard candle, a Java class with known defects that trigger PMD
    warnings. For example, there are multiple defects in the following two lines of
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The most significant defect is that a Java programmer needs to place the literal
    first to avoid a `NullPointerException`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Placing the literal first returns false when `myString` is `null`. There is
    an issue with the lack of braces around the `if` statement. The same holds true
    for the lack of a command to run when the `if` statement is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another trivial example is hard-coding infrastructural details into your source.
    For example, passwords, IP addresses, and usernames. It is far better to move
    the details out into property files that reside only on the deployment server.
    The following line tests PMD for its ability to find this type of defect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Both FindBugs and PMD have their own set of bug pattern detectors. Neither will
    capture the full range of defects. It is therefore worth running both tools to
    capture the widest range of defects. For a review of both products, visit [http://www.freesoftwaremagazine.com/articles/destroy_annoying_bugs_part_1](http://www.freesoftwaremagazine.com/articles/destroy_annoying_bugs_part_1).
  prefs: []
  type: TYPE_NORMAL
- en: A couple of other static code review tools you may be interested in are QJPro
    ([http://qjpro.sourceforge.net/](http://qjpro.sourceforge.net/)) and Jlint ([http://jlint.sourceforge.net/](http://jlint.sourceforge.net/)).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Out-of-the-box, PMD tests for a sensible set of bug defects; however, each project
    is different and you will need to tweak.
  prefs: []
  type: TYPE_NORMAL
- en: Throttling down PMD rulesets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to understand the importance of the rulesets and shape the Maven
    configuration to include only the useful ones. If you do not do this for a medium
    size project, the report will include thousands of violations hiding the real
    defects. The report will then take time to render in your web browser. Consider
    enabling a long list of rules only if you want to use the volume as an indicator
    of project maturity.
  prefs: []
  type: TYPE_NORMAL
- en: To throttle down, exclude parts of your code and systematically clean up the
    areas reported.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can find the current PMD rulesets at: [http://pmd.sourceforge.net/rules/index.html](http://pmd.sourceforge.net/rules/index.html)'
  prefs: []
  type: TYPE_NORMAL
- en: The Don't Repeat Yourself principle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cut and paste programming, cloning, and then modifying code makes for a refactoring
    nightmare. If code is not properly encapsulated it is easy to have slightly different
    pieces scattered across your code base. If you then want to remove known defects,
    it will require extra effort.
  prefs: []
  type: TYPE_NORMAL
- en: PMD supports the Don't Repeat Yourself (DRY) principle by finding duplicate
    code. The trigger point is configured through the `minimumTokens` tag. However,
    the PMD plugin does not pick up the results (stored in `cpd.xml`). You will either
    need to install and configure the DRY plugin ([https://wiki.jenkins-ci.org/display/JENKINS/DRY+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/DRY+Plugin))
    or the Jenkins violations plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have downloaded the PMD binary from its website ([http://sourceforge.net/projects/pmd/files/pmd/](http://sourceforge.net/projects/pmd/files/pmd/)),
    then in the bin directory you'll find `cpdgui`. It is a Java swing application
    that allows you to explore your source code for duplications.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating custom PMD rules* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Analyzing project data with the R plugin* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom PMD rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PMD has two extra features when compared to other static code review tools.
    The first is the `cpdgui` tool that allows you to look for code that has been
    cut and pasted from one part of the code base to another. The second, and the
    one we will explore in this recipe, is the ability to design custom bug discovery
    rules for Java source code using Xpath.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that you have installed the Jenkins PMD plugin ([https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/PMD+Plugin)).
    Download and unpack the PMD distribution from [http://pmd.sourceforge.net](http://pmd.sourceforge.net).
    Visit the PMD bin directory and verify that you have the start-up scripts `run.sh
    designer` and `designer.bat`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a Maven project from the command line using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `pom.xml` file just before the `</project>` tag add a `reporting` section
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe will only work for version 2.6.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the top level directory, create the file `password_ruleset.xml` with the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit `src/main/java/nl/berg/packt/pmdrule/App.java` so that the main method
    is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Depending on your operating system, run the pmd designer using either the startup
    script `bin/run.sh designer` or `bin/designer.bat`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **JDK** option at the top-left of the screen, selecting **JDK 1.6**
    as the Java version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Source Code** text area, add the example code you want to test against.
    In this example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the **Query (if any**) text area, add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click on **Go**. You will now see the result **ASTVariableDeclarorID at line
    2 column 20**, as shown in the following screenshot:![How to do it...](img/0082OS_05_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the **Actions** menu option at the top of the screen, select **Create
    rule XML**. Add the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Rule name**: No password'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rule msg**: If we see a password we should flag'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rule desc**: Let''s find stupid password examples'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on **Create rule XML**. The generated XML should have a fragment similar
    to:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/0082OS_05_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Copy and-paste the generated code into `password_ruleset.xml` just before `</ruleset>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit the project to your subversion repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Jenkins, create a **Maven** job named `ch5.quality.pmdrule`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Source Code Management** section, check **Subversion,** adding for
    the **Repository URL** your subversion repository location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **build** section for **Goals and Options** set the value to `clean
    site`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Build Settings** section, check **Publish PMD analysis results**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the **PMD Warnings** link, as shown in the following screenshot:![How
    to do it...](img/0082OS_05_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PMD analyzes source code and breaks it down into meta data known as an Abstract
    Syntax Tree (AST) ([http://onjava.com/pub/a/onjava/2003/02/12/static_analysis.html](http://onjava.com/pub/a/onjava/2003/02/12/static_analysis.html)).
    PMD has the ability to use Xpath rules to search for patterns in the AST. W3Schools
    provides a gentle introduction to Xpath ([http://www.w3schools.com/xpath/](http://www.w3schools.com/xpath/)).
    The designer tool enables you to write Xpath rules and then test your rules against
    a source code example. For readability, it is important that the source code you
    test against contains only the essential details. The rules are then stored in
    XML.
  prefs: []
  type: TYPE_NORMAL
- en: To bundle the XML rules together you have to add the rules as part of a `<ruleset>`
    tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Maven PMD plugin has the ability to read the rulesets from within its classpath,
    on the local filesystem, or through the HTTP protocol from a remote server. You
    added your ruleset by adding the configuration option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: If you build up a set of rules, you should pull all the rules into one project
    for ease of management.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also create your own custom ruleset based on already existing rules,
    pulling out your favorite bug detection patterns. This is achieved by the `<rule>`
    tag with a ref pointing to the known rule, for example, the following pulls out
    the `DuplicateImports` rule from the `imports.xml` ruleset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The rule generated in this recipe tested for variables with the name `PASSWORD`.
    We have seen the rule triggered a number of times in real projects.
  prefs: []
  type: TYPE_NORMAL
- en: We pegged the version of the Maven PMD plugin to version 2.6, so that we are
    sure the recipe still works after future releases of the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The PMD homepage is a great place to learn about what is possible with the Xpath
    rules. It contains descriptions and details of the rulesets, for example, for
    the logging rules; review [http://pmd.sourceforge.net/pmd-4.3.0/rules/logging-java.html](http://pmd.sourceforge.net/pmd-4.3.0/rules/logging-java.html).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It would be efficient if static code review tools could make recommendations
    on how to fix the code. However, that is a little dangerous as the detectors are
    not always accurate. As an experiment I have written a small Perl script to repair
    literals first and also remove some wastage of resources. The code is a proof
    of concept and thus is not guaranteed to work correctly. It has the benefit of
    being succinct, see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://source.sakaiproject.org/contrib/qa/trunk/static/cleanup/easy_wins_find_java.pl](https://source.sakaiproject.org/contrib/qa/trunk/static/cleanup/easy_wins_find_java.pl)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Activating more PMD rulesets* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding bugs with FindBugs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is easy to get lost in the volume of defects found by static code review
    tools. Another quality assurance attack pattern is to clean up defects package
    by package, concentrating developer time on the most used features.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to generate and report defects found by FindBugs
    for specific packages.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the Jenkins FindBugs plugin ([https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/FindBugs+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Java version**'
  prefs: []
  type: TYPE_NORMAL
- en: The FindBugs plugin version 3 requires Java 7 or above.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From the command line, create a Maven project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `pom.xml` file, add a **build** section just before the `</project>`
    tag with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the directories `src/main/java/nl/berg/packt/FindBugs_all/candles`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `candles` directory include the `FindBugsCandle.java` file with the
    following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a **Maven** project with the name `ch5.quality.FindBugs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Source Code Management** section, check the **Subversion** radio
    box, adding to **Repository URL** your repository URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **build** section add `clean compile findBugs:findBugs` for **Goals
    and options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **post-build action** option, select **Publish FindBugs analysis results**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first page is a summary page that allows you to efficiently zoom in on
    the details, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at a category such as **BAD_PRACTICE** allows you to review the descriptions
    of each error type triggered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can then review the associated code. The highlighted code is useful for
    focusing your attention, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, you have created a standard Maven project and added a Java file
    with known defects.
  prefs: []
  type: TYPE_NORMAL
- en: The `pom.xml` configuration forces FindBugs to report defects from classes in
    the `nl.berg.packt.FindBugs_all.candles` package only.
  prefs: []
  type: TYPE_NORMAL
- en: The line in the standard candle with `guess==answer` is a typical programming
    defect. Two references to objects are being compared rather than the values of
    their strings. As the `guess` object was created on the previous line, the result
    will always be `false`. These sorts of defects can appear as subtle problems in
    programs. The JVM caches strings and occasionally two apparently different objects
    are actually the same object.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FindBugs is popular among developers and has plugins for a number of popular
    IDEs. Its results are often used as part of wider reporting by other tools.
  prefs: []
  type: TYPE_NORMAL
- en: The FindBugs Eclipse plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The automatic install location for the Eclipse plugin is [http://findbugs.cs.umd.edu/eclipse](http://findbugs.cs.umd.edu/eclipse).
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the FindBugs Eclipse plugin has a limited number of rules enabled.
    To increase the set tested you will need to go to the **Preferences** menu option
    under **Window,** selecting **FindBugs** from the left-hand side menu. On the
    right-hand side you will see the **Reported (Visible) bug categories** option
    under the **Reporter Configuration**. You can now tweak the visible categories,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The FindBugs Eclipse plugin](img/0082OS_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Xradar and Maven dashboards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are alternatives though to aging Maven plugin dashboards for the accumulation
    of generated software metrics. The Maven dashboard is one example ([http://mojo.codehaus.org/dashboard-maven-plugin/](http://mojo.codehaus.org/dashboard-maven-plugin/)).
    You will need to connect it to its own database. There is a recipe named *Setting
    up the Maven dashboard* in [Chapter 4](ch04.html "Chapter 4. Communicating Through
    Jenkins"), *Reporting and Documentation*, for this in the book *Apache Maven 3
    Cookbook, Srirangan, Packt Publishing* ([https://www.packtpub.com/application-development/apache-maven-3-cookbook](https://www.packtpub.com/application-development/apache-maven-3-cookbook)).
  prefs: []
  type: TYPE_NORMAL
- en: Xradar is another example of a dashboard ([http://xradar.sourceforge.net/usage/maven-plugin/howto.html](http://xradar.sourceforge.net/usage/maven-plugin/howto.html))
    and QALab is a third ([http://qalab.sourceforge.net/multiproject/maven2-qalab-plugin/index.html](http://qalab.sourceforge.net/multiproject/maven2-qalab-plugin/index.html)).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Enabling extra FindBug rules* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding security defects with FindBugs* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Activating more PMD rulesets* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling extra FindBug rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FindBugs has a wide range of auxiliary bug pattern detectors. These detectors
    are bundled into one contributor project hosted at SourceForge ([http://sourceforge.net/projects/fb-contrib/](http://sourceforge.net/projects/fb-contrib/)).
  prefs: []
  type: TYPE_NORMAL
- en: This recipe details how to add the extra bug detectors to FindBugs from the
    `fb-contrib` project and then use the detectors to capture known defects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is assumed that you have followed the previous recipe *Finding bugs with
    FindBugs*. You will be using the recipe's Maven project as a starting point.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**fb-contrib version change**'
  prefs: []
  type: TYPE_NORMAL
- en: In the following recipe, Maven automatically downloads a library file (`.jar`).
    The build might fail because the developers have incremented the version number.
    In this case, to find the correct filename browse [http://downloads.sourceforge.net/project/fb-contrib/Current/](http://downloads.sourceforge.net/project/fb-contrib/Current/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copy the top-level `pom.xml` file to `pom_fb.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the FindBugs `<plugin>` section of `pom_fb.xml` with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `src/main/java/nl/berg/packt/fingbugs_all/candles` directory add the
    following code snippet to the `FindBugsFBCandle.java` Java class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Commit the updates to your subversion repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Jenkins **Maven** job with the name `ch5.quality.FindBugs.fb`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Source Code Management** section, check the **Subversion** radio
    box adding for the **Repository URL** the URL to your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **build** section set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Root POM** to `pom_fb.xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Goals and options** to `clean compile Findbugs:Findbugs`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Under the **Build Settings** section, check **Publish FindBugs analysis results**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the job is finished building, review the **FindBugs Warnings** link. You
    will now see a new warning **USBR_UNNECESSARY_STORE_BEFORE_RETURN**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To include external detectors, you added an extra line to the FindBugs Maven
    configuration, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: It is worth visiting SourceForge to check for the most up-to-date version of
    the detectors.
  prefs: []
  type: TYPE_NORMAL
- en: Currently it is not possible to use Maven's dependency management to pull in
    the detectors from a repository, though this might change.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, you have added a Java class to trigger the new bug detection
    rules. The anti-pattern is the unnecessary line with the creation of the answer
    object before the return. It is more succinct to return the object anonymously,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The anti-pattern triggers the **USBR_UNNECESSARY_STORE_BEFORE_RETURN** pattern
    that is described on the homepage of the `fb-contrib` project.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Java language has a number of subtle boundary cases that are difficult to
    understand until explained by real examples. An excellent way to capture knowledge
    is to write examples yourself when you see issues in your code. Injecting standard
    candles is a natural way of testing your team's knowledge and makes for target
    practice during the QA process.
  prefs: []
  type: TYPE_NORMAL
- en: The FindBugs project generated some of their detectors based on the content
    of the book Java puzzlers by Joshua Bloch and Neal Gafter ([http://www.javapuzzlers.com/](http://www.javapuzzlers.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Finding bugs with FindBugs* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Finding security defects with FindBugs* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Activating more PMD rulesets* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding security defects with FindBugs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will use FindBugs to discover a security flaw in a Java
    server page and some more security defects in a defective Java class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Either follow the *Failing Jenkins jobs based on JSP syntax errors* recipe in
    [Chapter 3](ch03.html "Chapter 3. Building Software"), *Building Software*, or
    use the provided project downloadable from the Packt Publishing website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit the `pom.xml` file just under `<plugins>` within `<build>` to include
    the FindBugs plugin and add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the directory structure `src/main/java/nl/berg/packt/finbugs_all/candles`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the Java file `FindBugsSecurity.java` with the content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Commit the updates to your subversion repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Maven** Jenkins job with the name `ch5.quality.FindBugs.security`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Source Code Management** section, check the **Subversion** radio
    box adding your subversion repository location in the **Repository URL** text
    input**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Beneath the **build** section for **Goals and options,** set the value to `clean
    package findBugs:findBugs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Build Settings** section, check **Publish FindBugs analysis results**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the job has completed, review the link **FindBugs Warning**. Notice that
    the JSP package exists with one warning for **XSS_REQUEST_PARAMETER_TO_JSP_WRITER**.
    However, the link fails to find the location of the source code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy `src/main/webapp/index.jsp` to `jsp/jsp.index_jsp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit to your subversion repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the results under the **FindBugs Warning** link. You will now be able to
    view the JSP source code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JSPs are first translated from text into Java source code and then compiled.
    FindBugs works by parsing compiled Java bytecode.
  prefs: []
  type: TYPE_NORMAL
- en: 'The original JSP project has a massive security flaw. It trusts input from
    the Internet. This led a number of attack vectors including XSS attacks ([http://en.wikipedia.org/wiki/Cross-site_scripting](http://en.wikipedia.org/wiki/Cross-site_scripting)).
    Parsing the input with white lists of allowed tokens is one approach to reducing
    the risk. FindBugs discovers the defect and warns with `XSS_REQUEST_PARAMETER_TO_JSP_WRITER`.
    The Jenkins FindBugs plugin details the bug type, as you had turned messages on
    in configuration with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The FindBugs plugin has not been implemented to understand the location of JSP
    files. When clicking on a link to the source code, the plugin will look in the
    wrong place. A temporary solution is to copy the JSP file to the location the
    Jenkins plugin expects.
  prefs: []
  type: TYPE_NORMAL
- en: The line number location reported by FindBugs also does not make sense. It is
    pointing to the line in the `.java` file that is generated from the `.jsp` file,
    and not directly to the JSP file. Despite these limitations, FindBugs discovers
    useful information about JSP defects.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An alternative to JSP bug detection is PMD. From the command line, you can
    configure it to scan JSP files only with the option `–jsp`, see: [http://pmd.sourceforge.net/jspsupport.html](http://pmd.sourceforge.net/jspsupport.html)'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Although FindBugs has rules that sit under the category of security, there
    are other bug detectors that find security-related defects. The standard candle
    class includes two such defects. The first is a recursive loop that will keep
    calling the same method from within itself, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Perhaps the programmer intended to use a counter to force an exit after 99 loops,
    but the code to do this does not exist. The end result, if this method is called,
    is that it will keep calling itself until the memory reserved for the stack is
    consumed and the application fails. This is also a security issue; if an attacker
    knows how to reach this code they can bring down the related application in a
    **Denial Of Service** (**DOS**) attack.
  prefs: []
  type: TYPE_NORMAL
- en: The other attack captured in the standard candle is the ability to change content
    within an array that appears to be immutable. It is true that the reference to
    the array cannot be changed, but the internal references to the array elements
    can. In the example, a motivated cracker, having access to the internal objects,
    is able to change the READ permissions to READ/WRITE permissions. To prevent this
    situation, consider making a defensive copy of the original array and pass the
    copy to the calling method.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The OWASP project provides a wealth of information on the subject of testing
    security, find the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.owasp.org/index.php/Category:OWASP_Java_Project](https://www.owasp.org/index.php/Category:OWASP_Java_Project)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Finding bugs with FindBugs* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Enabling extra FindBug rules* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Activating more PMD rulesets* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Configuring Jetty for integration tests* recipe in [Chapter 3](ch03.html
    "Chapter 3. Building Software"), *Building Software*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying HTML validity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe tells you how to use Jenkins to test HTML pages for validity against
    HTML and CSS standards.
  prefs: []
  type: TYPE_NORMAL
- en: Web browsers are not fussy. You can have broken templates in your applications
    that generate HTML that works on one browser, but are ugly on another. Validation
    improves consistency and captures non-trivial but difficult-to-find issues early.
  prefs: []
  type: TYPE_NORMAL
- en: You can upload and verify your HTML files against the W3C's unified validator
    ([http://code.w3.org/unicorn](http://code.w3.org/unicorn)). The unified validator
    will check your web pages for correctness against a number of aggregated services.
    The Jenkins plugin does this for you automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the Unicon Validation plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Unicorn+Validation+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Unicorn+Validation+Plugin)).
    If you have not already done so, also install the Plot plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Plot+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Plot+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a free-style job with the name `ch5.quality.html`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **build** section, **Add build step,** selecting **Unicorn Validator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Site to validate** input, add a URL to a site that you are allowed
    to test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the **Workspace**, clicking on the `unicorn_output.html` link and then
    `markup-validator_errors.properties`. For the property's file content, you will
    see content similar to `YVALUE=2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Configure** the project. In the **Post-build Actions** section, check **Plot
    build data**, adding the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Plot group**: Validation errors'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plot title**: Markup validation errors'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of builds to Include**: 40'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plot y-axis label**: Errors'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Plot style**: Area'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data series file**: `markup-validator_errors.properties`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify that the **Load data from properties file** radio box is checked
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data series legend label**: Feed errors'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the **Plot** link.![How to do it...](img/0082OS_05_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Unicon validation plugin uses the validation service at W3C to generate
    a report on the URL you configure. The returned report is processed by the plugin
    and absolute counts of the defects are taken. The summation is then placed in
    property files where the values are then picked up by the plotting plugin (refer
    to the *Plotting alternative code metrics in Jenkins* recipe in [Chapter 3](ch03.html
    "Chapter 3. Building Software"), *Building Software*). If you see a sudden surge
    in warnings, then review the HTML pages for repetitive defects.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is quite difficult to obtain decent code coverage from unit testing. This
    is especially true for larger projects where there are a number of teams with
    varying practices. You can increase your automatic testing coverage of web applications
    considerably by using tools that visit as many links in your application as possible.
    This includes HTML validators, link checkers, search engine crawlers, and security
    tools. Consider setting up a range of tools to hit your applications during integration
    testing, remembering to parse the log files for unexpected errors. You can automate
    log parsing using the *Deliberately failing builds through log parsing* recipe
    in [Chapter 1](ch01.html "Chapter 1. Maintaining Jenkins"), *Maintaining Jenkins*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For details on incrementally validating your online content, visit [http://www.w3.org/QA/2002/09/Step-by-step](http://www.w3.org/QA/2002/09/Step-by-step).
  prefs: []
  type: TYPE_NORMAL
- en: Reporting with JavaNCSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JavaNCSS ([http://javancss.codehaus.org/](http://javancss.codehaus.org/)) is
    a software metrics tool that calculates two types of information: the first is
    the total number of source code lines in a package that are active, commented,
    or JavaDoc-related. The second type calculates the complexity of code based on
    how many different decision branches exist.'
  prefs: []
  type: TYPE_NORMAL
- en: The Jenkins JavaNCSS plugin ignores the complexity calculation and focuses on
    the more understandable line counts.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**NCSS** stands for **Non Commenting Source Statements** and is the number
    of lines of code minus the comments and extra new lines.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the JavaNCSS plugin ([https://wiki.jenkins-ci.org/display/JENKINS/JavaNCSS+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/JavaNCSS+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a **Maven** project named `ch5.quality.ncss`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Source Code Management** section, check the **Subversion** radio
    box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the **Repository URL** [https://source.sakaiproject.org/contrib/learninglog/tags/1.0](https://source.sakaiproject.org/contrib/learninglog/tags/1.0).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the **Build Triggers,** making sure none are activated.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **build** section for **Goals and options,** type `clean javancss:report`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Build Settings** section, check **Publish Java NCSS Report**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the **Java NCSS Report** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the top level `pom.xml` file in the workspace, for example, `http://localhost:8080job/ch5.quality.ncss/ws/pom.xml`.![How
    to do it...](img/0082OS_05_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The job pulled in source code from the Sakai project's learning log tool subversion
    repository. The project is a multimodule with the API separated from the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: JavaNCSS needs no compiled classes or modifications to the Maven `pom.xml` file;
    this makes for a simple cycle. The job ran a Maven goal, publishing the report
    through the JavaNCSS Jenkins plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the report, the implementation has a much great number of lines of
    active code relative to other packages. Documentation of APIs is vital for reuse
    of code by other developers. Significantly, there are no JavaDoc lines in the
    API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The abbreviations in the summary table have the following meanings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Classes**: This is the number of classes in the package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functions**: This is the number of functions in the package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JavaDocs**: This is the number of different JavaDoc blocks in the package.
    This is not fully indicative as most modern IDEs generate classes using boilerplate
    templates. Therefore, you can have a lot of JavaDoc generated of poor quality,
    creating misleading results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NCSS**: This is the number of non-commented lines of source code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JLC**: This is the number of lines of JavaDoc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SLCLC**: This is the number of lines that include only a single comment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MLCLC**: This is the number of lines of source code that are part of multiline
    comments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The build summary displays information about changes (deltas) between the current
    job and the previous one, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The `+` symbol signals that the code is added, `-` signals deleted. If you see
    a large influx of code, but a lower than usual influx of JavaDoc, then either
    the code is autogenerated or more likely is being rushed to market.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you have gotten used to the implications of the relatively simple summary
    of JavaNCSS, consider adding JDepend to your safety net of code metrics. JDepend
    generates a wider range of quality related metrics ([http://clarkware.com/software/JDepend.html](http://clarkware.com/software/JDepend.html),
    [http://mojo.codehaus.org/jdepend-maven-plugin/plugin-info.html](http://mojo.codehaus.org/jdepend-maven-plugin/plugin-info.html),
    and [https://wiki.jenkins-ci.org/display/JENKINS/JDepend+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/JDepend+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: One of the most important metrics JDepend generates is **cyclic dependency**.
    If class A is dependent on class B, and in turn class B is dependent on class
    A, then that is a cyclic dependency. When there is such a dependency it indicates
    that there is an increased risk of something going wrong, such as a fight for
    a resource, an infinite loop, or synchronization issues. Refactoring may be needed
    to eliminate the lack of clear responsibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Checking code style using an external pom.xml file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you just want to check code style for the quality of its documentation, without
    changing its source, then inject your own `pom.xml` file. This recipe shows you
    how to do this for Checkstyle. Checkstyle is a tool that checks most documentation
    against well-defined standards, such as the Sun coding conventions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the Checkstyle plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have issues with this recipe due to an **illegalAccessError on AbstractMapBasedMultimap**
    error, then this probably is due to the bug reported in **Jenkins-22252** ([https://issues.jenkins-ci.org/browse/JENKINS-22252](https://issues.jenkins-ci.org/browse/JENKINS-22252)).
    The current solution is to run with version 3.0.5 of Maven.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a directory named `/var/lib/jenkins/OVERRIDE`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that the directory is owned by the Jenkins user and group `sudo chown
    jenkins:jenkins /var/lib/jenkins/OVERRIDE`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the file `/var/lib/Jenkins/OVERRIDE/pom_checkstyle.xml` with the following
    content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure the file is owned by the Jenkins user and group `sudo chown jenkins:jenkins
    /var/lib/jenkins/OVERRIDE/pom_checkstyle.xml.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Maven** job with the name `ch5.quality.checkstyle.override`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Source Code Management** section, check **Subversion** and add the
    subversion repository [https://source.sakaiproject.org/svn/profile2/tags/profile2-1.4.5](https://source.sakaiproject.org/svn/profile2/tags/profile2-1.4.5).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Pre-steps** section for the **Add pre-build** step, select **Execute
    shell**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the command text area, add `cp /var/lib/Jenkins/OVERRIDE/pom_checkstyle.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Under the **build** section add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Root POM**: `pom_checkstyle.xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Goals and options**: `clean checkstyle:checkstyle`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Under the **Build Settings** section, check **Publish Checkstyle analysis results**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job a number of times, reviewing the output.![How to do it...](img/0082OS_05_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **profile2** tool is used by millions of users around the world within the
    Sakai Learning Management System ([http://sakaiproject.org](http://sakaiproject.org)).
    It's a realistic piece of industrial-quality coding. It is a social hub for managing
    what others can see of your account details. The project divides the code between
    implementation, API, and model.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you created a replacement `pom.xml` file. You did not need to
    copy any of the dependencies from the original `pom.xml` as Checkstyle does not
    need compiled code to do its calculations.
  prefs: []
  type: TYPE_NORMAL
- en: The job then copies the `pom_checkstyle.xml` file to the main workspace. Checkstyle
    was not configured in detail in the `pom_checkstyle.xml` file because we were
    only interested in the overall trend. However, if you want to zoom into the details,
    Checkstyle can be configured to generate results based on specific metrics such
    as the complexity of Boolean expressions or the Non Commenting Source Statements
    (NCSS) [http://checkstyle.sourceforge.net/config_metrics.html](http://checkstyle.sourceforge.net/config_metrics.html).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can view the statistics from most quality measuring tools remotely using
    the Jenkins XML API. The syntax for Checkstyle, PMD, FindBugs , and so on. is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, a URL similar to the following will work in the case of this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The returned results for this recipe look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: To obtain the data remotely you will need to authenticate. For information on
    how to perform remote authentication, refer to the *Remotely triggering jobs through
    the Jenkins API* recipe in [Chapter 3](ch03.html "Chapter 3. Building Software"),
    *Building Software*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Faking Checkstyle results* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faking Checkstyle results
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe details how you can forge Checkstyle reports. This will allow you
    to hook in your custom data to the Checkstyle Jenkins plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Checkstyle+Plugin)),
    exposing your custom test results without writing a new Jenkins plugin. The benefit
    of this compared to using the *Plotting alternative code metrics in Jenkins* recipe
    in [Chapter 3](ch03.html "Chapter 3. Building Software"), *Building Software*,
    is the location that the results are displayed. You can then aggregate the fake
    results with other metrics summaries using the Analysis Collector plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Analysis+Collector+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Analysis+Collector+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have not already done so, install Checkstyle and create a new directory
    in your subversion repository for the code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a Perl script file named `generate_data.pl` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make the directories `src/main/java.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the Java file `src/main/java/MAIN.java` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Commit the files to your subversion repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Jenkins free-style job `ch5.quality.checkstyle.generation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the **Source Code Management** section, check **Subversion** and add
    the **Repository URL**: your repo URL.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **build** section, select the **Build step** as **Execute Shell**.
    In the command input add the command `perl generate_data.pl > my-results.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Post-build Actions** section, check **Publish Checkstyle analysis results**.
    In the **Checkstyle results** text input, add `my-results.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job a number of times, reviewing the results and trend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The top level report mentions your new rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_05_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the code link **MAIN.java** takes you to the code page and highlights
    the error line randomly selected by the Perl code, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_05_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The plugins used in this chapter store their information in XML files. The Checkstyle
    XML structure is the simplest of all the tools and hence the XML format chosen
    for our generated fake results.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Perl code creates a simple XML results file that chooses a line between
    1...9 to fail. The format outputted is similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The file location is relative to the Jenkins workspace. The Jenkins plugin opens
    the file found at this location so that it can display it as a source code.
  prefs: []
  type: TYPE_NORMAL
- en: For each error found, an `<error>` tag is created. The plugin maps the severity
    level `error` to `high`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You may not have to force your results into a fake format. First, consider
    the xUnit plugin ([https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin)).
    It is a utility plugin that supports the conversion of the results from different
    regression test frameworks. The plugin translates the different result types into
    a standardized JUnit format. You can find the JUnit results schema at: [http://windyroad.org/dl/Open%20Source/JUnit.xsd](http://windyroad.org/dl/Open%20Source/JUnit.xsd).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Checking style using an external pom.xml* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Jenkins with SonarQube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SonarQube, previously known as Sonar, is a rapidly evolving application for
    reporting quality metrics and finding code hot spots. This recipe details how
    to generate code metrics through a Jenkins plugin, and then push them directly
    to a Sonar database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the Sonar plugin ([http://docs.codehaus.org/display/SONAR/Jenkins+Plugin](http://docs.codehaus.org/display/SONAR/Jenkins+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Download and unpack SonarQube. You can run it directly from within the bin
    directory, selecting the OS directory underneath. For example, the Desktop Ubuntu
    start-up script is `bin/linux-x86-32/sonar.sh console`. You now have an insecure
    default instance running on port `9000`. For more complete installation instructions,
    review:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.codehaus.org/display/SONAR/Setup+and+Upgrade](http://docs.codehaus.org/display/SONAR/Setup+and+Upgrade)
    and [http://docs.sonarqube.org/display/SONAR/Installing](http://docs.sonarqube.org/display/SONAR/Installing)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Within the main Jenkins configuration (`/configure`), in the **Sonar** section
    add `localhost` for **Name**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Maven** job named `ch5.quality.sonar`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **Source Code Management** section for the **Repository URL**, add
    [https://source.sakaiproject.org/svn/announcement/tags/announcement-2.9.3](https://source.sakaiproject.org/svn/announcement/tags/announcement-2.9.3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Within the **Build Triggers** section, verify that no build triggers are selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the **build** section for **Goals and options,** add `clean install`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Post-build Actions** section, check **Sonar**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Sonar** link and review the newly generated reports.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The top level of the report delivers a quick summary of the key quality metrics,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'From the left-hand side menu, you can drill down into the details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source code is that of an announcement tool used within Sakai. The project
    is a multimodule project with some relatively complex details.
  prefs: []
  type: TYPE_NORMAL
- en: The default SonarQube instance is preconfigured with an in-memory database.
    The Jenkins plugin already knows the default configuration and requires little
    extra configuration. The Jenkins Sonar plugin does not need you to reconfigure
    your `pom.xml`. The Jenkins plugin handles all the details for generating results
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: The job ran Maven first to clean out the old compiled code from the workspace,
    and then ran the `install` goal that compiles the code as part of one of its phases.
  prefs: []
  type: TYPE_NORMAL
- en: The Jenkins Sonar plugin then makes direct contact with the Sonar database and
    adds the previously generated results. You can now see the results in the Sonar
    application.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sonar is a dedicated application for measuring software-quality metrics. Like
    Jenkins, it has a dedicated and active community. You can expect an aggressive
    roadmap of improvements. Features such as its ability to point out hotspots of
    suspicious code, a visually appealing report dashboard, ease of configuration,
    and detailed control of inspection rules to view, all currently differentiate
    it from Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: SonarQube plugins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is easy to expand the features of Sonar by adding extra plugins. You can
    find the official set mentioned at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.codehaus.org/display/SONAR/Plugin+Library](http://docs.codehaus.org/display/SONAR/Plugin+Library)'
  prefs: []
  type: TYPE_NORMAL
- en: The plugins include a number of features that are equivalent to the ones you
    can find in Jenkins. Where Sonar is noticeably different is the governance plugins,
    where code coverage moves to center stage in defending the quality of a project.
  prefs: []
  type: TYPE_NORMAL
- en: Alternative aggregator – the violations plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Jenkins violations plugin accepts the results from a range of quality metrics
    tools and combines them into a unified report. This plugin is the nearest equivalent
    to Sonar within Jenkins. Before deciding if you need an extra application in your
    infrastructure, it is worth reviewing it to see if it fulfills your quality metric
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Looking for "smelly" code through code coverage* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Activating more PMD rulesets* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Reporting with JavaNCSS* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing project data with the R plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe describes how to use R to process metrics on each file in your project
    workspace. The recipe does this by traversing the workspace and collecting a list
    of files of a particular extension such as Java. The R script then analyzes each
    file individually and finally plots the results in a graphical format to a PDF
    file. The workflow is common to almost all quality-related analysis of software
    projects. This recipe is easily customized for tasks that are more complex.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are looking at the size in words of the text files, printing
    to the console the names of large files and plotting the sizes of all files. From
    the visual representation, you can easily see which files are particularly large.
    If your property file is much larger than the other property files, it is probably
    corrupt. If a Java file is too large, it is difficult to read and understand.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is assumed that you have followed the *Simplifying powerful visualizations
    using the R plugin* recipe in [Chapter 4](ch04.html "Chapter 4. Communicating
    Through Jenkins"), *Communicating Through Jenkins*, and have already installed
    the R plugin ([https://wiki.jenkins-ci.org/display/JENKINS/R+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/R+Plugin)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a free-style job with the name `ch5.R.project.data`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Source Code Management** section, select **Subversion**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the **Repository URL** as [https://source.sakaiproject.org/svn/profile2/trunk](https://source.sakaiproject.org/svn/profile2/trunk).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **build** section, under **Add build step**, select **Execute R script**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Script text** area add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click on the **Save** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Build Now** icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the console output from the build. It should appear similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visit the workspace and review the files `Lengths_Properties_1.pdf`, `Lengths_JAVA_1.pdf`.![How
    to do it...](img/0082OS_05_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice the straggler files with a large number of lines. Property files should
    be of roughly similar length, as they contain, in this case, the international
    translations for the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/0082OS_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This feels like a well-balanced project, as there are only a few files that
    have a large number of lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You loaded in the profile2 tool from subversion [https://source.sakaiproject.org/svn/profile2/trunk](https://source.sakaiproject.org/svn/profile2/trunk).
    This code is used by millions of students around the world and represents mature,
    realistic production code.
  prefs: []
  type: TYPE_NORMAL
- en: Within your R script, you defined a function that takes a filename as input
    and then reads the file into a text object. The function then checks to see whether
    the number of lines is greater than 500\. If it is greater than 500 lines then
    the filename is printed to the console output. Finally, the function returns the
    number of lines in the text file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the script discovers the property and Java files under the workspace.
    The file search is filtered by the value defined in the `pattern` argument. In
    this case, `.java`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The list of filenames is passed one name at a time to the `processFile` function
    you have previously defined. The results are a list of file lengths that are stored
    in the `resultJava` and `resultProperties` objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The `warnings()` function produces a list of issues generated while running
    the `sapply` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: This is stating that a new line was expected at the end of the file. It is not
    a critical issue. Showing the warnings is a helpful approach to discovering corrupted
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we generate two histograms of the results, one for the Java file and
    the other for the properties files. The filename is created from a constant string
    followed by the `BUILD_NUMBER` environment variable that is set uniquely for each
    build. The `pdf` function tells R that the output is to be stored in a PDF file
    and the `hist` function draws a histogram of the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When writing R code for processing your files, don''t reinvent the wheel. R
    has many libraries for manipulating text. The stringi library is one example ([http://cran.r-project.org/web/packages/stringi/stringi.pdf](http://cran.r-project.org/web/packages/stringi/stringi.pdf)).
    Here is some example code that counts the number of words in a text file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: The script defines the function `processFile`. The function requires a filename.
    The file is read into the `stri_stats_latex` function. This function is included
    in the `stringi` library. It returns a summary of the file as a vector (a series
    of numbers).
  prefs: []
  type: TYPE_NORMAL
- en: The `file.choose()` function pops up a dialog that allows you to browse your
    file system and choose a file. The call returns the fully qualified path to the
    file. It passes the value to the `processFile` function call. The results are
    stored in the results vector. The script then prints out the fourth number that
    is the number of words in the file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another interesting R package for text mining is `tm`: ([http://cran.r-project.org/web/packages/tm/tm.pdf](http://cran.r-project.org/web/packages/tm/tm.pdf)).
    The `tm` package has the ability to load a set of text files and analyze them
    in many different ways.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Simplifying powerful visualizations using the R plugin* recipe in [Chapter
    4](ch04.html "Chapter 4. Communicating Through Jenkins"), *Communicating Through
    Jenkins*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding a job to warn of storage use violations through log parsing* recipe
    in [Chapter 1](ch01.html "Chapter 1. Maintaining Jenkins"), *Maintaining Jenkins*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
