- en: Installing Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter is all about installing Jenkins across various platforms, and
    more. After completing this chapter, you should be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Run Jenkins on a servlet container (Apache Tomcat)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run Jenkins as a standalone application on Windows/Ubuntu/Red Hat Linux/Fedora
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run Jenkins behind a reverse proxy server (Nginx)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run Jenkins with Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leverage the advantages of Docker data volumes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run development, staging, and production instance of Jenkins using Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Jenkins inside a servlet container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jenkins is available on the following servlet containers:'
  prefs: []
  type: TYPE_NORMAL
- en: Apache Geronimo 3.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GlassFish
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IBM WebSphere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JBoss
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jetty
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jonas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Liberty profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tomcat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebLogic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, you will learn how to install Jenkins on an Apache Tomcat server.
    Installing Jenkins as a service on Apache Tomcat is quite simple. Either you can
    choose to run Jenkins along with the other services already present on the Apache
    Tomcat server, or you can use the Apache Tomcat server solely for running Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you begin, make sure you have the following things ready:'
  prefs: []
  type: TYPE_NORMAL
- en: You need a system with at least 4 GB of memory and a Multi-core processor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on how you manage the infrastructure in your team, the machine could
    be an instance on a cloud platform (such as AWS, DigitalOcean, or any other cloud
    platform), a bare metal machine, or it could be a VM (on VMware vSphere or any
    other server virtualization software).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The machine should have Ubuntu 16.04 installed on it. Choose an LTS release
    version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check for administrator privileges; the installation might ask for an admin
    username and password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to install Java on Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the package index:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, install Java. The following command will install the **Java Runtime Environment**
    (**JRE**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To set the `JAVA_HOME` environment variable, get the Java installation location.
    Do this by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will print the list of Java applications installed on
    your machine along with their installation paths. Copy the Java path that appears
    on your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `/etc/environment` file for editing using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the Java path (the one that you copied earlier) inside the `/etc/environment` file in
    the following format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Type *Ctrl* + *X* and choose *Y* to save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, reload the file using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Installing Apache Tomcat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to download and then install Apache Tomcat server on your
    Ubuntu machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Move to the `/tmp` directory and download the Tomcat application using the
    `wget` command, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To get a complete list of Apache Tomcat versions visit: [https://archive.apache.org/dist/tomcat/](https://archive.apache.org/dist/tomcat/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a directory called `/opt/tomcat` using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Untar the content of the archive inside `/opt/tomcat`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, create a `systemd` service file using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Paste the following content into the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Type *Ctrl* + *X* and choose *Y* to save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, reload the systemd daemon using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the Tomcat service using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To check the status of Tomcat service, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Enabling the firewall and port 8080
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apache Tomcat runs on port `8080`. Follow these steps to enable the firewall,
    if it''s disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable the firewall using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Allow traffic on port `8080`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable OpenSSH to allow SSH connections using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Check the firewall status using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You should now be able to access the Apache Tomcat server page at `http://<IP
    address of the Apache Tomcat>:8080`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the Apache Tomcat server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will enable access to the Tomcat Manager app and Host Manager:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the  `tomcat-users.xml` file for editing, which is present inside the
    `/opt/tomcat/conf` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The file will look something like the following, for simplicity, I have ignored
    the comments inside the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'From the previous file, you can see the `role` and `user` fields are commented.
    We need to enable a role and a user to allow access to the Tomcat Manager app
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the file should look something as shown here (comments removed):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Type *Ctrl* + *X* and choose *Y* to save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, you are allowed to access Manager and Host Manager applications
    only from within the Apache Tomcat server. Since, we will be managing services
    running on Apache from a remote machine, we would need to remove these restrictions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the following two files, `/opt/tomcat/webapps/manager/META-INF/context.xml`
    and `/opt/tomcat/webapps/host-manager/META-INF/context.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside these files, comment the following section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Type *Ctrl* + *X* and choose *Y* to save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart the Tomcat server using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Try to access the Manager app and the Host Manager from the Apache Tomcat server
    home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Jenkins on the Apache Tomcat server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can perform the following steps if you do not wish to have a standalone
    server for Jenkins master, and want to host it along with other services that
    exist on the Apache Tomcat server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Move to the `/tmp` directory and download the Jenkins application using the
    `wget` command, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will download the latest stable version of `jenkins.war`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Move the file from `/tmp` to `/opt/tomcat/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'List the content of the `/opt/tomcat/webapps/` directory :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that a `jenkins` folder automatically gets created the moment
    you move the `jenkins.war` package to the `webapps` folder. This is because the
    `.war` file is a web application archive file that automatically gets extracted
    once deployed to the `webapps` directory. What we did is a small deployment activity.
  prefs: []
  type: TYPE_NORMAL
- en: And that is all you need to do. You can access Jenkins using `http://<IP address
    of Tomcat server>:8080/jenkins`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Jenkins alone on an Apache Tomcat server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you chose to have an Apache Tomcat server solely for using Jenkins, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Move to the `/tmp` directory and download the Jenkins application using the
    `wget` command, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Rename the downloaded `jenkins.war` package to `ROOT.war`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, delete everything inside the `/opt/tomcat/webapps` directory by switching
    to the `root` user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Now move the `ROOT.war` (renamed) package from the `/tmp` directory to the
    `/opt/tomcat/webapps` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'List the contents of the `/opt/tomcat/webapps` directory and you will notice
    a `ROOT` folder automatically gets created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: It's always recommended to have a dedicated web server solely for Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: You can access Jenkins by using `http://<IP address of Tomcat server>:8080/`
    without any additional path. Apparently, the Apache server is now a Jenkins server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deleting the content of the `/opt/tomcat/webapps` directory (leaving behind
    the `ROOT` directory and `ROOT.war`) and then moving the `jenkins.war` file to
    the `webapps` folder is also sufficient to make Apache Tomcat server solely for
    the use of Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: The step of renaming `jenkins.war` to `ROOT.war` is only necessary if you want
    to make `http://<IP address of Tomcat server>:8080/` the standard URL for Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Jenkins home path
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start using Jenkins, there is one important thing to configure, the
    `jenkins_home` path. When you install Jenkins as a service on Tomcat, the `jenkins_home`
    path is automatically set to `/root/.jenkins/`. This is the location where all
    of the Jenkins configurations, logs, and builds are stored. Everything that you
    create and configure on the Jenkins dashboard is stored here.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to make it something more accessible, something like `/var/jenkins_home`.
    This can be done in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the Apache Tomcat server using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `context.xml` file for editing, which is present inside `/opt/tomcat/conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The file will look like this (comments removed):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following line between `<Context> </Context>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the Tomcat service using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Installing a standalone Jenkins server on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Jenkins on Windows is quite simple. Before performing the steps to
    install Jenkins on Windows, let's have a look at the prerequisites.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we begin, make sure you have the following things ready:'
  prefs: []
  type: TYPE_NORMAL
- en: We need a machine with at least 4 GB of RAM and a Multi-core processor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on how you manage the infrastructure in your team, the machine could
    be an instance on a cloud platform (such as AWS, DigitalOcean, or any other cloud
    platform), a bare metal machine, or it could be a VM (on VMware vSphere or any
    other server virtualization software).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The machine should have any one of the latest Windows OS (Windows 7/8/10, Windows
    Server 2012/2012 R2/2016) installed on it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check for admin privileges; the installation might ask for admin username and
    password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure port `8080` is open.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to install Java:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest version of Java JRE (x86 or x64 based on your OS) from [https://java.com/en/download/manual.jsp](https://java.com/en/download/manual.jsp).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow the installation procedures.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To check that Java has been installed successfully, run the following command
    using Command Prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'To set the `JAVA_HOME`, first get the Java installation path on Windows using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command should output the Java installation path, as shown in
    the following command. Copy the path without `\bin\java`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the Command Prompt as an administrator and run the following command to
    set the `JAVA_HOME` path. Make sure to use the Java installation path that appears
    on your screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Installing the latest stable version of Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the latest stable version of Jenkins, follow these steps in sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the latest stable Jenkins package available at the Jenkins official
    website, [https://jenkins.io/download/](https://jenkins.io/download/). To install
    the latest stable version of Jenkins, download the **Long Term Support** (**LTS**) release.
    Choose the weekly release if you just want the latest version of Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unzip the downloaded package, and you will find a `jenkins.msi` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `jenkins.msi` and follow the installation steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During the installation, you will get an option to choose your Jenkins installation
    directory. By default, it will be `C:\Program Files\Jenkins` or `C:\Program Files
    (x86)\Jenkins`. Leave it as it is and click on the Next button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Finish button to complete the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Starting, stopping, and restarting Jenkins on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jenkins by default starts running when installed. In this section, the commands
    to start, stop, restart, and check the status of the Jenkins services are shown:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Services window from Command Prompt using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Look for a service named Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the Jenkins service again and click Properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under the General tab, you can see the Jenkins service name, the path to the
    executable, the service status, and the start parameters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the Startup type option, you can choose the way Jenkins starts on the
    Windows machine. You can choose from Automatic, Manual, and Automatic (Delayed
    Start). Make sure it's always set to Automatic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the following service status, there is an option to manually Start, Stop,
    Pause, and Resume the Jenkins service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e09bb15-a5f1-4ba8-9b45-715f0854e770.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the Jenkins service startup option
  prefs: []
  type: TYPE_NORMAL
- en: Go to the next tab, which is Log On. Here, we define the username through which
    Jenkins start.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can either choose to use the Local System account (not recommended) or
    you can create a special Jenkins user with special permissions (recommended):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An exclusive account for Jenkins is always preferred. The reason is that Local
    System account is not under control; it may get deleted or the password may expire
    depending on the organization's policies, whereas the Jenkins user account can
    be set with preferred policies and privileges.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cfea67b3-bd34-479b-8a40-e3fa38068f7c.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the Jenkins service Log On option
  prefs: []
  type: TYPE_NORMAL
- en: The next tab is Recovery. Here, we can specify the action items in case the
    Jenkins service fails to start.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is an example. At the first failure, there is an attempt to restart Jenkins,
    at the second failure an attempt is made to restart the computer. And lastly,
    at subsequent failures, a program is run to debug the issue, or we can run a script
    that sends the Jenkins failure log through email to the respective Jenkins admin
    for investigation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/be84fa4e-a90c-434f-9438-842c06375f60.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the Jenkins service Recovery option
  prefs: []
  type: TYPE_NORMAL
- en: Installing a standalone Jenkins server on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing a Jenkins server on Ubuntu is quite easy. Before performing the steps
    to install Jenkins on Ubuntu, let's have a look at the prerequisites.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we begin, make sure you have the following things ready:'
  prefs: []
  type: TYPE_NORMAL
- en: We need a machine with at least 4 GB of RAM and a Multi-core processor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on how you manage the infrastructure in your team, the machine could
    be an instance on a cloud platform (such as AWS, DigitalOcean, or any other cloud
    platform), a bare metal machine, or it could be a VM (on VMware vSphere or any
    other server virtualization software).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The machine should have Ubuntu 16.04 installed on it. Choose a LTS release version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check for admin privileges; the installation might ask for an admin username
    and password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure port `8080` is open.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to install Java:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the package index using following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, install Java. The following command will install the JRE:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'To set the `JAVA_HOME` environment variable, first get the Java installation
    location. Do this by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will print the list of Java applications installed on
    your machine along with their installation paths. Copy the Java path that appears
    on your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `/etc/environment` file for editing using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the Java path (the one that you copied earlier) inside the `/etc/environment` file in
    the following format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Type *Ctrl* + *X* and choose *Y* to save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, reload the file using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Installing the latest version of Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the latest version of Jenkins, follow these steps in sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the repository key to the system using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get an output of `OK`. Next, append the Debian package repository
    address using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the package index:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, install Jenkins using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: See the *Starting, stopping, and restarting Jenkins on Ubuntu *section if you
    are required to start Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jenkins is now ready for use. By default, the Jenkins service runs on port `8080`.
    To access Jenkins, use `http://localhost:8080/` or `http://<Jenkins server IP
    address>:8080/` in a browser .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing the latest stable version of Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you prefer to install a stable version of Jenkins, then follow these step
    in sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the repository key to the system using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get an output of `OK`. Next, append the Debian package repository
    address using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the package index:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, install Jenkins using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: See the *Starting, stopping, and restarting Jenkins on Ubuntu *section if you
    are required to start Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jenkins is now ready for use. By default, the Jenkins service runs on port `8080`.
    To access Jenkins, use  `http://localhost:8080/` or `http://<Jenkins server IP
    address>:8080/` in a browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In order to troubleshoot Jenkins, access the logs file `/var/log/jenkins/jenkins.log`.
  prefs: []
  type: TYPE_NORMAL
- en: The Jenkins service runs under the user `Jenkins`*,* which is automatically
    created upon installation.
  prefs: []
  type: TYPE_NORMAL
- en: Starting, stopping, and restarting Jenkins on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Jenkins by default starts running when installed. Here are the commands to
    start, stop, restart, and check the status of the Jenkins service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start Jenkins, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, to stop Jenkins, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'To restart Jenkins, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'To check the status of the Jenkins service, use the following `systemctl` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Installing a standalone Jenkins server on Red Hat Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn to install Jenkins on Red Hat Linux. The installation
    process discussed here are also applies to Fedora.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we begin, make sure you have the following things ready:'
  prefs: []
  type: TYPE_NORMAL
- en: We need a machine with at least 4 GB of RAM and a Multi-core processor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on how you manage the infrastructure in your team, the machine could
    be an instance on a cloud platform (such as AWS, DigitalOcean, or any other cloud
    platform), a bare metal machine, or it could be a VM (on VMware vSphere or any
    other server virtualization software).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The machine should have RHEL 7.3 installed on it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check for admin privileges; the installation might ask for an admin username
    and password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure port `8080` is open.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to install Java:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Move to the `/tmp` directory and download Java:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, install Java. The following command will install the JRE:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'To set the `JAVA_HOME` environment variable, first get the Java installation''s
    location. Do this by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will print the list of Java applications installed on
    your machine, along with their installation paths. Copy the Java path that appears
    on your Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the Java path (the one that you copied earlier) inside the `/etc/environment` file using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Installing the latest version of Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To install the latest version of Jenkins, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Jenkins repository to the `yum` repository using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Jenkins using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: See the *Starting, stopping, and restarting Jenkins on Red Hat Linux* section if
    you are required to start Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jenkins is now ready for use. By default, the Jenkins service runs on port `8080`.
    To access Jenkins, use  `http://localhost:8080/` or `http://<Jenkins server IP
    address>:8080/` in a browser.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the latest stable version of Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you prefer to install a stable version of Jenkins, then follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Jenkins repository to the `yum` repository using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Jenkins using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: See the *Starting, stopping, and restarting Jenkins on Red Hat Linux* section
    if you are required to start Jenkins.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Starting, stopping, and restarting Jenkins on Red Hat Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the commands to start, stop, restart, and check the status of the
    Jenkins service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start Jenkins, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, to stop Jenkins, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'To restart Jenkins, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'To check the status of the Jenkins service, use the following `systemctl` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: In order to troubleshoot Jenkins, access the logs in `var/log/jenkins/jenkins.log`.
  prefs: []
  type: TYPE_NORMAL
- en: The Jenkins service runs with the user Jenkins, which automatically gets created
    upon installation.
  prefs: []
  type: TYPE_NORMAL
- en: Running Jenkins behind a reverse proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will learn how to position an Nginx server (running on a
    standalone machine) front of a Jenkins server (running on another standalone machine).
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we begin, make sure you have the following things ready:'
  prefs: []
  type: TYPE_NORMAL
- en: We need two machines with at least 4 GB of RAM and a Multi-core processor. One
    will run Nginx and the other will run Jenkins.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on how you manage the infrastructure in your team, the machine could
    be an instance on a cloud platform (such as AWS, DigitalOcean, or any other cloud
    platform), a bare metal machine, or it could be a VM (on VMware vSphere or any
    other server virtualization software).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The machine should have Ubuntu 16.04 or greater installed on it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check for admin privileges; the installation might ask for an admin username
    and password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both machines should be on the same network. The following setup assumes that
    your organization has an intranet for all its services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and configuring Nginx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The installation of Nginx on Ubuntu is simple. Follow these steps to install
    an Nginx server on Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the local package index:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Install `nginx` using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: Configuring the firewall on a Nginx server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We need to configure the firewall on our Nginx server to allow access to the
    Nginx service. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the firewall status using the `ufw` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'If it''s enabled, move to *step 3*. But, if you find it disabled, then enable
    the firewall using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: You should see the following output
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'List the available configurations using the following command. You should see
    three Nginx profiles and one OpenSSH profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: You should see the following output
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: The `Nginx Full` profile opens port `80` (unencrypted) and port `443` (TLS/SSL).
  prefs: []
  type: TYPE_NORMAL
- en: The `Nginx HTTP` profile opens only port `80` (unencrypted).
  prefs: []
  type: TYPE_NORMAL
- en: The `Nginx HTTPS` profile opens only port `443` (TLS/SSL).
  prefs: []
  type: TYPE_NORMAL
- en: The `OpenSSH` profile opens only port `22` (SSH).
  prefs: []
  type: TYPE_NORMAL
- en: It is always recommended to enable the most restrictive profile.
  prefs: []
  type: TYPE_NORMAL
- en: 'To keep things simple, we will enable the `Nginx Full` profile, as shown in
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, enable the `OpenSSH` profile if it''s not active, as shown. This will
    allow us to continue accessing our Nginx machine over SSH:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: You won't be able to log in to your Nginx machine if OpenSSH is disabled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Verify the changes using the following command. You should see `Nginx Full`
    and `OpenSSH` as allowed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Check if the Nginx service is running using the `systemctl` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'From the previous output, you can see that our Nginx service is running fine.
    Now try to access it using the browser. First, get the IP address of your machine
    using the `ip route` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Now access the Nginx home page using `http://<IP Address>:80`. You should see
    something similar to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/475542b9-94b7-47d6-a833-8837d27d1f70.png)'
  prefs: []
  type: TYPE_IMG
- en: The Nginx index page
  prefs: []
  type: TYPE_NORMAL
- en: Starting, stopping, and restarting the Nginx server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have your Nginx server up, let''s see some commands we can use
    to manage Nginx. Just like Jenkins, we will use the `systemctl` command to manage
    Nginx:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To stop Nginx, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'To start Nginx when it is stopped, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'To restart Nginx, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'To reload Nginx after making configuration changes, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: Securing Nginx using OpenSSL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn to set up a self-signed SSL certificate for use
    with our Nginx server.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an SSL certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run the following command to create a self-signed key and a certificate pair
    using OpenSSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table explains the arguments used in the previous command:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `req` | This argument indicates that we want to use X.509 **Certificate Signing
    Request** (**CSR**) management. |'
  prefs: []
  type: TYPE_TB
- en: '| `-x509` | This argument allows us to create a self-signed certificate instead
    of generating a certificate signing request. |'
  prefs: []
  type: TYPE_TB
- en: '| `-nodes` | This argument allows OpenSSL to skip the option to authenticate
    our certificate with a passphrase. |'
  prefs: []
  type: TYPE_TB
- en: '| `-days` | This argument sets the duration for which the certificate is valid.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `-newkey rsa: 2048` | This argument tells OpenSSL to generate a new certificate
    and a new key at the same time. The `rsa:2048` option makes the RSA key `2048`
    bits long. |'
  prefs: []
  type: TYPE_TB
- en: '| `-keyout` | This argument allows you to store the generated private key file
    in the location of your choice. |'
  prefs: []
  type: TYPE_TB
- en: '| `-out` | This argument allows you to store the generated certificates in
    the location of your choice. |'
  prefs: []
  type: TYPE_TB
- en: 'The moment you issue the following command to generate a private key and new
    certificate, you will be prompted to provide information. The prompts will look
    something as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: The **Common Name** (**CN**) field, also known as the **Fully Qualified Domain
    Name** (**FQDN**) is very important. You need to provide the IP address or the
    domain name of your Nginx server.
  prefs: []
  type: TYPE_NORMAL
- en: The `/etc/ssl/private/` will now contain your `nginx-selfsigned.key` file and
    the `/etc/ssl/certs/` will contain your `nginx-selfsigned.crt` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create a strong Diffie-Hellman group, which is used in negotiating
    **Perfect Forward Secrecy** (**PFS**) with clients. We will do this by using `openssl`,
    as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: This will take quite some time, but once it's done it will generate a `dhparam.pem`
    file inside `/etc/ssl/certs/`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating strong encryption settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following section, we will set up a strong SSL cipher suite to secure
    our Nginx server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a configuration file named `*s*sl-params.conf` in `/etc/nginx/snippets/`
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the following code inside the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Type *Ctrl* + *X* and choose *Y* to save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have used the recommendations by Remy van Elst that are available at [https://cipherli.st/](https://cipherli.st/).
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the Nginx configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will modify our Nginx configuration to enable SSL. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First and foremost, take a backup of your existing Nginx configuration file
    named `default` that is in `/etc/nginx/sites-available/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the file for editing using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'You will find a lot of commented lines inside the file. If you ignore them
    for a while, you will probably see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'We will modify the configuration so that the unencrypted HTTP requests are
    automatically redirected to encrypted HTTPS. We will do this by adding the following
    three lines, as highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: From the previous code, you can see that we have closed the server block.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will start a new server block, uncomment the two `listen` directives
    that use port `443`, and add `http2` to these lines in order to enable HTTP/2,
    as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will add the location of our self-signed certificate and key. We just
    need to include the two snippet files we set up:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will set the `server_name` value to our Nginx IP or domain name inside
    our SSL server block. By default, the `server_name` may be set to an *underscore*
    (`_`)*,* as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Type *Ctrl* + *X* and choose *Y* to save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling the changes and testing our Nginx setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now restart Nginx to implement our new changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, check whether there are any syntax errors in our files. Do this by typing
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is successful, you should see something similar to the following
    command output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart Nginx using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Next, access your Nginx server using `http://<Nginx_IP_Address>:80`. You should
    notice that you have been automatically redirected to `https://<Nginx_IP_Address>:80`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see a warning that looks similar to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5778110f-0867-4c0c-b119-383604539831.png)'
  prefs: []
  type: TYPE_IMG
- en: SSL warning
  prefs: []
  type: TYPE_NORMAL
- en: This is expected, as the certificate that we created isn't signed by one of
    your browser's trusted certificate authorities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Advanced... button and then click on **Proceed to 192.168.56.104
    (unsafe)**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f560e82a-351b-4746-afe3-af784edc9e8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Proceeding as unsafe
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now be able to see the Nginx default page, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5c249a7f-420a-40f2-ad57-94182360e9f5.png)'
  prefs: []
  type: TYPE_IMG
- en: The Nginx index page with SSL encryption
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Jenkins server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will perform some configurations on our Jenkins server.
    To set up a Jenkins server in the first place, see the *Installing a standalone
    Jenkins server on Ubuntu* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have a Jenkins server up and running, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: To make Jenkins work with Nginx, we need to update the Jenkins configuration
    so that the Jenkins server listens only on the Jenkins IP address or the Jenkins
    domain name interface rather than all interfaces (`0.0.0.0`). If Jenkins listens
    on all interfaces, then it's potentially accessible on its original, unencrypted
    port (`8080`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To achieve this, modify the `/etc/default/jenkins` configuration file, as shown
    in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: Inside the file, scroll all the way down to the last line or just look for the `JENKINS_ARGS`
    line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Append the following argument to the existing value of `JENKINS_ARGS`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'The final `JENKINS_ARGS` line should look something like this (single line):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: Type *Ctrl* + *X* and choose *Y* to save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To make the new configuration effective, restart the Jenkins server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'To check whether Jenkins is running properly, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Adding reverse proxy settings to the Nginx configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following steps will help you to add reverse proxy settings to the Nginx
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Nginx configuration file for editing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: 'As we''re sending all requests to our Jenkins server, comment out the default
    `try_files` line, as shown in the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the proxy settings as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Type *Ctrl* + *X* and choose *Y* to save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to check for any syntax errors in the Nginx configuration
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'If the output is error free, restart Nginx to make the new configuration effective.
    Use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, access your Nginx server using `https://<nginx_ip_address>:80`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e711c177-52a8-4c0a-b7e8-43858a7ab8f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Jenkins getting started page
  prefs: []
  type: TYPE_NORMAL
- en: Running Nginx and Jenkins on the same machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to run Jenkins behind a reverse proxy server (Nginx) with the Jenkins
    server and the Nginx server running on the same machine, then perform the following
    sections in sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up a machine with at least 4 GB of RAM and a Multi-core processor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Depending on how you manage the infrastructure in your team, the machine could
    be an instance on a cloud platform (such as AWS, DigitalOcean, or any other cloud
    platform), or a bare metal machine, or it could be a VM (on VMware vSphere or
    any other server virtualization software).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The machines should have Ubuntu 16.04 or greater installed on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check for admin privileges; the installation might ask for an admin username
    and password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Nginx; refer to the *Installing and configuring Nginx *section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the firewall; refer to the *Configuring the firewall on Nginx server *section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Secure the Nginx server using OpenSSL; refer to the *Securing Nginx using OpenSSL *section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure the firewall to allow traffic on port `8080` using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, check the firewall status using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: Install Jenkins, refer to the *Installing a standalone Jenkins server on Ubuntu *section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the Jenkins server; refer to the *Configuring the Jenkins server *section.
    While performing the steps mentioned in this section, make sure to put `127.0.0.1`
    in place of `<IP Address of your Jenkins>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the reverse proxy settings in Nginx; refer to the *Adding reverse proxy
    settings to Nginx configuration *section. While performing the steps mentioned
    in this section, you will be asked to enter the Jenkins server IP at various places
    inside the Nginx configuration file. Since our Jenkins server is now running on
    the same machine as Nginx, the value for `<IP Address of your Jenkins>` should
    be `localhost`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running Jenkins on Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The true advantage of having Jenkins on Docker is when you have to quickly create
    multiple development and staging instances of your production Jenkins server.
    It's also very useful in redirecting the traffic to a secondary Jenkins server
    while you perform maintenance activities on the primary Jenkins server. While
    we will see these use cases later, let's first try to run Jenkins on Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we begin, make sure you have the following things ready:'
  prefs: []
  type: TYPE_NORMAL
- en: We need a machine with at least 4 GB of RAM (the more the better) and a Multi-core
    processor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on how you manage the infrastructure in your team, the machine could
    be an instance on a cloud platform (such as AWS, DigitalOcean, or any other cloud
    platform), a bare metal machine, or it could be a VM (on VMware vSphere or any
    other server virtualization software).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The machines should have Ubuntu 16.04 or greater installed on it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check for admin privileges; the installation might ask for an admin username
    and password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a Docker host
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to install Docker using the repository method
    and using the Debian package. Follow the steps in the following sections to set
    up a Docker host.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to set up a repository:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command to let `apt` use a repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'Add Docker''s official GPG key using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the key ID is exactly `58118E89F3A912897C070ADBF76221572C52609D` using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the following command to set up the stable repository to download Docker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: It's recommended to always use the stable version of repository.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After setting up the repository, perform the following steps to install Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `apt` package index using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the latest version of Docker, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: 'To install a specific version of Docker, list the available versions using
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: The output of the previous command depends on the type of repository configured
    in the previous section (*Setting up the repository*).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, execute the following command to install the specific version of Docker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: 'The Docker service starts automatically. To verify if Docker is installed and
    running, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command should run without any errors, and you should see a `Hello
    from Docker!` message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: Installing from a package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Follow these steps to install Docker using the `.deb` package:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the `.deb` package of your choice from [https://apt.dockerproject.org/repo/pool/main/d/docker-engine/](https://apt.dockerproject.org/repo/pool/main/d/docker-engine/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To install the downloaded package, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify your Docker installation by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: Running the Jenkins container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have our Docker host ready, let''s run Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to start a Jenkins container. This might take some
    time, as Docker will try to download the Jenkins Docker image (`jenkins/jenkins:lts`)
    from Docker Hub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table explains the Docker command that we used in the previous
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Parameters** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `docker` | Used to invoke the Docker utility. |'
  prefs: []
  type: TYPE_TB
- en: '| `run` | A Docker command to run a container. |'
  prefs: []
  type: TYPE_TB
- en: '| `-d` | This option runs the container in the backend. |'
  prefs: []
  type: TYPE_TB
- en: '| `--name` | This option allows you to give your container a name. |'
  prefs: []
  type: TYPE_TB
- en: '| `-p` | This option is used to map a container''s port with the host. |'
  prefs: []
  type: TYPE_TB
- en: '| `jenkins/jenkins:lts` | The name of the Docker image and its version used
    to create a container. `jenkins/jenkins` is the Jenkins Docker image, and `lts`
    is a particular version of that image. |'
  prefs: []
  type: TYPE_TB
- en: 'To see the list of running containers, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: To use the latest LTS release of Jenkins, use the `jenkins/jenkins:lts` Jenkins
    Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: To use the latest weekly release of Jenkins, use the `jenkins/jenkins` Jenkins
    Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make a note of your Docker host IP using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: Your Jenkins server is now available on `http:<IP Address of Docker host>:8080`.
    You should now be able to see the Jenkins Getting Started page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To proceed with the Jenkins setup, you might need the `initialAdminPassword`
    key. This file is inside `/var/jenkins_home/secrets/`. There are two ways you
    can get the data inside the `initialAdminPassword` file. You can use the `docker
    exec` command, as illustrated here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, by logging inside the running Jenkins container, using the same `docker
    exec` command, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you are inside the container, execute the following Linux command to get
    the contents of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: 'Both the commands will print the content of the `initialAdminPassword` file,
    similar to the one shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `-i` option allows you to interact with your Docker container and
    the `-t` option allocates a pseudo `-tty`.
  prefs: []
  type: TYPE_NORMAL
- en: While you are still inside the Jenkins container, notice that the `jenkins_home`
    directory is present inside the `/var/` directory and the `jenkins.war` file is
    located inside `/usr/share/jenkins`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `jenkins_home` is a very important directory where all your Jenkins jobs,
    builds, metadata, configurations, users, and everything, are stored.
  prefs: []
  type: TYPE_NORMAL
- en: Running a Jenkins container using a data volume
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we created a Jenkins container without a mechanism
    to make the data inside the `jenkins_home` directory persistent. In simple words,
    if for some reason you delete the Jenkins container, you delete your `jenkins_home`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, there is still a better way to run Jenkins with Docker, and that is
    by using data volumes. Data volumes are special directories that make the data
    persistent and independent of the container's life cycle. If a container writes
    data to a data volume, deleting the container will still make the data available
    because the container and its associated data volume are two different entities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a Jenkins container using a data volume:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run a Jenkins container using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: The `-v jenkins-home-prod:/var/jenkins_home` option will create a data volume
    named `jenkins-home-prod` and will map it to the `/var/jenkins_home` directory inside
    the container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command to see the contents of the `/var/jenkins_home`
    directory inside the `jenkins_prod` Jenkins container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: 'To list your Docker volume, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: Now you have a Jenkins container with a persistent `jenkins_home` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing the data volume
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will test our data volume by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: We will make some changes on our Jenkins server; this will modify the content
    inside the `/var/jenkins_home` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will delete the Jenkins container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will create a new Jenkins container that will use the same data volume.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check for the active Jenkins container using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: Access the Jenkins server using `http://<ip address of docker host>:8080`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Get the contents of the `initialAdminPassword`  file using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: Paste the `initialAdminPassword` under the Administrator password field on the
    Jenkins page and proceed with the Jenkins setup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new user at the Create First Admin User step, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7e5005a6-ceda-46d4-a968-edb72ea1ff52.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the first admin user on Jenkins
  prefs: []
  type: TYPE_NORMAL
- en: Proceed with the remaining steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command to list the content of the `/var/jenkins_home/users`
    directory. This the is location where you have all the user accounts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: 'Output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: Notice our newly created user developer is listed under the `users` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s delete the `jenkins_prod` Jenkins container using the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: 'List the existing Docker containers (running/stopped) using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output. However, you shouldn''t see `jenkins_prod`
    in the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: 'List the volumes using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something similar. You can see that deleting the container did
    not delete its associated data volume:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s create a new Jenkins container named `jenkins_prod` that uses the
    existing `jenkins-home-prod` volume:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: Try to access the Jenkins dashboard using `http://<IP Address of Docker host>:8080`.
    You will not see the Jenkins setup page; instead, you should see the login page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in to Jenkins using the user that we created earlier. You should be able
    to log in. This proves that our entire Jenkins configuration is intact.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating development and staging instances of Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many times you are in need of a development or a staging instance of your Jenkins
    production server to test something new. Docker makes it easy and safe to create
    multiple instances of your Jenkins servers.
  prefs: []
  type: TYPE_NORMAL
- en: Here is how to do it. In this section, we will create a development and a staging
    instance of Jenkins using our Jenkins production instance.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we begin, make sure you have the following things ready:'
  prefs: []
  type: TYPE_NORMAL
- en: We need a Docker host running a Jenkins instance (production), utilizing data
    volumes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refer to the *Running a Jenkins container using a data volume *section
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an empty data volume
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a data volume named `jenkins-home-staging` and `jenkins-home-development`
    for our staging and development instances of Jenkins, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an empty `jenkins-home-staging` data volume, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: 'To create an empty `jenkins-home-development` data volume, run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: 'List the newly create data volumes using the `docker volume` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: From the previous list, you can see the newly created data volumes named `jenkins-home-staging`
    and `jenkins-home-development`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have followed the previous section, you should also see the data volume
    `jenkins-home-prod` that is being used by our Jenkins production instance `jenkins_prod`.
  prefs: []
  type: TYPE_NORMAL
- en: Copying data between data volumes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now have our newly created empty data volumes. Let''s copy the content of
    `jenkins-home-prod` to each of them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the content of `jenkins-home-prod` to `jenkins-home-staging` using the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It will first create an interactive container using the Docker image for Jenkins
    `jenkins/jenkins:lts` (the container is temporary).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All actions performed on this temporary container will be using the `root` user.
    Notice the `--user root` option in the previous command.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It will mount the content of the  `jenkins-home-prod` data volume onto the `/var/jenkins_home` directory present
    inside the container. Notice the `-v jenkins-home-prod:/var/jenkins_home` option.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, it will mount the non-existing content of the `jenkins-home-staging` data
    volume onto the non-existing `/var/jenkins_home_staging` directory inside the
    container. Notice the `-v jenkins-home-staging:/var/jenkins_home_staging` option.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It will then, copy the content of `/var/jenkins_home` to `/var/jenkins_home_staging`.
    Notice the `bash -c "cd /var/jenkins_home_staging && cp -a /var/jenkins_home/*"`
    option.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, copy the content of `jenkins-home-prod` to `jenkins-home-development`
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have the same data on all the three data volumes: `jenkins-home-prod`,
    `jenkins-home-staging`, and `jenkins-home-development`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the development and staging instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have data volumes for development and staging, let''s spawn the
    containers using them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a Jenkins staging instance named `jenkins_staging` using the  `jenkins-home-staging` data
    volume, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will create a Jenkins instance running on port `8080` and
    mapped to port `8081` of the Docker host. We choose a different port on Docker
    host because we already have our Jenkins production instance, `jenkins_prod`,
    running on port `8080`, which is mapped to port `8080` of the Docker host.
  prefs: []
  type: TYPE_NORMAL
- en: The same reason applies to mapping port `50000` on the Jenkins instance to port
    `50001` on the Docker host.
  prefs: []
  type: TYPE_NORMAL
- en: Try to access your Jenkins staging instance using `http:<IP Address of Docker
    host>:8081`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Similarly, to create a Jenkins development instance named `jenkins_development`
    using the  `jenkins-home-development` data volume, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will create a Jenkins instance running on port `8080` and
    mapped to port `8082` of the Docker host. We choose a different port on the Docker
    host because port `8080` and `8081` are already in use on the Docker host.
  prefs: []
  type: TYPE_NORMAL
- en: The same reason applies to mapping port `50000` on the Jenkins instance to port
    `50002` on the Docker host.
  prefs: []
  type: TYPE_NORMAL
- en: Try to access your Jenkins development instance using `http:<IP Address of Docker
    host>:8082`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to install Jenkins on an Apache Tomcat server
    and as a standalone application on various operating systems. We also learned
    how to set up a reverse proxy server (Nginx) in front of our Jenkins server and
    secured the connection using SSL.
  prefs: []
  type: TYPE_NORMAL
- en: Above all, we learned how to run Jenkins on Docker. We also saw the advantages
    of using data volumes on Docker and learned how to leverage them to create on-demand
    instances (development or staging) of our Jenkins server.
  prefs: []
  type: TYPE_NORMAL
- en: The main objective of the current chapter was to show the readers how diverse
    Jenkins is in many ways when it comes to the installation process and the variety
    of operating systems that it supports. The Jenkins administration will be discussed
    in [Chapter 4](89cbc75b-c9e8-41b8-8657-aab37e6e7ad4.xhtml), *Configuring Jenkins*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will have a quick overview of what's new in Jenkins
    2.x.
  prefs: []
  type: TYPE_NORMAL
