- en: Chapter 6. Iterative Control Structures – Loops
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You learned about conditional controls in the previous chapter. Our journey
    into Ansible's world of control structures continues with iterative controls.
    Often, we need to create a list of directories, install a bunch of packages, or
    define and walk over nested hashes or dictionaries. Traditional programming languages
    use the `for` or `while` loops for iteration. Ansible replaces them with the `with`
    statements.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to learn about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: How to use iterative controls using the `with` statements
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to loop arrays to create multiple objects at once
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to define nested hashes and walk over them to create data-driven roles
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The omnipotent with statement
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Iterating plain lists, parsing dictionaries, looping a sequence of numbers,
    parsing through a path and selectively copying files, or just picking up a random
    item from a list could be achieved using the "Swiss knife" utility, `with` statement.
    The `with` statements take the following form:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, the `xxx` parameter is the type of data that needs to be looped, for example,
    items, dictionaries, and so on.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the types of data that the `with` statement can iterate:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '| Construct | Data type | Description |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
- en: '| `with_items` | Array | This is used to loop array items. For example, this
    is used to create a group of users, directories, or to install a list of packages.
    |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
- en: '| `with_nested` | Nested loops | This is used to parse multidimensional arrays.
    For example, to create a list of MySQL users and grant them access to a group
    of databases. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
- en: '| `with_dict` | Hashes | This is used to parse a dictionary of key-value pairs
    and create virtual hosts. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
- en: '| `with_fileglobs` | Files with pattern match | This is used to parse a path
    and copy only those files that match a certain pattern. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
- en: '| `with_together` | Sets | This is used to join two arrays as a set and to
    loop over it. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
- en: '| `with_subelements` | Hash subelement | This is used to parse a subelement
    of a hash. For example, to walk over the list of SSH keys and distribute them
    to a user. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
- en: '| `with_sequence` | Integer sequence | This is used to loop a sequence of numbers.
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
- en: '| `with_random_choice` | Random choice | This is used to pick up items from
    the array in a random order. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: '| `with_indexed_items` | Array with index | This is an array with an index
    and is useful when an index for items is required. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
- en: Configuring WordPress requisites
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While creating a role to install WordPress in [Chapter 4](ch04.html "Chapter 4. Bringing
    In Your Code – Custom Commands and Scripts"), *Bringing In Your Code – Custom
    Commands and Scripts*, we created tasks to download, extract, and copy the WordPress
    application. However, that''s not enough to launch WordPress, which has the following
    prerequisites:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: A web server
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP bindings for a web server
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MySQL database and MySQL users
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Nginx web server and MySQL service have already been installed in our case.
    We still need to install and configure PHP along with the MySQL database and a
    user required for our WordPress application. To handle PHP requests, we choose
    to implement the PHP5-FPM handler, which is an alternative to the traditional
    FastCGI implementation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Nginx web 服务器和 MySQL 服务已经在我们的案例中安装。我们仍然需要安装并配置 PHP，以及为我们的 WordPress 应用程序所需的
    MySQL 数据库和用户。为了处理 PHP 请求，我们选择实现 PHP5-FPM 处理程序，这是传统 FastCGI 实现的替代品。
- en: The PHP5-FPM role
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP5-FPM 角色
- en: 'In **PHP5-FPM**, **FPM** stands for **FastCGI Process Manager**. PHP5-FPM comes
    with advanced features over **fastcgi**, which are useful for managing high-traffic
    sites. It is suitable for serving our fifanews site, which is expected to get
    a few million hits a day. Following our design tenet of creating a modular code,
    we would keep PHP functionality in its own role. Let''s initialize the PHP5-FPM
    role using the Ansible-Galaxy command, as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **PHP5-FPM** 中，**FPM** 代表 **FastCGI Process Manager**。PHP5-FPM 提供了比 **fastcgi**
    更高级的功能，对于管理高流量站点非常有用。它适用于提供我们的 fifanews 站点，该站点每天预计会有数百万次点击。根据我们创建模块化代码的设计原则，我们将保持
    PHP 功能在其自己的角色中。让我们使用 Ansible-Galaxy 命令初始化 PHP5-FPM 角色，如下所示：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Defining an array
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义一个数组
- en: 'PHP installation will involve the installation of multiple packages, including
    `php5-fpm`, `php5-mysql`, and a few others. So far, we have been writing tasks
    one at a time. For example, let''s take a look at the following code snippet:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 安装将涉及安装多个软件包，包括 `php5-fpm`、`php5-mysql` 和其他一些软件包。到目前为止，我们一直是一次编写一个任务。例如，让我们来看看以下代码片段：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'However, this could become repetitive when we want to install multiple packages,
    also causing redundant code. Being committed to writing data-driven roles, we
    would drive the installation of packages through a variable, which takes a list
    of packages and then iterates the list. Let''s begin defining the parameters required
    to list the packages, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当我们想要安装多个软件包时，这可能会变得重复，并导致冗余代码。为了致力于编写数据驱动的角色，我们将通过一个变量来推动软件包的安装，该变量获取一个软件包列表，然后对该列表进行迭代。让我们开始定义需要列出软件包的参数，如下所示：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is the analysis of the preceding code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前面代码的分析：
- en: The `php5` variable is a variable dictionary, which would contain all the parameters
    that we pass to the `php5-fpm` role.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`php5` 变量是一个变量字典，其中包含我们传递给 `php5-fpm` 角色的所有参数。'
- en: The `php5.packages` parameter is an array of packages, one defined on each line
    in the code. This will be passed to a task that will iterate each item and install
    it.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`php5.packages` 参数是一个包的数组，在代码的每一行定义一个包。这将被传递给一个任务，该任务将迭代每个项目并安装它。'
- en: The `php5.service` parameter defines the name of the service, which would be
    referred to from the service task.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`php5.service` 参数定义了服务的名称，该名称将在服务任务中引用。'
- en: Looping an array
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环一个数组
- en: 'Let''s now create tasks for the `php5-fpm` role. We need to install packages
    from the array and then start the service. We will split the package''s functionalities
    in to two separate task files and call it from the `main.yml` file, as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为 `php5-fpm` 角色创建任务。我们需要从数组中安装软件包，然后启动服务。我们将包的功能拆分为两个独立的任务文件，并从 `main.yml`
    文件中调用它，如下所示：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Along with tasks, the handler to restart the `php5-fpm` role can be written,
    as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了任务，还可以编写重新启动 `php5-fpm` 角色的处理程序，如下所示：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s analyze the preceding code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析前面的代码：
- en: '**Main**: The `main.yml` file includes variables based on the `ansible_os_family`
    fact for non-Debian systems. This is useful for overriding variables that are
    platform-specific. After including the `vars` file, the main task goes on to include
    the `install.yml` and `service.yml` files.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主:** `main.yml` 文件根据非 Debian 系统的 `ansible_os_family` 事实包含变量。这对于覆盖特定于平台的变量非常有用。在包含
    `vars` 文件之后，主任务继续包含 `install.yml` 和 `service.yml` 文件。'
- en: '**Install**: The `install.yml` file is where we iterate an array of packages
    that were defined earlier. Since the file contains an array, we use the `with.items`
    construct with the `php5.packages` variable and pass the `{{ item }}` parameter
    as the name of the package to be installed. We could have alternatively passed
    the array directly, as follows:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装**：`install.yml` 文件是我们迭代先前定义的一个包数组的地方。由于该文件包含一个数组，我们使用 `with.items` 构造与
    `php5.packages` 变量一起使用，并将 `{{ item }}` 参数传递为要安装的软件包的名称。我们也可以直接传递数组，如下所示：'
- en: '[PRE6]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Service and handler**: The `service.yml` file and the handler `main.yml`
    file manage the start and restart of the `php5-fom` service. It takes a dictionary
    variable `php5[''service''][''name'']` to determine the service name.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating MySQL databases and user accounts
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WordPress is a content management system that requires a MySQL DB to be available
    to store data, such as posts, users, and so on. Additionally, it also requires
    a MySQL user with appropriate privileges to connect to the database from a WordPress
    application. We get one admin user while installing MySQL, however, it's a good
    practice to create an additional user account and grant privileges to the user
    as and when required.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Creating a hash
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A **hash**, an abbreviation of hash table, is a dictionary of key-value pairs.
    It''s a useful data structure to create a multilevel variable, which can then
    be programmatically to create multiple objects, each having their own values.
    We will define the databases and users as dictionary items in the `group_vars`/`all`
    file, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here is the analysis of the preceding code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: We defined this variable hash in the `group_vars`/`all` file instead of in the
    role. This is because we would like to keep roles generic and shareable, without
    adding data specific to our respective environments.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We defined the databases and user configurations as multilevel dictionaries,
    or hashes.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nested hashes
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This multilevel hash is explained through the following diagram:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![Nested hashes](img/B03800_06_01.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: 'The following is the description of how this nested hash is structured:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'A MySQL variable is a hash with two keys: databases and users. For example:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The values for each of these two keys are in turn hashes, or dictionaries of
    information, about the databases and users that are to be created. For example:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Each database in turn is a dictionary of keys and values. For example, for the
    MySQL user `fifalive`, the key-value pairs are "state:present".
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iterating a hash
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating databases and user accounts would typically require the creation of
    custom scripts with templates, which would then be called using command modules.
    Ansible instead comes with batteries, and staying true to this statement, it provides
    us with ready-made modules to perform MySQL-related tasks, that is, the `mysql_db`
    and `mysql_user` parameters. Using the `with_dict` statement, we will walk through
    the dictionaries of databases and users that we defined earlier, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here is the analysis of the preceding code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: The `mysql['databases']` and `mysql['users']` parameters are dictionaries that
    are passed to a task using the `with_dict` statements
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each dictionary, or hash, has a key-value pair that is passed as the `{{ item.key
    }}` and `{{ item.value }}` parameters
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `{{ item.value }}` parameter is a dictionary. Each key in this dictionary
    is then referred to as `{{ item.value.<key> }}`. For example, the `{{ item.value.state
    }}` parameter
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram explains how this nested hash is parsed:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![Iterating a hash](img/B03800_06_02.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: Creating Nginx virtual hosts
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After installing the `php5-fpm` manager and creating the MySQL databases and
    user accounts, the last bit of configuration that is left is to create a virtual
    host with Nginx to serve our WordPress application. The Nginx web server that
    we installed earlier serves a simple HTML page and is not aware of the existence
    of the WordPress application or how to serve it. Let's start by adding these configurations.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Defining the PHP site information
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to the `fifanews.com` site that we are setting up, we may also
    launch a few more sites related to soccer in future. Hence, we need to have the
    ability to programmatically add multiple sites with the same Nginx server. Creating
    a dictionary to define site information and embedding it into a template sounds
    like a good choice for this. Since site information is specific to us, we will
    add the variable hash to the `group_vars` file, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We learned how to parse this dictionary from the Ansible task. Let''s add a
    task that will allow us to walk through this dictionary, pass the values to templates,
    and create virtual host configurations:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Each item in this dictionary is passed to the template, in this case, to the
    `php_vhost.j2` parameter. This in turn reads the hash and creates a virtual host
    template, which configures a PHP application, as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is the analysis of the preceding code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: The `{{ ansible_managed }}` parameter is a special variable that adds a comment
    notifying the server that this file is being managed by Ansible, with the path
    to this file in the Ansible repository, last modification time, and the user who
    modified it.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The template gets a dictionary item and parses its values since it's a nested
    hash. This template has configuration for creating a php virtual hosts for Nginx
    using dictionary values set with `nginx.phpsites`.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration parameters provided with the dictionary include doc root, port,
    backend to use which make Nginx aware of how to handle incoming PHP requests,
    which backend to use, which port to listen on, and so on.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, we add the new role to the `www.yaml` file, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Run the playbook using the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'After the run is complete, it''s time to test our work. Let''s load the following
    URL in the browser:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '`http://<web_server_ip>:8080`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'Congratulations!! We''ve successfully created a WordPress PHP application with
    the Nginx web server and MySQL backend, fully configured. Now, we are ready to
    set up our fifanews site:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining the PHP site information](img/B03800_06_03.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: Review questions
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Do you think you''ve understood this chapter well enough? Try answering the
    following questions to test your understanding:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Which statement in Ansible replaces the `for` loop?
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How is the `with_____` statement used to iterate dictionaries?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you add a statement to a template that prints when, and by whom, it
    was modified?
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you print the values of a nested hash?
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create multiple objects iteratively. We
    started with an overview of the omnipotent `with` statement and its various forms.
    Then, we dove deeper into iterating the two most essential data structures, which
    are, arrays and hashes. The `php5-fpm` role takes an array with a list of packages
    and creates a task to install those in a loop. To create MySQL databases and users,
    we defined variable dictionaries or hashes and iterated them. Finally, we added
    Nginx template configurations to create multiple virtual hosts serving PHP applications
    by iterating a nested dictionary.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何迭代创建多个对象。我们从全能的`with`语句及其各种形式的概述开始。然后，我们更深入地探讨了迭代两种最基本的数据结构，即数组和哈希。`php5-fpm`角色接受一个包含软件包列表的数组，并创建一个循环安装这些软件包的任务。为了创建MySQL数据库和用户，我们定义了变量字典或哈希并对它们进行了迭代。最后，我们通过迭代嵌套字典添加了Nginx模板配置，以创建多个虚拟主机来提供PHP应用程序。
- en: In the next chapter, you will learn how to discover information about other
    nodes using magic variables.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用魔术变量发现有关其他节点的信息。
