["```\n- name: setting up VirusTotal\n  hosts: malware\n  remote_user: ubuntu\n  become: yes\n\n  tasks:\n    - name: installing pip\n      apt:\n        name: \"{{ item }}\"\n\n      with_items:\n        - python-pip\n        - unzip\n\n    - name: checking if vt already exists\n      stat:\n        path: /usr/local/bin/vt\n      register: vt_status\n\n    - name: downloading VirusTotal api tool repo\n      unarchive:\n        src: \"https://github.com/doomedraven/VirusTotalApi/archive/master.zip\"\n        dest: /tmp/\n        remote_src: yes\n      when: vt_status.stat.exists == False \n\n    - name: installing the dependencies\n      pip:\n        requirements: /tmp/VirusTotalApi-master/requirements.txt\n      when: vt_status.stat.exists == False \n\n    - name: installing vt\n      command: python /tmp/VirusTotalApi-master/setup.py install\n      when: vt_status.stat.exists == False\n```", "```\n- name: scanning file in VirusTotal\n  hosts: malware\n  remote_user: ubuntu\n  vars:\n    vt_api_key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX #use Ansible-vault\n    vt_api_type: public # public/private\n    vt_intelligence_access: False # True/False\n    files_in_local_system: /tmp/samples/\n    files_in_remote_system: /tmp/sample-file/\n\n  tasks:\n    - name: creating samples directory\n      file:\n        path: \"{{ files_in_remote_system }}\"\n        state: directory\n\n    - name: copying file to remote system\n      copy:\n        src: \"{{ files_in_local_system }}\"\n        dest: \"{{ files_in_remote_system }}\"\n        directory_mode: yes\n\n    - name: copying configuration\n      template:\n        src: config.j2\n        dest: \"{{ files_in_remote_system }}/.vtapi\"\n\n    - name: running VirusTotal scan\n      command: \"vt -fr {{ files_in_remote_system }}\"\n      args:\n        chdir: \"{{ files_in_remote_system }}\"\n      register: vt_scan\n\n    - name: removing the samples\n      file:\n        path: \"{{ files_in_remote_system }}\"\n        state: absent\n\n    - name: VirusTotal scan results\n      debug:\n        msg: \"{{ vt_scan.stdout_lines }}\"\n```", "```\n- name: setting up cuckoo\n  hosts: cuckoo\n  remote_user: ubuntu\n  become: yes\n\n  roles:\n    - dependencies\n    - virtualbox\n    - yara\n    - cuckoo\n    - start-cukcoo\n```", "```\n- name: installing pre requirements\n  apt:\n    name: \"{{ item }}\"\n    state: present\n    update_cache: yes\n\n  with_items:\n    - python\n    - python-pip\n    - python-dev\n    - libffi-dev\n    - libssl-dev\n    - python-virtualenv\n    - python-setuptools\n    - libjpeg-dev\n    - zlib1g-dev\n    - swig\n    - tcpdump\n    - apparmor-utils\n    - mongodb\n    - unzip\n    - git\n    - volatility\n    - autoconf\n    - libtool\n    - libjansson-dev\n    - libmagic-dev\n    - postgresql\n    - volatility\n    - volatility-tools\n    - automake\n    - make\n    - gcc\n    - flex\n    - bison\n\n- name: setting capabilitites to tcpdump\n  capabilities:\n    path: /usr/sbin/tcpdump\n    capability: \"{{ item }}+eip\"\n    state: present\n\n  with_items:\n    - cap_net_raw\n    - cap_net_admin\n```", "```\n- name: adding virtualbox apt source\n  apt_repository:\n    repo: \"deb http://download.virtualbox.org/virtualbox/debian xenial contrib\"\n    filename: 'virtualbox'\n    state: present\n\n- name: adding virtualbox apt key\n  apt_key:\n    url: \"https://www.virtualbox.org/download/oracle_vbox_2016.asc\"\n    state: present\n\n- name: install virtualbox\n  apt:\n    name: virtualbox-5.1\n    state: present\n    update_cache: yes\n```", "```\n- name: copying the setup scripts\n  template:\n    src: \"{{ item.src }}\"\n    dest: \"{{ item.dest }}\"\n    mode: 0755\n\n  with_items:\n    - { src: \"yara.sh\", dest: \"/tmp/yara.sh\" }\n    - { src: \"ssdeep.sh\", dest: \"/tmp/ssdeep.sh\" }\n\n- name: downloading ssdeep and yara releases\n  unarchive:\n    src: \"{{ item }}\"\n    dest: /tmp/\n    remote_src: yes\n\n  with_items:\n    - https://github.com/plusvic/yara/archive/v3.4.0.tar.gz\n    - https://github.com/ssdeep-project/ssdeep/releases/download/release-2.14.1/ssdeep-2.14.1.tar.gz\n\n- name: installing yara and ssdeep\n  shell: \"{{ item }}\"\n  ignore_errors: yes\n\n  with_items:\n    - /tmp/yara.sh\n    - /tmp/ssdeep.sh\n\n- name: installing M2Crypto\n  pip:\n    name: m2crypto\n    version: 0.24.0\n```", "```\n# yara script\n#!/bin/bash\n\ncd /tmp/yara-3.4.0\n./bootstrap\n./configure --with-crypto --enable-cuckoo --enable-magic\nmake\nmake install\ncd yara-python\npython setup.py build\npython setup.py install\n\n# ssdeep script\n#!/bin/bash\n\ncd /tmp/ssdeep-2.14.1\n./configure\n./bootstrap\nmake\nmake install\n```", "```\n  - name: adding cuckoo to vboxusers\n    group:\n      name: cuckoo\n      state: present\n\n  - name: creating new user and add to groups\n    user:\n      name: cuckoo\n      shell: /bin/bash\n      groups: vboxusers, cuckoo\n      state: present\n      append: yes\n\n  - name: upgrading pip, setuptools and cuckoo\n    pip:\n      name: \"{{ item }}\"\n      state: latest\n\n    with_items:\n      - pip\n      - setuptools\n      - pydeep\n      - cuckoo\n      - openpyxl\n      - ujson\n      - pycrypto\n      - distorm3\n      - pytz\n      - weasyprint\n\n  - name: creating cuckoo home direcotry\n    command: \"cuckoo\"\n    ignore_errors: yes\n\n  - name: adding cuckoo as owner\n    file:\n      path: \"/root/.cuckoo\"\n      owner: cuckoo\n      group: cuckoo\n      recurse: yes\n```", "```\n- name: copying the configurationss\n  template:\n    src: \"{{ item.src }}\"\n    dest: /root/.cuckoo/conf/{{ item.dest }}\n\n  with_items:\n    - { src: \"cuckoo.conf\", dest: \"cuckoo.conf\"}\n    - { src: \"auxiliary.conf\", dest: \"auxiliary.conf\"}\n    - { src: \"virtualbox.conf\", dest: \"virtualbox.conf\"}\n    - { src: \"reporting.conf\", dest: \"reporting.conf\"}\n\n- name: starting cuckoo server\n  command: cuckoo -d\n  ignore_errors: yes\n\n- name: starting cuckoo webserver\n  command: \"cuckoo web runserver 0.0.0.0:8000\"\n    args:\n      chdir: \"/root/.cuckoo/web\"\n  ignore_errors: yes\n```", "```\n- name: Cuckoo malware sample analysis\n  hosts: cuckoo\n  vars:\n    local_binaries_path: /tmp/binaries\n\n  tasks:\n    - name: copying malware sample to cuckoo for analysis\n      copy:\n        src: \"{{ local_binaries_path }}\"\n        dest: \"/tmp/binaries/{{ Ansible_hostname }}\"\n\n    - name: submitting the files to cuckoo for analysis\n      command: \"cuckoo submit /tmp/binaries/{{ Ansible_hostname }}\"\n      ignore_errors: yes\n```", "```\n$ git clone https://github.com/blacktop/docker-cuckoo\n$ cd docker-cuckoo\n$ docker-compose up -d\n```", "```\n$ git clone https://github.com/StamusNetworks/Ansible-misp.git\n$ cd Ansible-misp\n$ Ansible-playbook -i hosts misp.yaml\n```", "```\nFor the MISP web interface -> admin@admin.test:admin\nFor the system -> misp:Password1234\n```", "```\n- name: Setting up Viper - binary management and analysis framework\n  hosts: viper\n  remote_user: ubuntu\n  become: yes\n\n  roles:\n    - dependencies\n    - setup\n```", "```\n- name: installing required packages\n  apt:\n    name: \"{{ item }}\"\n    state: present\n    update_cache: yes\n\n  with_items:\n    - gcc\n    - python-dev\n    - python-pip\n    - libssl-dev\n    - swig\n\n- name: downloading ssdeep release\n  unarchive:\n    src: https://github.com/ssdeep-project/ssdeep/releases/download/release-2.14.1/ssdeep-2.14.1.tar.gz\n    dest: /tmp/\n    remote_src: yes\n\n- name: copy ssdeep setup script\n  template:\n    src: ssdeep.sh\n    dest: /tmp/ssdeep.sh\n    mode: 0755\n\n- name: installing ssdeep\n  shell: /tmp/ssdeep.sh\n  ignore_errors: yes\n\n- name: installing core dependencies\n  pip:\n    name: \"{{ item }}\"\n    state: present\n\n  with_items:\n    - SQLAlchemy\n    - PrettyTable\n    - python-magic\n    - pydeep\n```", "```\n#!/bin/bash\n\ncd /tmp/ssdeep-2.14.1\n./configure\n./bootstrap\nmake\nmake install\n```", "```\n- name: downloading the release\n  unarchive:\n    src: https://github.com/viper-framework/viper/archive/v1.2.tar.gz\n    dest: /opt/\n    remote_src: yes\n\n- name: installing pip dependencies\n  pip:\n    requirements: /opt/viper-1.2/requirements.txt\n\n- name: starting viper webinterface\n  shell: nohup /usr/bin/python /opt/viper-1.2/web.py -H 0.0.0.0 &\n  ignore_errors: yes\n\n- debug:\n    msg: \"Viper web interface is running at http://{{ inventory_hostname }}:9090\"\n```", "```\n# Reference https://www.Ansible.com/security-automation-with-Ansible\n\n- name: Gather log files\n  hosts: servers\n  become: yes\n\n  tasks:\n    - name: List files to grab\n      find:\n        paths:\n          - /var/log\n        patterns:\n          - '*.log*'\n        recurse: yes\n      register: log_files\n\n    - name: Grab files\n      fetch:\n        src: \"{{ item.path }}\"\n        dest: \"/tmp/LOGS_{{ Ansible_fqdn }}/\"\n      with_items: \"{{ log_files.files }}\"\n```", "```\n- name: backing up the log data\n  hosts: localhost\n  gather_facts: false\n  become: yes\n  vars:\n    s3_access_key: XXXXXXX # Use Ansible-vault to encrypt\n    s3_access_secret: XXXXXXX # Use Ansible-vault to encrypt\n    localfolder: /tmp/LOGS/ # Trailing slash is important\n    remotebucket: secretforensicsdatausingAnsible # This should be unique in s3\n\n  tasks:\n    - name: installing s3cmd if not installed\n      apt:\n        name: \"{{ item }}\"\n        state: present\n        update_cache: yes\n\n      with_items:\n        - python-magic\n        - python-dateutil\n        - s3cmd\n\n    - name: create s3cmd config file\n      template:\n        src: s3cmd.j2\n        dest: /root/.s3cfg\n        owner: root\n        group: root\n        mode: 0640\n\n    - name: make sure \"{{ remotebucket }}\" is avilable\n      command: \"s3cmd mb s3://{{ remotebucket }}/ -c /root/.s3cfg\"\n\n    - name: running the s3 backup to \"{{ remotebucket }}\"\n      command: \"s3cmd sync {{ localfolder }} --preserve s3://{{ remotebucket }}/ -c /root/.s3cfg\"\n```", "```\n[default]\naccess_key = {{ s3_access_key }}\nsecret_key = {{ s3_access_secret }}\nhost_base = s3.amazonaws.com\nhost_bucket = %(bucket)s.s3.amazonaws.com\nwebsite_endpoint = http://%(bucket)s.s3-website-%(location)s.amazonaws.com/\nuse_https = True\nsignature_v2 = True\n```"]