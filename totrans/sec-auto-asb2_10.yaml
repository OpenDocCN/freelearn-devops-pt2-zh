- en: Writing an Ansible Module for Security Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible primarily works by pushing small bits of code to the nodes it connects
    to. These codes/programs are what we know as Ansible modules. Typically in the
    case of a Linux host these are copied over SSH, executed, and then removed from
    the node.
  prefs: []
  type: TYPE_NORMAL
- en: 'As stated in the Ansible Developer Guide (the best resource for all things
    Ansible-related):'
  prefs: []
  type: TYPE_NORMAL
- en: '"Ansible modules can be written in any language that can return JSON."'
  prefs: []
  type: TYPE_NORMAL
- en: Modules can be used by the Ansible command-line, in a playbook, or by the Ansible
    API. There are already hundreds of modules that ship with Ansible version 2.4.x.
  prefs: []
  type: TYPE_NORMAL
- en: Have a look at the module index on the Ansible documentation site: [http://docs.ansible.com/ansible/latest/modules_by_category.html](http://docs.ansible.com/ansible/latest/modules_by_category.html).
  prefs: []
  type: TYPE_NORMAL
- en: Currently, there are over 20 categories of modules with categories such as cloud,
    storage, Remote Management, and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes in spite of all the modules out there, you may need to write your
    own. This chapter will take you through writing a module that you can use with
    your Ansible playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible has an extremely detailed development guide ([http://docs.ansible.com/ansible/latest/dev_guide/index.html](http://docs.ansible.com/ansible/latest/dev_guide/index.html))
    that is the best place to start if you are planning to contribute your modules
    to be shipped with Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is not at all meant to replace that. Consider that if you plan
    to write modules for your internal use and you are not fussed about distributing
    them, this chapter offers you a simple-to-follow path where we will end up with
    a working module for enabling security automation, which has been our goal throughout.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to set up the development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing an Ansible hello world module to understand the basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where to seek further help
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a security problem statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Addressing that problem by writing a module of our own
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Along with that, we will try to understand and attempt to answer the following
    questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the good use cases for modules?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When does it make sense to use roles?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do modules differ from plugins?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started with a simple hello world module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with a hello world Ansible module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will pass one argument to our custom module and show if we have success or
    failure for the module executing based on that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since all of this is new to us, we will look at the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: The source code of the hello world module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output of that module for both success and failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The command that we will use to invoke it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we get started, all of this is based on the Ansible Developer Guide!
    The following code is in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We use Python for many scripting tasks, but we are not experts in it. But we
    believe this code is simple enough to understand:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We are importing some modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The second part is just how we need to declare the arguments we will accept
    for the module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our code, we can refer to the arguments the way we have taken the value of
    the `answer` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Based on the answer, if it is `no`, we indicate failure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the answer is `yes`, we indicate success.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s see what the output of this looks like if we provide answer as `yes`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And if the answer is `no`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The main difference in the output is the indication of either the `SUCCESS`
    or `FAILED` status and the message that we provided.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we haven''t set up the development environment so far, we set an environment
    variable for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ANSIBLE_LIBRARY=.` indicates that search the module to be executed in the
    current directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With `-m`, we call our module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With `-a`, we pass the module argument, which in this case is answered with
    possible values of `yes` or `no`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We end with the host that we want to run the module on, which is local for this
    example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While Ansible is written in Python, please note that the modules can be written
    in any language capable of returning messages in JSON. A great starting point
    for Rubyists is the Ansible for Rubyists ([https://github.com/ansible/ansible-for-rubyists](https://github.com/ansible/ansible-for-rubyists))
    repository on Github. Chapter 5 of *Learning Ansible* by Packt has covered this
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The primary requirement for Ansible 2.4 is Python 2.6 or higher and Python 3.5
    or higher. If you have either of them installed, we can follow the simple steps
    to get the development environment going.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Ansible Developer Guide:'
  prefs: []
  type: TYPE_NORMAL
- en: Clone the Ansible repository: `$ git clone https://github.com/ansible/ansible.git`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the directory into the repository root directory: `$ cd ansible`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a virtual environment: `$ python3 -m venv venv (or for Python 2 $ virtualenv
    venv`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note, this requires you to install the `virtualenv` package: `$ pip install
    virtualenv`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the virtual environment: `$ . venv/bin/activate`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the development requirements: `$ pip install -r requirements.txt`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the environment setup script for each new dev shell process: `$ . hacking/env-setup`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should end up with a `venv` prompt at this point. Here is a simple playbook
    to set up the development environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following playbook will set up the developer environment by installing
    and setting up the virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the playbook execution of the developer environment
    setup for writing your own Ansible modules using the Python virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af498854-8518-42d4-a369-b6ce26748db6.png)'
  prefs: []
  type: TYPE_IMG
- en: Planning and what to keep in mind
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Ansible Developer Guide has a section on how should you develop a module
    ([http://docs.ansible.com/ansible/latest/dev_guide/developing_modules.html#should-you-develop-a-module](http://docs.ansible.com/ansible/latest/dev_guide/developing_modules.html#should-you-develop-a-module)).
  prefs: []
  type: TYPE_NORMAL
- en: In the section, they have multiple points on what to keep in mind before going
    ahead and developing a module.
  prefs: []
  type: TYPE_NORMAL
- en: Does a similar module already exist? It's always a good idea to check the current
    modules to see whether what you plan to build has been done before. The good news
    is, so far nobody has built an **Open Web Application Security Project** (**OWASP**)
    **Zed Attack Proxy** (**ZAP**) module.
  prefs: []
  type: TYPE_NORMAL
- en: Has someone already worked on a similar *Pull Request? *Again, maybe the module
    hasn't been published but that doesn't mean that folks are not working on it already.
    The document provides three convenient links to check if a similar PR is already
    in place.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, it asks if rather than a module, we should look at an action plugin
    or role. The main reason we think it makes sense for us to develop the module
    is the fact that it will run on the nodes. ZAP provides an API endpoint if it
    is already running and we intend for our module to make it easy for us to run
    ZAP scans on hosted ZAP instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, this is the plan for now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a module that will connect to a hosted ZAP instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Provide the module with two main pieces of information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IP address of the hosted ZAP
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Target URL for scanning
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: By calling the module, we will have a task for scanning the target application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OWASP ZAP module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OWASP ZAP has an API that we can use. Additionally, there is a Python module
    for consuming the API. We will try and use that to learn how to write our own
    Ansible modules.
  prefs: []
  type: TYPE_NORMAL
- en: Create ZAP using Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For our development, let''s use a Docker container to get ZAP going. Since
    we plan to use the API, we will run the container in headless mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Explanation of the command
  prefs: []
  type: TYPE_NORMAL
- en: While we are doing dev, we can disable the API key: `-config api.disablekey=true`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow access to the API from any IP: `-config api.addrs.addr.name=.* -config
    api.addrs.addr.regex=true`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listen to port `8080`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If everything worked fine, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '**![](img/0d732a52-b810-4d6a-8556-1d7b093f9cb6.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a vulnerable application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a vulnerable application, we can host one of our own but let's use the same
    online vulnerable application we used for the OWASP ZAP + Jenkins integration
    in [Chapter 5](5674486e-84e0-49b5-b1b2-e8455a0a1ea0.xhtml), *Automating* *Web
    Application Security Testing Using OWASP ZAP - *[http://testphp.vulnweb.com/](http://testphp.vulnweb.com/)
  prefs: []
  type: TYPE_NORMAL
- en: Ansible module template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will take the sample code given in the module development guide to get started: [http://docs.ansible.com/ansible/latest/dev_guide/developing_modules_general.html#new-module-development](http://docs.ansible.com/ansible/latest/dev_guide/developing_modules_general.html#new-module-development).
  prefs: []
  type: TYPE_NORMAL
- en: 'This template has a well-commented code and it is written in a manner that
    makes it easy for us to get started. The code is divided into the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Metadata
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documenting the module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions we will be using
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metadata
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section contains the information about the modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This module isn't supported officially, hence the use of `community`.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting the module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The module documentation is generated from the module code itself. The `DOCUMENTATION`
    docstring is compulsory for the modules to be created now.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to get started is to look at this example: [https://github.com/ansible/ansible/blob/devel/examples/DOCUMENTATION.yml](https://github.com/ansible/ansible/blob/devel/examples/DOCUMENTATION.yml).
  prefs: []
  type: TYPE_NORMAL
- en: 'The list of fields required here are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`module`: Module name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`short_description`: Short description'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: Description'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version_added`: Indicated by `X.Y`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`author`: Your name and twitter/GitHub username'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`options`: Each of the options supported by the module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`notes`: Anything else that a module user should be aware of'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requirements`: We list additional package requirements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details about the fields, visit [http://docs.ansible.com/ansible/latest/dev_guide/developing_modules_documenting.html#fields](http://docs.ansible.com/ansible/latest/dev_guide/developing_modules_documenting.html#fields).
  prefs: []
  type: TYPE_NORMAL
- en: Source code template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some snippets of the source code that we will work with to write our
    module. We have already discussed the metadata and documentation parts. We also
    need to write docstrings for examples and what the module will be returning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our imports—we can import all the modules we need for our module here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The main code block—inside the function `run_module` we work and do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Define all the arguments we need for the module to work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initialize the results dictionary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `AnsibleModule` object and pass it common attributes that we may
    need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Working with exceptions and results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Just remember the following:'
  prefs: []
  type: TYPE_NORMAL
- en: If we hit any kind of errors or exceptions, we invoke the `fail_json` function
    of the `AnsibleModule` object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If everything worked out well, we invoke the `exit_json` function of the same
    object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Invoking our function completes the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we have the following things in place and we are ready for the
    next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Template of the module code | Ready |'
  prefs: []
  type: TYPE_TB
- en: '| Vulnerable application that we need to scan (target) | Ready |'
  prefs: []
  type: TYPE_TB
- en: '| OWASP ZAP Proxy with API enabled and running in headless mode (host and port)
    | Ready |'
  prefs: []
  type: TYPE_TB
- en: '| OWASP ZAP Python API code that we can refer to | Pending |'
  prefs: []
  type: TYPE_TB
- en: We want to focus on writing the Ansible module rather than spending time learning
    the complete OWASP ZAP API. While we recommend that you do, it's fine to wait
    until you have gotten the module working.
  prefs: []
  type: TYPE_NORMAL
- en: OWASP ZAP Python API sample script
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OWASP ZAP Python API package comes with a very handy script that is complete
    in terms of code for spidering and doing an active scan of a web application.
  prefs: []
  type: TYPE_NORMAL
- en: Download the code to study it from [https://github.com/zaproxy/zaproxy/wiki/ApiPython#an-example-python-script](https://github.com/zaproxy/zaproxy/wiki/ApiPython#an-example-python-script).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some snippets from sample code that we are interested in at this point. Import
    the Python API client for OWASP ZAP. This is installed using `pip install python-owasp-zap-v2.4`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we connect to the ZAP instance API endpoint. We can provide the host and
    port for the OWASP ZAP instance as an argument to our module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Provide the host/IP address of the website that we want to scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This code is a great starter template for us to use in our module.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are ready with OWASP ZAP Python API code that we can refer to.
  prefs: []
  type: TYPE_NORMAL
- en: 'Connect to the ZAP instance. At this point, we copied the important bits of
    code that:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect to the target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Initiate spidering and the active security scan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: But we quickly ran into an error. We were returning a string during an exception,
    which obviously wasn't in the JSON format as required by Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: This resulted in an error which didn't have enough information for us to take
    action
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e219ede6-f722-42bf-8e27-51d241f642c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Ansible modules should only return JSON, otherwise you may see cryptic errors
    such as above
  prefs: []
  type: TYPE_NORMAL
- en: A quick reading of conventions, best practices, and pitfalls at [http://docs.ansible.com/ansible/latest/dev_guide/developing_modules_best_practices.html#conventions-best-practices-and-pitfalls](http://docs.ansible.com/ansible/latest/dev_guide/developing_modules_best_practices.html#conventions-best-practices-and-pitfalls)
    explained the issue to us.
  prefs: []
  type: TYPE_NORMAL
- en: We strongly recommend that you go through this guide if you face any issues
    during your module writing: [http://docs.ansible.com/ansible/latest/dev_guide/developing_modules_best_practices.html#conventions-best-practices-and-pitfalls](http://docs.ansible.com/ansible/latest/dev_guide/developing_modules_best_practices.html#conventions-best-practices-and-pitfalls).
  prefs: []
  type: TYPE_NORMAL
- en: Use the OWASP ZAP API documentation to learn more: [https://github.com/zaproxy/zaproxy/wiki/ApiGen_Index](https://github.com/zaproxy/zaproxy/wiki/ApiGen_Index).
  prefs: []
  type: TYPE_NORMAL
- en: Complete code listing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This code is also available on GitHub ([https://github.com/appsecco/ansible-module-owasp-zap](https://github.com/appsecco/ansible-module-owasp-zap)).
    All comments, metadata, and documentation doctstrings have been removed from this
    listing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Depending on the website being spidered and scanned, this can take some time
    to finish. At the end of its execution, you will have the scanning results in
    `results['output']`.
  prefs: []
  type: TYPE_NORMAL
- en: Running the module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The choices we have for running the module are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We copy it to the standard path of Ansible library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We provide a path to Ansible library whenever we have our module file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run this file through a playbook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following command will invoke our module for us to test and see the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Explanation of the command
  prefs: []
  type: TYPE_NORMAL
- en: '`ansible` command line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-m` to give the module name, which is `owasp_zap_test_module`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will run on `localhost`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-a` allows us to pass the `host` and `target` module arguments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-vvv` is for the verbosity of output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playbook for the module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is a simple playbook to test whether everything is working:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the playbook with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/260d3644-61a1-49df-8b52-50b8310868ba.png)'
  prefs: []
  type: TYPE_IMG
- en: An important thing to remember is that just because we have a working module
    doesn't mean that the good folks at Ansible will automatically accept our module
    to ship with their next version of the software. A lot of additional work is required
    for our module to be ready to be used by everyone.
  prefs: []
  type: TYPE_NORMAL
- en: As usual, the best guide for this is the developer guide mentioned earlier in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: One of the easy things to add to our module would be the ability to send the
    API key as an argument. Most ZAP instances that are being used for regular scanning
    will already have this configured. Additionally, this key can be protected by
    the Ansible vault when stored in the playbook.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an API key as an argument
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just by making the following changes, we will be able to add `apikey` as an
    argument:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we add this to the `module_args` dictionary on lines 76-78: `apikey=dict(type='str',required=False,default=None)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then we check whether `module.params['apikey']` is set to a value of `None`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it is not, set it to `apikey = module.params['apikey']`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, if the module is used with the Ansible command-line tool, pass it along
    with the `target` and `host`, and if it is used in the playbook, pass it there
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding scan type as an argument
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have followed so far, you may realize that the scan that we ran is an
    active scan. The scanner sends attack traffic against the target in an active
    scan.
  prefs: []
  type: TYPE_NORMAL
- en: Due to that fact, sometimes if the website is large, it may take a long time
    to finish.
  prefs: []
  type: TYPE_NORMAL
- en: More information about active scans can be found at [https://github.com/zaproxy/zap-core-help/wiki/HelpStartConceptsAscan](https://github.com/zaproxy/zap-core-help/wiki/HelpStartConceptsAscan).
  prefs: []
  type: TYPE_NORMAL
- en: 'We would like to add an argument for being able to provide the type of scan
    to run. So far we have two types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Active**: Sends attack traffic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Passive**: Parses all the site files downloaded during the spidering phase'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We start by adding this as part of the `module_args`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The newly added line is in bold to highlight the change. Notice that we have
    defined the default value now and this argument is only allowed two choices currently.
    So if nothing is set, we do the faster, less invasive, passive scan.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to get the value of module param into a variable called `scantype`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The logic changes to accommodate two possible values now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If `scantype` is set and the value is `active`, only then does it go ahead
    and do an active scan. This improvement makes our module more flexible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Using Ansible as a Python module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Ansible directly in your Python code is a powerful way of interacting
    with it. Please note that with Ansible 2.0 and newer, this is not the simplest
    of way of doing that.
  prefs: []
  type: TYPE_NORMAL
- en: Before we proceed we should let you know what the core Ansible team thinks about
    using the Python API directly
  prefs: []
  type: TYPE_NORMAL
- en: From http://docs.ansible.com/ansible/latest/dev_guide/developing_api.html
  prefs: []
  type: TYPE_NORMAL
- en: Please note that while we make this API available it is not intended for direct
    consumption, it is here for the support of the Ansible command line tools. We
    try not to make breaking changes but we reserve the right to do so at any time
    if it makes sense for the Ansible toolset.
  prefs: []
  type: TYPE_NORMAL
- en: The following documentation is provided for those that still want to use the
    API directly, but be mindful this is not something the Ansible team supports.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is from the Ansible Developer Guide documentation: [http://docs.ansible.com/ansible/latest/dev_guide/developing_api.html](http://docs.ansible.com/ansible/latest/dev_guide/developing_api.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Once all the initial work is done, this is how a task will be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Before Ansible 2.0, the whole process was a lot easier. But this code doesn''t
    work anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created a working Ansible module for security automation.
    We started by creating a sort of hello world module that didn't do much, but helped
    us understand the layout of what a module file could look like. We followed the
    instructions as per the Ansible developer guide on how to set up an environment
    for being able to do module development. We articulated our requirement from the
    module and picked OWASP ZAP as a possible candidate for creating the module.
  prefs: []
  type: TYPE_NORMAL
- en: Using the training wheels, such as the template from the developer docks, we
    created the module and we saw how to use it using Ansible CLI or a playbook. We
    added a couple more options to the original code so that we could make the module
    more useful and flexible. Now we have an OWASP ZAP Ansible module that can connect
    to any hosted OWASP ZAP that allows access with the API key and executes a passive
    or active scan on the target.
  prefs: []
  type: TYPE_NORMAL
- en: This is the penultimate chapter of the book. In the next chapter, we will look
    at additional references, security of our secrets using Ansible Vault, and some
    world-class references of security automation already enabled using Ansible.
  prefs: []
  type: TYPE_NORMAL
