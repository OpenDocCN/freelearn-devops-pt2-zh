- en: Going Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 往云端前进
- en: In this chapter, we will see how to use Ansible for provisioning infrastructures
    in a matter of minutes. In my opinion, this is one of the most interesting and
    powerful capabilities of Ansible, since it allows you to recreate environments
    in a quick and consistent way. This is very important when you have multiple environments
    for the various stages of your deployment pipeline. In fact, it allows you to
    create equal environments and to keep them aligned when you need to make changes
    without any pain.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到如何使用 Ansible 在几分钟内配置基础架构。在我看来，这是 Ansible 最有趣和强大的功能之一，因为它允许你快速，一致地重建环境。当你有多个环境用于你的部署流程的不同阶段时，这非常重要。事实上，它允许你创建相等的环境，并在需要进行更改时保持其对齐，而不会感到任何痛苦。
- en: 'Letting Ansible provision your machines also has other advantages, and for
    those reasons I always suggest doing the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 让 Ansible 配置你的设备还有其他的优点，为此，我总是建议执行以下操作：
- en: '**Audit trail**: In the last few years, the IT sector has swallowed a huge
    number of other sectors, and, as a consequence of this, the auditing processes
    are now looking at IT as a critical part of the process. When an auditor comes
    to the IT department asking for the history of a server, from its creation to
    the present moment, having Ansible playbooks for the whole process helps a lot.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**审计追踪**：最近几年来，IT 行业吞食了大量其他行业，作为这个过程的一部分，审计流程现在将 IT 视为流程的关键部分。当审计师来到 IT 部门询问服务器的历史记录，从创建到目前为止，有
    Ansible 播放脚本的整个过程将非常有帮助。'
- en: '**Multiple staging environments**: As we mentioned before, if you have multiple
    environments, provisioning servers with Ansible will help you a lot.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多个分阶段的环境**：正如我们之前提到的，如果你有多个环境，使用 Ansible 配置服务器将会对你非常有帮助。'
- en: '**Moving servers**: When a company uses a global cloud provider (such as AWS,
    DigitalOcean, or Azure), they often choose the region closest to their offices
    or customers at the moment they create the first servers. Those providers often
    open new regions, and if their new region is closer to you, you may want to move
    your whole infrastructure to the new region. This would be a nightmare if you
    had provisioned every resource manually!'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**迁移服务器**：当一家公司使用全球云提供商（如 AWS、DigitalOcean 或 Azure）时，他们通常会选择距离他们办公室或客户最近的区域来创建第一台服务器。这些提供商经常开设新区域，如果他们的新区域更靠近你，你可能会想将整个基础架构迁移到新区域。如果你手动配置了每个资源，这将是一场噩梦！'
- en: 'In this chapter, on a broad level, we''ll cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，从宏观层面上，我们将涵盖以下主题：
- en: Provisioning machines in AWS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 AWS 中配置机器
- en: Provisioning machines in DigitalOcean
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 DigitalOcean 中配置机器
- en: Provisioning machines in Azure
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Azure 中配置机器
- en: 'Most of the new machine creations have two phases:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数新设备创建有两个阶段：
- en: Provisioning a new machine or a new set of machines
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置新机器或一组新机器
- en: Running playbooks to ensure the new machines are configured properly to play
    their role in your infrastructure
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行播放脚本，确保新机器被正确配置以发挥其在你的基础架构中的作用
- en: We've looked at the configuration management aspect in the initial chapters.
    We'll focus a lot more on provisioning new machines in this chapter, with a lesser
    focus on configuration management.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在最初的章节中，我们已经看过了配置管理方面。在本章中，我们将更加专注于配置新机器，对配置管理的关注较少。
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You can download all the files from this book's GitHub repository at [https://github.com/PacktPublishing/Learning-Ansible-2.X-Third-Edition/tree/master/Chapter05](https://github.com/PacktPublishing/Learning-Ansible-2.X-Third-Edition/tree/master/Chapter05).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从本书的 GitHub 存储库中下载所有文件，网址为 [https://github.com/PacktPublishing/Learning-Ansible-2.X-Third-Edition/tree/master/Chapter05](https://github.com/PacktPublishing/Learning-Ansible-2.X-Third-Edition/tree/master/Chapter05)。
- en: Provisioning resources in the cloud
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在云中配置资源
- en: 'With that, let''s jump to the first topic. Teams managing infrastructures have
    a lot of choices today for running their builds, tests, and deployments. Providers
    such as Amazon, Azure, and DigitalOcean primarily provide **Infrastructure as
    a Service** (**IaaS**). When we speak about IaaS, it''s better to speak about
    resources not virtual machines for different reasons:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，让我们跳到第一个主题。管理基础架构的团队今天有很多选择来运行他们的构建、测试和部署。提供商比如亚马逊、Azure 和 DigitalOcean
    主要提供基础设施即服务（**IaaS**）。当我们谈论 IaaS 时，最好谈论资源而不是虚拟机，有几个原因：
- en: The majority of the products that those companies allow you to provision are
    not machines but other critical resources such as networking and storage.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些公司允许您提供的多数产品都不是机器，而是其他关键资源，例如网络和存储。
- en: Lately, many of those companies have started to provide many different kind
    of compute instances ranging from bare-metal machines to containers.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最近，这些公司开始提供许多不同类型的计算实例，从裸金属机器到容器。
- en: Setting up machines with no networking (or storage) could be all you need for
    some very simple environments, but this might not be enough in production environments.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在某些非常简单的环境中，无网络（或存储）的机器设置可能就足够了，但在生产环境中可能不够。
- en: Those companies usually provide API, CLI, GUI, and SDK utilities to create and
    manage cloud resources throughout their whole life cycle. We're more interested
    in using their SDK as it will play an important part in our automation effort.
    Setting up new servers and provisioning them is interesting at first but at some
    stage it can become boring as it's quite repetitive in nature. Each provisioning
    step will involve several similar steps to get them up and running.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些公司通常提供API、CLI、GUI和SDK工具，以创建和管理云资源的整个生命周期。我们更感兴趣的是使用它们的SDK，因为它在我们的自动化努力中将发挥重要作用。在刚开始时，建立新服务器并进行配置是有趣的，但在某个阶段，它可能变得乏味，因为它是相当重复的。每个配置步骤都会涉及几个类似的步骤，以使它们正常运行。
- en: Imagine one fine morning you receive an email asking for three new customer
    setups, where each customer setup has three to four instances and a bunch of services
    and dependencies. This might be an easy task for you, but it would require running
    the same set of repetitive commands multiple times, followed by monitoring the
    servers once they come up to confirm that everything went well. In addition, anything
    you do manually has a chance of introducing problems. What if two of the customer
    setups come up correctly but, due to fatigue, you miss out a step for the third
    customer and hence introduce a problem? To deal with such situations, there exists
    automation.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，某天早上您收到一封电子邮件，要求为三个新的客户设置安装，其中每个客户设置都有三到四个实例和一堆服务和依赖项。对您来说，这可能是个简单的任务，但它需要多次运行相同的重复命令，然后在服务器启动后监视它们以确认一切顺利。此外，您手动进行的任何操作都有可能引入问题。如果前两个客户设置正确启动，但由于疲劳，您遗漏了第三个客户的一个步骤，从而引入了问题怎么办？为了处理这种情况，就需要自动化。
- en: Cloud-provisioning automation makes it easy for an engineer to build up a new
    server as quickly as possible, allowing them to concentrate on other priorities.
    Using Ansible, you can easily perform these actions and automate cloud provisioning
    with minimal effort. Ansible provides you with the power to automate various different
    cloud platforms, such as Amazon, Azure, DigitalOcean, Google Cloud, Rackspace,
    and many more, with modules for different services available in the Ansible core
    or extended module packages.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 云配置自动化使工程师能够尽快建立新的服务器，从而使他们能够集中精力处理其他优先事项。使用Ansible，您可以轻松执行这些操作，并以最少的工作量自动化云配置。Ansible为您提供了自动化各种不同云平台的能力，如Amazon、Azure、DigitalOcean、Google
    Cloud、Rackspace等，其中涵盖了Ansible核心版或扩展模块包中提供的不同服务的模块。
- en: As mentioned earlier, bringing up new machines is not the end of the game. We
    also need to make sure we configure them to play the required role.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，启动新机器并不是结束游戏的标志。我们还需要确保我们配置它们以发挥所需的作用。
- en: 'In the next sections, we will provision the environment that we have used in
    the previous chapters (two web servers and one database server) in the following
    environments:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将在以下环境中配置我们在之前章节中使用的环境（两个Web服务器和一个数据库服务器）：
- en: '**Simple AWS deployment**: Where all machines will be placed in the same **Availability
    Zones** (**AZs**) and the same network.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单的AWS部署**：所有机器将放置在相同的**可用区**（AZs）和相同的网络中。'
- en: '**Complex AWS deployment**: Where the machines will be split in multiple AZs
    as well as networks.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂的AWS部署**：在此部署中，机器将分割到多个可用区（AZs）和网络中。'
- en: '**DigitalOcean**: DigitalOcean does not allow us to do many networking tweaks
    so it will be similar to the first one.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DigitalOcean**：由于DigitalOcean不允许我们进行许多网络调整，因此它与第一个相似。'
- en: '**Azure**: We will create a simple deployment in this case.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure**：在这种情况下，我们将创建一个简单的部署。'
- en: Provisioning machines in AWS
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS中配置机器
- en: AWS is the most used public cloud by a fair amount, and it's often chosen due
    to its huge number of available services as well as the huge amount of documentation,
    answered questions, and articles that can be expected around such a popular product.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Since AWS's goal is to be a complete virtual data center provider (and much
    more), we will need to create and manage our network as we would do if we had
    to set up a real data center. Obviously, we will not need to cable stuff, since
    it's a virtual data center. Due to this, a few lines of an Ansible playbook will
    be enough.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: AWS global infrastructure
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon has always been pretty discreet about sharing the location or the exact
    number of data centers that its cloud is actually composed of. While I'm writing
    this, AWS counts 21 regions (with four more regions already announced) with a
    total of 61 AZs and hundreds of edge locations. Amazon defines a region as a "*physical
    location in the world where we (Amazon) have multiple AZs*". Looking at Amazon's
    documentation of AZs, it says that "*an AZ consists of one or more discrete data
    centers, each with redundant power, networking, and connectivity, housed in separate
    facilities*". For edge location, there is no official definition.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, from a real-life point of view, those definitions do not help
    you much. When I try to explain those concepts, I usually use different definitions,
    created by myself:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '**Region**: A group of AZs that are physically close'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AZ**: A data center in a region (Amazon says that it could be more than one
    data center, but since there is no document listing the specific geometry of every
    AZ, I assume the worst-case scenario)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edge location**: Internet exchanges or third-party data centers where Amazon
    has CloudFront and Route 53 endpoints'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even though I tried to make those definitions as easy and as useful as possible,
    some of them are very cloudy. When we start to speak about real-world differences,
    the definitions will become immediately clear. For instance, from a network speed
    perspective, when you move content within the same AZ, the bandwidth is very high.
    When you do the same operation with two AZs in the same region, you get high bandwidth,
    while if you use two AZs from two different regions, the bandwidth will be much
    lower. Also, there is a price difference, since all traffic within the same region
    is free, while traffic among different regions is free of charge.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: AWS Simple Storage Service
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon **Simple Storage Service** (**S3**) is the first AWS service to be launched
    and it's also one of the most well-known AWS services. Amazon S3 is an object
    storage service with public endpoints as well as private endpoints. It uses the
    concept of a bucket to allow you different kinds of files and to manage them in
    a simple way. Amazon S3 also gives the user more advanced features such as the
    capability of serving a bucket's contents using a built-in web server. This is
    one of the reasons why many people decide to host their website, or the pictures
    on their websites, on Amazon S3.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊 **简单存储服务**（**S3**）是推出的第一项 AWS 服务，也是最为人所知的 AWS 服务之一。Amazon S3 是一种对象存储服务，具有公共端点和私有端点。它使用
    bucket 的概念，允许您管理不同类型的文件并以简单的方式管理它们。Amazon S3 还提供了用户更高级的功能，例如使用内置 Web 服务器来提供 bucket
    内容的能力。这就是许多人决定在 Amazon S3 上托管其网站或网站上的图片的原因之一。
- en: 'The advantages of S3 are mainly the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: S3 的优点主要有以下几点：
- en: '**Price schema**: You are billed by used gigabyte/month and by gigabyte transferred.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**价格方案**：您将按照已使用的每 GB/月和已传输的每 GB 计费。'
- en: '**Reliability**: Amazon affirms that the objects on AWS S3 have a 99.999999999%
    probability to survive any given year. This is orders of magnitude higher than
    any hard disk.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性**：亚马逊声称 AWS S3 上的对象在任何一年内有 99.999999999% 的存活率。这比任何硬盘都要高出数量级。'
- en: '**Tooling**: Since S3 is a service that has been out there for many years now,
    a lot of tools have been implemented to leverage this service.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具**：因为 S3 是一个已经存在多年的服务，许多工具已被实现以利用这项服务。'
- en: AWS Elastic Compute Cloud
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 弹性计算云
- en: The second service launched by AWS is the **Elastic Compute Cloud** (**EC2**)
    service. This service allows you to spin up machines on AWS infrastructure. You
    can think of those EC2 instances as OpenStack compute instances or VMware virtual
    machines. Initially, those machines were very similar to VPS, but after a while
    Amazon decided to give much more flexibility on those machines, introducing a
    very advanced networking option. The old kind of machines are still available
    in the oldest data centers with the name EC2 Classic, while the new kind is the
    current default and is just called EC2.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 推出的第二项服务是 **弹性计算云**（**EC2**）服务。该服务允许您在 AWS 基础设施上创建计算机。您可以将这些 EC2 实例视为 OpenStack
    计算实例或 VMware 虚拟机。最初，这些机器与 VPS 非常相似，但过了一段时间亚马逊决定赋予这些机器更多的灵活性，并引入了非常先进的网络选项。旧类型的机器仍然在最古老的数据中心中提供，名为
    EC2 Classic，而新类型是当前的默认选项，只被称为 EC2。
- en: AWS Virtual Private Cloud
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 虚拟私有云
- en: '**Virtual Private Cloud** (**VPC**) is Amazon''s networking implementation
    that we mentioned in the previous section. The VPC is more a set of tools than
    a single tool; in fact, the capabilities it offers were offered by multiple metal
    boxes in the classic data center.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟私有云**（**VPC**）是亚马逊在前面提到的网络实现。VPC 更多的是一组工具而不是单个工具；实际上，它所提供的功能由经典数据中心中的多个金属盒子提供。'
- en: 'The main things you can create with VPC are the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过 VPC 创建以下主要事项：
- en: Switches
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交换机
- en: Routers
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由器
- en: DHCP
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DHCP
- en: Gateways
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网关
- en: Firewalls
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防火墙
- en: '**Virtual Private Networks** (**VPNs**)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟专用网络**（**VPN**）'
- en: 'An important thing to understand when you use VPC is that the layout of your
    network is not completely arbitrary, since Amazon has created a few limitations
    to simplify their networking. The basic limitations are these:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 VPC 时，重要的是要了解您的网络布局不是完全任意的，因为亚马逊创建了一些限制来简化其网络。基本限制如下：
- en: You cannot spawn a subnetwork between AZs.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不能在 AZ 之间生成子网络。
- en: You cannot spawn a network between regions.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不能在不同的区域之间生成网络。
- en: You cannot route networks in different regions directly.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不能直接路由不同区域的网络。
- en: While, for the first two, the only solution is creating multiple networks and
    subnetworks, for the third, you can actually implement a workaround using a VPN
    service that could be self-provisioned or be provisioned using the official AWS
    VPN service.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 而对于前两者，唯一的解决方案是创建多个网络和子网络，而对于第三者，您实际上可以使用 VPN 服务来实现一个解决方法，该 VPN 服务可以是自我提供的，也可以是使用官方的
    AWS VPN 服务提供的。
- en: We will be mainly using the switching and routing capabilities of VPC.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将主要使用 VPC 的交换和路由功能。
- en: AWS Route 53
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Route 53
- en: Like many other cloud services, Amazon offers a **DNS as a Service** (**DNSaaS**)
    feature and in Amazon case it's called **Route 53**. Route 53 is a distributed
    DNS service with hundreds of endpoints worldwide (Route 53 is present in all AWS
    edge locations).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Route 53 allows you to create different zones for a domain allowing split-horizon
    situations in which based on the fact that the client asking for a DNS resolution
    is inside or outside your VPC will receive different responses. This is very useful
    when you want your applications to be easily moved in and out of your VPC without
    changes, but at the same time you want your traffic to stay on a private (virtual)
    network whenever possible.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: AWS Elastic Block Storage
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS **Elastic Block Storage** (**EBS**) is a block storage provider for allowing
    your EC2 instances to keep data that will survive reboots and is very flexible.
    From a user perspective, EBS seems a lot like any other SAN product with a simpler
    interface, since you only need to create the volume and tell EBS to which machine
    it needs to be attached, and EBS does the rest. You can attach multiple volumes
    to a single server, but every volume can be connected to only one server at any
    given time.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: AWS Identity and Access Management
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To allow you to manage users and access methods, Amazon provides the **Identity
    and Access Management** (**IAM**) service. The main features of the IAM service
    are as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Create, edit, and delete users
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change user password
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create, edit, and delete groups
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage users and group association
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage tokens
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage two-factor authentication
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage SSH keys
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will be using this service to set up our users and their permissions.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Relational Database Service
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Setting up and maintaining relational databases is complex and very time-consuming.
    To simplify this, Amazon provides some widely used **Database as a Service** (**DBaaS**),
    more specifically, the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Aurora
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MariaDB
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Oracle
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL Server
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each one of those engines, Amazon offers different features and price models
    but the specifics of each is beyond the goal of this book.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an account with AWS
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we will need before starting to work on our AWS is an account.
    Creating an account on AWS is pretty straightforward and very well documented
    by Amazon official documentation as well as by multiple independent sites, and
    therefore it will not be covered in these pages.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have created your AWS account, you need to go in to the AWS and do
    the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Upload your SSH key in EC2 | Keypairs.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a new user in Identity & Access Management | Users | Create new user
    and create a file in `~/.aws/credentials` with the following lines:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After you have created your AWS keys and uploaded your SSH key, you need to
    set up Route 53\. In Route 53, you need to create two zones for your domain (you
    can also use a subdomain, if you don''t have an unused domain): one public and
    one private.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'If you create only the public zone, Route 53 will propagate this zone everywhere,
    but if you create a public and a private zone, Route 53 will serve your public
    zone everywhere but in the VPC you specified when creating the private zone. If
    you query those DNS entries from within that VPC, the private zone will be used.
    This approach has multiple advantages:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只创建公共区域，Route 53将在全局范围内传播该区域，但如果你创建了一个公共区域和一个私有区域，Route 53将在创建私有区域时指定的VPC以外的所有地方提供你的公共区域服务。如果你在该VPC内查询这些DNS条目，将使用私有区域。这种方法有多个优点：
- en: Only publicize the IP addresses of public machines
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只公开公共机器的IP地址。
- en: Always use DNS names instead of IP addresses, even for internal traffic
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使对于内部流量，也要始终使用DNS名称而不是IP地址。
- en: Ensure that your internal machines communicate directly without your traffic
    ever passing through the public web
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你的内部机器直接通信，而无需通过公共网络传递数据。
- en: Since the external IPs in AWS are virtual IPs managed by Amazon and associated
    to your instances using NATs, this approach grants the least amount of hops and
    therefore latency
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于AWS中的外部IP是由Amazon管理的虚拟IP地址，并使用NAT与你的实例关联，因此这种方法可以提供最少的跳数，从而减少时延。
- en: If you declared an entry for your public zone but not in the private one, the
    machines in the VPC will not be able to resolve that entry.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在公共区域中声明了一个条目，但在私有区域中没有声明该条目，那么VPC中的机器将无法解析该条目。
- en: After you have created the public zone, AWS will give you a few name server
    IP addresses and you need to put those in your register/root zone DNS so that
    you can actually resolve those DNS.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建公共区域后，AWS将给出一些域名服务器IP地址，你需要将这些IP地址放入你的注册/根区域DNS中，以便你实际上可以解析这些DNS。
- en: Simple AWS deployment
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单的AWS部署
- en: As we said previously, the first thing that we will need is the networking up.
    For this example, we will need just one single network in one AZ and all our machines
    will stay there.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说，我们首先需要的是网络连接。对于这个示例，我们只需要一个单独的可用区中的一个网络来容纳所有的机器。
- en: In this section, we will be working in the `playbooks/aws_simple_provision.yaml`
    file.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在`playbooks/aws_simple_provision.yaml`文件中工作。
- en: 'The first two lines are just used to declare the host that will perform the
    commands (localhost) and the beginning of the tasks section:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 前两行只用于声明将执行命令的主机（localhost）和任务部分的开始：
- en: '[PRE1]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'First, we are going to ensure that the public/private key pair is present:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将确保存在公钥/私钥对：
- en: '[PRE2]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In AWS, we need to have a VPC network and subnetwork. By default, they are
    already there, but if you need it, you can do the following to create the VPC
    network:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS中，我们需要有一个VPC网络和子网。默认情况下，它们已经存在，但如果需要，可以执行以下步骤创建VPC网络：
- en: '[PRE3]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Since we are using the default VPC, we need to query AWS to know the VPC network
    and subnetwork values:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是默认的VPC，我们需要查询AWS以了解VPC网络和子网的值：
- en: '[PRE4]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we have all the information we need on the network and subnetwork, we can
    move to security groups. We can do this with the `ec2_group` module. In the AWS
    world, security groups are used for firewalling. Security groups are very similar
    to groups of firewall rules that share the same destination (for ingress rules)
    or the same destination (for egress rules). Three differences with standard firewalls
    rules are actually worth mentioning:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经获得了关于网络和子网的所有信息，接下来我们可以转向安全组。我们可以使用`ec2_group`模块来完成。在AWS世界中，安全组用于防火墙。安全组与共享相同目标的防火墙规则组非常相似（对于入口规则）或相同目标（对于出口规则）。与标准防火墙规则相比，实际上有三个不同之处值得一提：
- en: Multiple security groups can be applied to the same EC2 instance.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个安全组可以应用于同一个EC2实例。
- en: 'As a source (for ingress rules) or destination (for egress rules), you can
    specify one of the following:'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为源（对于入口规则）或目标（对于出口规则），你可以指定以下之一：
- en: An instance ID
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个实例ID
- en: Another security group
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个安全组
- en: An IP range
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个IP范围
- en: You don't have to specify a default deny rule at the end of the chain, because
    AWS will add it by default.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不需要在链的末尾指定默认拒绝规则，因为AWS会默认添加它。
- en: 'So, in my case, the following code will be added to `playbooks/aws_simple_provision.yaml`:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，对于我的情况，以下代码将被添加到`playbooks/aws_simple_provision.yaml`中：
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We are now going to create another security group for our database. In this
    case, we only need to open port `3036` to the servers in the web security group:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们即将为我们的数据库创建另一个安全组。在这种情况下，我们只需要向Web安全组中的服务器打开`3036`端口即可：
- en: '[PRE6]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see, we allow all egress traffic to flow. This is not what security
    best practices suggest, and therefore you may need to regulate egress traffic
    as well. A case that frequently forces you to regulate egress traffic is if you
    want your target machine to be PCI-DSS compliant.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们允许所有出站流量流动。这并不是安全最佳实践建议的做法，因此您可能需要调节出站流量。经常迫使您调节出站流量的情况是，如果您希望目标机器符合
    PCI-DSS 标准。
- en: 'Now that we have the VPC, the subnet into the VPC, and the needed security
    groups, we can now move on to actually creating the EC2 instances:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了 VPC、VPC 中的子网和所需的安全组，我们现在可以继续实际创建 EC2 实例了：
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When we created the DB machine, we did not specify the `assign_public_ip: True`
    line. In this case, the machine will not receive a public IP, and therefore it
    will not be reachable from outside our VPC. Since we used a very strict security
    group for this server, it would not be reachable from any machine outside the
    `wssg` anyway.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '当我们创建 DB 机器时，我们没有指定 `assign_public_ip: True` 行。在这种情况下，该机器将不会收到公共 IP，因此它将无法从
    VPC 外部访问。由于我们为此服务器使用了非常严格的安全组，因此它不会从 `wssg` 外的任何机器访问。'
- en: As you can guess, the piece of code we have just seen will create our three
    instances (two web servers and one DB server).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所猜到的那样，我们刚刚看到的代码片段将创建我们的三个实例（两个 Web 服务器和一个 DB 服务器）。
- en: 'We can now proceed to add those newly created instances to our Route 53 account
    so that we can resolve those machines'' FQDN. To interact with AWS Route 53, we
    will be using the `route53` module, which allows us to create entries, query entries,
    and delete entries. To create a new entry, we will be using the following code:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将这些新创建的实例添加到我们的 Route 53 帐户中，以便解析这些机器的完全限定域名。为了与 AWS Route 53 交互，我们将使用
    `route53` 模块，该模块允许我们创建条目、查询条目和删除条目。要创建新条目，我们将使用以下代码：
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'So, to create the entries for our servers, we will add the following code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为我们的服务器创建条目，我们将添加以下代码：
- en: '[PRE9]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Since the database server does not have a public address, it makes no sense
    to publish this machine in the public zone, so we have created this machine entry
    only in the internal zone.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据库服务器没有公共地址，将此机器发布到公共区域是没有意义的，因此我们只在内部区域中创建了此机器条目。
- en: 'Putting it all together, the `playbooks/aws_simple_provision.yaml` will be
    the following. The full code is available on GitHub:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起，`playbooks/aws_simple_provision.yaml` 将如下所示。完整的代码可在 GitHub 上找到：
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Running it with `ansible-playbook playbooks/aws_simple_provision.yaml`, Ansible
    will take care of creating our environment.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `ansible-playbook playbooks/aws_simple_provision.yaml`，Ansible 将负责创建我们的环境。
- en: Complex AWS deployment
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复杂的 AWS 部署
- en: 'In this section, we will slightly change the previous example to move one of
    the web servers to another AZ within the same region. To do so, we are going to
    make a new file in `playbooks/aws_complex_provision.yaml` that will be very similar
    to the previous one, with one difference located in the part that helps us provision
    the machines. In fact, we will use the following code snippet instead of the one
    we used on the previous run. The full code is available on GitHub:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将稍微修改之前的示例，将其中一个 Web 服务器移至同一地区的另一个可用区。为此，我们将在 `playbooks/aws_complex_provision.yaml`
    中创建一个新文件，该文件与之前的文件非常相似，唯一的区别在于帮助我们配置机器的部分。事实上，我们将使用以下代码片段代替我们上次运行时使用的代码片段。完整的代码可在
    GitHub 上找到：
- en: '[PRE11]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, we have put the `vpc_subnet_id` in a variable, so that we can
    use a different one for the `ws02` machine. Due to the fact that AWS already provides
    two subnets by default (and every subnet is tied to a different AZ), it's enough
    to use the following AZ. Security groups and Route 53 code does not need to be
    changed, since it does not work at a subnet/AZ level, but at a VPC level (for
    security groups and the internal Route 53 zone) or a global level (for public
    Route 53).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们将 `vpc_subnet_id` 放入一个变量中，这样我们就可以为 `ws02` 机器使用不同的子网。由于 AWS 已经默认提供了两个子网（每个子网都绑定到不同的可用区），因此只需使用以下的可用区即可。安全组和
    Route 53 代码不需要更改，因为它们不在子网/可用区级别工作，而在 VPC 级别（对于安全组和内部 Route 53 区域）或全局级别（对于公共 Route
    53）工作。
- en: Provisioning machines in DigitalOcean
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 DigitalOcean 中进行机器配置
- en: 'Compared to AWS, DigitalOcean seems to be very incomplete. DigitalOcean, until
    a few months ago, only provided droplets, SSH key management, and DNS management.
    At the time of writing, DigitalOcean has very recently launched an additional
    block storage service. The advantages of DigitalOcean compared to many competitors
    are as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Lower prices than AWS.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very easy APIs.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very well-documented APIs.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The droplets are very similar to standard virtual machines (they don't do weird
    customization).
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The droplets are very quick to go up and down.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since DigitalOcean has a very simple networking stack, it's way more efficient
    than the AWS one.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Droplets
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Droplets are the main service offered by DigitalOcean and are compute instances
    that are very similar to Amazon EC2 Classic. DigitalOcean relies on the **Kernel
    Virtual Machine** (**KVM**) to virtualize the machines, assuring very high performance
    and security.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Since they do not change KVM in any sensible way, and since KVM is open source
    and available on any Linux machine, this allows system administrators to create
    identical environments on private and public clouds. DigitalOcean droplets will
    have one external IP and they can be eventually added to a virtual network that
    will allow your machines to use internal IPs.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Different than many other comparable services, DigitalOcean allows your droplets
    to have IPv6 IPs in addition to the IPv4 ones. This service is free of charge.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: SSH key management
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every time you want to create a droplet, you have to specify whether you want
    a specific SSH key assigned to the root user or if you want a password (which
    will have to be changed at the first login). To be able to choose an SSH key,
    you need an interface to upload it. DigitalOcean allows you to do this using a
    very simple interface which allows you to list the current keys, as well as create
    and delete keys.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Private networking
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the droplet section, DigitalOcean allows us to have a private
    network where our machine can communicate with another. This allows segregation
    of services (such as a database service) only on the internal network to allow
    a higher level of security. Since, by default, MySQL binds on all available interfaces,
    we will need to tweak the database role a little bit to only bind on the internal
    network.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'To recognize the internal network from the external one, there are many ways,
    due to some DigitalOcean peculiarities:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Private networks are always in the `10.0.0.0/8` network, while public IPs are
    never in that network.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The public network is always `eth0`, while the private network is always `eth1`.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on your portability needs, you can use either one of those strategies
    to understand where to bind your services.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Adding an SSH key in DigitalOcean
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We firstly need a DigitalOcean account. As soon as we have a DigitalOcean user,
    a credit card set up, and the API key, we can start to use Ansible to add our
    SSH key to our DigitalOcean cloud. To do so, we need to create a file called `playbooks/do_provision.yaml`
    with the following structure:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In my case, this is my file content:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then we can execute it and you will have a result similar to the following:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This task is idempotent so we can execute it multiple times. If the key has
    already been uploaded, the SSH key ID will be returned at every run.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Deployment in DigitalOcean
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, the only way to create a droplet in Ansible is by using
    the `digital_ocean` module that could be soon deprecated since many of its features
    are now done in a better, cleaner way by other modules and there is already a
    bug on the Ansible bug tracker to track its complete rewrite and possible deprecation.
    My guess is that the new module will be called `digital_ocean_droplet` and will
    have a similar syntax, but at the moment there is no code so it's just my guess.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the droplets, we will have to use the `digital_ocean` module with
    a syntax similar to the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To make sure that all our provisioning is done completely and in a sane way,
    I always suggest creating one single provision file for the whole infrastructure.
    So, in my case, I''ll add the following task to the `playbooks/do_provision.yaml`
    file:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After this, we can add the domain with the `digital_ocean_domain` module:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'So, putting all this together, our `playbooks/do_provision.yaml` will look
    like this, and the full code block is available on GitHub:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'So, we can now run it with the following command:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will see a result similar to the following. Full code output file is available
    on GitHub:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We have seen how to provision three machines on DigitalOcean with few lines
    of Ansible. We can now configure them with the playbooks we have discussed in
    the previous chapters.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning machines in Azure
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lately, Azure is becoming one of the biggest clouds, mainly in some companies.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: As you may imagine, Ansible has Azure-specific modules to create Azure environments
    without pain.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we will need on Azure, after having created the account, is
    to set up the authorization.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways to do it, but the easiest one is probably creating the
    `~/.azure/credentials` file in the INI format containing a `[default]` section
    with `subscription_id` and, alternatively, `client_id` and `secret` or `ad_user`
    and `password`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of this would be the following file:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: After this, we need a resource group in which we then will create all our resources.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, we can use the `azure_rm_resourcegroup`, with the following syntax:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now that we have the resource group, we can create a virtual network and a
    virtual subnetwork into it:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Before we can progress with the creation of the virtual machine, we still need
    some networking items, and more specifically, a public IP, a network security
    group, and a virtual network card:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续创建虚拟机之前，我们仍然需要一些网络项目，更具体地说，需要一个公共IP、一个网络安全组和一个虚拟网络卡：
- en: '[PRE24]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now we are ready to create our first Azure machine, with the following code:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备创建我们的第一台Azure机器，使用以下代码：
- en: '[PRE25]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Running the playbook, you'll obtain a CentOS machine running on Azure!
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 运行playbook后，您将在Azure上获得一个运行CentOS的机器！
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have seen how we can provision our machines in the AWS cloud,
    the DigitalOcean one, and Azure. In the case of the AWS cloud, we have seen two
    different examples, one very simple and one slightly more complex.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何在AWS云、DigitalOcean和Azure中配置我们的机器。在AWS云的情况下，我们看到了两个不同的示例，一个非常简单，一个稍微复杂一些。
- en: In the next chapter, we will talk about getting notified by Ansible when something
    goes south.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论当Ansible发现问题时如何通知我们。
