- en: Chapter 8. Encrypting Data with Vault
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using variables, we saw how to separate data and code. Often, the data provided
    is sensitive, for example, user passwords, data base credentials, API keys, and
    other organization-specific information. Ansible-playbooks, being a source code,
    are most commonly stored in version control repositories such as a **git**, which
    makes it even more difficult to protect this sensitive information in a collaborative
    environment. Starting with version 1.5, Ansible provides a solution called **vault**
    to store and retrieve such sensitive information securely, using proven encryption
    technologies. The objective of using vault is to encrypt data that can then be
    stored and shared freely with a version control system, such as git, without the
    values being compromised.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Ansible-vault
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing data using the Ansible-vault
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encryption, decryption, and rekeying operations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible-vault
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ansible provides a utility named Ansible-vault, which as the name suggests,
    lets you manage data securely. The Ansible-vault utility can either let you create
    an encrypted file by launching an editor interface, or encrypt an existing file.
    In either case, it will ask for a vault password, which is then used to encrypt
    the data with the AES cipher. The encrypted contents can be stored in a version
    control system without being compromised. Since the AES is based on shared secret,
    the same password needs to be provided for decryption too. To provide the password,
    there are two options, while launching Ansible, run the `--ask-vault-pass` option
    to prompt for the password, and the `--vault-password-file` option to provide
    the path to the file that contains the password.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Encryption Standard
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Advanced** **Encryption Standard** (**AES**) is an encryption standard based
    on the **Rijndael** symmetric block cipher, named after, and developed by, two
    Belgian cryptographers—Vincent Rijmen and Joan Daemen. Initially, established
    by (the U.S.) **National Institute of Standards and Technology** (**NIST**) in
    2001, AES is an algorithm adopted by the U.S. government to share classified information,
    and is the most popular symmetric-key cryptography algorithm. AES is also the
    first publicly accessible open cypher approved by the **National Security Agency**
    (**NSA**).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Being an open and popular standard, Ansible uses the AES cypher with a key size
    of 256 bits to encrypt data with the vault.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: What to encrypt with the vault?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Ansible-vault can encrypt any structured data. Since YAML itself is a structured
    language, almost everything that you write for Ansible meets this criteria. The
    following are the pointers on what can be encrypted with the vault:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'Most commonly, we encrypt variables, which can be as follows:'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Variable files in roles, for example, `vars` and `defaults`
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Inventory variables, for example, `host_vars`, `group_vars`
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Variables files included with `include_vars` or `vars_files`
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Variable files passed to the Ansible-playbook with the `-e` option, for example,
    `-e @vars.yml` or `-e @vars.json`
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Since tasks and handlers are also JSON data, these can be encrypted with the
    vault. However, this should be rarely practiced. It's recommended that you encrypt
    variables and reference them in tasks and handlers instead.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the pointers on what cannot be encrypted with the vault:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Since the unit of encryption for the vault is a file, partial files or values
    cannot be encrypted. You can encrypt the complete file or none of it.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Files and templates cannot be encrypted as they may not be similar to JSON or
    YML.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following data are a good candidates for encryption:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Credentials, for example, database passwords and application credentials
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API keys, for example, AWS access and secret keys
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSL keys for web servers
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Private SSH keys for deployments
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Ansible-vault
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following table lists all the subcommands that the Ansible-vault utility
    comes with:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '| Subcommand | Description |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
- en: '| `create` | This creates a encrypted file from scratch using the editor. This
    needs the editor environment variable set before launching the command. |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
- en: '| `edit` | This edits the existing encrypted file with an editor, without decrypting
    the contents. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
- en: '| `encrypt` | This encrypts an existing file with structured data. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
- en: '| `decrypt` | This decrypts the file. Use this with care and do not commit
    the decrypted file to version control. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
- en: '| `rekey` | This changes the key or password used to encrypt or decrypt. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
- en: Encrypting the data
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s perform some operations using Ansible-vault. We will start by creating
    an encrypted file. To create a new file from scratch, Ansible-vault uses the `create`
    subcommand. Before using this subcommand, it is important to set an editor in
    the environment, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Launching this command opens up an editor specified with the editor environment
    variable. The following is an example of the `aws_creds.yml` file that you may
    create to store the AWS user credentials in the form of an access key and secret
    key. These keys are then used to make API calls to the Amazon web services cloud
    platform. Saving this file and exiting the editor will generate an encrypted file:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![Encrypting the data](img/B03800_08_01.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: 'You can check the type of file created and its contents by running following
    commands:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Updating the encrypted data
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To update the AWS keys added to the encrypted file, you can later use Ansible-vault''s
    `edit` subcommand as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `edit` command does the following operations:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Prompts for a password
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decrypts a file on the fly using the AES symmetric cypher
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Opens the editor interface, which allows you to change the content of a file
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Encrypts the file again after being saved
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'There is another way to update the content of the file. You can decrypt the
    file as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once updated, this file can then be encrypted again, as you learned earlier.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Rotating the encryption keys
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As a good security practice, it''s a good idea to change encryption keys used
    with Ansible-vault often. When this happens, it''s essential to rekey all the
    files encrypted earlier using the vault. Ansible vault offers a `rekey` subcommand,
    which can be used as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 作为良好的安全实践，经常更改 Ansible-vault 使用的加密密钥是个好主意。当这种情况发生时，重新为之前使用 vault 加密的所有文件重新生成密钥是至关重要的。Ansible
    vault 提供了一个 `rekey` 子命令，可以如下使用：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It asks for the current password, and then allows you to specify and confirm
    your new password. Note that if you are managing this file with version control,
    you would also need to commit the change. Even though the actual contents are
    unchanged, rekeying the operation updates the resulting file that is created,
    which is part of our repository.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 它要求输入当前密码，然后允许您指定并确认新密码。请注意，如果您正在使用版本控制管理此文件，则还需要提交更改。即使实际内容未更改，重新生成操作也会更新所创建的结果文件，该文件是我们存储库的一部分。
- en: Encrypting the database credentials
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加密数据库凭据
- en: Earlier while creating database users, we provided the passwords as plain text
    in `group_vars`. This can be a potential threat, especially when checked into
    a version control repository. Let's encrypt it. We will use the `encrypt` subcommand
    as we already have a variables file.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 早些时候在创建数据库用户时，我们在 `group_vars` 中以明文提供了密码。这可能是一个潜在的威胁，特别是当提交到版本控制存储库时。让我们加密它。我们将使用
    `encrypt` 子命令，因为我们已经有了一个变量文件。
- en: 'Since we are using the `group_vars` group to provide database credentials,
    we will encrypt the `group_vars/all` file as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用 `group_vars` 组提供数据库凭据，因此我们将如下加密 `group_vars/all` 文件：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For encryption, Ansible-vault asks for a password or key to be entered by the
    user. Using this key, the vault encrypts the data and replaces the file with the
    encrypted content. The following diagram shows the plain text content on the left
    and the equivalent encrypted content on the right for the `group_vars/all` file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于加密，Ansible-vault 要求用户输入密码或密钥。使用此密钥，vault 加密数据并用加密内容替换文件。以下图表显示了 `group_vars/all`
    文件的左侧明文内容和等效的右侧加密内容：
- en: '![Encrypting the database credentials](img/B03800_08_02.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![加密数据库凭据](img/B03800_08_02.jpg)'
- en: 'This file now can be safely checked into a version control system and shared.
    However, the following are the caveats users should be aware of:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在此文件可以安全地检入版本控制系统并共享。但是，以下是用户应该注意的注意事项：
- en: Unlike plain text, the resulting file is an encrypted format. It's not possible
    to get a different file format, for example, `git diff`, to compare the changes
    while committing to version control.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与纯文本不同，结果文件是以加密格式存储的。不可能获得不同的文件格式，例如 `git diff`，以便在提交到版本控制时比较更改。
- en: It's not possible to use `grep`, `sed`, or any text search or manipulation programs
    on this file directly. The only way to do so is to decrypt it first, run the text
    manipulation utilities, and encrypt it back.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法直接在此文件上使用 `grep`、`sed` 或任何文本搜索或操作程序。唯一的方法是先解密它，运行文本操作工具，然后再加密回去。
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Ensure that you use the same password for all the files that you are going to
    decrypt with one Ansible-playbook run. Ansible can take only one value for the
    password at a time, and will fail if the files in the same playbook are encrypted
    using different passwords.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您为要在一个 Ansible-playbook 运行中解密的所有文件使用相同的密码。Ansible 一次只能接受一个密码值，如果在同一 playbook
    中使用不同的密码对文件进行加密，则会失败。
- en: 'Let''s now run the Ansible playbook using the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用以下命令运行 Ansible playbook：
- en: '[PRE6]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It fails with an error! That''s because we are providing the playbook with
    encrypted data, without the key to decrypt it. The primary use for vault is to
    secure data while it''s in the Ansible repository. Ultimately, these values need
    to be decrypted while running the playbook. The decryption password can be specified
    with the `--ask-vault-pass` option, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 它以错误失败！这是因为我们正在为 playbook 提供加密数据，而没有解密它的密钥。vault 的主要用途是在 Ansible 存储库中保护数据。最终，在运行
    playbook 时需要解密这些值。解密密码可以使用 `--ask-vault-pass` 选项指定，如下所示：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will prompt for "Vault Password" and then continue running Ansible code
    as usual.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提示输入 "Vault 密码"，然后继续像往常一样运行 Ansible 代码。
- en: Using a password file
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用密码文件
- en: Entering the password every time may not be ideal. Often at times you may also
    want to automate the process of launching Ansible playbook runs, in which case,
    an interactive way is not feasible. This can be avoided by storing the password
    in a file and providing the file to the Ansible playbook run. The password should
    be provided as a single line string in this file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a password file and secure it with the correct permissions:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Tip
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the vault password is stored as plain text, anyone who has access to this
    file can decrypt the data. Make sure the password file is secured with appropriate
    permissions, and is not added to version control. If you decide to version control
    it, use **gpg** or equivalent measures.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: 'Now this file can be provided to the Ansible playbook, as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adding the vault password file option to the Ansible configuration
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With version 1.7, it's also possible to add the `vault_password_file` option
    to the `ansible.cfg` file in the defaults section.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding option gives you the freedom of not specifying the encryption
    password or the password file every time. Let''s take a look at the following
    commands:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Moreover, when starting with version 1.7, instead of storing a plain text password
    in the file, a script can also be provided in the `vault_password_file` option.
    When using the script, ensure that:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: The execute bit is enabled on the script
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling this script outputs a password on the standard output
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the script prompts for user inputs, it can be sent to the standard error
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using encrypted data in templates
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You learned earlier that since a template may not be a structured file such
    as YAML or JSON, it cannot be encrypted. However, there is a way to add encrypted
    data to the templates. Remember, templates are, after all, generated on the fly,
    and the dynamic content actually comes from variables, which can be encrypted.
    Let's discuss how to achieve this by adding SSL support for the Nginx web server.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Adding SSL support to Nginx
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have already set up an Nginx web server, now let''s add SSL support to the
    default site by following these steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'We begin by adding the variables, as follows:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s also create self-signed SSL certificates:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding command will generate two files, `nginx.key` and `nginx.crt`.
    These are the files that we will have copied over to the web server.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s add the contents of these files to the variables, and create the `group_vars/www`
    file:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding example, we are just adding placeholders that are to be replaced
    with the actual contents for the key and certificate. These keys and certificates
    should not be exposed in a version control system.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s encrypt this file using the vault:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Since we have already provided the path to the vault password in the configuration,
    the Ansible-vault does not ask for the password.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s now create the templates, which add these keys:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Also, let''s add a virtual host `config` file to the SSL:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We also need to create a task file to configure the SSL site, which will create
    the required directory, files, and configurations:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要创建一个任务文件来配置SSL站点，该文件将创建所需的目录、文件和配置：
- en: '[PRE18]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, let''s call this task selectively based on whether the `nginx_ssl
    var` parameter is set to true:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们根据`nginx_ssl var`参数是否设置为true来选择性地调用此任务：
- en: '[PRE19]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, run the playbook as follows:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按照以下方式运行playbook：
- en: '[PRE20]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This should configure the default SSL site running at port `443` with self-signed
    certificates. Now, you should be able to open the web server address with the
    `https` secure protocol as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该配置在端口`443`上运行的默认SSL站点，使用自签名证书。现在，您应该能够使用`https`安全协议打开Web服务器地址，如下所示：
- en: '![Adding SSL support to Nginx](img/B03800_08_03.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![为Nginx添加SSL支持](img/B03800_08_03.jpg)'
- en: Of course, it should show a warning as our certificate is self-signed and not
    provided by a designated certification authority.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，由于我们的证书是自签名的，而不是由指定的认证机构提供的，应该显示警告。
- en: Review questions
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: 'Do you think you''ve understood the chapter well enough? Try answering the
    following questions to test your understanding:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为你已经足够理解这一章了吗？尝试回答以下问题来测试你的理解：
- en: Why is there a need to encrypt the data provided to Ansible playbooks?
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么需要加密提供给Ansible playbooks的数据？
- en: What is AES, and what is a symmetric-key cipher?
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AES是什么，对称密钥密码是什么？
- en: What are the two methods to update a file previously encrypted with the vault?
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新之前使用vault加密的文件的两种方法是什么？
- en: What is the parameter that is added to the Ansible configuration file to make
    it aware of the location of the vault password file?
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加到Ansible配置文件的参数，使其了解保险库密码文件的位置是什么？
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to secure the data passed to the playbooks
    using Ansible-vault. We started with the need to encrypt data, how the vault works,
    and which cipher it uses. We then started to dive into the Ansible-vault utility
    and basic operations such as creating encrypted files, decrypting, rekeying, and
    so on. You also learned how to encrypt existing files by running Ansible-vault
    on the `vars` file holding the database credentials. Finally, we added SSL support
    to Nginx and you learned how to securely store private keys and certificates for
    the web server using the vault and copying them using templates. Note that Ansible
    vault offers a way to provide data to Ansible modules securely. In addition to
    using the vault, additional system security measures are advised that do not come
    under the purview of this text.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用Ansible-vault对传递给playbooks的数据进行安全保护。我们从加密数据的需求开始，讲解了vault的工作原理以及它使用的密码。然后，我们开始深入了解Ansible-vault实用程序以及创建加密文件、解密、重新密钥等基本操作。您还学习了如何通过在持有数据库凭据的`vars`文件上运行Ansible-vault来加密现有文件。最后，我们为Nginx添加了SSL支持，您学会了如何使用vault安全地存储Web服务器的私钥和证书，并使用模板将它们复制。请注意，Ansible
    vault提供了一种安全地向Ansible模块提供数据的方式。除了使用vault之外，还建议采取其他系统安全措施，这不在本文的讨论范围内。
- en: After learning about vault, in the next chapter, we will start learning about
    the various approaches to managing multiple environments such as development,
    staging, and production with Ansible. These environments typically map to the
    software development workflow.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了vault之后，在下一章中，我们将开始学习使用Ansible管理多个环境（如开发、演示和生产）的各种方法。这些环境通常映射到软件开发工作流程。
