- en: Security Hardening for Applications and Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Security hardening is the most obvious task for any security-conscious endeavor.
    By doing the effort of securing systems, applications, and networks, one can achieve
    multiple security goals given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring that applications and networks are not compromised (sometimes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making it difficult for compromises to stay hidden for long
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing by default ensures that compromises in one part of the network don't
    propagate further and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Ansible way of thinking about automation around security is a great fit
    for automating security hardening. In this chapter, we will introduce security
    benchmarks and frameworks that can be used to build playbooks that will allow
    us to do the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Secure our master images so that as soon as the applications and systems are
    part of the network, they offer decent security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute audit processes so that we can verify and measure periodically if the
    applications, systems, and networks are in line with the security policies that
    are required by the organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is by no stretch a new idea. Extensive work has taken place in this sphere.
    We will look at projects such as dev-sec.io ([http://dev-sec.io/](http://dev-sec.io/)),
    which make it simple to start with security hardening of our applications and
    networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Topics to be covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Security hardening with benchmarks such as **Center for Internet Security**
    (**CIS**), **Security Technical Implementation Guides** (**STIG**), and **National
    Institute of Standards and Technology** (**NIST**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating security audit checks for networking devices using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating security audit checks for applications using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated patching approaches using Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security hardening with benchmarks such as CIS, STIGs, and NIST
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Benchmarks provide a great way for anyone to gain assurance of their individual
    security efforts. Created by security experts globally or led by security mature
    government departments such as NIST, benchmarks cover a whole range of systems,
    configurations, software, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hardening for security mostly boils down to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Agreeing on what is the minimal set of configuration that qualifies as secure
    configuration. This is usually defined as a hardening benchmark or framework.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making changes to all the aspects of the system that are touched by such configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Measuring periodically if the application and system are still in line with
    the configuration or if there is any deviation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If any deviation is found, take corrective action to fix that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If no deviation is found, log that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since software is always getting upgraded, staying on top of the latest configuration
    guidelines and benchmarks is most important.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The three important benchmarks/frameworks for our discussion are:'
  prefs: []
  type: TYPE_NORMAL
- en: CIS Benchmarks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: STIG guides
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NIST's **National Checklist Program** (**NCP**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These CIS Benchmarks are usually expressed as PDF documents available to anyone
    who would like to get an idea of how secure their system is compared with what
    CIS experts think about it.
  prefs: []
  type: TYPE_NORMAL
- en: CIS is a not-for-profit organization with not-for-profit standards for internet
    security, and are a recognized global standard and best practices for securing
    IT systems and data against attacks. CIS Benchmarks are the only consensus-based,
    best-practice security configuration guides both developed and accepted by the
    government, business, industry, and academia. For more information, visit [https://www.cisecurity.org/cis-benchmarks](https://www.cisecurity.org/cis-benchmarks).
  prefs: []
  type: TYPE_NORMAL
- en: STIG is related to the configuration of information systems by US Government's
    department named **DISA**.
  prefs: []
  type: TYPE_NORMAL
- en: The STIGs contain technical guidance to **lock down** information systems/software
    that might otherwise be vulnerable to a malicious computer attack. For more information,
    visit [https://iase.disa.mil/stigs/Pages/index.aspx](https://iase.disa.mil/stigs/Pages/index.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: NIST maintains a checklist program that are expressed in files that follows
    the **Security Content Automation Protocol** (**SCAP**). Software tools can read
    these files to automate the configuration changes and audit running configurations.
  prefs: []
  type: TYPE_NORMAL
- en: SCAP enables validated security tools to automatically perform configuration
    checking using SCAP-expressed NCP checklists. For more information, visit [https://www.nist.gov/programs-projects/national-checklist-program](https://www.nist.gov/programs-projects/national-checklist-program).
  prefs: []
  type: TYPE_NORMAL
- en: Operating system hardening for baseline using an Ansible playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Till now, we have created multiple playbooks to perform certain operations.
    Now, we will see how we can use existing playbooks from the community (**Ansible
    Galaxy**).
  prefs: []
  type: TYPE_NORMAL
- en: Hardening Framework is a project by Deutsche Telekom to manage thousands of
    servers for security, compliance, and maintenance. The goal of this project is
    to create a common layer for hardening operating systems and services easily.
  prefs: []
  type: TYPE_NORMAL
- en: If your organization is using chef or puppet tools as configuration management
    tools, the concepts are completely the same. You can find related cookbooks and
    details at [http://dev-sec.io](http://dev-sec.io).
  prefs: []
  type: TYPE_NORMAL
- en: The following playbook provides multiple security configurations, standards,
    and ways to protect operating system against different attacks and security vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the tasks it will perform include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Configures package management, for example, allows only signed packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove packages with known issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configures `pam` and `pam_limits` modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shadow password suite configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configures system path permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable core dumps via soft limits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Restrict root logins to system console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set SUIDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configures kernel parameters via `sysctl`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Downloading and executing Ansible playbooks from galaxy is as simple as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/5028b574-37de-4f45-aa1b-185c6ec6f696.png)'
  prefs: []
  type: TYPE_IMG
- en: The dev-sec.os-hardening playbook in execution
  prefs: []
  type: TYPE_NORMAL
- en: The preceding playbook will detect the operating system and perform hardening steps
    based on the different guidelines. This can be configured as required by updating
    the default variables values. Refer to [https://github.com/dev-sec/ansible-os-hardening](https://github.com/dev-sec/ansible-os-hardening)
    for more details about the playbook.
  prefs: []
  type: TYPE_NORMAL
- en: STIGs Ansible role for automated security hardening for Linux hosts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenStack has an awesome project named **ansible-hardening** ([https://github.com/openstack/ansible-hardening](https://github.com/openstack/ansible-hardening)),
    which applies the security configuration changes as per the STIGs standards. More
    details about the STIGs benchmarks for Unix/Linux operating systems can be found
    at [https://iase.disa.mil/stigs/os/unix-linux/Pages/index.aspx](https://iase.disa.mil/stigs/os/unix-linux/Pages/index.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: 'It performs security hardening for the following domains:'
  prefs: []
  type: TYPE_NORMAL
- en: '`accounts`: User account security controls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aide`: Advanced Intrusion Detection Environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auditd`: Audit daemon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auth`: Authentication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file_perms`: Filesystem permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`graphical`: Graphical login security controls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kernel`: Kernel parameters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lsm`: Linux Security Modules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`misc`: Miscellaneous security controls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`packages`: Package managers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sshd`: SSH daemon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ansible-hardening` playbook supports multiple Linux operating systems
  prefs: []
  type: TYPE_NORMAL
- en: CentOS 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debian jessie
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fedora 26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: openSUSE Leap 42.2 and 42.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Red Hat Enterprise Linux 7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SUSE Linux Enterprise 12 (experimental)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ubuntu 16.04
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details about the project and documentation, see [https://docs.openstack.org/ansible-hardening/latest](https://docs.openstack.org/ansible-hardening/latest).
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the role from the GitHub repository itself using `ansible-galaxy`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The playbook looks like the following. As similar to the previous playbook,
    this can be configured as required by changing the default variables values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/4b142365-4106-401d-9773-a6f0b7908a38.png)'
  prefs: []
  type: TYPE_IMG
- en: An Ansible-hardening playbook in execution CentOS-7 for STIGs checklist
  prefs: []
  type: TYPE_NORMAL
- en: The preceding playbook is executing on a CentOS-7 server against the STIG checklist.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous security scans and reports for OpenSCAP using Ansible Tower
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenSCAP is a set of security tools, policies, and standards to perform security
    compliance checks against the systems by following SCAP. SCAP is the U.S. standard
    maintained by NIST.
  prefs: []
  type: TYPE_NORMAL
- en: The SCAP scanner application reads a SCAP security policy and checks whether
    the system is compliant with it. It goes through all of the rules defined in the
    policy one by one and reports whether each rule is fulfilled. If all checks pass,
    the system is compliant with the security policy.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpenSCAP follows these steps to perform scanning on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: Install SCAP Workbench or OpenSCAP Base (for more information, visit [https://www.open-scap.org](https://www.open-scap.org))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose a policy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjust your settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluate the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following playbook will install `openscap-scanner` and `scap-security-guide`
    software to perform checks. Then, it will perform the scan as per the given profile
    and policy using the `oscap` tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the variable `oscap_profile` is to use the profile from the
    list of available profiles and `oscap_policy` is to choose the specific policy
    to scan the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Check playbook reference at [https://medium.com/@jackprice/ansible-openscap-for-compliance-automation-14200fe70663](https://medium.com/@jackprice/ansible-openscap-for-compliance-automation-14200fe70663).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can use this playbook to perform continuously automated checks using
    Ansible Tower:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to create a directory in Ansible Tower server in order to store
    this playbook with the `awx` user permission to add the custom playbook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new project in Ansible Tower to perform the OpenSCAP setup and scan
    against the checks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a162a353-3ae4-45be-8493-86a077e7512a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we have to create a new job to execute the playbook. Here, we can include
    the list of hosts, credentials for login, and other details required to perform
    the execution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b1981d8b-aaf2-474f-8a52-4dc4ad876ea9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This audit can be scheduled to perform frequently. Here you can see that we
    scheduled every day, this can be modified as per compliance frequency (security
    compliance requires to perform these kinds of audits frequently):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b4f3cd4d-9e54-4460-b46c-92aa55eda502.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also launch this job on demand when required. The playbook execution
    looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d292f00e-d1b8-459d-baa9-b2e57a7f4459.png)'
  prefs: []
  type: TYPE_IMG
- en: The output of the playbook will generate the OpenSCAP report, and it will be
    fetched to Ansible Tower. We can access this playbook at the `/tmp/` location.
    Also, we can send this report to the other centralized reporting server if required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6eb62327-0390-411d-bfa3-9308485458b8.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also set up notifications based on playbook execution results. By doing
    this, we can send this notifications to respective channels, such as email, slack,
    and message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/228a2418-68c1-416e-875e-5960af935706.png)'
  prefs: []
  type: TYPE_IMG
- en: CIS Benchmarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CIS has benchmarks for different type OS, software, and services. The following
    are some high-level categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Desktops and web browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Servers – operating systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Servers – other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtualization platforms, cloud, and other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read more about CIS benchmarks at [https://www.cisecurity.org](https://www.cisecurity.org).
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu CIS Benchmarks (server level)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CIS Benchmarks Ubuntu provides prescriptive guidance to establish a secure configuration
    posture for Ubuntu Linux systems running on x86 and x64 platforms. This benchmark
    is intended for system and application administrators, security specialists, auditors,
    help desk, and platform deployment personnel who plan to develop, deploy, assess,
    or secure solutions that incorporate Linux platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the high-level six domains that are part of CIS Ubuntu 16.04 LTS benchmarks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Initial setup:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filesystem configuration
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure software updates
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Filesystem integrity checking
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure boot settings
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional process hardening
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mandatory access control
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Warning banners
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Services:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inted Services
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Special purpose services
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Service clients
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Network configuration:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network parameters (host only)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Network parameters (host and router)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: IPv6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: TCP wrappers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Uncommon network protocols
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Logging and auditing:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure system accounting (`auditd`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure logging
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Access, authentication, and authorization:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure cron
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH server configuration
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure PAM
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: User accounts and environment
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'System maintenance:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System file permissions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: User and group settings
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are the Ansible Playbooks for 14.04 LTS and 16.04 LTS, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/oguya/cis-ubuntu-14-ansible](https://github.com/oguya/cis-ubuntu-14-ansible)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/grupoversia/cis-ubuntu-ansible](https://github.com/grupoversia/cis-ubuntu-ansible)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, update the variables and inventory and execute the playbook using the
    following command. The variables are not required mostly, as this performs against
    different CIS checks unless, if we wanted to customize the benchmarks as per the
    organization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/6cb09ea9-82e5-4608-adf9-a14ca11464ff.png)'
  prefs: []
  type: TYPE_IMG
- en: CIS Ubuntu Benchmarks Ansible playbook execution
  prefs: []
  type: TYPE_NORMAL
- en: The preceding playbook will execute the CIS security benchmark against an Ubuntu
    server and performs all the checks listed in the CIS guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: AWS benchmarks (cloud provider level)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS CIS Benchmarks provides prescriptive guidance to configure security options
    for a subset of AWS with an emphasis on foundational, testable, and architecture
    agnostic settings. It is intended for system and application administrators, security
    specialists, auditors, help desk, platform deployment, and/or DevOps personnel
    who plan to develop, deploy, assess, or secure solutions in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the high-level domains, which are part of AWS CIS Benchmarks:'
  prefs: []
  type: TYPE_NORMAL
- en: Identity and access management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extra
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Currently, there is a tool named **prowler** ([https://github.com/Alfresco/prowler](https://github.com/Alfresco/prowler))
    based on AWS-CLI commands for AWS account security assessment and hardening.
  prefs: []
  type: TYPE_NORMAL
- en: This tools follows the guidelines of the CIS Amazon Web Services Foundations
    Benchmark 1.1
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running the playbook, we have to provide AWS API keys to perform security
    audit. This can be created using IAM role in AWS service. If you have an already
    existing account with required privileges, these steps can be skipped:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new user in your AWS account with programmatic access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/165b0bb6-95ec-4c62-a86f-3bcbcd519697.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Apply the SecurityAudit policy for the user from existing policies in IAM console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/134883fc-1d97-411a-a9ce-1e3d297d8daa.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, create the new user by following the steps. Make sure that you safely
    save the Access key ID and Secret access key for later use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/da2e9f77-aac7-4a7e-b128-ea5bfa1ce836.png)'
  prefs: []
  type: TYPE_IMG
- en: Here is the simple playbook to set up and execute checks using the prowler tool.
    Provide the access and secret keys from the previous steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following playbook assume that you already have installed `python` and
    `pip` in your local system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The playbook will trigger the setup and security audit scan for AWS CIS Benchmarks
    using the prowler tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a5f1b4b6-efcd-4012-a609-d68756119a38.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Prowler-generated HTML report looks as follows, and the report can be downloaded
    in different formats as required and also scanning checks can be configured as
    required:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bf620722-2f7a-4d3f-9603-d319ffcd9e80.png)'
  prefs: []
  type: TYPE_IMG
- en: More reference about the tool can be found at [https://github.com/Alfresco/prowler](https://github.com/Alfresco/prowler).
  prefs: []
  type: TYPE_NORMAL
- en: Lynis – open source security auditing tool for Unix/Linux systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lynis is an open source security auditing tool. Used by system administrators,
    security professionals, and auditors, to evaluate the security defenses of their
    Linux and Unix-based systems. It runs on the host itself, so it performs more
    extensive security scans than vulnerability scanners.
  prefs: []
  type: TYPE_NORMAL
- en: 'Supported Operating Systems: Lynis runs on almost all Unix-based systems and
    versions, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: AIX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FreeBSD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HP-UX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NetBSD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenBSD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solaris and others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As stated in [https://cisofy.com/lynis](https://cisofy.com/lynis):'
  prefs: []
  type: TYPE_NORMAL
- en: '"It even runs on systems like the Raspberry Pi, or QNAP storage devices."'
  prefs: []
  type: TYPE_NORMAL
- en: 'The playbook looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding playbook will set up the Lynis, run the system audit scan against
    it, and finally fetches the report locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f105908-dfa3-4d2b-866d-5612f4925dfc.png)'
  prefs: []
  type: TYPE_IMG
- en: Lynis system audit scan playbook in execution
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is the report from the recent audit scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc364635-9f04-4a74-8824-647fa167ce9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Lynis system audit scan report
  prefs: []
  type: TYPE_NORMAL
- en: This can be run via Ansible Tower and other automation tools to perform periodical
    checks against systems using Lynis for audit scans.
  prefs: []
  type: TYPE_NORMAL
- en: Lynis commands and advanced options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Lynis has multiple options and commands that can be used to perform different
    options. For example, we can use `audit dockerfile <filename>` to perform analysis
    of Dockerfiles and the `--pentest` option to perform scan-related for pentesting.
  prefs: []
  type: TYPE_NORMAL
- en: '>![](img/38be2079-174e-47e5-bdc7-690e696d6cda.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Windows server audit using Ansible playbooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the enterprises use Windows to centrally manage their policies and updates
    through the organization using Active Directory type of features. Also, it is
    a very critical asset to protect and check for security issues in the organizations.
    We know that Ansible supports Windows operating system using WinRM to perform
    configuration changes. Let's see some examples to add security to your Windows
    servers using Ansible playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: Windows security updates playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following playbook is a simple reference from the Ansible documentation
    at [https://docs.ansible.com/ansible/devel/windows_usage.html#installing-updates](https://docs.ansible.com/ansible/devel/windows_usage.html#installing-updates):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/c1555722-c3c5-4ce8-bc9f-0fd24ae1a05b.png)'
  prefs: []
  type: TYPE_IMG
- en: Windows updates playbook in action
  prefs: []
  type: TYPE_NORMAL
- en: The preceding playbook will perform an automated Windows security updates of
    critical severity and restart the computer if required to apply the updated changes.
  prefs: []
  type: TYPE_NORMAL
- en: Windows workstation and server audit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following Ansible playbook is created based on [https://github.com/alanrenouf/Windows-Workstation-and-Server-Audit,](https://github.com/alanrenouf/Windows-Workstation-and-Server-Audit)
    and it will perform an audit of the system and generates a detailed HTML report.
    This is an example of how we can perform an audit using the PowerShell script.
    This can be extended by adding more checks and also adding other security audits
    scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The playbook looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/dbf33878-3877-4c36-91b8-6594fb70458e.png)'
  prefs: []
  type: TYPE_IMG
- en: Windows Audit Playbook in Action
  prefs: []
  type: TYPE_NORMAL
- en: Once the playbook execution completed, we can see the output report in HTML
    format with detailed information about running services, security patches, events,
    logging and other configuration details.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/653549cd-8640-415f-9a18-9408661e37bf.png)'
  prefs: []
  type: TYPE_IMG
- en: Automating security audit checks for networking devices using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen that Ansible lends itself really well to work with a variety of
    tools, and we can use this to do security audit checks for networking devices.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap scanning and NSE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Network Mapper** (**Nmap**) is a free open source software to perform network
    discovery, scanning, audit, and many others. It has a various amount of features
    such as OS detection, system fingerprinting, firewall detection, and many other
    features. **Nmap Scripting Engine** (**Nmap NSE**) provides advanced capabilities
    like scanning for particular vulnerabilities and attacks. We can also write and
    extend Nmap using our own custom script. Nmap is a swiss army knife for pen testers
    (security testers) and network security teams.'
  prefs: []
  type: TYPE_NORMAL
- en: Read more about Nmap at [https://nmap.org](https://nmap.org). Ansible also has
    a module to perform the inventory using Nmap [https://github.com/ansible/ansible/pull/32857/files](https://github.com/ansible/ansible/pull/32857/files).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following playbook will install Nmap if not available and perform the basic
    network port scan using the specified flags:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`{{ network_hosts|join('' '') }}` is a Jinja2 feature named **filter arguments**
    to parse the given `network_hosts` by space delimited'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`network_hosts` variable holds the list of IPs, network range (CIDR), hosts,
    and so on to perform scan using Nmap'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`top_ports` is the number that is ranging from `0` to `65535`. Nmap by default
    picks commonly opened top ports'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-Pn` specifies that scans the host if ping (ICMP) doesn''t work also'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-oA` gets the output in all formats, which includes gnmap (greppable  format),
    Nmap, and XML'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More details about the options and documentation for nmap can be found at [https://nmap.org/book/man.html](https://nmap.org/book/man.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/4df18006-8ab5-47eb-88a0-a1cc62216722.png)'
  prefs: []
  type: TYPE_IMG
- en: Nmap basic port scan playbook execution
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of playbook for running a basic Nmap scan is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/989d0d43-98ad-47c5-ae25-b416d93178d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure: Playbook scan output in 3 different formats'
  prefs: []
  type: TYPE_NORMAL
- en: 'The playbook after executing has created three reports of the format Nmap supports:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df624100-27d6-491f-b672-156233fac84e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure: Playbook scan output in nmap format'
  prefs: []
  type: TYPE_NORMAL
- en: By seeing the output of the `.nmap` file, we can easily see exactly what was
    found by the Nmap scan.
  prefs: []
  type: TYPE_NORMAL
- en: Nmap NSE scanning playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following playbook will perform enumeration of directories used by popular
    web applications and servers using `http-enum` and finds options that are supported
    by an HTTP server using `http-methods` using Nmap scripts.
  prefs: []
  type: TYPE_NORMAL
- en: More about Nmap NSE can be found at [https://nmap.org/book/nse.html](https://nmap.org/book/nse.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following playbook will perform `http-enum` and `http-methods` scans against `scanme.nmap.org` of
    ports `80` and `443`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following playbook will execute the Nmap NSE script using Ansible playbook
    for the HTTP enumeration and methods check:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67c6aaed-144e-4da1-8d9e-375f137206e8.png)'
  prefs: []
  type: TYPE_IMG
- en: Nmap NSE Playbook execution
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the playbook when we run a simple NSE script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c7335fd-6631-409d-b556-4b70fd465b0c.png)'
  prefs: []
  type: TYPE_IMG
- en: Nmap NSE scans output in .nmap format
  prefs: []
  type: TYPE_NORMAL
- en: The `http-enum` script runs additional tests against network ports where web
    servers are detected. In the preceding screenshot, we can see that two folders
    were discovered by the script and additionally all HTTP methods that are supported
    got enumerated as well.
  prefs: []
  type: TYPE_NORMAL
- en: AWS security audit using Scout2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Scout2 is an open source AWS security auditing tool and it is used to assess
    AWS environments security posture using AWS Python API. The scan output will be
    stored in JSON format, and the final results of the Scout2 will be produced as
    a simple HTML website with detailed information of AWS cloud security posture.
    It performs the scans and audits based on its existing rule set and test cases,
    and this can be extended based on our custom scripts and scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: More details about the tool can be found at [https://github.com/nccgroup/Scout2](https://github.com/nccgroup/Scout2).
    This tool requires AWS IAM credentials to perform the scan; refer to [https://github.com/nccgroup/AWS-recipes/blob/master/IAM-Policies/Scout2-Default.json](https://github.com/nccgroup/AWS-recipes/blob/master/IAM-Policies/Scout2-Default.json) for
    user policy creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing AWS Scout2 is very simple using the following playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'There are multiple rules configured to perform the audit, and the following
    snippet is the example of IAM password policy rule:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following playbook will perform the AWS Scout2 scan and returns the report
    in HTML format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/60a83305-4ff1-438f-822a-74f940a6fb42.png)'
  prefs: []
  type: TYPE_IMG
- en: AWS Scout2 report high-level overview
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding screenshot is of a high-level report, and the detailed report
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53cb544d-e62c-451b-a7fc-f18b511df56f.png)'
  prefs: []
  type: TYPE_IMG
- en: AWS Scout2 report detailed results for IAM section
  prefs: []
  type: TYPE_NORMAL
- en: Automation security audit checks for applications using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern applications can get pretty complex fairly quickly. Having the ability
    to run automation to do security tasks is almost a mandatory requirement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The different types of application security scanning we can do can range from
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Run CI/CD scanning against the source code (for example, RIPS and brakeman).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dependency checking scanners (for example, OWASP dependency checker and snyk.io
    ([https://snyk.io/](https://snyk.io/))).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once deployed then run the web application scanner (for example, Nikto, Arachni,
    and w3af).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Framework-specific security scanners (for example, WPScan and Droopscan) and
    many other.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Source code analysis scanners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is one of the first and common way to minimize the security risk while
    applications going to production. Source code analysis scanner also known as **Static
    Application Security Testing** (**SAST**) will help to find security issues by
    analyzing the source code of the application. This kind of tools and testing methodology
    allows developers to scan their code for security vulnerabilities repeatedly and
    automatically in the process of **continuous integration/continuous delivery**
    (**CI/CD**).
  prefs: []
  type: TYPE_NORMAL
- en: There are multiple stages we can introduce these tools to effectively identify
    security vulnerabilities like integrated with IDE (code editors such as Eclipse,
    Visual Studio Code, and so on) and integrating in CI/CD process tools (Jenkins,
    Travis CI, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Source code analysis is kind of white box testing and looking through code.
    This kind of testing methodology may not find 100% coverage of security vulnerabilities,
    and it requires manual testing as well. For example, finding logical vulnerabilities
    requires some kind of user interactions such as dynamic functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: There are many open source and commercial tools available in the market to perform
    static code analysis. Also, some of the tools are specific to the technology and
    frameworks you are using. For example, if you are scanning PHP code, then RIPS
    ([http://rips-scanner.sourceforge.net/](http://rips-scanner.sourceforge.net/));
    if it's Ruby on Rails code, then it's Brakeman ([https://brakemanscanner.org/](https://brakemanscanner.org/));
    and if it's python, then Bandit ([https://wiki.openstack.org/wiki/Security/Projects/Bandit](https://wiki.openstack.org/wiki/Security/Projects/Bandit));
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: For more reference, visit [https://www.owasp.org/index.php/Source_Code_Analysis_Tools](https://www.owasp.org/index.php/Source_Code_Analysis_Tools).
  prefs: []
  type: TYPE_NORMAL
- en: Brakeman scanner – Rails security scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Brakeman is an open source tool to do a static security analysis of Ruby on
    Rails applications. This can be applied at any stage of development and deployment
    process that includes staging, QA, production, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple playbook to execute Brakeman against our application looks like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/2865649a-ab00-4757-910c-a2e05334a084.png)'
  prefs: []
  type: TYPE_IMG
- en: Brakeman Playbook in Action against Rails goat project
  prefs: []
  type: TYPE_NORMAL
- en: 'Brakeman report overview is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/003978d9-edb3-4a74-aa8a-f5bedb3839c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Brakeman report overview at high level
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is Brakeman report in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dced611e-8391-495e-be04-8d2da8b55735.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the detailed report with code and issue-level.
  prefs: []
  type: TYPE_NORMAL
- en: Reference about the Brakeman tool and options can be found at [https://brakemanscanner.org](https://brakemanscanner.org).
  prefs: []
  type: TYPE_NORMAL
- en: Dependency-checking scanners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the developers use third-party libraries while developing applications,
    and it's very common to see using open source plugins and modules inside their
    code. Many of the open source projects might be vulnerable to known attacks such
    as Cross-Site Scripting and SQL injection. If developers don't know the vulnerability
    that exists in the library they use, that means their entire application becomes
    vulnerable the attacker because of a bad library.
  prefs: []
  type: TYPE_NORMAL
- en: So dependency checks will allow us to find using components with known vulnerabilities
    (OWASP A9) issues in application code by scanning the libraries against the CVE
    and NIST vulnerability database.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are multiple projects out there in the market for performing these checks,
    and some of them includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: OWASP Dependency-Check
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Snyk.io ([https://snyk.io/](https://snyk.io/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retire.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[:] SourceClear and many other'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OWASP Dependency-Check
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OWASP Dependency-Check is an open source tool to perform checks for known vulnerabilities
    in Java and .NET applications primarily. It also supports other platforms such
    as Node.js and Python as an experiment analyzer. This can also produce false positives
    and can be configured to fine tune the scanning as required.
  prefs: []
  type: TYPE_NORMAL
- en: This tool can also be run in multiple ways such as CLI, build tools (Ant, Gradle,
    Maven, and so on) and CI/CD (Jenkins) process.
  prefs: []
  type: TYPE_NORMAL
- en: More details about the project can be found at [https://www.owasp.org/index.php/OWASP_Dependency_Check](https://www.owasp.org/index.php/OWASP_Dependency_Check).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet is to set up and perform a scan using OWASP Dependency-Check
    tool on vulnerable Java project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/e4476850-3332-45ce-9ee3-3c272a573afa.png)'
  prefs: []
  type: TYPE_IMG
- en: OWASP Dependency-Check scan against Bodgeit project using Ansible playbook
  prefs: []
  type: TYPE_NORMAL
- en: 'OWASP Dependency-Check report in high level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/26012f79-ee08-4889-a214-e1fb44da9902.png)'
  prefs: []
  type: TYPE_IMG
- en: High-level report of OWASP Dependency-Check tool
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a detailed report with vulnerability, fixes, and the references:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f31ce711-3c95-44a5-bb3c-2c0d5686a704.png)'
  prefs: []
  type: TYPE_IMG
- en: A detailed report with vulnerability, fixes, and reference
  prefs: []
  type: TYPE_NORMAL
- en: 'The report format looks like the following at high level:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dependency**: The file name of the dependency scanned'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CPE**: Any Common Platform Enumeration identifiers found'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GAV**: The Maven Group, Artifact, and Version (GAV)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Highest severity**: The highest severity of any associated CVEs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CVE count**: The number of associated CVEs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CPE confidence**: A ranking of how confident Dependency-check is that the
    CPE was identified correctly'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Evidence count**: The quantity of data extracted from the dependency that
    was used to identify CPE'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More detailed documentation can be found at [https://jeremylong.github.io/DependencyCheck](https://jeremylong.github.io/DependencyCheck).
  prefs: []
  type: TYPE_NORMAL
- en: Running web application security scanners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the phase where the application went live to QA, stage, (or) Production.
    Then, we wanted to perform security scans like an attacker (black box view). At
    this stage, an application will have all the dynamic functionalities and server
    configurations applied.
  prefs: []
  type: TYPE_NORMAL
- en: These scanner results tell us how good the server configured and any other application
    security issues before releasing the replica copy into the production.
  prefs: []
  type: TYPE_NORMAL
- en: At this stage, most of the scanners just work at a certain level only. And we
    need to put some manual testing using human brain to find logical vulnerabilities
    and other security vulnerabilities that can't be detected by security scanners
    and tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have seen in other sections, there are many tools in the market to do
    these jobs for you in both open source and commercial world. Some of them includes
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Nikto
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arachni
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: w3af
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acunetix and many other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nikto – web server scanner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nikto is an open source web server assessment tool written in Perl to perform
    security configuration checks and web server and application scanning using its
    checklist of items to scan.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the checks Nikto does includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Server and software misconfigurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default files and programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insecure files and programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outdated servers and programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nikto setup and execution Ansible playbook looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/d482f296-8b37-4235-9a8a-36009a47f6ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Nikto Playbook in action
  prefs: []
  type: TYPE_NORMAL
- en: 'Playbook to download, install, and run Nikto with report output is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/621f521f-71d4-4152-accf-fd3095f16a92.png)'
  prefs: []
  type: TYPE_IMG
- en: Nikto HTML scan report
  prefs: []
  type: TYPE_NORMAL
- en: Read more about Nikto options and documentation at [https://cirt.net/Nikto2.](https://cirt.net/Nikto2)
  prefs: []
  type: TYPE_NORMAL
- en: Framework-specific security scanners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This kind of check and scanning is to perform against specific to framework,
    CMS, and platforms. It allows to get more detailed results by validating against
    multiple security test cases and checks. Again, there are multiple tools and scanners
    available in both open source and commercial world.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the examples includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Scanning against WordPress CMS using WPScan: [https://github.com/wpscanteam/wpscan](https://github.com/wpscanteam/wpscan)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scanning against JavaScript libraries using Retire.js: [https://retirejs.github.io/retire.js](https://retirejs.github.io/retire.js)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning against Drupal CMS using Droopescan - [https://github.com/droope/droopescan](https://github.com/droope/droopescan) and
    many others
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WordPress vulnerability scanner – WPScan
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WPScan is black box WordPress vulnerability scanner written in Ruby to perform
    security scanning and vulnerability checks against WordPress CMS using WPScan
    vulnerability database ([https://wpvulndb.com](https://wpvulndb.com)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the checks it does includes but not limited to are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: WordPress core
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WordPress plugins and themes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Old software known vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Username, attachment enumeration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brute force attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security misconfiguration and many other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following playbook will perform WPScan as per the given domain and produces
    the scan report with list of issues and references.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `domain_name` and `output_dir` values as required in the playbook.
    Also, the following playbook assumes that you already have Docker installed in
    the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/3207c05c-05d2-4aac-bc3b-19c3f926a006.png)'
  prefs: []
  type: TYPE_IMG
- en: WPScan Ansible playbook execution
  prefs: []
  type: TYPE_NORMAL
- en: 'Playbook output of downloading, executing, and storing the scan results for
    WPScan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc1ae916-dded-4e76-8f3a-6396427b5ccf.png)'
  prefs: []
  type: TYPE_IMG
- en: WPScan output report with issue details and references
  prefs: []
  type: TYPE_NORMAL
- en: These scans can be integrated into our CI/CD pipeline and execute once the deployment
    completed to validate against the security checks and configuration checks. Also,
    this scan can be customized as required based on the WPScan; refer to the WPScan
    documentation for more reference [https://github.com/wpscanteam/wpscan](https://github.com/wpscanteam/wpscan).
  prefs: []
  type: TYPE_NORMAL
- en: Automated patching approaches using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Patching and updating is a task that everyone who has to manage production
    systems has to deal with. There are two approaches that we will look are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Rolling updates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BlueGreen deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rolling updates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine that we have five web servers behind a load balancer. What we would
    like to do is a zero downtime upgrade of our web application. Using certain keywords
    available in Ansible, we can make this happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, we want to achieve the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Tell the load balancer that web server node is down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bring down the web server on that node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy the updated application files to that node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bring up the web server on that node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first keyword for us to look at is `serial`. Let''s see this example from
    Ansible documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The example is from [http://docs.ansible.com/ansible/latest/playbooks_delegation.html#rolling-update-batch-size](http://docs.ansible.com/ansible/latest/playbooks_delegation.html#rolling-update-batch-size).
  prefs: []
  type: TYPE_NORMAL
- en: This ensures that the execution of the playbook is done serially rather than
    in parallel. So the steps we listed previously can be done for one node at a time.
    The load balancer distributes traffic to the website on running nodes, and we
    achieve rolling updates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from giving a number to serial, we can also use percentage. Therefore,
    the example becomes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The example is from [http://docs.ansible.com/ansible/latest/playbooks_delegation.html#rolling-update-batch-size](http://docs.ansible.com/ansible/latest/playbooks_delegation.html#rolling-update-batch-size).
  prefs: []
  type: TYPE_NORMAL
- en: We can choose to provide a percentage value or numeric value to serial. In this
    case the the play will run against 1, then 20% of the remaining nodes and finally
    all the remaining ones.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Example is from [http://docs.ansible.com/ansible/latest/playbooks_delegation.html#rolling-update-batch-size](http://docs.ansible.com/ansible/latest/playbooks_delegation.html#rolling-update-batch-size).
  prefs: []
  type: TYPE_NORMAL
- en: A great example for this way of doing updates is given in the following link
  prefs: []
  type: TYPE_NORMAL
- en: '*Episode #47 - Zero-downtime Deployments with Ansible*: [https://sysadmincasts.com/episodes/47-zero-downtime-deployments-with-ansible-part-4-4](https://sysadmincasts.com/episodes/47-zero-downtime-deployments-with-ansible-part-4-4)'
  prefs: []
  type: TYPE_NORMAL
- en: BlueGreen deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The concept of BlueGreen is attributed to Martin Fowler. A good reference is
    this article [http://martinfowler.com/bliki/BlueGreenDeployment.html](http://martinfowler.com/bliki/BlueGreenDeployment.html) on
    it. The idea is to consider our current live production workload as blue. Now
    what we want to do is upgrade the application. So a replica of blue is brought
    up behind the same load balancer. The replica of the infrastructure has the updated
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it is up and running, the load balancer configuration is switched from
    current blue to point to green. Blue keeps running in case there are any operational
    issues. Once we are happy with the progress, we can tear down the older host. The
    following playbook demonstrate this in a very simplistic manner:'
  prefs: []
  type: TYPE_NORMAL
- en: The first playbook brings up three hosts. Two web servers running nginx behind
    a load balancer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second playbook switches what is live (blue) to green
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BlueGreen deployment setup playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following playbook will set up three nodes, which includes load balancer
    and two web server nodes. Follow https://www.upcloud.com/support/haproxy-load-balancer-ubuntu
    to create a playbook.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following snippet is the `inventory` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the `main.yml` playbook file looks like the following, which describes
    what roles to execute on which nodes and flow:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Each role has it''s own functionality to perform; the following is the common
    role to perform across all the nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the proxy server role looks like the following to set up and configure
    the `haproxy` server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The `haproxy.cfg.j2` looks as follows, it has all the configuration required
    to perform the setup. This can be improved based on what configuration we want
    to add (or) remove like SSL/TLS certificates and exposing `haproxy` stats and
    so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The following snippet will add the servers as part of load balancer and serves
    when user requested. We can add multiple servers as well. `haproxy` also supports
    both L7 and L4 load balancing as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The web server is very simple nginx server setup to install and add the service
    to startup process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the following code snippets are the code for `blue` and`green` servers,
    respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is the reference to playbook execution of this entire
    setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/20124216-1607-4579-8648-cb4427a6716c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the playbook is completed, we can check the production site at our load
    balancer IP address to see the blue deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16ae76c4-6cda-480d-85b3-e17b0d2a0748.png)'
  prefs: []
  type: TYPE_IMG
- en: BlueGreen deployment update playbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, the developer has updated the code (or) server is patched for some security
    vulnerabilities. We want to deploy the new version of production site with green
    deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The playbook looks very simple as follows, it will update the configuration
    and reloads the `haproxy` service to serve the new production deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/419d233e-30b5-4776-9c71-f330f26771f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we can check our production site again to see the update deployment by
    navigating to the load balancer IP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b323f803-2c55-43cc-be61-d81a8179856b.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, we can see that our production site is running the new updated deployment.
    There are multiple advanced options available in HAProxy to perform different
    kind of updates and can be configurable as required.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter touched upon various use cases for application and network security.
    By combining various tools with the power of Ansible playbooks, we created powerful
    workflows for security automation in this space. Based on requirements, you may
    use benchmarks in order to enable secure defaults or periodic checks for compliance
    and fulfill audit requirements. We looked at tools that allow us to do the same
    for AWS Cloud as well. From application security scanners to approaches to doing
    software updates and patches in a secure configuration-driven manner, we tried
    to cover a wide variety of tasks that are made powerful by Ansible automation.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on one of the most exciting emerging areas
    of IT and operations, that is, containers. Docker being synonymous with containers
    has become a widely deployed technology for developers, system administrators,
    and a core part of the modern software development and deployment pipelines. Let's
    explore what does Ansible have in store to work with Docker containers.
  prefs: []
  type: TYPE_NORMAL
