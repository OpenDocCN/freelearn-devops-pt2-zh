- en: Working with Container Images
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用容器图像
- en: Container-based software development lifecycle requires easy image packaging
    and reliable ways to distribute containerized applications - these are key aspects
    that the Docker ecosystem has solved. We used Dockerfiles and Docker images in
    the previous chapters. Simply put, a Dockerfile defines build instructions for
    creating a Docker image, an immutable, layered snapshot of container data that
    can be used for instantiating containers. These two concepts allow us to create
    easy and standardized packaging for container applications. In order to provide
    reliable and scalable distribution for Docker images, we can use image registries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 基于容器的软件开发生命周期需要简单的图像打包和可靠的分发容器化应用程序的方法-这些是Docker生态系统解决的关键方面。我们在前几章中使用了Dockerfiles和Docker图像。简单来说，Dockerfile定义了用于创建Docker图像的构建指令，这是容器数据的不可变的、分层的快照，可用于实例化容器。这两个概念使我们能够为容器应用程序创建简单和标准化的打包。为了为Docker图像提供可靠和可扩展的分发，我们可以使用图像注册表。
- en: In this chapter, we will focus on the usage of Docker registries, mainly the
    publicly accessible Docker Hub and private Azure Container Registry, and we will
    also introduce Docker Content Trust – a concept for publishing and managing signed
    collections of content. With this introduction to container image management,
    you will be ready to fully enter the world of Kubernetes on Windows!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点介绍Docker注册表的使用，主要是公开访问的Docker Hub和私有的Azure容器注册表，并且我们还将介绍Docker内容信任-用于发布和管理已签名内容集合的概念。通过这个容器图像管理的介绍，您将准备好完全进入Windows上的Kubernetes世界！
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Storing and sharing container images
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储和共享容器图像
- en: Using cloud container builders
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用云容器构建器
- en: Image tagging and versioning
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像标记和版本控制
- en: Ensuring the integrity of the image supply chain
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保图像供应链的完整性
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章，您将需要以下内容：
- en: Windows 10 Pro, Enterprise, or Education (version 1903 or later, 64-bit) installed.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装Windows 10专业版、企业版或教育版（1903版或更高版本，64位）。
- en: Docker Desktop for Windows 2.0.0.3 or later installed.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装Docker Desktop for Windows 2.0.0.3或更高版本。
- en: The Azure CLI installed. You can find detailed installation instructions in
    [Chapter 2](43d5e48b-311c-462c-a68e-6a0b5c4224e8.xhtml)*, Managing State in Containers*.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装Azure CLI。您可以在[第2章](43d5e48b-311c-462c-a68e-6a0b5c4224e8.xhtml)*，在容器中管理状态*中找到详细的安装说明。
- en: The installation of Docker Desktop for Windows and its detailed requirements
    were covered in [Chapter 1](deffbcf5-3a21-4690-ad42-ae5e4cd97dea.xhtml)*, Creating
    Containers*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Desktop for Windows的安装及其详细要求在[第1章](deffbcf5-3a21-4690-ad42-ae5e4cd97dea.xhtml)*，创建容器*中已经涵盖。
- en: To be able to use cloud-hosted registries, you will need your own Azure account.
    If you haven't created an account for the previous chapters, you can find out
    how to obtain a limited free account for personal use here: [https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够使用云托管的注册表，您将需要自己的Azure帐户。如果您之前没有为前几章创建帐户，您可以在此处了解如何获取用于个人使用的有限免费帐户：[https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/)。
- en: You can download the latest code samples for this chapter from this book's official
    GitHub repository: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从本书的官方GitHub存储库下载本章的最新代码示例：[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03)。
- en: Storing and sharing container images
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储和共享容器图像
- en: 'So far, you have already pulled your first `hello-world` container with the `docker
    pull hello-world` command and even used the `docker run hello-world` command.
    Under the hood, a few things happen during an image pull:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经使用`docker pull hello-world`命令拉取了您的第一个`hello-world`容器，甚至使用了`docker run
    hello-world`命令。在图像拉取期间，底层会发生一些事情：
- en: Docker Engine connects to the so-called Docker image registry. The registry
    can be specified explicitly, but by default, this is the official public registry,
    called Docker Hub ([https://hub.docker.com/](https://hub.docker.com/)).
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker引擎连接到所谓的Docker镜像注册表。注册表可以被明确指定，但默认情况下，这是官方的公共注册表，称为Docker Hub（[https://hub.docker.com/](https://hub.docker.com/)）。
- en: Docker Engine authenticates to the registry, if needed. This can be the case
    if you are running a private registry or paid plan for Docker Hub.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker引擎对注册表进行身份验证，如果需要的话。如果您正在运行私有注册表或Docker Hub的付费计划，这可能是一个情况。
- en: The selected `hello-world` image is downloaded as a set of layers identified
    by SHA256 digests. Each layer is unpacked after being downloaded.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所选的`hello-world`图像被下载为一组由SHA256摘要标识的层。每个层在下载后都会被解压缩。
- en: The image is stored locally.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该图像被存储在本地。
- en: A similar procedure happens if you execute the `docker run` command and the
    image is not present in the local store. The first time, it will be pulled, and
    later, the locally cached image will be used.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '如果执行`docker run`命令并且本地存储中不存在图像，则会发生类似的过程。第一次，它将被拉取，以后将使用本地缓存的图像。 '
- en: If you are familiar with GitHub or other source repository managed hosting,
    you will find many concepts in image management and image registries similar.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉GitHub或其他源代码仓库托管，您会发现图像管理和图像注册表中有许多类似的概念。
- en: 'So, intuitively, the image registry is an organized, hierarchical system for
    storing Docker images. The hierarchy of images consists of the following levels:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，直观地说，图像注册表是一个有组织的、分层的系统，用于存储Docker图像。图像的层次结构包括以下级别：
- en: '**Registry**: This is the top level of the hierarchy.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册表**：这是层次结构的顶层。'
- en: '**Repository**: Registries host multiple repositories, which are storage units
    for images.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储库**：注册表托管多个存储库，这些存储库是图像的存储单元。'
- en: '**Tag**: A versioning label for a single image. Repositories group multiple
    images identified by the same image name and different tags.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签**：单个图像的版本标签。存储库将由相同图像名称和不同标签标识的多个图像分组。'
- en: 'Each image in the registry is identified by an image name and tag, and the
    hierarchy above is reflected in the final image name. The following scheme is
    used: `<registryAddress>/<userName>/<repositoryName>:<tag>` ,for example, `localregistry:5000/ptylenda/test-application:1.0.0`.
    When using Docker commands, some of these parts are optional and if you do not
    provide a value, the default will be used:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表中的每个图像都由图像名称和标签标识，并且上面的层次结构反映在最终图像名称中。使用以下方案：`<registryAddress>/<userName>/<repositoryName>:<tag>`，例如，`localregistry:5000/ptylenda/test-application:1.0.0`。在使用Docker命令时，其中一些部分是可选的，如果您不提供值，将使用默认值：
- en: '`<registryAddress>` is the DNS name or IP address (together with the port)
    of the registry that is used for storing the image. If you omit this part, the
    default Docker Hub registry (`docker.io`) will be used. Currently, there is no
    way of changing the default value of the registry address, so if you would like
    to use a custom registry, you have to always provide this part.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<registryAddress>`是用于存储图像的注册表的DNS名称或IP地址（连同端口）。如果省略此部分，将使用默认的Docker Hub注册表（`docker.io`）。目前，没有办法更改注册表地址的默认值，因此，如果您想使用自定义注册表，必须始终提供此部分。'
- en: '`<userName>` identifies the user or organization that owns the image. In the
    case of Docker Hub, this is a so-called Docker ID. Whether this part is required
    depends on the registry – for Docker Hub, if you do not provide a Docker ID, it
    will assume official images, which are a curated set of Docker repositories that
    are maintained and reviewed by Docker.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<userName>`标识拥有该镜像的用户或组织。在Docker Hub的情况下，这是所谓的Docker ID。是否需要这部分取决于注册表 - 对于Docker
    Hub，如果您没有提供Docker ID，它将假定官方镜像，这是一组由Docker维护和审核的Docker仓库。'
- en: '`<repositoryName>` is a unique name within your account. The image name is
    formed as `<registryAddress>/<userName>/<repositoryName>`.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<repositoryName>`是您帐户中的唯一名称。镜像名称形成为`<registryAddress>/<userName>/<repositoryName>`。'
- en: '`<tag>` is a unique label within a given image repository that is used for
    organizing images, in most cases using a versioning scheme, for example, `1.0.0`.
    If this value is not provided, the default, `latest`, will be used. We will focus
    on tagging and versioning images later in this chapter.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<tag>`是给定镜像仓库中的唯一标签，用于组织镜像，大多数情况下使用版本控制方案，例如`1.0.0`。如果未提供此值，则将使用默认值`latest`。我们将在本章后面重点讨论标记和版本控制镜像。'
- en: With multi-architecture Docker image variants, it is possible to have different
    images under the same image name and tag for different architectures. The version
    of the image will be automatically chosen based on the architecture of the machine
    running the Docker client. Identifying such images can be performed explicitly
    using an additional `@sha256:<shaTag>` part after the image tag, for example, `docker.io/adamparco/demo:latest@sha256:2b77acdfea5dc5baa489ffab2a0b4a387666d1d526490e31845eb64e3e73ed20`.
    For more details, please go to [https://engineering.docker.com/2019/04/multi-arch-images/](https://engineering.docker.com/2019/04/multi-arch-images/).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多架构Docker镜像变体，可以在相同的镜像名称和标签下拥有不同的镜像，用于不同的架构。镜像的版本将根据运行Docker客户端的机器的架构自动选择。可以通过在镜像标签后面显式地使用额外的`@sha256:<shaTag>`部分来明确识别这样的镜像，例如，`docker.io/adamparco/demo:latest@sha256:2b77acdfea5dc5baa489ffab2a0b4a387666d1d526490e31845eb64e3e73ed20`。有关更多详细信息，请访问[https://engineering.docker.com/2019/04/multi-arch-images/](https://engineering.docker.com/2019/04/multi-arch-images/)。
- en: Now that you know how Docker images are identified, let's take a look at how
    to push an image to the Docker registry.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您知道Docker镜像是如何标识的，让我们来看看如何将镜像推送到Docker注册表。
- en: Pushing an image to the Docker registry
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将镜像推送到Docker注册表
- en: Sharing container images using the registry is performed via an image push.
    This process uploads the required image layers to the selected repository in a registry
    and makes it available for pull by other users that have access to a given repository.
    In the case of Docker Hub, which we will use for this demonstration, your repositories
    will be public, unless you have a paid plan.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用注册表共享容器镜像是通过镜像推送来完成的。这个过程将所需的镜像层上传到所选仓库的注册表中，并使其可以被其他具有对给定仓库访问权限的用户拉取。在我们将用于演示的Docker
    Hub的情况下，您的仓库将是公开的，除非您有付费计划。
- en: 'Pushing images to Docker Hub requires authentication. If you haven''t already
    registered at Docker Hub, please navigate to [https://hub.docker.com/](https://hub.docker.com/) and
    follow the instructions there. After registration, you will need your Docker ID
    and password in order to log in to the services using the `docker login` command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将镜像推送到Docker Hub需要进行身份验证。如果您还没有在Docker Hub注册，请转到[https://hub.docker.com/](https://hub.docker.com/)并按照那里的说明操作。注册后，您将需要您的Docker
    ID和密码才能使用`docker login`命令登录到服务中：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Throughout this book, we will be using the `packtpubkubernetesonwindows` Docker
    ID in order to demonstrate our examples. It is recommended that you create your
    own account to be able to fully follow the examples in this book. Follow these
    steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用`packtpubkubernetesonwindows` Docker ID来演示我们的示例。建议您创建自己的帐户，以便能够完全跟随本书中的示例。按照以下步骤：
- en: 'The first step is to create an image that can actually be pushed to the registry.
    We will use the following Dockerfile to create the image:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是创建一个实际可以推送到注册表的镜像。我们将使用以下Dockerfile来创建镜像：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This Dockerfile creates an IIS web host image, which serves a minimalistic web
    page that displays This is an IIS demonstration!.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此Dockerfile创建了一个IIS Web主机镜像，用于提供显示This is an IIS demonstration!的极简网页。
- en: 'Save the Dockerfile in your current directory. To build it, issue the following
    `docker build` command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Dockerfile保存在当前目录中。要构建它，请发出以下`docker build`命令：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Bear in mind that you have to supply your Docker ID as part of the repository
    name in order to be able to push the image to Docker Hub.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，为了能够将镜像推送到Docker Hub，您必须在仓库名称中提供您的Docker ID。
- en: 'After a successful build, you are ready to perform an image push to the registry.
    This can be performed with the `docker push` command:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功构建后，您就可以准备将镜像推送到注册表。这可以通过`docker push`命令来执行：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](assets/df5b226c-5dab-4ad9-b754-623195333b48.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/df5b226c-5dab-4ad9-b754-623195333b48.png)'
- en: Docker pushes the image as a set of layers, which also optimizes the push process
    if already known layers are being used. Also, note that in the case of Windows-based
    images, you will see a Skipped foreign layer message. The reason for this is that
    any layers that come from a registry other than Docker Hub, such as **Microsoft
    Container Registry **(**MCR**), will not be pushed to Docker Hub.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Docker将镜像作为一组层进行推送，这也优化了推送过程，如果已知的层正在使用。此外，请注意，在基于Windows的镜像的情况下，您将看到一个跳过外部层的消息。原因是来自Docker
    Hub以外的注册表的任何层，例如**Microsoft Container Registry**（**MCR**），将不会被推送到Docker Hub。
- en: Now, you can also navigate to the Docker Hub web page and check your image details
    – for the example image, you can check it here: [https://cloud.docker.com/repository/docker/packtpubkubernetesonwindows/iis-demo/](https://cloud.docker.com/repository/docker/packtpubkubernetesonwindows/iis-demo/).
    Any user that has access to your repository can now use the `docker pull <dockerId>/iis-demo`
    command in order to use your image.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您还可以转到Docker Hub网页并检查您的镜像详细信息 - 对于示例镜像，您可以在此处检查：[https://cloud.docker.com/repository/docker/packtpubkubernetesonwindows/iis-demo/](https://cloud.docker.com/repository/docker/packtpubkubernetesonwindows/iis-demo/)。任何有权访问您的仓库的用户现在都可以使用`docker
    pull <dockerId>/iis-demo`命令来使用您的镜像。
- en: You have successfully pushed your first image to Docker Hub! Now, let's take
    a look at pushing images to custom image registries.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功将第一个镜像推送到Docker Hub！现在，让我们来看看如何将镜像推送到自定义镜像注册表。
- en: Using a custom local registry
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义本地注册表
- en: 'When it comes to choosing storage for your images, you are not limited to using
    the default Docker Hub. In fact, in most cases, when you are running production
    code, you may want to use a locally hosted Docker Registry, which is an open source,
    highly scalable application for storing and distributing Docker images. You should
    consider this solution in the following situations:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择图像存储时，您不仅限于使用默认的Docker Hub。实际上，在大多数情况下，当您运行生产代码时，您可能希望使用本地托管的Docker Registry，这是一个用于存储和分发Docker镜像的开源、高度可扩展的应用程序。您应该在以下情况下考虑这个解决方案：
- en: You want to distribute Docker images in an isolated network
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您希望在隔离网络中分发Docker镜像
- en: You need strict control where the images are stored and distributed
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要严格控制图像存储和分发的位置
- en: You would like to compliment your CI/CD workflow to enable faster and more scalable
    delivery of images
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您希望补充您的CI/CD工作流程，以实现更快速和更可扩展的图像交付。
- en: Detailed information about the deployment of Docker Registry can be found in
    the official documentation: [https://docs.docker.com/registry/deploying/](https://docs.docker.com/registry/deploying/).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 有关部署Docker注册表的详细信息可以在官方文档中找到：[https://docs.docker.com/registry/deploying/](https://docs.docker.com/registry/deploying/)。
- en: For Kubernetes deployments, it is a common practice to host your own Docker
    Registry alongside or even inside the Kubernetes cluster. There are numerous automations
    available for this use case, for example, the official Helm chart for the deployment
    of registries on Kubernetes: [https://github.com/helm/charts/tree/master/stable/docker-registry](https://github.com/helm/charts/tree/master/stable/docker-registry).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Kubernetes部署，通常的做法是在Kubernetes集群旁边甚至内部托管自己的Docker注册表。有许多自动化可用于此用例，例如，用于在Kubernetes上部署注册表的官方Helm图表：[https://github.com/helm/charts/tree/master/stable/docker-registry](https://github.com/helm/charts/tree/master/stable/docker-registry)。
- en: In order to use a custom image registry, all you need to do is specify the registry
    address (and port, if needed) in the image name when using pull or push commands,
    for example, `localregistry:5000/ptylenda/test-application:1.0.0`, where `localregistry:5000`
    is the domain name and port of a locally hosted Docker registry. In fact, you
    have already used a custom Docker image registry when you pulled images for your
    demonstration Windows IIS application: `mcr.microsoft.com/windows/servercore/iis:windowsservercore-1903`.
    The `mcr.microsoft.com` registry is the MCR, which is the official registry for
    Microsoft Published images. The main difference between other public registries
    and MCR is that it is tightly integrated with Docker Hub and leverages its UI
    for providing a browsable catalog of images. Docker Engine is capable of using
    any system that exposes the Docker Registry HTTP API ([https://docs.docker.com/registry/spec/api/](https://docs.docker.com/registry/spec/api/))
    as a container image registry.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用自定义镜像注册表，您只需要在使用pull或push命令时在镜像名称中指定注册表地址（如果需要，还需要端口），例如，`localregistry:5000/ptylenda/test-application:1.0.0`，其中`localregistry:5000`是本地托管的Docker注册表的域名和端口。实际上，当您为演示Windows
    IIS应用程序拉取图像时，您已经使用了自定义Docker镜像注册表：`mcr.microsoft.com/windows/servercore/iis:windowsservercore-1903`。`mcr.microsoft.com`注册表是MCR，是Microsoft发布图像的官方注册表。其他公共注册表和MCR之间的主要区别在于，它与Docker
    Hub紧密集成，并利用其UI提供可浏览的图像目录。Docker引擎能够使用任何公开Docker注册表HTTP API（[https://docs.docker.com/registry/spec/api/](https://docs.docker.com/registry/spec/api/)）的系统作为容器镜像注册表。
- en: Currently, it is not possible to change the default container image registry
    for Docker Engine. Unless you specify the registry address in the image name,
    the target registry will always be assumed to be `docker.io`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，不可能更改Docker引擎的默认容器镜像注册表。除非在镜像名称中指定注册表地址，否则目标注册表将始终假定为`docker.io`。
- en: 'Apart from hosting your own local image registry, there are a couple of cloud-based
    alternatives that provide private image registries:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 除了托管自己的本地镜像注册表外，还有一些基于云的替代方案提供私有镜像注册表：
- en: '**Azure Container Registry** (**ACR**) [https://azure.microsoft.com/en-in/services/container-registry/](https://azure.microsoft.com/en-in/services/container-registry/)).
    We will cover this registry in the next section as part of a demonstration of
    how to use cloud hosting for container builds.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure容器注册表**（**ACR**）[https://azure.microsoft.com/en-in/services/container-registry/](https://azure.microsoft.com/en-in/services/container-registry/)）。我们将在下一节中介绍这个注册表，作为如何使用云托管进行容器构建的演示的一部分。'
- en: Docker Enterprise and its Docker Trusted Registry ([https://www.docker.com/products/image-registry](https://www.docker.com/products/image-registry)).
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Enterprise及其Docker Trusted Registry（[https://www.docker.com/products/image-registry](https://www.docker.com/products/image-registry)）。
- en: IBM Cloud Container Registry ([https://www.ibm.com/cloud/container-registry](https://www.ibm.com/cloud/container-registry)).
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IBM Cloud容器注册表（[https://www.ibm.com/cloud/container-registry](https://www.ibm.com/cloud/container-registry)）。
- en: Google Cloud Container Registry ([https://cloud.google.com/container-registry/](https://cloud.google.com/container-registry/)[).](https://cloud.google.com/container-registry/)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud容器注册表（[https://cloud.google.com/container-registry/](https://cloud.google.com/container-registry/)）。
- en: RedHat Quay.io and Quay Enterprise ([https://quay.io](https://quay.io)). Quay
    is an interesting solution if you would like to host not only the registry but
    also the build automation and web catalog on-premises, similar to Docker Hub.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RedHat Quay.io和Quay Enterprise（[https://quay.io](https://quay.io)）。如果您希望在本地托管注册表以及构建自动化和Web目录，Quay是一个有趣的解决方案，类似于Docker
    Hub。
- en: In the next section, you will learn how to use Docker Hub to automate Docker
    image builds and how to host your own registry using ACR.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何使用Docker Hub自动化Docker镜像构建，以及如何使用ACR托管自己的注册表。
- en: Using cloud container builders
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用云容器构建器
- en: One of the features that Docker Hub offers is **automated builds** (**autobuilds**).
    This is especially useful in Continuous Integration and Continuous Deployment
    scenarios where you would like to ensure that each push to your code repository
    results in a build, a publish, and potentially a deployment.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub提供的一个功能是**自动构建**（**自动构建**）。这在持续集成和持续部署场景中特别有用，您希望确保对代码存储库的每次推送都会导致构建、发布和可能的部署。
- en: Currently, Docker Hub does not support Windows images, but this is likely to
    change in the near future. We will demonstrate this usage on a Linux image, but
    all the principles remain the same. For Windows container cloud builds, check
    out the next section about Azure Container Registry.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Docker Hub不支持Windows镜像，但这很可能会在不久的将来发生变化。我们将在Linux镜像上演示此用法，但所有原则仍然相同。有关Windows容器云构建，请查看下一节关于Azure容器注册表。
- en: 'To set up automated builds, complete the following steps:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置自动构建，请完成以下步骤：
- en: Create a GitHub repository where your application code resides, together with
    a Dockerfile that defines the Docker image for the application.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个GitHub存储库，其中包含您的应用程序代码，以及定义应用程序的Docker镜像的Dockerfile。
- en: Create a Docker Hub repository and add an autobuild trigger. This trigger can
    also be added after creating the repository.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Docker Hub存储库并添加一个自动构建触发器。此触发器也可以在创建存储库后添加。
- en: Customize the build rules.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自定义构建规则。
- en: Optionally, enable autotests. This is a validation feature provided by Docker
    Hub where you can define your test suite in order to test each new image push.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，启用自动测试。这是Docker Hub提供的验证功能，您可以在其中定义测试套件，以便测试每个新的镜像推送。
- en: Let's begin by creating a GitHub repository!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建一个GitHub存储库！
- en: Creating a GitHub repository
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建GitHub存储库
- en: 'If you don''t have a GitHub account, you can create one for free at [https://github.com/join](https://github.com/join).
    In this example, we will create a dedicated public repository called `nginx-demo-index`
    in the `hands-on-kubernetes-on-windows` organization. Let''s get started:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有GitHub帐户，可以免费创建一个帐户[https://github.com/join](https://github.com/join)。在本例中，我们将在`hands-on-kubernetes-on-windows`组织中创建一个专用的公共存储库，名为`nginx-demo-index`。让我们开始吧：
- en: 'Navigate to [https://github.com/](https://github.com/) and use the *+* sign
    to create a new repository:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到[https://github.com/](https://github.com/)，使用*+*符号创建一个新存储库：
- en: '![](assets/fcf0245d-dd47-4e5f-a565-c58b2d83161a.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fcf0245d-dd47-4e5f-a565-c58b2d83161a.png)'
- en: Hosting an organization is not required; you can just use your own personal
    namespace. The repository is intended to only contain the application source code
    (in our case, just a static `index.html` web page) and the Dockerfile that's required
    to build the image, which aligns with the suggested best practices for Docker
    development.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 托管组织并非必需；您可以只使用自己的个人命名空间。该仓库旨在仅包含应用程序源代码（在我们的情况下，只是一个静态的`index.html`网页）和构建图像所需的Dockerfile，这与Docker开发的建议最佳实践一致。
- en: After you have created the repository, we can push some source code for the
    image. You can find the source code for our minimalistic Docker image for hosting
    a static web page using nginx in this book's GitHub repository: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03/02_nginx-demo-index](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03/02_nginx-demo-index).
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建了仓库之后，我们可以推送一些图像的源代码。您可以在本书的GitHub仓库中找到我们用于托管使用nginx的静态网页的最简化Docker图像的源代码：[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03/02_nginx-demo-index](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03/02_nginx-demo-index)。
- en: 'In order to clone the newly created repository, in PowerShell, navigate to
    the directory where you would like to have the repository and use the `git clone`
    command:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了克隆新创建的仓库，在PowerShell中，转到您想要拥有该仓库的目录并使用`git clone`命令：
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Copy all the required source files to the repository and perform a push using
    the `git push` command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有必需的源文件复制到仓库中，并使用`git push`命令进行推送：
- en: '[PRE5]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'At this point, you should be able to see the files in the repository when you
    navigate to GitHub web page, for example, [https://github.com/hands-on-kubernetes-on-windows/nginx-demo-index](https://github.com/hands-on-kubernetes-on-windows/nginx-demo-index):'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，当您转到GitHub网页时，例如[https://github.com/hands-on-kubernetes-on-windows/nginx-demo-index](https://github.com/hands-on-kubernetes-on-windows/nginx-demo-index)，您应该能够看到仓库中的文件：
- en: '![](assets/1670f0cc-d298-40ca-af47-8ed0a4bab5cc.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1670f0cc-d298-40ca-af47-8ed0a4bab5cc.png)'
- en: The next step is to create the actual Docker Hub repository and configure autobuild.
    Let's proceed!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建实际的Docker Hub仓库并配置自动构建。让我们开始吧！
- en: Creating a Docker Hub repository with autobuild
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建具有自动构建的Docker Hub仓库
- en: 'Integrating a Docker Hub repository with autobuild requires connecting your
    GitHub account to your Docker Hub account and creating the repository itself.
    Let''s get started:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将Docker Hub仓库与自动构建集成需要将您的GitHub帐户连接到您的Docker Hub帐户并创建仓库本身。让我们开始吧：
- en: 'Open [https://hub.docker.com/](https://hub.docker.com/) and navigate to Account
    Settings. In the Linked Accounts section, click Connect for GitHub provider:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开[https://hub.docker.com/](https://hub.docker.com/)，转到帐户设置。在已连接帐户部分，单击GitHub提供程序的连接：
- en: '![](assets/26d3b045-45d7-43a1-8c3a-9297dcd220f0.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/26d3b045-45d7-43a1-8c3a-9297dcd220f0.png)'
- en: Authorize Docker Hub Builder to access your repositories. At this point, if
    you need to, you can also grant access to any organization.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 授权Docker Hub Builder访问您的仓库。此时，如果需要，您还可以授予对任何组织的访问权限。
- en: 'After the accounts have been connected, open [https://hub.docker.com/](https://hub.docker.com/) again
    and click the Create Repository section''s *+* button:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接帐户后，再次打开[https://hub.docker.com/](https://hub.docker.com/)，单击创建仓库部分的*+*按钮：
- en: '![](assets/f600ce6d-28b1-4d5b-bee2-372a87a5a500.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f600ce6d-28b1-4d5b-bee2-372a87a5a500.png)'
- en: Fill in all the required details. In our case, the name of our repository will
    be `packtpubkubernetesonwindows/nginx-demo-index`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写所有必需的细节。在我们的情况下，我们的仓库名称将是`packtpubkubernetesonwindows/nginx-demo-index`。
- en: In Build Settings, choose the GitHub icon and select the GitHub repository that
    you have just created, as shown in the preceding screenshot.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建设置中，选择GitHub图标，并选择您刚刚创建的GitHub存储库，如前面的屏幕截图所示。
- en: 'Inspect the build settings by clicking Click here to customize the build settings
    in order to understand what the default configuration is:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击“单击此处自定义构建设置”来检查构建设置，以了解默认配置是什么：
- en: '![](assets/b6f2033b-4472-45fc-9284-c9a8d790f6e2.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b6f2033b-4472-45fc-9284-c9a8d790f6e2.png)'
- en: The default settings are suitable for our image as we would like to trigger
    the build whenever new code is pushed to the master branch. A Dockerfile with
    the name Dockerfile in the root of your GitHub repository should be used for building
    images.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认设置适用于我们的镜像，因为我们希望在将新代码推送到主分支时触发构建。应该在您的GitHub存储库的根目录中使用名为Dockerfile的Dockerfile来构建镜像。
- en: Click Create & Build to save and immediately start a build based on the current
    code in the repository.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“创建和构建”以保存并立即基于存储库中的当前代码开始构建。
- en: 'In Recent Builds, you should see a Pending build of your image:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最近的构建中，您应该看到您的镜像的一个挂起构建：
- en: '![](assets/41d65d6b-3606-4f04-8e68-7201701450f4.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/41d65d6b-3606-4f04-8e68-7201701450f4.png)'
- en: After a few minutes, the build should finish and the `packtpubkubernetesonwindows/nginx-demo-index:latest`
    image should be available. You can verify this by pulling the image using the `docker
    pull packtpubkubernetesonwindows/nginx-demo-index:latest` command.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几分钟后，构建应该完成，`packtpubkubernetesonwindows/nginx-demo-index:latest`镜像应该可用。您可以通过使用`docker
    pull packtpubkubernetesonwindows/nginx-demo-index:latest`命令来验证这一点。
- en: Now, let's take a look at how to easily trigger Docker image builds with a new
    code commit.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何通过提交新代码轻松触发Docker镜像构建。
- en: Triggering the Docker Hub autobuild
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发Docker Hub自动构建
- en: 'With the autobuild setup created in the previous section, triggering a new
    Docker image build is as simple as committing new code to your GitHub repository.
    In order to do that, you have to do the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在上一节创建的自动构建设置中，触发新的Docker镜像构建就像提交新代码到您的GitHub存储库一样简单。为了做到这一点，您必须执行以下操作：
- en: 'Introduce a change to the source code for the image on GitHub; for example,
    modify the `index.html` file:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对GitHub上镜像的源代码进行更改；例如，修改`index.html`文件：
- en: '[PRE6]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Commit and push the code change:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交并推送代码更改：
- en: '[PRE7]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the Builds tab for this image repository on Docker Hub, you should almost
    immediately see that a new image build has been triggered (source commit: [https://github.com/hands-on-kubernetes-on-windows/nginx-demo-index/tree/5ee600041912cdba3c82da5331542f48701f0f28](https://github.com/hands-on-kubernetes-on-windows/nginx-demo-index/tree/5ee600041912cdba3c82da5331542f48701f0f28)):'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Docker Hub上的此镜像存储库的构建选项卡中，您几乎立即应该看到已触发新的镜像构建（源提交：[https://github.com/hands-on-kubernetes-on-windows/nginx-demo-index/tree/5ee600041912cdba3c82da5331542f48701f0f28](https://github.com/hands-on-kubernetes-on-windows/nginx-demo-index/tree/5ee600041912cdba3c82da5331542f48701f0f28)）：
- en: '![](assets/b5e4b8e7-dfa9-426c-ba4a-81a4795a8514.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b5e4b8e7-dfa9-426c-ba4a-81a4795a8514.png)'
- en: If your build fails, you can always inspect the Docker build logs in the build
    details and Build logs tab.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的构建失败，您可以随时检查构建详细信息和构建日志选项卡中的Docker构建日志。
- en: 'After the build succeeds, verify your image by running a new container on your
    Windows machine:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建成功后，在您的Windows机器上运行一个新容器来验证您的镜像：
- en: '[PRE8]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The image will be automatically pulled from the Docker Hub repository. Navigate
    to `http://localhost:8080` in your web browser. You should see the following output:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 镜像将自动从Docker Hub存储库中拉取。在您的网络浏览器中导航至`http://localhost:8080`。您应该看到以下输出：
- en: '![](assets/1fdd74ee-dd50-4340-99f3-d08b0c09d6b0.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1fdd74ee-dd50-4340-99f3-d08b0c09d6b0.png)'
- en: Congratulations – you have successfully created and triggered a Docker image
    autobuild on Docker Hub! In the next section, you will learn how to create a similar
    setup for Windows-based images using Azure Container Registry.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜-您已成功创建并触发了Docker Hub上的Docker镜像自动构建！在下一节中，您将学习如何为基于Windows的图像使用Azure容器注册表创建类似的设置。
- en: Creating Azure Container Registry
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Azure容器注册表
- en: '**Azure Container Registry** (**ACR**) is a fully managed private Docker registry
    provided by Azure Cloud. In this section, we will create a new instance of ACR
    using the Azure CLI. You will learn how to achieve similar build automation as
    provided by Docker Hub but with the possibility of building Windows images and
    using a private registry.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure容器注册表**（**ACR**）是Azure Cloud提供的完全托管的私有Docker注册表。在本节中，我们将使用Azure CLI创建ACR的新实例。您将学习如何实现与Docker
    Hub提供的类似的构建自动化，但具有构建Windows图像和使用私有注册表的可能性。'
- en: You can find detailed installation instructions for the Azure CLI in [Chapter
    2](43d5e48b-311c-462c-a68e-6a0b5c4224e8.xhtml)*, Managing State in Containers*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[第2章](43d5e48b-311c-462c-a68e-6a0b5c4224e8.xhtml)*，*管理容器中的状态*中找到Azure CLI的详细安装说明。
- en: 'To create an Azure Container Registry instance, follow these steps:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建Azure容器注册表实例，请按照以下步骤进行：
- en: 'Ensure that you are logged in to the Azure CLI by using the `az login` command
    in PowerShell. Proceed by creating a dedicated resource group for your ACR instance.
    In this example, we will use the `acr-resource-group` resource group and `westeurope`
    as the Azure location:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已经使用PowerShell中的`az login`命令登录到Azure CLI。然后为ACR实例创建一个专用资源组。在本例中，我们将使用`acr-resource-group`资源组和`westeurope`作为Azure位置：
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can also use the PowerShell script available in this book's GitHub repository: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter03/03_CreateAzureContainerRegistry.ps1](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter03/03_CreateAzureContainerRegistry.ps1).
    Remember to provide a globally unique ACR name in order to be able to create the
    instance.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用本书GitHub存储库中提供的PowerShell脚本：[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter03/03_CreateAzureContainerRegistry.ps1](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter03/03_CreateAzureContainerRegistry.ps1)。请记住提供全局唯一的ACR名称，以便能够创建实例。
- en: 'Next, create a basic-tier ACR instance with a globally unique name (for demonstration
    purposes, we have provided `handsonkubernetesonwinregistry`, but you have to provide
    your own unique name as it will be a part of the registry''s DNS name):'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用全局唯一名称创建基本层ACR实例（为演示目的，我们提供了`handsonkubernetesonwinregistry`，但您必须提供自己的唯一名称，因为它将成为注册表的DNS名称的一部分）：
- en: '[PRE10]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you are interested in other service tiers of Azure Container Registry, please
    refer to the official documentation: [https://docs.microsoft.com/en-us/azure/container-registry/container-registry-skus](https://docs.microsoft.com/en-us/azure/container-registry/container-registry-skus).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对Azure容器注册表的其他服务层感兴趣，请参考官方文档：[https://docs.microsoft.com/en-us/azure/container-registry/container-registry-skus](https://docs.microsoft.com/en-us/azure/container-registry/container-registry-skus)。
- en: 'You will be provided with detailed information regarding your newly created
    registry:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得有关新创建的注册表的详细信息：
- en: '[PRE11]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The most important information is `"loginServer": "handsonkubernetesonwinregistry.azurecr.io"`,
    which will be used for pushing and pulling Docker images.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '最重要的信息是`"loginServer": "handsonkubernetesonwinregistry.azurecr.io"`，这将用于推送和拉取Docker镜像。'
- en: 'Finally, the last step is to log in to the registry so that you can use the
    registry in the Docker CLI:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，最后一步是登录到注册表，这样您就可以在Docker CLI中使用注册表：
- en: '[PRE12]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With ACR set up, we are ready to build a Docker image using ACR in the cloud
    environment.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有了ACR设置，我们准备在云环境中使用ACR构建Docker镜像。
- en: Building a Docker image using Azure Container Registry
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure容器注册表构建Docker镜像
- en: 'For demonstration purposes, we will use a simple Windows IIS image that hosts
    a static HTML web page. You can find the Docker image source in this book''s GitHub
    repository: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03/04_iis-demo-index](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03/04_iis-demo-index).
    To build the image in ACR, follow these steps:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示目的，我们将使用一个简单的Windows IIS映像，用于托管静态HTML网页。您可以在本书的GitHub存储库中找到Docker映像源：[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03/04_iis-demo-index](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03/04_iis-demo-index)。要在ACR中构建映像，请按照以下步骤进行：
- en: Clone the repository with the image source code and navigate to the `Chapter03/04_iis-demo-index`
    directory in PowerShell.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用图像源代码克隆存储库，并在PowerShell中导航至`Chapter03/04_iis-demo-index`目录。
- en: 'Execute the `az acr build` command in order to begin the Docker image build
    in the cloud environment (remember to provide the Docker build context directory,
    which in this example is denoted by the *dot* for the current directory):'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`az acr build`命令以在云环境中开始Docker镜像构建（记得提供Docker构建上下文目录，在本例中用*dot*表示当前目录）：
- en: '[PRE13]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `az acr build` command starts an ACR quick task. This uploads the Docker
    build context to the cloud and runs the build process remotely. After a few minutes,
    the build process should finish. You can expect output similar to the local `docker
    build` command.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`az acr build`命令启动ACR快速任务。这将上传Docker构建上下文到云端，并在远程运行构建过程。几分钟后，构建过程应该完成。您可以期望类似于本地`docker
    build`命令的输出。
- en: 'Now, you can verify the image by running a container on your local machine
    and pulling the image from ACR. You need to use the full DNS name for the registry
    (in this example, this is `handsonkubernetesonwinregistry.azurecr.io`):'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以通过在本地机器上运行容器并从ACR中拉取映像来验证映像。您需要使用注册表的完整DNS名称（在本例中，这是`handsonkubernetesonwinregistry.azurecr.io`）：
- en: '[PRE14]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Navigate to `http://localhost:8080` in a web browser and verify that the container
    is running as expected:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web浏览器中导航至`http://localhost:8080`，并验证容器是否按预期运行：
- en: '![](assets/eef79d64-be77-413c-a3c0-d383ae9b2c21.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eef79d64-be77-413c-a3c0-d383ae9b2c21.png)'
- en: You have successfully executed your ACR build quick task! Now, we can start
    automating the ACR build trigger for a GitHub repository code push in a similar
    fashion to how we would using Docker Hub.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功执行了ACR构建快速任务！现在，我们可以开始自动化ACR构建触发器，以类似于使用Docker Hub的方式对GitHub存储库代码推送进行操作。
- en: Automatic builds for Azure Container Registry
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure容器注册表的自动构建
- en: Azure Container Registry offers similar functionality to Docker Hub for the
    automation of Docker image builds on code push. The pipeline is highly customizable
    and can support building multiple container images at once, but in this example,
    we will focus on automating a single image build on the GitHub repository code
    push.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Azure容器注册表提供了类似于Docker Hub的功能，用于在代码推送时自动化Docker镜像构建。管道是高度可定制的，可以支持同时构建多个容器映像，但在本例中，我们将专注于在GitHub存储库代码推送时自动化单个映像构建。
- en: 'For more advanced multi-step and multi-container scenarios, check out the official
    documentation: [https://docs.microsoft.com/en-us/azure/container-registry/container-registry-tutorial-multistep-task](https://docs.microsoft.com/en-us/azure/container-registry/container-registry-tutorial-multistep-task).'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更高级的多步骤和多容器场景，请查看官方文档：[https://docs.microsoft.com/en-us/azure/container-registry/container-registry-tutorial-multistep-task](https://docs.microsoft.com/en-us/azure/container-registry/container-registry-tutorial-multistep-task)。
- en: 'Integrating ACR and GitHub can be performed as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 集成ACR和GitHub可以按以下步骤执行：
- en: Create a new GitHub repository and push the Docker image source code. In this
    example, we will use source code from [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03/04_iis-demo-index](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03/04_iis-demo-index),
    which will be pushed to a new GitHub repository, that is, [https://github.com/hands-on-kubernetes-on-windows/iis-demo-index](https://github.com/hands-on-kubernetes-on-windows/iis-demo-index).
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的GitHub存储库并推送Docker镜像源代码。在这个例子中，我们将使用来自[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03/04_iis-demo-index](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter03/04_iis-demo-index)的源代码，它将被推送到一个新的GitHub存储库，即[https://github.com/hands-on-kubernetes-on-windows/iis-demo-index](https://github.com/hands-on-kubernetes-on-windows/iis-demo-index)。
- en: Generate a GitHub **Personal Access Token** (**PAT**) in order to access the
    repository in ACR. Navigate to [https://github.com/settings/tokens/new](https://github.com/settings/tokens/new).
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成GitHub **个人访问令牌**（**PAT**）以便在ACR中访问存储库。转到[https://github.com/settings/tokens/new](https://github.com/settings/tokens/new)。
- en: 'Enter a PAT description and choose the repo:status and public_repo scopes (for
    private repositories, you need to use a full repo scope):'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入PAT描述并选择repo:status和public_repo范围（对于私有存储库，您需要使用完整的repo范围）：
- en: '![](assets/972e23d8-a90d-4160-b5e2-08abf11d5f1f.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/972e23d8-a90d-4160-b5e2-08abf11d5f1f.png)
- en: Click the Generate token button.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“生成令牌”按钮。
- en: You will be provided with a PAT value. Copy the token to a secure location as
    you will need it to set up integration.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将获得一个PAT值。将令牌复制到安全位置，因为您将需要它来设置集成。
- en: 'Now, let''s create an ACR task called `iis-demo-index-task`. This will be triggered
    automatically when code is pushed to [https://github.com/hands-on-kubernetes-on-windows/iis-demo-index](https://github.com/hands-on-kubernetes-on-windows/iis-demo-index).
    The required parameters are similar to the build configuration for Docker Hub:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个名为“iis-demo-index-task”的ACR任务。当代码被推送到[https://github.com/hands-on-kubernetes-on-windows/iis-demo-index](https://github.com/hands-on-kubernetes-on-windows/iis-demo-index)时，这将自动触发。所需的参数类似于Docker
    Hub的构建配置：
- en: '[PRE15]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you run into an `az acr task create: ''utputformat'' is not a valid value
    for ''--output''. See ''az acr task create --help''.` error being returned by
    the Azure CLI, ensure that you are escaping/quoting curly brackets for PowerShell
    properly.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '如果您在使用Azure CLI时遇到“az acr task create: ''utputformat'' is not a valid value
    for ''--output''. See ''az acr task create --help''.”的错误，请确保您正确地转义/引用PowerShell中的花括号。'
- en: 'Test your ACR task definition using the `az acr task run` command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用“az acr task run”命令测试您的ACR任务定义：
- en: '[PRE16]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the source code for your Docker image, introduce a change and commit and
    push it to the GitHub repository. For example, modify the static text so that
    it reads as follows:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Docker镜像的源代码中，引入一个更改并提交并将其推送到GitHub存储库。例如，修改静态文本，使其读取如下：
- en: '[PRE17]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Retrieve the ACR task logs to verify that the task was indeed triggered:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检索ACR任务日志以验证任务是否确实被触发：
- en: '[PRE18]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You should see an output similar to the following, which indicates that a new
    task instance was triggered by the push:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似以下的输出，这表明推送触发了一个新的任务实例：
- en: '![](assets/ba48c49b-f339-4610-907d-fd4037c0eb77.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: ！[](assets/ba48c49b-f339-4610-907d-fd4037c0eb77.png)
- en: 'When the task is finished, pull the image tagged with Run ID (in this case,
    this is cb5). You can also use the `latest` tag, but this requires removing a
    locally cached image using the `docker rmi` command:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务完成后，拉取带有Run ID标记的镜像（在本例中，这是cb5）。您也可以使用“latest”标记，但这需要使用“docker rmi”命令删除本地缓存的镜像：
- en: '[PRE19]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a new container using the `handsonkubernetesonwinregistry.azurecr.io/iis-demo-index:cb5`
    image:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用“handsonkubernetesonwinregistry.azurecr.io/iis-demo-index:cb5”镜像创建一个新的容器：
- en: '[PRE20]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Navigate to `http://localhost:8080` in a web browser and verify that the container
    is running as expected. Also, verify that the static HTML page contains changes
    that were introduced in the code push:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Web浏览器中导航至`http://localhost:8080`，并验证容器是否按预期运行。还要验证静态HTML页面是否包含代码推送中引入的更改：
- en: '![](assets/bb195a4c-6ff0-4d10-b036-7af9ff898fbf.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bb195a4c-6ff0-4d10-b036-7af9ff898fbf.png)'
- en: Other cloud service providers have similar offerings for setting up Docker image
    registries and build pipelines. If you are interested in Google Cloud Platform
    services, please check out GCP Cloud Build: [https://cloud.google.com/cloud-build/docs/quickstart-docker](https://cloud.google.com/cloud-build/docs/quickstart-docker).
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 其他云服务提供商也提供类似的设置Docker镜像注册表和构建流水线的服务。如果您对Google Cloud Platform服务感兴趣，请查看GCP Cloud
    Build：[https://cloud.google.com/cloud-build/docs/quickstart-docker](https://cloud.google.com/cloud-build/docs/quickstart-docker)。
- en: You have successfully set up your Docker image build pipeline using GitHub and
    Azure Container Registry – congratulations! Now, we will take a quick look at
    best practices for image tagging and versioning.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功使用GitHub和Azure容器注册表设置了Docker镜像构建流水线 - 祝贺！现在，我们将快速查看图像标记和版本控制的最佳实践。
- en: Image tagging and versioning
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图像标记和版本控制
- en: 'Docker images use tags in order to provide different versions of the same image
    in the repository – each image tag corresponds to a given Docker image ID. Specifying
    tags for Docker images is often performed during an image build, but you can also
    add tags explicitly using the `docker tag` command:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Docker镜像使用标签来提供存储库中相同镜像的不同版本 - 每个镜像标签对应于给定的Docker镜像ID。通常在构建镜像时会指定Docker镜像的标签，但您也可以使用`docker
    tag`命令显式添加标签：
- en: '[PRE21]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In this example, we pulled the `latest` image tag (as it was not specified
    explicitly) of the .NET Core SDK and then tagged the image with the `mydotnetsdk:v1`
    and `mydotnetsdk:v2` tags in the local image cache. Now, it is possible to use
    these tags while performing operations on your local machine, like so:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们拉取了.NET Core SDK的`latest`镜像标签（因为没有明确指定），然后在本地镜像缓存中使用`mydotnetsdk:v1`和`mydotnetsdk:v2`标签标记了该镜像。现在，可以在本地机器上执行操作时使用这些标签，如下所示：
- en: '[PRE22]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Let's take a look at the `latest` tag, which is often used when working with
    Docker.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`latest`标签，在使用Docker时经常使用。
- en: Using the latest tag
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用最新标签
- en: By default, the Docker CLI assumes a special tag called `latest`. This means
    that if you perform the `docker pull applicationimage` command or the `docker
    run -it applicationimage` command, or use `FROM applicationimage` in your Dockerfile,
    the `applicationimage:latest` tag will be used. Similarly, when you execute `docker
    build -t applicationimage .`, the resulting Docker image will be tagged with the `latest`
    tag and each subsequent build will produce a new version of `applicationimage:latest`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker CLI假定一个特殊的标签称为`latest`。这意味着如果您执行`docker pull applicationimage`命令或`docker
    run -it applicationimage`命令，或在Dockerfile中使用`FROM applicationimage`，将使用`applicationimage:latest`标签。同样，当您执行`docker
    build -t applicationimage .`时，生成的Docker镜像将被标记为`latest`标签，并且每次构建都将产生`applicationimage:latest`的新版本。
- en: 'It is important to understand that `latest` behaves just like any other Docker
    image tag. It can be seen as a default value that is always used by Docker whenever
    no tag has been provided by user. This has some consequences that may cause confusion,
    as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解`latest`的行为与任何其他Docker镜像标签一样。它可以被视为Docker在用户未提供标签时始终使用的默认值。这可能会导致一些混淆，具体如下：
- en: During an image build, if you specify your tag for the image, the latest tag
    will not be added. This means that if you push `applicationimage:v1` to the registry,
    it doesn't mean that `applicationimage:latest` will be updated. You have to perform
    it explicitly.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图像构建期间，如果为图像指定了标签，最新标签将不会被添加。这意味着，如果您将`applicationimage:v1`推送到注册表，这并不意味着`applicationimage:latest`将被更新。您必须明确执行。
- en: When the image owner pushes a new Docker image version to the repository and
    it is tagged again with the `latest` tag, this doesn't mean that your locally
    cached image will be updated and used during `docker build`. You have to tell
    the Docker CLI to attempt to pull a newer version of the image by using the `--pull`
    argument for `docker build`.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当图像所有者将新的Docker镜像版本推送到存储库并再次标记为`latest`标签时，并不意味着您本地缓存的图像将在`docker build`期间被更新和使用。您必须告诉Docker
    CLI尝试使用`docker build`的`--pull`参数来拉取图像的更新版本。
- en: Using the `latest` tag for the Dockerfile's `FROM` instruction can lead to different
    images being built in different points in time, which is generally not desirable.
    For example, you may be building your image using the `mcr.microsoft.com/dotnet/core/sdk` image
    at a point in time when `latest` points to version 2.2 of the SDK, but after a
    few months, building the same Dockerfile will result in version 3.0 being used
    as the base.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Dockerfile的`FROM`指令中使用`latest`标签可能导致在不同时间点构建不同的图像，这通常是不可取的。例如，您可能在`latest`指向SDK版本2.2时使用`mcr.microsoft.com/dotnet/core/sdk`图像构建您的图像，但几个月后，使用相同的Dockerfile构建将导致使用版本3.0作为基础。
- en: The general best practice (this is also the same for Kubernetes) is to avoid
    deploying production containers using the `latest` tag and use the `latest` tag
    just for development scenarios and ease of use for your local environment. Similarly,
    to ensure that your Docker images are predictable and self-descriptive, you should
    avoid using base images with the `latest` tag in a Dockerfile – use a specific
    tag instead.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 一般最佳实践（Kubernetes也是如此）是避免使用`latest`标签部署生产容器，并仅在开发场景和本地环境的便利性使用`latest`标签。同样，为了确保您的Docker图像可预测且自描述，应避免在Dockerfile中使用带有`latest`标签的基础图像，而是使用特定的标签。
- en: Semantic versioning
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语义化版本
- en: In order to efficiently manage the versioning and tagging of Docker images,
    you can use** Semantic Versioning** (**Semver**) as a general strategy. This versioning
    scheme is widely adopted among image distributors and helps consumers understand
    how your image evolves.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地管理Docker图像的版本和标记，您可以使用**语义化版本**（**Semver**）作为一般策略。这种版本方案在图像分发商中被广泛采用，并帮助消费者了解您的图像如何演变。
- en: 'Generally, Semver suggests the scheme of using three numbers – major, minor,
    and patch – separated with dots, `<major>.<minor>.<patch>`, where each number
    is incremented as needed. As an example, 2.1.5 means that the major version of
    the image is 2, the minor version is 1, and the patch version is currently 5\.
    The meaning of these release numbers and incrementation rules are similar to what
    you would expect for versioning non-containerized applications:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，语义版本建议使用三个数字（主要版本、次要版本和修订版本），用点分隔，`<major>.<minor>.<patch>`，根据需要递增每个数字。例如，2.1.5表示图像的主要版本是2，次要版本是1，当前修订版本为5。这些发布数字的含义和递增规则与非容器化应用程序的版本化类似。
- en: '**Major**: Increment if you are introducing features that break compatibility
    or introduce other breaking changes.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主要版本**：如果您引入了破坏兼容性或其他破坏性更改的功能，则递增。'
- en: '**Minor**: Increment if you are introducing features that are fully compatible
    with previous releases. Consumers do not need to upgrade usages of your application.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**次要版本**：如果您引入的功能与先前版本完全兼容，则递增。消费者不需要升级应用程序的用法。'
- en: '**Patch**: Increment if you are publishing bug fixes or patches.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**补丁**：如果要发布错误修复或补丁，则递增。'
- en: More details regarding Semver as a general concept can be found here: [https://semver.org/](https://semver.org/).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Semver作为一般概念的更多细节可以在这里找到：[https://semver.org/](https://semver.org/)。
- en: 'The best practices for using Semver when building/pushing Docker images can
    be summarized as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建/推送Docker图像时使用Semver的最佳实践可以总结如下：
- en: When building a new version of your image, always create a new patch tag (for
    example, 2.1.5).
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建图像的新版本时，始终创建新的**补丁**标签（例如2.1.5）。
- en: Always overwrite existing major and minor tags (for example, 2 and 2.1).
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终覆盖现有的主要和次要标签（例如，2和2.1）。
- en: Never overwrite patch tags. This ensures that image consumers who would like
    to use a specific version of your application can be sure that it does not change
    over time.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要覆盖补丁标签。这确保了希望使用特定版本应用程序的图像使用者可以确保随着时间的推移不会发生变化。
- en: Always overwrite the existing `latest` tag.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终覆盖现有的`latest`标签。
- en: 'The following set of commands shows an example of building and tagging a new
    version of the `applicationimage` Docker image:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 以下一组命令显示了构建和标记新版本`applicationimage` Docker图像的示例：
- en: '[PRE23]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You may also introduce additional tags that add correlation to your build system
    IDs or git commit SHA-1 hash, which was used for the image build.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以引入其他标签，以添加到构建系统ID或用于图像构建的git提交SHA-1哈希的相关性。
- en: Ensuring the integrity of the image supply chain
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保图像供应链的完整性
- en: Providing content trust of the image supply chain is one of the most important,
    but often neglected, topics in managing Docker images. In any distributed system
    that communicates and transfers data over an untrusted medium (such as the internet),
    it is crucial to provide a means of content trust – a way of verifying both the
    source (publisher) and the integrity of data entering the system. For Docker,
    this is especially true for pushing and pulling images (data), which is performed
    by Docker Engine.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 提供图像供应链的内容信任是管理Docker图像中最重要但经常被忽视的主题之一。在任何通过不受信任的媒介（如互联网）进行通信和数据传输的分布式系统中，提供内容信任的手段至关重要，即验证进入系统的数据的来源（发布者）和完整性。对于Docker来说，这对于推送和拉取图像（数据）尤为重要，这是由Docker引擎执行的。
- en: The Docker ecosystem describes the concept of **Docker Content Trust** (**DCT**),
    which provides a means of verifying the digital signatures of data being transferred
    between the Docker Engine and the Docker Registry. This verification allows the
    publishers to sign their images and the consumer (Docker Engine) to verify the
    signatures to ensure the integrity and source of the images.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Docker生态系统描述了**Docker内容信任**（**DCT**）的概念，它提供了一种验证数据数字签名的方法，这些数据在Docker引擎和Docker注册表之间传输。此验证允许发布者对其图像进行签名，并允许消费者（Docker引擎）验证签名，以确保图像的完整性和来源。
- en: In the Docker CLI, it is possible to sign an image using the `docker trust`
    command, which is built on top of Docker Notary. This is a tool that's used for
    publishing and managing trusted collections of content. Signing images requires
    a Docker Registry with an associated Notary server, for example, Docker Hub.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在Docker CLI中，可以使用`docker trust`命令对图像进行签名，该命令构建在Docker Notary之上。这是用于发布和管理受信任内容集合的工具。签署图像需要具有关联的Notary服务器的Docker注册表，例如Docker
    Hub。
- en: To learn more about content trust for a private Azure Container Registry, please
    refer to [https://docs.microsoft.com/en-us/azure/container-registry/container-registry-content-trust](https://docs.microsoft.com/en-us/azure/container-registry/container-registry-content-trust).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关私有Azure容器注册表的内容信任的更多信息，请参阅[https://docs.microsoft.com/en-us/azure/container-registry/container-registry-content-trust](https://docs.microsoft.com/en-us/azure/container-registry/container-registry-content-trust)。
- en: Signing an image
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 签署图像
- en: 'As an example, we will sign one of the Docker images we have built and pushed
    to Docker Hub in this chapter, that is, `packtpubkubernetesonwindows/iis-demo-index`.
    To follow along, you will need to perform the operations on your own image repository, `<dockerId>/iis-demo-index`.
    Signing can be performed with the following steps:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将对本章中已构建并推送到Docker Hub的一个Docker镜像进行签名，即`packtpubkubernetesonwindows/iis-demo-index`。要跟进，请在自己的镜像存储库`<dockerId>/iis-demo-index`上执行操作。签名可以通过以下步骤完成：
- en: 'Generate a delegation key pair. Locally, this can be done using the following
    command:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成委托密钥对。在本地，可以使用以下命令执行：
- en: '[PRE24]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You will be asked for a passphrase for the private key. Choose a safe password
    and continue. The private delegation key will be stored in `~/.docker/trust/private` by
    default (also on Windows) and the public delegation key will be saved in the current
    working directory.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被要求为私钥输入密码。选择一个安全的密码并继续。私人委托密钥将默认存储在`~/.docker/trust/private`中（也在Windows上），公共委托密钥将保存在当前工作目录中。
- en: 'Add the delegation public key to the Notary server (for Docker Hub, it is `notary.docker.io`).
    Loading the key is performed for a particular image repository, which in Notary
    is identified by a **Globally Unique Name** (**GUN**). For Docker Hub, they have
    the form of `docker.io/<dockerId>/<repository>`. Execute the following command:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将委托公钥添加到公证服务器（对于Docker Hub，它是`notary.docker.io`）。加载密钥是针对特定镜像存储库执行的，在Notary中，它由**全局唯一名称**（**GUN**）标识。对于Docker
    Hub，它们的形式为`docker.io/<dockerId>/<repository>`。执行以下命令：
- en: '[PRE25]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: If you are performing the delegation for your repository for the first time,
    you will be automatically asked for initiation using the local Notary canonical
    root key.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您是第一次为存储库执行委托，系统将自动要求使用本地Notary规范根密钥进行初始化。
- en: 'Tag the image so that it has a specific tag that can be signed, like so:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给镜像打上一个特定的标签，以便进行签名，如下所示：
- en: '[PRE26]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Use the private delegation key to sign the new tag and push it to Docker Hub,
    like so:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用私人委托密钥对新标签进行签名并将其推送到Docker Hub，如下所示：
- en: '[PRE27]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Alternatively, this can be performed by `docker push`, providing that you have
    set the `DOCKER_CONTENT_TRUST` environment variable in PowerShell before pushing:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，这可以通过`docker push`执行，前提是您在推送之前在PowerShell中设置了`DOCKER_CONTENT_TRUST`环境变量：
- en: '[PRE28]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, you can inspect the remote trust data for the repository:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以检查存储库的远程信任数据：
- en: '[PRE29]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Next, let's try running a container with DCT enabled on the client side.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们尝试在客户端启用DCT运行容器。
- en: Enabling DCT for the client
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为客户端启用DCT
- en: 'In order to enforce DCT when using the Docker CLI for `push`, `build`, `create`,
    `pull`, and `run`, you have to set the `DOCKER_CONTENT_TRUST` environment variable
    to `1`. By default, DCT is disabled for Docker client. Follow these steps:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在使用Docker CLI进行`push`、`build`、`create`、`pull`和`run`时强制执行DCT，您必须将`DOCKER_CONTENT_TRUST`环境变量设置为`1`。默认情况下，Docker客户端禁用了DCT。按照以下步骤：
- en: 'Set the `DOCKER_CONTENT_TRUST` environment variable in the current PowerShell
    session:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在当前的PowerShell会话中设置`DOCKER_CONTENT_TRUST`环境变量：
- en: '[PRE30]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Run a new container using the signed image that we just created:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用刚刚创建的签名镜像运行一个新容器：
- en: '[PRE31]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You will notice that the container starts without any problem. Now, try creating
    a new container using the `latest` tag, which was not signed:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到容器可以正常启动。现在，尝试使用未签名的`latest`标签创建一个新容器：
- en: '[PRE32]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This short scenario shows how DCT can be used to ensure the integrity and source
    of the image that's used for container creation.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简短的场景展示了如何使用DCT来确保用于容器创建的镜像的完整性和来源。
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how the Docker ecosystem provides an infrastructure
    for storing and sharing container images using Docker Registry. The concepts of
    the image registry and automated cloud builds have been demonstrated using a public
    Docker Hub and a private Azure Container Registry, which you set up from scratch
    using the Azure CLI. You also learned about the best practices for tagging and
    versioning images using the semantic versioning scheme. Finally, you were introduced
    to ensuring image integrity using **Docker Content Trust** (**DCT**).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了Docker生态系统如何提供基础设施来存储和共享容器映像，使用Docker注册表进行演示。使用公共Docker Hub和使用Azure
    CLI从头开始设置的私有Azure容器注册表演示了图像注册表和自动云构建的概念。您还了解了使用语义版本控制方案对图像进行标记和版本控制的最佳实践。最后，您还了解了如何使用**Docker内容信任**（**DCT**）确保图像的完整性。
- en: In the next chapter, we are going to perform our first deep dive into the Kubernetes
    ecosystem in order to understand some key concepts and how they currently fit
    Windows containers support.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入研究Kubernetes生态系统，以了解一些关键概念以及它们目前如何支持Windows容器。
- en: Questions
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is Docker Registry and how does it relate to Docker Hub?
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker注册表是什么，它与Docker Hub有何关系？
- en: What is an image tag?
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是图像标签？
- en: What is the standard image repository naming scheme for Docker Hub?
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker Hub的标准图像存储库命名方案是什么？
- en: What is Azure Container Registry and how does it differ from Docker Hub?
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure容器注册表是什么，它与Docker Hub有何不同？
- en: What is the `latest` tag and when is it recommended to use it?
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是`latest`标签，何时建议使用它？
- en: How can we version (tag) images using semantic versioning?
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用语义版本控制对图像进行版本控制（标记）？
- en: Why would you use Docker Content Trust?
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么要使用Docker内容信任？
- en: You can find the answers to these questions in the *Assessments* section of
    this book.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书的*评估*部分找到这些问题的答案。
- en: Further reading
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information concerning managing Docker container images and image
    registries, please refer to the following Packt books:'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关管理Docker容器映像和映像注册表的更多信息，请参考以下Packt图书：
- en: '*Docker on Windows: From 101 to production with Docker on Windows* ([https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition](https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition))'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Docker on Windows: From 101 to production with Docker on Windows* ([https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition](https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition))'
- en: '*Learn Docker – Fundamentals of Docker 18.x* ([https://www.packtpub.com/networking-and-servers/learn-docker-fundamentals-docker-18x](https://www.packtpub.com/networking-and-servers/learn-docker-fundamentals-docker-18x))'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Learn Docker – Fundamentals of Docker 18.x* ([https://www.packtpub.com/networking-and-servers/learn-docker-fundamentals-docker-18x](https://www.packtpub.com/networking-and-servers/learn-docker-fundamentals-docker-18x))'
- en: 'If you would like to know more about Azure Container Registry and how it fits
    into the Azure ecosystem, take a look at the following Packt book:'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想了解Azure容器注册表及其如何适应Azure生态系统的更多信息，请参考以下Packt图书：
- en: '*Azure for Architects – Second Edition* ([https://www.packtpub.com/virtualization-and-cloud/azure-architects-second-edition](https://www.packtpub.com/virtualization-and-cloud/azure-architects-second-edition))'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Azure for Architects – Second Edition* ([https://www.packtpub.com/virtualization-and-cloud/azure-architects-second-edition](https://www.packtpub.com/virtualization-and-cloud/azure-architects-second-edition))'
- en: You can also refer to the official Docker documentation, which gives a good
    overview of Docker Hub ([https://docs.docker.com/docker-hub/](https://docs.docker.com/docker-hub/))
    and the open source Docker Registry ([https://docs.docker.com/registry/](https://docs.docker.com/registry/)).
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以参考官方的Docker文档，其中对Docker Hub ([https://docs.docker.com/docker-hub/](https://docs.docker.com/docker-hub/))和开源Docker注册表
    ([https://docs.docker.com/registry/](https://docs.docker.com/registry/))进行了很好的概述。
