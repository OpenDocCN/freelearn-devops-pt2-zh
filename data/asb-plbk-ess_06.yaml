- en: Chapter 5. Controlling Execution Flow – Conditionals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。控制执行流程 - 条件
- en: 'Control structures refer to anything and everything that have an effect on
    a program''s execution flow. Control structures are mainly of the following two
    types:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 控制结构指的是对程序执行流程产生影响的任何事物。控制结构主要有以下两种类型：
- en: Conditional
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件
- en: Iterative
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代
- en: At times, we need to execute code conditionally based on a value of a variable,
    type of platform, or even a result of some other command. There are times when
    we also need to iterate multiple objects, such as list hashes or multilevel variables.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要根据变量的值、平台类型或甚至其他某些命令的结果有条件地执行代码。有时我们还需要迭代多个对象，例如列表哈希或多级变量。
- en: Most programming languages and tools use powerful but machine-friendly constructs,
    such as `if else`, `for`, `unless`, `do while`, and so on. However, Ansible stays
    true to its design tenet of being a human-friendly automation language and manages
    to achieve the same with the omnipotent `when` and `with_*` constructs, which
    are closer to the English language. Let's begin to explore how it does so.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数编程语言和工具使用强大但机器友好的构造，例如`if else`、`for`、`unless`、`do while`等等。然而，Ansible忠实于其设计原则，成为一种人类友好的自动化语言，并且通过万能的`when`和`with_*`构造实现了相同的功能，这些构造更接近英语。让我们开始探索它是如何做到这一点的。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using conditional controls with the `when` statements
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`when`语句进行条件控制
- en: Using variables and facts to skip subroutines
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用变量和事实跳过子例程
- en: Applying roles selectively
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有选择地应用角色
- en: The conditional control structures in Jinja2 templates
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jinja2模板中的条件控制结构
- en: The conditional control structure
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件控制结构
- en: 'Conditional control structures allow Ansible to follow an alternate path, skip
    a task, or select a specific file to import based on certain conditions. In a
    generic programming language, this is done with the help of `if-then`, `else if`,
    `else`, `case` statements. Ansible does this using the "`when`" statement. Some
    example conditions are:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 条件控制结构允许Ansible根据某些条件选择替代路径、跳过任务或选择要导入的特定文件。在通用编程语言中，使用`if-then`、`else if`、`else`、`case`语句来完成此操作。Ansible使用"`when`"语句。一些示例条件包括：
- en: Whether a certain variable is defined
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否定义了某个变量
- en: Whether an earlier command sequence is successful
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较早的命令序列是否成功
- en: Whether the task has run before
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务是否已经运行过
- en: Whether a platform on a target node matches the supported platforms
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标节点上的平台是否与支持的平台匹配
- en: Whether a certain file exists
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 某个文件是否存在
- en: The when statements
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: when语句
- en: 'We have already used the `when` statement to extract the WordPress archive
    based on the result of another command, which is:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了`when`语句来根据另一个命令的结果提取WordPress存档，即：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This would be vaguely equivalent to writing a shell snippet, as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这与编写shell片段大致相当，如下所示：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In addition to checking the preceding code, we could simply write conditions
    based on the result of the task itself, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了检查前面的代码，我们还可以根据任务本身的结果简单地编写条件，如下所示：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For the failed statement to work, we need to add the `ignore_errors: True`
    statement to the earlier task that registers the variable. The following flowchart
    depicts the same logic:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '为了使失败的语句起作用，我们需要在注册变量的早期任务中添加`ignore_errors: True`语句。以下流程图描述了相同的逻辑：'
- en: '![The when statements](img/B03800_05_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![when语句](img/B03800_05_01.jpg)'
- en: Fact-based selection
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于事实的选择
- en: 'Facts are a good source of information to detect platform-specific information
    and make a choice based on it, especially when you have hybrid environments. Based
    on this selection, we could:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 事实是检测平台特定信息并基于此进行选择的良好信息来源，尤其是在存在混合环境时。基于这个选择，我们可以：
- en: Decide whether to execute a task
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定是否执行任务
- en: Decide whether to include a task file
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定是否包含任务文件
- en: Decide whether to import a file
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定是否导入文件
- en: Decide whether to apply a role on the target node
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定是否在目标节点上应用角色
- en: 'We have already used fact-based selection while writing MySQL, where we used
    the fact `ansible_os_family` to:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写MySQL时，我们已经使用了基于事实的选择，其中我们使用了事实`ansible_os_family`来：
- en: Import the `vars` file for non-Debian-based systems.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为非Debian系统导入`vars`文件。
- en: Include platform-specific tasks for package installation.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为包安装包含特定于平台的任务。
- en: 'The following code snippet shows both the use cases:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段显示了两个用例：
- en: '![Fact-based selection](img/B03800_05_02.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![基于事实的选择](img/B03800_05_02.jpg)'
- en: Refactoring the MySQL role
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构 MySQL 角色
- en: Our existing MySQL role installs and configures only the server. More often
    than not, all we need to do is just install the MySQL client package and not the
    server. We don't have the ability to selectively do so.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现有的 MySQL 角色只安装和配置服务器。往往我们只需要安装 MySQL 客户端包而不是服务器。我们没有能力有选择地这样做。
- en: Note
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**The scenario:**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**情景：**'
- en: We have been tasked to refactor the MySQL role and make it conditionally install
    the MySQL server based on a variable value. By default, it should just install
    MySQL client packages.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们被要求重构 MySQL 角色，并根据变量值有条件地安装 MySQL 服务器。默认情况下，它应该只安装 MySQL 客户端包。
- en: Boolean variables could be useful to set up an an on/off switch. We will add
    a variable and set its default value to `false`. This time, we will create a multilevel
    variable or a nested hash.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔变量可以用来设置一个开关，我们将添加一个变量，并将其默认值设为`false`。这一次，我们将创建一个多级变量或嵌套哈希。
- en: Multilevel variable dictionaries
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多级变量字典
- en: 'So far, we have been naming variables as `mysql_bind`, `mysql_port`, and so
    on and using an underscore to categorize them. Variables can instead be better
    categorized and organized if you define them with multiple-level dictionaries,
    for example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直将变量命名为`mysql_bind`、`mysql_port`等，并使用下划线对它们进行分类。如果您使用多级字典定义它们，那么变量可以更好地分类和组织，例如：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Multilevel variables can then be accessed inside the code as `mysql[''config][''bind'']`
    or `mysql[''config][''port'']`. Let''s now update the `roles/mysql/defaults/main.yml`
    file to use multilevel variables and also create a new Boolean variable `mysql.server`,
    which acts as a flag:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以在代码中以`mysql['config]['bind']`或`mysql['config]['port']`的方式访问多级变量。现在让我们更新`roles/mysql/defaults/main.yml`文件以使用多级变量，并创建一个名为`mysql.server`的新布尔变量，它充当标志：
- en: '![Multilevel variable dictionaries](img/B03800_05_03.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![多级变量字典](img/B03800_05_03.jpg)'
- en: Additionally, we would have to update files in the `vars` directory in the `mysql`
    role to define the variables with a new style, all tasks, handlers, and templates
    to reference them appropriately. This process is added as part of the text to
    avoid redundancy.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们还需要更新`mysql`角色中`vars`目录中的文件，以使用新风格定义变量，以及更新所有任务、处理程序和模板以适当地引用它们。这一过程作为文本的一部分添加，以避免冗余。
- en: Merging hashes
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合并哈希
- en: Multilevel variables or, in essence, dictionaries defined from different locations
    may need to be merged. For example, if we define default configuration parameters
    in the role `default` and then override a few from the `vars` directory in the
    role, the resultant variable `hash` should contain items from the **defaults**
    plus overridden values from **vars**.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 多级变量或本质上来说，从不同位置定义的字典可能需要被合并。例如，如果我们在角色`default`中定义默认配置参数，然后在角色的`vars`目录中覆盖了一些参数，那么结果变量`hash`应包含**defaults**中的项以及**vars**中覆盖的值。
- en: 'Let''s take a look at the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看下面的屏幕截图：
- en: '![Merging hashes](img/B03800_05_04.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![合并哈希](img/B03800_05_04.jpg)'
- en: 'However, by default, Ansible will replace the dictionary, and in the preceding
    example, instead of getting a merged dictionary, we would lose the user and port
    `vars` as `vars` in the role has higher precedence. This can be avoided by setting
    the `hash_behavior` parameter to `merge` instead of `replace`, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，默认情况下，Ansible 将替换字典，在上面的示例中，我们不会得到一个合并的字典，而是会失去用户和端口`vars`，因为角色中的`vars`具有更高的优先级。这可以通过将`hash_behavior`参数设置为`merge`而不是`replace`来避免，如下所示：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This should be set on the Ansible control host and does not require us to restart
    any service.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该在 Ansible 控制主机上设置，不需要我们重新启动任何服务。
- en: Configuring the MySQL server selectively
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有选择性地配置 MySQL 服务器
- en: 'After refactoring the code and adding a flag controlled by a variable, we are
    ready to selectively configure the MySQL server. We have the `mysql.server` variable,
    which takes the Boolean value of `True`/`False`. This variable could be used to
    decide whether to skip server configurations, as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在重构代码并添加由变量控制的标志之后，我们已经准备好选择性地配置 MySQL 服务器了。我们有一个名为`mysql.server`的变量，它采用`True`/`False`的布尔值。此变量可用于决定是否跳过服务器配置，如下所示：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s also add tasks to install the MySQL client package as well as the Python
    bindings required by Ansible''s MySQL module:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还添加任务来安装 MySQL 客户端包以及 Ansible 的 MySQL 模块所需的 Python 绑定：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, the package names come from the following variable `hash`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，包名称来自以下变量`hash`：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By default, the `mysql.server` parameter has been set to `False`. How do we
    enable this only for the database servers? There are plenty of ways we can do
    so. We would choose playbook variables this time, since we have one dedicated
    to DB servers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`mysql.server`参数已设置为`False`。我们如何仅为数据库服务器启用此选项？我们可以有很多种方法来实现这一点。这次我们会选择剧本变量，因为我们有一个专门用于DB服务器的变量。
- en: 'Let''s take a look at the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下截图：
- en: '![Configuring the MySQL server selectively](img/B03800_05_05.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![有选择性地配置MySQL服务器](img/B03800_05_05.jpg)'
- en: Conditional control structure in Jinja2 templates
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jinja2模板中的条件控制结构
- en: 'Ansible uses Jinja2 as a template engine. Hence, it would be useful for us
    to understand Jinja2 control structures in addition to the ones supported by Ansible
    tasks. Jinja2''s syntax encloses the control structures inside the `{% %}` blocks.
    For conditional control, Jinja2 uses the familiar `if` statements, which have
    the following syntax:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible使用Jinja2作为模板引擎。因此，除了Ansible任务支持的控制结构外，了解Jinja2控制结构也对我们很有用。Jinja2的语法将控制结构封装在`{%
    %}`块内。对于条件控制，Jinja2使用熟悉的`if`语句，其语法如下：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Updating the MySQL template
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新MySQL模板
- en: 'The template that we created earlier to generate the `my.cnf` file assumes
    that all the variables referred in it are defined somewhere. There is a chance
    that this is not always the case, which could result in errors while running Ansible.
    Could we selectively include configuration parameters in the `my.cnf` file? The
    answer is yes. We could check whether a variable is defined and only then, we
    will add it to the file, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前创建的用于生成`my.cnf`文件的模板假定其中引用的所有变量都在某处定义了。有可能情况并非总是如此，这可能导致在运行Ansible时出现错误。我们能够有选择地将配置参数包含在`my.cnf`文件中吗？答案是肯定的。我们可以检查变量是否被定义，只有在这种情况下，我们才将其添加到文件中，如下所示：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s analyze the preceding code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析上述代码：
- en: Since we are setting the default value for the `mysql['config']['user']` parameter,
    there is no need to check whether it's defined. It's already handled gracefully.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们正在为`mysql['config']['user']`参数设置默认值，因此无需检查它是否已定义。它已经被优雅地处理了。
- en: For all other parameters, we check whether the variable is defined using a condition,
    such as `if mysql.config.pid is defined`. This would skip the parameter if it's
    not defined rather than throwing an error.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于所有其他参数，我们使用条件检查变量是否已定义，例如`if mysql.config.pid is defined`。如果未定义该参数，则会跳过该参数，而不会引发错误。
- en: Running a task only once
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅运行一次任务
- en: 'At times, a specific task in a role may need to be executed only once during
    a playbook execution, even though the role is applied to many hosts. This could
    be achieved with the `run_once` conditional:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在播放书执行期间，角色中的特定任务可能需要仅执行一次，即使该角色应用于多个主机。这可以通过`run_once`条件来实现：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Since we are using the `run_once` option, the preceding task would run on the
    first host in the inventory that the role is being applied to. All consequent
    hosts would skip this task.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用`run_once`选项，上述任务将在应用角色的清单中的第一个主机上运行。所有后续主机都将跳过此任务。
- en: Executing roles conditionally
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有条件地执行角色
- en: 'The Nginx role that we created earlier to set up web server supports only Debian-based
    systems. Running this logic on other systems could lead to failure. For example,
    the Nginx role uses the `apt` module to install packages, which would not work
    on RedHat-based systems, which depend on the `yum` package manager. This could
    be avoided by adding the `when` statement with a fact to selectively execute based
    on an OS family. The following is the snippet from the `www.yml` playbook:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前创建的用于设置Web服务器的Nginx角色仅支持基于Debian的系统。在其他系统上运行此逻辑可能会导致失败。例如，Nginx角色使用`apt`模块安装软件包，在依赖于`yum`软件包管理器的基于RedHat的系统上不起作用。可以通过添加`when`语句与事实来选择性地基于操作系统系列执行。以下是`www.yml`剧本中的片段：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Review questions
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: 'Do you think you''ve understood the chapter well enough? Try answering the
    following questions to test your understanding:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您认为您是否已经充分理解了本章内容？尝试回答以下问题来测试您的理解：
- en: What is the replacement for the `if else` statements in Ansible?
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ansible中`if else`语句的替代方案是什么？
- en: How can you selectively import platform-specific variables?
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何有选择地导入特定于平台的变量？
- en: Why do Jinja2 templates use `__` and `__` to delimit control structures?
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么Jinja2模板使用`__`和`__`来界定控制结构？
- en: How would you skip running roles on incompatible platforms?
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何跳过在不兼容平台上运行的角色？
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learnt about how to control execution flow using the `when`
    statements, conditional imports, selective includes, and so on. You also learnt
    how to use variables and facts to selectively skip routines and execute platform-specific
    subroutines. We refactored the MySQL role to start using dictionaries of variables
    to conditionally configure the MySQL server and to use more intelligent templates
    with prechecks for defined variables.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用`when`语句、条件导入、选择性包含等来控制执行流程。你还学会了如何使用变量和事实来有选择地跳过例程并执行特定于平台的子例程。我们对MySQL角色进行了重构，开始使用变量字典有条件地配置MySQL服务器，并使用更智能的模板来预检已定义的变量。
- en: In the next chapter, we will begin exploring the second type of control structures,
    that is. iterative control structures, where we will start looping arrays and
    hashes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始探索第二种控制结构，即迭代控制结构，我们将开始循环数组和哈希。
