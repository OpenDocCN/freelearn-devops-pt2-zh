- en: Chapter 7. Becoming a Master – A Complete Configuration Guide
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 成为大师-完整配置指南
- en: By the time you reach this chapter, you will have had already gone through all
    the concepts that are in the scope of this book. This chapter will build upon
    everything learned from the previous chapters, use some basics, and present you
    with real-life use cases where Ansible can come in handy. The chapter will show
    you how you can use Ansible to solve simple, as well as complex, problems and
    scenarios.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当你到达这一章时，你已经通过了本书范围内的所有概念。本章将建立在前几章学到的一切基础之上，并为你提供Ansible可以派上用场的真实用例。本章将向你展示如何使用Ansible来解决简单和复杂的问题和场景。
- en: One playbook, different applications, multiple targets
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个playbook，不同的应用程序，多个目标
- en: You might come across scenarios where different environments need different
    settings or deployment steps, for example, deploying to different environments
    such as Development, QA, Stage, or Production. There might be small changes in
    the deployment scheme, for instance, a QA instance of a web application points
    to a local instance of a database, while the Production deployment points to a
    different database server.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到不同环境需要不同设置或部署步骤的情况，例如，部署到不同的环境，如开发、QA、阶段或生产。部署方案可能会有小的变化，例如，Web应用的QA实例指向本地数据库的实例，而生产部署指向不同的数据库服务器。
- en: Another scenario could be one in which you are to deploy an application that
    you built for different distributions (for example, those that are RPM based and
    Debian based). In this scenario, deployment will be different, as both the platforms
    use different application managers. RPM based distributions use the Yum or DNF
    package management utility, while Debian based distributions use the DPKG utility
    for package management. Also, the resultant package that is created will be different
    – one is `.rpm` while the other is `.deb`.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种情况可能是你需要部署一个你为不同发行版构建的应用程序（例如，基于RPM和基于Debian的发行版）。在这种情况下，部署将不同，因为这两个平台使用不同的应用程序管理器。基于RPM的发行版使用Yum或DNF软件包管理实用程序，而基于Debian的发行版使用DPKG实用程序进行软件包管理。此外，创建的结果软件包也会有所不同-一个是`.rpm`，另一个是`.deb`。
- en: In this scenario, even through the target platform is different and the deployment
    schemes or configurations differ from each other, all these can be handled in
    one playbook by means of defining roles.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，即使目标平台不同，部署方案或配置也不同，所有这些都可以通过定义角色在一个playbook中处理。
- en: Let's move to a few practical scenarios. In the first scenario, you need to
    deploy an application consisting of a backend database (MySQL) and a frontend
    web application. The web application queries the backend database and serves the
    data as requested by the user. Both the web application and MySQL database are
    to be deployed on different machines.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看几个实际的场景。在第一个场景中，你需要部署一个由后端数据库（MySQL）和前端Web应用程序组成的应用程序。Web应用程序查询后端数据库，并根据用户的请求提供数据。Web应用程序和MySQL数据库都需要部署在不同的机器上。
- en: 'Let''s divide the installation and configuration tasks into two categories:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将安装和配置任务分为两类：
- en: '**System preparation**: This is a common task for both the web application
    system and database server. Both systems need to first be prepared for installation.
    Preparation might involve tasks like configuring repositories and updating the
    system.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统准备**: 这是Web应用系统和数据库服务器的常见任务。两个系统都需要先准备好进行安装。准备工作可能涉及配置存储库和更新系统等任务。'
- en: '**Deploy**: This includes deploying both the database and web application,
    followed by any configuration changes that are required.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**: 这包括部署数据库和Web应用程序，然后进行所需的任何配置更改。'
- en: If you analyze the categories, system preparation is common to both the systems,
    while the deploy jobs are specific to each application. In such a scenario, you
    can segregate the jobs into roles. You can have three roles – one "common" role,
    which executes on both the machines, and one role each for both the database and
    web application, respectively. This makes the Ansible playbook more modular and
    easy to maintain.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你分析这些类别，系统准备对两个系统都是通用的，而部署作业对每个应用程序都是特定的。在这种情况下，你可以将作业分成角色。你可以有三个角色 - 一个“通用”角色，它在两台机器上执行，以及一个分别用于数据库和Web应用程序的角色。这使得Ansible
    playbook更加模块化和易于维护。
- en: 'The following is an Ansible playbook based on the above analysis of the problem
    statement:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是根据上述问题陈述的分析编写的Ansible playbook：
- en: '`db-webapp-role.yaml`'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`db-webapp-role.yaml`'
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding playbook calls different roles – `common`, `webapp`, and `database`
    and executes them on the corresponding host groups. The `common` role is executed
    on all the host groups (that is, on both `webapp` and `database`). This is then
    followed by executing the individual roles on specific host groups. The following
    are the roles that are called by the preceding play:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的playbook调用不同的角色 - `common`，`webapp`和`database`，并在相应的主机组上执行它们。`common`角色在所有主机组上执行（即在`webapp`和`database`上）。然后在特定主机组上执行各个角色。以下是前面的play调用的角色：
- en: '**Role** : `common`'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**角色**：`common`'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This is a `common` role, which will be executed on all the target hosts. It
    configures a repository that serves packages and dependencies to the target machine.
    The role configures this repository and updates all the packages installed on
    the target machine to their latest versions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个“通用”角色，将在所有目标主机上执行。它配置一个仓库，为目标机器提供软件包和依赖项。该角色配置此仓库，并将目标机器上安装的所有软件包更新为它们的最新版本。
- en: 'The following role will be executed only on the hosts specified under the database
    group in the inventory file. This will install the MySQL database and copy over
    a configuration file, which will configure the database and create the required
    tables on the target host. It will also ensure the MYSQL service is running on
    the target host. As per the Ansible play, this role will be executed on the target
    host post successful completion of the `common` role:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下角色将仅在清单文件中数据库组指定的主机上执行。这将安装MySQL数据库并复制配置文件，该文件将配置数据库并在目标主机上创建所需的表。它还将确保MYSQL服务在目标主机上运行。根据Ansible
    play，此角色将在“通用”角色成功完成后在目标主机上执行：
- en: '**Role**: `database`'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**角色**：`database`'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following role is specific to deploying the web application on the webapp
    group of hosts in the inventory file. The role will execute upon successful completion
    of the `common` role as per the Ansible play:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 以下角色专用于在清单文件中的webapp组上部署Web应用程序。根据Ansible play，在“通用”角色成功完成后，该角色将执行：
- en: '**Role**: `webapp`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**角色**：`webapp`'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Ansible roles – using tags
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标签的Ansible角色
- en: Ansible playbooks are meant to be modular and capable of being used in different
    environments whenever required. For this purpose, roles were introduced. However,
    just using roles may not be enough, as you may want to use different roles for
    different environments on the same host. Okay, this sounds confusing. Let's dive
    into a scenario.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible playbook旨在是模块化的，并且可以在需要时在不同环境中使用。为此，引入了角色。然而，仅使用角色可能不足够，因为您可能希望在同一主机上的不同环境中使用不同的角色。好的，这听起来有点混乱。让我们来看一个场景。
- en: You can integrate your Ansible playbooks with your continuous deployment system,
    which helps developers deploy the application whenever they want during the development
    cycle. During this cycle, they might want to set up the system and configure the
    application in a manner appropriate to the stage of development. Since the application
    is being developed, not all features may be complete while deploying on the development
    environment. However, once the application is complete, the developer might want
    to do a complete run of Ansible to replicate the production or QE environment,
    thus ensuring the application runs with all the settings as required on the production
    host. In this case, there are two different environments–development and QE-ready.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将您的 Ansible playbook 与持续部署系统集成，这有助于开发人员在开发周期中随时部署应用程序。在此周期中，他们可能希望以适合开发阶段的方式设置系统并配置应用程序。由于应用程序正在开发中，部署到开发环境时可能并非所有功能都已完成。但是，一旦应用程序完成，开发人员可能希望完全运行
    Ansible 以复制生产或 QE 环境，从而确保应用程序在生产主机上以所需的所有设置运行。在这种情况下，存在两个不同的环境 - 开发和 QE-ready。
- en: Since the deployment is done on the same host, and there are multiple roles
    that can be executed, you can use tags. You can couple a role with a tag. Thus,
    by specifying the tag from the command line, Ansible knows which role to execute.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于部署在同一主机上，并且可以执行多个角色，因此可以使用标签。您可以将角色与标签配对。因此，通过从命令行指定标签，Ansible 知道要执行哪个角色。
- en: One simple way to demonstrate this is as follows. Let's say you have an application
    which, when required to be deployed in a development environment, you clone the
    code from your Git Hub repository and run the `install.sh` script. Also in the
    development environment, you have some relaxed security policies, say SeLinux
    is set to permissive mode. The same application, when passed to QE, should be
    packaged in RPM and then installed. Also, the security relaxations are not allowed,
    hence SeLinux needs to stay in enforcing mode. Since a developer will have one
    development instance, he or she will have to execute both the roles on the same
    instance. In this case, the developer can use tags to use different roles as and
    when required for deploying the application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 演示这一点的一种简单方法如下。假设您有一个应用程序，当需要在开发环境中部署时，您可以从 Git Hub 存储库克隆代码并运行 `install.sh`
    脚本。同样，在开发环境中，您有一些放松的安全策略，比如 SeLinux 设置为宽松模式。当将同一应用程序传递给 QE 时，应该将其打包为 RPM 然后安装。此外，不允许放松安全策略，因此
    SeLinux 需要保持强制模式。由于开发人员将拥有一个开发实例，因此他们将不得不在同一实例上执行两个角色。在这种情况下，开发人员可以使用标签根据需要使用不同的角色来部署应用程序。
- en: 'The following is an Ansible playbook along with the roles that demonstrate
    the preceding scenario:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个包含演示先前场景的角色的 Ansible playbook：
- en: '**Role** : `development`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**角色**：`development`'
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Role** : `qe_ready`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**角色**：`qe_ready`'
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding two roles are a part of the same Ansible playbook and will be
    called as per required based on the tag you specify. The following Ansible play
    demonstrates how to bind a role to a specific tag:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上述两个角色是同一个 Ansible playbook 的一部分，并将根据您指定的标签按需调用。以下 Ansible play 演示了如何将角色绑定到特定标签：
- en: '**Ansible Play** : `demo-tag.yaml`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Play：`demo-tag.yaml`
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `development` role is now binded to the `development` tag while the `qe_ready`
    role is binded to the `qe` tag. An Ansible playbook can be executed by specifying
    tags using the `-t` flag in the following manner:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`development` 角色现在绑定到 `development` 标签，而 `qe_ready` 角色绑定到 `qe` 标签。可以通过在命令中使用
    `-t` 标志来指定标签来执行 Ansible playbook：'
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Getting infrastructure information and hosting it centrally
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取基础设施信息并将其集中托管
- en: In the previous chapters, you created a `dmidecode` module that collected system
    information from the target machines and returned a JSON output. The module also
    allowed you to toggle a flag "save" to `true` if you wished to store the output
    in a JSON file on the target machine itself.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，您创建了一个`dmidecode`模块，从目标机器收集系统信息并返回JSON输出。该模块还允许您切换一个名为"save"的标志为`true`，如果您希望将输出存储在目标机器上的JSON文件中。
- en: Storing system information on respective target machines does not serve much
    purpose, as the data still resides on the target machines, and to access the data,
    one needs to log in to a different machine and then parse the respective JSON
    files. To handle this, the book introduced you to callbacks, which help get back
    the JSON data and store it as JSON files on the controller node (that is, the
    node from where you are executing the Ansible playbook).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在各自的目标机器上存储系统信息并没有太大意义，因为数据仍然驻留在目标机器上，要访问数据，需要登录到不同的机器，然后解析相应的JSON文件。为了解决这个问题，本书向您介绍了回调函数，它有助于获取JSON数据并将其存储为JSON文件在控制器节点上（即您执行Ansible
    playbook的节点）。
- en: However, even after doing so, the problem is not completely resolved. You did
    manage to collect the data from your infrastructure nodes, but accessibility still
    remains an issue.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，即使这样做了，问题仍未完全解决。您确实设法从基础设施节点收集了数据，但可访问性仍然是一个问题。
- en: One needs access to the controller machine to access all the files
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要访问控制器机器才能访问所有文件
- en: In a real-world scenario, you cannot grant access to everyone
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在现实世界的情况下，您无法向每个人授予访问权限
- en: Even if you plan to give access to select individuals, your availability remains
    a bottleneck
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使您计划授予某些人访问权限，您的可用性仍然是一个瓶颈
- en: To handle this, one solution can be to host all these JSON files to a central
    server from where one can download the required JSON files, parse them, and generate
    reports. A better solution to this problem, however, can be to index the data
    in a central Elasticsearch instance, which then serves the data over a RESTful
    API.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，一个解决方案可以是将所有这些JSON文件托管到一个中央服务器上，从那里可以下载所需的JSON文件，解析它们并生成报告。然而，这个问题的更好解决方案可以是将数据索引到一个中央的Elasticsearch实例中，然后通过RESTful
    API提供数据。
- en: Note
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Elasticsearch** is an open source search engine built on top of Apache Lucene.
    Elasticsearch is written in Java and uses Lucene internally for indexing and searching.
    It aims to make full-text search easy by hiding the complexities of Lucene behind
    a simple RESTful API.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**Elasticsearch**是建立在Apache Lucene之上的开源搜索引擎。Elasticsearch用Java编写，并在内部使用Lucene进行索引和搜索。它旨在通过在简单的RESTful
    API后面隐藏Lucene的复杂性来使全文搜索变得容易。'
- en: 'Source: Elasticsearch documentation from [www.elastic.co](http://www.elastic.co).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：[www.elastic.co](http://www.elastic.co)的Elasticsearch文档。
- en: This chapter will not go into depth about what Elasticsearch is and how it functions,
    as this is beyond the scope of this book. For details about Elasticsearch, you
    can refer to either the online documentation or *Mastering ElasticSearch* ([https://www.packtpub.com/web-development/mastering-elasticsearch-second-edition](https://www.packtpub.com/web-development/mastering-elasticsearch-second-edition)),
    published by *Packt Publishing*.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本章不会深入讨论Elasticsearch是什么以及它的功能如何，因为这超出了本书的范围。有关Elasticsearch的详细信息，您可以参考在线文档或*精通ElasticSearch*（[https://www.packtpub.com/web-development/mastering-elasticsearch-second-edition](https://www.packtpub.com/web-development/mastering-elasticsearch-second-edition)），由*Packt
    Publishing*出版。
- en: Back to the issue of indexing data in Elasticsearch and serving it over an HTTP,
    API can be a solution to the problem at hand. For this to work, you'll have to
    write a callback plugin that interacts with an Elasticsearch instance and indexes
    the JSON data, which can then be served over API. Python provides a library, `pyes`,
    to interact with an Elasticsearch instance.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 关于在Elasticsearch中索引数据并通过HTTP提供服务的问题，API可以是解决问题的方法。为了使其工作，您将需要编写一个回调插件，与Elasticsearch实例交互并索引JSON数据，然后可以通过API提供服务。Python提供了一个名为`pyes`的库，用于与Elasticsearch实例交互。
- en: 'Let''s name the callback plugin `loges.py` and store it in the `callback_plugins`
    directory in the root of the Ansible play, as shown in the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将回调插件命名为`loges.py`，并将其存储在Ansible play根目录中的`callback_plugins`目录中，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Post creating this callback plugin, if you run the Ansible play `dmidecode.yaml`,
    upon successful run, the JSON output will be indexed in the Elasticsearch instance
    and should be available through the API. Data will be indexed in the index named
    `infra` with the document type `dmidecode`. Every indexed document will have a
    unique ID, which, in this case, would be the `Hostname` or `IP`, whichever is
    applicable.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了这个回调插件之后，如果您运行Ansible play `dmidecode.yaml`，在成功运行后，JSON输出将被索引到Elasticsearch实例中，并且应该可以通过API访问。数据将被索引到名为`infra`的索引中，文档类型为`dmidecode`。每个索引的文档都将有一个唯一的ID，在这种情况下，将是`Hostname`或`IP`，取决于适用的情况。
- en: Creating a dynamic inventory of just launched instances
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建刚启动实例的动态清单
- en: An Ansible playbook, or even individual modules, are executed against target
    hosts commonly specified in an inventory file. Their most basic use is to have
    a static inventory file (for example, hosts) containing a list of all the target
    host IPs or hostnames against which the Ansible play has to be executed. However,
    in the real world, things might not be this dead simple. For instance, you might
    be required to launch a new instance on Cloud – say OpenStack or AWS – or launch
    a basic virtual machine and then deploy your application using the Ansible playbook.
    In this case, the target IP is unknown until the instance is launched, and therefore
    a static inventory file would not serve the purpose.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible playbook，甚至是单独的模块，通常针对清单文件中常指定的目标主机执行。它们最基本的用途是拥有一个静态清单文件（例如hosts），其中包含要执行Ansible
    play的所有目标主机IP或主机名的列表。然而，在现实世界中，事情可能并不是这么简单。例如，您可能需要在云上启动一个新实例 - 比如OpenStack或AWS
    - 或启动一个基本的虚拟机，然后使用Ansible playbook部署您的应用程序。在这种情况下，目标IP在实例启动之前是未知的，因此静态清单文件将无法达到目的。
- en: One of the major benefits of running Ansible programmatically and using the
    Ansible API was to handle runtime variables such as the target IP, in this case.
    This is a scenario where you can take full advantage of using the Python API to
    run the Ansible playbook while creating a dynamic inventory.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以编程方式运行Ansible并使用Ansible API的主要好处之一是处理运行时变量，比如这种情况下的目标IP。这是一个场景，您可以充分利用Python
    API来运行Ansible playbook，同时创建一个动态清单。
- en: For generating a dynamic inventory file, the Jinja2 template can be used. Jinja2
    is fully supported by Ansible and can be used to create any template you want.
    Jinja2 is a vast topic in itself and cannot be covered in detail, as it is beyond
    the scope of this book. However, this specific scenario will touch upon Jinja2
    and how it can be used in conjunction with Ansible. In the above case, the Jinja2
    template will be used to render the inventory file at runtime.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成动态清单文件，可以使用Jinja2模板。Jinja2完全受Ansible支持，可以用于创建任何您想要的模板。Jinja2本身是一个广泛的主题，无法在本书的范围之内详细介绍。然而，这个特定的场景将涉及Jinja2以及如何与Ansible一起使用。在上述情况下，Jinja2模板将用于在运行时渲染清单文件。
- en: Let's revisit the example from [Chapter 4](ch04.html "Chapter 4. Exploring API"),
    *Exploring API*, where an Ansible playbook, `webserver.yaml`, was programmatically
    executed on an inventory file, `hosts`. Contrary to the example in [Chapter 4](ch04.html
    "Chapter 4. Exploring API"), *Exploring API*, the inventory file will be rendered
    at runtime in the following example. This comes in handy while performing end-to-end
    automation, starting from launching instances and deploying applications.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新访问[第4章](ch04.html "第4章 探索API")中的示例，*探索API*，在那里一个Ansible playbook，`webserver.yaml`，在一个清单文件`hosts`上被以编程方式执行。与[第4章](ch04.html
    "第4章 探索API")中的示例相反，下面的示例中清单文件将在运行时渲染。这在执行端到端自动化时非常方便，从启动实例到部署应用程序。
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding example, the `launch_instance` function is only used to represent
    some code that can launch an instance or a virtual machine. The function, when
    called, returns a list of IPs associated with the launched instances. The returned
    list is cached in a variable, `target`, and is then used to render the inventory
    file. The following code section...:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，`launch_instance`函数仅用于表示可以启动实例或虚拟机的一些代码。当调用该函数时，它返回与启动实例关联的IP列表。返回的列表被缓存在一个变量`target`中，然后用于渲染清单文件。以下代码部分...：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '...is the Jinja2 template that is rendered by using the following code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '...是由以下代码渲染的Jinja2模板：'
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The rendered inventory is then written into a temporary file using the following
    piece of code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下代码将渲染的清单写入临时文件：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This creates an inventory file at runtime with IPs of the target machines (newly
    launched instances), as returned by the `launch_instance` method.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在运行时创建一个包含目标机器IP的清单文件（新启动的实例），这些IP是由`launch_instance`方法返回的。
- en: Ansible through a bastion host
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过堡垒主机使用Ansible
- en: In the real world, production servers are normally configured to prevent SSH
    connections from outside their own private network. This is to reduce the number
    of possible attack vectors and also to keep the access point to a bare minimum.
    This helps in limiting access, creating better logging, and increases security.
    This is a common security practice and is implemented by using a bastion host.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中，生产服务器通常配置为阻止来自其私有网络之外的SSH连接。这是为了减少可能的攻击向量的数量，同时将访问点保持在最低限度。这有助于限制访问，创建更好的日志记录，并增加安全性。这是一种常见的安全实践，通过使用堡垒主机来实现。
- en: A bastion host is specifically designed to withstand attacks. Normally, the
    bastion host runs only one service. Other services are either removed or disabled
    in order to minimize threats.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 堡垒主机专门设计用来抵御攻击。通常，堡垒主机只运行一个服务。其他服务要么被移除，要么被禁用，以最小化威胁。
- en: In this scenario, with a bastion host coming into the picture, Ansible is not
    able to directly SSH to the target host from the controller node. It needs to
    proxy its commands through the bastion host in order to reach the target machine.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，有了堡垒主机，Ansible无法直接从控制节点SSH到目标主机。它需要通过堡垒主机代理其命令，以便到达目标机器。
- en: 'To achieve this, all you need is to modify three files in your Ansible play
    root directory:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，您只需要修改Ansible播放根目录中的三个文件：
- en: '`hosts`: Inventory file'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hosts`：清单文件'
- en: '`ansible.cfg`: Ansible''s configuration files'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible.cfg`：Ansible的配置文件'
- en: '`ssh.cfg`: SSH configurations'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ssh.cfg`：SSH配置'
- en: 'The inventory file includes a group, `bastion`, alongside the usual target
    hosts. The following code is a sample inventory `hosts` file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 清单文件包括一个名为`bastion`的组，以及通常的目标主机。以下代码是一个示例清单`hosts`文件：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Since Ansible uses SSH for almost all its operations, the next step is to configure
    SSH. SSH by itself allows us to customize the settings as per the requirement.
    To configure SSH for this particular Ansible play, you need to create an `ssh.cfg`
    file with the following contents in the root of the Ansible playbook:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Ansible几乎在所有操作中都使用SSH，下一步是配置SSH。SSH本身允许我们根据需求自定义设置。要为特定的Ansible play配置SSH，你需要在Ansible
    playbook的根目录中创建一个`ssh.cfg`文件，内容如下：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding SSH configuration proxies all the commands to the nodes in network
    `172.16.*` through our Bastion host `10.68.214.8`. The control setting `ControlPersist`
    allows SSH to reuse the already established connection, thus improving performance
    and speeding up the Ansible playbook execution.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 上述SSH配置将通过我们的堡垒主机`10.68.214.8`代理到网络`172.16.*`中的所有节点的所有命令。控制设置`ControlPersist`允许SSH重用已建立的连接，从而提高性能并加快Ansible
    playbook的执行速度。
- en: 'Now that the SSH is configured, you need to tell Ansible to use this SSH configuration.
    For this, you need to create an `ansible.cfg` file in the root of the Ansible
    play with the following contents:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在SSH已配置好，你需要告诉Ansible使用这个SSH配置。为此，你需要在Ansible play的根目录中创建一个`ansible.cfg`文件，内容如下：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Ansible will now use the above configuration to use `ssh.cfg` as the SSH configuration
    file and hence proxy the commands through the bastion host.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible现在将使用上述配置来使用`ssh.cfg`作为SSH配置文件，因此通过堡垒主机代理命令。
- en: Happy managers = happy you
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快乐的管理者=快乐的你
- en: Up until this point, this chapter has been about implementing Ansible for management,
    deployment, and configuration. Well, there is one more point that still remains
    – reporting.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本章已经讨论了如何实施Ansible进行管理、部署和配置。好吧，还有一个问题仍然存在 - 报告。
- en: At the end of a long playbook execution, you may have the application deployed
    and you may have the audit data for your infrastructure or anything that the playbook
    was designed to do. Additionally, you can have logs for the playbook execution.
    However, let's say that at the end of day, you are asked to provide a report.
    You now have to sit down and create reports and fill out an Excel spreadsheet,
    as this is what your manager demands – an overview of the state of things as they
    are. This is something that can again be achieved by extending Ansible.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在长时间的playbook执行结束时，你可能已经部署了应用程序，也可能已经有了基础设施的审计数据，或者playbook设计的任何其他内容。此外，你可能还有playbook执行的日志。然而，假设在一天结束时，有人要求你提供一个报告。现在你必须坐下来创建报告，并填写Excel电子表格，因为这是你的经理要求的
    - 对事物状态的概述。这也是可以通过扩展Ansible再次实现的事情。
- en: 'So, you did a playbook run and what you get is run logs on `stdout`. The question
    now becomes: how do you make an Excel report out of it? Yes, you guessed it right
    – the callback plugin comes to the rescue. You can write your own custom callback
    plugins that can help you record your Ansible play results and create a spreadsheet
    out of them. This would reduce the overhead task of creating reports manually.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你运行了一个playbook，得到的是`stdout`上的运行日志。现在的问题是：如何将其制作成Excel报告？是的，你猜对了 - 回调插件来拯救你。你可以编写自己的自定义回调插件，可以帮助你记录Ansible
    play的结果并创建电子表格。这将减少手动创建报告的工作量。
- en: The report might vary for different use cases, as not one single report fits
    all. Hence, you will have to write callback plugins for the different kinds of
    report you want to generate. Some prefer an HTML-based report, while some prefer
    Excel spreadsheets.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 报告可能因不同的用例而异，因为没有一个报告适用于所有情况。因此，你将不得不为你想要生成的不同类型的报告编写回调插件。有些人喜欢基于HTML的报告，而有些人喜欢Excel电子表格。
- en: The following example reuses the `dmidecode` module from [Chapter 3](ch03.html
    "Chapter 3. Digging Deeper into Ansible Modules"), *Digging Deeper into Ansible
    Modules*. The module is used to generate a JSON output, which is good for machine
    processing. However, JSON is not something one would like to read through manually
    for a report. Representing the data in an Excel spreadsheet makes much more sense,
    while creating a report as a spreadsheet is more reader-friendly and gives the
    complete picture at a glance. Someone with a non-technical background can also
    read data from an Excel sheet without much hassle.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例重用了来自[第3章](ch03.html "第3章。深入了解Ansible模块")的`dmidecode`模块，*深入了解Ansible模块*。该模块用于生成JSON输出，非常适合机器处理。然而，JSON并不是人们愿意手动阅读报告的格式。将数据表示为Excel电子表格更有意义，因为将报告创建为电子表格更易于阅读，并能一目了然地呈现完整的图片。即使是非技术背景的人也可以轻松地从Excel表中读取数据。
- en: The following is a callback module that creates an Excel sheet, reads the JSON
    output generated by executing the `dmidecode` module, and appends data for each
    host in the Excel spreadsheet. It is written in Python and uses the `openpyxl`
    library to create the Excel spreadsheet.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个回调模块，它创建一个Excel表格，读取执行`dmidecode`模块生成的JSON输出，并将每个主机的数据追加到Excel电子表格中。它是用Python编写的，并使用`openpyxl`库来创建Excel电子表格。
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding callback module is just an example of how you can represent data
    in an Excel spreadsheet and generate reports. The callback module can be extended
    to fill in more details as required in the report. The preceding module only adds
    the host, serial number, and manufacturer of the host machine.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的回调模块只是一个示例，展示了如何将数据表示为Excel电子表格并生成报告。可以根据需要扩展回调模块以填写更多细节。前面的模块只添加了主机、序列号和主机制造商。
- en: Please note that since the above callback module appends data to the same Excel
    spreadsheet, Ansible should execute tasks one host at a time. Therefore, you should
    set the fork as `1`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于上述回调模块将数据追加到同一Excel电子表格中，因此Ansible应该一次执行一个主机的任务。因此，您应该将fork设置为`1`。
- en: 'This can be done by using the `--forks` flag. The following bit of code is
    how the Ansible playbook was executed:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过使用`--forks`标志来实现。以下代码片段展示了Ansible playbook的执行方式：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here is the generated Excel report:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成的Excel报告：
- en: '![Happy managers = happy you](images/B04624_07_01.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![快乐的经理=快乐的你](images/B04624_07_01.jpg)'
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter took you through various real-life scenarios in which Ansible can
    be used and how you can extend Ansible to suit your needs. The chapter started
    with the basics of Ansible such as defining roles and using tags. The chapter
    then gradually progressed to more complex scenarios, building upon examples from
    the previous chapters. The chapter also included a very common scenario in which
    Ansible required custom configurations in order to proxy the tasks through a bastion
    host. The chapter also gave you an idea of how you can exploit Ansible to automate
    some routine tasks like reporting.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 本章带领您走过了各种真实场景，展示了Ansible的用途以及如何扩展Ansible以满足您的需求。本章从Ansible的基础知识开始，比如定义角色和使用标签。然后逐渐深入到更复杂的场景，构建在前几章的示例基础上。本章还包括了一个非常常见的场景，即Ansible需要自定义配置以通过堡垒主机代理任务。本章还让您了解了如何利用Ansible来自动化一些例行任务，比如报告。
- en: Overall, this chapter combined everything learned from the previous chapters
    and provided real-life scenarios and use cases of the same.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，本章结合了前几章学到的知识，并提供了相同知识的真实场景和用例。
