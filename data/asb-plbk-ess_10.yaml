- en: Chapter 9. Managing Environments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章 管理环境
- en: 'Most organizations start with a single environment while building their infrastructures.
    However, as the complexity grows, it is imperative that we have a workflow that
    involves writing code and testing it in development environments, followed by
    an intensive QA cycle to make sure that the code is tested for stability in the
    staging, or preproduction, environment before we finally release it to production.
    In order to simulate a real-world behavior, these environments have to run identical
    stacks of applications, but most likely at different scales. For example, staging
    will be a small-scale replica of production with fewer servers, and most commonly,
    development environments would run on individual workstations in virtualized environments.
    Even though all these environments run an identical application stack, they have
    to be isolated from each other and must have environment-specific configurations,
    explained as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数组织在构建其基础架构时从单个环境开始。然而，随着复杂性的增长，我们必须有一个工作流程，涉及在开发环境中编写代码并对其进行测试，然后在预备或预生产环境中进行密集的
    QA 循环，以确保代码在生产环境中的稳定性得到测试，然后我们最终发布它。为了模拟真实世界的行为，这些环境必须运行相同的应用程序堆栈，但很可能在不同的规模下运行。例如，预备环境将是生产的小规模副本，服务器较少，最常见的情况是，开发环境将在虚拟化环境中的个人工作站上运行。尽管所有这些环境都运行相同的应用程序堆栈，但它们必须彼此隔离，并且必须具有特定于环境的配置，如下所述：
- en: The applications in the `dev` group should not be pointing at databases in staging
    and vice versa
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev` 组中的应用程序不应指向预备中的数据库，反之亦然'
- en: A production environment may have its own package repository
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产环境可能有自己的软件包存储库
- en: A staging environment may run a web server on port `8080`, whereas all other
    environments run it on port `80`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试环境可能在端口 `8080` 上运行 Web 服务器，而其他所有环境都在端口 `80` 上运行
- en: 'With roles, we could create a modular code to configure these environments
    identically for all environments. Another important property of Ansible is its
    ability to separate code from data. Using these two in combination, we could model
    the infrastructure in a way that we would be able to create environment-specific
    configurations without having to modify the roles. We would be able to create
    them just by providing the variables from different places. Let''s take a look
    at the following screenshot:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通过角色，我们可以创建一个模块化的代码来为所有环境配置相同的环境。 Ansible 的另一个重要特性是将代码与数据分开的能力。结合使用这两者，我们可以将基础架构建模成这样一种方式，我们可以创建特定于环境的配置，而无需修改角色。我们只需提供来自不同位置的变量即可创建它们。让我们来看一下下面的截图：
- en: '![Managing Environments](img/B03800_09_01.jpg)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![管理环境](img/B03800_09_01.jpg)'
- en: 'The preceding diagram portrays three different environments, which are dev,
    stage, and production, within the same organization. All three run the same application
    stack, which involves a load balancer, web servers, and database servers. However,
    the two things to note here are that:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图示了同一组织内的三个不同环境，即开发、预备和生产环境。这三个环境都运行相同的应用程序堆栈，其中包括负载均衡器、Web 服务器和数据库服务器。但需要注意的两点是：
- en: Each environment has a different scale based on which host can be configured
    to run one or more roles (for example, `db` plus `www`).
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个环境根据其规模不同，可以配置运行一个或多个角色（例如，`db` 加 `www`）的主机。
- en: Each environment is isolated from the other. A web server in a production environment
    will not connect to a database in staging, and vice versa.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个环境都与其他环境隔离开来。生产环境中的 Web 服务器不会连接到预备环境中的数据库，反之亦然。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Managing multiple environments with Ansible
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible 管理多个环境
- en: Separating inventory files per environment
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分隔不同环境的库存文件
- en: Using the `group_vars` and `host_vars` groups to specify environment-specific
    configurations
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `group_vars` 和 `host_vars` 组指定特定于环境的配置
- en: Approaches for managing environments
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理环境的方法
- en: 'You have already learned about the need to create different environments with
    identical roles, but with different data. At the time of writing this, more than
    one approach exists for managing such multiple environment scenarios with Ansible.
    We are going to discuss two approaches here, and you can use your best judgment
    to pick either of the two or create your own approach. There is no explicit way
    to create an environment, but the following are the built-in features of Ansible,
    which could come in handy:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经了解到需要创建具有相同角色但具有不同数据的不同环境。在撰写本文时，使用 Ansible 管理此类多个环境场景的方法不止一种。我们将在这里讨论两种方法，并且您可以根据自己的判断选择其中之一或创建您自己的方法。没有明确的创建环境的方式，但是以下是
    Ansible 的内置功能，可能会派上用场：
- en: The use of an inventory to group together hosts that belong to one environment
    and isolate them from the hosts in other environments
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用清单将属于一个环境的主机分组并将它们与其他环境中的主机隔离开来
- en: The use of inventory variables, such as the `group_vars` and `host_vars` groups,
    to provide environment-specific variables
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用清单变量，如`group_vars`和`host_vars`组，提供特定于环境的变量
- en: Before we proceed, it would be useful to review the inventory groups, variables,
    and precedence rules that are applicable to them.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，回顾一下适用于清单组、变量和优先规则的清单组将会很有用。
- en: The inventory groups and variables
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清单组和变量
- en: 'You have already learned learned that the Ansible inventory follows an INI
    style configuration, where hosts are grouped together with group tags enclosed
    in square brackets, as shown in the following figure:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经学习了 Ansible 清单遵循 INI 样式配置的需求，其中主机与方括号括起来的组标签一起组合，如下图所示：
- en: '![The inventory groups and variables](img/B03800_09_02.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![清单组和变量](img/B03800_09_02.jpg)'
- en: 'The inventory variables can then be specified so that they match these group
    names using `group_vars` or match specific hosts in the `host_vars` files. Apart
    from these group names, there is a provision to specify default variables for
    the `group_vars` and `host_vars` files using a file named "`all`", which gives
    rise to the following structure:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以指定清单变量，以使其与这些组名称匹配，使用`group_vars`或在`host_vars`文件中匹配特定主机。除了这些组名称之外，还可以使用一个名为"`all`"的文件为`group_vars`和`host_vars`文件指定默认变量，从而产生以下结构：
- en: '![The inventory groups and variables](img/B03800_09_03.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![清单组和变量](img/B03800_09_03.jpg)'
- en: In such a case, if you specify the same variable in the `all` and `webserver`
    files, the one variable that is more specific will take precedence. What this
    means is, if you define a variable in '`all`' and define it again in the '`webserver`'
    group under `group_vars`, the value of the parameters will be set to the one defined
    in '`webserver`', which is more specific. This is the behavior that we exploit
    in the approaches, which are as follows.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，如果你在`all`和`webserver`文件中指定了相同的变量，那么更具体的变量将优先。这意味着，如果你在`group_vars`下的`webserver`组中重新定义了一个变量，而在`all`中也定义了它，那么参数的值将被设置为在`webserver`中定义的更具体的值。这是我们在下面的方法中利用的行为。
- en: Approach 1 – using nested groups in an inventory
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法 1 – 使用清单中的嵌套组
- en: 'In addition to being able to create groups using the INI style, Ansible supports
    nested groups, where a complete group can be part of another parent group. The
    first approach is based on this feature and is discussed step by step, as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了能够使用 INI 样式创建组外，Ansible 还支持嵌套组，其中一个完整的组可以是另一个父组的一部分。第一种方法就是基于这个特性的，并且将逐步讨论，如下所示：
- en: Create an environment directory to store environment-specific inventory files.
    It's a good idea to name them after the environments. Add hosts that are specific
    to that environment and group them. A group can be of any criteria, such as a
    role, location, server racks, and so on. For example, create a '`webservers`'
    group to add all the Apache web servers, or a group called '`in`' to add all the
    hosts belonging to that location.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个环境目录，用于存储特定环境的清单文件。最好以环境命名它们。添加属于该环境的主机并对它们进行分组。一个组可以根据任何标准进行分组，比如角色、位置、服务器机架等等。例如，创建一个名为"`webservers`"的组来添加所有的
    Apache web 服务器，或者一个名为"`in`"的组来添加所有属于该位置的主机。
- en: 'Add a parent group named after the environment name, such as, production, development,
    staging, and so on, and include all other groups that belong to that environment
    as a child. Each of these in turn include a group of hosts, for example:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个以环境名称命名的父组，例如，production、development、staging 等，并将属于该环境的所有其他组包括为子组。每个这样的组又包括一组主机，例如：
- en: '[PRE0]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, create the common/default group variables in the `group_vars/all` file.
    These variables then can be overridden from the environment-specific files.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`group_vars/all`文件中创建通用/默认组变量。然后，可以从特定于环境的文件中覆盖这些变量。
- en: 'To specify the environment-specific variables, create the `group_vars/{{env}}`
    file, which is shown as follows:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要指定环境特定的变量，请创建`group_vars/{{env}}`文件，如下所示：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This is also going to override the variables in the `all` group. The following
    diagram shows the file structure created with this approach:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '这也将覆盖`all`组中的变量。以下图示了使用此方法创建的文件结构： '
- en: '![Approach 1 – using nested groups in an inventory](img/B03800_09_04.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![方法 1 – 在清单中使用嵌套组](img/B03800_09_04.jpg)'
- en: Once this has been created, it's just a matter of calling the environment-specific
    inventory with the `ansible-playbook` command run.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 创建完毕后，只需运行`ansible-playbook`命令即可调用特定于环境的清单。
- en: 'For example, let''s take a look at the following command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们看一下以下命令：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Approach 2 – using environment-specific inventory variables
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法 2 – 使用环境特定的清单变量
- en: 'The second approach does not require nested groups and relies on the following
    two features of Ansible:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法不需要嵌套组，并依赖于 Ansible 的以下两个特性：
- en: The `-i` option of Ansible-playbook also accepts a directory that can contain
    one or more inventory files
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible-playbook 的 `-i` 选项还接受一个目录，该目录可以包含一个或多个清单文件
- en: The `host` and `group` variables can be relative to the inventory files in addition
    to the `group_vars` and `host_vars` groups in the root of the Ansible repository
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机和组变量可以相对于清单文件，并且还可以相对于 Ansible 仓库根目录中的`group_vars`和`host_vars`组
- en: 'This approach will create completely isolated variable files for each environment.
    The file structure we created is portrayed in the following diagram:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法将为每个环境创建完全隔离的变量文件。我们创建的文件结构如下图所示：
- en: '![Approach 2 – using environment-specific inventory variables](img/B03800_09_05.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![方法 2 – 使用环境特定的清单变量](img/B03800_09_05.jpg)'
- en: 'The following is the step-by-step method used for this approach:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用于此方法的逐步方法：
- en: Create an environment directory in the root of the Ansible repository. Under
    this, create one directory per environment.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Ansible 仓库的根目录下创建一个名为环境的目录。在此目录下，为每个环境创建一个目录。
- en: 'Each of the environment directories contain two things:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个环境目录包含两个内容：
- en: A host's inventory.
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机清单。
- en: Inventory variables, for example, `group_vars` and `host_vars`. To make environment-specific
    changes, `group_vars` is relevant to us.
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单变量，例如，`group_vars`和`host_vars`。为了进行环境特定的更改，我们关注`group_vars`。
- en: Each environment contains its own `group_vars` directory, which in turn can
    have one or more files, including the `all` file as default. No two environments
    share these variables with others.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个环境都包含自己的`group_vars`目录，该目录又可以包含一个或多个文件，包括默认的`all`文件。没有两个环境共享这些变量。
- en: Tip
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Caution**: In addition to the environment-specific `group_vars` group, it''s
    possible to use the `group_vars` file residing on top of the Ansible-playbook
    repository. However, it''s recommended that you don''t use it with this approach,
    as environment-specific changes are overridden by the values in the playbook `group_vars`
    if they are same.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**: 除了特定于环境的`group_vars`组外，还可以使用位于 Ansible-playbook 仓库顶部的`group_vars`文件。但是，建议不要在此方法中使用它，因为如果值相同，环境特定更改将被
    playbook 的`group_vars`中的值覆盖。'
- en: 'With this approach, the playbook can be launched specific to an environment
    as:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此方法，可以针对特定环境启动 playbook，如下所示：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, `environments/dev` is a directory.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`environments/dev`是一个目录。
- en: Creating a development environment
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个开发环境
- en: 'After learning about how to manage environments, let''s try it out by refactoring
    our existing code and create a dev environment. To test it, let''s create a variable
    called "`env_name`" and change the default page of Nginx to dynamically use this
    variable and print the environment name. We will then try to override this variable
    from the environment. Let''s take a look at the following steps:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了如何管理环境之后，让我们尝试通过重构现有代码并创建一个dev环境来实践一下。为了测试它，让我们创建一个名为"`env_name`"的变量，并将Nginx的默认页面动态使用该变量并打印环境名称。然后，我们将尝试从环境中覆盖此变量。让我们看看以下步骤：
- en: 'Let''s begin by setting the default variable:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从设置默认变量开始：
- en: '[PRE4]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, change the Nginx task to use a template instead of a static file, so
    make the following modification in the `roles/nginx/tasks/configure.yml` file:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`roles/nginx/tasks/configure.yml`文件中，将Nginx任务更改为使用模板而不是静态文件，因此进行以下修改：
- en: '[PRE5]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Modify it into the following code:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其修改为以下代码：
- en: '[PRE6]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s now try running the playbook without creating the environment:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试运行playbook而不创建环境：
- en: '[PRE7]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: After the run is complete, let's check the default web page:![Creating a development
    environment](img/B03800_09_06.jpg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行完成后，让我们检查默认网页：![创建开发环境](img/B03800_09_06.jpg)
- en: It prints the value of the variable that we set from the `group_vars/all` file,
    the default value.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它打印了我们从`group_vars/all`文件中设置的变量的值，默认值。
- en: 'Let''s now create a file that would allow us to manage a `dev` environment.
    Since we are going to use the same set of hosts, we could just convert our existing
    inventory to dev and add a parent group after the name of the environment:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个文件，以便我们可以管理`dev`环境。由于我们将使用相同的一组主机，因此我们可以将现有的清单转换为dev，并在环境名称后添加一个父组：
- en: '[PRE8]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add all the groups to the `dev` environment as:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有组添加到`dev`环境中，如下所示：
- en: '[PRE9]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The inventory file is shown as follows and we''ve to make the following changes:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 清单文件如下所示，我们必须进行以下更改：
- en: 'Now, let''s create a `group_vars` file for the `dev` environment and override
    the environment name:'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们为`dev`环境创建一个`group_vars`文件，并覆盖环境名称：
- en: '[PRE10]'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This time, we are going to run the playbook as:'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这一次，我们将以以下方式运行playbook：
- en: '[PRE11]'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We''ll see the following screenshot as the output:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将看到以下截图作为输出：
- en: '![Creating a development environment](img/B03800_09_08.jpg)'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![创建开发环境](img/B03800_09_08.jpg)'
- en: Review questions
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: 'Do you think you''ve understood this chapter well enough? Try answering the
    following questions to test your understanding:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否认为自己已经足够了解本章了？尝试回答以下问题来测试您的理解：
- en: How do you specify multiple host inventories for the same environment?
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何为同一环境指定多个主机清单？
- en: If you define a variable in the `environments/dev/group_vars/all` file and the
    same in the `group_vars/all` file, which one will take precedence?
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在`environments/dev/group_vars/all`文件中定义了一个变量，同时在`group_vars/all`文件中也定义了相同的变量，哪个会优先？
- en: How do you create a group of groups in a host inventory file?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在主机清单文件中创建一组组？
- en: Summary
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, you learned how to create multiple environments that map to
    the software development workflow or the phases. We started with a brief overview
    of inventory groups and inventory variables, specifically, the `group_vars` file.
    This was followed by the two approaches used to manage environments. Finally,
    we refactored our code, went on to create the `dev` environment, and tested it
    by overriding one variable from the environment. In the next chapter, you are
    going to learn about infrastructure orchestration and how Ansible shines when
    it comes to orchestrating complex infrastructure workflows, zero downtime deployments,
    and so on.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何创建与软件开发工作流程或阶段相对应的多个环境。我们从清单组和清单变量的简要概述开始，特别是`group_vars`文件。接着是用于管理环境的两种方法。最后，我们重构了我们的代码，继续创建了`dev`环境，并通过覆盖环境中的一个变量进行了测试。在下一章中，您将学习有关基础设施编排以及Ansible在编排复杂基础设施工作流程、零停机部署等方面的优势。
