- en: Jira Integration with Automated Testing Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jira与自动化测试工具集成
- en: In the previous chapters, we have learned what test management is and how Jira
    helps SQA teams manage the testing process effectively. Now, let's see how Jira
    and the DevOps pipeline can be leveraged to automate and manage test execution
    to improve agility in the development life cycle.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们已经了解了什么是测试管理，以及Jira如何帮助SQA团队有效地管理测试过程。现在，让我们看看如何利用Jira和DevOps管道来自动化和管理测试执行，以改善开发生命周期中的敏捷性。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the DevOps pipeline
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解DevOps管道
- en: Configuring Jira plugins to connect to Jenkins
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Jira插件以连接Jenkins
- en: Understanding an example workflow to integrate and execute automated scripts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解集成和执行自动化脚本的示例工作流程
- en: We will also learn how Jira helps with **continuous integration** (**CI**) and
    **continuous delivery** (**CD**) in a software project.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将学习Jira如何在软件项目中帮助**持续集成**（**CI**）和**持续交付**（**CD**）。
- en: Understanding the DevOps pipeline
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解DevOps管道
- en: 'DevOps is a software development paradigm that involves a cycle of continuous
    development, testing, integration, deployment, and monitoring. This model is the
    result of maturing software development practices, especially with the advent
    of the Agile methodologies, which require faster product and service releases
    while ensuring adequate quality measures. The following diagram shows the stages
    in the DevOps cycle:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps是一个涉及持续开发、测试、集成、部署和监控循环的软件开发范式。这个模型是成熟的软件开发实践的结果，特别是随着敏捷方法学的出现，它要求更快的产品和服务发布，同时确保足够的质量措施。以下图表显示了DevOps周期中的各个阶段：
- en: '![](Images/d4a8827a-a5d3-4a1d-a164-fcd1ba29f728.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d4a8827a-a5d3-4a1d-a164-fcd1ba29f728.png)'
- en: As you can see in the preceding diagram, DevOps requires development, testing,
    and operations' functions to act in tandem. DevOps phases are basically an automated
    and streamlined implementation of the development phase in the Agile SDLC.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，DevOps需要开发、测试和运维功能协同工作。DevOps阶段基本上是敏捷SDLC中开发阶段的自动化和流程化实现。
- en: In the development phase, developers start writing code based on the requirements
    for the product. Also, testers start writing test cases or scripts for automated
    testing. This requires developers and testers to make several commits of their
    artifacts while maintaining several versions of their code and scripts before
    a final working build can be achieved. Hence, source code management is essential
    for effective and productive development. This can be problematic in a team environment
    without a version control tool. Hence, DevOps employs several version controlling
    tools, such as GitHub, Bitbucket, and Team Foundation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发阶段，开发人员根据产品需求开始编写代码。同时，测试人员开始编写自动化测试的测试用例或脚本。这要求开发人员和测试人员在实现最终可工作的构建之前，对其代码和脚本的多个版本进行多次提交。因此，源代码管理对于有效和高效的开发至关重要。在没有版本控制工具的团队环境中，这可能会成为一个问题。因此，DevOps采用了几种版本控制工具，如GitHub、Bitbucket和Team
    Foundation。
- en: Once the developer commits the code, the DevOps processes get triggered, which
    automatically compiles and builds the code along with the other set of code commits
    from the rest of the team. If proper unit tests have been written, DevOps processes
    and then executes them to assert whether the results match expectations. Any defects
    or issues found at this stage are communicated through emails and tickets to the
    development team. There are several tools on the market for CI, such as Jenkins
    and Circle CI. We will be looking at utilizing Jenkins with Jira in this chapter.
    Jenkins is an open source tool for CI. It can be integrated with several software
    development tools to automate the process of CI/CD.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开发人员提交了代码，DevOps流程就会被触发，自动编译和构建代码以及团队其他成员的代码提交。如果编写了适当的单元测试，DevOps流程会执行这些测试以断言结果是否符合预期。在这个阶段发现的任何缺陷或问题都会通过电子邮件和工单通知给开发团队。市场上有几种CI工具，如Jenkins和Circle
    CI。在本章中，我们将学习如何利用Jenkins与Jira进行集成。Jenkins是一个用于CI的开源工具。它可以与多种软件开发工具集成，以自动化CI/CD的过程。
- en: Once the build passes the unit tests and integration tests at the development
    level, the release build is deployed to appropriate testing servers for the testing
    team to initiate their tests. At this point, automation test scripts (if available)
    are triggered to test the build. Automation ensures that the DevOps phases are
    continuous; otherwise, it leads to bottlenecks in the agility of the development
    process. There are several test automation frameworks and tools available, such
    as Selenium, TestComplete, and Eggplant, which can help to automate the testing
    process.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建通过了开发级别的单元测试和集成测试，发布构建就会部署到适当的测试服务器上，供测试团队启动他们的测试。此时，如果有自动化测试脚本，将会触发自动化测试来测试构建。自动化确保了DevOps阶段的连续性；否则，会导致开发过程的敏捷性受阻。有几种测试自动化框架和工具可用，如Selenium、TestComplete和Eggplant，可以帮助自动化测试过程。
- en: The build, once it is tested and fixed for all defects, is then ready to be
    deployed. After appropriate approvals from the product team and stakeholders,
    it is then deployed to the production server. Containerization of deployed builds
    helps facilitate resilient servers, as well as effective load balancing and configuration
    management. Numerous containerization tools are available on the market, including
    Docker, Ansible, and Kubernetes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一旦经过测试并修复了所有缺陷，就准备好部署了。经过产品团队和利益相关者的适当批准后，它将部署到生产服务器上。部署构建的容器化有助于促进弹性服务器，以及有效的负载平衡和配置管理。市场上有许多容器化工具，包括Docker、Ansible和Kubernetes。
- en: All phases of the DevOps process require continuous monitoring, using tools
    such as Prometheus, Splunk, and Ganglia, to alert the development teams to issues
    that need to be resolved efficiently. Continuous monitoring is necessary for addressing
    bottlenecks and improving processes for a faster delivery mechanism. Continuous
    feedback is another mechanism that improves the product by helping the team plan
    for the next deployment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps流程的所有阶段都需要持续监控，使用Prometheus、Splunk和Ganglia等工具，以提醒开发团队需要高效解决的问题。持续监控对于解决瓶颈并改进更快交付机制的流程至关重要。持续反馈是另一种通过帮助团队规划下一次部署来改进产品的机制。
- en: Now that we understand the basics of the DevOps process, let's see how we can
    configure Jenkins to integrate it with Jira and test automation tools.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了DevOps流程的基础知识，让我们看看如何配置Jenkins与Jira和测试自动化工具集成。
- en: Configuring Jira plugins to connect to Jenkins
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Jira插件连接到Jenkins
- en: Each of the synapseRT, Zephyr, and Test Management tools for Jira plugins have
    their own way of connecting with CI/CD tools, such as Jenkins. We will be looking
    at how to install and configure each of these Jira plugins for Jenkins.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: synapseRT、Zephyr和Jira的测试管理工具插件都有各自连接CI/CD工具（如Jenkins）的方式。我们将看看如何为Jenkins安装和配置这些Jira插件。
- en: synapseRT
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: synapseRT
- en: 'synapseRT comes pre-installed with integration with CI/CD tools. Let''s configure
    the plugin to connect to our Jenkins installation:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: synapseRT预先安装了与CI/CD工具的集成。让我们配置插件以连接到我们的Jenkins安装：
- en: Go to Administration | Add-ons | synapseRT | Integration and click on the Add
    button.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Administration | Add-ons | synapseRT | Integration，然后点击“添加”按钮。
- en: 'Set Jenkins as the Type of application and provide the Jenkins URL. In our
    case, we have hosted Jira on a Docker instance, while Jenkins is hosted on the
    localhost at port `8081`. Hence, we provide `http://host.docker.internal:8081` as
    the URL instead of `http://localhost:8081`, along with the User and Password for
    the Jenkins instance:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Jenkins设置为应用程序类型，并提供Jenkins URL。在我们的情况下，我们在Docker实例上托管了Jira，而Jenkins托管在端口`8081`的本地主机上。因此，我们提供`http://host.docker.internal:8081`作为URL，而不是`http://localhost:8081`，以及Jenkins实例的用户名和密码：
- en: '![](Images/60f8e221-81af-42e4-85ad-96363774797d.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/60f8e221-81af-42e4-85ad-96363774797d.png)'
- en: For more information or clarification on issues regarding configuring and setting
    up synapseRT for Jenkins, visit [https://bit.ly/2RBEAfA](https://bit.ly/2RBEAfA).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有关配置和设置synapseRT与Jenkins的问题的更多信息或澄清，请访问[https://bit.ly/2RBEAfA](https://bit.ly/2RBEAfA)。
- en: Zephyr
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zephyr
- en: 'Zephyr provides plugins for integrating with Jenkins:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Zephyr提供了与Jenkins集成的插件。
- en: 'To install the plugin, click on Manage Jenkins | Manage Plugins:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装插件，请点击“管理Jenkins”|“管理插件”：
- en: '![](Images/4ed9efdf-0476-4123-a5dc-0a9ea2c32e3c.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/4ed9efdf-0476-4123-a5dc-0a9ea2c32e3c.png)'
- en: 'Click on the Available tab, search for `Zephyr for Jira`, and click on either
    the Install without restart or the Download now and install after restart button.
    Once installed successfully, the plugin will be visible on the Installed tab:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“可用”选项卡，搜索“Zephyr for Jira”，然后点击“无需重启安装”或“立即下载并在重启后安装”按钮。安装成功后，插件将显示在“已安装”选项卡上：
- en: '![](Images/b6d63a0c-f471-4184-8c53-e3190ab13efe.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b6d63a0c-f471-4184-8c53-e3190ab13efe.png)'
- en: Once it's installed, we can configure the plugin to connect it with Zephyr for
    Jira in our instance of Jira.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，我们可以配置插件以将其与我们Jira实例中的Zephyr for Jira连接。
- en: Now, click on Manage Jenkins and click on Configure System. If the plugin ...
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击“管理Jenkins”，然后点击“配置系统”。如果插件...
- en: Test Management
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试管理
- en: Test Management for Jira provides plugins for integrating with Jenkins.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Jira的测试管理提供了与Jenkins集成的插件。
- en: To install the plugin, click on Manage Jenkins | Manage Plugins, just as you
    did for Zephyr.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装插件，请点击“管理Jenkins”|“管理插件”，就像你为Zephyr所做的那样。
- en: 'Then, click on the Available tab, search for `Test Management for Jira`, and
    click on either the Install without restart or the Download now and install after
    restart button. Once installed successfully, the plugin will be visible on the
    Installed tab:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击“可用”选项卡，搜索“Jira的测试管理”，然后点击“无需重启安装”或“立即下载并在重启后安装”按钮。安装成功后，插件将显示在“已安装”选项卡上：
- en: '![](Images/de5e7893-53c8-4c7a-b4fd-53271ab0f0bf.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/de5e7893-53c8-4c7a-b4fd-53271ab0f0bf.png)'
- en: Once it's installed, we can configure the plugin to connect it with Test Management
    for Jira in our instance of Jira. Click on Manage Jenkins and click on Configure
    System. If the plugin was installed correctly, the configure system will have
    a section as Test Management for Jira. Select the type of Jira instance in your
    organization. In our case, we select the Jira Server(s).
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装后，我们可以配置插件以将其与我们Jira实例中的测试管理连接。点击“管理Jenkins”，然后点击“配置系统”。如果插件安装正确，配置系统将有一个名为“Jira的测试管理”的部分。选择组织中Jira实例的类型。在我们的情况下，我们选择了Jira服务器。
- en: 'Provide the Jira URL and the credentials that are connected to the projects
    in Jira. Click on the Test Configuration button to validate the settings. If everything
    is validated, it will look like this:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供Jira URL和与Jira项目连接的凭据。点击“测试配置”按钮验证设置。如果一切验证通过，它会看起来像这样：
- en: '![](Images/cc85b9bd-b12f-48e5-8c62-0f7f1a1e83ce.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cc85b9bd-b12f-48e5-8c62-0f7f1a1e83ce.png)'
- en: 'For more information or clarification on issues regarding configuring and setting
    up Test Management for Jira for Jenkins, visit the following link: [https://www.adaptavist.com/doco/display/KT/Jenkins](https://www.adaptavist.com/doco/display/KT/Jenkins).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 有关配置和设置Jira的测试管理插件与Jenkins的问题的更多信息或澄清，请访问以下链接：[https://www.adaptavist.com/doco/display/KT/Jenkins](https://www.adaptavist.com/doco/display/KT/Jenkins)。
- en: Example workflow to integrate and execute automated scripts
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成和执行自动化脚本的示例工作流程
- en: 'Now that we have configured our plugins to integrate with Jenkins, we now see
    an example of how the DevOps pipeline functions with each plugin. For this workflow,
    we use the following automated test script:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了插件与Jenkins集成，我们现在看到了DevOps流水线如何使用每个插件的示例。对于这个工作流程，我们使用以下自动化测试脚本：
- en: 'Create a test automation code in Eclipse with a TestNG build script in XML. For
    this purpose, we have created the code in Java using Eclipse. We have created
    a new Java project in a new package named `JenkinsDemoPkg` with a class named
    `demoJenkins`. We also use `JenkinsDemoPkg.demoJenkins: testJenkins` to get the
    complete name of the class and method, which will be used for tracking in plugins:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在Eclipse中使用TestNG构建脚本的测试自动化代码。为此，我们使用Eclipse在Java中创建了代码。我们在一个名为`JenkinsDemoPkg`的新包中创建了一个新的Java项目，其中包含一个名为`demoJenkins`的类。我们还使用`JenkinsDemoPkg.demoJenkins:
    testJenkins`来获取类和方法的完整名称，这将用于插件中的跟踪：'
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: synapseRT
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: synapseRT
- en: Let's see the steps to integrate Jenkins with synapseRT.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看将Jenkins与synapseRT集成的步骤。
- en: 'Capture the results of the build action as a post-build activity. To capture
    the results of the build in Jenkins so that synapseRT can pull them, the Post-build
    Actions need to be configured for the Jenkins job as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 捕获构建操作的结果作为后期构建活动。为了捕获Jenkins中的构建结果，以便synapseRT可以拉取它们，需要为Jenkins作业配置后期构建操作如下：
- en: '![](Images/d9bcc824-10fc-4f14-95b9-93131e34108b.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d9bcc824-10fc-4f14-95b9-93131e34108b.png)'
- en: 'synapseRT allows us to trigger the Jenkins job from within the test cycle.
    For synapseRT to be able to track the execution results, it needs the Test Reference
    to be added to the test case in the Automation section:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: synapseRT允许我们从测试周期内触发Jenkins作业。为了synapseRT能够跟踪执行结果，需要将测试参考添加到自动化部分的测试用例中：
- en: '![](Images/7a6e408b-72bd-4aca-95a5-7f994518f8a9.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7a6e408b-72bd-4aca-95a5-7f994518f8a9.png)'
- en: 'The Automation | Test Reference is the complete name of the module we captured
    in step 1\. Then, add the test case to a test cycle and click on the Run button
    to trigger the Jenkins job:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动化|测试参考是我们在第1步中捕获的模块的完整名称。然后，将测试用例添加到测试周期，并单击“运行”按钮以触发Jenkins作业：
- en: '![](Images/8ba3151c-62fd-4661-b1df-61aa751f7dd9.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8ba3151c-62fd-4661-b1df-61aa751f7dd9.png)'
- en: 'When you click the Run button, the Jenkins job starts running:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当单击“运行”按钮时，Jenkins作业开始运行：
- en: '![](Images/fa12d248-1d95-419f-bbc6-db454ec7be58.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/fa12d248-1d95-419f-bbc6-db454ec7be58.png)'
- en: 'Capture the result of the build in the Jira plugin. After around 60 seconds,
    the results of the job will be captured in Jira:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jira插件中捕获构建结果。大约60秒后，作业的结果将在Jira中被捕获：
- en: '![](Images/7b4a634d-c0a6-4402-bb19-a7e1e0b5a863.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/7b4a634d-c0a6-4402-bb19-a7e1e0b5a863.png)'
- en: Zephyr
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zephyr
- en: Let's see the steps to integrate Jenkins with Zephyr.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看将Jenkins与Zephyr集成的步骤。
- en: 'Capture the results of the build action as a post-build activity. To capture
    the results of the build in Jenkins so that Zephyr can pull it, the Post-build
    Actions need to be configured for the Jenkins job. Provide the Project Name for
    the Zephyr project and select the appropriate Cycle and Version:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将构建操作的结果作为后期构建活动捕获。为了捕获Jenkins中的构建结果，以便Zephyr可以拉取它，需要为Jenkins作业配置后期构建操作。为Zephyr项目提供项目名称，并选择适当的周期和版本：
- en: '![](Images/18fd32d4-10fd-47dd-9215-6f1c335fc7dd.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/18fd32d4-10fd-47dd-9215-6f1c335fc7dd.png)'
- en: 'To trigger the Jenkins job, click on the Build Now button after clicking on
    the job name:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要触发Jenkins作业，请在单击作业名称后单击“立即构建”按钮：
- en: '![](Images/8a885e80-c5a9-4e4c-b4e9-3bf37e21818b.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/8a885e80-c5a9-4e4c-b4e9-3bf37e21818b.png)'
- en: Capture the result of the build in the Jira plugin. After the Jenkins job completes,
    the ...
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Jira插件中捕获构建结果。Jenkins作业完成后，...
- en: Test Management
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试管理
- en: Integrating Test Management for Jira with Jenkins and other CI/CD tools is like
    the setup we performed for Zephyr. This has been covered in detail in the help
    section at the following link: [https://www.adaptavist.com/doco/display/KT/Integrations](https://www.adaptavist.com/doco/display/KT/Integrations).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 将Jira的测试管理与Jenkins和其他CI/CD工具集成，就像我们为Zephyr执行的设置一样。这在以下链接的帮助部分中有详细介绍：[https://www.adaptavist.com/doco/display/KT/Integrations](https://www.adaptavist.com/doco/display/KT/Integrations)。
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the DevOps pipeline and execution using Jira
    plugins. We learned how the DevOps pipeline can be leveraged in a software development
    project to become truly agile and deliver continuously, while improving in making
    deliveries. We configured our Test Management plugins for Jira to integrate with
    Jenkins as our CI/CD tool. We saw a simple hands-on example of working in the
    DevOps pipeline for automating test case management.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了使用Jira插件的DevOps流水线和执行。我们了解了如何在软件开发项目中利用DevOps流水线，实现真正的敏捷交付，并不断改进交付过程。我们配置了我们的Jira测试管理插件，以与Jenkins集成为我们的CI/CD工具。我们看到了一个简单的实际示例，演示了在DevOps流水线中自动化测试用例管理。
- en: Here comes the end of our long journey. I hope you enjoyed reading this book!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们漫长的旅程到此结束。希望您喜欢阅读本书！
