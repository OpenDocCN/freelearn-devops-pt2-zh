- en: Ansible Windows Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible Windows模块
- en: So far, we have been targeting Linux servers. In this chapter, we will take
    a look at the ever-growing collection of core Ansible modules that support and
    interact with Windows-based servers. Personally, coming from an almost exclusively
    macOS and Linux background, it felt a little odd to be using a tool that is not
    natively supported on Windows to manage Windows.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在针对Linux服务器进行操作。在本章中，我们将看一下支持和与基于Windows的服务器进行交互的核心Ansible模块的不断增长的集合。就个人而言，来自几乎完全是macOS和Linux背景，使用一个在Windows上没有本地支持的工具来管理Windows感觉有点奇怪。
- en: However, as I am sure you will agree by the end of the chapter, its developers
    have made the process of introducing Windows workloads into your playbook as seamless
    and familiar as possible.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我相信在本章结束时，您会同意，它的开发人员已经尽可能地使将Windows工作负载引入到您的playbook中的过程变得无缝和熟悉。
- en: 'In this chapter, we will learn how to build our Windows servers locally using
    Vagrant and then take our playbooks to the public cloud. We will cover:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用Vagrant在本地构建我们的Windows服务器，然后将我们的playbooks移到公共云。我们将涵盖：
- en: Enabling features in Windows
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows中启用功能
- en: Launching Windows instances in AWS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWS中启动Windows实例
- en: Creating users
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户
- en: Installing third-party packages using Chocolatey
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Chocolatey安装第三方软件包
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As in the previous chapter, we are going to be using Vagrant and also AWS. The
    Vagrant box we will be using contains an evaluation copy of Windows 2016\. The
    Windows EC2 instance we will be launching in AWS will be fully licensed and therefore
    will carry an additional cost on top of the EC2 resource costs. As always, you
    can find complete copies of the playbooks in the accompanying repository at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter12](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter12).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一章一样，我们将使用Vagrant和AWS。我们将使用的Vagrant box包含Windows 2016的评估副本。我们将在AWS中启动的Windows
    EC2实例将是完全许可的，因此将在EC2资源成本之上产生额外的费用。与往常一样，您可以在附带的存储库中找到完整的playbooks，网址为[https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter12](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter12)。
- en: Up-and-running
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动和运行
- en: For this section, we are going to use Vagrant to launch a Windows 2016 server
    just like we originally did in [Chapter 2](121e7191-52e8-4dac-a48b-9dd42f1fb2b0.xhtml),
    *Installing and Running Ansible*. Let's start by looking at the Vagrantfile we
    will be using to launch our host.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本节，我们将使用Vagrant来启动一个Windows 2016服务器，就像我们在[第2章](121e7191-52e8-4dac-a48b-9dd42f1fb2b0.xhtml)中所做的那样，*安装和运行Ansible*。让我们首先看一下我们将使用来启动我们主机的Vagrantfile。
- en: Vagrantfile
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrantfile
- en: 'This `Vagrantfile` doesn''t look too dissimilar from the ones we have been
    using to launch Linux hosts:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Vagrantfile`看起来与我们用来启动Linux主机的文件并没有太大的不同：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, we are replacing references to SSH Vagrant. We will be using
    the **Windows Remote Management** (**WinRM**) protocol, as well as Ansible, to
    interact with the virtual machine. By default, the `config.vm.communicator` is
    SSH, so overriding this with `winrm` means that we have to provide `config.winrm.username`
    and `config.winrm.password`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们正在替换对SSH Vagrant的引用。我们将使用**Windows远程管理**（**WinRM**）协议以及Ansible与虚拟机进行交互。默认情况下，`config.vm.communicator`是SSH，因此用`winrm`覆盖这个意味着我们必须提供`config.winrm.username`和`config.winrm.password`。
- en: Also, we are instructing Vagrant not to attempt to try and mount our local filesystem
    on the virtual machine, nor to add any additional IP addresses or network interfaces;
    instead, it should just forward the port from our localhost machine to the host.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们指示Vagrant不要尝试在虚拟机上挂载我们的本地文件系统，也不要添加任何额外的IP地址或网络接口；相反，它应该只是将本地主机的端口转发到主机。
- en: Finally, we are mapping port `8080` on our local machine to port `80` on the
    Windows host; more on that later in the chapter.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将本地机器上的端口`8080`映射到Windows主机上的端口`80`；本章后面会详细介绍。
- en: 'We can launch the host using one of the following commands:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令之一启动主机：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will use VirtualBox, or we can use VMWare by running:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使用VirtualBox，或者我们可以通过运行以下命令使用VMWare：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The Vagrant box we are using is several gigabytes in size so it will take a
    little while to download, but once downloaded you should see something like the
    following output:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的Vagrant box大小为几个GB，因此下载需要一些时间，但一旦下载完成，您应该会看到以下输出：
- en: '![](assets/e80b27cd-f789-4c08-be32-e6ac32f2a108.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e80b27cd-f789-4c08-be32-e6ac32f2a108.png)'
- en: 'Once the machine has launched, you will find that your virtual machine has
    opened a window and that the Windows desktop is accessible, as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦机器启动，您会发现您的虚拟机已经打开了一个窗口，Windows桌面是可访问的，如下所示：
- en: '![](assets/4a8f7e70-8323-4dd5-bfcd-6492d589b261.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4a8f7e70-8323-4dd5-bfcd-6492d589b261.png)'
- en: Just minimize this window for now as we will not be interacting with Windows
    directly. Closing the window may suspend and power down the virtual machine.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在暂时最小化这个窗口，因为我们将不直接与Windows交互。关闭窗口可能会暂停并关闭虚拟机。
- en: Now that we have our Windows host up-and-running, we need to install a few supporting
    Python modules, to allow Ansible to interact with it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的Windows主机已经启动运行，我们需要安装一些支持Python模块，以便让Ansible与其进行交互。
- en: Ansible preparation
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible准备
- en: As already mentioned, Ansible will be using WinRM to interact with our Windows
    host.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Ansible将使用WinRM与我们的Windows主机进行交互。
- en: WinRM provides access to a SOAP-like protocol called WS-Management. Unlike SSH,
    which provides the user with an interactive shell to manage the host, WinRM accepts
    scripts that are executed and then the results are passed back to you.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: WinRM提供对称为WS-Management的类似SOAP的协议的访问。与提供用户交互式shell以管理主机的SSH不同，WinRM接受执行的脚本，然后将结果传递回给您。
- en: 'To be able to use WinRM, Ansible requires us to install a few different Python
    modules, Linux users can use the following command to install them:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够使用WinRM，Ansible要求我们安装一些不同的Python模块，Linux用户可以使用以下命令来安装它们：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'macOS users may need to perform the following command if they get errors about
    `pyOpenSSL` that can''t be updated, as it is part of the core operating system:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果macOS用户在更新时出现关于无法更新`pyOpenSSL`的错误，那么可能需要执行以下命令，因为它是核心操作系统的一部分：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once installed, we should now be able to interact with our Windows host once
    we configure a host inventory file. The file, called `production`, looks like
    the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们现在应该能够与我们的Windows主机进行交互，一旦我们配置了主机清单文件。该文件名为`production`，看起来像下面这样：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, we have removed all references to SSH and replaced them with
    WinRM (`ansible_connection`). Again, we have to provide a username (`ansible_user`)
    and password (`ansible_password`). Due to the way the Vagrant box we are using
    was built, we are not using the default HTTPS scheme and are instead using the
    HTTP scheme (`ansible_winrm_scheme`). This means that we have to use port `55985`
    (`ansible_port`) rather than port `99586`. Both of these ports are mapped from
    our Ansible controller to ports `9585` and `5986` on the Windows host.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们已经删除了所有关于SSH的引用，并用WinRM (`ansible_connection`)替换了它们。同样，我们必须提供用户名(`ansible_user`)和密码(`ansible_password`)。由于我们使用的Vagrant
    box是如何构建的，我们没有使用默认的HTTPS方案，而是使用了HTTP方案(`ansible_winrm_scheme`)。这意味着我们必须使用端口`55985`(`ansible_port`)，而不是端口`99586`。这两个端口都是从我们的Ansible控制器映射到Windows主机上的端口`9585`和`5986`。
- en: Now we have Windows up-and-running and Ansible configured, we can make a start
    on interacting with it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经让Windows运行起来并配置了Ansible，我们可以开始与它进行交互了。
- en: The ping module
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ping模块
- en: Not all Ansible modules work with Windows hosts and ping is one of them. There
    is a module provided for Windows called `win_ping` and we will be using that here.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的Ansible模块都适用于Windows主机，其中ping就是其中之一。为Windows提供了一个名为`win_ping`的模块，我们将在这里使用它。
- en: 'The command we need to run follows; as you can see, other than the module name
    it is exactly the way we executed it against a Linux host:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要运行的命令如下；正如你所看到的，除了模块名称之外，它与我们针对Linux主机执行的方式完全相同：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you are a macOS user and you receive an error like this one, then don''t
    worry; there is a workaround for it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是macOS用户，并且收到了这样的错误，那么不用担心；有一个解决方法：
- en: '![](assets/a12d7ab9-b466-4a78-bd25-e0fe996cedca.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a12d7ab9-b466-4a78-bd25-e0fe996cedca.png)'
- en: 'The error is a known issue that is being worked on by the Ansible team. In
    the meantime, run the following command, or add it to your `~/.bash_profile` file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误是Ansible团队正在解决的一个已知问题。与此同时，运行以下命令，或将其添加到你的`~/.bash_profile`文件中：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once you have run the command, you should see the following results:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你运行了该命令，你应该会看到以下结果：
- en: '![](assets/bcbfd9e5-a54d-4ca2-af5a-d44526f2ab6d.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bcbfd9e5-a54d-4ca2-af5a-d44526f2ab6d.png)'
- en: The next module we are going to run has been designed to work with Windows or
    Linux hosts.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要运行的下一个模块是专为Windows或Linux主机设计的。
- en: The setup module
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: setup模块
- en: 'As we found out in [Chapter 2](121e7191-52e8-4dac-a48b-9dd42f1fb2b0.xhtml),
    *Installing and Running Ansible*, the setup module gathers facts on our target
    host; if we call the module directly using the `ansible` command, the facts are
    printed directly on the screen. To call the module, we need to run the following
    command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第2章](121e7191-52e8-4dac-a48b-9dd42f1fb2b0.xhtml)中发现的，*安装和运行Ansible*，setup模块在我们的目标主机上收集事实；如果我们使用`ansible`命令直接调用该模块，事实将直接打印在屏幕上。要调用该模块，我们需要运行以下命令：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see from the following screen, the information displayed is pretty
    much identical to when we ran the module against a Linux host:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从下面的屏幕中看到的，显示的信息几乎与我们针对Linux主机运行模块时的情况完全相同：
- en: '![](assets/772fbc5a-3412-4f17-b8fd-0fa181aca54b.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/772fbc5a-3412-4f17-b8fd-0fa181aca54b.png)'
- en: 'We can use one of the playbooks from [Chapter 2](121e7191-52e8-4dac-a48b-9dd42f1fb2b0.xhtml),
    *Installing and Running Ansible*, to see this. In `playbook01.yml`, we used the
    facts gathered by Ansible when it first connects to the hosts to display a message.
    Let''s update that playbook to interact with our Windows host:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用[第2章](121e7191-52e8-4dac-a48b-9dd42f1fb2b0.xhtml)中的一个playbook，*安装和运行Ansible*，来查看这一点。在`playbook01.yml`中，我们使用了Ansible首次连接到主机时收集的事实来显示一条消息。让我们更新该playbook以与我们的Windows主机交互：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, we have updated the host group to use `windows` rather than
    `boxes`, and we also removed the `become` and `become_method` options as the user
    we will be connecting with has enough permissions to run the tasks we need.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们已经更新了主机组，使用`windows`而不是`boxes`，并且我们还删除了`become`和`become_method`选项，因为我们将连接的用户有足够的权限来运行我们需要的任务。
- en: 'We can run the playbook using the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令运行playbook：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following screen gives the expected output:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕显示了预期的输出：
- en: '![](assets/9c195618-d125-488d-a092-1ea2f3a863ef.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9c195618-d125-488d-a092-1ea2f3a863ef.png)'
- en: Now we have quickly covered the basics, we can look at doing something useful
    and install a few different software packages.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经快速地介绍了基础知识，我们可以考虑做一些有用的事情，安装一些不同的软件包。
- en: Installing a web server
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装web服务器
- en: One of the first things we did when we had our Linux host up-and-running was
    to install a web server, so let's look at repeating that process by installing
    and enabling **Internet Information Services** (**IIS**) on our Windows host.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们让我们的Linux主机运行起来时，我们做的第一件事之一就是安装web服务器，所以让我们通过在我们的Windows主机上安装和启用**Internet
    Information Services** (**IIS**)来重复这个过程。
- en: 'IIS is the default web server that ships with Windows Server, and it supports
    the following protocols: HTTP, HTTPS, and HTTP/2, as well as FTP, FTPS, SMTP,
    and NNTP. It was first released 22 years ago as part of Windows NT.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: IIS是随Windows Server一起提供的默认web服务器，它支持以下协议：HTTP、HTTPS和HTTP/2，以及FTP、FTPS、SMTP和NNTP。它是22年前作为Windows
    NT的一部分首次发布的。
- en: 'Like all of the playbooks we have covered so far, let''s create the basic skeleton
    by running the following commands:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们迄今为止所涵盖的所有playbook一样，让我们通过运行以下命令创建基本的框架：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now we can make a start on writing our playbook.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以开始编写我们的playbook了。
- en: IIS role
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IIS角色
- en: 'The first role we are going to look at installs and configures IIS and then,
    like our previous playbook, uploads an HTML file that is generated by Ansible
    using a template. First of all, change to the `web` folder and create the role
    by running:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要看的第一个角色安装和配置IIS，然后，与我们之前的剧本一样，使用模板由Ansible生成并上传HTML文件。首先，切换到`web`文件夹，并通过运行以下命令创建角色：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Starting with the default variable in `roles/iis/defaults/main.yml`, we can
    see that our role is going to be really similar to our Apache role we created
    when setting up the LAMP stack:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从`roles/iis/defaults/main.yml`中的默认变量开始，我们可以看到我们的角色将与我们设置LAMP堆栈时创建的Apache角色非常相似：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you can see, we are providing the path to the document root, a name for
    our HTML file, and also some content for our HTML file, for which the template
    can be found at `roles/iis/templates/index.html.j2`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们提供了文档根目录的路径，我们的HTML文件的名称，以及我们HTML文件的一些内容，模板可以在`roles/iis/templates/index.html.j2`中找到：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This is the exact template we used in our Apache role earlier on. Deploying
    IIS is quite simple, we just need two tasks in `roles/iis/tasks/main.yml` to accomplish
    this. Our first task can be found here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们之前在Apache角色中使用的确切模板。部署IIS非常简单，我们只需要在`roles/iis/tasks/main.yml`中完成两个任务。我们的第一个任务可以在这里找到：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This uses the `win_feature` module to enable and start the `Web-Server` and
    `Web-Common-Http` features. The next and final task deploys our HTML page using
    the `win_template` module:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用`win_feature`模块来启用和启动`Web-Server`和`Web-Common-Http`功能。下一个和最后一个任务使用`win_template`模块部署我们的HTML页面：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'As you can see, the syntax is pretty much the same as the standard `template`
    module. Now that we have our role completed, we can run the playbook, copy the
    content of the host inventory file, which we used in the previous section, into
    the `production` file, and update `site.yml` so it contains the following content:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，语法与标准的`template`模块几乎相同。现在我们的角色已经完成，我们可以运行剧本，将主机清单文件的内容复制到我们在上一节中使用的`production`文件中，并更新`site.yml`，使其包含以下内容：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You can then run the playbook using the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用以下命令运行剧本：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output of the playbook run should look something like the following Terminal
    output:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 剧本运行的输出应该类似于以下终端输出：
- en: '![](assets/9a44a6c6-53ec-4d84-ae30-40ee1bf3f1d7.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9a44a6c6-53ec-4d84-ae30-40ee1bf3f1d7.png)'
- en: 'Once complete, you should be able to open the web browser on your local machine
    and go to `http://localhost:8080/`, which should display the default IIS page:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您应该能够在本地计算机上打开Web浏览器并转到`http://localhost:8080/`，这应该会显示默认的IIS页面：
- en: '![](assets/174387ff-ba12-4aad-b513-0686c5c10365.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/174387ff-ba12-4aad-b513-0686c5c10365.png)'
- en: 'Opening `http://localhost:8080/ansible.html` will show the page we uploaded:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`http://localhost:8080/ansible.html`将显示我们上传的页面：
- en: '![](assets/55b8632c-0a21-4987-81f4-b90d0beea36a.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/55b8632c-0a21-4987-81f4-b90d0beea36a.png)'
- en: ASP.NET role
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET角色
- en: 'Now we have IIS up-and-running, let''s look at enabling ASP.NET support. Again,
    let''s start by creating the role:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动了IIS，让我们看看如何启用ASP.NET支持。同样，让我们首先创建角色：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Starting with the variables in `roles/asp/defaults/main.yml`, you can see that
    they look similar to the HTML ones except that we have prefixed them with `.aspx`
    so that they do not clash with the variables from the `iis` role:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 从`roles/asp/defaults/main.yml`中的变量开始，您可以看到它们看起来与HTML变量类似，只是我们已经用`.aspx`作为前缀，这样它们就不会与`iis`角色的变量冲突：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As you can see from the bottom of the page, we are including a function that
    prints the machine name, which in our case should be Vagrant, and also the date
    and time.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从页面底部可以看出，我们包含了一个打印机器名称的函数，这在我们的情况下应该是Vagrant，还有日期和时间。
- en: 'Next up, we have the template in `roles/asp/templates/default.aspx.j2`. Apart
    from the updated variables and filename, the content remains more or less the
    same as the one used in the `iis` role:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们在`roles/asp/templates/default.aspx.j2`中有模板。除了更新的变量和文件名外，内容基本上与在`iis`角色中使用的内容相同：
- en: '[PRE21]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, we have the tasks that should be placed in `roles/asp/tasks/main.yml`.
    First of all, we are using the `win_feature` module to enable the components needed
    to get our basic page up-and-running:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有应放置在`roles/asp/tasks/main.yml`中的任务。首先，我们使用`win_feature`模块来启用所需的组件，以便让我们的基本页面运行起来：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we need to create a folder to serve our page from and copy the rendered
    template:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建一个文件夹来提供我们的页面，并复制渲染的模板：
- en: '[PRE23]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As you can see, we are using the `win_template` module again. As well as using
    the `win_file` module, the syntax for the file module is extremely close to that
    of the `file` module we have been using in other chapters. The final task checks
    that the site is configured correctly in IIS:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们再次使用了`win_template`模块。除了使用`win_file`模块外，文件模块的语法与我们在其他章节中使用的`file`模块非常接近。最后一个任务检查了IIS中站点的配置是否正确：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `win_iis_webapplication` module is used for, as the name says, configuring
    web applications within IIS. This is not strictly required for our example, but
    it gives you an idea of what is possible.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`win_iis_webapplication`模块用于配置IIS中的Web应用程序，正如其名称所示。这在我们的示例中并不是严格要求的，但它可以让你了解可能的操作。'
- en: 'You may have noticed that, when we enabled the additional features, we sent
    a notification to restart IIS. This means we have to add a task to the `roles/asp/handlers/main.yml`
    file. This task uses the `win_service` module to restart the webserver:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，当我们启用了附加功能时，我们发送了一个重新启动IIS的通知。这意味着我们必须在`roles/asp/handlers/main.yml`文件中添加一个任务。此任务使用`win_service`模块重新启动Web服务器：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now that we have our completed role, we can look at running the playbook again.
    First, we need to add the new role to the `site.yml` file:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了角色，我们可以再次运行剧本。首先，我们需要将新角色添加到`site.yml`文件中：
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, we can run the playbook using the following command:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用以下命令运行剧本：
- en: '[PRE27]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This should give you something along the lines of the following output:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会给你以下输出的某种形式：
- en: '![](assets/0007233a-c7c0-42db-926b-db2729691502.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0007233a-c7c0-42db-926b-db2729691502.png)'
- en: 'Opening your browser and going to `http://localhost:8080/ansible/` should present
    you with something that looks similar to the following web page:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并转到`http://localhost:8080/ansible/`应该会显示类似以下网页的内容：
- en: '![](assets/97b229ab-ce2f-480d-bcba-b18f526dee35.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/97b229ab-ce2f-480d-bcba-b18f526dee35.png)'
- en: 'Let''s remove our Vagrant box and look at a few more modules. To remove the
    box, run:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们删除Vagrant框并查看更多模块。要删除框，请运行：
- en: '[PRE28]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We can now look at creating a user using Ansible, and also install a few desktop
    applications using Chocolatey on a server host in AWS.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用Ansible创建用户，并在AWS中的服务器主机上安装一些桌面应用程序。
- en: Interacting with AWS Windows instances
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与AWS Windows实例交互
- en: When we interacted with our local Windows Vagrant box, it was not using a secure
    connection; let's look at launching a Windows EC2 instance in an AWS instance
    and then interacting with it like we did with the CentOS 7 instance in [Chapter
    10](56e8175f-d1a8-4b63-ad3f-fe94ff55135e.xhtml), *Highly Available Cloud Deployments*.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们与本地Windows Vagrant框进行交互时，它并未使用安全连接；让我们看看如何在AWS实例中启动Windows EC2实例，然后像我们在[第10章](56e8175f-d1a8-4b63-ad3f-fe94ff55135e.xhtml)中与CentOS
    7实例进行交互一样与其交互。
- en: 'First of all, we need to create the folder structure for our new playbook:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要为新的playbook创建文件夹结构：
- en: '[PRE29]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Once we have the structure, we need to create four roles, starting with the
    AWS one.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了结构，我们需要创建四个角色，首先是AWS角色。
- en: AWS role
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS角色
- en: 'Our first role will create the VPC and launch the EC2 instance. To bootstrap
    the role change, go to the cloud folder and run:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个角色将创建VPC并启动EC2实例。要启动角色更改，请转到cloud文件夹并运行：
- en: '[PRE30]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s start with the contents of `roles/aws/defaults/main.yml` first:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先从`roles/aws/defaults/main.yml`的内容开始：
- en: '[PRE31]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As you can see, we are only going to be using a single subnet and we are going
    to be looking for a Windows Server 2016 AMI during the playbook run. Finally,
    we are setting a variable called `win_initial_password`, which will be used to
    set our Administrator password later in the playbook run.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们只会使用一个子网，并且在playbook运行期间将寻找Windows Server 2016 AMI。最后，我们正在设置一个名为`win_initial_password`的变量，该变量将用于在playbook运行期间稍后设置我们的管理员密码。
- en: 'Most of the tasks in `roles/aws/tasks/main.yml` are as you would expect. First,
    we set up the VPC, create the subnet, and find out your current IP addresses for
    use with the security group:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`roles/aws/tasks/main.yml`中的大多数任务都如您所期望的那样。首先，我们设置VPC，创建子网，并找出用于安全组的当前IP地址：'
- en: '[PRE32]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The security group has been updated so, rather than port 22, we are opening
    ports for remote desktop (port `3389`) and WinRM (ports `5985` and `5986`):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组已更新，因此我们不再打开端口22，而是打开远程桌面（端口`3389`）和WinRM（端口`5985`和`5986`）的端口：
- en: '[PRE33]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We then continue to build out our network by adding an internet gateway and
    routing before finding the right AMI ID to use:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们继续通过添加互联网网关和路由来构建我们的网络，然后找到要使用的正确AMI ID：
- en: '[PRE34]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now it is time to launch the EC2 instance; you may have noticed that we have
    not had to upload a key or any credentials. This is because we will actually inject
    a PowerShell script that executes when the instance is first booted. This script
    will set the administrator password and configure the instance so that Ansible
    can be run against it:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候启动EC2实例了；您可能已经注意到，我们不需要上传密钥或任何凭据。这是因为我们实际上将注入一个PowerShell脚本，该脚本在实例首次启动时执行。此脚本将设置管理员密码并配置实例，以便Ansible可以针对其运行：
- en: '[PRE35]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The script is a template called `userdata.j2`, which is injected into the instance
    at boot using the `user_data` key. We will take a look at the template in a moment;
    all that remains in this role is to add the instance to a host group and then
    wait for WinRM to be accessible:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本是一个名为`userdata.j2`的模板，它使用`user_data`键在实例启动时注入。我们将在一会儿看一下模板；在此角色中剩下的就是将实例添加到主机组，然后等待WinRM可访问：
- en: '[PRE36]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The `userdata.j2` template in `roles/aws/templates/` looks like the following:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`roles/aws/templates/`中的`userdata.j2`模板如下所示：'
- en: '[PRE37]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The first part of the script sets the password (`win_initial_password`) for
    the administrator user; the script then downloads and executes a PowerShell script
    directly from Ansible's GitHub repository. This script runs checks against the
    current WinRM configuration on the target instance and then makes the changes
    needed for Ansible to be able to securely connect. The script also configures
    all actions in WinRM to be logged to the instances event log.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本的第一部分设置了管理员用户的密码（`win_initial_password`）；然后，脚本直接从Ansible的GitHub存储库下载并执行PowerShell脚本。此脚本对目标实例上的当前WinRM配置进行检查，然后进行所需的更改，以便Ansible能够安全连接。脚本还配置了对实例事件日志的所有操作进行记录。
- en: User role
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户角色
- en: 'Next up, we have the user role, which we can run the following command to create:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有用户角色，可以运行以下命令来创建：
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This role creates a user for us to connect to our instance with. The defaults
    that can be found in `roles/user/defaults/main.yml` are as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此角色为我们创建了一个用户，以便我们连接到我们的实例。`roles/user/defaults/main.yml`中可以找到的默认值如下：
- en: '[PRE39]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'As you can see, here we are defining a user called `ansible` that has a 30-character
    random password. The `ansible` user will be a member of the `Users` and `Administrators`
    groups. There is a single task in `roles/user/tasks/main.yml` using the `win_user`
    module, which looks like:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这里我们定义了一个名为`ansible`的用户，该用户具有30个字符的随机密码。`ansible`用户将成为`Users`和`Administrators`组的成员。`roles/user/tasks/main.yml`中有一个使用`win_user`模块的单个任务，看起来像：
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Like all Windows modules, the syntax is similar to the Linux equivalent so you
    should have a good idea of what each key means. As you can see from the previous
    task, we are using a Jinja2 transformation to capitalize the first letter of the
    `ansible.username` variable.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有Windows模块一样，语法与Linux等效模块相似，因此您应该对每个键的含义有一个很好的了解。从前一个任务中可以看出，我们使用了Jinja2转换来大写`ansible.username`变量的第一个字母。
- en: Chocolatey role
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chocolatey角色
- en: The next role uses Chocolatey to install a few bits of software on the machine.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个角色使用Chocolatey在计算机上安装一些软件。
- en: Chocolatey is a package manager for Windows, similar in principle and functionality
    to Homebrew, which we used in earlier chapters to install the software we needed
    on macOS with a single command. Chocolatey simplifies the installation of packages
    on the command line by wrapping the installation process for most common Windows
    installers into a common set of PowerShell commands—perfect for an orchestration
    tool such as Ansible.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Chocolatey是Windows的软件包管理器，原理和功能类似于我们在早期章节中使用的Homebrew，在macOS上使用单个命令安装所需软件。Chocolatey通过将大多数常见Windows安装程序的安装过程包装成一组常见的PowerShell命令，简化了命令行上的软件包安装过程，非常适合像Ansible这样的编排工具。
- en: 'To add the files needed for the role, run the following command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加角色所需的文件，请运行以下命令：
- en: '[PRE41]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In `roles/choc/defaults/main.yml`, we have a list of the packages we want to
    install:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在`roles/choc/defaults/main.yml`中，我们有一个要安装的软件包列表：
- en: '[PRE42]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'As you can see, we want to install Notepad++, PuTTY, and Google Chrome. The
    task itself, which needs to be added to `roles/choc/tasks/main.yml`, looks like
    the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们想要安装Notepad++、PuTTY和Google Chrome。需要添加到`roles/choc/tasks/main.yml`的任务本身如下所示：
- en: '[PRE43]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Again, the `win_chocolatey` module takes a similar input to the package manager
    modules we have used in previous chapters when targeting a Linux-based host.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，`win_chocolatey`模块在针对基于Linux的主机时，与我们在之前章节中使用的软件包管理器模块接受类似的输入。
- en: Information role
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信息角色
- en: 'The final role we are creating is called `info`, and its only purpose is to
    output information on our newly launched and configured Windows Server 2016 EC2
    instance. As you may have already guessed, we need to run the following command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在创建的最终角色称为`info`，它的唯一目的是输出有关我们新启动和配置的Windows Server 2016 EC2实例的信息。正如您可能已经猜到的那样，我们需要运行以下命令：
- en: '[PRE44]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Once we have the files, add the following task to `roles/info/tasks/main.yml`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了这些文件，将以下任务添加到`roles/info/tasks/main.yml`中：
- en: '[PRE45]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: As you can see, this will provide us with the host to connect to, along with
    the username and password.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这将为我们提供要连接的主机，以及用户名和密码。
- en: Running the playbook
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行playbook
- en: 'Before we run the playbook, we need to add the following to `group_vars/common.yml`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行playbook之前，我们需要将以下内容添加到`group_vars/common.yml`中：
- en: '[PRE46]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The host inventory file called `production` should contain the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 名为`production`的主机清单文件应包含以下内容：
- en: '[PRE47]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'As you can see, we are using the WinRM connector to connect to our Windows
    instance using the administrator username and the password we set when running
    the user data script when launching the instance. The `site.yml` file should have
    the following content:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们使用WinRM连接器使用管理员用户名和在启动实例时运行用户数据脚本时设置的密码连接到我们的Windows实例。`site.yml`文件应该有以下内容：
- en: '[PRE48]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We can run the playbook using the following command, after first exporting
    our AWS credentials:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在首先导出AWS凭据后，我们可以使用以下命令运行playbook：
- en: '[PRE49]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'A slightly edited output of the playbook run follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: playbook运行的略有编辑的输出如下：
- en: '[PRE50]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'As you can see from the output, my EC2 instance has a hostname of `ec2-34-245-2-119.eu-west-1.compute.amazonaws.com`
    and the `ansible` user has a password of `Qb9LVPkUeZFRx5HLFgVllFrkqK7HHN`. I can
    connect to the instance using Microsoft RDP with those details (remember it is
    locked down to your IP address). As you can see from the following screenshot,
    I am connected as the Ansible user and have PuTTY and Notepad ++ open; you can
    also make out the shortcut to Google Chrome on the desktop:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看出，我的EC2实例的主机名是`ec2-34-245-2-119.eu-west-1.compute.amazonaws.com`，`ansible`用户的密码是`Qb9LVPkUeZFRx5HLFgVllFrkqK7HHN`。我可以使用这些详细信息连接到实例，使用Microsoft
    RDP（记住它被锁定到您的IP地址）。如下截图所示，我以Ansible用户身份连接，并打开了PuTTY和Notepad ++；您还可以看到桌面上的Google
    Chrome的快捷方式：
- en: '![](assets/0918ae5d-a6ea-4a31-96d2-8a95026cf543.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0918ae5d-a6ea-4a31-96d2-8a95026cf543.png)'
- en: The other thing you may have noticed is that we never had to install Chocolatey.
    As stated during the playbook run, if `win_chocolatey` doesn't find a Chocolatey
    installation on the target machine it will install and configure it automatically.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能注意到的另一件事是，我们从未安装过Chocolatey。正如在playbook运行期间所述，如果`win_chocolatey`在目标机器上找不到Chocolatey安装，它将自动安装和配置它。
- en: 'There is a playbook in the `Chapter12/cloud` folder in the GitHub repository
    that removes the resources we created here. To run this, use the following command:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub存储库的`Chapter12/cloud`文件夹中有一个playbook，用于删除我们在此处创建的资源。要运行此playbook，请使用以下命令：
- en: '[PRE51]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Make sure you double-check that everything has been removed as expected to ensure
    you do not get any unexpected bills.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您仔细检查了一切是否按预期被移除，以确保您不会收到任何意外的账单。
- en: Summary
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: As mentioned at the start of the chapter, using a traditional Linux tool such
    as Ansible on Windows always feels a little strange. However, I am sure you will
    agree that the experience is as Linux-like as possible. When I first started experimenting
    with the Windows modules, I was surprised that I managed to launch an EC2 Windows
    Server instance and managed to deploy a simple web application without ever having
    to remote-desktop into the target instance.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在本章开头提到的，使用诸如Ansible这样的传统Linux工具在Windows上总是感觉有点奇怪。然而，我相信您会同意，体验尽可能接近Linux。当我第一次尝试使用Windows模块时，我惊讶地发现我成功启动了一个EC2
    Windows Server实例，并成功部署了一个简单的Web应用程序，而无需远程桌面连接到目标实例。
- en: With each new release, Ansible gets more and more support for Windows-based
    hosts, making it easy to manage mixed workloads from your playbooks.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 随着每个新版本的发布，Ansible对基于Windows的主机的支持越来越多，从您的playbook轻松管理混合工作负载。
- en: In the next chapter, we are going to return to more familiar territory, for
    me at least, and look at how we can harden our Linux installation.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回到更熟悉的领域，至少对我来说是这样，并看看我们如何加固我们的Linux安装。
- en: Questions
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which of the following two modules can be used on both a Windows and Linux host,
    setup or file?
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下两个模块中哪一个可以在Windows和Linux主机上使用，setup还是file？
- en: 'True or false: You can use SSH to access your Windows target.'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：您可以使用SSH访问您的Windows目标。
- en: Explain the type of interface WinRM uses.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释WinRM使用的接口类型。
- en: Which Python module do you need to install to be able to interact with WinRM
    on macOS and Linux?
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要安装哪个Python模块才能在macOS和Linux上与WinRM进行交互？
- en: 'True or false: You can have a separate task to install Chocolatey before you
    use the `win_chocolatey` module.'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：您可以在使用`win_chocolatey`模块之前有一个单独的任务来安装Chocolatey。
- en: Update the playbook to install additional packages.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新playbook以安装额外的软件包。
- en: Further reading
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: You can find more information on the excellent Chocolatey at [http://chocolatey.org/](http://chocolatey.org/).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://chocolatey.org/](http://chocolatey.org/)找到有关优秀的Chocolatey的更多信息。
