- en: Handling the Kubernetes Package Manager
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理Kubernetes软件包管理器
- en: In this chapter, we are going to look into Helm, the Kubernetes package manager.
    Every successful and important platform must have a good packaging system. Helm
    was developed by Deis (acquired by Microsoft in April 2017) and later contributed
    to the Kubernetes project directly. We will start by understanding the motivation
    for Helm, its architecture, and its components. Then, we'll get hands-on experience
    and see how to use Helm and its charts within Kubernetes. This includes finding,
    installing, customizing, deleting, and managing charts. Last but not least, we'll
    cover how to create your own charts and handle versioning, dependencies, and templating.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入了解Helm，即Kubernetes软件包管理器。每个成功和重要的平台都必须有一个良好的打包系统。Helm由Deis开发（于2017年4月被微软收购），后来直接贡献给了Kubernetes项目。我们将从理解Helm的动机、架构和组件开始。然后，我们将亲身体验并了解如何在Kubernetes中使用Helm及其图表。这包括查找、安装、自定义、删除和管理图表。最后但同样重要的是，我们将介绍如何创建自己的图表，并处理版本控制、依赖关系和模板化。
- en: 'The following topics will be covered:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 将涵盖以下主题：
- en: Understanding Helm
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Helm
- en: Using Helm
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Helm
- en: Creating your own charts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自己的图表
- en: Understanding Helm
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Helm
- en: Kubernetes provides many ways to organize and orchestrate your containers at
    runtime, but it lacks a higher-level organization of grouping sets of images together.
    This is where Helm comes in. In this section, we'll go over the motivation for
    Helm, its architecture and components, and discuss what has changed in the transition
    from Helm Classic to Helm.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes提供了许多在运行时组织和编排容器的方式，但缺乏将一组图像进行更高级别组织的方式。这就是Helm的用武之地。在本节中，我们将讨论Helm的动机、其架构和组件，并讨论从Helm
    Classic过渡到Helm时发生了什么变化。
- en: The motivation for Helm
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Helm的动机
- en: 'Helm provides support for several important use cases:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Helm支持几个重要的用例：
- en: Managing complexity
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理复杂性
- en: Easy upgrades
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松升级
- en: Simple sharing
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单共享
- en: Safe rollbacks
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全回滚
- en: Charts can describe even the most complex apps, provide repeatable application
    installation, and serve as a single point of authority. In-place upgrades and
    custom hooks allow easy updates. It's simple to share charts that can be versioned
    and hosted on public or private servers. When you need to roll back recent upgrades,
    Helm provides a single command to roll back a cohesive set of changes to your
    infrastructure.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图表可以描述甚至最复杂的应用程序，提供可重复的应用程序安装，并作为单一的权威点。原地升级和自定义钩子允许轻松更新。共享图表很简单，可以在公共或私有服务器上进行版本控制和托管。当您需要回滚最近的升级时，Helm提供了一个命令来回滚基础设施的一致变化集。
- en: The Helm architecture
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Helm架构
- en: 'Helm is designed to perform the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Helm旨在执行以下操作：
- en: Create new charts from scratch
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从头开始创建新图表
- en: Package charts into chart archive (`tgz`) files
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图表打包成图表存档（`tgz`）文件
- en: Interact with chart repositories where charts are stored
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与存储图表的图表存储库进行交互
- en: Install and uninstall charts into an existing Kubernetes cluster
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图表安装和卸载到现有的Kubernetes集群中
- en: Manage the release cycle of charts that have been installed with Helm
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理使用Helm安装的图表的发布周期
- en: Helm uses a client-server architecture to achieve these goals.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Helm使用客户端-服务器架构来实现这些目标。
- en: Helm components
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Helm组件
- en: Helm has a server component that runs on your Kubernetes cluster and a client
    component that you run on a local machine.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Helm有一个在Kubernetes集群上运行的服务器组件和一个在本地机器上运行的客户端组件。
- en: The Tiller server
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tiller服务器
- en: 'The server is responsible for managing releases. It interacts with the Helm
    clients as well as the Kubernetes API server. Its main functions are as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器负责管理发布。它与Helm客户端以及Kubernetes API服务器进行交互。其主要功能如下：
- en: Listening for incoming requests from the Helm client
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听来自Helm客户端的传入请求
- en: Combining a chart and configuration to build a release
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结合图表和配置以构建发布
- en: Installing charts into Kubernetes
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将图表安装到Kubernetes中
- en: Tracking the subsequent release
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪后续发布
- en: Upgrading and uninstalling charts by interacting with Kubernetes
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过与Kubernetes交互来升级和卸载图表
- en: The Helm client
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Helm客户端
- en: 'You install the Helm client on your machine. It is responsible for the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您在您的机器上安装Helm客户端。它负责以下工作：
- en: Local chart development
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地图表开发
- en: Managing repositories
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理存储库
- en: Interacting with the Tiller server
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Tiller服务器交互
- en: Sending charts to be installed
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送图表以安装
- en: Asking for information about releases
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 询问有关发布的信息
- en: Requesting upgrades or uninstallation of existing releases
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求升级或卸载现有版本
- en: Using Helm
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Helm
- en: Helm is a rich package management system that lets you perform all the necessary
    steps to manage the applications installed on your cluster. Let's roll up our
    sleeves and get going.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Helm是一个丰富的软件包管理系统，可以让您执行管理集群上安装的应用程序所需的所有必要步骤。让我们卷起袖子，开始吧。
- en: Installing Helm
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Helm
- en: Installing Helm involves installing the client and the server. Helm is implemented
    in Go, and the same binary executable can serve as either client or server.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Helm涉及安装客户端和服务器。Helm是用Go实现的，同一个二进制可用作客户端或服务器。
- en: Installing the Helm client
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Helm客户端
- en: You must have Kubectl configured properly to talk to your Kubernetes cluster,
    because the Helm client uses the Kubectl configuration to talk to the Helm server
    (Tiller).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须正确配置Kubectl以与您的Kubernetes集群通信，因为Helm客户端使用Kubectl配置与Helm服务器（Tiller）通信。
- en: Helm provides binary releases for all platforms, at [https://github.com/kubernetes/helm/releases/latest](https://github.com/kubernetes/helm/releases/latest).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Helm为所有平台提供二进制发布，网址为[https://github.com/kubernetes/helm/releases/latest](https://github.com/kubernetes/helm/releases/latest)。
- en: For Windows, you can also use the `chocolatey` package manager, but it may be
    a little behind the official version, `https://chocolatey.org/packages/kubernetes-helm/<version>`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，您也可以使用`chocolatey`软件包管理器，但它可能比官方版本慢一点，`https://chocolatey.org/packages/kubernetes-helm/<version>`。
- en: 'For macOS and Linux, you can install the client from a script:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS和Linux，您可以从脚本安装客户端：
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'On macOS X, you can also use Homebrew:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS X上，您还可以使用Homebrew：
- en: '[PRE1]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Installing the Tiller server
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Tiller服务器
- en: Tiller typically runs inside your cluster. For development, it is sometimes
    easier to run Tiller locally.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Tiller通常在集群内运行。对于开发来说，有时在本地运行Tiller会更容易一些。
- en: Installing Tiller in-cluster
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在集群中安装Tiller
- en: 'The easiest way to install Tiller is from a machine where the Helm client is
    installed. Run the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Tiller的最简单方法是从安装了Helm客户端的机器上进行。运行以下命令：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will initialize both the client and the Tiller server on the remote Kubernetes
    cluster. When the installation is done, you will have a running Tiller pod in
    the `kube-system` namespace of your cluster:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在远程Kubernetes集群上初始化客户端和Tiller服务器。安装完成后，您将在集群的`kube-system`命名空间中有一个正在运行的Tiller
    pod：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also run `helm version` to check out both the client''s and the server''s
    version:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以运行`helm version`来查看客户端和服务器的版本：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Installing Tiller locally
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地安装Tiller
- en: 'If you want to run Tiller locally, you need to build it first. This is supported
    on Linux and macOS:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要在本地运行Tiller，首先需要构建它。这在Linux和macOS上都受支持：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The bootstrap target will attempt to install dependencies, rebuild the `vendor/`
    tree, and validate configuration.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 引导目标将尝试安装依赖项，重建`vendor/`树，并验证配置。
- en: The build target will compile Helm and place it in `bin/helm`. Tiller is also
    compiled and is placed in `bin/tiller`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 构建目标将编译Helm并将其放置在`bin/helm`中。Tiller也被编译并放置在`bin/tiller`中。
- en: Now you can just run `bin/tiller`. Tiller will connect to the Kubernetes cluster
    via your Kubectl configuration.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以运行 `bin/tiller`。Tiller 将通过您的 Kubectl 配置连接到 Kubernetes 集群。
- en: 'You need to tell the Helm client to connect to the local Tiller server. You
    can do it by setting an environment variable:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 需要告诉 Helm 客户端连接到本地的 Tiller 服务器。您可以通过设置环境变量来实现：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Otherwise, you can pass it as a command-line argument: `--host localhost:44134`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，您可以将其作为命令行参数传递：`--host localhost:44134`。
- en: Using Alternative Storage Backend
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用替代存储后端
- en: 'Helm 2.7.0 added the option to store release information as **secrets**. Earlier
    versions always stored release information in ConfigMaps. The secrets backend
    increases the security of charts. It''s a complement to general Kubernetes encryption
    at rest. To use the Secrets backend, you need to run Helm with the following command
    line:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 2.7.0 添加了将发布信息存储为 **secrets** 的选项。早期版本总是将发布信息存储在 ConfigMaps 中。secrets 后端增加了图表的安全性。它是一种通用
    Kubernetes 加密的补充。要使用 Secrets 后端，您需要使用以下命令行运行 Helm：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Finding charts
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找图表
- en: 'In order to install useful applications and software with Helm, you need to
    find their charts first. This is where the `helm search` command comes in. Helm,
    by default, searches the official Kubernetes `chart repository`, which is named
    `stable`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Helm 安装有用的应用程序和软件，您需要先找到它们的图表。这就是 `helm search` 命令发挥作用的地方。默认情况下，Helm 搜索官方的
    Kubernetes `chart 仓库`，名为 `stable`：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The official repository has a rich library of charts that represent all modern
    open source databases, monitoring systems, Kubernetes-specific helpers, and a
    slew of other offerings, such as a Minecraft server. You can search for specific
    charts, for example, let''s search for charts that contain `kube` in their name
    or description:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 官方仓库拥有丰富的图表库，代表了所有现代开源数据库、监控系统、特定于 Kubernetes 的辅助工具，以及一系列其他提供，比如 Minecraft 服务器。您可以搜索特定的图表，例如，让我们搜索包含
    `kube` 在其名称或描述中的图表：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s try another search:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试另一个搜索：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'What happened? Why does `mariadb` show up in the results? The reason is that
    `mariadb` (which is a fork of MySQL ) mentions MySQL in its description, even
    though you can''t see it in the truncated output. To get the full description,
    use the `helm inspect` command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？为什么 `mariadb` 出现在结果中？原因是 `mariadb`（它是 MySQL 的一个分支）在其描述中提到了 MySQL，即使在截断的输出中看不到。要获取完整的描述，请使用
    `helm inspect` 命令：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Installing packages
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装软件包
- en: 'OK. You''ve found the package of your dreams. Now, you probably want to install
    it on your Kubernetes cluster. When you install a package, Helm creates a release
    that you can use to keep track of the installation progress. Let''s install `MariaDB`
    using the `helm install` command. Let''s go over the output in detail. The first
    part of the output lists the name of the release - `cranky-whippet` in this case
    (you can choose your own with the `--name` flag), the namespace, and the deployment
    status:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 好了。您找到了梦想的软件包。现在，您可能想要在 Kubernetes 集群上安装它。当您安装一个软件包时，Helm 会创建一个发布，您可以使用它来跟踪安装进度。让我们使用
    `helm install` 命令安装 `MariaDB`。让我们详细查看输出。输出的第一部分列出了发布的名称 - 在这种情况下是 `cranky-whippet`（您可以使用
    `--name` 标志选择自己的名称）、命名空间和部署状态：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The second part of the output lists all the resources created by this chart.
    Note that the resource names are all derived from the release name:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的第二部分列出了此图表创建的所有资源。请注意，资源名称都是根据发布名称派生的：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The last part is notes that provide easy-to-understand instructions on how
    to use `MariaDB` in the context of your Kubernetes cluster:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一部分是提供如何在 Kubernetes 集群中使用 `MariaDB` 的易于理解的说明：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Checking installation status
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查安装状态
- en: 'Helm doesn''t wait for the installation to complete because it may take a while.
    The `helm status` command displays the latest information on a release in the
    same format as the output of the initial `helm install` command. In the output
    of the `install` command, you can see that the `PersistentVolumeClaim` had a `PENDING` status.
    Let''s check it out now:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Helm不会等待安装完成，因为这可能需要一些时间。`helm status`命令以与初始`helm install`命令的输出相同的格式显示发布的最新信息。在`install`命令的输出中，您可以看到`PersistentVolumeClaim`的`PENDING`状态。现在让我们来检查一下：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Hooray! It is bound now, and there is a volume attached with 8 GB capacity.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 万岁！它现在已绑定，并且附加了一个容量为8GB的卷。
- en: 'Let''s try to connect and verify that `mariadb` is indeed accessible. Let''s
    modify the suggested commands a little bit from the notes to connect. Instead
    of running `bash` and then running `mysql`, we can directly run the `mysql` command
    on the container:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试连接并验证`mariadb`是否确实可访问。让我们稍微修改一下注释中建议的命令以进行连接。我们可以直接在容器上运行`mysql`命令，而不是运行`bash`然后再运行`mysql`：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you don't see a command prompt, try pressing *Enter*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看不到命令提示符，请尝试按*Enter*键。
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Customizing a chart
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义图表
- en: 'Very often, as a user, you want to customize or configure the charts you install.
    Helm fully supports customization through `config` files. To learn about possible
    customizations, you can use the `helm inspect` command again, but this time, focus
    on the values. Here is a partial output:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 作为用户，您经常希望自定义或配置您安装的图表。Helm完全支持通过`config`文件进行自定义。要了解可能的自定义，您可以再次使用`helm inspect`命令，但这次要专注于值。以下是部分输出：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'For example, if you want to set a root password and create a database when
    installing `mariadb`, you can create the following YAML file and save it as `mariadb-config.yaml`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想在安装`mariadb`时设置根密码并创建数据库，您可以创建以下YAML文件并将其保存为`mariadb-config.yaml`：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, run `helm` and pass it the `yaml` file:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行`helm`并传递`yaml`文件：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can also set individual values on the command line with `--set`. If both
    `--f` and `--set` try to set the same values, then `--set` takes precedence. For
    example, in this case, the root password will be `evenbettersecret`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`--set`在命令行上设置单个值。如果`--f`和`--set`都尝试设置相同的值，则`--set`优先。例如，在这种情况下，根密码将是`evenbettersecret`：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can specify multiple values using comma-separated lists: `--set a=1,b=2`.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用逗号分隔的列表指定多个值：`--set a=1,b=2`。
- en: Additional installation options
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他安装选项
- en: 'The `helm install` command can install from several sources:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm install`命令可以从多个来源安装：'
- en: A `chart repository` (as we've seen)
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个`chart repository`（正如我们所见）
- en: A local chart archive (`helm install foo-0.1.1.tgz`)
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地图表存档（`helm install foo-0.1.1.tgz`）
- en: An unpacked `chart` directory (`helm install path/to/foo`)
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个解压的`chart`目录（`helm install path/to/foo`）
- en: A full URL (`helm install https://example.com/charts/foo-1.2.3.tgz`)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的URL（`helm install https://example.com/charts/foo-1.2.3.tgz`）
- en: Upgrading and rolling back a release
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级和回滚发布
- en: 'You may want to upgrade a package you installed to the latest and greatest
    version. Helm provides the `upgrade` command, which operates intelligently and
    only updates things that have changed. For example, let''s check the current values
    of our `mariadb` installation:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望将安装的软件包升级到最新版本。Helm提供了`upgrade`命令，它可以智能地操作，并且只更新已更改的内容。例如，让我们检查我们`mariadb`安装的当前值：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, let''s run, upgrade, and change the name of the database:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行、升级并更改数据库的名称：
- en: '[PRE23]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Note that we''ve lost our `root` password. All the existing values are replaced
    when you upgrade. OK, let''s roll back. The `helm history` command shows us all
    the available revisions we can roll back to:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们已经丢失了`root`密码。当您升级时，所有现有值都将被替换。好的，让我们回滚。`helm history`命令显示了我们可以回滚到的所有可用修订版本：
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s roll back to revision `3`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回滚到修订版本`3`：
- en: '[PRE25]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let''s verify that our changes were rolled back:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们验证一下我们的更改是否已回滚：
- en: '[PRE26]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Deleting a release
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除发布
- en: You can, of course, delete a release too using the `helm delete` command.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您也可以使用`helm delete`命令删除一个发布。
- en: 'First, let''s examine the list of releases. We have only `cranky-whippet`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们检查发布的列表。我们只有`cranky-whippet`：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, let''s delete it:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们删除它：
- en: '[PRE28]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'So, no more releases:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，没有更多的发布了：
- en: '[PRE29]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'However, Helm keeps track of deleted releases too. You can see them using the
    `--all` flag:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，Helm也会跟踪已删除的发布。您可以使用`--all`标志查看它们：
- en: '[PRE30]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To delete a release completely, add the `--purge` flag:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全删除一个发布，添加`--purge`标志：
- en: '[PRE31]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Working with repositories
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用存储库
- en: Helm stores charts in repositories that are simple HTTP servers. Any standard
    HTTP server can host a Helm repository. In the cloud, the Helm team verified that
    AWS S3 and Google Cloud storage can both serve as Helm repositories in web-enabled
    mode. Helm also comes bundled with a local package server for developer testing.
    It runs on the client machine, so it's inappropriate for sharing. In a small team,
    you may run the Helm package server on a shared machine on the local network accessible
    to all team members.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Helm将图表存储在简单的HTTP服务器存储库中。任何标准的HTTP服务器都可以托管Helm存储库。在云中，Helm团队验证了AWS S3和Google
    Cloud存储都可以在Web启用模式下作为Helm存储库。Helm还附带了一个用于开发人员测试的本地包服务器。它在客户端机器上运行，因此不适合共享。在一个小团队中，您可以在本地网络上的共享机器上运行Helm包服务器，所有团队成员都可以访问。
- en: To use the local package server, type `helm serve`. Do it in a separate terminal
    window because it is blocking. Helm will start serving charts from `~/.helm/repository/local`
    by default. You can put your charts there and generate an index file with `helm
    index`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用本地包服务器，请键入`helm serve`。请在单独的终端窗口中执行此操作，因为它会阻塞。Helm将默认从`~/.helm/repository/local`开始提供图表服务。您可以将您的图表放在那里，并使用`helm
    index`生成索引文件。
- en: The generated `index.yaml` file lists all the charts.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的`index.yaml`文件列出了所有的图表。
- en: Note that Helm doesn't provide tools to upload charts to remote repositories
    because that would require the remote server to understand Helm, to know where
    to put the chart, and how to update the `index.yaml` file.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Helm不提供将图表上传到远程存储库的工具，因为这将需要远程服务器了解Helm，知道在哪里放置图表，以及如何更新`index.yaml`文件。
- en: 'On the client''s side, the `helm repo` command lets you `list`, `add`, `remove`,
    `index`, and `update`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端方面，`helm repo`命令允许您`list`，`add`，`remove`，`index`和`update`：
- en: '[PRE32]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This command consists of multiple subcommands to interact with `chart` repositories.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令由多个子命令组成，用于与`chart`存储库交互。
- en: 'It can be used to `add`, `remove`, `list`, and `index` chart repositories:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以用来`add`，`remove`，`list`和`index`图表存储库：
- en: '**Example usage**:'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**示例用法**：'
- en: '[PRE33]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '**Usage**:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用法**：'
- en: '[PRE34]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '**Available commands**:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用命令**：'
- en: '[PRE35]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Managing charts with Helm
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Helm管理图表
- en: 'Helm provides several commands to manage charts. It can create a new chart
    for you:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Helm提供了几个命令来管理图表。它可以为您创建一个新的图表：
- en: '[PRE36]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Helm will create the following files and directories under `cool-chart`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Helm将在`cool-chart`下创建以下文件和目录：
- en: '[PRE37]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Once you have edited your chart, you can package it into a tar `gzipped` archive:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑图表后，您可以将其打包成一个tar`gzipped`存档：
- en: '[PRE38]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Helm will create an archive named `cool-chart-0.1.0.tgz` and store both in the
    `local` directory and in the `local repository`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Helm将创建一个名为`cool-chart-0.1.0.tgz`的存档，并将两者存储在`local`目录和`local repository`中。
- en: 'You can also use helm to help you find issues with your chart''s formatting
    or information:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用helm来帮助您找到图表格式或信息的问题：
- en: '[PRE39]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Taking advantage of starter packs
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用入门包
- en: The `helm create` command takes an optional `--starter` flag that lets you specify
    a starter chart.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`helm create`命令带有一个可选的`--starter`标志，让您指定一个入门图表。'
- en: 'Starters are regular charts located in `$HELM_HOME/starters`. As a chart developer,
    you may author charts that are specifically designed to be used as starters. Such
    charts should be designed with the following considerations in mind:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 启动器是位于`$HELM_HOME/starters`中的常规图表。作为图表开发者，您可以编写专门用作启动器的图表。这样的图表应该考虑以下几点：
- en: The `Chart.yaml` will be overwritten by the generator
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Chart.yaml`将被生成器覆盖'
- en: Users will expect to modify such a chart's contents, so documentation should
    indicate how users can do so
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户希望修改这样一个图表的内容，因此文档应该说明用户如何做到这一点
- en: At the moment, there is no way to install charts to `$HELM_HOME/starters`, the
    user must copy it manually. Make sure to mention that in your chart's documentation
    if you develop starter pack charts.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，没有办法将图表安装到`$HELM_HOME/starters`，用户必须手动复制。如果您开发启动包图表，请确保在您的图表文档中提到这一点。
- en: Creating your own charts
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您自己的图表
- en: A chart is a collection of files that describe a related set of Kubernetes resources.
    A single chart might be used to deploy something simple, such as a `memcached`
    pod, or something complex, such as a full web app stack with HTTP servers, databases,
    and caches.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图表是描述一组相关的Kubernetes资源的文件集合。一个单独的图表可以用来部署一些简单的东西，比如一个`memcached` pod，或者一些复杂的东西，比如一个完整的Web应用堆栈，包括HTTP服务器、数据库和缓存。
- en: Charts are created as files laid out in a particular directory tree. Then, they
    can be packaged into versioned archives to be deployed. The key file is `Chart.yaml`.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图表是以特定目录树布局的文件创建的。然后，它们可以被打包成版本化的存档进行部署。关键文件是`Chart.yaml`。
- en: The Chart.yaml file
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chart.yaml文件
- en: 'The `Chart.yaml` file is the main file of a Helm chart. It requires a name
    and version fields:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chart.yaml`文件是Helm图表的主文件。它需要一个名称和版本字段：'
- en: '`name`: The name of the chart (same as the directory name)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 图表的名称（与目录名称相同）'
- en: '`version`: A SemVer 2 version'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`: SemVer 2版本'
- en: 'It may also contain various optional fields:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 它还可以包含各种可选字段：
- en: '`kubeVersion`: A SemVer range of compatible Kubernetes versions'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubeVersion`: 兼容的Kubernetes版本的SemVer范围'
- en: '`description`: A single-sentence description of this project'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`: 该项目的单句描述'
- en: '`keywords`: A list of keywords about this project'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keywords`: 关于这个项目的关键字列表'
- en: '`home`: The URL of this project''s home page'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`home`: 该项目主页的URL'
- en: '`sources`: A list of URLs to source code for this project'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sources`: 该项目源代码的URL列表'
- en: '`maintainers`:'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`maintainers`:'
- en: '`name`: The maintainer''s name (required for each maintainer)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 维护者的名称（每个维护者都需要）'
- en: '`email`: The maintainer''s email (optional)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`: 维护者的电子邮件（可选）'
- en: '`url`: A URL for the maintainer (optional)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`: 维护者的URL（可选）'
- en: '`engine`: The name of the template engine (defaults to `gotpl`)'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`engine`: 模板引擎的名称（默认为`gotpl`）'
- en: '`icon`: A URL to an SVG or PNG image to be used as an icon'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`icon`: 用作图标的SVG或PNG图像的URL'
- en: '`appVersion`: The version of the app that this contains'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appVersion`: 包含的应用程序版本'
- en: '`deprecated`: Is this chart deprecated? (Boolean)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deprecated`: 这个图表是否已被弃用？（布尔值）'
- en: '`tillerVersion`: The version of Tiller that this chart requires'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tillerVersion`: 该图表所需的Tiller版本'
- en: Versioning charts
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图表版本控制
- en: The version field inside the `Chart.yaml` is used by the CLI and the Tiller
    server. The `helm package` command will use the version that it finds in the `Chart.yaml`
    when constructing the package name. The version number in the chart package name
    must match the version number in the `Chart.yaml`.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`Chart.yaml`中的版本字段由CLI和Tiller服务器使用。`helm package`命令将使用在`Chart.yaml`中找到的版本来构建包名。图表包名中的版本号必须与`Chart.yaml`中的版本号匹配。'
- en: The appVersion field
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: appVersion字段
- en: The `appVersion` field is not related to the version field. It is not used by
    Helm and serves as metadata or documentation for users that want to understand
    what they are deploying. Correctness is not enforced by Helm.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`appVersion`字段与版本字段无关。Helm不使用它，它作为用户的元数据或文档，用于了解他们正在部署的内容。Helm不强制正确性。'
- en: Deprecating charts
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弃用图表
- en: 'From time to time, you may want to deprecate a chart. You can mark a chart
    as deprecated by setting the deprecated field in `Chart.yaml` to `true`. It''s
    enough to deprecate the latest version of a chart. You can later reuse the chart
    name and publish a newer version that is not deprecated. The workflow used by
    the `kubernetes/charts` project is:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能希望弃用一个图表。您可以通过将`Chart.yaml`中的弃用字段设置为`true`来标记图表为弃用状态。弃用最新版本的图表就足够了。稍后您可以重用图表名称并发布一个未弃用的新版本。`kubernetes/charts`项目使用的工作流程是：
- en: Update the chart's `Chart.yaml` to mark the chart as deprecated and bump the
    version
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新图表的`Chart.yaml`以标记图表为弃用状态并提升版本
- en: Release a new version of the chart
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布图表的新版本
- en: Remove the chart from the `source repository`
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`源代码库`中删除图表
- en: Chart metadata files
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图表元数据文件
- en: 'Charts may contain various metadata files, such as `README.md`, `LICENSE`,
    and `NOTES.txt`, that describe the installation, configuration, usage, and license
    of a chart. The `README.md` file should be formatted as markdown. It should provide
    the following information:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图表可能包含各种元数据文件，例如`README.md`、`LICENSE`和`NOTES.txt`，用于描述图表的安装、配置、使用和许可。`README.md`文件应格式化为markdown。它应提供以下信息：
- en: A description of the application or service the chart provides
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表提供的应用程序或服务的描述
- en: Any prerequisites or requirements to run the chart
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行图表的任何先决条件或要求
- en: Descriptions of options in `values.yaml` and default values
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values.yaml`中选项的描述和默认值'
- en: Any other information that may be relevant to the installation or configuration
    of the chart
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装或配置图表的任何其他信息
- en: The `templates/NOTES.txt` file will be displayed after installation or when
    viewing the release status. You should keep the `NOTES` concise and point to the
    `README.md` for detailed explanations. It's common to put usage notes and next
    steps such as information about connecting to a database or accessing a web UI.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`templates/NOTES.txt`文件将在安装后或查看发布状态时显示。您应该保持`NOTES`简洁，并指向`README.md`以获取详细说明。通常会放置使用说明和下一步操作，例如有关连接到数据库或访问Web
    UI的信息。'
- en: Managing chart dependencies
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理图表依赖关系
- en: In Helm, a chart may depend on any number of other charts. These dependencies
    are expressed explicitly by listing them in a `requirements.yaml` file or by copying
    the dependency charts into the charts/ sub-directory during installation.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在Helm中，一个图表可以依赖任意数量的其他图表。通过在`requirements.yaml`文件中列出它们或在安装期间将依赖图表复制到charts/子目录中来明确表示这些依赖关系。
- en: A dependency can be either a chart archive (`foo-1.2.3.tgz`) or an unpacked
    chart directory. However, its name cannot start with `_` or `.`. Such files are
    ignored by the chart loader.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖可以是图表存档（`foo-1.2.3.tgz`）或未解压的图表目录。但是，其名称不能以`_`或`.`开头。图表加载程序会忽略这样的文件。
- en: Managing dependencies with requirements.yaml
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`requirements.yaml`管理依赖关系
- en: Instead of manually placing charts in the `charts/` subdirectory, it is better
    to declare dependencies using a `requirements.yaml` file inside your chart.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 不要手动将图表放在`charts/`子目录中，最好使用`requirements.yaml`文件在图表内声明依赖关系。
- en: 'A `requirements.yaml` file is a simple file for listing the chart dependencies:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`requirements.yaml`文件是一个简单的文件，用于列出图表的依赖关系：'
- en: '[PRE40]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The `name` field is the name of the chart you want.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`字段是您想要的图表名称。'
- en: The `version` field is the version of the chart you want.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`version`字段是您想要的图表版本。'
- en: The `repository` field is the full URL to the `chart repository`. Note that
    you must also use `helm repo` to add that `repository` locally.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`repository`字段是指向`图表存储库`的完整URL。请注意，您还必须使用`helm repo`将该`存储库`添加到本地。'
- en: 'Once you have a dependencies file, you can run the `helm dep up` and it will
    use your dependency file to download all of the specified charts into the charts
    subdirectory for you:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了一个依赖文件，您可以运行`helm dep up`，它将使用您的依赖文件将所有指定的图表下载到charts子目录中：
- en: '[PRE41]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Helm stores dependency charts retrieves during helm dependency update as chart
    archives in the `charts/` directory. For the preceding example, these files will
    be present in the `charts` directory:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Helm存储依赖图表在`charts/`目录中作为图表存档进行检索。对于前面的示例，这些文件将存在于`charts`目录中：
- en: '[PRE42]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Managing charts and their dependencies with `requirements.yaml` is a best practice,
    both for explicitly documenting dependencies, sharing across the team, and support
    automated pipelines.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`requirements.yaml`管理图表及其依赖项是最佳实践，既可以明确记录依赖关系，也可以在团队之间共享，并支持自动化流程。
- en: Using special fields in requirements.yaml
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在requirements.yaml中使用特殊字段
- en: Each entry in the `requirements.yaml` file may also contain the optional `fields`
    tags and condition.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`requirements.yaml`文件中的每个条目还可以包含可选的`fields`标签和条件。'
- en: 'These fields can be used to dynamically control the loading of charts (by default,
    all charts are loaded). When tags or condition are present, Helm will evaluate
    them and determine if the target chart should be loaded:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这些字段可用于动态控制图表的加载（默认情况下，所有图表都会加载）。当存在标签或条件时，Helm将评估它们并确定是否应加载目标图表：
- en: '`condition`: The `condition` field holds one or more YAML paths (delimited
    by commas). If this path exists in the top parent''s values and resolves to a
    Boolean value, the chart will be enabled or disabled based on that Boolean value.
    Only the first valid path found in the list is evaluated, and if no paths exist,
    then the condition has no effect.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`condition`：`condition`字段包含一个或多个YAML路径（用逗号分隔）。如果此路径存在于顶级父级的值中并解析为布尔值，则图表将根据该布尔值启用或禁用。仅评估列表中找到的第一个有效路径，如果没有路径存在，则条件不起作用。'
- en: '`tags`: The `tags` field is a YAML list of labels to associate with this chart.
    In the top parent''s values, all charts with tags can be enabled or disabled by
    specifying the tag and a Boolean value.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tags`：`tags`字段是一个YAML标签列表，用于与该图表关联。在顶级父级的值中，可以通过指定标签和布尔值来启用或禁用具有标签的所有图表。'
- en: 'Here is an example of `requirements.yaml` and `values.yaml` that make good
    use of conditions and tags to enable and disable the installation of dependencies.
    The `requirements.yaml` file defines two conditions for installing its dependencies
    based on the value of the `global enabled` field and the specific `sub-charts
    enabled` field:'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是一个很好地利用条件和标签来启用和禁用依赖项安装的`requirements.yaml`和`values.yaml`示例。`requirements.yaml`文件根据`global
    enabled`字段的值和特定的`sub-charts enabled`字段定义了安装其依赖项的两个条件：
- en: '[PRE43]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The `values.yaml` file assigns values to some of the condition variables. The
    `subchart2` tag doesn''t get a value, so it is considered enabled:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`values.yaml`文件为一些条件变量分配了值。`subchart2`标签没有获得值，因此被认为是启用的：'
- en: '[PRE44]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You can set tag and conditions values from the command line too when installing
    a chart, and they''ll take precedence over the `values.yaml` file:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装图表时，也可以从命令行设置标签和条件值，并且它们将优先于`values.yaml`文件：
- en: '[PRE45]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The resolution of tags and conditions is as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 标签和条件的解析如下：
- en: Conditions (when set in values) always override tags. The first condition path
    that exists wins, and subsequent ones for that chart are ignored.
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条件（在值中设置）始终会覆盖标签。存在的第一个条件路径获胜，该图表的后续条件将被忽略。
- en: If any of the chart's tags are true then enable the chart.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果图表的任何标签为true，则启用该图表。
- en: Tags and condition values must be set in the top parent's values.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签和条件值必须在顶级父值中设置。
- en: 'The tags: key-in values must be a top-level key. Globals and nested tags are
    not supported.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值中的标签：键必须是顶级键。不支持全局和嵌套标签。
- en: Using templates and values
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模板和值
- en: Any important application will require configuration and adaptation to the specific
    use case. Helm charts are templates that use the Go template language to populate
    placeholders. Helm supports additional functions from the `Sprig` library and
    a few other specialized functions. The template files are stored in the `templates/`
    subdirectory of the chart. Helm will use the template engine to render all files
    in this directory and apply the provided value files.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 任何重要的应用程序都需要配置和适应特定的用例。Helm图表是使用Go模板语言填充占位符的模板。Helm支持来自`Sprig`库和其他一些专门函数的附加功能。模板文件存储在图表的`templates/`子目录中。Helm将使用模板引擎渲染此目录中的所有文件，并应用提供的值文件。
- en: Writing template files
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写模板文件
- en: 'Template files are just text files that follow the Go template language rules.
    They can generate Kubernetes configuration files. Here is the service template
    file from the artifactory chart:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文件只是遵循Go模板语言规则的文本文件。它们可以生成Kubernetes配置文件。以下是artifactory图表中的服务模板文件：
- en: '[PRE46]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Using pipelines and functions
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用管道和函数
- en: 'Helm allows rich and sophisticated syntax in the template files through the
    built-in Go template functions, sprig functions, and pipelines. Here is an example
    template that takes advantage of these capabilities. It uses the repeat, quote,
    and upper functions for the food and drink keys, and it uses pipelines to chain
    multiple functions together:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Helm允许在模板文件中使用内置的Go模板函数、sprig函数和管道的丰富和复杂的语法。以下是一个利用这些功能的示例模板。它使用repeat、quote和upper函数来处理food和drink键，并使用管道将多个函数链接在一起：
- en: '[PRE47]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'See if the values file has the following section:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 查看值文件是否具有以下部分：
- en: '[PRE48]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If it does, then the resulting chart would be as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是，则生成的图表将如下所示：
- en: '[PRE49]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Embedding predefined values
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入预定义值
- en: 'Helm provides some predefined values which you can use in your templates. In
    the previous artifactory chart template, `Release.Name`, `Release.Service`, `Chart.Name`,
    and `Chart.Version` are examples of Helm predefined values. Other predefined values
    are as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Helm提供了一些预定义的值，您可以在模板中使用。在先前的artifactory图表模板中，`Release.Name`，`Release.Service`，`Chart.Name`和`Chart.Version`是Helm预定义值的示例。其他预定义值如下：
- en: '`Release.Time`'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Release.Time`'
- en: '`Release.Namespace`'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Release.Namespace`'
- en: '`Release.IsUpgrade`'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Release.IsUpgrade`'
- en: '`Release.IsInstall`'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Release.IsInstall`'
- en: '`Release.Revision`'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Release.Revision`'
- en: '`Chart`'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Chart`'
- en: '`Files`'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Files`'
- en: '`Capabilities`'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Capabilities`'
- en: The chart is the content of `Chart.yaml`. The files and capabilities predefined
    values are `map-like` objects that allow access through various functions. Note
    that unknown fields in `Chart.yaml` are ignored by the template engine and cannot
    be used to `pass` arbitrary structured data to templates.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 图表是`Chart.yaml`的内容。文件和功能预定义值是`类似于映射`的对象，允许通过各种函数进行访问。请注意，模板引擎会忽略`Chart.yaml`中的未知字段，并且无法用于`传递`任意结构化数据到模板中。
- en: Feeding values from a file
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从文件中提供值
- en: 'Here is part of the `artifactory` default values file. The values from this
    file are used to populate multiple templates. For example, the `artifactory name`
    and `internalPort` values are used in the preceding service template:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`artifactory`默认值文件的一部分。该文件中的值用于填充多个模板。例如，先前的服务模板中使用了`artifactory name`和`internalPort`的值：
- en: '[PRE50]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'You can provide your own YAML values files to override the defaults during
    the install command:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以提供自己的YAML值文件来在安装命令期间覆盖默认值：
- en: '[PRE51]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Scope, dependencies, and values
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 范围、依赖和值
- en: 'Value files can declare values for the top-level chart, as well as for any
    of the charts that are included in that chart''s `charts/` directory. For example,
    the `artifactory-ce values.yaml` file contains some default values for its dependency
    chart `postgresql`:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 值文件可以声明顶层图表的值，以及该图表的`charts/`目录中包含的任何图表的值。例如，`artifactory-ce values.yaml`文件包含其依赖图表`postgresql`的一些默认值：
- en: '[PRE52]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The top-level chart has access to values of its dependent charts, but not vice
    versa. There is also a global value that is accessible to all charts. For example,
    you could add something like this:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 顶层图表可以访问其依赖图表的值，但反之则不行。还有一个全局值可供所有图表访问。例如，您可以添加类似以下内容：
- en: '[PRE53]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'When a global is present, it will be replicated to each dependent chart''s
    values as follows:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 当全局存在时，它将被复制到每个依赖图表的值中，如下所示：
- en: '[PRE54]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Summary
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we took a look at Helm, the Kubernetes package manager. Helm
    gives Kubernetes the ability to manage complicated software composed of many Kubernetes
    resources with interdependencies. It serves the same purpose as an OS package
    manager. It organizes packages and lets you search charts, install and upgrade
    charts, and share charts with collaborators. You can develop your charts and store
    them in repositories.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了一下Helm，Kubernetes的包管理器。Helm使Kubernetes能够管理由许多Kubernetes资源组成的复杂软件，这些资源之间存在相互依赖。它的作用与操作系统的包管理器相同。它组织软件包，让您搜索图表，安装和升级图表，并与合作者共享图表。您可以开发自己的图表并将它们存储在存储库中。
- en: At this point, you should understand the important role that Helm serves in
    the Kubernetes ecosystem and community. You should be able to use it productively
    and even develop and share your own charts.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您应该了解Helm在Kubernetes生态系统和社区中的重要作用。您应该能够有效地使用它，甚至开发和分享您自己的图表。
- en: In the next chapter, we will look ahead to the future of Kubernetes and examine
    its roadmap and a few personal items from my wish list.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将展望Kubernetes的未来，审查其路线图以及我愿望清单中的一些个人项目。
