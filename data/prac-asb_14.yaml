- en: Troubleshooting and Testing Strategies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除和测试策略
- en: In a similar way to any other kind of code, Ansible code can contain issues
    and bugs. Ansible tries to make it as safe as possible by checking the task syntax
    before the task is executed. This check, however, only saves you from a small
    number of possible types of errors, such as incorrect task parameters, but it
    will not protect you from others.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何其他类型的代码类似，Ansible代码可能包含问题和错误。Ansible尝试通过在执行任务之前检查任务语法来尽可能地使其安全。然而，这种检查只能防止一小部分可能的错误类型，如不正确的任务参数，但它不会保护您免受其他错误的影响。
- en: It's also important to remember that, due to its nature, in Ansible code, we
    describe the desired state rather than stating a sequence of steps to obtain the
    desired state. This difference means that the system is less prone to logical
    errors.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，由于其性质，在Ansible代码中，我们描述的是期望的状态，而不是陈述一系列步骤来实现期望的状态。这种差异意味着系统不太容易出现逻辑错误。
- en: Nevertheless, a bug in a Playbook could mean a potential misconfiguration on
    all of your machines. This should be taken very seriously. It is even more critical
    when critical parts of the system are changed, such as SSH daemon or `sudo` configuration,
    since the risk is you locking yourself out of the system.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Playbook中的错误可能意味着所有机器上的潜在错误配置。这应该被非常认真对待。当系统的关键部分发生更改时，如SSH守护程序或`sudo`配置时，情况就更加严重，因为风险是您将自己锁在系统外。
- en: 'There are a bunch of different ways to prevent or mitigate a bug in Ansible
    playbooks. In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同的方法可以防止或减轻Ansible playbooks中的错误。在本章中，我们将涵盖以下主题：
- en: Digging into playbook execution problems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入研究playbook执行问题
- en: Using host facts to diagnose failures
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用主机信息来诊断故障
- en: Testing with a playbook
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用playbook进行测试
- en: Using check mode
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用检查模式
- en: Solving host connection issues
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决主机连接问题
- en: Passing working variables via the CLI
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过CLI传递工作变量
- en: Limiting the host's execution
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制主机的执行
- en: Flushing the code cache
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 刷新代码缓存
- en: Checking for bad syntax
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查语法错误
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter assumes that you have set up your control host with Ansible, as
    detailed in [Chapter 1](0efc8364-b8a4-4866-9ff4-1e2d09f6724b.xhtml), *Getting
    Started with Ansible*, and are using the most recent version available – the examples
    in this chapter were tested with Ansible 2.9\. Although we will give specific
    examples of hostnames in this chapter, you are free to substitute them with your
    own hostname and/or IP addresses. Details of how to do this will be provided at
    the appropriate places.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假定您已经按照《第1章》*开始使用Ansible*中详细介绍的方式设置了控制主机，并且正在使用最新版本——本章的示例是使用Ansible 2.9进行测试的。尽管本章将给出特定的主机名示例，但您可以自由地用您自己的主机名和/或IP地址替换它们。如何做到这一点的详细信息将在适当的地方提供。
- en: The examples in this chapter can be found in this book's GitHub repository at [https://github.com/PacktPublishing/Practical-Ansible-2/tree/master/Chapter%2011](https://github.com/PacktPublishing/Practical-Ansible-2/tree/master/Chapter%2011).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的示例可以在本书的GitHub存储库中找到：[https://github.com/PacktPublishing/Practical-Ansible-2/tree/master/Chapter%2011](https://github.com/PacktPublishing/Practical-Ansible-2/tree/master/Chapter%2011)。
- en: Digging into playbook execution problems
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入研究playbook执行问题
- en: There are cases where an Ansible execution will interrupt. Many things can cause
    these situations.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，Ansible执行会中断。许多事情都可能导致这种情况。
- en: The single most frequent cause of problems I've found while executing Ansible
    playbooks is the network. Since the machine that is issuing the commands and the
    one that is performing them are usually linked through the network, a problem
    in the network will immediately show itself as an Ansible execution problem.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行Ansible playbooks时，我发现的问题中最常见的原因是网络。由于发出命令的机器和执行命令的机器通常通过网络连接，网络中的问题会立即显示为Ansible执行问题。
- en: 'Sometimes, and this is particularly true for some modules, such as `shell`
    or `command`, the return code is non-zero, even though the execution was successful.
    In those cases, you can ignore the error by using the following line in your module:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，特别是对于某些模块，如`shell`或`command`，返回代码是非零的，即使执行是成功的。在这种情况下，您可以通过在模块中使用以下行来忽略错误：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For instance, if you run the `/bin/false` command, it will always return `1`.
    To execute this in a playbook so that you can avoid it blocking there, you can
    write something like the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果运行`/bin/false`命令，它将始终返回`1`。为了在playbook中执行这个命令，以避免它在那里阻塞，您可以编写类似以下的内容：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we have seen, `/bin/false` will always return `1` as return code, but we
    still managed to go forward in the execution. Be aware that this is a particular
    case, and often, the best approach is to fix your application so that you're following
    UNIX standards and return `0` if the application runs appropriately, instead of
    putting a workaround in your Playbooks.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，`/bin/false`将始终返回`1`作为返回代码，但我们仍然设法继续执行。请注意，这是一个特殊情况，通常，最好的方法是修复您的应用程序，以便遵循UNIX标准，并在应用程序适当运行时返回`0`，而不是在您的Playbooks中放置一个变通方法。
- en: Next, we will talk more about the methods we can use to diagnose Ansible execution
    problems.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更多地讨论我们可以使用的方法来诊断Ansible执行问题。
- en: Using host facts to diagnose failures
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用主机信息来诊断故障
- en: Some execution failures derive from the state of the target machine. The most
    common problem of this kind is the case where Ansible expects a file or variable
    to be present, but it's not.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一些执行失败是由目标机器的状态导致的。这种情况最常见的问题是Ansible期望文件或变量存在，但实际上并不存在。
- en: Sometimes, it can be enough to print the machine facts to find the problem.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，打印机器信息就足以找到问题。
- en: 'To do so, we need to create a simple playbook, called `print_facts.yaml`, which
    contains the following content:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要创建一个简单的playbook，名为`print_facts.yaml`，其中包含以下内容：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This technique will give you a lot of information about the state of the target
    machine during Ansible execution.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术将为您提供有关Ansible执行期间目标机器状态的大量信息。
- en: Testing with a playbook
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用playbook进行测试
- en: One of the most complex things in the IT field is not creating software and
    systems, but debugging them when they have problems. Ansible is not an exception.
    No matter how good you are at creating Ansible playbooks, sooner or later, you'll
    find yourself debugging a playbook that is not behaving as you thought it would.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在IT领域最复杂的事情之一不是创建软件和系统，而是在它们出现问题时进行调试。Ansible也不例外。无论您在创建Ansible playbook方面有多么出色，迟早都会发现自己在调试一个行为不如您所想象的playbook。
- en: 'The simplest way of performing basic tests is to print out the values of variables
    during execution. Let''s learn how to do this with Ansible, as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 执行基本测试的最简单方法是在执行期间打印变量的值。让我们学习如何使用Ansible来做到这一点，如下所示：
- en: 'First of all, we need a playbook called `debug.yaml` with the following content:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要一个名为“debug.yaml”的playbook，其中包含以下内容：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run it with the following command:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行它：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You will receive an output similar to the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您将收到类似以下内容的输出：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the first task, we used the `command` module to execute the `uptime` command
    and saved its output in the `result` variable. Then, in the second task, we used
    the `debug` module to print the content of the `result` variable.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个任务中，我们使用“command”模块执行“uptime”命令，并将其输出保存在“result”变量中。然后，在第二个任务中，我们使用“debug”模块打印“result”变量的内容。
- en: The `debug` module is the module that allows you to print the value of a variable
    (by using the `var` option) or a fixed string (by using the `msg` option) during
    Ansible's execution.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: “debug”模块是允许您在Ansible执行期间打印变量的值（使用“var”选项）或固定字符串（使用“msg”选项）的模块。
- en: 'The `debug` module also provides the `verbosity` option. Let''s say you change
    the playbook in the following way:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: “debug”模块还提供了“verbosity”选项。假设您以以下方式更改了playbook：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, if you try to execute it in the same way you did previously, you will
    notice that the debug step won''t be executed and that the following line will
    appear in the output instead:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您尝试以与之前相同的方式执行它，您将注意到调试步骤不会被执行，并且输出中将出现以下行：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This is because we set the minimum required `verbosity` to `2`, and by default,
    Ansible runs with a `verbosity` of `0`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们将所需的“verbosity”最小设置为“2”，默认情况下，Ansible以“0”的“verbosity”运行。
- en: 'To see the result of using the debug module with this new playbook, we will
    need to run a slightly different command:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看使用新playbook的debug模块的结果，我们需要运行一个稍微不同的命令：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: By putting two `-v` options in the command line, we will be running Ansible
    with `verbosity` of `2`. This will not only affect this specific module but all
    the modules (or Ansible itself) that are set to behave differently at different
    debug levels.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在命令行中放置两个“-v”选项，我们将以“2”的“verbosity”运行Ansible。这不仅会影响这个特定的模块，还会影响所有在不同调试级别下设置为以不同方式运行的模块（或Ansible本身）。
- en: Now that you have learned how to test with a playbook, let's learn how to use check
    mode.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了如何使用playbook进行测试，让我们学习如何使用检查模式。
- en: Using check mode
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用检查模式
- en: 'Although you might be confident in the code you have written, it still pays
    to test it before running it for real in a production environment. In such cases,
    it is a good idea to be able to run your code, but with a safety net in place.
    This is what check mode is for. Follow these steps:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管您可能对自己编写的代码很有信心，但在真正的生产环境中运行之前进行测试仍然是值得的。在这种情况下，能够运行您的代码，但同时又有一个安全网是一个好主意。这就是检查模式的作用。请按照以下步骤进行操作：
- en: 'First of all, we need to create an easy playbook to test this feature. Let''s
    create a playbook called `check-mode.yaml` that contains the following content:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要创建一个简单的playbook来测试这个功能。让我们创建一个名为“check-mode.yaml”的playbook，其中包含以下内容：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we can run the playbook in the check mode by specifying the `--check`
    option in the invocation:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过在调用中指定“--check”选项来以检查模式运行playbook：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will output everything as if it was really performing the operation, as
    follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出一切，就好像它真的执行了操作，如下所示：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: However, if you look in `/tmp`, you won't find `myfile`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您在“/tmp”中查找，您将找不到“myfile”。
- en: Ansible check mode is usually called a dry run. The idea is that the run won't
    change the state of the machine and will only highlight the differences between
    the current status and the status declared in the playbook.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible检查模式通常被称为干运行。其思想是运行不会改变机器的状态，只会突出当前状态与playbook中声明的状态之间的差异。
- en: Not all modules support check mode, but all major modules do, and more and more
    modules are being added at every release. In particular, note that the `command`
    and `shell` modules do not support it because it is impossible for the module
    to tell what commands will result in a change, and what won't. Therefore, these
    modules will always return changed when they're run outside of check mode because
    they assume a change has been made.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有模块都支持检查模式，但所有主要模块都支持，而且每个版本都会添加更多的模块。特别要注意的是，“command”和“shell”模块不支持它，因为模块无法判断哪些命令会导致更改，哪些不会。因此，这些模块在检查模式之外运行时总是返回更改，因为它们假设已经进行了更改。
- en: 'A similar feature to check mode is the `--diff` flag. What this flag allows
    us to do is track what exactly changed during an Ansible execution. So, let''s
    say we run the same playbook with the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 与检查模式类似的功能是“--diff”标志。这个标志允许我们跟踪在Ansible执行期间发生了什么变化。因此，假设我们使用以下命令运行相同的playbook：
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This will return something like the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回类似以下的内容：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As you can see, the output says `changed`, which means that something was changed
    (more specifically, the file was created), and in the output, we can see a diff-like
    output that tells us that the state moved from `absent` to `touch`, which means
    the file was created. `mtime` and `atime` also changed, but this is probably due
    to how files are created and checked.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，输出显示“changed”，这意味着有些东西发生了改变（更具体地说，文件被创建了），在输出中，我们可以看到类似diff的输出，告诉我们状态从“absent”移动到“touch”，这意味着文件被创建了。“mtime”和“atime”也发生了变化，但这可能是由于文件的创建和检查方式。
- en: Now that you have learned how to use check mode, let's learn how to solve host
    connection issues.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了如何使用检查模式，让我们学习如何解决主机连接问题。
- en: Solving host connection issues
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决主机连接问题
- en: Ansible is often used to manage remote hosts or systems. To do this, Ansible
    will need to be able to connect to the remote host, and only after that will it
    be able to issue commands. Sometimes, the problem is that Ansible is unable to
    connect to the remote host. A typical example of this is when you try to manage
    a machine that hasn't booted yet. Being able to quickly recognize these kinds
    of problems and fix them promptly will help you save a lot of time.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible通常用于管理远程主机或系统。为此，Ansible需要能够连接到远程主机，只有在那之后才能发出命令。有时，问题在于Ansible无法连接到远程主机。这种问题的典型例子是当您尝试管理尚未启动的机器时。能够快速识别这类问题并及时解决将帮助您节省大量时间。
- en: 'Follow these steps to get started:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤开始：
- en: 'Let''s create a playbook called `remote.yaml` with the following content:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`remote.yaml`的playbook，其中包含以下内容：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can try to run the `remote.yaml` playbook against a non-existent FQDN, as
    follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以尝试针对不存在的FQDN运行`remote.yaml` playbook，如下所示：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In this case, the output will clearly inform us that the SSH service did not
    reply in time:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，输出将清楚地告诉我们，SSH服务没有及时回复：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'There is also the possibility that we''ll receive a different error:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也有可能收到不同的错误：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this case, the host did reply, but we don't have enough access to be able
    to SSH into it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，主机确实有回复，但我们没有足够的访问权限来SSH进入它。
- en: 'SSH connections usually fail for one of two reasons:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: SSH连接通常因以下两个原因而失败：
- en: The SSH client is unable to establish a connection with the SSH server
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH客户端无法与SSH服务器建立连接
- en: The SSH server refuses the credentials provided by the SSH client
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SSH服务器拒绝SSH客户端提供的凭据
- en: 'Due to OpenSSH''s very high stability and backward compatibility, when the
    first issue occurs, it''s very probable that the IP address or the port is wrong,
    so the TCP connection isn''t feasible. Very rarely, this kind of error occurs
    in SSH-specific problems. Usually, double-checking the IP and the hostname (if
    it''s a DNS, check that it resolves to the right IP) solves the problem. To investigate
    this further, you can try performing an SSH connection from the same machine to
    check if there are problems. For instance, I would do this like so:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于OpenSSH非常高的稳定性和向后兼容性，当第一个问题发生时，很可能是IP地址或端口错误，因此TCP连接不可行。很少情况下，这种错误发生在SSH特定问题中。通常，仔细检查IP和主机名（如果是DNS，请检查是否解析为正确的IP）可以解决问题。要进一步调查这个问题，您可以尝试从同一台机器执行SSH连接，以检查是否存在问题。例如，我会这样做：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: I've taken the hostname from the error itself to ensure that I'm simulating
    exactly what Ansible is doing. I'm doing this to ensure that I can see all possible
    logging messages that SSH is able to give me to troubleshoot the problem.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经从错误本身中获取了主机名，以确保我正在模拟Ansible正在做的事情。我这样做是为了确保我能看到SSH能够给我排除问题的所有可能日志消息。
- en: 'The second problem might be a little bit more complex to debug since it can
    happen for multiple reasons. One of those is that you are trying to connect to
    the wrong host and you don''t have the credentials for that machine. Another common
    case is that the username is wrong. To debug it, you can take the `user@host` address
    that is shown in the error (in my case, `fale@host.example.com`) and use the same
    command you used previously:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题可能会更复杂一些，因为它可能出现多种原因。其中之一是您试图连接到错误的主机，而您没有该机器的凭据。另一个常见情况是用户名错误。要调试它，您可以使用错误中显示的`user@host`地址（在我的情况下是`fale@host.example.com`），并使用您之前使用的相同命令：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This should raise the same error that Ansible reported to you, but with much
    more details.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该引发与Ansible报告给您的相同错误，但更详细。
- en: Now that you have learned how to solve host connection issues, let's learn how
    to pass working variables via the CLI.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了如何解决主机连接问题，让我们学习如何通过CLI传递工作变量。
- en: Passing working variables via the CLI
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过CLI传递工作变量
- en: 'One thing that can help during debugging, and definitely helps for code reusability,
    is passing variables to playbooks via the command line. Every time your application –
    either an Ansible playbook or any kind of application – receives an input from
    a third party (a human, in this case), it should ensure that the value is reasonable.
    An example of this would be to check that the variable has been set and therefore
    is not an empty string. This is a security golden rule, but should also be applied
    when the user is trusted since the user might mistype the variable name. The application
    should identify this and protect the whole system by protecting itself. Follow
    these steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试过程中，有一件事可以帮助，对于代码的可重用性也有帮助，那就是通过命令行向playbooks传递变量。每当您的应用程序（无论是Ansible playbook还是任何类型的应用程序）从第三方（在这种情况下是人）接收输入时，它都应该确保该值是合理的。一个例子是检查变量是否已设置，因此不是空字符串。这是一个安全的黄金法则，但在用户受信任时也应该应用，因为用户可能会误输入变量名。应用程序应该识别这一点，并通过保护自身来保护整个系统。按照以下步骤：
- en: 'The first thing we want to have is a simple playbook that prints the content
    of a variable. Let''s create a playbook called `printvar.yaml` that contains the
    following content:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想要的第一件事是一个简单的playbook，打印变量的内容。让我们创建一个名为`printvar.yaml`的playbook，其中包含以下内容：
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now that we have an Ansible playbook that allows us to see if a variable has
    been set to what we were expecting, let''s run it with `variable` declared in
    the execution statement:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了一个Ansible playbook，可以让我们查看变量是否设置为我们期望的值，让我们在执行语句中声明`variable`并运行它：
- en: '[PRE21]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'By running this, we will receive an output similar to the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行这个，我们将收到类似以下的输出：
- en: '[PRE22]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Ansible allows variables to be set in various modes and with different priorities.
    More specifically, you can set them with the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible允许以不同的模式和不同的优先级设置变量。更具体地说，您可以使用以下方式设置它们：
- en: Command-line values (lowest priority)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行值（最低优先级）
- en: Role defaults
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色默认值
- en: Inventory files or script group `vars`
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单文件或脚本组`vars`
- en: Inventory `group_vars/all`
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单`group_vars/all`
- en: Playbook `group_vars/all`
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Playbook `group_vars/all`
- en: Inventory `group_vars/*`
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单`group_vars/*`
- en: Playbook `group_vars/*`
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Playbook `group_vars/*`
- en: Inventory files or script host vars
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单文件或脚本主机变量
- en: Inventory `host_vars/*`
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单`host_vars/*`
- en: Playbook `host_vars/*`
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Playbook `host_vars/*`
- en: Host facts/cached `set_facts`
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机facts/缓存`set_facts`
- en: Play `vars`
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Play `vars`
- en: Play `vars_prompt`
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Play `vars_prompt`
- en: Play `vars_files`
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Play `vars_files`
- en: Role `vars` (defined in `role/vars/main.yml`)
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色`vars`（在`role/vars/main.yml`中定义）
- en: Block `vars` (only for tasks in block)
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 块`vars`（仅适用于块中的任务）
- en: Task `vars` (only for the task)
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务`vars`（仅适用于该任务）
- en: '`include_vars`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include_vars`'
- en: '`set_facts`/registered vars'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set_facts`/registered vars'
- en: Role (and `include_role`) params
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色（和`include_role`）参数
- en: '`include` params'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`include`参数'
- en: Extra vars (highest priority)
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外变量（最高优先级）
- en: As you can see, the last option (and the highest priority of them all) is using
    `--extra-vars` in the execution command.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，最后一个选项（也是所有选项中的最高优先级）是在执行命令中使用`--extra-vars`。
- en: Now that you have learned how to pass working variables via CLI, let's learn how
    to limit the host's execution.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了如何通过CLI传递工作变量，让我们学习如何限制主机的执行。
- en: Limiting the host's execution
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制主机的执行
- en: 'While testing a playbook, it might make sense to test on a restricted number
    of machines; for instance, just one. Let''s get started:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试playbook时，对一组受限制的机器进行测试可能是有意义的；例如，只有一个。让我们开始吧：
- en: 'To use the limitation of target hosts on Ansible, we will need a playbook.
    Create a playbook called `helloworld.yaml` that contains the following content:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使用Ansible的目标主机限制，我们需要一个playbook。创建一个名为`helloworld.yaml`的playbook，其中包含以下内容：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We also need to create an inventory with at least two hosts. In my case, I
    created a file called `inventory` that contains the following content:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要创建一个至少包含两个主机的清单。在我的情况下，我创建了一个名为`inventory`的文件，其中包含以下内容：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Let''s run the playbook in the usual way with the following command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用以下命令以通常的方式运行playbook：
- en: '[PRE25]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'By doing this, we will receive the following output:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们将收到以下输出：
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This means that the playbook was executed on all the machines in the inventory.
    If we just want to run it against `host3.example.com`, we will need to specify
    this on the command line, as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着playbook在清单中的所有机器上执行。如果我们只想针对`host3.example.com`运行它，我们需要在命令行中指定如下：
- en: '[PRE27]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To prove that this works as expected, we can run it. By doing this, we will
    receive the following output:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了证明这个工作是按预期进行的，我们可以运行它。通过这样做，我们将收到以下输出：
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Before Ansible executes the playbook we mentioned in the command line, it analyzes
    the inventory to detect which targets are in scope and which are not. By using
    the `--limit` keyword, we can force Ansible to ignore all the hosts that are outside
    what is specified in the limit parameter.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ansible执行我们在命令行中提到的playbook之前，它会分析清单以检测哪些目标在范围内，哪些不在。通过使用`--limit`关键字，我们可以强制Ansible忽略所有超出限制参数指定范围的主机。
- en: 'It''s possible to specify multiple hosts as a list or with patterns, so both
    of the following commands will execute the playbook against `host2.example.com`
    and `host3.example.com`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 可以指定多个主机作为列表或使用模式，因此以下两个命令都将针对`host2.example.com`和`host3.example.com`执行playbook：
- en: '[PRE29]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The limit will not override the inventory but will add restrictions to it.
    So, let''s say we limit to a host that is not part of the inventory, as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 限制不会覆盖清单，而是对其添加限制。所以，假设我们限制到不在清单中的主机，如下所示：
- en: '[PRE30]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here, we will receive the following error, and nothing will be done:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将收到以下错误，并且什么也不会发生：
- en: '[PRE31]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Now that you have learned how to limit the host's execution, let's learn how
    to flush the code cache.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了如何限制主机的执行，让我们学习如何刷新代码缓存。
- en: Flushing the code cache
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 刷新代码缓存
- en: Everywhere in IT, caches are used to speed up operations, and Ansible is not
    an exception.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在IT中，缓存被用来加快操作的速度，Ansible也不例外。
- en: Usually, caches are good, and for this reason, they are heavily used ubiquitously.
    However, they might create some problems if they cache a value they should not
    have cached or if they are not flushed, even if the value has changed.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，缓存是好的，因此它们被广泛地使用。然而，如果它们缓存了不应该缓存的值，或者即使值已经改变但它们没有被刷新，它们可能会造成一些问题。
- en: 'Flushing caches in Ansible is very straightforward, and it''s enough to run
    `ansible-playbook`, which we are already running, with the addition of the `--flush-cache`
    option, as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ansible中刷新缓存非常简单，只需运行`ansible-playbook`，我们已经在运行了，加上`--flush-cache`选项，如下所示：
- en: '[PRE32]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Ansible uses Redis to save host variables, as well as execution variables. Sometimes,
    those variables might be left behind and influence the following executions. When
    Ansible finds a variable that should be set in the step it just started, Ansible
    might assume that the step has already been completed, and therefore pick up that
    old variable as if it has just been created. By using the `--flush-cache` option,
    we can avoid this since it will ensure that Ansible flushes the Redis cache during
    its execution.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible使用Redis保存主机变量和执行变量。有时，这些变量可能会被遗留下来，影响后续的执行。当Ansible发现一个变量应该在它刚刚启动的步骤中设置时，Ansible可能会假设该步骤已经完成，因此会将旧变量作为刚刚创建的变量。通过使用`--flush-cache`选项，我们可以避免这种情况，因为它会确保Ansible在执行过程中刷新Redis缓存。
- en: Now that you have learned how to flush the code cache, let's learn how to check
    for bad syntax.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经学会了如何刷新代码缓存，让我们学习如何检查错误的语法。
- en: Checking for bad syntax
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查错误的语法
- en: 'Defining whether a file has the right syntax or not is fairly easy for a machine,
    but might be more complex for humans. This does not mean that machines are able
    to fix the code for you, but they can quickly identify whether a problem is present
    or not. To use Ansible''s built-in syntax checker, we need a playbook with a syntax
    error. Let''s get started:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 确定一个文件是否具有正确的语法对于机器来说是相当容易的，但对于人类来说可能更复杂。这并不意味着机器能够为您修复代码，但它们可以快速地识别问题是否存在。为了使用Ansible内置的语法检查器，我们需要一个具有语法错误的playbook。让我们开始吧：
- en: 'Let''s create a `syntaxcheck.yaml` file with the following content:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个名为`syntaxcheck.yaml`的文件，其中包含以下内容：
- en: '[PRE33]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, we can use the `--syntax-check` command:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`--syntax-check`命令：
- en: '[PRE34]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'By doing this, we will receive the following output:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们将收到以下输出：
- en: '[PRE35]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We can now proceed to fix the indentation problem on line 4:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以继续修复第4行的缩进问题：
- en: '[PRE36]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'When we recheck the syntax, we will see that it now returns no errors:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们重新检查语法时，我们会看到它现在不再返回错误：
- en: '[PRE37]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: When the syntax check doesn't find any errors, the output will resemble the
    previous one, where it listed the files that were analyzed without listing any
    errors.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当语法检查没有发现任何错误时，输出将类似于先前的输出，其中列出了分析的文件而没有列出任何错误。
- en: Since Ansible knows all the supported options in all the supported modules,
    it can quickly read your code and validate whether the YAML you provided contains
    all the required fields and that it does not contain any unsupported fields.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Ansible知道所有支持的模块中的所有支持选项，它可以快速读取您的代码并验证您提供的YAML是否包含所有必需的字段，并且不包含任何不受支持的字段。
- en: Summary
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about the various options that Ansible provides
    so that you can look for problems in your Ansible code. More specifically, you
    learned how to use host facts to diagnose failures, how to include testing within
    a playbook, how to use check mode, how to solve host connection issues, how to
    pass variables from the CLI, how to limit the execution to a subset of hosts,
    how to flush the code cache, and how to check for bad syntax.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了Ansible提供的各种选项，以便您可以查找Ansible代码中的问题。更具体地说，您学会了如何使用主机事实来诊断故障，如何在playbook中包含测试，如何使用检查模式，如何解决主机连接问题，如何从CLI传递变量，如何将执行限制为主机的子集，如何刷新代码缓存以及如何检查错误语法。
- en: In the next chapter, you will learn how to get started with Ansible Tower.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何开始使用Ansible Tower。
- en: Questions
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'True or False: The debug module allows you to print the value of a variable
    or a fixed string during Ansible''s execution.'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: True或False：调试模块允许您在Ansible执行期间打印变量的值或固定字符串。
- en: A) True
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: A) True
- en: B) False
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: B) False
- en: Which keyword allows Ansible to force limit the host's execution?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个关键字允许Ansible强制限制主机的执行？
- en: A) `--limit`
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: A) `--limit`
- en: B) `--max`
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: B) `--max`
- en: C) `--restrict`
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: C) `--restrict`
- en: D) `--force`
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: D) `--force`
- en: E) `--except`
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: E) `--except`
- en: Further reading
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Ansible's official documentation about error handling can be found at [https://docs.ansible.com/ansible/latest/user_guide/playbooks_error_handling.html](https://docs.ansible.com/ansible/latest/user_guide/playbooks_error_handling.html).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Ansible错误处理的官方文档可以在[https://docs.ansible.com/ansible/latest/user_guide/playbooks_error_handling.html](https://docs.ansible.com/ansible/latest/user_guide/playbooks_error_handling.html)找到。
