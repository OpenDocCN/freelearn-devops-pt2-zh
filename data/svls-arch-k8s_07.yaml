- en: 7\. Kubernetes Serverless with Kubeless
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. 使用Kubeless的Kubernetes无服务器
- en: Learning Objectives
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够：
- en: Create a Kubernetes cluster with Minikube
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Minikube创建Kubernetes集群
- en: Install the Kubeless framework on Kubernetes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kubernetes上安装Kubeless框架
- en: Create, update, call, and delete Kubeless functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建、更新、调用和删除Kubeless函数
- en: List, describe, debug, and monitor Kubeless functions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出、描述、调试和监视Kubeless函数
- en: Create HTTP and PubSub triggers for Kubeless functions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Kubeless函数创建HTTP和PubSub触发器
- en: In this chapter, we will first learn about the Kubeless architecture. Then,
    we'll create our first Kubeless function, deploy it, and invoke it. You'll also
    learn how to debug a Kubeless function in the case of a failure.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将首先了解Kubeless架构。然后，我们将创建我们的第一个Kubeless函数，部署它并调用它。您还将学习如何在Kubeless函数失败的情况下进行调试。
- en: Introduction to Kubeless
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubeless简介
- en: '**Kubeless** is an open source and Kubernetes-native serverless framework that
    runs on top of Kubernetes. This allows software developers to deploy code into
    a Kubernetes cluster without worrying about the underlying infrastructure. **Kubeless**
    is a project by Bitnami, who is a provider of packaged applications for any platform.
    Bitnami provides software installers for over 130 applications, which allow you
    to quickly and efficiently deploy these software applications to any platform.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubeless**是一个开源的、基于Kubernetes的无服务器框架，运行在Kubernetes之上。这使软件开发人员可以将代码部署到Kubernetes集群中，而不必担心底层基础设施。**Kubeless**是Bitnami的一个项目，Bitnami是任何平台上打包应用程序的提供商。Bitnami为超过130个应用程序提供软件安装程序，这使您可以快速高效地将这些软件应用程序部署到任何平台。'
- en: '**Kubeless** functions support multiple programming languages, including Python,
    PHP, Ruby, Node.js, Golang, Java, .NET, Ballerina, and custom runtimes. These
    functions can be invoked with HTTP(S) calls as well as event triggers with Kafka
    or NATS messaging systems. Kubeless also supports Kinesis triggers to associate
    functions with the AWS Kinesis service, which is a managed data-streaming service
    by AWS. Kubeless functions can even be invoked at specified intervals using scheduled
    triggers.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubeless**函数支持多种编程语言，包括Python、PHP、Ruby、Node.js、Golang、Java、.NET、Ballerina和自定义运行时。这些函数可以通过HTTP(S)调用以及使用Kafka或NATS消息系统的事件触发器来调用。Kubeless还支持Kinesis触发器，将函数与AWS
    Kinesis服务关联起来，这是AWS提供的托管数据流服务。Kubeless函数甚至可以使用定时触发器在指定的时间间隔内被调用。'
- en: Kubeless comes with its own Command-Line Interface (CLI) named `kubeless`, which
    is similar to the **kubectl** CLI offered by Kubernetes. We can create, deploy,
    list, and delete Kubeless functions using this `kubeless` CLI. Kubeless also has
    a graphical user interface, which makes the management of the functions much easier.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeless配备了自己的命令行界面（CLI），名为`kubeless`，类似于Kubernetes提供的**kubectl** CLI。我们可以使用这个`kubeless`
    CLI来创建、部署、列出和删除Kubeless函数。Kubeless还有一个图形用户界面，使函数的管理更加容易。
- en: In this chapter, we will create our first serverless function on Kubernetes
    using Kubeless. Then, we will invoke this function with multiple mechanisms including
    HTTP, and PubSub triggers. Once we are familiar with the basics of Kubeless, we
    will create a more advanced function that can post messages to Slack.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Kubeless在Kubernetes上创建我们的第一个无服务器函数。然后，我们将使用多种机制调用此函数，包括HTTP和PubSub触发器。一旦我们熟悉了Kubeless的基础知识，我们将创建一个更高级的函数，可以向Slack发布消息。
- en: Kubeless Architecture
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubeless架构
- en: The Kubeless framework is an extension of the Kubernetes framework, leveraging
    native Kubernetes concepts such as **Custom Resource Definitions** (**CRDs**)
    and custom controllers. Since Kubeless is built on top of Kubernetes, it can take
    advantage of all the great features available in Kubernetes, such as self-healing,
    autoscaling, load balancing, and service discovery.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeless框架是Kubernetes框架的扩展，利用了原生Kubernetes概念，如**自定义资源定义**（**CRDs**）和自定义控制器。由于Kubeless是建立在Kubernetes之上的，它可以利用Kubernetes中可用的所有出色功能，如自愈、自动扩展、负载平衡和服务发现。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Custom resources are extensions of the Kubernetes API. You can find more about
    Kubernetes' custom resources in the official Kubernetes documentation at [https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义资源是Kubernetes API的扩展。您可以在官方Kubernetes文档中找到有关Kubernetes自定义资源的更多信息，网址为[https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/](https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/)。
- en: 'Let''s take a look at the Kubernetes architecture in order to understand the
    core concepts behind it:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看Kubernetes架构，以了解其背后的核心概念：
- en: '![Figure 7.1: Kubeless architecture diagram'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.1：Kubeless架构图'
- en: '](image/C12607_07_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_01.jpg)'
- en: 'Figure 7.1: Kubeless architecture diagram'
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.1：Kubeless架构图
- en: The preceding diagram is similar to the standard Kubernetes architecture with
    Kubernetes masters and nodes. There can be one or more Kubernetes masters that
    are responsible for overall decision-making in the cluster. Kubernetes nodes are
    used to host the Kubernetes pods. These pods contain the functions written by
    the software developers. The source code of the functions will be injected into
    the pods by the controller using **ConfigMaps**.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表类似于标准的Kubernetes架构，包括Kubernetes主节点和节点。可以有一个或多个负责集群整体决策的Kubernetes主节点。Kubernetes节点用于托管Kubernetes
    pod。这些pod包含软件开发人员编写的函数。函数的源代码将由控制器使用**ConfigMaps**注入到pod中。
- en: These pods will be managed by the **Kubeless controller**. During the Kubeless
    framework installation process, it will launch an in-cluster controller that will
    continuously watch for function resources. When a function is being deployed,
    this controller will create relevant services, deployments, and pods with the
    provided runtime.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些pod将由**Kubeless控制器**管理。在Kubeless框架安装过程中，它将启动一个集群内控制器，该控制器将持续监视函数资源。当部署函数时，该控制器将使用提供的运行时创建相关的服务、部署和pod。
- en: 'The Kubeless framework has three core concepts:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeless框架有三个核心概念：
- en: Functions
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能
- en: Triggers
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发器
- en: Runtimes
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行时
- en: Functions represent the code blocks executed by the Kubeless framework. During
    the installation, a CRD named `functions.kubeless.io` will be created to represent
    the Kubeless functions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 函数代表Kubeless框架执行的代码块。在安装过程中，将创建一个名为`functions.kubeless.io`的CRD来表示Kubeless函数。
- en: 'Triggers represent the invocation mechanism of the function. A Kubeless function
    will be invoked whenever it receives a trigger. A single trigger can be associated
    with one or many functions. Functions deployed on Kubeless can be triggered using
    five possible mechanisms:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器代表函数的调用机制。当接收到触发器时，Kubeless函数将被调用。一个触发器可以关联一个或多个函数。在Kubeless上部署的函数可以使用五种可能的机制进行触发：
- en: 'HTTP trigger: This executes through HTTP(S)-based invocations such as HTTP
    GET or POST requests.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP触发器：这是通过基于HTTP(S)的调用执行的，比如HTTP GET或POST请求。
- en: 'CronJob trigger: This executes through a predefined schedule.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CronJob触发器：这是通过预定义的时间表执行的。
- en: 'Kafka trigger: This executes when a message gets published to the Kafka topics.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kafka触发器：当消息发布到Kafka主题时执行。
- en: 'NATS trigger: This executes when a message gets published to the NATS topics.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NATS触发器：当消息发布到NATS主题时执行。
- en: 'Kinesis trigger: This executes when records get published to AWS Kinesis data
    streams.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kinesis触发器：当记录发布到AWS Kinesis数据流时执行。
- en: Runtimes represent different programming languages that can be used to write
    and execute Kubeless functions. A single programming language will be further
    divided into multiple runtimes based on the version. As an example, Python 2.7,
    Python 3.4, Python 3.6, and Python 3.7 are the runtimes supporting the Python
    programming language. Kubeless supports runtimes in both the stable and incubator
    stage. A runtime is considered stable once it meets certain technical requirements
    specified by Kubeless. Incubator runtimes are considered to be in the development
    stage. Once the specified technical requirements are fulfilled, runtime maintainers
    can create a "pull" request in the Kubeless GitHub repository to move the runtime
    from the incubator stage to the stable stage. At the time of writing this book,
    Ballerina, .NET, Golang, Java, Node.js, PHP, and Python runtimes are available
    in the stable stage and JVM and Vertx runtimes are available in the incubator
    stage.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时代表可以用于编写和执行Kubeless函数的不同编程语言。单个编程语言将根据版本进一步分为多个运行时。例如，Python 2.7、Python 3.4、Python
    3.6和Python 3.7是支持Python编程语言的运行时。Kubeless支持稳定阶段和孵化器阶段的运行时。一旦满足Kubeless指定的某些技术要求，运行时将被视为稳定。孵化器运行时被视为处于开发阶段。一旦满足指定的技术要求，运行时维护者可以在Kubeless
    GitHub存储库中创建一个“pull”请求，将运行时从孵化器阶段移至稳定阶段。在撰写本书时，Ballerina、.NET、Golang、Java、Node.js、PHP和Python运行时在稳定阶段可用，JVM和Vertx运行时在孵化器阶段可用。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'The following document defines the technical requirements for a stable runtime:
    [https://github.com/kubeless/runtimes/blob/master/DEVELOPER_GUIDE.md#runtime-image-requirements](https://github.com/kubeless/runtimes/blob/master/DEVELOPER_GUIDE.md#runtime-image-requirements).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下文档定义了稳定运行时的技术要求：[https://github.com/kubeless/runtimes/blob/master/DEVELOPER_GUIDE.md#runtime-image-requirements](https://github.com/kubeless/runtimes/blob/master/DEVELOPER_GUIDE.md#runtime-image-requirements)。
- en: Creating a Kubernetes Cluster
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Kubernetes集群
- en: We need to have a working Kubernetes cluster in order to install the Kubeless
    framework. You can create your own Kubernetes cluster using tools such as Minikube,
    Kubeadm, and Kops. You can also create a Kubernetes cluster using the managed
    Kubernetes cluster services provided by public cloud providers such as **Google
    Kubernetes Engine** (**GKE**), Microsoft's **Azure Kubernetes Service** (**AKS**),
    and **Amazon Elastic Kubernetes Service** (**Amazon EKS**). In the following sections,
    we will create our own Kubernetes cluster using **Minikube**.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个工作的Kubernetes集群才能安装Kubeless框架。您可以使用Minikube、Kubeadm和Kops等工具创建自己的Kubernetes集群。您还可以使用公共云提供商提供的托管Kubernetes集群服务，如Google
    Kubernetes Engine（GKE）、Microsoft的Azure Kubernetes Service（AKS）和Amazon Elastic
    Kubernetes Service（Amazon EKS）来创建Kubernetes集群。在接下来的章节中，我们将使用Minikube创建自己的Kubernetes集群。
- en: Creating a Kubernetes Cluster with Minikube
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Minikube创建Kubernetes集群
- en: 'First, we are going to create our Kubernetes cluster with Minikube. Minikube
    is a tool that will install and run Kubernetes locally on your PC. This will create
    a single-node Kubernetes cluster inside a **Virtual Machine** (**VM**). Minikube
    is used by the software developers who want to try Kubernetes locally, but it
    is not recommended for running production-grade Kubernetes clusters. We will begin
    creating our Kubernetes cluster by performing the following steps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用Minikube创建我们的Kubernetes集群。Minikube是一个工具，可以在您的个人电脑上安装和运行Kubernetes。这将在**虚拟机**（**VM**）内创建一个单节点Kubernetes集群。Minikube被软件开发人员用来在本地尝试Kubernetes，但不建议用于运行生产级别的Kubernetes集群。我们将通过以下步骤开始创建我们的Kubernetes集群：
- en: Install VirtualBox.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装VirtualBox。
- en: Since Minikube is running as a VM, we need to install a hypervisor to support
    the VMs. We will be installing Oracle VirtualBox, which is a free virtualization
    software developed by Oracle Corporation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Minikube作为虚拟机运行，我们需要安装一个支持虚拟机的hypervisor。我们将安装由Oracle Corporation开发的免费虚拟化软件Oracle
    VirtualBox。
- en: Note
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: 'VirtualBox can be installed on Ubuntu 18.04 with the APT package manager by
    executing the following command in the terminal:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在终端中执行以下命令在Ubuntu 18.04上使用APT软件包管理器安装VirtualBox：
- en: '`$ sudo apt install virtualbox -y`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ sudo apt install virtualbox -y`'
- en: 'Execute the `virtualbox` command to start **Oracle VM VirtualBox Manager**,
    as shown in the following screenshot:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`virtualbox`命令启动**Oracle VM VirtualBox Manager**，如下截图所示：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Figure 7.2: Oracle VM VirtualBox Manager'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.2：Oracle VM VirtualBox Manager'
- en: '](image/C12607_07_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_02.jpg)'
- en: 'Figure 7.2: Oracle VM VirtualBox Manager'
  id: totrans-51
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.2：Oracle VM VirtualBox Manager
- en: Install `minikube`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`minikube`。
- en: 'Now, we are going to install `Minikube` version 1.2.0, which is the latest
    version available at the time of writing this book. First, download the `minikube`
    binaries to your local machine:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将安装`Minikube`版本1.2.0，这是撰写本书时的最新版本。首先，将`minikube`二进制文件下载到本地机器：
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output will be as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 7.3: Downloading the Minikube binaries'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.3：下载Minikube二进制文件'
- en: '](image/C12607_07_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_03.jpg)'
- en: 'Figure 7.3: Downloading the Minikube binaries'
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.3：下载Minikube二进制文件
- en: 'Then, add execution permission to the `minikube` binary:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为`minikube`二进制文件添加执行权限：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output is as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 7.4: Adding execution permissions to Minikube binaries'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.4：为Minikube二进制文件添加执行权限'
- en: '](image/C12607_07_04.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_04.jpg)'
- en: 'Figure 7.4: Adding execution permissions to Minikube binaries'
  id: totrans-64
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.4：为Minikube二进制文件添加执行权限
- en: 'Finally, move the Minikube binary to the `/usr/local/bin/` path location:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将Minikube二进制文件移动到`/usr/local/bin/`路径位置：
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The result is shown in the following screenshot:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下截图所示：
- en: '![Figure 7.5: Moving the Minikube binaries to the path'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.5：将Minikube二进制文件移动到路径'
- en: '](image/C12607_07_05.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_05.jpg)'
- en: 'Figure 7.5: Moving the Minikube binaries to the path'
  id: totrans-70
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.5：将Minikube二进制文件移动到路径
- en: 'Verify the installation:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证安装：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The result is shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下截图所示：
- en: '![Figure 7.6: Verifying the Minikube version'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.6：验证Minikube版本'
- en: '](image/C12607_07_06.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_06.jpg)'
- en: 'Figure 7.6: Verifying the Minikube version'
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.6：验证Minikube版本
- en: 'Start the Minikube cluster with the `minikube start` command:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`minikube start`命令启动Minikube集群：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will create a VM for Minikube in VirtualBox, as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在VirtualBox中为Minikube创建一个虚拟机，如下所示：
- en: '![Figure 7.7: Starting Minikube'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.7：启动Minikube'
- en: '](image/C12607_07_07.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_07.jpg)'
- en: 'Figure 7.7: Starting Minikube'
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.7：启动Minikube
- en: 'Now, in the **VirtualBox Manager** window, you can see a VM named `minikube`
    in the running state:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在**VirtualBox Manager**窗口中，您可以看到一个名为`minikube`的虚拟机处于运行状态：
- en: '![Figure 7.8: Oracle VirtualBox with the Minikube VM'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.8：带有Minikube VM的Oracle VirtualBox'
- en: '](image/C12607_07_08.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_08.jpg)'
- en: 'Figure 7.8: Oracle VirtualBox with the Minikube VM'
  id: totrans-86
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.8：带有Minikube VM的Oracle VirtualBox
- en: Install `kubectl`.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`kubectl`。
- en: 'Now, we are going to install `kubectl` version 1.15.0, which is the latest
    version available at the time of writing this book. First, download the `kubectl`
    binaries to your local machine:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将安装`kubectl`版本1.15.0，这是撰写本书时可用的最新版本。首先，将`kubectl`二进制文件下载到您的本地机器：
- en: '[PRE6]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will show the following output:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示以下输出：
- en: '![Figure 7.9: Downloading the kubectl binaries'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.9：下载kubectl二进制文件'
- en: '](image/C12607_07_09.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_09.jpg)'
- en: 'Figure 7.9: Downloading the kubectl binaries'
  id: totrans-93
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.9：下载kubectl二进制文件
- en: 'Then, add execution permissions to the Minikube binary:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为Minikube二进制文件添加执行权限：
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot shows the result:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了结果：
- en: '![Figure 7.10: Adding execution permissions to the kubectl binaries'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.10：为kubectl二进制文件添加执行权限'
- en: '](image/C12607_07_10.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_10.jpg)'
- en: 'Figure 7.10: Adding execution permissions to the kubectl binaries'
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.10：为kubectl二进制文件添加执行权限
- en: 'Finally, move the Minikube binary to the `/usr/local/bin/` path location:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将Minikube二进制文件移动到`/usr/local/bin/`路径位置：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output is as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![ Figure 7.11: Moving the kubectl binaries to the path'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.11：将kubectl二进制文件移动到路径'
- en: '](image/C12607_07_11.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_11.jpg)'
- en: 'Figure 7.11: Moving the kubectl binaries to the path'
  id: totrans-105
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.11：将kubectl二进制文件移动到路径
- en: 'Verify the installation:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证安装：
- en: '[PRE9]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following will be shown on the screen:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕上将显示以下内容：
- en: '![Figure 7.12: Verifying the kubectl version'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.12：验证kubectl版本'
- en: '](image/C12607_07_12.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_12.jpg)'
- en: 'Figure 7.12: Verifying the kubectl version'
  id: totrans-111
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.12：验证kubectl版本
- en: 'Verify that the `kubectl` CLI is correctly pointed to the Minikube cluster:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`kubectl` CLI是否正确指向Minikube集群：
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should see the following output:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下输出：
- en: '![Figure 7.13: Verifying that kubectl is pointed to the Minikube cluster'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.13：验证kubectl是否指向Minikube集群'
- en: '](image/C12607_07_13.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_13.jpg)'
- en: 'Figure 7.13: Verifying that kubectl is pointed to the Minikube cluster'
  id: totrans-117
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.13：验证kubectl是否指向Minikube集群
- en: Installing Kubeless
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Kubeless
- en: 'Once the Minikube Kubernetes environment is ready, we can install Kubeless
    on top of the Kubernetes cluster. Installing Kubeless consists of installing three
    components:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Minikube Kubernetes环境准备就绪，我们可以在Kubernetes集群之上安装Kubeless。安装Kubeless包括安装三个组件：
- en: The Kubeless framework
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubeless框架
- en: The Kubeless CLI
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubeless CLI
- en: The Kubeless UI
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubeless UI
- en: The Kubeless framework will install all the extensions on top of Kubernetes
    to support Kubeless features. This includes CRDs, custom controllers, and deployments.
    The Kubeless CLI is used to interact with the Kubeless framework for tasks such
    as deploying functions, invoking functions, and creating triggers. The Kubeless
    UI is a GUI for the Kubeless framework, which will help you to view, edit, and
    run functions.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeless框架将在Kubernetes之上安装所有扩展以支持Kubeless功能。这包括CRD、自定义控制器和部署。Kubeless CLI用于与Kubeless框架交互，执行任务如部署函数、调用函数和创建触发器。Kubeless
    UI是Kubeless框架的GUI，可帮助您查看、编辑和运行函数。
- en: Installing the Kubeless Framework
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Kubeless框架
- en: We are going to install Kubeless version 1.0.3, which is the latest available
    release at the time of writing this book.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装Kubeless版本1.0.3，这是撰写本书时可用的最新版本。
- en: 'First, we need to create the `kubeless` namespace using `kubectl create namespace`.
    This is the default namespace used by Kubeless to store all its objects:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要使用`kubectl create namespace`创建`kubeless`命名空间。这是Kubeless使用的默认命名空间，用于存储所有对象：
- en: '[PRE11]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The result is as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Figure 7.14: Creating the kubeless namespace'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.14：创建kubeless命名空间'
- en: '](image/C12607_07_14.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_14.jpg)'
- en: 'Figure 7.14: Creating the kubeless namespace'
  id: totrans-131
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.14：创建kubeless命名空间
- en: 'In the next step, we will install the Kubeless framework. We will be using
    one of the YAML manifests provided by Kubeless to install the framework. There
    are multiple `yaml` files provided by Kubeless and we have to choose the correct
    `yaml` file based on the Kubernetes environment (for example, `rbac`, `non-rbac`,
    or `openshift`):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们将安装Kubeless框架。我们将使用Kubeless提供的YAML清单之一来安装框架。Kubeless提供了多个`yaml`文件，我们必须根据Kubernetes环境（例如`rbac`、`non-rbac`或`openshift`）选择正确的`yaml`文件：
- en: '[PRE12]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The screen will display the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕将显示以下内容：
- en: '![Figure 7.15: Installing the Kubeless framework'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.15：安装Kubeless框架'
- en: '](image/C12607_07_15.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_15.jpg)'
- en: 'Figure 7.15: Installing the Kubeless framework'
  id: totrans-137
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.15：安装Kubeless框架
- en: 'The preceding step will create multiple Kubernetes objects in the `kubeless`
    namespace. This will create a function object as a **Custom Resource Definition**
    and Kubeless controller as a deployment. You can verify that these objects are
    up and running by executing the following commands:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 上一步将在`kubeless`命名空间中创建多个Kubernetes对象。这将创建一个函数对象作为**自定义资源定义**和Kubeless控制器作为部署。您可以通过执行以下命令验证这些对象是否正在运行：
- en: '[PRE13]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You will see the following on your screen:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在屏幕上看到以下内容：
- en: '![Figure 7.16: Verifying the Kubeless installation'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.16：验证Kubeless安装'
- en: '](image/C12607_07_16.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_16.jpg)'
- en: 'Figure 7.16: Verifying the Kubeless installation'
  id: totrans-143
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.16：验证Kubeless安装
- en: Now, we have completed the installation of the Kubeless framework successfully.
    In the next section, we will install the Kubeless CLI.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已成功完成了Kubeless框架的安装。在下一节中，我们将安装Kubeless CLI。
- en: Installing the Kubeless CLI
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Kubeless CLI
- en: '**Kubeless CLI** is the command-line interface for running commands against
    the Kubeless framework. `kubeless function` is the most common one because it
    allows you to perform tasks such as deploying, calling, updating, or deleting
    a function. Additionally, you can list and describe the functions. Checking the
    logs or metrics is also supported through the `kubeless function` command. You
    can also manage Kubeless triggers, topics, and autoscaling from the Kubeless CLI.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubeless CLI**是针对Kubeless框架运行命令的命令行界面。`kubeless function`是最常见的命令，因为它允许您执行诸如部署、调用、更新或删除函数等任务。此外，您还可以通过`kubeless
    function`命令列出和描述函数。还支持通过`kubeless function`命令检查日志或指标。您还可以通过Kubeless CLI管理Kubeless触发器、主题和自动缩放。'
- en: Once you have successfully installed the Kubeless framework, the next step is
    to install the Kubeless CLI. We are going to use Kubeless CLI version 1.0.3, which
    is the same version as the Kubeless framework we installed in the previous section.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功Kubeless框架后，下一步是安装Kubeless CLI。我们将使用Kubeless CLI版本1.0.3，这与我们在上一节中安装的Kubeless框架版本相同。
- en: 'First, we need to download the Kubeless CLI zip file:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要下载Kubeless CLI zip文件：
- en: '[PRE14]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The result is as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Figure 7.17: Downloading the Kubeless binaries'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.17：下载Kubeless二进制文件'
- en: '](image/C12607_07_17.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_17.jpg)'
- en: 'Figure 7.17: Downloading the Kubeless binaries'
  id: totrans-153
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.17：下载Kubeless二进制文件
- en: 'Next, we will extract the zip file:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将提取zip文件：
- en: '[PRE15]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To understand this better, refer to the following output:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要更好地理解这一点，请参考以下输出：
- en: '![Figure 7.18: Extracting the Kubeless binaries'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.18：提取Kubeless二进制文件'
- en: '](image/C12607_07_18.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_18.jpg)'
- en: 'Figure 7.18: Extracting the Kubeless binaries'
  id: totrans-159
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.18：提取Kubeless二进制文件
- en: 'Then, move the Kubeless executable to the `/usr/local/bin/` path location:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将Kubeless可执行文件移动到`/usr/local/bin/`路径位置：
- en: '[PRE16]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following is what you''ll see on your screen:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您在屏幕上看到的内容：
- en: '![Figure 7.19: Moving the Kubeless binaries to the path'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.19：将Kubeless二进制文件移动到路径'
- en: '](image/C12607_07_19.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_19.jpg)'
- en: 'Figure 7.19: Moving the Kubeless binaries to the path'
  id: totrans-165
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.19：将 Kubeless 二进制文件移动到路径
- en: 'Now, we have successfully installed the Kubeless CLI. We can verify this by
    running the following command:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经成功安装了 Kubeless CLI。您可以通过运行以下命令来验证：
- en: '[PRE17]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Refer to the following screenshot:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下截图：
- en: '![Figure 7.20: Verifying the Kubeless version'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.20：验证 Kubeless 版本'
- en: '](image/C12607_07_20.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_20.jpg)'
- en: 'Figure 7.20: Verifying the Kubeless version'
  id: totrans-171
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.20：验证 Kubeless 版本
- en: The Kubeless UI
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubeless UI
- en: 'The **Kubeless UI** is the GUI for Kubeless. It allows you to create, edit,
    delete, and execute Kubeless functions with an easy-to-use UI. Execute the following
    command to install the Kubeless UI in the Kubernetes cluster:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubeless UI** 是 Kubeless 的图形用户界面。它允许您使用易于使用的 UI 创建、编辑、删除和执行 Kubeless 函数。执行以下命令在
    Kubernetes 集群中安装 Kubeless UI：'
- en: '[PRE18]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will give you the following output:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给你以下输出：
- en: '![Figure 7.21: Installing the Kubeless UI'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.21：安装 Kubeless UI'
- en: '](image/C12607_07_21.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_21.jpg)'
- en: 'Figure 7.21: Installing the Kubeless UI'
  id: totrans-178
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.21：安装 Kubeless UI
- en: 'Once the installation is successful, execute the following command to open
    the Kubeless UI in a browser window. You can reload the browser window if the
    Kubeless UI doesn''t show up, since creating the service can take a few minutes:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功后，执行以下命令在浏览器窗口中打开 Kubeless UI。如果 Kubeless UI 没有显示出来，可以重新加载浏览器窗口，因为创建服务可能需要几分钟时间：
- en: '[PRE19]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This is shown as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示：
- en: '![Figure 7.22: The Kubeless GUI'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.22：Kubeless GUI'
- en: '](image/C12607_07_22.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_22.jpg)'
- en: 'Figure 7.22: The Kubeless GUI'
  id: totrans-184
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.22：Kubeless GUI
- en: We've just completed the installation of the Kubeless UI, which can be used
    to create, edit, delete, and execute Kubeless functions that are similar to the
    Kubeless CLI.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚完成了 Kubeless UI 的安装，它可以用来创建、编辑、删除和执行类似于 Kubeless CLI 的 Kubeless 函数。
- en: Kubeless Functions
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubeless 函数
- en: 'Once Kubeless is successfully installed, you can now forget about the underlying
    infrastructure, including VMs and containers, and focus only on your function
    logic. Kubeless functions are code snippets written in one of the supported languages.
    As we discussed previously, Kubeless supports multiple programming languages and
    versions. You can execute the `kubeless get-server-config` command to get a list
    of language runtimes supported by your Kubeless version:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Kubeless 成功安装，您现在可以忘记底层基础设施，包括虚拟机和容器，只专注于您的函数逻辑。Kubeless 函数是用其中一种支持的语言编写的代码片段。正如我们之前讨论的，Kubeless
    支持多种编程语言和版本。您可以执行 `kubeless get-server-config` 命令来获取您的 Kubeless 版本支持的语言运行时列表：
- en: '[PRE20]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The result is shown in the following screenshot:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下截图所示：
- en: '![Figure 7.23: Kubeless server configuration'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.23：Kubeless 服务器配置'
- en: '](image/C12607_07_23.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_23.jpg)'
- en: 'Figure 7.23: Kubeless server configuration'
  id: totrans-192
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.23：Kubeless 服务器配置
- en: In the following sections, we are going to create, deploy, list, invoke, update,
    and delete a Kubeless function.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将创建、部署、列出、调用、更新和删除 Kubeless 函数。
- en: Creating a Kubeless Function
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 Kubeless 函数
- en: Every Kubeless function, regardless of the language runtime, has the same format.
    It receives two arguments as input and returns a string or object as the response.
    The first argument of the function is an event, which includes all the information
    about the event source such as the event ID, event time, and event type. The `data`
    field inside the `event` object contains the body of the function request. The
    second argument of the function is named `context`, which contains general information
    about the function, such as its name, timeout, runtime, and memory limits.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Kubeless函数，无论语言运行时如何，都具有相同的格式。它接收两个参数作为输入，并返回一个字符串或对象作为响应。函数的第一个参数是一个事件，其中包括有关事件源的所有信息，例如事件ID、事件时间和事件类型。`event`对象内的`data`字段包含函数请求的主体。函数的第二个参数命名为`context`，其中包含有关函数的一般信息，例如其名称、超时、运行时和内存限制。
- en: 'The following is a sample Python function that returns the text `Welcome to
    Kubeless World` as the response:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个返回文本`Welcome to Kubeless World`作为响应的示例Python函数：
- en: '[PRE21]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You can save the file as `hello.py`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将文件保存为`hello.py`。
- en: Deploying the Kubeless Function
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署Kubeless函数
- en: 'Once the function is ready, you can deploy it to the Kubeless framework. You
    can use the `kubeless function deploy` command to register the function with the
    Kubeless framework. In order to deploy a function, you need to provide few pieces
    of information, including the function name, the runtime of the function, the
    file that contains the function source code, and the method name to be executed
    when the function is invoked:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦函数准备就绪，您可以将其部署到Kubeless框架中。您可以使用`kubeless function deploy`命令将函数注册到Kubeless框架中。为了部署函数，您需要提供一些信息，包括函数名称、函数的运行时、包含函数源代码的文件以及在调用函数时要执行的方法名称：
- en: '[PRE22]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output is as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 7.24: Deploying a Kubeless function'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.24：部署Kubeless函数'
- en: '](image/C12607_07_24.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_24.jpg)'
- en: 'Figure 7.24: Deploying a Kubeless function'
  id: totrans-205
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.24：部署Kubeless函数
- en: 'Let''s break this command up into a few pieces in order to understand what
    each part of the command does:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个命令分解成几个部分，以便了解命令的每个部分的作用：
- en: '`kubeless function deploy hello`: This tells Kubeless to register a new function
    named `hello`. We can use this name to invoke this function later.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubeless function deploy hello`：这告诉Kubeless注册一个名为`hello`的新函数。我们可以在以后使用这个名称来调用这个函数。'
- en: '`--runtime python3.7`: This tells Kubeless to use the Python 3.7 runtime to
    run this function.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--runtime python3.7`：这告诉Kubeless使用Python 3.7运行时来运行此函数。'
- en: '`--from-file hello.py`: This tells Kubeless to use the code available in the
    `hello.py` file to create the `hello` function. If you are not in the current
    file path when executing the command, you need to specify the full file path.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--from-file hello.py`：这告诉Kubeless使用`hello.py`文件中可用的代码来创建`hello`函数。如果在执行命令时不在当前文件路径中，需要指定完整的文件路径。'
- en: '`--handler hello.main`: This specifies the name of the code file and the method
    to execute when this function is invoked. This should be in the format of `<file-name>.<function-name>`.
    In our case, the filename is `hello` and the function name inside the file is
    `main`.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--handler hello.main`：这指定了在调用此函数时要执行的代码文件的名称和方法的名称。这应该是`<file-name>.<function-name>`的格式。在我们的情况下，文件名是`hello`，文件内的函数名是`main`。'
- en: You can find the other options that are available when deploying a function
    by executing the `kubeless function deploy --help` command.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过执行`kubeless function deploy --help`命令找到在部署函数时可用的其他选项。
- en: Listing the Kubeless Function
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列出Kubeless函数
- en: 'Once you deploy the function, you can verify that the function is deployed
    successfully by listing the functions with the `kubeless function list` command.
    You should see the details of all the registered functions as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 部署函数后，您可以使用`kubeless function list`命令列出函数，以验证函数是否成功部署。您应该看到所有注册函数的详细信息如下：
- en: '[PRE23]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following screenshot reflects the result:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图反映了结果：
- en: '![Figure 7.25: Listing the Kubeless functions with the Kubeless CLI'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.25：使用Kubeless CLI列出Kubeless函数'
- en: '](image/C12607_07_25.jpg)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_25.jpg)'
- en: 'Figure 7.25: Listing the Kubeless functions with the Kubeless CLI'
  id: totrans-218
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.25：使用Kubeless CLI列出Kubeless函数
- en: Note
  id: totrans-219
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The same can be achieved using the `kubeless function ls` command.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 同样可以使用`kubeless function ls`命令实现。
- en: 'If you wish to obtain more detailed information about a specific function,
    you can use the `kubeless function describe` command:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望获取有关特定函数的更详细信息，可以使用`kubeless function describe`命令：
- en: '[PRE24]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'It produces the following output:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 它产生以下输出：
- en: '![Figure 7.26: Describing a Kubeless function'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.26：描述Kubeless函数'
- en: '](image/C12607_07_26.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_26.jpg)'
- en: 'Figure 7.26: Describing a Kubeless function'
  id: totrans-226
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.26：描述Kubeless函数
- en: 'Since a Kubeless function is created as a Kubernetes object (that is, a custom
    resource), you can also use the Kubectl CLI to get the information about the available
    functions. The following is the output from the `kubectl get functions` command:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Kubeless函数被创建为Kubernetes对象（即自定义资源），您还可以使用Kubectl CLI获取有关可用函数的信息。以下是`kubectl
    get functions`命令的输出：
- en: '[PRE25]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You will get the following output:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到以下输出：
- en: '![Figure 7.27: Listing the Kubeless functions with the kubectl CLI'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.27：使用kubectl CLI列出Kubeless函数'
- en: '](image/C12607_07_27.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_27.jpg)'
- en: 'Figure 7.27: Listing the Kubeless functions with the kubectl CLI'
  id: totrans-232
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.27：使用kubectl CLI列出Kubeless函数
- en: Invoking the Kubeless Function
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用Kubeless函数
- en: 'Now it''s time to invoke our `hello` function. You can use the `kubeless function
    call` method to invoke the Kubeless function. The `hello` function will return
    the text `Welcome to Kubeless World` as the response:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候调用我们的`hello`函数了。您可以使用`kubeless function call`方法来调用Kubeless函数。`hello`函数将返回文本`Welcome
    to Kubeless World`作为响应：
- en: '[PRE26]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The output will be as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 7.28: Invoking a Kubeless function with the kubeless CLI'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.28：使用kubeless CLI调用Kubeless函数'
- en: '](image/C12607_07_28.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_28.jpg)'
- en: 'Figure 7.28: Invoking a Kubeless function with the kubeless CLI'
  id: totrans-239
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.28：使用kubeless CLI调用Kubeless函数
- en: Congratulations! You have successfully executed your first Kubeless function.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功执行了您的第一个Kubeless函数。
- en: 'You can also invoke Kubeless functions with the Kubeless UI. Once you open
    the Kubeless UI, you can see the list of functions available on the left-hand
    side. You can click on the `hello` function to open it. Then, click on the **Run**
    function button to execute the function. You can see the expected response of
    **Welcome to Kubeless World** underneath the **Response** section:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用Kubeless UI调用Kubeless函数。打开Kubeless UI后，您可以在左侧看到可用函数的列表。您可以点击`hello`函数以打开它。然后，点击**Run**函数按钮来执行函数。您可以在**Response**部分下看到预期的**Welcome
    to Kubeless World**响应：
- en: '![Figure 7.29: Invoking a Kubeless function with the Kubeless UI'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.29：使用Kubeless UI调用Kubeless函数'
- en: '](image/C12607_07_29.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_29.jpg)'
- en: 'Figure 7.29: Invoking a Kubeless function with the Kubeless UI'
  id: totrans-244
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.29：使用Kubeless UI调用Kubeless函数
- en: Note
  id: totrans-245
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Kubeless functions can also be updated or deleted using the Kubeless UI.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeless函数也可以使用Kubeless UI进行更新或删除。
- en: Updating the Kubeless Function
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新Kubeless函数
- en: 'After successfully invoking our `hello` function, we are now going to update
    it to say *hello* to anyone. You can update the `hello.py` file as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 成功调用我们的`hello`函数后，现在我们将对其进行更新，以向任何人说*hello*。您可以按照以下方式更新`hello.py`文件：
- en: '[PRE27]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can then execute the `kubeless function update` command to update the `hello`
    function that we created earlier:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以执行`kubeless function update`命令来更新我们之前创建的`hello`函数：
- en: '[PRE28]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This will give the following output:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '![Figure 7.30: Updating a Kubeless function with the Kubeless CLI'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.30：使用Kubeless CLI更新Kubeless函数'
- en: '](image/C12607_07_30.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_30.jpg)'
- en: 'Figure 7.30: Updating a Kubeless function with the Kubeless CLI'
  id: totrans-255
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.30：使用Kubeless CLI更新Kubeless函数
- en: 'Now you have to pass the required data when invoking the `hello` function:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在调用`hello`函数时，您必须传递所需的数据：
- en: '[PRE29]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This is the output of the preceding code:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这是上述代码的输出：
- en: '![Figure 7.31: Invoking updated Kubeless functions'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.31：调用更新后的Kubeless函数'
- en: '](image/C12607_07_31.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_31.jpg)'
- en: 'Figure 7.31: Invoking updated Kubeless functions'
  id: totrans-261
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.31：调用更新后的Kubeless函数
- en: You should be able to see `Hello Kubeless World!` as the output of the preceding
    command.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够在上述命令的输出中看到`Hello Kubeless World!`。
- en: Deleting the Kubeless Function
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除Kubeless函数
- en: 'If you want to delete the function, you can execute the `kubeless function
    delete` command:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要删除该函数，可以执行`kubeless function delete`命令：
- en: '[PRE30]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This renders the following:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下结果：
- en: '![Figure 7.32: Deleting the kubeless function'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.32：删除kubeless函数'
- en: '](image/C12607_07_32.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_32.jpg)'
- en: 'Figure 7.32: Deleting the kubeless function'
  id: totrans-269
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.32：删除kubeless函数
- en: 'Once the function is deleted, try listing the function again. It should throw
    an error, as follows:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦函数被删除，尝试再次列出函数。它应该会抛出一个错误，如下所示：
- en: '[PRE31]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We would see the following result:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到以下结果：
- en: '![Figure 7.33: Verifying the deletion of the kubeless function'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.33：验证删除kubeless函数'
- en: '](image/C12607_07_33.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_33.jpg)'
- en: 'Figure 7.33: Verifying the deletion of the kubeless function'
  id: totrans-275
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.33：验证删除kubeless函数
- en: 'The preceding `kubeless function delete` command will delete not only the `kubeless`
    function, but, while creating the Kubeless function, the framework creates Kubernetes
    objects such as pods and deployment. Those objects will also be deleted when we
    delete the kubeless function. You can verify this with the following command:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的`kubeless function delete`命令不仅会删除`kubeless`函数，而且在创建Kubeless函数时，框架会创建诸如pod和deployment之类的Kubernetes对象。当我们删除kubeless函数时，这些对象也将被删除。您可以使用以下命令进行验证：
- en: '[PRE32]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You can see the result as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照以下方式查看结果：
- en: '![Figure 7.34: Verifying the deletion'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.34：验证删除'
- en: '](image/C12607_07_34.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_34.jpg)'
- en: 'Figure 7.34: Verifying the deletion'
  id: totrans-281
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.34：验证删除
- en: Now we have learned how to create, deploy, list, invoke, update, and delete
    Kubeless functions. Let's move on to an exercise about creating your first Kubeless
    function.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何创建、部署、列出、调用、更新和删除Kubeless函数。让我们继续进行一个关于创建您的第一个Kubeless函数的练习。
- en: 'Exercise 21: Creating Your First Kubeless Function'
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习21：创建您的第一个Kubeless函数
- en: 'In this exercise, we will create, deploy, invoke, and later delete a Kubeless
    function. Perform the following steps to complete the exercise:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将创建、部署、调用，然后删除一个Kubeless函数。执行以下步骤来完成练习：
- en: Note
  id: totrans-285
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The code files for this exercise can be found at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson07/Exercise21](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson07/Exercise21).
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 此练习的代码文件可以在[https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson07/Exercise21](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson07/Exercise21)找到。
- en: 'Create a file with a sample `hello` function:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个带有示例`hello`函数的文件：
- en: '[PRE33]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This will render the following output:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这将呈现以下输出：
- en: '![Figure 7.35: Creating the my-function.py file'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.35：创建my-function.py文件'
- en: '](image/C12607_07_35.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_35.jpg)'
- en: 'Figure 7.35: Creating the my-function.py file'
  id: totrans-292
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.35：创建my-function.py文件
- en: 'Create the `lesson-7` namespace and deploy the `my-function.py` file created
    previously:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`lesson-7`命名空间并部署之前创建的`my-function.py`文件：
- en: '[PRE34]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The output is as follows:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 7.36: Deploying my-function'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.36：部署my-function'
- en: '](image/C12607_07_36.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_36.jpg)'
- en: 'Figure 7.36: Deploying my-function'
  id: totrans-298
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.36：部署my-function
- en: 'Verify whether `my-function` has been deployed correctly:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证`my-function`是否已正确部署：
- en: '[PRE35]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output rendered is as follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 7.37: Verifying my-function has successfully deployed'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.37：验证my-function已成功部署'
- en: '](image/C12607_07_37.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_37.jpg)'
- en: 'Figure 7.37: Verifying my-function has successfully deployed'
  id: totrans-304
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.37：验证my-function已成功部署
- en: 'Invoke `my-function` with the `kubeless` CLI:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubeless` CLI调用`my-function`：
- en: '[PRE36]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'It will look like this:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来像这样：
- en: '![Figure 7.38: Invoking my-function with the Kubeless CLI'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.38：使用Kubeless CLI调用my-function'
- en: '](image/C12607_07_38.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_38.jpg)'
- en: 'Figure 7.38: Invoking my-function with the Kubeless CLI'
  id: totrans-310
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.38：使用Kubeless CLI调用my-function
- en: 'Delete `my-function` and the `lesson-7` namespace:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`my-function`和`lesson-7`命名空间：
- en: '[PRE37]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following is what we get:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们得到的：
- en: '![Figure 7.39: Deleting my-function with the Kubeless CLI'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.39：使用Kubeless CLI删除my-function'
- en: '](image/C12607_07_39.jpg)'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_39.jpg)'
- en: 'Figure 7.39: Deleting my-function with the Kubeless CLI'
  id: totrans-316
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.39：使用Kubeless CLI删除my-function
- en: In this exercise, first, we created a simple Python function, which returned
    the `Welcome to Serverless Architectures with Kubernetes` string as the output
    and deployed it to Kubeless. Then, we listed the function to make sure it was
    created successfully. Then, we invoked the `my-function` and successfully returned
    the expected response of `Welcome to Serverless Architectures with Kubernetes`.
    Finally, we did the cleanup by deleting the function.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，首先，我们创建了一个简单的Python函数，它返回`Welcome to Serverless Architectures with Kubernetes`字符串作为输出，并将其部署到Kubeless。然后，我们列出函数以确保它已成功创建。然后，我们调用了`my-function`并成功返回了预期的响应`Welcome
    to Serverless Architectures with Kubernetes`。最后，我们通过删除函数进行清理。
- en: Kubeless HTTP Triggers
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubeless HTTP触发器
- en: In the previous sections, we discussed how to invoke Kubeless functions using
    the Kubeless CLI. In this section, we are going to demonstrate how to expose these
    functions to everyone by creating HTTP triggers.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们讨论了如何使用Kubeless CLI调用Kubeless函数。在本节中，我们将演示如何通过创建HTTP触发器向所有人公开这些函数。
- en: HTTP triggers are used to execute a Kubeless function through HTTP(S)-based
    invocations such as HTTP `GET` or `POST` requests. When a function is deployed,
    Kubeless will create a Kubernetes service associated with the function with the
    `ClusterIP` as the service type; however, these services are not publicly accessible.
    In order to make the function publicly available, we need to create a Kubeless
    HTTP trigger. This will expose the Kubeless functions to everyone by using Kubernetes
    ingress rules.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP触发器用于通过基于HTTP(S)的调用（如HTTP `GET`或`POST`请求）执行Kubeless函数。当函数部署时，Kubeless将创建一个与函数关联的Kubernetes服务，服务类型为`ClusterIP`；然而，这些服务是不可公开访问的。为了使函数公开可用，我们需要创建一个Kubeless
    HTTP触发器。这将通过使用Kubernetes入口规则向所有人公开Kubeless函数。
- en: 'In order to run the HTTP trigger, your Kubernetes cluster must have a running
    ingress controller. Once the ingress controller is running in the Kubernetes cluster,
    you can use the `kubeless trigger http create` command to create an HTTP trigger:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行HTTP触发器，您的Kubernetes集群必须有一个运行中的入口控制器。一旦入口控制器在Kubernetes集群中运行，您可以使用`kubeless
    trigger http create`命令创建一个HTTP触发器：
- en: '[PRE38]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '`--function-name flag` is used to specify the name of the function that will
    be associated with the HTTP trigger.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`--function-name`标志用于指定将与HTTP触发器关联的函数的名称。'
- en: Note
  id: totrans-324
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: There is a number of ingress controller add-ons available for Kubernetes, including
    NGINX, Kong, Traefik, F5, Contour, and more. You can find them at [https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/](https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/).
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes有许多可用的ingress控制器插件，包括NGINX、Kong、Traefik、F5、Contour等。您可以在[https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/](https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/)找到它们。
- en: 'Exercise 22: Creating an HTTP Trigger for a Kubeless Function'
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习22：为Kubeless函数创建HTTP触发器
- en: In this exercise, we will first enable the ingress plugin for Minikube. Then,
    we will create a function to be executed with HTTP triggers. Finally, we will
    create an HTTP trigger and invoke this function with the HTTP trigger.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将首先为Minikube启用ingress插件。然后，我们将创建一个要与HTTP触发器一起执行的函数。最后，我们将创建一个HTTP触发器并使用HTTP触发器调用此函数。
- en: Note
  id: totrans-328
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The code files for this exercise can be found at [https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson07/Exercise22](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson07/Exercise22).
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 此练习的代码文件可以在[https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson07/Exercise22](https://github.com/TrainingByPackt/Serverless-Architectures-with-Kubernetes/tree/master/Lesson07/Exercise22)找到。
- en: 'Perform the following steps to complete the exercise:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤完成练习：
- en: 'First, we need to enable the `ingress` add-on in our Minikube cluster:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在Minikube集群中启用`ingress`插件：
- en: '[PRE39]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This shows the following output:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示以下输出：
- en: '![Figure 7.40: Enabling the Minikube add-on'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.40：启用Minikube插件'
- en: '](image/C12607_07_40.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_40.jpg)'
- en: 'Figure 7.40: Enabling the Minikube add-on'
  id: totrans-336
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.40：启用Minikube插件
- en: 'After a couple of minutes, you should be able to see that the `nginx-ingress-controller`
    container has been created in the `kube-system` namespace, which is the namespace
    for the object created by the Kubernetes system:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几分钟后，您应该能够看到`kube-system`命名空间中已创建了`nginx-ingress-controller`容器，这是Kubernetes系统创建的对象的命名空间：
- en: '[PRE40]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'It shows the following:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示如下：
- en: '![Figure 7.41: Listing the nginx-ingress-controller pod'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.41：列出nginx-ingress-controller pod'
- en: '](image/C12607_07_41.jpg)'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_41.jpg)'
- en: 'Figure 7.41: Listing the nginx-ingress-controller pod'
  id: totrans-342
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.41：列出nginx-ingress-controller pod
- en: 'Once the `nginx-ingress-controller` container is in a running state, we will
    create the function to be executed with the HTTP trigger. Create a Python file
    named `greetings.py` with the following content:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦`nginx-ingress-controller`容器处于运行状态，我们将创建要与HTTP触发器一起执行的函数。创建一个名为`greetings.py`的Python文件，内容如下：
- en: '[PRE41]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Create the `lesson-7` namespace and deploy the `greetings.py` created earlier:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`lesson-7`命名空间并部署之前创建的`greetings.py`：
- en: '[PRE42]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Refer to the following output:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下输出：
- en: '![Figure 7.42: Executing the function with an HTTP trigger'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.42：使用HTTP触发器执行函数'
- en: '](image/C12607_07_42.jpg)'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_42.jpg)'
- en: 'Figure 7.42: Executing the function with an HTTP trigger'
  id: totrans-350
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.42：使用HTTP触发器执行函数
- en: 'Invoke the function and verify that the function is providing the expected
    output:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用函数并验证函数是否提供了预期的输出：
- en: '[PRE43]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Once invoked, the screen will display the following:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦调用，屏幕将显示以下内容：
- en: '![Figure 7.43: Output for function'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.43：函数输出'
- en: '](image/C12607_07_43.jpg)'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_43.jpg)'
- en: 'Figure 7.43: Output for function'
  id: totrans-356
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.43：函数输出
- en: 'Now we can create the `http` trigger for the `hello` function:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以为`hello`函数创建`http`触发器：
- en: '[PRE44]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The result is as follows:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下：
- en: '![Figure 7.44: Creating the HTTP trigger'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.44：创建HTTP触发器'
- en: '](image/C12607_07_44.jpg)'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_44.jpg)'
- en: 'Figure 7.44: Creating the HTTP trigger'
  id: totrans-362
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.44：创建HTTP触发器
- en: 'List the `http` triggers; you should be able to see the `http` trigger for
    the `hello` function:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出`http`触发器；您应该能够看到`hello`函数的`http`触发器：
- en: '[PRE45]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The list will look something like this:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 列表将看起来像这样：
- en: '![Figure 7.45: Listing the HTTP triggers'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.45：列出HTTP触发器'
- en: '](image/C12607_07_45.jpg)'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_45.jpg)'
- en: 'Figure 7.45: Listing the HTTP triggers'
  id: totrans-368
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.45：列出HTTP触发器
- en: 'This will create an `ingress` object in the Kubernetes layer. We can list the
    `ingress` objects with the `kubectl` CLI:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在Kubernetes层创建一个`ingress`对象。我们可以使用`kubectl` CLI列出`ingress`对象：
- en: '[PRE46]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'This will return the following:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回以下内容：
- en: '![Figure 7.46: Listing ingress objects'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.46：列出入口对象'
- en: '](image/C12607_07_46.jpg)'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_46.jpg)'
- en: 'Figure 7.46: Listing ingress objects'
  id: totrans-374
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.46：列出入口对象
- en: You can see the hostname with the `.nip.io` domain, which we can use to access
    the `greetings` function over HTTP.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以看到带有`.nip.io`域名的主机名，我们可以使用它通过HTTP访问`greetings`函数。
- en: 'In this case, the hostname is `greetings.192.168.99.100.nip.io`. Once you open
    this hostname in a web browser, you should be able to see the greeting message
    in the browser window (note that your output may be different depending on your
    local time):'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，主机名是`greetings.192.168.99.100.nip.io`。一旦在Web浏览器中打开此主机名，您应该能够在浏览器窗口中看到问候消息（请注意，根据您的本地时间，您的输出可能会有所不同）：
- en: '![Figure 7.47: Invoking the function with the HTTP GET request'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.47：使用HTTP GET请求调用函数'
- en: '](image/C12607_07_47.jpg)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_47.jpg)'
- en: 'Figure 7.47: Invoking the function with the HTTP GET request'
  id: totrans-379
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.47：使用HTTP GET请求调用函数
- en: Kubeless PubSub Triggers
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubeless PubSub触发器
- en: Kubeless functions can be invoked by sending input messages to `topics` in messaging
    systems. This method is known as a PubSub mechanism. Currently, Kubeless supports
    two messaging systems, namely, Kafka and NATS.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeless函数可以通过向消息系统中的`topics`发送输入消息来调用。这种方法称为PubSub机制。目前，Kubeless支持两种消息系统，即Kafka和NATS。
- en: 'In order to create PubSub triggers in Kubeless, we need to have a running Kafka
    cluster or NATS cluster. Once the Kafka or NATS cluster is ready, we can use `kubeless
    trigger kafka create` to create a Kafka trigger or `kubeless trigger nats create`
    to create a NATS trigger and associate our PubSub function with the new trigger:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Kubeless中创建PubSub触发器，我们需要运行Kafka集群或NATS集群。一旦Kafka或NATS集群准备就绪，我们可以使用`kubeless
    trigger kafka create`来创建Kafka触发器，或者使用`kubeless trigger nats create`来创建NATS触发器，并将我们的PubSub函数与新触发器关联：
- en: '[PRE47]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Let''s discuss what each piece of the command does:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论命令的每个部分都做了什么：
- en: '`kubeless trigger <trigger-type> create <trigger-name>`: This tells Kubeless
    to create a PubSub trigger with the provided name and trigger type. Valid trigger
    types are **kafka** and **nats**.'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubeless trigger <trigger-type> create <trigger-name>`：这告诉Kubeless使用提供的名称和触发器类型创建一个PubSub触发器。有效的触发器类型是**kafka**和**nats**。'
- en: '`--function-selector <label-query>`: This tells us which function should be
    associated with this trigger. Kubernetes labels are used to define this relationship
    (for example, `--function-selector key1=value1,key2=value2`).'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--function-selector <label-query>`：这告诉我们应该将哪个函数与此触发器关联。Kubernetes标签用于定义这种关系（例如，`--function-selector
    key1=value1,key2=value2`）。'
- en: '`--trigger-topic <topic-name>`: The Kafka broker will listen to this topic
    and the function will be triggered when a message is published to it.'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--trigger-topic <topic-name>`：Kafka代理将监听此主题，并在向其发布消息时触发函数。'
- en: The topic is where messages from the producers get published. The Kubeless CLI
    allows us to create topics using the `kubeless topic` command. This allows us
    to create, delete, list topics, and publish messages to topics easily.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 主题是生产者发布消息的地方。Kubeless CLI允许我们使用`kubeless topic`命令创建主题。这使我们可以轻松地创建、删除、列出主题，并向主题发布消息。
- en: 'Exercise 23: Creating a PubSub Trigger for a Kubeless Function'
  id: totrans-389
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习23：为Kubeless函数创建PubSub触发器
- en: In this exercise, we will first create a Kafka and Zookeeper cluster within
    our Minikube environment. Once the Kafka and Zookeeper clusters are ready, we
    will create a function to be executed with PubSub triggers. Next, we will create
    the PubSub topic. Publishing messages to the created topic will execute the Kubeless
    function. Perform the following steps to complete the exercise.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将首先在Minikube环境中创建一个Kafka和Zookeeper集群。一旦Kafka和Zookeeper集群准备就绪，我们将创建一个要执行的函数，并使用PubSub触发器。接下来，我们将创建PubSub主题。发布消息到创建的主题将执行Kubeless函数。执行以下步骤完成练习。
- en: 'Let''s invoke a Kubeless function with the **PubSub** mechanism using Kafka:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Kafka的**PubSub**机制调用Kubeless函数：
- en: 'First, we are going to deploy **Kafka** and **Zookeeper** to our Kubernetes
    cluster:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将在Kubernetes集群中部署**Kafka**和**Zookeeper**：
- en: '[PRE48]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The output will look like the following:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 7.48: Installing Kafka and Zookeeper'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.48：安装Kafka和Zookeeper'
- en: '](image/C12607_07_48.jpg)'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_48.jpg)'
- en: 'Figure 7.48: Installing Kafka and Zookeeper'
  id: totrans-397
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.48：安装Kafka和Zookeeper
- en: 'Verify that two `statefulset` named `kafka` and `zoo` are running in the `kubeless`
    namespace for Kafka and Zookeeper:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证在`kubeless`命名空间中是否运行了名为`kafka`和`zoo`的两个`statefulset`，用于Kafka和Zookeeper：
- en: '[PRE49]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The following output is seen:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 将看到以下输出：
- en: '![Figure 7.49: Verifying the Kafka and Zookeeper installation'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.49：验证Kafka和Zookeeper安装'
- en: '](image/C12607_07_49.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_49.jpg)'
- en: 'Figure 7.49: Verifying the Kafka and Zookeeper installation'
  id: totrans-403
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.49：验证Kafka和Zookeeper安装
- en: 'Once our Kafka and Zookeeper deployment is ready, we can create and deploy
    the function to be triggered by `PubSub` triggers. Create a file named `pubsub.py`
    and add the following content:'
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们的Kafka和Zookeeper部署准备就绪，我们可以创建并部署要由`PubSub`触发器触发的函数。创建一个名为`pubsub.py`的文件，并添加以下内容：
- en: '[PRE50]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Let''s deploy our function now:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们部署我们的函数：
- en: '[PRE51]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The deployment will yield the following:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 部署将产生以下结果：
- en: '![Figure 7.50: Deploying the pubsub function'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.50：部署pubsub函数'
- en: '](image/C12607_07_50.jpg)'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_50.jpg)'
- en: 'Figure 7.50: Deploying the pubsub function'
  id: totrans-411
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.50：部署pubsub函数
- en: 'Once the function is deployed, we can verify the function is successful by
    listing the function:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦函数部署完成，我们可以通过列出函数来验证函数是否成功：
- en: '[PRE52]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The listed function will be as follows:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 列出的函数将如下所示：
- en: '![Figure 7.51: Verifying the pubsub function'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.51：验证pubsub函数'
- en: '](image/C12607_07_51.jpg)'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_51.jpg)'
- en: 'Figure 7.51: Verifying the pubsub function'
  id: totrans-417
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.51：验证pubsub函数
- en: 'Now, let''s create the `kafka` trigger with the `kubeless trigger kafka create`
    command and associate our `pubsub` function with the new trigger:'
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用`kubeless trigger kafka create`命令创建`kafka`触发器，并将我们的`pubsub`函数与新触发器关联起来：
- en: '[PRE53]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'It will look as follows:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 它将如下所示：
- en: '![Figure 7.52: Creating the kafka trigger for the pubsub function'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.52：为pubsub函数创建kafka触发器'
- en: '](image/C12607_07_52.jpg)'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_52.jpg)'
- en: 'Figure 7.52: Creating the kafka trigger for the pubsub function'
  id: totrans-423
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.52：为pubsub函数创建kafka触发器
- en: 'Now we need a Kubeless topic to publish the messages. Let''s create a topic
    with the `kubeless topic create` command. We need to make sure that the topic
    name is similar to the one we provided as the `--trigger-topic` while creating
    the `kafka` trigger in the previous step:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要一个Kubeless主题来发布消息。让我们使用`kubeless topic create`命令创建一个主题。我们需要确保主题名称与我们在上一步中创建`kafka`触发器时提供的`--trigger-topic`相似：
- en: '[PRE54]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Okay. Now it''s time to test our `pubsub` function by publishing events to
    `pubsub-topic`:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的。现在是时候测试我们的`pubsub`函数，通过发布事件到`pubsub-topic`来测试：
- en: '[PRE55]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Check the `logs` function to verify whether the `pubsub` function is successfully
    invoked:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`logs`函数以验证`pubsub`函数是否成功调用：
- en: '[PRE56]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'You should see the published message in the `output` logs:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在`output`日志中看到已发布的消息：
- en: '[PRE57]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'To understand this better, check out the following output:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 要更好地理解这一点，请查看以下输出：
- en: '![Figure 7.53: Logs of the pubsub function'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.53：pubsub函数的日志'
- en: '](image/C12607_07_53.jpg)'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_53.jpg)'
- en: 'Figure 7.53: Logs of the pubsub function'
  id: totrans-435
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.53：pubsub函数的日志
- en: Monitoring a Kubeless Function
  id: totrans-436
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监视Kubeless函数
- en: 'When we have successfully deployed our Kubeless function, we then need to monitor
    our function. This can be achieved with the `kubeless function top` command. This
    command will provide us with the following information:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们成功部署了Kubeless函数后，我们需要监视我们的函数。可以使用`kubeless function top`命令来实现。此命令将为我们提供以下信息：
- en: '`NAME`: The name of the Kubeless function'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NAME`：Kubeless函数的名称'
- en: '`NAMESPACE`: The namespace of the function'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NAMESPACE`：函数的命名空间'
- en: '`METHOD`: The HTTP method type (for example, GET/POST) when invoking the function'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`METHOD`：调用函数时的HTTP方法类型（例如，GET/POST）'
- en: '`TOTAL_CALLS`: The total number of invocations'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TOTAL_CALLS`：调用次数'
- en: '`TOTAL_FAILURES`: The number of function failures'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TOTAL_FAILURES`：函数失败的次数'
- en: '`TOTAL_DURATION_SECONDS`: The total number of seconds this function has executed'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TOTAL_DURATION_SECONDS`：此函数执行的总秒数'
- en: '`AVG_DURATION_SECONDS`: The average number of seconds this function has executed'
  id: totrans-444
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AVG_DURATION_SECONDS`：此函数执行的平均秒数'
- en: '`MESSAGE`: Any other messages'
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MESSAGE`：任何其他消息'
- en: 'The following is the `kubeless function top` output for the `hello` function:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`hello`函数的`kubeless function top`输出：
- en: '[PRE58]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The output will be as follows:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Figure 7.54: Viewing the metrics for the hello function'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.54：查看hello函数的指标'
- en: '](image/C12607_07_54.jpg)'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_54.jpg)'
- en: 'Figure 7.54: Viewing the metrics for the hello function'
  id: totrans-451
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.54：查看hello函数的指标
- en: Now that we've monitored the function, it's time to move toward debugging it.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经监视了函数，是时候开始调试了。
- en: Debugging a Kubeless Function
  id: totrans-453
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试Kubeless函数
- en: A Kubeless function can fail at different stages of the function life cycle
    (for example, from deployment time to function execution time) due to a number
    of reasons. In this section, we are going to debug a function to identify the
    cause of failure.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeless函数可能在函数生命周期的不同阶段失败（例如，从部署时间到函数执行时间），原因有很多。在本节中，我们将调试一个函数，以确定失败的原因。
- en: 'In order to demonstrate multiple error scenarios, first, we are going to create
    a sample function with the following code block in the `debug.py` file:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示多个错误场景，首先，我们将在`debug.py`文件中创建一个包含以下代码块的示例函数：
- en: '[PRE59]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '**Error Scenario 01**'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误场景01**'
- en: 'Now, let''s try to deploy this function using the `kubeless function deploy`
    command:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试使用`kubeless function deploy`命令部署此函数：
- en: '[PRE60]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This will result in `Invalid runtime error` and Kubeless will display the supported
    runtimes. Upon further inspection, we can see that there is a typo in the `--runtime`
    parameter of the `kubeless function deploy` command.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致`Invalid runtime error`，Kubeless将显示支持的运行时。经过进一步检查，我们可以看到`kubeless function
    deploy`命令的`--runtime`参数中存在拼写错误。
- en: 'The resulting output would look like this:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 结果输出将如下所示：
- en: '![Figure 7.55: Deploying the debug function – error'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.55：部署调试函数-错误'
- en: '](image/C12607_07_55.jpg)'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_55.jpg)'
- en: 'Figure 7.55: Deploying the debug function – error'
  id: totrans-464
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.55：部署调试函数-错误
- en: 'Let''s correct this typo and rerun the `kubeless function deploy` command with
    the `python3.7` runtime:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们纠正这个拼写错误，并使用`python3.7`运行时重新运行`kubeless function deploy`命令：
- en: '[PRE61]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'This time, the function will be successfully deployed into the Kubeless environment.
    It should look like the following:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，函数将成功部署到Kubeless环境中。它应该看起来像下面这样：
- en: '![Figure 7.56: Deploying the debug function – successful'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.56：部署调试函数-成功'
- en: '](image/C12607_07_56.jpg)'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_56.jpg)'
- en: 'Figure 7.56: Deploying the debug function – successful'
  id: totrans-470
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.56：部署debug函数-成功
- en: '**Error Scenario 02**'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误场景02**'
- en: 'Now, let''s check the status of the function using the `kubeless function ls`
    command:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`kubeless function ls`命令来检查函数的状态：
- en: '[PRE62]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'To understand this better, refer to the following output:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这一点，请参考以下输出：
- en: '![Figure 7.57: Listing the debug function'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.57：列出debug函数'
- en: '](image/C12607_07_57.jpg)'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_57.jpg)'
- en: 'Figure 7.57: Listing the debug function'
  id: totrans-477
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.57：列出debug函数
- en: 'You can see that the status is `0/1 NOT READY`. Now, let''s check the status
    of the debug pod using the `kubectl get pods` command:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到状态为`0/1 NOT READY`。现在，让我们使用`kubectl get pods`命令来检查debug pod的状态：
- en: '[PRE63]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Now, refer to the following screenshot for the output:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，参考以下截图输出：
- en: '![Figure 7.58: Listing the debug function pods'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.58：列出debug函数pods'
- en: '](image/C12607_07_58.jpg)'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_58.jpg)'
- en: 'Figure 7.58: Listing the debug function pods'
  id: totrans-483
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.58：列出debug函数pods
- en: Here, debug `pod` is in `CrashLoopBackOff` status. This error commonly occurs
    due to either a syntax error in the function or the dependencies that we specify.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，debug `pod` 处于`CrashLoopBackOff`状态。这种错误通常是由函数中的语法错误或我们指定的依赖关系引起的。
- en: On closer inspection, we could identify that a colon (`:`) to mark the end of
    the function header is missing.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细检查后，我们发现函数头部缺少一个冒号（`:`）来标记函数头部的结束。
- en: Let's correct this and update our function.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们纠正这个问题并更新我们的函数。
- en: 'Open the `debug.py` file and add a colon at the end of the function header:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`debug.py`文件，在函数头部添加一个冒号：
- en: '[PRE64]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'We will now execute the `kubeless function update` command to update the function
    with the new code file:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将执行`kubeless function update`命令来使用新的代码文件更新函数：
- en: '[PRE65]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The output is as follows:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 7.59: Updating the debug function'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.59：更新debug函数'
- en: '](image/C12607_07_59.jpg)'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_59.jpg)'
- en: 'Figure 7.59: Updating the debug function'
  id: totrans-494
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.59：更新debug函数
- en: 'When you execute the `kubeless function ls` debug again, you should be able
    to see that the function is now ready with the `1/1 READY` status:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 当再次执行`kubeless function ls` debug时，您应该能够看到函数现在处于`1/1 READY`状态：
- en: '![Figure 7.60: Listing the debug function'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.60：列出debug函数'
- en: '](image/C12607_07_60.jpg)'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_60.jpg)'
- en: 'Figure 7.60: Listing the debug function'
  id: totrans-498
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.60：列出debug函数
- en: '**Error Scenario 03**'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误场景03**'
- en: 'Let''s create an example error scenario with our `hello` function. For this,
    you can call the `hello` function by replacing the key name of the `data` section
    with `username`:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个带有`hello`函数的示例错误场景。为此，您可以通过将`data`部分的键名替换为`username`来调用`hello`函数：
- en: '[PRE66]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Now, let''s see how it looks on the screen:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看它在屏幕上的样子：
- en: '![Figure 7.61: Invoking the debug function – error'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.61：调用debug函数-错误'
- en: '](image/C12607_07_61.jpg)'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_61.jpg)'
- en: 'Figure 7.61: Invoking the debug function – error'
  id: totrans-505
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.61：调用debug函数-错误
- en: 'In order to find the possible cause for this failure, we need to check the
    function logs. You can execute the `kubeless function logs` command to view the
    logs of the `hello` function:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找到此失败的可能原因，我们需要检查函数日志。您可以执行`kubeless function logs`命令来查看`hello`函数的日志：
- en: '[PRE67]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'The output would look as follows:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 7.62: Checking the debug function logs'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.62：检查debug函数日志'
- en: '](image/C12607_07_62.jpg)'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_62.jpg)'
- en: 'Figure 7.62: Checking the debug function logs'
  id: totrans-511
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.62：检查debug函数日志
- en: 'The first few lines of the output show lines similar to the following code
    block, which are internal health checks. As per the logs, we can see that all
    the calls to the `/healthz` endpoint have been successful with the `200` HTTP
    success response code:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的前几行显示类似于以下代码块的行，这些是内部健康检查。根据日志，我们可以看到对`/healthz`端点的所有调用都成功返回了`200` HTTP成功响应代码：
- en: '[PRE68]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Next, you can see a stack trace of the error messages, as follows, with the
    possible cause being the `KeyError: ''name''` error. The function was expecting
    a `''name''` key, which was not found during the function execution:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '接下来，您可以看到错误消息的堆栈跟踪，如下所示，可能的原因是`KeyError: ''name''`错误。函数期望一个`''name''`键，在函数执行期间未找到：'
- en: '[PRE69]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The last line of the error message indicates that HTTP error `500` was returned
    for the function call:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 错误消息的最后一行表示函数调用返回了HTTP错误`500`：
- en: '[PRE70]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: Note
  id: totrans-518
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: '`HTTP 500` is the error code returned by the HTTP protocol, which indicates
    an **Internal Server Error**. This means that the server was unable to fulfill
    the request due to unexpected conditions.'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '`HTTP 500`是HTTP协议返回的错误代码，表示**内部服务器错误**。这意味着服务器由于意外情况而无法满足请求。'
- en: 'Apart from `kubeless function logs`, you can also use the `kubectl logs` command,
    which will return a similar output. You need to pass the `-l` parameter, which
    indicates a label, in order to only get the logs for a specific function:'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`kubeless function logs`之外，您还可以使用`kubectl logs`命令，它将返回类似的输出。您需要传递`-l`参数，表示标签，以便仅获取特定函数的日志：
- en: '[PRE71]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The following will be the output:'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 以下将是输出：
- en: '![Figure 7.63: Checking the debug function logs'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.63：检查调试函数日志'
- en: '](image/C12607_07_63.jpg)'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_63.jpg)'
- en: 'Figure 7.63: Checking the debug function logs'
  id: totrans-525
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.63：检查调试函数日志
- en: Use the `kubectl get functions --show-labels` command to see the labels associated
    with the Kubeless functions.
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`kubectl get functions --show-labels`命令查看与Kubeless函数关联的标签。
- en: 'This will yield the following:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下结果：
- en: '![Figure 7.64: Listing the function labels'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.64：列出函数标签'
- en: '](image/C12607_07_64.jpg)'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_64.jpg)'
- en: 'Figure 7.64: Listing the function labels'
  id: totrans-530
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.64：列出函数标签
- en: 'Let''s correct our mistake and pass the correct argument to the `debug` function:'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们纠正错误，并向`debug`函数传递正确的参数：
- en: '[PRE72]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Now our function has run successfully and has generated `Hello Kubeless` as
    its output:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的函数已成功运行，并生成了`Hello Kubeless`作为其输出：
- en: '![Figure 7.65: Invoking the debug function – successful'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.65：调用调试函数-成功'
- en: '](image/C12607_07_65.jpg)'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_65.jpg)'
- en: 'Figure 7.65: Invoking the debug function – successful'
  id: totrans-536
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.65：调用调试函数-成功
- en: Serverless Plugin for Kubeless
  id: totrans-537
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubeless的Serverless插件
- en: The Serverless Framework is a general framework for deploying serverless applications
    across different serverless providers. The serverless plugin for Kubeless supports
    deploying Kubeless functions. Apart from the plugin for Kubeless, the Serverless
    Framework supports serverless applications such as AWS Lambda, Azure Functions,
    Google Cloud Functions, Apache OpenWhisk, and Kubeless.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: Serverless Framework是一个通用的框架，用于在不同的无服务器提供商上部署无服务器应用程序。Kubeless的无服务器插件支持部署Kubeless函数。除了Kubeless的插件之外，Serverless
    Framework还支持AWS Lambda、Azure Functions、Google Cloud Functions、Apache OpenWhisk和Kubeless等无服务器应用程序。
- en: In this section, we will install the serverless framework and create a Kubeless
    function using the CLI provided by the serverless framework.
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装无服务器框架，并使用无服务器框架提供的CLI创建Kubeless函数。
- en: 'Before we start installing the serverless framework, we need to have Node.js
    version 6.5.0 or later installed as a prerequisite. So, first, let''s install
    Node.js:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始安装无服务器框架之前，我们需要安装Node.js版本6.5.0或更高版本作为先决条件。所以，首先让我们安装Node.js：
- en: '[PRE73]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'The output is as follows:'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '![Figure 7.66: Node.js version 6.5.0 installation'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.66：安装Node.js版本6.5.0
- en: '](image/C12607_07_66.jpg)'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_66.jpg)'
- en: 'Figure 7.66: Node.js version 6.5.0 installation'
  id: totrans-545
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.66：安装Node.js版本6.5.0
- en: 'Once installed, verify the Node.js version by executing the following command:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，通过执行以下命令验证Node.js版本：
- en: '[PRE74]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Here is the output:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出：
- en: '![Figure 7.67: Node.js version verification'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.67：Node.js版本验证'
- en: '](image/C12607_07_67.jpg)'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_67.jpg)'
- en: 'Figure 7.67: Node.js version verification'
  id: totrans-551
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.67：Node.js版本验证
- en: 'Once the Node.js installation is successful, we will then install the Serverless
    Framework by executing the following command:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Node.js安装成功，我们将通过执行以下命令安装Serverless框架：
- en: '[PRE75]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Next, we will verify the serverless version:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将验证serverless版本：
- en: '[PRE76]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Check the output, as follows:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 检查输出，如下所示：
- en: '![Figure 7.68: Serverless version verification'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.68：Serverless版本验证'
- en: '](image/C12607_07_68.jpg)'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_68.jpg)'
- en: 'Figure 7.68: Serverless version verification'
  id: totrans-559
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.68：Serverless版本验证
- en: We have successfully completed the installation of the Serverless Framework.
    We can now start creating functions with it.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功完成了Serverless框架的安装。现在我们可以开始使用它创建函数。
- en: 'We can use the `serverless create` command to create a basic service from a
    template. Let''s create a project named `my-kubeless-project`, as follows:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`serverless create`命令从模板创建一个基本服务。让我们创建一个名为`my-kubeless-project`的项目，如下所示：
- en: '[PRE77]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Let''s break the command into pieces in order to understand it:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把命令拆分成几部分以便理解：
- en: '`--template kubeless-python`: Currently, two templates are available for the
    Kubeless framework. `kubeless-python` creates a Python function and `kubeless-nodejs`
    creates a Node.js function.'
  id: totrans-564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--template kubeless-python`：目前，Kubeless框架有两个模板可用。`kubeless-python`创建一个Python函数，`kubeless-nodejs`创建一个Node.js函数。'
- en: '`--path my-kubeless-project`: This defines that this function should be created
    under the `my-kubeless-project` directory. Take a look at the output to understand
    it better:'
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--path my-kubeless-project`：这定义了该函数应该在`my-kubeless-project`目录下创建。查看输出以更好地理解它：'
- en: '![Figure 7.69: Creation of my-kubeless-project'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.69：创建my-kubeless-project'
- en: '](image/C12607_07_69.jpg)'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_69.jpg)'
- en: 'Figure 7.69: Creation of my-kubeless-project'
  id: totrans-568
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.69：创建my-kubeless-project
- en: 'This command will create a directory named `my-kubeless-project` and several
    files within this directory. First, let''s move to the `my-kubeless-project` directory
    by executing the following command:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将创建一个名为`my-kubeless-project`的目录，并在该目录中创建几个文件。首先，让我们通过执行以下命令进入`my-kubeless-project`目录：
- en: '[PRE78]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The following files are in the `my-kubeless-project` directory:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 以下文件位于`my-kubeless-project`目录中：
- en: handler.py
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: handler.py
- en: serverless.yml
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: serverless.yml
- en: package.json
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: package.json
- en: 'The `handler.py` file contains a sample Python function, as follows. This is
    a simple function that returns a JSON object and the status code of 200:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '`handler.py`文件包含一个示例Python函数，如下所示。这是一个简单的函数，返回一个JSON对象和状态码200：'
- en: '[PRE79]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'It also creates a `serverless.yml` file, which tells the serverless framework
    to execute the `hello` function inside the `handler.py` file. In the `provider`
    section, it is mentioned that this is a Kubeless function with a `python2.7` runtime.
    In the `plugins` section, it defines the custom plugins required, such as the
    `serverless-kubeless` plugin:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 它还创建了一个`serverless.yml`文件，告诉serverless框架在`handler.py`文件中执行`hello`函数。在`provider`部分中，提到这是一个带有`python2.7`运行时的Kubeless函数。在`plugins`部分中，它定义了所需的自定义插件，比如`serverless-kubeless`插件：
- en: '[PRE80]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Finally, the `package.json` file contains the `npm` packaging information,
    such as `dependencies`:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`package.json`文件包含了`npm`打包信息，比如`dependencies`：
- en: '[PRE81]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: You can update these files as required to match your business requirements.
    We are not going to change these files in this example.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据需要更新这些文件以匹配您的业务需求。在本例中，我们不会更改这些文件。
- en: 'Now, we are going to execute the `npm install` command, which installs all
    `npm` dependencies, such as the `kubeless-serverless` plugin:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将执行`npm install`命令，安装所有`npm`依赖，比如`kubeless-serverless`插件：
- en: '[PRE82]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The output for this is as follows:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 这个输出如下：
- en: '![Figure 7.70: Installing the npm dependencies'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.70：安装npm依赖'
- en: '](image/C12607_07_70.jpg)'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_70.jpg)'
- en: 'Figure 7.70: Installing the npm dependencies'
  id: totrans-587
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.70：安装npm依赖项
- en: 'Once the dependencies are ready, let''s deploy the service:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦依赖项准备好，让我们部署服务：
- en: '[PRE83]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Deploying the service provides us with the following output:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 部署服务会为我们提供以下输出：
- en: '![Figure 7.71: Deploying the service'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.71：部署服务'
- en: '](image/C12607_07_71.jpg)'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_71.jpg)'
- en: 'Figure 7.71: Deploying the service'
  id: totrans-593
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.71：部署服务
- en: 'Then, we can deploy the function using the following command:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用以下命令部署函数：
- en: '[PRE84]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The following screenshot shows the output:'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了输出：
- en: '![Figure 7.72: Deploying the function'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.72：部署函数'
- en: '](image/C12607_07_72.jpg)'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_72.jpg)'
- en: 'Figure 7.72: Deploying the function'
  id: totrans-599
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.72：部署函数
- en: 'When the function is successfully deployed, we can invoke the function with
    the `serverless invoke` command:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 当函数成功部署后，我们可以使用`serverless invoke`命令调用函数：
- en: '[PRE85]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Invoking the function renders the following output:'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 调用函数会产生以下输出：
- en: '![Figure 7.73: Invoking the function'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.73：调用函数'
- en: '](image/C12607_07_73.jpg)'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_73.jpg)'
- en: 'Figure 7.73: Invoking the function'
  id: totrans-605
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.73：调用函数
- en: 'You can also use the `kubeless function call` command to invoke this function:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`kubeless function call`命令来调用此函数：
- en: '[PRE86]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Doing this will provide the following output:'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做将提供以下输出：
- en: '![Figure 7.74: Using the kubeless function call to invoke the function'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.74：使用kubeless函数调用来调用函数'
- en: '](image/C12607_07_74.jpg)'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_74.jpg)'
- en: 'Figure 7.74: Using the kubeless function call to invoke the function'
  id: totrans-611
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.74：使用kubeless函数调用来调用函数
- en: 'Once you are done with the function, use `serverless remove` to delete the
    function:'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 完成函数后，使用`serverless remove`来删除函数。
- en: '[PRE87]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Here is the output of the preceding code:'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前面代码的输出：
- en: '![Figure 7.75: Deleting the function'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.75：删除函数'
- en: '](image/C12607_07_75.jpg)'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_75.jpg)'
- en: 'Figure 7.75: Deleting the function'
  id: totrans-617
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.75：删除函数
- en: Note
  id: totrans-618
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Execute the `serverless logs -f hello` command if you encounter any errors while
    invoking the function.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在调用函数时遇到任何错误，请执行`serverless logs -f hello`命令。
- en: 'Activity 7: Publishing Messages to Slack with Kubeless'
  id: totrans-620
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动7：使用Kubeless向Slack发布消息
- en: Imagine that you need a Slackbot to post messages to your Slack channel. This
    Slackbot should be able to post messages to a specific Slack channel using the
    incoming webhook integration method. This bot will print a success message if
    posting the message to Slack was successful; otherwise, it will print an error
    message if there were any errors while sending the message to Slack. In this activity,
    we will be creating a Kubeless function that can post messages to a specific Slack
    channel.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，您需要一个Slackbot来向您的Slack频道发布消息。这个Slackbot应该能够使用传入的webhook集成方法向特定的Slack频道发布消息。如果成功向Slack发布消息，此机器人将打印成功消息；否则，如果在向Slack发送消息时出现任何错误，它将打印错误消息。在这个活动中，我们将创建一个能够向特定Slack频道发布消息的Kubeless函数。
- en: 'As a prerequisite to this activity, we need to have a Slack workspace with
    incoming webhook integration. Execute the following steps to create a Slack workspace
    and integrate the incoming webhook:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 作为此活动的先决条件，我们需要一个Slack工作区，并集成传入的webhook。执行以下步骤创建一个Slack工作区并集成传入的webhook：
- en: '**Solution-Slack Setup**'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案-Slack设置**'
- en: Create a Slack workspace.
  id: totrans-624
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Slack工作区。
- en: Visit [https://slack.com/create](https://slack.com/create) to create a workspace.
    Enter your email address and then click on **Create**.
  id: totrans-625
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://slack.com/create](https://slack.com/create)创建一个工作区。输入您的电子邮件地址，然后单击**创建**。
- en: You should receive a six-digit confirmation code to the email that you entered
    on the previous page. Enter the received code on the workspace.
  id: totrans-626
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该收到一个六位数的确认码，发送到您在上一页输入的电子邮件中。在工作区中输入收到的代码。
- en: Add suitable names for our workspace and Slack channel.
  id: totrans-627
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的工作区和Slack频道添加合适的名称。
- en: You will be asked to fill in email IDs for others who are collaborating on the
    same project. You can either skip this section or fill in the details and then
    continue.
  id: totrans-628
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被要求填写其他与您合作在同一项目上的人的电子邮件ID。您可以跳过此部分，或者填写详细信息然后继续。
- en: Now that your Slack channel is ready, click on `See Your Channel in Slack`.
  id: totrans-629
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您的Slack频道已准备就绪，请点击“在Slack中查看您的频道”。
- en: Once clicked, we should see our channel.
  id: totrans-630
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦点击，我们应该看到我们的频道。
- en: Now we are going to add the `Incoming Webhook` app to our Slack. From the left
    menu, select `Add apps` under the `Apps` section.
  id: totrans-631
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将向Slack添加“Incoming Webhook”应用程序。从左侧菜单中，在“应用程序”部分下选择“添加应用程序”。
- en: Enter `Incoming Webhooks` in the search field and then click on `Install` for
    `Incoming Webhook` app.
  id: totrans-632
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索字段中输入“传入Webhooks”，然后点击“安装”以安装“Incoming Webhook”应用程序。
- en: Click on `Add Configuration`.
  id: totrans-633
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加配置”。
- en: Click on `Add Incoming WebHooks Integration`.
  id: totrans-634
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加传入WebHooks集成”。
- en: Save the webhook URL. We will need this when we are writing the Kubeless function.
  id: totrans-635
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存webhook URL。在编写Kubeless函数时，我们会需要它。
- en: Note
  id: totrans-636
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The detailed steps on creating a Slack workspace with incoming webhook integration,
    along with the corresponding screenshots, are available on page 422.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 有关使用传入webhook集成创建Slack工作区的详细步骤，以及相应的屏幕截图，请参阅第422页。
- en: 'Now we are ready to start the activity. Execute the following steps to complete
    this activity:'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备开始这项活动。执行以下步骤完成此活动：
- en: '**Activity Solution**'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '**活动解决方案**'
- en: Create a function in any language (supported by Kubeless) that can post messages
    to Slack. In this activity, we will write a Python function that performs the
    following steps.
  id: totrans-640
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何语言中创建一个函数（由Kubeless支持），可以将消息发布到Slack。在这个活动中，我们将编写一个Python函数，执行以下步骤。
- en: Use the `requests` library as a dependency.
  id: totrans-641
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`requests`库作为依赖项。
- en: Send a `POST` request to the incoming webhook (created in step 2) with an input
    message.
  id: totrans-642
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向传入的webhook（在步骤2中创建）发送一个`POST`请求，带有输入消息。
- en: Print the response of the post request,
  id: totrans-643
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印post请求的响应，
- en: Deploy the function to the Kubeless framework.
  id: totrans-644
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将该函数部署到Kubeless框架中。
- en: Invoke the function.
  id: totrans-645
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用该函数。
- en: 'Go to your Slack workspace and verify that the message was successfully posted
    to the Slack channel. The final output should look like this:'
  id: totrans-646
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到您的Slack工作区，验证消息是否成功发布到Slack频道。最终输出应如下所示：
- en: '![Figure 7.76: Verifying whether the message was successfully posted'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: '![图7.76：验证消息是否成功发布'
- en: '](image/C12607_07_76.jpg)'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/C12607_07_76.jpg)'
- en: 'Figure 7.76: Verifying whether the message was successfully posted'
  id: totrans-649
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.76：验证消息是否成功发布
- en: Note
  id: totrans-650
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to the activity can be found on page 422.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 活动的解决方案可以在第422页找到。
- en: Summary
  id: totrans-652
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to deploy a single-node Kubernetes cluster with
    Minikube. Then, we installed the Kubeless framework, Kubeless CLI, and Kubeless
    UI on top of our Minikube cluster. Once the Kubernetes cluster and Kubeless framework
    were ready, we created our first Kubeless function with Python and deployed it
    to Kubeless. Then, we discussed multiple ways of invoking Kubeless functions,
    namely with the Kubeless CLI, the Kubeless UI, HTTP triggers, scheduled triggers,
    and PubSub triggers. Next, we discussed how to debug common error scenarios that
    we encounter while deploying Kubeless functions. Then, we discussed how we can
    use the serverless framework to deploy a Kubeless function. Finally, in the activity,
    we learned how we can use a Kubeless function to send messages to a Slack channel.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Minikube部署单节点Kubernetes集群。然后，我们在Minikube集群上安装了Kubeless框架、Kubeless
    CLI和Kubeless UI。一旦Kubernetes集群和Kubeless框架准备就绪，我们就用Python创建了我们的第一个Kubeless函数，并将其部署到Kubeless上。然后，我们讨论了多种调用Kubeless函数的方式，包括使用Kubeless
    CLI、Kubeless UI、HTTP触发器、定时触发器和PubSub触发器。接下来，我们讨论了在部署Kubeless函数时遇到的常见错误场景的调试方法。然后，我们讨论了如何使用无服务器框架部署Kubeless函数。最后，在活动中，我们学习了如何使用Kubeless函数向Slack频道发送消息。
- en: In the next chapter, we shall introduce OpenWhisk, and cover OpenWhisk actions
    and triggers.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍OpenWhisk，并涵盖OpenWhisk动作和触发器。
