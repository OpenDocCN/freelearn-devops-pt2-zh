- en: '[*Chapter 10*](B17385_10_Final_PD_ePub.xhtml#_idTextAnchor129): Exploring Skaffold
    Alternatives, Best Practices, and Pitfalls'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第10章*](B17385_10_Final_PD_ePub.xhtml#_idTextAnchor129)：探索Skaffold替代方案、最佳实践和陷阱'
- en: In the previous chapter, you learned how you can create a CI/CD pipeline for
    a Spring Boot application using GitHub Actions and Skaffold. In this chapter,
    we will start by looking at other tools available on the market that provide similar
    functionalities as Skaffold. We will learn about tips and tricks that developers
    can adhere to while developing cloud-native Kubernetes applications with Skaffold.
    We will conclude by understanding Skaffold pitfalls that developers can typically
    avoid.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您了解了如何使用GitHub Actions和Skaffold为Spring Boot应用程序创建CI/CD流水线。在本章中，我们将首先看看市场上提供类似功能的其他工具。我们将了解开发人员在使用Skaffold开发云原生Kubernetes应用程序时可以遵循的技巧和诀窍。最后，我们将了解开发人员通常可以避免的Skaffold陷阱。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Comparing Skaffold with other alternatives
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他替代方案比较Skaffold
- en: Applying Skaffold best practices
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用Skaffold最佳实践
- en: Avoiding Skaffold pitfalls
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免Skaffold陷阱
- en: Future roadmap
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未来路线图
- en: Final thoughts
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终思考
- en: By the end of this chapter, you will have a solid understanding of tools other
    than Skaffold for improving the developer experience with Kubernetes. You will
    also learn about Skaffold best practices that you can use for your development
    workflow and some common pitfalls that can be avoided in your development life
    cycle.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将对除Skaffold之外的工具有扎实的了解，以改善Kubernetes的开发者体验。您还将了解可以用于开发工作流程的Skaffold最佳实践以及在开发生命周期中可以避免的一些常见陷阱。
- en: Comparing Skaffold with other alternatives
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与其他替代方案比较Skaffold
- en: In this section, we will compare Skaffold with other alternative tools that
    address similar problems that Skaffold solves, that is, improving the developer
    experience with Kubernetes. However, there may be use cases where Skaffold may
    not be the best tool for the job, so we will look into tools other than Skaffold
    if your use case is complex in the next section. We will also look at the features
    that these Kubernetes development tools provide in comparison with Skaffold. Let's
    begin!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将比较Skaffold与其他解决类似问题的替代工具，即改善Kubernetes开发者体验的工具。然而，可能存在Skaffold不适用的情况，因此在下一节中，我们将研究除Skaffold之外的工具，以解决复杂的使用情况。我们还将比较这些Kubernetes开发工具与Skaffold提供的功能。让我们开始吧！
- en: Telepresence
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Telepresence
- en: '**Telepresence** ([https://www.telepresence.io/](https://www.telepresence.io/))
    is a tool developed by Ambassador Labs. It''s a Cloud Native Computing Foundation
    sandbox project. Its goal is to improve the developer experience with Kubernetes.
    Telepresence allows you to run a single service locally while connecting that
    service to a remote Kubernetes cluster. You can read more about it here: [https://www.telepresence.io/about/](https://www.telepresence.io/about/).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Telepresence** ([https://www.telepresence.io/](https://www.telepresence.io/))
    是由Ambassador Labs开发的工具。它是一个Cloud Native Computing Foundation的沙盒项目。其目标是改善Kubernetes的开发者体验。Telepresence允许您在本地运行单个服务，同时将该服务连接到远程Kubernetes集群。您可以在这里阅读更多信息：[https://www.telepresence.io/about/](https://www.telepresence.io/about/)。'
- en: With Telepresence, you can develop and debug a service locally as part of the
    cluster. You don't have to publish and deploy new artifacts in the Kubernetes
    cluster continuously. Telepresence doesn't require a local Kubernetes cluster
    in comparison with Skaffold. It runs a pod as a placeholder for your application
    in the remote cluster, and incoming traffic is routed to the container running
    on your local workstation. When a developer changes the application code, it will
    be reflected in your remote cluster without deploying a new container.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Telepresence，您可以作为集群的一部分在本地开发和调试服务。您不必不断在Kubernetes集群中发布和部署新的构件。与Skaffold相比，Telepresence不需要本地Kubernetes集群。它在远程集群中运行一个pod作为您的应用程序的占位符，并将传入的流量路由到在本地工作站上运行的容器。当开发人员更改应用程序代码时，它将在远程集群中反映出来，而无需部署新的容器。
- en: Another advantage is that you only need compute resources, namely, CPU and memory,
    to run your services locally as you are directly working with a remote cluster.
    Moreover, you don't have to set up and run a local Kubernetes cluster, such as
    minikube or Docker Desktop. It is helpful in cases where you have, say, five to
    six microservices running and your application must interact with them. In contrast,
    Skaffold is more of a complete solution packaged into one thing addressing your
    local development needs and CI/CD workflows. But let's suppose your application
    needs to interact with many microservices. In that case, it gets tricky as it
    would be difficult to run all the instances locally because of resource constraints,
    and you may end up mocking some of the services that may not replicate your actual
    production behavior. This is where Telepresence can help with its remote development
    capabilities from your laptop and with minimal resource usage.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个优点是，您只需要计算资源，即CPU和内存，来在本地运行您的服务，因为您直接与远程集群进行交互。此外，您不必设置和运行本地Kubernetes集群，比如minikube或Docker
    Desktop。在您运行五到六个微服务并且您的应用程序必须与它们交互的情况下，这是有帮助的。相比之下，Skaffold更像是一个打包成一个解决方案，满足您的本地开发需求和CI/CD工作流。但假设您的应用程序需要与许多微服务进行交互。在这种情况下，情况就会变得棘手，因为由于资源限制，难以在本地运行所有实例，并且您可能最终会模拟一些可能无法复制实际生产行为的服务。这就是Telepresence可以帮助您的地方，它具有从您的笔记本电脑进行远程开发并且资源使用最小化的能力。
- en: There are some disadvantages, such as it has some known issues with volume mount
    for the Windows OS and needs a high-speed network connection.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它也有一些缺点，比如在Windows操作系统上有一些已知的卷挂载问题，并且需要高速网络连接。
- en: Tilt.dev
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Tilt.dev
- en: '**Tilt** ([https://tilt.dev/](https://tilt.dev/)) is an open source tool for
    improving the developer experience with Kubernetes.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**Tilt** ([https://tilt.dev/](https://tilt.dev/)) 是一个用于改善Kubernetes开发体验的开源工具。'
- en: 'In Skaffold, we use the `skaffold.yaml` configuration file to define, build,
    and deploy; and similarly, in Tilt, we use a Tiltfile for configuration. Tiltfiles
    are written in a dialect of Python called **Starlark**. Check out the API reference
    here: [https://docs.tilt.dev/api.html](https://docs.tilt.dev/api.html). The following
    is a sample Tiltfile:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Skaffold中，我们使用`skaffold.yaml`配置文件来定义、构建和部署；同样，在Tilt中，我们使用Tiltfile进行配置。Tiltfiles是用一种称为**Starlark**的Python方言编写的。在这里查看API参考：[https://docs.tilt.dev/api.html](https://docs.tilt.dev/api.html)。以下是一个Tiltfile示例：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, you can run the `tilt run` command. Tilt is not just a CLI tool in comparison
    with Skaffold. Tilt also provides a neat UI where you can view each of your service's
    health status, their build, and runtime logs. While Skaffold is an open source
    project with no vendor support, Tilt does offer vendor support with its enterprise
    edition.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您可以运行`tilt run`命令。与Skaffold相比，Tilt不仅是一个CLI工具。Tilt还提供了一个整洁的UI，您可以在其中查看每个服务的健康状态、它们的构建和运行时日志。虽然Skaffold是一个没有供应商支持的开源项目，但Tilt的企业版提供了供应商支持。
- en: The downside of Tilt is that you have to get familiar with its Starlark Python
    syntax language, which is required to write the Tiltfile, while Skaffold uses
    the `skaffold.yaml` configuration file as the YAML syntax file. But if you work
    with Kubernetes manifests, then this is not something new and most developers
    are already familiar with it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Tilt的缺点是你必须熟悉其Starlark Python语法语言，这是编写Tiltfile所必需的，而Skaffold使用skaffold.yaml配置文件作为YAML语法文件。但如果你使用Kubernetes清单，那么这并不是什么新鲜事，大多数开发人员已经熟悉了。
- en: OpenShift Do
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenShift Do
- en: Developing an application with Kubernetes or **Platform-as-a-Service** (**PaaS**)
    offerings such as OpenShift is hard if you are not using the correct tools throughout
    your development. In the case of OpenShift, it already has a CLI tool, **oc**,
    but unfortunately, it is more focused on helping operations folks and is not very
    developer-friendly. The oc CLI requires you to know and understand concepts related
    to OpenShift, such as deployment and build configurations to name a few, which,
    as a developer, you might not really be interested in knowing. The Red Hat team
    realized this issue and developed a new CLI called **OpenShift Do** (**odo**),
    which is more targeted toward developers. It also helps in improving the developer
    experience while developing cloud-native applications deployed to Kubernetes or
    OpenShift.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Kubernetes或Platform-as-a-Service（PaaS）提供的OpenShift等开发应用程序是很困难的，如果你在开发过程中没有使用正确的工具。在OpenShift的情况下，它已经有一个CLI工具oc，但不幸的是，它更多地专注于帮助运维人员，对开发人员不太友好。oc
    CLI要求你了解与OpenShift相关的概念，比如部署和构建配置等，作为开发人员，你可能对这些并不感兴趣。Red Hat团队意识到了这个问题，并开发了一个新的CLI工具叫做OpenShift
    Do（odo），它更加针对开发人员。它还有助于改善开发云原生应用程序部署到Kubernetes或OpenShift时的开发体验。
- en: 'Let''s look at some of its features, as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下它的一些特点，如下所示：
- en: Develop faster and accelerate the inner development loop.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快地开发并加速内部开发循环。
- en: Live feedback with the `odo watch` command. If you have worked with Skaffold,
    then it is quite similar to the `skaffold dev` command. The odo CLI uses developer-focused
    concepts such as **projects**, **applications**, and **components**.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用odo watch命令进行实时反馈。如果你曾经使用过Skaffold，那么它与skaffold dev命令非常相似。odo CLI使用开发人员关注的概念，如项目、应用程序和组件。
- en: It's a completely CLI client-based tool.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个完全基于CLI客户端的工具。
- en: OpenShift odo is very specific to OpenShift itself; even though the documentation
    says that it works with vanilla Kubernetes distributions. There is a lack of documentation
    and practical examples to use odo with minikube or other tools.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift odo非常特定于OpenShift本身；即使文档说它可以与原始的Kubernetes发行版一起使用。缺乏文档和实际示例来使用odo与minikube或其他工具。
- en: Oketo
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Oketo
- en: '**Oketo** ([https://okteto.com/](https://okteto.com/)) is a CLI tool that takes
    an approach that is completely different than Skaffold. Instead of automating
    your inner development loop in your local workstation, Oketo moves the inner development
    loop to the cluster itself. You define your development environment in a YAML
    manifest file, `oketo.yaml`, and then use `oketo init` and `oketo up` to get up
    and running with your development environment.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Oketo（https://okteto.com/）是一个CLI工具，其方法与Skaffold完全不同。Oketo不是在本地工作站自动化你的内部开发循环，而是将内部开发循环移到集群本身。你可以在一个YAML清单文件oketo.yaml中定义你的开发环境，然后使用oketo
    init和oketo up来启动你的开发环境。
- en: 'The following are some of the highlighted features of Oketo:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Oketo一些突出的特点：
- en: File synchronization between the local and remote Kubernetes cluster.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地和远程Kubernetes集群之间的文件同步。
- en: A single binary that works across different OSes.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个二进制文件可以在不同的操作系统上运行。
- en: You get a remote terminal in your container development environment.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在容器开发环境中获得远程终端。
- en: Hot reload your code.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 热重载您的代码。
- en: Works with local and remote Kubernetes clusters, Helm, and serverless functions.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与本地和远程Kubernetes集群、Helm和无服务器函数一起使用。
- en: Port forwarding in both directions.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双向端口转发。
- en: No building, pushing, or deploying is required as you develop directly on your
    cluster.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发过程中，不需要构建、推送或部署，因为您直接在集群上开发。
- en: No need to install Docker or Kubernetes on your workstation.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需在工作站上安装Docker或Kubernetes。
- en: Even runtimes (JRE, npm, Python) are not required as everything is inside a
    Docker image.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 甚至运行时（JRE、npm、Python）也不需要，因为一切都在Docker镜像中。
- en: Garden
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Garden
- en: '**Garden** ([https://garden.io/](https://garden.io/)) follows the same philosophy
    as Oketo of deploying to a remote cluster instead of doing the setup on your local
    system. Garden is an open source tool that runs Kubernetes applications in a remote
    cluster for development, automated testing, manual testing, and review.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Garden** ([https://garden.io/](https://garden.io/))遵循与Oketo相同的哲学，即部署到远程集群而不是在本地系统上进行设置。Garden是一个开源工具，用于在远程集群中运行Kubernetes应用程序，用于开发、自动化测试、手动测试和审查。'
- en: With Garden, you can start by using CLI helper commands such as `garden create
    project`. You will manage the Garden configuration through a YAML configuration
    file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Garden，您可以通过诸如`garden create project`的CLI辅助命令开始。您将通过一个YAML配置文件管理Garden配置。
- en: 'The following are the key elements of the Garden YAML configuration file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Garden YAML配置文件的关键元素：
- en: '**Modules**: In modules, you specify how to build your containers.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块**：在模块中，您指定如何构建您的容器。'
- en: '**Services**: In services, you specify how to run your containers on Kubernetes.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：在服务中，您指定如何在Kubernetes上运行您的容器。'
- en: '**Tests**: In tests, you specify unit and integration tests.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：在测试中，您指定单元测试和集成测试。'
- en: 'The following are some of the features that Garden provides:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Garden提供的一些功能：
- en: It automatically redeploys the application to the remote cluster when the source
    code is changed.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当源代码更改时，它会自动将应用程序重新部署到远程集群。
- en: It supports multi-module and multi-service operations (tree of dependencies).
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持多模块和多服务操作（依赖关系树）。
- en: It provides a graphical dashboard for dependencies.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为依赖项提供了一个图形化的仪表板。
- en: The ability to run tasks (for example, database migrations as part of the build
    flow).
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行任务的能力（例如，在构建流程中作为数据库迁移的一部分）。
- en: It supports Helm and OpenFass deployments.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持Helm和OpenFass部署。
- en: It supports hot reload features where source code is sent directly to running
    containers.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持热重载功能，其中源代码直接发送到正在运行的容器。
- en: The ability to stream container logs to your terminal.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将容器日志流式传输到您的终端的能力。
- en: It supports file watching and hot reloading of code for remote clusters.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持文件监视和远程集群代码的热重载。
- en: Garden has a more complex setup than Skaffold, and it takes a while to get familiar
    with its concepts, so there is a steep learning curve involved. With Skaffold,
    you work with familiar build and deploy tools, and it's easy to get started with
    it. It might also be overkill to use Garden for small applications due to its
    inherent complexities. Garden is commercial open source, so some of its features
    are paid compared to Skaffold, which is entirely open source.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Garden的设置比Skaffold更复杂，需要一段时间才能熟悉其概念，因此涉及陡峭的学习曲线。使用Skaffold，您可以使用熟悉的构建和部署工具，并且很容易开始使用。对于小型应用程序来说，使用Garden可能也是过度复杂的。Garden是商业开源的，因此与完全开源的Skaffold相比，它的一些功能是付费的。
- en: docker-compose
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: docker-compose
- en: '`docker-compose` is a tool that is primarily used for local development with
    containers. It allows you to run multiple containers locally and mimic how an
    application would look when deployed to Kubernetes. Docker needs to be installed
    on the workstation to get started with it. While `docker-compose` may give some
    developers a false impression of running their application in a Kubernetes environment
    such as minikube, in reality, it is nothing like running it in a Kubernetes cluster.
    It also means that because your application works on `docker-compose`, it will
    not work or behave similarly when deployed to the Kubernetes cluster in production.
    While we know that containers solve the problem of *works on my machine*, with
    `docker-compose`, we introduce a new problem, that is, *works on my docker-compose
    setup*.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker-compose` 是一个主要用于本地容器开发的工具。它允许您在本地运行多个容器，并模拟应用程序在部署到 Kubernetes 时的外观。要开始使用它，需要在工作站上安装
    Docker。虽然 `docker-compose` 可能会让一些开发人员错误地认为他们的应用程序在 Kubernetes 环境（如 minikube）中运行，但实际上，它与在
    Kubernetes 集群中运行完全不同。这也意味着，因为您的应用程序在 `docker-compose` 上运行正常，当部署到生产环境的 Kubernetes
    集群时，它将无法正常工作或表现类似。虽然我们知道容器解决了“在我的机器上运行”的问题，但是使用 `docker-compose`，我们引入了一个新问题，即“在我的
    docker-compose 设置上运行”。'
- en: It may be tempting to use `docker-compose` as a replacement to ease the inner
    development loop of cloud applications, but as explained earlier, your local and
    production environment will not be the same. It would be hard to debug any environment
    because of this difference, while with Skaffold, you get to use the exact same
    stack for your local and remote build and deployment. If, for some reason, you
    are stuck with the `docker-compose` setup, you can even pair it with Skaffold.
    Skaffold internally uses Kompose ([https://kompose.io/](https://kompose.io/))
    to convert `docker-compose.yaml` into Kubernetes manifests.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 也许会诱人将 `docker-compose` 用作云应用程序内部开发循环的替代品，但正如前面所解释的，您的本地和生产环境将不相同。由于这种差异，很难调试任何环境，而使用
    Skaffold，您可以在本地和远程构建和部署时使用完全相同的堆栈。如果由于某种原因您被困在 `docker-compose` 设置中，甚至可以将其与 Skaffold
    配对使用。Skaffold 内部使用 Kompose ([https://kompose.io/](https://kompose.io/)) 将 `docker-compose.yaml`
    转换为 Kubernetes 清单。
- en: 'You can use the following command to use your existing `docker-compose.yaml`
    file with Skaffold:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令将现有的 `docker-compose.yaml` 文件与 Skaffold 一起使用：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this section, we have looked at Kubernetes development tools other than Skaffold,
    helping developers develop faster and get quick feedback in their inner development
    loop.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经了解了除 Skaffold 之外的 Kubernetes 开发工具，帮助开发人员在内部开发循环中更快地开发并获得快速反馈。
- en: In the next section, we will learn about some best practices to apply to our
    existing or new workflow with Skaffold.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将学习如何将一些最佳实践应用到我们现有或新的 Skaffold 工作流中。
- en: Applying Skaffold best practices
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用 Skaffold 最佳实践
- en: 'In this section, we will learn about Skaffold best practices that you, as a
    developer, can take advantage of, to either speed up your deployment in the inner
    or outer development loop or use some flags to make things easier while using
    Skaffold. Let''s begin:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解 Skaffold 的最佳实践，作为开发人员，您可以利用这些最佳实践，加快内部或外部开发循环中的部署速度，或者在使用 Skaffold
    时使用一些标志来简化事情。让我们开始：
- en: 'While working with multiple microservices applications deployed to Kubernetes,
    sometimes, it''s challenging to create a single `skaffold.yaml` configuration
    file for each application. In those common cases, you can create `skaffold.yaml`
    scoped for each application, and then run the `skaffold dev` or `run` command
    independently for each application. You can even iterate both the applications
    together in a single Skaffold session. Let''s assume we have a frontend app and
    a backend app for both of them; your single `skaffold.yaml` file should look like
    the following:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在部署到Kubernetes的多个微服务应用程序中工作时，有时很难为每个应用程序创建单个的`skaffold.yaml`配置文件。在这些常见情况下，您可以为每个应用程序创建范围为`skaffold.yaml`，然后独立运行`skaffold
    dev`或`run`命令。您甚至可以在单个Skaffold会话中同时迭代这两个应用程序。假设我们有一个前端应用和一个后端应用，对于它们两个，您的单个`skaffold.yaml`文件应如下所示：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When you are bootstrapping your project with Skaffold and you don't have Kubernetes
    manifests, you can pass the `--generate-manifests` flag with the `skaffold init`
    command to generate basic Kubernetes manifests for your project.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用Skaffold引导项目并且没有Kubernetes清单时，您可以使用`skaffold init`命令传递`--generate-manifests`标志来为项目生成基本的Kubernetes清单。
- en: It would be best if you always use the `default-repo` functionality with Skaffold.
    If you are using `default-repo`, you don't have to manually edit the YAML files
    as Skaffold can prefix the image names with the container image registry specified
    by you. So, instead of writing `gcr.io/myproject/imagename`, you can enter the
    image name in the `skaffold.yaml` configuration file. Another advantage is that
    you can share your `skaffold.yaml` file easily with other teams as they don't
    have to manually edit the YAML file if they use a different container image registry.
    So, basically, you don't have to hardcode the container image registry names inside
    your `skaffold.yaml` configuration files by using the `default-repo` functionality.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最好始终与Skaffold一起使用`default-repo`功能。如果您使用`default-repo`，则无需手动编辑YAML文件，因为Skaffold可以使用您指定的容器镜像注册表前缀图像名称。因此，您可以在`skaffold.yaml`配置文件中输入图像名称，而不是编写`gcr.io/myproject/imagename`。另一个优点是，您可以轻松地与其他团队共享您的`skaffold.yaml`文件，因为如果他们使用不同的容器镜像注册表，则无需手动编辑YAML文件。因此，基本上，您可以使用`default-repo`功能，而无需在`skaffold.yaml`配置文件中硬编码容器镜像注册表名称。
- en: 'You can utilize the `default-repo` functionality in the following three ways:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以以下三种方式利用`default-repo`功能：
- en: 'a. By passing the `--default-repo` flag:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: a. 通过传递`--default-repo`标志：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'b. By passing the `SKAFFOLD_DEFAULT_REPO` environment variable:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: b. 通过传递`SKAFFOLD_DEFAULT_REPO`环境变量：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'c. By setting Skaffold''s global config:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: c. 通过设置Skaffold的全局配置：
- en: '[PRE5]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It gets tricky to know the actual issue when you run into an issue with the
    Skaffold command. In some cases, you may need more information than what Skaffold
    typically displays while streaming logs. For such cases, you can use the `–v`
    `or –verbosity` flag to use a specific log level. For example, you use `skaffold
    dev –v info` to view information-level logs.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您遇到Skaffold命令的问题时，了解实际问题变得棘手。在某些情况下，您可能需要比Skaffold通常显示的流式日志更多的信息。对于这种情况，您可以使用`-v`或`-verbosity`标志使用特定的日志级别。例如，您可以使用`skaffold
    dev -v info`来查看信息级别的日志。
- en: 'Skaffold supports the following log levels, and the default is `warn`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Skaffold支持以下日志级别，默认为`warn`：
- en: '`info`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info`'
- en: '`warn`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`warn`'
- en: '`error`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error`'
- en: '`fatal`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fatal`'
- en: '`debug`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debug`'
- en: '`trace`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trace`'
- en: For a faster build, you can take advantage of the concurrency flag by setting
    it to `0`. The default value is `0`, meaning no limits on the number of parallel
    builds so all your builds are done in parallel. Only in the case of local build
    concurrency will the value default to `1`, which means the build will be done
    sequentially to avoid any side effects.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了更快地构建，您可以通过将并发标志设置为`0`来利用并发标志。默认值为`0`，表示没有限制的并行构建，因此所有构建都是并行进行的。只有在本地构建并发性方面，该值才会默认为`1`，这意味着构建将按顺序进行，以避免任何副作用。
- en: 'If you are using Jib to build and push container images, then you can use the
    special sync support using the auto configuration. You can enable it by using
    the `sync:` option, as mentioned in the following `skaffold.yaml` file:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在使用Jib来构建和推送容器镜像，那么您可以使用自动配置来使用特殊的同步支持。您可以通过使用`sync:`选项来启用它，如下面的`skaffold.yaml`文件中所述：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With this option, Jib can sync your class files, resource files, and Jib's *extra
    directories* files to a container running locally or remotely. You don't have
    to rebuild, redeploy, or restart the pod for each change in your inner development
    loop. However, for this to work with your Spring Boot application, you need to
    have the `spring-boot-devtools` dependency in your `pom.xml` file for your Maven
    project.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此选项，Jib可以将您的类文件、资源文件和Jib的*额外目录*文件同步到本地或远程运行的容器中。您不必为内部开发循环中的每次更改重新构建、重新部署或重新启动pod。但是，要使其与您的Spring
    Boot应用程序配合使用，您需要在Maven项目的`pom.xml`文件中具有`spring-boot-devtools`依赖项。
- en: 'Skaffold also supports Cloud Native Buildpacks to build your container images
    and, similar to Jib, it also supports the `sync` option to automatically rebuild
    and relaunch your application when changes are made to a certain type of file.
    It supports the following type of source files:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Skaffold还支持Cloud Native Buildpacks来构建您的容器镜像，并且与Jib类似，它还支持`sync`选项，以在对某种类型的文件进行更改时自动重新构建和重新启动应用程序。它支持以下类型的源文件：
- en: '**Go**: `*.go`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Go: `*.go`'
- en: '**Java**: `*.java`, `*.kt`, `*.scala`, `*.groovy`, `*.clj`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Java: `*.java`, `*.kt`, `*.scala`, `*.groovy`, `*.clj`'
- en: '**Node.js**: `*.js`, `*.mjs`, `*.coffee`, `*.litcoffee`, `*.json`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Node.js: `*.js`, `*.mjs`, `*.coffee`, `*.litcoffee`, `*.json`'
- en: In this section, we have learned some best practices that we can apply to develop
    efficiently and accelerate the development loop even faster with Skaffold.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经学习了一些最佳实践，我们可以应用这些最佳实践来高效开发，并且甚至可以更快地加速Skaffold的开发循环。
- en: In the next section, we will be looking at some of the common Skaffold traps
    that we, as developers, should be aware of.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看一些我们作为开发人员应该注意的常见Skaffold陷阱。
- en: Avoiding Skaffold pitfalls
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免Skaffold陷阱
- en: 'Throughout this book, we have used various features provided by Skaffold. Now
    let''s discuss some common Skaffold pitfalls that we, as developers, should understand
    and try to avoid:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们已经使用了Skaffold提供的各种功能。现在让我们讨论一些常见的Skaffold陷阱，作为开发人员，我们应该了解并尽量避免：
- en: Skaffold requires that either you have some local or remote Kubernetes setup
    so in comparison with other tools that we discussed in the previous section Skaffold
    doesn't reduce the time required to set up your development environment.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Skaffold要求您具有一些本地或远程Kubernetes设置，因此与我们在上一节中讨论的其他工具相比，Skaffold并不会减少设置开发环境所需的时间。
- en: With Skaffold, in most cases, you work with some local Kubernetes such as minikube
    or Docker Desktop and you cannot replicate your entire production-like setup with
    them because of their limitations. This leaves space for integration issues that
    you may not see on local systems but could pop up in higher environments.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在大多数情况下，使用Skaffold时，您会使用一些本地Kubernetes，如minikube或Docker Desktop，并且由于它们的限制，您无法复制整个类似生产环境的设置。这留下了集成问题的空间，这些问题在本地系统上可能看不到，但可能会在更高的环境中出现。
- en: Sometimes, more hardware resources are wasted on your machine with Skaffold.
    For example, if you need to run, let's say, 10 microservices, then it becomes
    challenging as you're limited by resources on your laptop.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时，使用Skaffold会在您的机器上浪费更多的硬件资源。例如，如果您需要运行，比如说，10个微服务，那么这将变得具有挑战性，因为您的笔记本电脑资源有限。
- en: Skaffold has built-in support for integrating with debuggers via the (beta)
    `skaffold debug` command. With this debugging option, Skaffold automatically configures
    the application runtime for remote debugging. It is a great feature, but using
    debuggers in a microservices environment is tricky at best. It gets even tougher
    working with remote clusters. Use it judiciously.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Skaffold内置支持通过（beta）`skaffold debug`命令与调试器集成。使用这个调试选项，Skaffold会自动配置应用程序运行时进行远程调试。这是一个很棒的功能，但在微服务环境中使用调试器最好是棘手的。在远程集群中使用会更加困难。要谨慎使用。
- en: Skaffold has no web UI. While we discussed many tools in the previous section
    that provide a UI for a better experience, I would not cry about it. It is more
    of a personal preference as some people tend to prefer a UI and some a CLI. If
    you are more of a UI person, then you may not get along with Skaffold.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Skaffold没有Web UI。虽然在上一节中我们讨论了许多提供UI以获得更好体验的工具，但我不会为此而哭泣。这更多是个人偏好，因为有些人倾向于喜欢UI，而有些人则喜欢CLI。如果你更喜欢UI，那么你可能无法与Skaffold相处。
- en: 'Skaffold is excellent for local development and testing in your inner development
    loop. Even though it is marketed as a complete CI/CD solution for some use cases,
    it may not be the best tool for the job. For example, if we want to scale to production
    or pre-production use cases, it is better to use dedicated tools for that such
    as **Spinnaker pipelines** ([https://spinnaker.io/](https://spinnaker.io/)) or
    **Argo Rollouts** ([https://argoproj.github.io/argo-rollouts/](https://argoproj.github.io/argo-rollouts/)).
    These tools Spinnaker/Agro Rollouts provide some advantages over Skaffold. Let''s
    see them:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Skaffold非常适合在本地开发和测试中使用。尽管它被宣传为一些用例的完整CI/CD解决方案，但它可能不是最适合的工具。例如，如果我们想要扩展到生产或预生产用例，最好使用专门的工具，比如**Spinnaker
    pipelines** ([https://spinnaker.io/](https://spinnaker.io/)) 或 **Argo Rollouts**
    ([https://argoproj.github.io/argo-rollouts/](https://argoproj.github.io/argo-rollouts/))。这些工具Spinnaker/Agro
    Rollouts相对于Skaffold提供了一些优势。让我们来看看它们：
- en: In the case of Spinnaker/Agro Rollouts, both can support sophisticated/complex
    deployment strategies. You can define deployment strategies such as canary and
    blue/green deployment, stuff like that.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spinnaker/Agro Rollouts的情况下，两者都支持复杂的部署策略。您可以定义诸如金丝雀部署和蓝绿部署之类的部署策略。
- en: Spinnaker allows multi-cluster deployments. Also, you can configure easy UI-based
    deployment to multiple clusters.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spinnaker允许多集群部署。此外，您可以配置基于易用UI的部署到多个集群。
- en: Spinnaker has great visualization. It provides a rich UI that displays any deployment
    or pod status across clusters, regions, namespace, and cloud providers.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spinnaker具有出色的可视化效果。它提供了一个丰富的UI，显示跨集群、区域、命名空间和云提供商的任何部署或Pod状态。
- en: In this section, we have covered Skaffold pitfalls that you should look out
    for before deciding to go ahead with it for your Kubernetes workloads.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们已经涵盖了Skaffold的一些陷阱，在决定是否继续在Kubernetes工作负载中使用之前，你应该注意这些。
- en: Future roadmap
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未来路线图
- en: The community primarily drives the Skaffold roadmap since it is an open source
    tool, and the team of engineers from Google makes the final call. Google developers
    also propose exciting new features that would enhance the user experience with
    Skaffold on top of the changes requested by the community.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Skaffold是一个开源工具，社区主要推动了Skaffold的路线图，而来自Google的工程师团队做出最终决定。Google开发人员还提出了一些令人兴奋的新功能，这些功能将增强Skaffold的用户体验，除了社区提出的变更。
- en: However, a roadmap should not be considered a list of promises delivered no
    matter what. It is a sort of wish list that the Skaffold engineering team thinks
    could be worth investing their time on. The primary motivation behind the roadmap
    is to get feedback from the community around the features they want to see in
    Skaffold.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，路线图不应被视为无论如何都会实现的承诺清单。这是Skaffold工程团队认为值得投入时间的愿望清单。路线图背后的主要动机是从社区中获取他们希望在Skaffold中看到的功能的反馈。
- en: You can view the Skaffold roadmap for 2021 by accessing the [https://github.com/GoogleContainerTools/skaffold/blob/master/ROADMAP.md#2021-roadmap](https://github.com/GoogleContainerTools/skaffold/blob/master/ROADMAP.md#2021-roadmap)  URL.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问[https://github.com/GoogleContainerTools/skaffold/blob/master/ROADMAP.md#2021-roadmap](https://github.com/GoogleContainerTools/skaffold/blob/master/ROADMAP.md#2021-roadmap)
    URL来查看2021年的Skaffold路线图。
- en: Final thoughts
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的思考
- en: Tooling around Kubernetes developer tools has improved significantly in recent
    years. The primary motivation for that is the increased adoption of Kubernetes
    in the industry. Modern age developers want a tool that increases their productivity
    while developing applications for the cloud. Skaffold dramatically enhances the
    productivity of developers building and deploying Kubernetes applications.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，围绕Kubernetes开发工具的工具化显著改善。这背后的主要动机是Kubernetes在行业中的日益普及。现代开发人员希望有一个能够提高他们在为云开发应用程序时的生产力的工具。Skaffold极大地提高了开发人员构建和部署Kubernetes应用程序的生产力。
- en: Many tools internally use Skaffold, such as Jenkins X and Cloud Code, to improve
    the overall developer experience with Kubernetes. In contrast to Jenkins X, which
    uses Skaffold to build and push the image in the pipeline, Cloud Code is entirely
    built around Skaffold and its supported tools to provide a seamless onboarding
    experience for Kubernetes applications.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 许多工具内部使用Skaffold，例如Jenkins X和Cloud Code，以改善Kubernetes的整体开发体验。与Jenkins X不同，后者在流水线中使用Skaffold构建和推送镜像，Cloud
    Code完全围绕Skaffold及其支持的工具构建，以为Kubernetes应用程序提供无缝的入门体验。
- en: Finally, I would like to conclude by saying that Skaffold simplifies Kubernetes
    development, and in my opinion, it is doing a good job. It provides flexibility
    and extensibility on what kind of integrations it should be used with. Its extensible
    and pluggable architecture allows developers to choose an appropriate tool for
    each step involved in building and deploying the application.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我想总结一下，Skaffold简化了Kubernetes开发，在我看来，它做得很好。它提供了灵活性和可扩展性，可以选择与之一起使用的集成类型。其可扩展和可插拔的架构允许开发人员为构建和部署应用程序的每个步骤选择适当的工具。
- en: Summary
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started by comparing Skaffold with other tools such as Tilt,
    Telepresence, Garden, Oketo, `docker-compose`, and OpenShift odo. These tools,
    in principle, try to provide a solution to a similar problem that Skaffold addresses.
    Then, we covered features that these tools offer in comparison to Skaffold. We
    also looked at some best practices that we can use with Skaffold for a better
    developer experience. Finally, we concluded by explaining some pitfalls related
    to Skaffold, which you should watch out for if your use case is more advanced.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先将Skaffold与其他工具（如Tilt、Telepresence、Garden、Oketo、`docker-compose`和OpenShift
    odo）进行了比较。这些工具原则上试图提供与Skaffold解决的类似问题的解决方案。然后，我们比较了这些工具相对于Skaffold提供的功能。我们还研究了一些可以与Skaffold一起使用以获得更好开发体验的最佳实践。最后，我们通过解释与Skaffold相关的一些潜在问题来总结，如果您的用例更高级，您应该注意这些问题。
- en: You have discovered how you can take advantage of Skaffold by following some
    of the best practices that we have tried to explain. You are now in a better position
    to decide whether Skaffold fulfills your use case, or whether you need to consider
    other options we have covered in this chapter.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经发现了如何通过遵循我们试图解释的一些最佳实践来利用Skaffold。现在你更有能力决定Skaffold是否满足你的使用情况，或者你是否需要考虑本章中涵盖的其他选项。
- en: With this, we have reached the end of the journey and I hope you are encouraged
    to try out and explore a lot of Skaffold!
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一点，我们已经到达了旅程的尽头，我希望你会被鼓励尝试并探索大量的Skaffold！
