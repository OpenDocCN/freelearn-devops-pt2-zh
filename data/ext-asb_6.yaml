- en: Chapter 6. Fitting It All Together – Integration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。将所有内容整合在一起-集成
- en: By the time you reach this chapter, you will have successfully created your
    own custom modules and plugins as per your requirements. Now, you might find yourself
    wondering, what next?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当您到达本章时，您将根据自己的需求成功创建自己的自定义模块和插件。现在，您可能会想知道接下来是什么？
- en: Ansible is a great community product. It provides a number of modules and plugins
    for everyone to use. Now that you are familiar with the Python API, have already
    written an Ansible module and probably a plugin, too, it's time to give back to
    the community. Since you had some requirements that could not be met by the native
    Ansible, chances are that other people are also in need of further help. Let's
    look at various ways in which one can give back to the community.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible是一个伟大的社区产品。它为每个人提供了许多模块和插件。现在您已经熟悉了Python API，已经编写了一个Ansible模块，可能还有一个插件，现在是时候回馈社区了。由于您有一些无法满足原生Ansible的需求，很可能其他人也需要进一步的帮助。让我们看看可以以各种方式回馈社区。
- en: This chapter will cover how to configure Ansible to integrate your modules in
    the existing Ansible library. The chapter will also cover how you can distribute
    your modules and help improve Ansible.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍如何配置Ansible以集成您的模块到现有的Ansible库中。本章还将介绍如何分发您的模块并帮助改进Ansible。
- en: Configuring Ansible
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Ansible
- en: To take full advantage of Ansible, it is necessary to configure Ansible properly.
    Although stock settings are sufficient for most users, power users may want to
    tweak things and make a few changes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要充分利用Ansible，有必要正确配置Ansible。虽然默认设置对大多数用户来说已经足够，但高级用户可能希望微调一些东西并进行一些更改。
- en: Global persistent settings are defined in the Ansible configuration file located
    at `/etc/ansible/ansible.cfg`. However, you can also place custom configuration
    files in the root of the Ansible play or in the home directory of the user. Settings
    can also be changed by setting environment variables.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 全局持久设置在位于`/etc/ansible/ansible.cfg`的Ansible配置文件中定义。但是，您也可以将自定义配置文件放在Ansible
    play的根目录或用户的主目录中。还可以通过设置环境变量来更改设置。
- en: With so many ways to configure Ansible, an important question arises – how does
    Ansible prioritize the configuration file? How does it choose which configuration
    to use during a playbook execution?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 有这么多配置Ansible的方法，一个重要的问题就是，Ansible如何优先考虑配置文件？在执行playbook过程中，它如何选择要使用的配置？
- en: 'In Ansible version 1.9, configurations are processed in the following order:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ansible版本1.9中，配置按以下顺序处理：
- en: '`ANSIBLE_CONFIG`: Environment variable'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ANSIBLE_CONFIG`：环境变量'
- en: '`ansible.cfg`: Current working directory from where Ansible is called'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible.cfg`：从中调用Ansible的当前工作目录'
- en: '`.ansible.cfg`: Configuration file stored in the user''s home directory'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.ansible.cfg`：配置文件存储在用户的主目录中'
- en: '`/etc/ansible/ansible.cfg`: Default configuration file in case no other configuration
    is found'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/ansible/ansible.cfg`：如果找不到其他配置文件，则为默认配置文件'
- en: Ansible will process the configurations in the above order. Whichever configuration
    is found first will be used during execution. To keep everything clean, Ansible
    does not merge the configuration files. All the files are kept separate.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible将按照上述顺序处理配置。在执行过程中将使用找到的第一个配置。为了保持一切清晰，Ansible不会合并配置文件。所有文件都是分开保存的。
- en: Environment configuration
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境配置
- en: 'By setting environment variables, you can override any existing configurations
    loaded from the configuration file. In the present version of Ansible, environment
    configurations take the top most priority. To find the complete list of environment
    variables supported by Ansible, you need to look into the source code. The following
    list contains a few environment variables you should know in order to get your
    modules and plugins working:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过设置环境变量，您可以覆盖从配置文件加载的任何现有配置。在当前版本的Ansible中，环境配置具有最高优先级。要找到Ansible支持的环境变量的完整列表，您需要查看源代码。以下列表包含一些您应该了解的环境变量，以便使您的模块和插件正常工作：
- en: '| Environment variable | Default value |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 环境变量 | 默认值 |'
- en: '| --- | --- |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `ANSIBLE_ACTION_PLUGINS` | `~/.ansible/plugins/action:/usr/share/ansible/plugins/action`
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `ANSIBLE_ACTION_PLUGINS` | `~/.ansible/plugins/action:/usr/share/ansible/plugins/action`
    |'
- en: '| `ANSIBLE_CACHE_PLUGINS` | `~/.ansible/plugins/cache:/usr/share/ansible/plugins/cache`
    |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `ANSIBLE_CACHE_PLUGINS` | `~/.ansible/plugins/cache:/usr/share/ansible/plugins/cache`
    |'
- en: '| `ANSIBLE_CALLBACK_PLUGINS` | `~/.ansible/plugins/callback:/usr/share/ansible/plugins/callback`
    |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| `ANSIBLE_CALLBACK_PLUGINS` | `~/.ansible/plugins/callback:/usr/share/ansible/plugins/callback`
    |'
- en: '| `ANSIBLE_CONNECTION_PLUGINS` | `~/.ansible/plugins/connection:/usr/share/ansible/plugins/connection`
    |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| `ANSIBLE_CONNECTION_PLUGINS` | `~/.ansible/plugins/connection:/usr/share/ansible/plugins/connection`
    |'
- en: '| `ANSIBLE_LOOKUP_PLUGINS` | `~/.ansible/plugins/lookup:/usr/share/ansible/plugins/lookup`
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| `ANSIBLE_LOOKUP_PLUGINS` | `~/.ansible/plugins/lookup:/usr/share/ansible/plugins/lookup`
    |'
- en: '| `ANSIBLE_INVENTORY_PLUGINS` | `~/.ansible/plugins/inventory:/usr/share/ansible/plugins/inventory`
    |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `ANSIBLE_INVENTORY_PLUGINS` | `~/.ansible/plugins/inventory:/usr/share/ansible/plugins/inventory`
    |'
- en: '| `ANSIBLE_VARS_PLUGINS` | `~/.ansible/plugins/vars:/usr/share/ansible/plugins/vars`
    |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `ANSIBLE_VARS_PLUGINS` | `~/.ansible/plugins/vars:/usr/share/ansible/plugins/vars`
    |'
- en: '| `ANSIBLE_FILTER_PLUGINS` | `~/.ansible/plugins/filter:/usr/share/ansible/plugins/filter`
    |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `ANSIBLE_FILTER_PLUGINS` | `~/.ansible/plugins/filter:/usr/share/ansible/plugins/filter`
    |'
- en: '| `ANSIBLE_KEEP_REMOTE_FILES` | `False` |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `ANSIBLE_KEEP_REMOTE_FILES` | `False` |'
- en: '| `ANSIBLE_PRIVATE_KEY_FILE` | `None` |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `ANSIBLE_PRIVATE_KEY_FILE` | `None` |'
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Fun fact**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**有趣的事实**'
- en: If you have cowsay installed on the management node, Ansible playbook runs will
    use cowsay and make the output more interesting. If you don't want cowsay enabled,
    simply set `nocows=0` in the configuration file.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在管理节点上安装了cowsay，Ansible playbook运行将使用cowsay并使输出更有趣。如果您不希望启用cowsay，只需在配置文件中设置`nocows=0`。
- en: Contributing to Ansible
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 贡献给Ansible
- en: Before starting to contribute to Ansible, it is important to know where and
    how to contribute and what to contribute. To reduce duplication of effort, you
    need to stay in touch with the community. There might be instances in which a
    feature you want to work on is already being worked on by someone else, or perhaps
    a bug you think you can fix is picked up by someone else and is currently being
    worked upon. Also, there may arise situations when you need some help from the
    community in finishing off some task; maybe you are stuck at some point and have
    a few unanswered questions. This is where community comes into play. Ansible has
    its own IRC channel and mailing list for such purposes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始为Ansible做贡献之前，重要的是要知道在哪里以及如何做出贡献以及要做出什么样的贡献。为了减少重复劳动，您需要与社区保持联系。可能会出现这样的情况，您想要处理的功能已经被其他人处理，或者您认为可以修复的错误已经被其他人接手并正在处理。此外，可能会出现您需要社区帮助来完成某些任务的情况；也许您在某个地方卡住了，有一些未解答的问题。这就是社区发挥作用的地方。Ansible有自己的IRC频道和邮件列表用于这些目的。
- en: You can join the `#ansible` channel on [irc.freenode.net](http://irc.freenode.net),
    where you can talk to the community members, discuss features, and get help. This
    is where people live chat with each other. For user who don't have an IRC client,
    they can connect through the Web UI using [https://webchat.freenode.net/](https://webchat.freenode.net/).
    However, since Ansible is a global community, not all members will be available
    around the clock, and it might so happen your question remains unanswered. If
    so, you can drop an e-mail to the mailing list where the question is more likely
    to get the attention of core developers and advanced users.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以加入`#ansible`频道，地址是[irc.freenode.net](http://irc.freenode.net)，在那里你可以与社区成员交谈，讨论功能，并获得帮助。这是人们互相在线聊天的地方。对于没有IRC客户端的用户，他们可以通过[https://webchat.freenode.net/](https://webchat.freenode.net/)连接Web
    UI。然而，由于Ansible是一个全球社区，不是所有成员都会全天候可用，你的问题可能得不到答复。如果是这样，你可以向邮件列表发送邮件，这样问题更有可能引起核心开发人员和高级用户的注意。
- en: 'You may want to join the following mailing lists:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想加入以下邮件列表：
- en: '**The** **Ansible Project list**: [https://groups.google.com/forum/#!forum/ansible-project](https://groups.google.com/forum/#!forum/ansible-project)
    (a general user discussion mailing list for sharing Ansible tips and asking questions)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible项目列表：[https://groups.google.com/forum/#!forum/ansible-project](https://groups.google.com/forum/#!forum/ansible-project)（一个用于分享Ansible技巧和提问的一般用户讨论邮件列表）
- en: '**The** **Ansible Development list**: [https://groups.google.com/forum/#!forum/ansible-devel](https://groups.google.com/forum/#!forum/ansible-devel)
    (discuss features in progress, suggest feature requests, get help extending Ansible)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible开发列表：[https://groups.google.com/forum/#!forum/ansible-devel](https://groups.google.com/forum/#!forum/ansible-devel)（讨论正在进行的功能，建议功能请求，获取扩展Ansible的帮助）
- en: '**The** **Ansible Anounce list**: [https://groups.google.com/forum/#!forum/ansible-announce](https://groups.google.com/forum/#!forum/ansible-announce)
    (A read-only list that shares information about the new releases of Ansible)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible公告列表：[https://groups.google.com/forum/#!forum/ansible-announce](https://groups.google.com/forum/#!forum/ansible-announce)（一个只读列表，分享有关Ansible新版本发布的信息）
- en: Ansible is an open source project hosted on GitHub. Anyone having a GitHub account
    can contribute to the Ansible project. The project takes in contributions through
    GitHub pull requests.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible是一个托管在GitHub上的开源项目。任何拥有GitHub账户的人都可以为Ansible项目做出贡献。该项目通过GitHub拉取请求接受贡献。
- en: Galaxy–sharing roles
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Galaxy-分享角色
- en: Writing a playbook for a task you want to automate helps you save time and effort
    every time you have to deploy. This can also save time for others if you can share
    the roles with the community.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为你想要自动化的任务编写一个playbook可以帮助你每次部署时节省时间和精力。如果你能与社区分享角色，这也可以为其他人节省时间。
- en: Ansible provides a great platform to share your plays. Galaxy is a platform
    where you can share your pre-packaged units of work as "roles," which can be integrated
    or dropped into the playbooks and used. Some roles can be dropped in directly,
    while others may require a bit of tweaking. What's more, that Galaxy provides
    a reliability score against each shared role. You can choose from a number of
    available roles, rate them, and comment on them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible提供了一个很好的平台来分享你的操作。Galaxy是一个平台，你可以在其中分享预打包的工作单元作为“角色”，这些角色可以集成或放入playbooks中使用。一些角色可以直接放入，而其他一些可能需要进行一些调整。此外，Galaxy为每个共享的角色提供了可靠性评分。你可以从许多可用的角色中进行选择，对它们进行评分和评论。
- en: 'Roles are hosted on GitHub. Galaxy allows integration with GitHub, and you
    can use your existing GitHub account to log into Galaxy and share the roles. To
    share your role, create a GitHub repository, clone it, and initialize a Galaxy
    role in the cloned repository. This can be done with the following bit of code:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 角色托管在GitHub上。Galaxy允许与GitHub集成，您可以使用现有的GitHub帐户登录到Galaxy并分享角色。要分享您的角色，请创建一个GitHub存储库，克隆它，并在克隆的存储库中初始化一个Galaxy角色。可以使用以下代码来完成：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will create a directory structure needed to organize the code. You can
    then use this directory structure to create an Ansible role. Once you have your
    role ready, test it in a playbook, and verify if it's working as expected. You
    might then push it to the GitHub repository.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个组织代码所需的目录结构。然后，您可以使用此目录结构创建一个Ansible角色。一旦您的角色准备就绪，请在playbook中对其进行测试，并验证其是否按预期工作。然后，您可以将其推送到GitHub存储库中。
- en: To upload the code to Galaxy, you need to log in to the Galaxy platform ([https://galaxy.ansible.com](https://galaxy.ansible.com))
    using your GitHub account. By using the **Add a Role** option from the menu and
    supplying the required credentials, Galaxy will import the role from your GitHub
    repository and make it available on the Galaxy platform for the entire community.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码上传到Galaxy，您需要使用您的GitHub帐户登录到Galaxy平台（[https://galaxy.ansible.com](https://galaxy.ansible.com)）。通过使用菜单中的**添加角色**选项并提供所需的凭据，Galaxy将从您的GitHub存储库导入角色，并使其在Galaxy平台上对整个社区可用。
- en: You might also want to apply tags to your repository, which Galaxy, by default,
    treats as version numbers. This allows users to choose between different versions.
    If there are no tags specified, users will always be able to download only the
    latest available code on your GitHub repository.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还希望为存储库应用标签，Galaxy默认将其视为版本号。这允许用户在不同版本之间进行选择。如果没有指定标签，用户将始终只能下载GitHub存储库上最新的可用代码。
- en: Galaxy – best practices
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Galaxy-最佳实践
- en: 'While writing any role you may want to share through Galaxy, there are a few
    best practices that should be followed in order to ensure everything runs smoothly
    for the end user:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写任何您可能希望通过Galaxy分享的角色时，应遵循一些最佳实践，以确保最终用户一切顺利运行：
- en: Always document whatever you make and place it in the `README.md` file. This
    is the file the end user refers to while using the role.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终记录您所做的任何内容，并将其放在`README.md`文件中。这是最终用户在使用角色时所参考的文件。
- en: Include and list all the dependencies explicitly. Never assume anything.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 明确包含和列出所有依赖项。不要假设任何内容。
- en: Prefix the variables with the role name.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用角色名称作为变量的前缀。
- en: Test the role before you share it. The more testing you perform, the less chances
    of it being broken.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在分享之前测试角色。您进行的测试越多，出现故障的可能性就越小。
- en: These best practices also apply to any contribution you make in general to Ansible.
    Whether you are developing a module or plugin, or are writing a role that you
    plan to share with the community, these practices ensure everything runs smoothly.
    Though it's not mandatory, it is highly recommended to follow these best practices
    in order to make the contribution easy for others, as well as to understand and
    extend later whenever required.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些最佳实践也适用于您在一般情况下对Ansible的任何贡献。无论您是开发模块或插件，还是编写计划与社区共享的角色，这些实践都可以确保一切顺利进行。虽然这不是强制性的，但强烈建议遵循这些最佳实践，以便为他人提供贡献变得更加容易，并在以后需要时理解和扩展。
- en: Sharing modules and plugins
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分享模块和插件
- en: By this stage, you will have developed your own Ansible module or plugin. Now,
    you want to share it with both your friends and strangers and help them simplify
    their tasks. You might also want to collaborate on developing a module or plugin
    and require help from the general public.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 到了这个阶段，您将开发自己的Ansible模块或插件。现在，您希望与朋友和陌生人分享，并帮助他们简化他们的任务。您可能还希望合作开发一个模块或插件，并需要公众的帮助。
- en: One of the great developer collaboration platforms is GitHub. You can create
    a repository on GitHub and push your code to it. You might accompany your module
    code with an Ansible playbook, demonstrating how to use the module or plugin you
    just developed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub是一个很好的开发者协作平台之一。您可以在GitHub上创建一个存储库并将代码推送到其中。您可以将模块代码与Ansible playbook一起使用，演示您刚刚开发的模块或插件的使用方法。
- en: GitHub allows people to contribute to one single project. It's usually a good
    idea to put your code online on GitHub, for it provides a number of advantages.
    Other than encouraging a collaborative nature, it provides version control, where
    you can roll back your changes if required, as well as track any changes made
    to the code base in the past. While collaborating, you might choose which pull
    request to address and which to ignore by going through the proposed change, thus
    allowing you control over your repository.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub允许人们为一个项目做出贡献。通常将代码放在GitHub上是一个好主意，因为它提供了许多优势。除了鼓励协作性，它还提供版本控制，您可以在需要时回滚更改，并跟踪过去对代码库所做的任何更改。在协作过程中，您可以通过查看建议的更改来选择要解决的拉取请求以及要忽略的拉取请求，从而允许您对存储库进行控制。
- en: Getting a module into Ansible
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将模块加入Ansible
- en: 'Ansible modules are hosted in two separate subrepositories of Ansible, namely:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible模块托管在Ansible的两个单独的子存储库中，即：
- en: '`ansible-modules-core`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-modules-core`'
- en: '`ansible-modules-extras`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-modules-extras`'
- en: The module repository, `ansible-modules-core`, contains the most popular modules
    that are shipped with Ansible. These are the core modules that are used most and
    are essential to address basic functionalities of a system. The repository contains
    almost every essential feature required for Ansible to function properly. This
    repository does not take in module submissions directly. However, you can report
    and fix bugs if you come across any.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 模块存储库`ansible-modules-core`包含了与Ansible一起提供的最受欢迎的模块。这些是最常用的核心模块，对于解决系统的基本功能至关重要。该存储库包含了几乎每个Ansible正常运行所需的基本功能。该存储库不直接接受模块提交。但是，如果您遇到任何错误，可以报告并修复错误。
- en: The module repository, `ansible-modules-extras`, is a subset of `ansible-modules`
    that contains modules of a lower priority (that is, modules that cannot be considered
    core modules). New modules are submitted to this repository. Depending on the
    popularity and completeness of the module, a module can be promoted to the core
    modules.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 模块存储库`ansible-modules-extras`是`ansible-modules`的一个子集，其中包含优先级较低的模块（即不能被视为核心模块的模块）。新模块将提交到此存储库。根据模块的受欢迎程度和完整性，模块可以晋升为核心模块。
- en: 'Ansible, being an open source project hosted on GitHub, takes in contributions
    by means of GitHub pull requests. To get your modules into Ansible you need to
    understand how the GitHub pull request works:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 作为托管在GitHub上的开源项目，Ansible通过GitHub拉取请求接受贡献。要将您的模块加入Ansible，您需要了解GitHub拉取请求的工作原理：
- en: Fork the Ansible project from [https://github.com/ansible/ansible-modules-extras](https://github.com/ansible/ansible-modules-extras)
    or [https://github.com/ansible/ansible-modules-core](https://github.com/ansible/ansible-modules-core)
    to your GitHub account.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Ansible项目从[https://github.com/ansible/ansible-modules-extras](https://github.com/ansible/ansible-modules-extras)或[https://github.com/ansible/ansible-modules-core](https://github.com/ansible/ansible-modules-core)分叉到您的GitHub帐户。
- en: File an issue on [https://github.com/ansible/ansible-modules-extras/issues](https://github.com/ansible/ansible-modules-extras/issues)
    or [https://github.com/ansible/ansible-modules-core/issues](https://github.com/ansible/ansible-modules-core/issues)
    for the feature you are tying to address. If you are trying to fix a bug, an issue
    should already exist against the bug. If not, create one and assign it to yourself.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://github.com/ansible/ansible-modules-extras/issues](https://github.com/ansible/ansible-modules-extras/issues)或[https://github.com/ansible/ansible-modules-core/issues](https://github.com/ansible/ansible-modules-core/issues)上为您要解决的功能提交问题。如果您要修复错误，应该已经存在一个针对该错误的问题。如果没有，请创建一个并分配给自己。
- en: Push in your module or the patch to fix a bug against the bug number you just
    created.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将您的模块或修复错误的补丁推送到您刚创建的错误编号。
- en: Raise a pull request to the source repository (that is, Ansible).
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提出一个拉取请求到源存储库（即Ansible）。
- en: Once done, the reviewers will verify the code, review it, and check if it addresses
    the issue. You might receive some reviews or change requests after the review
    that you'll have to fix. There might be multiple iterations before your code gets
    merged.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，审阅人员将验证代码，审查它，并检查它是否解决了问题。审查后，您可能会收到一些评论或更改请求，您需要进行修复。在您的代码合并之前可能会有多次迭代。
- en: If your module or plugin is merged in the Ansible repository, it will be available
    to all Ansible users with the next release.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的模块或插件合并到Ansible存储库中，它将在下一个版本中对所有Ansible用户可用。
- en: Getting plugins into Ansible
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将插件引入Ansible
- en: As discussed in the previous chapter, Ansible plugins are categorized as per
    their function into different groups such as action, callback, lookup, and so
    on. Unlike modules, Ansible plugins are a part of the Ansible repository itself.
    There are no different repositories like extras and core. You can directly open
    an issue in the Ansible repository, discuss it over the mailing list, and put
    up a pull request upon approval.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，Ansible插件根据其功能被分类为不同的组，如操作、回调、查找等。与模块不同，Ansible插件是Ansible存储库本身的一部分。没有像extras和core这样的不同存储库。您可以直接在Ansible存储库中提出问题，在邮件列表上讨论，并在获得批准后提交拉取请求。
- en: 'The following link lists the existing plugins in the Ansible repository:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接列出了Ansible存储库中的现有插件：
- en: '[https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins](https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins](https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins)'
- en: Points to remember
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需要记住的要点
- en: 'When submitting a new module, there are a few things one should keep in mind:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 提交新模块时，有几件事情需要牢记：
- en: Always discuss the feature you are proposing. This will help you save time and
    effort in case the feature is already being worked upon.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终讨论您提出的功能。这将帮助您节省时间和精力，以防该功能已经在进行中。
- en: Not all features you propose will be accepted. There will always be a call on
    the use case and what the module/plugin brings.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并非您提出的所有功能都会被接受。始终会根据用例和模块/插件的带来的价值进行评估。
- en: It's good practice to maintain the module/plugin you have written.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护您编写的模块/插件是一个好的实践。
- en: Be active in picking up and fixing any bugs that are reported against your module.
    This will make your module more reliable.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 积极地解决并修复针对您的模块报告的任何错误。这将使您的模块更加可靠。
- en: Make your module as generic as possible (that is, it should accept user arguments
    and adapt accordingly, providing the user with more flexibility). Although, it
    should focus on one particular task for which it was created. This increases the
    chances of acceptance.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量使您的模块尽可能通用（即，它应该接受用户参数并相应地进行调整，为用户提供更大的灵活性）。尽管如此，它应该专注于创建时的特定任务。这会增加被接受的机会。
- en: Best practices
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: 'By now, you should be both familiar and comfortable working with the Ansible
    Python API. You may even have your own Ansible modules or plugins that you want
    to share with the community. The following are a few best practices you should
    follow when sharing your modules, plugins, and roles with the community:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该已经熟悉并习惯了使用Ansible Python API。您甚至可能拥有自己的Ansible模块或插件，希望与社区分享。在与社区分享您的模块、插件和角色时，您应该遵循以下几项最佳实践：
- en: Always test your module before submitting a pull request.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在提交拉取请求之前始终测试您的模块。
- en: Make your modules as generic as possible.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量使您的模块尽可能通用。
- en: Always document whatever you create, be it a module, plugin, or an Ansible role
    that you share across Galaxy.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终记录您所创建的任何内容，无论是模块、插件还是在Galaxy上共享的Ansible角色。
- en: List down any dependencies explicitly.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 明确列出任何依赖关系。
- en: Keep the discussion going on the mailing list and IRC channels. Being an active
    member gets you more visibility.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在邮件列表和IRC频道上继续讨论。积极参与可以提高您的知名度。
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered topics like configuring your Ansible environment and how
    to get your modules and plugins into the Ansible repository. It also touched upon
    how you can distribute your module through Git. This chapter also introduced you
    to the Galaxy platform, a service provided by Ansible to share your roles. The
    chapter also gave pointers on best practices and various things you should keep
    in mind while submitting your module.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了配置您的Ansible环境以及如何将您的模块和插件放入Ansible存储库的主题。它还涉及了如何通过Git分发您的模块。本章还向您介绍了Galaxy平台，这是Ansible提供的一个服务，用于分享您的角色。本章还提供了最佳实践的指导，并介绍了在提交模块时应该牢记的各种事项。
- en: The next chapter will take you through a series of scenarios where Ansible can
    come in handy. The chapter will also integrate everything that has been covered
    thus far in the previous chapters, combine it all, and present a scenario that
    will give you an idea of how you can use Ansible to its full effect.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将带您通过一系列场景，演示Ansible可以派上用场的情况。本章还将整合前几章所涵盖的内容，将其结合起来，并呈现一个场景，让您了解如何充分利用Ansible。
