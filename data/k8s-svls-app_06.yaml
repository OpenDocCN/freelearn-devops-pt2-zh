- en: Installing Kubernetes in the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在云中安装Kubernetes
- en: 'So far, we have been running Kubernetes on our local machines. This does have
    some drawbacks, one of which is processing power. We are going to start looking
    at some more complex and powerful frameworks, so we need some additional power.
    Because of this, we are going to look at installing Kubernetes on a few different
    public clouds, each time using a different tool:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在本地机器上运行Kubernetes。这确实有一些缺点，其中之一是处理能力。我们将开始研究一些更复杂和强大的框架，因此我们需要一些额外的能力。因此，我们将尝试在几个不同的公共云上安装Kubernetes，每次使用不同的工具：
- en: Launching Kubernetes in DigitalOcean
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DigitalOcean上启动Kubernetes
- en: Launching Kubernetes in AWS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AWS上启动Kubernetes
- en: Launching Kubernetes in Microsoft Azure
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Microsoft Azure上启动Kubernetes
- en: Launching Kubernetes on the Google Cloud Platform
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Google云平台上启动Kubernetes
- en: We will then take a look at the differences between public cloud providers and
    look at installing Kubeless on one of the platforms.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将研究公共云提供商之间的差异，并尝试在其中一个平台上安装Kubeless。
- en: Launching Kubernetes in DigitalOcean
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在DigitalOcean上启动Kubernetes
- en: The first public cloud platform we are going to look at is DigitalOcean. DigitalOcean
    is a little different from the big three we are going to be looking at in the
    following sections as it has fewer features. For example, on the product page
    DigitalOcean has eight features listed, whereas the AWS product page has eighteen
    main areas listed and each of these areas is split into six or more features and
    services.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先研究的公共云平台是DigitalOcean。DigitalOcean与我们将在接下来的章节中研究的三大云平台有所不同，因为它的功能较少。例如，在产品页面上，DigitalOcean列出了八个功能，而AWS产品页面列出了十八个主要领域，每个领域又分为六个或更多的功能和服务。
- en: Don't let this fool you into thinking that DigitalOcean is any less of a service
    than the other public cloud providers we are going to be looking at this in this
    chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 不要因此而认为DigitalOcean比我们在本章中将要研究的其他公共云提供商差。
- en: DigitalOcean's strong point is that it is an extremely simple-to-use hosting
    platform. With its straightforward API and command-line tools, its supporting
    services, and excellent management interface it is easy to bring up powerful yet
    very competitively priced virtual machines in less than a minute.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: DigitalOcean的优势在于它是一个非常简单易用的托管平台。通过其直观的API和命令行工具，支持服务和出色的管理界面，可以在不到一分钟内轻松启动功能强大但价格竞争力极强的虚拟机。
- en: Creating Droplets
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Droplets
- en: Droplets are DigitalOcean's term for its compute resource. For our Kubernetes,
    we are going to be launching three Ubuntu 17.04 Droplets, each with 1 GB of RAM,
    1 CPU, and 30 GB of SSD storage.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Droplets是DigitalOcean对其计算资源的术语。对于我们的Kubernetes，我们将启动三个Ubuntu 17.04 Droplets，每个Droplet配备1GB的RAM，1个CPU和30GB的SSD存储。
- en: This three Droplet cluster, at the time of writing, will cost approximately
    $30 per month to keep online. If you are planning on keeping it online while you
    need it then it will cost $0.045 per hour for the three Droplets.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，这个由三个Droplet组成的集群每月大约需要花费30美元才能保持在线。如果您打算在需要时保持在线，那么这三个Droplets每小时的费用将是0.045美元。
- en: Before you can create any Droplets you will need an account; you can sign up
    for DigitalOcean at [https://cloud.digitalocean.com/registrations/new](https://cloud.digitalocean.com/registrations/new).
    Once you have signed up, and before you do anything else, I recommend that you
    immediately enable two-factor authentication on your account. You can enable this
    on the account security page at [https://cloud.digitalocean.com/settings/security/](https://cloud.digitalocean.com/settings/security/).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在您创建任何Droplets之前，您需要一个帐户；您可以在[https://cloud.digitalocean.com/registrations/new](https://cloud.digitalocean.com/registrations/new)注册DigitalOcean。注册后，在您进行任何其他操作之前，我建议您立即在您的帐户上启用双因素身份验证。您可以在帐户安全页面上启用此功能[https://cloud.digitalocean.com/settings/security/](https://cloud.digitalocean.com/settings/security/)。
- en: Enabling two-factor authentication will give you an additional level of security
    and help protect your account from any unauthorized access and also unexpected
    cost. After all, you don't want someone logging in and using your account to create
    25 of the most expensive Droplets available for them to use as they please with
    you footing the bill.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 启用双因素身份验证将为您提供额外的安全级别，并帮助保护您的帐户免受任何未经授权的访问以及意外费用的影响。毕竟，您不希望有人登录并使用您的帐户创建25个最昂贵的Droplets，并由您来支付账单。
- en: Two-factor authentication works by introducing a second level of authentication
    to your account; typically this is a four- or six-digit code which is either generated
    by an application, such as Google Authenticator, on your mobile device or a text
    message sent by the service you are attempting to log in to. This means that even
    if your password is compromised an attacker still needs access to your mobile
    device or number.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 双因素身份验证通过向您的帐户引入第二级身份验证来工作；通常这是一个由应用程序（如Google Authenticator）在您的移动设备上生成的四位或六位代码，或者是由您尝试登录的服务发送的短信。这意味着即使您的密码被泄露，攻击者仍然需要访问您的移动设备或号码。
- en: Next up, we need to generate an SSH key and upload it to DigitalOcean. If you
    already have an account with an SSH key uploaded, you can skip this task. If you
    don't have a key, then follow the given instructions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要生成一个SSH密钥并将其上传到DigitalOcean。如果您已经有一个带有SSH密钥的帐户，可以跳过此任务。如果您没有密钥，请按照给定的说明操作。
- en: 'If you are using macOS High Sierra or Ubuntu 17.04 then you can run the following
    command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是macOS High Sierra或Ubuntu 17.04，则可以运行以下命令：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will ask you for a location to store your newly generated private and
    public key, and also a passphrase. The passphrase is optional, but it does add
    another layer of security should the private portion of your SSH key fall into
    the wrong hands:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将要求您选择一个位置来存储您新生成的私钥和公钥，以及一个密码。密码是可选的，但如果您的SSH密钥的私有部分落入错误的手中，它确实会增加另一层安全性：
- en: '![](assets/b197999c-a3db-4b61-80f7-8a9967e43614.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b197999c-a3db-4b61-80f7-8a9967e43614.png)'
- en: 'Once you have generated your key, you will need to make a note of the public
    portion of your key. To do this, run the following command, making sure to update
    the path of the key to match your own:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 生成密钥后，您需要记下密钥的公共部分。为此，请运行以下命令，并确保更新密钥路径以匹配您自己的路径：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see something like the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似以下的内容：
- en: '![](assets/6c023c80-d5db-42dd-b09b-82601af14d8e.png)Please make sure you do
    not share or publish the private portion of your SSH key (the file that does not
    contain `.pub` in the filename). This is used to authenticate you against the
    public portion of the key. If this falls into the wrong hands they will be able
    to access your server/services.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/6c023c80-d5db-42dd-b09b-82601af14d8e.png)请确保不要分享或发布您的SSH密钥的私有部分（文件名不包含`.pub`）。这用于对公钥的公共部分进行身份验证。如果这落入错误的手中，他们将能够访问您的服务器/服务。'
- en: 'For Windows 10 Professional users'' odds are that you are using PuTTY as your
    SSH client. If you don''t have PuTTY you can install it using Chocolatey by running
    the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows 10专业版用户来说，你很可能正在使用PuTTY作为你的SSH客户端。如果你没有PuTTY，你可以通过运行以下命令来安装它：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once PuTTY is installed you can open the PuTTYgen program by running the following
    command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦PuTTY安装完成，你可以通过运行以下命令打开PuTTYgen程序：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once open, click on Generate and follow the prompt to move your cursor around
    the blank area. After a second you should have a key generated:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 打开后，点击生成并按照提示在空白区域移动你的光标。一秒钟后，你应该会生成一个密钥：
- en: '![](assets/e9c36baa-2ebd-4faf-8f9b-ce54da273c49.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e9c36baa-2ebd-4faf-8f9b-ce54da273c49.png)'
- en: As you can see from the preceding screenshot, you have the option of adding
    a passphrase, which will be used to unlock the private portion of your key; again,
    this is optional.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，你可以选择添加一个密码，这将用于解锁你的密钥的私有部分；再次强调，这是可选的。
- en: Click on Save public key and also Save private key, and make a note of the contents
    of the public key.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 点击保存公钥，也保存私钥，并记下公钥的内容。
- en: Now that you have your public key we need to let DigitalOcean have a copy. To
    do this, go to the security page, which you can find at  [https://cloud.digitalocean.com/settings/security/](https://cloud.digitalocean.com/settings/security/)
    and click on Add SSH Key. This will pop up a dialog box where you are asked to
    provide the content of your public key and name it. Fill in the two form fields
    and then click on the Add SSH Key button.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了你的公钥，我们需要让DigitalOcean拥有一份副本。为此，转到安全页面，你可以在[https://cloud.digitalocean.com/settings/security/](https://cloud.digitalocean.com/settings/security/)找到它，然后点击添加SSH密钥。这将弹出一个对话框，要求你提供你的公钥内容并命名它。填写两个表单字段，然后点击添加SSH密钥按钮。
- en: Now that you have an SSH key assigned to your account you can use it to create
    your Droplets and have passwordless access to them. To create your Droplets, click
    on the Create button in the top right-hand corner of the screen and select Droplets
    from the drop-down menu.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经为你的账户分配了一个SSH密钥，你可以使用它来创建你的Droplets，并且无需密码即可访问它们。要创建你的Droplets，点击屏幕右上角的创建按钮，然后从下拉菜单中选择Droplets。
- en: 'There are several options on the Droplet creation page:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Droplet创建页面上有几个选项：
- en: 'Choose an image: Select the Ubuntu 16.04 image'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个镜像：选择Ubuntu 16.04镜像
- en: 'Choose a size: Select the $10/mo option, which has 1 GB, 1 CPU, and 30 GB SSD'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个大小：选择每月10美元的选项，其中包括1GB、1CPU和30GB SSD
- en: 'Add block storage: Leave as-is'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加块存储：保持不变
- en: 'Choose a datacenter region: Select the region closest to you; I selected London
    as I am based in the UK'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择数据中心区域：选择离你最近的区域；我选择了伦敦，因为我在英国
- en: 'Select additional options: Select Private networking'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择附加选项：选择私人网络连接。
- en: 'Add your SSH keys: Choose your SSH key'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加你的SSH密钥：选择你的SSH密钥
- en: 'Finalize and create: Increase the number of Droplets to `3` and for now leave
    the hostname as-is'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成并创建：将Droplets的数量增加到`3`，现在保持主机名不变
- en: 'Once you have filled out the preceding sections, click on the Create button
    at the bottom of the page. This will launch your three Droplets and give you feedback
    on how far through the creation process they are. Once they have launched, you
    should see something similar to the following page:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 填写完前面的部分后，点击页面底部的创建按钮。这将启动你的三个Droplets，并向你反馈它们创建过程的进度。一旦它们启动，你应该会看到类似以下页面的内容：
- en: '![](assets/bef96a2d-ae01-4683-946b-4bf519107cbb.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bef96a2d-ae01-4683-946b-4bf519107cbb.png)'
- en: As you can see, I have three Droplets, their IP addresses, and a nice little
    motivational message. Now we can start deploying our Kubernetes cluster using
    `kubeadm`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我有三个Droplets，它们的IP地址，还有一条很好的激励性信息。现在我们可以开始使用`kubeadm`部署我们的Kubernetes集群。
- en: Deploying Kubernetes using kubeadm
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用kubeadm部署Kubernetes
- en: 'First of all, we need to log in to one of our three Droplets; the first machine
    we log into will be our Kubernetes master:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要登录到我们的三个Droplets中的一个；我们登录的第一台机器将是我们的Kubernetes主节点。
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once logged in, the following two commands check for any updates to the packages
    and apply them:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，以下两个命令检查软件包是否有更新并应用它们：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we are up-to-date we can install the prerequisite packages. To do
    this run the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经是最新的了，我们可以安装先决条件软件包。要做到这一点，请运行以下命令：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You may notice that we are using the version of Docker that is distributed as
    part of the core Ubuntu 16.04 package repositories rather than the official Docker
    release. This is because `kubeadm` doesn't have official support for newer versions
    of Docker and the recommended version is 1.12\. At present, the version of Docker
    supported by Ubuntu 16.04 is 1.12.6.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会注意到，我们使用的是作为核心Ubuntu 16.04软件包存储库的一部分分发的Docker版本，而不是官方的Docker发布版。这是因为`kubeadm`不支持更新版本的Docker，并且推荐的版本是1.12。目前，Ubuntu
    16.04支持的Docker版本是1.12.6。
- en: 'Now that we have the prerequisites installed we can add the Kubernetes repository
    by running the following commands:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了先决条件，我们可以通过运行以下命令来添加Kubernetes存储库：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `curl` command adds the GPG key for the repository and the `cat` command
    creates the repository file. Now that the repository is in place we need to update
    our package list and install `kubeadm`, `kubelet`, and `kubectl` by running the
    following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`curl`命令为存储库添加了GPG密钥，`cat`命令创建了存储库文件。现在存储库已经就位，我们需要通过运行以下命令更新我们的软件包列表并安装`kubeadm`、`kubelet`和`kubectl`：'
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once installed, you can check the version of `kubeadm` that was installed by
    running the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以通过运行以下命令来检查已安装的`kubeadm`的版本：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now that we have everything we need installed we can bootstrap our Kubernetes
    master node by running the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所需的一切，我们可以通过运行以下命令来引导我们的Kubernetes主节点：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will take a few minutes to run and you will get some quite verbose output
    letting you know what tasks `kubeadm` has completed:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要几分钟的时间运行，并且您将得到一些非常冗长的输出，让您知道`kubeadm`已经完成了哪些任务：
- en: '![](assets/ce95dd39-8086-4fca-97fb-f99503f2083e.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ce95dd39-8086-4fca-97fb-f99503f2083e.png)'
- en: 'Once complete you should see the following message, but with your tokens and
    so on:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您应该看到以下消息，但是带有您的令牌等：
- en: '![](assets/936836b4-047f-4bb9-8d89-1bb205a6dbd2.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/936836b4-047f-4bb9-8d89-1bb205a6dbd2.png)'
- en: 'Make a note of the `kubeadm join` command at the bottom, we will look at that
    shortly. We should run the commands mentioned in the message:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 记下底部的`kubeadm join`命令，我们很快会看到它。我们应该运行消息中提到的命令：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we need to enable pod networking. There are several options you can choose
    from, all of which provide multihost container networking for your Kubernetes
    cluster:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要启用Pod网络。您可以选择几种选项，所有这些选项都为您的Kubernetes集群提供了多主机容器网络：
- en: '**Calico**: [https://www.projectcalico.org/](https://www.projectcalico.org/)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Calico: [https://www.projectcalico.org/](https://www.projectcalico.org/)'
- en: '**Canal**: [https://github.com/projectcalico/canal](https://github.com/projectcalico/canal)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Canal: [https://github.com/projectcalico/canal](https://github.com/projectcalico/canal)'
- en: '**flannel**: [https://coreos.com/flannel/docs/latest/](https://coreos.com/flannel/docs/latest/)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'flannel: [https://coreos.com/flannel/docs/latest/](https://coreos.com/flannel/docs/latest/)'
- en: '**Kube-router**: [https://github.com/cloudnativelabs/kube-router/](https://github.com/cloudnativelabs/kube-router/)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Kube-router: [https://github.com/cloudnativelabs/kube-router/](https://github.com/cloudnativelabs/kube-router/)'
- en: '**Romana**: [https://github.com/romana/romana/](https://github.com/romana/romana/)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Romana: [https://github.com/romana/romana/](https://github.com/romana/romana/)'
- en: '**Weave Net**: [https://www.weave.works/oss/net/](https://www.weave.works/oss/net/)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Weave Net: [https://www.weave.works/oss/net/](https://www.weave.works/oss/net/)'
- en: 'For our installation we are going to be using Weave Net. To install this simply
    run the following commands:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的安装，我们将使用Weave Net。要安装它，只需运行以下命令：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](assets/858ea84d-5030-443e-826d-d4bfbc749475.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/858ea84d-5030-443e-826d-d4bfbc749475.png)'
- en: As you can see, this used the `kubectl` command to deploy the pod networking.
    This means that we have our basic Kubernetes cluster up-and-running, albeit on
    a single node.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这使用了`kubectl`命令来部署pod网络。这意味着我们的基本Kubernetes集群已经运行起来了，尽管只在单个节点上。
- en: 'To prepare the other two cluster nodes, open an SSH session for both and run
    the following commands on them both:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备其他两个集群节点，打开两者的SSH会话，并在两者上运行以下命令：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you can see, these are the exact set of commands we executed on the master
    node to get us to the point where we can execute the `kubeadm` command. As you
    may have already guessed, rather than running `kubeadm init` we are going to be
    running the `kubeadm join` command we received when we initialized our master
    node. For me that command was as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这些是我们在主节点上执行的确切一组命令，使我们能够执行`kubeadm`命令的命令。您可能已经猜到，我们将运行我们初始化主节点时收到的`kubeadm
    join`命令，而不是运行`kubeadm init`。对我来说，该命令如下：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You will need to run the command you received, as the tokens will be tied to
    your master node. Run the command on both nodes and you should see something like
    the following Terminal output:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要运行收到的命令，因为令牌将绑定到您的主节点。在两个节点上运行该命令，您应该会看到类似以下终端输出的内容：
- en: '![](assets/2b0ecfd2-6df2-4b0f-9870-f26c3e4199c1.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2b0ecfd2-6df2-4b0f-9870-f26c3e4199c1.png)'
- en: 'Once you have run the command on both of your remaining nodes, return to your
    master node and run the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在剩余的两个节点上运行了该命令，请返回到您的主节点并运行以下命令：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This should return a list of the nodes within your Kubernetes cluster:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该返回您的Kubernetes集群中的节点列表：
- en: '![](assets/87ad7e15-3fad-4c30-9a97-d80053b3b240.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/87ad7e15-3fad-4c30-9a97-d80053b3b240.png)'
- en: As you can see, we have a cluster made up of our three Droplets. The only downside
    is that at present we have to log in to our master node to interact with our cluster.
    Luckily this is easy to resolve, we just need to download a copy of the cluster
    `admin.conf` file.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有一个由三个Droplets组成的集群。唯一的缺点是，目前我们必须登录到我们的主节点才能与我们的集群交互。幸运的是，这很容易解决，我们只需要下载集群`admin.conf`文件的副本。
- en: 'To do this on macOS High Sierra or Ubuntu 17.04 run the following command,
    making sure to replace the IP address with that of your master node:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要在macOS High Sierra或Ubuntu 17.04上执行此操作，请运行以下命令，确保将IP地址替换为您的主节点的IP地址：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you are using Windows 10 Professional you will need to use a program such
    as WinSCP. To install this run the following command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是Windows 10专业版，您将需要使用诸如WinSCP之类的程序。要安装它，请运行以下命令：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Once installed, launch it by typing `WINSCP.exe` and then follow the on-screen
    prompts to connect to your master node and download the `admin.conf` file, which
    can be found in `/etc/kubernetes/`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，通过输入`WINSCP.exe`来启动它，然后按照屏幕提示连接到您的主节点并下载`admin.conf`文件，该文件位于`/etc/kubernetes/`中。
- en: 'Once you have a copy of the `admin.conf` file you will be able to run the following
    command locally to see your three-node Kubernetes cluster:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了`admin.conf`文件的副本，您就可以在本地运行以下命令来查看您的三节点Kubernetes集群：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once we have confirmed that we can connect using our local copy of `kubectl`
    we should put the configuration file in place, so we don''t have to use the `--kubeconfig`
    flag each time. To do this run the following commands (macOS and Ubuntu only):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确认可以使用本地的`kubectl`副本连接，我们应该将配置文件放在适当的位置，这样我们就不必每次使用`--kubeconfig`标志。要做到这一点，请运行以下命令（仅适用于macOS和Ubuntu）：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now run the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行以下命令：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This should show your three Droplets:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该显示您的三个Droplets：
- en: '![](assets/a370c935-481e-482d-9067-0c81b33b6239.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a370c935-481e-482d-9067-0c81b33b6239.png)'
- en: Removing the cluster
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除集群
- en: To remove the cluster, simply log in to your DigitalOcean control panel and
    click on the Destroy link, which can be found in the More drop-down menu to the
    right of each Droplet. Follow the on-screen instructions from there. Make sure
    you destroy all three Droplets as they will be incurring cost while they are online.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除集群，只需登录到您的DigitalOcean控制面板，然后单击每个Droplet右侧的更多下拉菜单中的销毁链接。然后按照屏幕上的说明进行操作。确保销毁所有三个Droplets，因为它们在线时会产生费用。
- en: This has been a manual deployment of Kubernetes on low-spec servers. In the
    next few sections, we are going to look at how to deploy Kubernetes in other public
    clouds, starting with AWS.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在低规格服务器上手动部署Kubernetes。在接下来的几节中，我们将看看如何在其他公共云中部署Kubernetes，首先是AWS。
- en: Launching Kubernetes in AWS
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS中启动Kubernetes
- en: There are several tools we can use to launch a Kubernetes cluster on AWS; we
    are going to be covering one called `kube-aws`. Unfortunately, `kube-aws` does
    not support Windows-based machines so the following instructions will only apply
    to macOS High Sierra and Ubuntu 17.04.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用几种工具在AWS上启动Kubernetes集群；我们将介绍一个叫做`kube-aws`的工具。不幸的是，`kube-aws`不支持基于Windows的机器，因此以下说明只适用于macOS
    High Sierra和Ubuntu 17.04。
- en: '`kube-aws` is a command-line tool that is used to generate an AWS CloudFormation
    template, which is then used to launch and manage a CoreOS cluster. Kubernetes
    is then deployed to the cluster of CoreOS instances.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`kube-aws`是一个命令行工具，用于生成AWS CloudFormation模板，然后用于启动和管理CoreOS集群。然后将Kubernetes部署到CoreOS实例的集群中。'
- en: AWS CloudFormation is Amazon's native scripting tool and allows you to programmatically
    launch AWS services; it covers pretty much all of the AWS API. CoreOS is an operating
    system that is focused on one thing, running containers. It has an extremely small
    footprint and is designed to be clustered and configured on cloud providers out-of-the-box.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudFormation是亚马逊的本地脚本工具，允许您以编程方式启动AWS服务；它几乎涵盖了所有AWS API。CoreOS是一个专注于运行容器的操作系统。它的占用空间极小，并且设计为可以在云提供商上直接进行集群和配置。
- en: Getting set up
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'In [Chapter 1](37d92482-56fd-4329-8b81-01acc97e9c0c.xhtml), *The Serverless
    Landscape*, we looked at creating a Lambda function. To configure this we installed
    the AWS CLI. I am going to assume that you still have this configured and the
    IAM user you have configured has administrator privileges. You can test this by
    running the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](37d92482-56fd-4329-8b81-01acc97e9c0c.xhtml)中，*无服务器景观*，我们看了一下创建Lambda函数。为了配置这个，我们安装了AWS
    CLI。我假设您仍然配置了这个，并且您配置的IAM用户具有管理员权限。您可以通过运行以下命令来测试：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This should return something like the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该返回类似以下内容：
- en: '![](assets/4a459583-2e01-466f-b259-998be9d081cb.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4a459583-2e01-466f-b259-998be9d081cb.png)'
- en: We need to import our SSH key in to AWS. To do this, open the AWS Console ([https://console.aws.amazon.com/](https://console.aws.amazon.com/)).
    Once logged in, select EC2 from the Service menu at the top of the page. Once
    you are on the EC2 page, make sure you have the correct region selected by using
    the region drop-down menu in the top-right corner of the page. I am going to be
    using EU (Ireland), which is also known as eu-west-1.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将我们的SSH密钥导入AWS。要做到这一点，打开AWS控制台（[https://console.aws.amazon.com/](https://console.aws.amazon.com/)）。登录后，从页面顶部的服务菜单中选择EC2。一旦您进入EC2页面，请确保使用页面右上角的区域下拉菜单选择了正确的区域。我将使用欧盟（爱尔兰）,也就是eu-west-1。
- en: Now that we are in the correct region click on the Key Pairs option, which can
    be found under the NETWORK & SECURITY section in the left-hand menu. Once the
    page loads, click on the Import Key Pair button and then, like DigitalOcean, enter
    the name of your key pair and enter the contents of your `id_rsa.pub` file in
    there.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在正确的区域，点击密钥对选项，在左侧菜单的NETWORK & SECURITY部分下可以找到。页面加载后，点击导入密钥对按钮，然后像DigitalOcean一样，输入您的密钥对的名称，并在其中输入您的`id_rsa.pub`文件的内容。
- en: 'Next up, we need an AWS KMS store. To create this, run the following command,
    making sure to update your region as required:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个AWS KMS存储。要创建这个，运行以下命令，确保根据需要更新您的区域：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This will return several pieces of information, including an **Amazon Resource
    Name** (**ARN**). Make a note of this and also the `KeyId`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回几个信息，包括一个Amazon资源名称（ARN）。记下这个信息以及`KeyId`：
- en: '![](assets/fe0b72a4-0a71-4b9b-b749-5b8f6c8f4231.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fe0b72a4-0a71-4b9b-b749-5b8f6c8f4231.png)'
- en: 'Next up, we need an Amazon S3 bucket. To create one using the AWS CLI run the
    following command, making sure to update the region, and also make the bucket
    name unique to you:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个Amazon S3存储桶。使用AWS CLI运行以下命令来创建一个，确保更新区域，并且使存储桶名称对您来说是唯一的：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](assets/597991ee-ed09-4578-9ecf-fa5e501e515b.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/597991ee-ed09-4578-9ecf-fa5e501e515b.png)'
- en: Now that we have our public SSH key imported, a KMS ARN, and an S3 bucket, we
    just need to decide on a DNS name for our cluster.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经导入了我们的公共SSH密钥，有了KMS ARN和一个S3存储桶，我们只需要决定集群的DNS名称。
- en: I am going to be using `kube.mckendrick.io` for mine as I have `mckendrick.io`
    already hosted on the Amazon Route 53 DNS service. You should choose a domain
    or subdomain you can configure a CNAME on, or one that is hosted on Route 53.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用`kube.mckendrick.io`，因为我已经在Amazon Route 53 DNS服务上托管了`mckendrick.io`。您应该选择一个可以在其上配置CNAME的域或子域，或者一个托管在Route
    53上的域。
- en: 'Now that we have the basics covered we need to install the `kube-aws` binary.
    To do this, if you are running macOS High Sierra you simply need to run the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经掌握了基础知识，我们需要安装`kube-aws`二进制文件。要做到这一点，如果您正在运行macOS High Sierra，您只需要运行以下命令：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you are running Ubuntu Linux 17.04 you should run the following:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行Ubuntu Linux 17.04，您应该运行以下命令：
- en: '[PRE25]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Once installed, run the following command to confirm that everything is OK:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，运行以下命令确认一切正常：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'At the time of writing the current version is 0.9.8\. You can check for newer
    versions on the release page at: [https://github.com/kubernetes-incubator/kube-aws/releases/](https://github.com/kubernetes-incubator/kube-aws/releases/).'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，当前版本为0.9.8。您可以在发布页面上检查更新版本：[https://github.com/kubernetes-incubator/kube-aws/releases/](https://github.com/kubernetes-incubator/kube-aws/releases/)。
- en: Launching the cluster using kube-aws
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用kube-aws启动集群
- en: 'Before we start to create the cluster configuration, we need to create a working
    directory, as there are going to be a few artifacts created. Let''s create a folder
    called `kube-aws-cluster` and change to it:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始创建集群配置之前，我们需要创建一个工作目录，因为将会创建一些工件。让我们创建一个名为`kube-aws-cluster`的文件夹并切换到它：
- en: '[PRE27]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now we are in our working directory we can create our cluster configuration
    file. To do this run the following command, making sure to replace the values
    with the information you gathered in the previous section:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在我们的工作目录中，我们可以创建我们的集群配置文件。要做到这一点，运行以下命令，确保用之前部分收集的信息替换值：
- en: If you are not using a Route 53-hosted domain, remove the `--hosted-zone-id`
    flag.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有使用Route 53托管的域，删除`--hosted-zone-id`标志。
- en: '[PRE28]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This will create a file called `cluster.yaml`, which will be the base of our
    configuration:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`cluster.yaml`的文件，这将是我们配置的基础：
- en: '![](assets/ab65345d-4e0d-470c-ac19-a7c47f1bf46d.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ab65345d-4e0d-470c-ac19-a7c47f1bf46d.png)'
- en: 'Next, we need to create the certificates that will be used by our Kubernetes
    cluster. To do this run the following command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建将被我们的Kubernetes集群使用的证书。要做到这一点，请运行以下命令：
- en: '[PRE29]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![](assets/a44dd8df-779c-4e89-8153-51d7e1464682.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a44dd8df-779c-4e89-8153-51d7e1464682.png)'
- en: 'Next up, we need to generate the AWS CloudFormation templates. To do this run
    the following command:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要生成AWS CloudFormation模板。要做到这一点，请运行以下命令：
- en: '[PRE30]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This will create the templates in a folder called `stack-templates`:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在名为`stack-templates`的文件夹中创建模板：
- en: '![](assets/40ead830-2614-469f-a53d-119bf97b05fa.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/40ead830-2614-469f-a53d-119bf97b05fa.png)'
- en: 'Running `ls` in your working directory should show you that several files and
    folders have been created:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的工作目录中运行`ls`应该会显示已创建的几个文件和文件夹：
- en: '![](assets/24c33f41-0a38-4dca-ae0f-8ec08b844605.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/24c33f41-0a38-4dca-ae0f-8ec08b844605.png)'
- en: 'Finally, we can run the following command to validate and upload the files
    to our S3 bucket, remembering to update the bucket name with your own:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以运行以下命令来验证并上传文件到我们的S3存储桶，记得用您自己的存储桶名称更新命令：
- en: '[PRE31]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now we can launch our cluster. To do this simply run the following command,
    again making sure you update the bucket name:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以启动我们的集群。要做到这一点，只需运行以下命令，确保您更新存储桶名称：
- en: '[PRE32]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This will start to launch our cluster using the AWS CloudFormation tool:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这将开始使用AWS CloudFormation工具启动我们的集群：
- en: '![](assets/316018ed-2bd7-4db0-87c5-d1b4f760b448.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/316018ed-2bd7-4db0-87c5-d1b4f760b448.png)'
- en: 'This process will take several minutes; you can view its progress on the command
    line within the AWS Console. To view it in the Console go to the Services menu
    and select CloudFormation. Once open, you should see a few stacks listed; select
    one of them and then click on the Events tab:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程将需要几分钟；您可以在AWS控制台的命令行上查看其进度。要在控制台中查看它，请转到服务菜单并选择CloudFormation。一旦打开，您应该会看到列出的一些堆栈；选择其中一个，然后单击事件选项卡：
- en: '![](assets/a43c7b15-c7a5-4922-99c2-9dad09494263.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a43c7b15-c7a5-4922-99c2-9dad09494263.png)'
- en: 'As you can see from the Events and also Resources tabs, there is a lot going
    on in the background. There are: IAM roles, VPCs and networking, EC2 instances,
    Load Balancers, DNS updates, auto scaling groups, and more being created.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 从事件和资源选项卡中可以看出，后台有很多事情正在进行。有：IAM角色、VPC和网络、EC2实例、负载均衡器、DNS更新、自动缩放组等正在创建。
- en: 'Once it has finished, you should see three CloudFormation stacks, one main
    one called `kube-aws-cluster` and two nested stacks, one called `kube-aws-cluster-Controlplane`
    and the other `kube-aws-cluster-Nodepool1`. Both of the nested stacks will have
    a unique ID appended to their name. You will receive confirmation that your cluster
    has launched on the command line:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，您应该会看到三个CloudFormation堆栈，一个主要的称为`kube-aws-cluster`，另外两个嵌套堆栈，一个称为`kube-aws-cluster-Controlplane`，另一个称为`kube-aws-cluster-Nodepool1`。两个嵌套堆栈都将在其名称后附加一个唯一的ID。您将在命令行上收到集群已启动的确认：
- en: '![](assets/98e7b4a3-7a9b-417a-a464-994ae2edf13e.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/98e7b4a3-7a9b-417a-a464-994ae2edf13e.png)'
- en: 'Running the following command in our working directory will list the nodes
    within our AWS Kubernetes cluster:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的工作目录中运行以下命令将列出AWS Kubernetes集群中的节点：
- en: '[PRE33]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![](assets/0eb190c5-9323-4914-97d9-1574311e8040.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0eb190c5-9323-4914-97d9-1574311e8040.png)'
- en: The Sock Shop
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sock Shop
- en: 'To test our deployment we can launch the Sock Shop. This is a demo microservice
    application written by Weave. You can find its project page at: [https://microservices-demo.github.io/](https://microservices-demo.github.io/).'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试我们的部署，我们可以启动Sock Shop。这是由Weave编写的演示微服务应用程序。您可以在以下项目页面找到它：[https://microservices-demo.github.io/](https://microservices-demo.github.io/)。
- en: 'To launch the shop, we need to run the following commands from within our working
    directory:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动商店，我们需要从工作目录中运行以下命令：
- en: '[PRE34]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'It will take a few minutes to launch; you can check the progress by running
    the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 启动需要几分钟的时间；您可以通过运行以下命令来检查进度：
- en: '[PRE35]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Wait for each pod to gain a status of running, as seen in the following screenshot:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 等待每个pod获得运行状态，如下截图所示：
- en: '![](assets/19341b3e-32db-423a-bdac-fc55e4c1d07f.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/19341b3e-32db-423a-bdac-fc55e4c1d07f.png)'
- en: 'Then, we should be able to access our application. To do this we will need
    to expose it to the internet. As we have our cluster in AWS we can use the following
    command to launch an Elastic Load Balancer and have it point to our application:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们应该能够访问我们的应用程序。要做到这一点，我们需要将其暴露给互联网。由于我们的集群在AWS中，我们可以使用以下命令启动一个弹性负载均衡器，并让它指向我们的应用程序：
- en: '[PRE36]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'To get information on our Load Balancer we can run the following:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关我们的负载均衡器的信息，我们可以运行以下命令：
- en: '[PRE37]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '![](assets/7613f52d-97c2-4551-8899-571b25b58e6d.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7613f52d-97c2-4551-8899-571b25b58e6d.png)'
- en: 'As you can see, the application is being exposed on port `8079`, but we cannot
    quite see the Elastic Load Balancer URL. To get this we can run the following:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，应用程序正在端口`8079`上暴露，但我们无法完全看到弹性负载均衡器的URL。要获得这个，我们可以运行以下命令：
- en: '[PRE38]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '![](assets/a2ccd721-20a5-43ad-bba0-6165121ce8d2.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a2ccd721-20a5-43ad-bba0-6165121ce8d2.png)'
- en: Now that we know the URL of the Elastic Load Balancer we can enter it, along
    with the port, into our browser. For me, the full URL was `http://a47ecf69fc71411e7974802a5d74b8ec-130999546.eu-west-1.elb.amazonaws.com:8079/`
    (this URL is no longer active).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了弹性负载均衡器的URL，我们可以将其输入到浏览器中，以及端口。对我来说，完整的URL是`http://a47ecf69fc71411e7974802a5d74b8ec-130999546.eu-west-1.elb.amazonaws.com:8079/`（此URL已不再有效）。
- en: 'Entering your URL should show you the following page:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 输入您的URL应该显示以下页面：
- en: '![](assets/13595402-f23d-478e-b25f-39e2acbc7f9c.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/13595402-f23d-478e-b25f-39e2acbc7f9c.png)'
- en: 'To remove the Sock Shop application simply run:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除Sock Shop应用程序，只需运行：
- en: '[PRE39]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This will remove all of the pods, services, and the Elastic Load Balancer we
    created.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这将删除我们创建的所有pod、服务和弹性负载均衡器。
- en: Removing the cluster
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除集群
- en: 'Let''s not forget that while the cluster is up-and-running it is costing us
    money. To remove the cluster and all of the services created by the CloudFormation
    scripts run the following command:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们不要忘记，当集群正在运行时，它会花费我们的钱。要删除集群和CloudFormation脚本创建的所有服务，请运行以下命令：
- en: '[PRE40]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You will receive confirmation that the CloudFormation stacks are being removed,
    and that it will take several minutes. I recommend that you double-check in the
    AWS console on the CloudFormation page to ensure that there have not been any
    errors during the removal of the stacks, as any resources that are left running
    may incur costs.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您将收到确认，CloudFormation堆栈正在被移除，并且这将需要几分钟的时间。我建议您在AWS控制台上的CloudFormation页面上进行双重检查，以确保在移除堆栈过程中没有出现任何错误，因为任何仍在运行的资源可能会产生费用。
- en: 'We also need to remove the S3 bucket we created and also the KMS; to do this
    run the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要删除我们创建的S3存储桶和KMS；要做到这一点，请运行以下命令：
- en: '[PRE41]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: You can find the `--key-id` from the note you made when we first created the
    KMS earlier in this section.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在本节早期创建KMS时所做的备注中找到`--key-id`。
- en: While we didn't have to manually configure our cluster, or in fact to log in
    to any servers this time, the process of launching our cluster was still very
    manual. For our next public cloud provider, Microsoft Azure, we are going to be
    looking at a more native deployment.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这次我们不必手动配置我们的集群，或者实际上登录到任何服务器，但启动我们的集群的过程仍然是非常手动的。对于我们的下一个公共云提供商Microsoft
    Azure，我们将会看到更本地的部署。
- en: Launching Kubernetes in Microsoft Azure
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Microsoft Azure中启动Kubernetes
- en: In [Chapter 1](37d92482-56fd-4329-8b81-01acc97e9c0c.xhtml), *The Serverless
    Landscape*, we looked at Microsoft Azure Functions; however, we did not progress
    much further than the Azure web interface to launch our Function. To use the **Azure
    Container Service** (**AKS**) we will need to install the Azure command-line client.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](37d92482-56fd-4329-8b81-01acc97e9c0c.xhtml)中，《无服务器景观》，我们看了微软Azure Functions；然而，我们没有进展到比Azure
    web界面更多的地方来启动我们的Function。要使用**Azure容器服务**（**AKS**），我们需要安装Azure命令行客户端。
- en: It is also worth pointing out at this time that the AKS does not currently support
    the Windows 10 PowerShell Azure tools. However, if you are using Windows do not
    worry, as the Linux version of the command-line client is available through the
    Azure web interface.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，AKS目前不支持Windows 10 PowerShell Azure工具。但是，如果您使用Windows，不用担心，因为命令行客户端的Linux版本可以通过Azure
    web界面获得。
- en: Preparing the Azure command-line tools
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备Azure命令行工具
- en: 'The Azure command-line tools are available through Homebrew on macOS High Sierra,
    which makes installing as easy as running the following two commands:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Azure命令行工具可以通过macOS High Sierra上的Homebrew获得，这样安装就像运行以下两个命令一样简单：
- en: '[PRE42]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Ubuntu 17.04 users can run the following commands:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 17.04用户可以运行以下命令：
- en: '[PRE43]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Once installed you need to log in to your account. To do this run the following:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您需要登录您的账户。要做到这一点，运行以下命令：
- en: '[PRE44]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: When you run the command you will be given a URL, which is [https://aka.ms/devicelogin](https://aka.ms/devicelogin),
    [and also a code to enter. Open the URL in your browser and enter the code:](https://aka.ms/devicelogin)
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行该命令时，您将获得一个URL，即[https://aka.ms/devicelogin](https://aka.ms/devicelogin)，[还有一个要输入的代码。在浏览器中打开URL并输入代码：](https://aka.ms/devicelogin)
- en: '![](assets/62006a27-067a-4a96-9e0c-6092f9bc0294.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/62006a27-067a-4a96-9e0c-6092f9bc0294.png)'
- en: 'Once logged in, close your browser window and return to the command line, where
    after a few seconds you will receive confirmation that you are logged in as the
    user you logged into the browser with. You can double-check this by running the
    following command:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，关闭浏览器窗口并返回到命令行，在几秒钟后，您将收到确认消息，说明您已经以您在浏览器中登录的用户身份登录。您可以通过运行以下命令来再次检查：
- en: '[PRE45]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'As mentioned, Windows users can access their own bash shell using the Azure
    web interface. To do this, log in and click on the >_ icon in the top menu bar,
    select bash shell, and then follow the on-screen prompts. At the end of the setup
    you should see something like the following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Windows用户可以使用Azure web界面访问他们自己的bash shell。要做到这一点，登录并点击顶部菜单栏中的>_图标，选择bash
    shell，然后按照屏幕提示操作。在设置结束时，您应该看到类似以下内容：
- en: '![](assets/dc2439b3-2e32-4cd6-8a0e-c800d832a281.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dc2439b3-2e32-4cd6-8a0e-c800d832a281.png)'
- en: Now we have the command-line tools up, installed, and connected to our account
    we can launch our Kubernetes cluster.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装并连接到我们的账户的命令行工具，我们可以启动我们的Kubernetes集群。
- en: Launching the AKS cluster
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动AKS集群
- en: 'First of all, we need to register for the AKS service. To do this run the following
    command:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要注册AKS服务。要做到这一点，运行以下命令：
- en: '[PRE46]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'It will take a few minutes for the registration to complete. You can check
    on the status of the registration by running the following:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 注册需要几分钟的时间。您可以通过运行以下命令来检查注册的状态：
- en: '[PRE47]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Once you see a `registrationState` of `Registered` you are good to go. To launch
    the cluster, we need to first create a resource group and then create the cluster.
    At present, AKS is available in either `ukwest` or `westus2`:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦看到`registrationState`为`Registered`，您就可以开始了。要启动集群，我们首先需要创建一个资源组，然后创建集群。目前，AKS在`ukwest`或`westus2`都可用：
- en: '[PRE48]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Once your cluster has launched you can run the following command to configure
    your local copy of `kubectl` to authenticate against the cluster:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的集群启动，您可以运行以下命令配置您的本地`kubectl`副本以对集群进行身份验证：
- en: '[PRE49]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Finally, you can now run the following to start interacting with your cluster
    as you would any other Kubernetes cluster:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您现在可以运行以下命令，开始与您的集群进行交互，就像与任何其他Kubernetes集群一样：
- en: '[PRE50]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '![](assets/2f217bab-7462-4f5e-8f09-6db19ed0e273.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2f217bab-7462-4f5e-8f09-6db19ed0e273.png)'
- en: 'You will notice that we only have a single node; we can add two more nodes
    by running the following:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们只有一个节点；我们可以通过运行以下命令添加另外两个节点：
- en: '[PRE51]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '![](assets/de2de76c-c091-4475-a503-ea5295fbbf4d.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/de2de76c-c091-4475-a503-ea5295fbbf4d.png)'
- en: 'You should be able to see all of the resources that have been launched in the
    Azure web interface:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够在Azure Web界面中看到所有已启动的资源：
- en: '![](assets/c2ea31e2-e863-431b-b43f-5833a66b4bff.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c2ea31e2-e863-431b-b43f-5833a66b4bff.png)'
- en: Now that we have three nodes in our cluster, let's launch the *Sock Shop demo*
    app.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的集群中有三个节点，让我们启动*Sock Shop demo*应用程序。
- en: The Sock Shop
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 袜店
- en: 'The commands are slightly different to the ones we ran before, as we do not
    have to supply a configuration file for `kubectl`:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令与我们之前运行的命令略有不同，因为我们不必为`kubectl`提供配置文件：
- en: '[PRE52]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Again, you can check the status of the pods by running the following:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，您可以通过运行以下命令来检查pod的状态：
- en: '[PRE53]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Once all of the pods are running you can expose the application by running
    the following:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有的pod都在运行，您可以通过运行以下命令暴露应用程序：
- en: '[PRE54]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '![](assets/7b2c4723-430f-431e-9215-7c0b36174e3e.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7b2c4723-430f-431e-9215-7c0b36174e3e.png)'
- en: 'This should give you a port and IP address. As you can see from the preceding
    output, this gave me a URL of `http://51.141.28.140:8079/`, putting this into
    my browser displayed the Sock Shop application:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该给您一个端口和IP地址。从前面的输出中可以看出，这给了我一个URL `http://51.141.28.140:8079/`，将其放入浏览器中显示了Sock
    Shop应用程序。
- en: '![](assets/917aa4e5-b3b1-464b-b915-f3dc80e22132.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/917aa4e5-b3b1-464b-b915-f3dc80e22132.png)'
- en: 'To remove the application I just needed to run:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除应用程序，我只需要运行：
- en: '[PRE55]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Removing the cluster
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除集群
- en: 'As per the other cloud services, while your AKS nodes are online you will be
    charged by the hour. Once you have finished with the cluster you simply need to
    remove the resource group; this will delete all of the associated services:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他云服务一样，当您的AKS节点在线时，将按小时收费。完成集群后，您只需删除资源组；这将删除所有相关的服务：
- en: '[PRE56]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Once deleted, go to the Azure web interface and manually delete any other remaining
    resources/services. The next and final public cloud we are going to look at is
    Google Cloud.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 删除后，转到Azure Web界面，并手动删除任何其他剩余的资源/服务。我们接下来要看的下一个和最后一个公共云是Google Cloud。
- en: Launching Kubernetes on the Google Cloud Platform
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Google Cloud平台上启动Kubernetes
- en: As you would expect, Kubernetes is supported natively on Google Cloud. Before
    progressing, you will need an account, which you can sign up for at [http://cloud.google.com/](http://cloud.google.com/).
    Once you have your account set up, similar to the other public cloud platforms
    we have been looking at in this chapter, we need to configure the command-line
    tools.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所期望的，Kubernetes在Google Cloud上得到了原生支持。在继续之前，您需要一个帐户，您可以在[http://cloud.google.com/](http://cloud.google.com/)注册。一旦您设置好了您的帐户，类似于本章中我们一直在研究的其他公共云平台，我们需要配置命令行工具。
- en: Installing the command-line tools
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装命令行工具
- en: 'There are installers for all three operating systems. If you are using macOS
    High Sierra then you can use Homebrew and Cask to install the Google Cloud SDK
    by running the following:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 所有三个操作系统都有安装程序。如果您使用的是macOS High Sierra，则可以使用Homebrew和Cask通过运行以下命令安装Google Cloud
    SDK：
- en: '[PRE57]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Windows 10 Professional users can use Chocolatey and run the following:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 10专业版用户可以使用Chocolatey并运行以下命令：
- en: '[PRE58]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Finally, Ubuntu 17.04 users will need to run the following:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Ubuntu 17.04用户需要运行以下命令：
- en: '[PRE59]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Once installed, you need to sign into your account by running the following:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您需要通过运行以下命令登录到您的帐户：
- en: '[PRE60]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This will open your browser and ask you to sign into your Google Cloud account.
    Once signed in, you will be asked to grant the Google Cloud SDK permission to
    access your account. Follow the on-screen prompts to grant permissions and you
    should receive a message confirming you are authenticated with the Google Cloud
    SDK.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开您的浏览器，并要求您登录到您的Google Cloud帐户。登录后，您将被要求授予Google Cloud SDK访问您的帐户的权限。按照屏幕上的提示授予权限，您应该收到一条消息，确认您已经通过Google
    Cloud SDK进行了身份验证。
- en: 'Going back to your terminal, you should now have a prompt asking you to create
    a project. For testing purposes answer yes (`y`) to this question and enter a
    project name. This project name must be unique to you so it may take a few attempts.
    If you fail at first you can use the following command:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 回到您的终端，现在应该会提示您创建一个项目。出于测试目的，请回答是（`y`）并输入一个项目名称。这个项目名称必须对您来说是唯一的，所以可能需要尝试几次。如果一开始失败，您可以使用以下命令：
- en: '[PRE61]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'As you can see, my project is called `russ-kubernetes-cluster`. You should
    make references to your own project name in the commands. The final steps are
    to set our new project as the default as well as the region. I used the following
    commands:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我的项目名为`russ-kubernetes-cluster`。您应该在命令中引用您自己的项目名称。最后的步骤是将我们的新项目设置为默认项目以及设置区域。我使用了以下命令：
- en: '[PRE62]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Now that we have the command-line tools installed, we can move on to launching
    our cluster.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了命令行工具，我们可以继续启动我们的集群。
- en: Launching the Google container cluster
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动Google容器集群
- en: 'You can launch the cluster with a single command. The following command will
    launch a cluster named `kube-cluster`:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用单个命令启动集群。以下命令将启动一个名为`kube-cluster`的集群：
- en: '[PRE63]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'When you first run the command you may run into an error that states that the
    Google container API is not enabled for your project:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 当您第一次运行该命令时，可能会遇到一个错误，指出您的项目未启用Google容器API：
- en: '![](assets/f1515c08-216b-461e-ae0b-d1e0679ccfca.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f1515c08-216b-461e-ae0b-d1e0679ccfca.png)'
- en: 'You can rectify this error by following the link given in the error and following
    the on-screen instructions to enable the API. You may also find you get an error
    if your project does not have any billing associated with it:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过按照错误中给出的链接并按照屏幕上的说明启用API来纠正此错误。如果您的项目没有与之关联的计费，您可能还会遇到错误：
- en: '![](assets/42f35b43-439d-4017-ac62-5dab26e669ee.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/42f35b43-439d-4017-ac62-5dab26e669ee.png)'
- en: To resolve this, log in to the Google Cloud web interface at [https://console.cloud.google.com/](https://console.cloud.google.com/)
    and select your project from the drop-down list next to where it says Google Cloud
    Platform. Once you have your project selected, click on the Billing link in the
    left-hand side menu and follow the on-screen prompts to link your project to your
    billing account.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决这个问题，请登录到Google Cloud网页界面[https://console.cloud.google.com/](https://console.cloud.google.com/)，并从下拉列表中选择您的项目，该下拉列表位于Google
    Cloud Platform旁边。选择您的项目后，点击左侧菜单中的计费链接，并按照屏幕上的提示将您的项目链接到您的计费账户。
- en: 'Once you have the API enabled and your project linked to a billing account
    you should be able to rerun the following:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您启用了API并将您的项目链接到一个计费账户，您应该能够重新运行以下命令：
- en: '[PRE64]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'It will take several minutes, but once complete you should see something like
    the following:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要几分钟的时间，但一旦完成，您应该会看到类似以下的内容：
- en: '![](assets/614a5108-804c-4c22-ba01-e9872ec4b62c.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/614a5108-804c-4c22-ba01-e9872ec4b62c.png)'
- en: 'As you can see, the configuration for `kubectl` has been updated automatically,
    meaning that we can run the following command to check that we can communicate
    with our new cluster:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`kubectl`的配置已经自动更新，这意味着我们可以运行以下命令来检查我们是否可以与新的集群通信：
- en: '![](assets/c046a9de-762a-45a4-82e8-90b049fbef67.png)Before running this command
    please ensure that your local machine has a direct route to the internet and that
    you are not running through a proxy server or connection which is heavily firewalled,
    you may not be able to run into difficulties with the `kubectl proxy` command
    if you are.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/c046a9de-762a-45a4-82e8-90b049fbef67.png)在运行此命令之前，请确保您的本地机器直接连接到互联网，并且您没有通过代理服务器或受到严格防火墙限制的连接，否则您可能无法使用`kubectl
    proxy`命令遇到困难。'
- en: 'You should also be able to see your cluster in the Container Engine section
    of the Google Cloud web interface:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该能够在Google Cloud网络界面的容器引擎部分看到您的集群：
- en: '![](assets/068d1e13-23dc-49b1-8143-3fd4d78e8ca9.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/068d1e13-23dc-49b1-8143-3fd4d78e8ca9.png)'
- en: Now that we have our cluster up-and-running, let's launch the Sock Shop application
    again.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的集群已经运行起来了，让我们再次启动Sock Shop应用程序。
- en: The Sock Shop
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 袜子店
- en: 'As we did with Azure, there is no need to provide a configuration file this
    time, so we simply need to run the following commands:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 与Azure一样，这次也不需要提供配置文件，所以我们只需要运行以下命令：
- en: '[PRE65]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'As you can see from the following screenshot, the IP and port give me a URL
    of `http://104.155.191.39:8079`:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从以下截图中所见，IP和端口给了我一个`http://104.155.191.39:8079`的URL：
- en: '![](assets/1d404220-cacb-44e1-8f3c-79ba92727fa0.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1d404220-cacb-44e1-8f3c-79ba92727fa0.png)'
- en: 'Also, in the Google Cloud web interface, clicking on Discovery & load balancing
    should also show you the Load Balancer we created:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在Google Cloud网络界面中，单击发现与负载平衡还应该显示我们创建的负载均衡器：
- en: '![](assets/f6bbf0fd-2dd9-409e-ab55-2ec961b3ff16.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f6bbf0fd-2dd9-409e-ab55-2ec961b3ff16.png)'
- en: 'Clicking on the link in the interface, or pasting your URL into a browser should
    show you the now familiar shop front:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 单击界面中的链接，或将您的URL粘贴到浏览器中，应该会显示您熟悉的商店前台：
- en: '![](assets/1a0bebbd-c957-4589-8a79-71d9b9d0f0e5.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1a0bebbd-c957-4589-8a79-71d9b9d0f0e5.png)'
- en: 'Running the following command should remove the Sock Shop application:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令应该删除Sock Shop应用程序：
- en: '[PRE66]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Running Kubeless
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Kubeless
- en: 'Before we remove our Google Cloud, three-node Kubernetes cluster, let''s quickly
    revisit Kubeless. To deploy Kubeless, run the following commands:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在删除Google Cloud三节点Kubernetes集群之前，让我们快速回顾一下Kubeless。要部署Kubeless，请运行以下命令：
- en: '[PRE67]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Once deployed, you can check the status by running the following:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 部署后，您可以通过运行以下命令来检查状态：
- en: '[PRE68]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'You can also check Workloads and Discovery & load balancing in the Google Container
    Engine section of the Google Cloud web interface. Once Kubeless has been deployed,
    return to the `/Chapter04/hello-world` folder in the repository that accompanies
    this book and run the following command to deploy the test function:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在Google Cloud网络界面的Google容器引擎部分检查工作负载和发现与负载平衡。一旦Kubeless部署完成，返回到本书附带的存储库中的`/Chapter04/hello-world`文件夹，并运行以下命令部署测试函数：
- en: '[PRE69]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Once deployed, you can then view the function by running the following:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 部署后，您可以通过运行以下命令查看该函数：
- en: '[PRE70]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'You can call the function by running the following:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令调用该函数：
- en: '[PRE71]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '![](assets/8cd0fe2d-b02c-482f-8089-1428bf316f17.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8cd0fe2d-b02c-482f-8089-1428bf316f17.png)'
- en: 'Also, you can expose the function using the following command:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以使用以下命令公开该函数：
- en: '[PRE72]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Once the Load Balancer has been created you can run the following to confirm
    the IP address and port:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦负载均衡器创建完成，您可以运行以下命令确认IP地址和端口：
- en: '[PRE73]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Once you know the IP address and port you can open the function in your browser
    or use curl or HTTPie to view the function:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您知道 IP 地址和端口，您可以在浏览器中打开该函数，或者使用 curl 或 HTTPie 查看该函数：
- en: '![](assets/b5eb2e7f-f765-436a-9fa6-620c8d8581eb.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b5eb2e7f-f765-436a-9fa6-620c8d8581eb.png)'
- en: Now that we have tested our cluster with the Sock Shop application and deployed
    a Kubeless function we should look at terminating our cluster.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经使用 Sock Shop 应用程序测试了我们的集群，并部署了一个 Kubeless 函数，我们应该考虑终止我们的集群。
- en: Removing the cluster
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除集群
- en: 'To remove the cluster just run the following command:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除集群，只需运行以下命令：
- en: '[PRE74]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: It will ask you if you are sure, answer yes and, after a minute or two, your
    cluster will be deleted. Again, you should double-check in the Google Cloud web
    interface that your cluster has been correctly deleted so you do not incur any
    unexpected costs.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 它会问你是否确定，回答是，一两分钟后，您的集群将被删除。再次，您应该在 Google Cloud 网页界面上仔细检查您的集群是否已被正确删除，以免产生任何意外费用。
- en: Summary
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at four cloud providers. The first two, DigitalOcean
    and AWS, at present do not natively support Kubernetes so we used `kubeadm` and
    `kube-aws` to launch and configure our clusters. With Microsoft Azure and Google
    Cloud we used their command-line tools to launch their natively supported Kubernetes
    services. I am sure you will agree that at the time of writing both of these services
    are a lot friendlier to use than the first two we looked at.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了四个云提供商。前两个，DigitalOcean 和 AWS，目前不支持原生的 Kubernetes，因此我们使用 `kubeadm`
    和 `kube-aws` 来启动和配置我们的集群。对于 Microsoft Azure 和 Google Cloud，我们使用他们的命令行工具来启动他们原生支持的
    Kubernetes 服务。我相信您会同意，在撰写本文时，这两项服务比我们看过的前两项要友好得多。
- en: 'Once the clusters were up-and-running, interacting with Kubernetes was a pretty
    consistent experience. We didn''t really have to make allowances for where our
    cluster was running when issuing commands such as `kubectl expose`: Kubernetes
    was aware of where it was running and used the provider''s native services to
    launch a Load Balancer without us have to intervene with any special settings
    or considerations.'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦集群运行起来，与 Kubernetes 交互是一个相当一致的体验。当我们发出诸如 `kubectl expose` 的命令时，我们实际上并不需要为集群运行的位置做出任何让步：Kubernetes
    知道它在哪里运行，并使用提供商的原生服务来启动负载均衡器，而无需我们干预任何特殊设置或考虑。
- en: You may be wondering why we didn't launch the Sock Shop application on DigitalOcean.
    As the spec of the machines was quite low, the application was really slow to
    run, and DigitalOcean is the only provider out of the four we looked at where
    the provider's native Load Balancing service is not currently supported by Kubernetes.
    I am sure this will be rectified over the coming months.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想知道为什么我们没有在 DigitalOcean 上启动 Sock Shop 应用程序。由于机器的规格相当低，应用程序运行非常缓慢，并且 DigitalOcean
    是我们看过的四个提供商中唯一一个不支持 Kubernetes 当前不支持提供商的原生负载均衡服务。我相信这将在未来几个月内得到纠正。
- en: Also, you might be surprised that there is no native Kubernetes experience on
    AWS. At the time of writing this is the case; however, there are rumors that since,
    AWS has joined the Cloud Native Foundation, they are working on developing a native
    Kubernetes service.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可能会感到惊讶，AWS 上没有原生的 Kubernetes 经验。在撰写本文时是这种情况；然而，有传言称自从 AWS 加入了云原生基金会后，他们正在努力开发原生的
    Kubernetes 服务。
- en: In the next chapter, we are going to take look at Apache OpenWhisk, which is
    an open source serverless cloud platform originally developed by IBM.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍 Apache OpenWhisk，这是最初由 IBM 开发的开源无服务器云平台。
