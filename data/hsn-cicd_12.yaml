- en: Installation and Basics of CircleCI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CircleCI的安装和基础知识
- en: In the previous chapter, we showed how to debug a Travis CI project locally
    and explained the Travis CI web interface in more detail.  We also looked at how
    to do logging in Travis CI. This chapter will help you get set up with CircleCI
    and we will explain how to create a Bitbucket account and we will go over how
    to set up both GitHub and Bitbucket on a new CircleCI account. We will create
    a simple Java project in Bitbucket and run a CircleCI build for it. We will also
    discuss how to navigate the Bitbucket UI. We will then end the chapter by creating
    a new GitHub repository and discuss a CircleCI YML script that will install Golang
    via a Docker image and run our unit tests.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们展示了如何在本地调试Travis CI项目，并更详细地解释了Travis CI的Web界面。我们还看了如何在Travis CI中进行日志记录。本章将帮助您设置CircleCI，并解释如何创建Bitbucket帐户，以及如何在新的CircleCI帐户上设置GitHub和Bitbucket。我们将在Bitbucket中创建一个简单的Java项目，并为其运行CircleCI构建。我们还将讨论如何浏览Bitbucket的用户界面。最后，我们将通过创建一个新的GitHub存储库来结束本章，并讨论一个CircleCI
    YML脚本，该脚本将通过Docker镜像安装Golang并运行我们的单元测试。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: An introduction to CircleCI
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CircleCI的介绍
- en: A comparison of CircleCI and Jenkins
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CircleCI和Jenkins的比较
- en: CircleCI prerequisites
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CircleCI先决条件
- en: Setting up CircleCI in GitHub
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GitHub中设置CircleCI
- en: Setting up CircleCI in Bitbucket
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Bitbucket中设置CircleCI
- en: An overview of CircleCI configuration
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CircleCI配置概述
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter will require some basic programming skills and we will utilize
    some of the continuous integration/continuous delivery concepts that we will discuss
    in this chapter. It will be helpful if you try to create a Bitbucket account and
    a CircleCI account on your own. You can follow the steps in the *CircleCI prerequisites*
    section. We will create a basic Java application using Maven so it would be helpful
    to understand some basic programming concepts in Java, but if you know any programming
    language you should be able to follow along. Basic Git and Unix knowledge would
    be very helpful.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将需要一些基本的编程技能，并且我们将利用本章将讨论的一些持续集成/持续交付概念。如果您尝试自己创建Bitbucket帐户和CircleCI帐户，将会很有帮助。您可以按照*CircleCI先决条件*部分中的步骤进行操作。我们将使用Maven创建一个基本的Java应用程序，因此了解一些Java的基本编程概念将会很有帮助，但如果您了解任何编程语言，应该也能够跟上。基本的Git和Unix知识将非常有帮助。
- en: CircleCI
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CircleCI
- en: CircleCI is a hosted and automated solution for **continuous integration** (**CI**)
    builds. CircleCI uses an in application configuration file that uses YAML ( [http://yaml.org/spec/1.2/spec.html](http://yaml.org/spec/1.2/spec.html))
    syntax, such as Travis YML script, which we discussed in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml),
    *Installation and Basics of Travis CI*, to [Chapter 11](f2319c39-b2e4-40cb-b1bb-53daa589776b.xhtml),
    *Travis CI UI Logging and Debugging*. Since CircleCI is hosted in the cloud, it
    has the advantage that it can be set up quickly in other environments as well
    as used in different operating systems without having to worry about setup and
    installation like you have to do with Jenkins CI. Because of this, CircleCI is
    much faster to set up than Jenkins.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: CircleCI是一个托管和自动化的**持续集成**（**CI**）构建解决方案。CircleCI使用一个应用程序配置文件，使用YAML（[http://yaml.org/spec/1.2/spec.html](http://yaml.org/spec/1.2/spec.html)）语法，例如Travis
    YML脚本，我们在[第9章](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml)中讨论过，*Travis CI的安装和基础知识*，到[第11章](f2319c39-b2e4-40cb-b1bb-53daa589776b.xhtml)，*Travis
    CI UI日志和调试*。由于CircleCI托管在云端，它具有快速在其他环境中设置的优势，以及在不同操作系统中使用而无需担心像Jenkins CI那样的设置和安装。因此，CircleCI比Jenkins快得多。
- en: Comparing CircleCI and Jenkins
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较CircleCI和Jenkins
- en: Jenkins is a self-contained and open source automation server that is customizable
    and requires setup and configuration at the organization level. Remember in the
    Jenkins CI chapters, we spent some time installing Jenkins in the Windows, Linux,
    and macOS operating systems. We also had the ability to configure Jenkins however
    we wanted. While this is great for software companies with dedicated teams in
    operations, DevOps, and so on, it is not as great for open source projects where
    often lone developers are setting up environments for their personal projects.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins是一个自包含的开源自动化服务器，可以在组织级别进行定制和配置。还记得在Jenkins CI章节中，我们花了一些时间在Windows、Linux和macOS操作系统中安装Jenkins。我们还可以根据自己的需求配置Jenkins。虽然这对于在运营、DevOps等方面拥有专门团队的软件公司来说非常好，但对于通常是孤独开发者为其个人项目设置环境的开源项目来说，情况就不那么理想了。
- en: CircleCI was designed around the principle of open source development and for
    ease of use. CircleCI can be set up within minutes of creating a project in the
    GitHub and Bitbucket platforms. Although CircleCI is not as customizable as Jenkins
    CI in this respect, it has the distinct advantage of having a quick setup. CircleCI
    uses an in application configuration file that uses YAML syntax and can be used
    in the GitHub ([https://github.com/](https://github.com/)) platform as well as
    in the Bitbucket ([https://bitbucket.org/](https://bitbucket.org/)) platform,
    unlike Travis CI.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: CircleCI是围绕开源开发原则和易用性而设计的。在GitHub和Bitbucket平台上创建项目后，可以在几分钟内设置好CircleCI。虽然在这方面CircleCI不像Jenkins
    CI那样可定制，但它具有快速设置的明显优势。CircleCI使用应用程序配置文件，使用YAML语法，可以在GitHub（[https://github.com/](https://github.com/)）平台以及Bitbucket（[https://bitbucket.org/](https://bitbucket.org/)）平台上使用，不同于Travis
    CI。
- en: CircleCI prerequisites
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CircleCI先决条件
- en: In order to get started with CircleCI, you will need to either create a GitHub
    account at [https://github.com/](https://github.com/) or a Bitbucket account at  [https://bitbucket.org/product](https://bitbucket.org/product).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用CircleCI，您需要在[https://github.com/](https://github.com/)创建GitHub帐户或在[https://bitbucket.org/product](https://bitbucket.org/product)创建Bitbucket帐户。
- en: Creating a GitHub account
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建GitHub帐户
- en: We covered in detail how to create a GitHub account in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml), *Installation
    and Basics of Travis CI*, in the *Creating a GitHub account* section.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第9章](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml)中详细介绍了如何创建GitHub帐户，在*创建GitHub帐户*部分。
- en: Creating a Bitbucket account
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Bitbucket帐户
- en: 'We will create a Bitbucket account and once again use the username of `packtci`
    for our user:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个Bitbucket帐户，并再次使用用户名`packtci`作为我们的用户名：
- en: '![](assets/c9637bd7-2562-420a-867a-34f214f89f8b.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c9637bd7-2562-420a-867a-34f214f89f8b.png)'
- en: 'Once you click the green Continue button, you will be redirected to a page
    like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 点击绿色的继续按钮后，您将被重定向到以下页面：
- en: '![](assets/31f8559e-135d-4670-8f40-f53b3f7caac7.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/31f8559e-135d-4670-8f40-f53b3f7caac7.png)'
- en: 'You will need to enter your Full name and a Password and the email address
    you provided in the previous page will already be set for you. Once you click
    the green Continue button, you will receive a verification email for your new
    Bitbucket account that looks like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要输入您的全名和密码，您在上一页提供的电子邮件地址已经为您设置好。点击绿色的继续按钮后，您将收到一个新Bitbucket帐户的验证电子邮件，类似于以下内容：
- en: '![](assets/b7616f17-d59a-4178-9455-37f516fee550.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b7616f17-d59a-4178-9455-37f516fee550.png)'
- en: 'Once you click the Verify my email address button, you will be redirected to
    the following page:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 点击验证我的电子邮件地址按钮后，您将被重定向到以下页面：
- en: '![](assets/9d160f00-7ee5-4879-94fd-fad7888dcf0e.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9d160f00-7ee5-4879-94fd-fad7888dcf0e.png)'
- en: 'You must provide a unique username for your new Bitbucket account, as you cannot
    use any existing usernames. Once you click the Continue button, you will routed
    to the following page:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须为您的新Bitbucket帐户提供一个唯一的用户名，因为您不能使用任何现有的用户名。点击继续按钮后，您将被路由到以下页面：
- en: '![](assets/6dd4fcde-f653-4f92-bf8d-a82f2d446fa0.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6dd4fcde-f653-4f92-bf8d-a82f2d446fa0.png)'
- en: 'You can either skip this section by clicking the Skip button or you can enter
    your information and then click the Submit button and you will be routed to the
    following page:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击跳过按钮来跳过此部分，或者您可以输入您的信息，然后点击提交按钮，您将被路由到以下页面：
- en: '![](assets/962a0a33-991a-44cd-a1ef-08b15b487288.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/962a0a33-991a-44cd-a1ef-08b15b487288.png)'
- en: Creating a CircleCI account
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建CircleCI帐户
- en: 'You will need to create a CircleCI account in order to get started with CircleCI
    and you can either use your GitHub login credentials or your Bitbucket login credentials:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要创建一个CircleCI帐户才能开始使用CircleCI，您可以使用您的GitHub登录凭据或Bitbucket登录凭据：
- en: '![](assets/39ad9180-338f-4ac7-befd-d36e61976b4b.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/39ad9180-338f-4ac7-befd-d36e61976b4b.png)'
- en: 'You will need to click the Sign Up button in order to create a new CircleCI
    account and you will be redirected to the following page:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要点击注册按钮以创建一个新的CircleCI帐户，然后您将被重定向到以下页面：
- en: '![](assets/b4a94106-f9c2-4258-bd5e-eaa5fd407be3.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b4a94106-f9c2-4258-bd5e-eaa5fd407be3.png)'
- en: 'You can sign up with either but we will choose *Sign Up with Bitbucket**. O***nce
    you click the button, you will be redirected to the following page:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择其中一个进行注册，但我们将选择*使用Bitbucket注册**。一旦您点击按钮，您将被重定向到以下页面：
- en: '![](assets/078426cc-a695-40a3-be78-6d6d0be2fd85.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/078426cc-a695-40a3-be78-6d6d0be2fd85.png)'
- en: 'We will click the Grant access button and then we will be routed to the following
    page:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将点击授予访问权限按钮，然后我们将被路由到以下页面：
- en: '![](assets/1db8446d-a1c1-46a2-a864-616658e4c3cf.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1db8446d-a1c1-46a2-a864-616658e4c3cf.png)'
- en: Notice that we have no projects set up to run in CircleCI and will need to add
    a project later on.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在CircleCI中没有设置任何项目，稍后需要添加项目。
- en: 'Even though we signed up our new Bitbucket account, we can still connect our
    GitHub account to our new CircleCI account. You will need to click on the avatar
    in the upper right corner of the screen and then click the User settings button:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们注册了新的Bitbucket帐户，我们仍然可以将我们的GitHub帐户连接到我们的新CircleCI帐户。您需要点击屏幕右上角的头像，然后点击用户设置按钮：
- en: '![](assets/45e13624-b199-4c55-853a-4802ec136587.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/45e13624-b199-4c55-853a-4802ec136587.png)'
- en: 'Once you click the User settings button, you will be routed to a page showing Account
    Integrations. We need to connect our GitHub account to CircleCI by clicking the
    Connect button:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 点击用户设置按钮后，您将被路由到显示帐户集成的页面。我们需要通过点击连接按钮将我们的GitHub帐户连接到CircleCI：
- en: '![](assets/acfbda9a-9678-4eb3-b8f2-f52a9f1f982e.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/acfbda9a-9678-4eb3-b8f2-f52a9f1f982e.png)'
- en: 'Once you click the Connect button, you will be redirected to an Authorize CircleCI application
    page that looks like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 点击连接按钮后，您将被重定向到一个类似于此的授权CircleCI应用程序页面：
- en: '![](assets/ad503136-9770-4afa-a88a-be2b3a7099ad.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ad503136-9770-4afa-a88a-be2b3a7099ad.png)'
- en: 'Once you click the Authorize circleci button, you will be redirected to the
    CircleCI dashboard page and you will now have two `packtci` accounts corresponding
    to your GitHub account and your Bitbucket account, respectively:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 点击授权circleci按钮后，您将被重定向到CircleCI仪表板页面，现在您将分别拥有两个与您的GitHub帐户和Bitbucket帐户对应的`packtci`帐户：
- en: '![](assets/7c04e8ed-5df5-44bb-b6e0-27a46be94129.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7c04e8ed-5df5-44bb-b6e0-27a46be94129.png)'
- en: Setting up CircleCI in GitHub
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GitHub中设置CircleCI
- en: 'Let us add a new project to CircleCI with our `functional-summer` ([https://github.com/packtci/functional-summer](https://github.com/packtci/functional-summer))
    GitHub project using our `packtci`  ([https://github.com/packtci](https://github.com/packtci))
    GitHub account. The first thing we need to do is to click the Add Projects button
    for GitHub that looks like this in the dashboard:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用我们的`packtci` ([https://github.com/packtci](https://github.com/packtci))
    GitHub帐户，为CircleCI添加一个新项目`functional-summer` ([https://github.com/packtci/functional-summer](https://github.com/packtci/functional-summer))。我们需要做的第一件事是在仪表板上点击GitHub的添加项目按钮：
- en: '![](assets/717943b4-8242-46fc-bdb4-0e0b400f053a.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/717943b4-8242-46fc-bdb4-0e0b400f053a.png)'
- en: 'Once you click the Add Projects button you will be routed to a page like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 点击添加项目按钮后，您将被路由到以下页面：
- en: '![](assets/dfe9f6fd-c8b0-4d42-b6aa-e8249a6f3489.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dfe9f6fd-c8b0-4d42-b6aa-e8249a6f3489.png)'
- en: 'We will click the Set Up Project button for the `functional-summer` GitHub
    repository and will be routed to a page like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将点击`functional-summer` GitHub存储库的设置项目按钮，并将被路由到一个类似这样的页面：
- en: '![](assets/9b6a8138-7d43-47a7-a211-62aa256ae9b0.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9b6a8138-7d43-47a7-a211-62aa256ae9b0.png)'
- en: 'CircleCI automatically picked Node as our language because we have a `package.json`
    file and because we have JavaScript files in this repository. We are not done
    yet, though. If you scroll further down this page, you will notice some next steps
    to get CircleCI started in our project:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: CircleCI自动选择了Node作为我们的语言，因为我们有一个`package.json`文件，并且因为我们在这个存储库中有JavaScript文件。不过，我们还没有完成。如果您在此页面向下滚动，您将注意到一些启动CircleCI在我们项目中的下一步：
- en: '![](assets/77b296fe-5b73-4e36-a9be-25072538959c.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/77b296fe-5b73-4e36-a9be-25072538959c.png)'
- en: 'We need to create a folder called `.circleci` in the root of our project and
    add a file called `config.yml` in this folder. Let us create this folder and file
    by using the GitHub UI. We will go to the following URL: [https://github.com/packtci/functional-summer](https://github.com/packtci/functional-summer).
    Then click the Create new file button:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在项目的根目录中创建一个名为`.circleci`的文件夹，并在此文件夹中添加一个名为`config.yml`的文件。让我们使用GitHub UI创建这个文件夹和文件。我们将转到以下URL：[https://github.com/packtci/functional-summer](https://github.com/packtci/functional-summer)。然后点击创建新文件按钮：
- en: '![](assets/1c32c15c-a00b-4251-ab9c-17b5ab4c8ee2.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1c32c15c-a00b-4251-ab9c-17b5ab4c8ee2.png)'
- en: 'Once we click this button, we will be redirected to a page like this in the
    GitHub UI:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击此按钮，我们将被重定向到GitHub UI中的一个类似这样的页面：
- en: '![](assets/62fe413c-6c1e-4b08-b1ec-13de1a2c5730.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/62fe413c-6c1e-4b08-b1ec-13de1a2c5730.png)'
- en: 'Enter the name of our folder as `.circleci` and then enter the `/` character
    and then name our file `config.yml`. Once you are done, it will look like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 输入我们文件夹的名称为`.circleci`，然后输入`/`字符，然后命名我们的文件为`config.yml`。完成后，它将如下所示：
- en: '![](assets/a76294cb-f5b4-4ebe-ba55-78230d524731.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a76294cb-f5b4-4ebe-ba55-78230d524731.png)'
- en: 'Now we need to enter contents for our `config.yml` file and `.circleci` provides
    us with a sample `config.yml` file with values that we can use for our new CircleCI
    project:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要为我们的`config.yml`文件输入内容，`.circleci`为我们提供了一个样本`config.yml`文件，其中包含我们可以用于新的CircleCI项目的值：
- en: '[PRE0]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will explain the contents of this in more detail later but for now we will
    just copy and paste this into the GitHub UI Editor and then click the Commit new
    file button:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面更详细地解释其中的内容，但现在我们将只需将其复制并粘贴到GitHub UI编辑器中，然后点击提交新文件按钮：
- en: '![](assets/efbe44f4-10b2-4436-aa08-17ce1def5339.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/efbe44f4-10b2-4436-aa08-17ce1def5339.png)'
- en: 'The last step that we need to do is to go back to the Add Projects page in
    CircleCI and click the Start building button to launch our newly configured project
    in CircleCI:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '我们需要做的最后一步是回到CircleCI的添加项目页面，点击开始构建按钮，启动我们新配置的CircleCI项目： '
- en: '![](assets/70141810-499d-45d8-9dac-a518c209c6ba.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/70141810-499d-45d8-9dac-a518c209c6ba.png)'
- en: This also sets up a webhook with CircleCI so that CircleCI listens to any new
    code changes that we commit to GitHub.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这也会在CircleCI中设置一个Webhook，以便CircleCI监听我们提交到GitHub的任何新代码更改。
- en: 'Once we click the Start building button, we will be redirected to our first
    build job with our `functional-summer` repository with CircleCI:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们点击开始构建按钮，我们将被重定向到我们的第一个构建作业，使用CircleCI构建`functional-summer`存储库：
- en: '![](assets/bb38ec4f-204b-4c1e-af9e-7409e2f3d227.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bb38ec4f-204b-4c1e-af9e-7409e2f3d227.png)'
- en: 'If we scroll further down, we will see each step of the build in the CircleCI
    application:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们继续向下滚动，我们将在CircleCI应用程序中看到构建的每个步骤：
- en: '![](assets/7eec3ceb-c381-4f02-97b1-e228ee94aadf.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7eec3ceb-c381-4f02-97b1-e228ee94aadf.png)'
- en: 'We will explain this in greater detail in later chapters but each step can
    be expanded to show the detail for that step. For example, if we click the yarn
    test step, we will see the following details:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中更详细地解释这一点，但每个步骤都可以展开以显示该步骤的详细信息。例如，如果我们点击yarn test步骤，我们将看到以下详细信息：
- en: '![](assets/e490c4ff-e4fb-4918-82a6-fc75c8c80c28.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e490c4ff-e4fb-4918-82a6-fc75c8c80c28.png)'
- en: Setting up CircleCI in Bitbucket
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Bitbucket中设置CircleCI
- en: 'Since we have just created a new Bitbucket account, we will need to upload
    our ssh keys into Bitbucket to be able to push changes to Bitbucket. We covered
    how to create SSH keys in [Chapter 9](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml), *Installation
    and Basics of Travis CI*, in the *Adding a SSH key to your new GitHub account *section,
    so please read that chapter if you do not have any SSH keys set up already. We
    already created an SSH Key in *Chapter 9, Installation and Basics of Travis CI*
    in the *Adding an SSH Key to your new GitHub Account* section. We just need to
    copy the public ssh key into our system clipboard, by running the following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们刚刚创建了一个新的Bitbucket账户，我们需要将我们的ssh密钥上传到Bitbucket，以便能够将更改推送到Bitbucket。我们在[第9章](65f27cc1-0630-4515-be75-5eedeb8004e5.xhtml)中介绍了如何创建SSH密钥，在*安装和Travis
    CI基础*章节中，*向新GitHub账户添加SSH密钥*部分，因此如果您还没有设置任何SSH密钥，请阅读该章节。我们已经在*第9章，安装和Travis CI基础*的*向新GitHub账户添加SSH密钥*部分创建了一个SSH密钥。我们只需要将公共ssh密钥复制到我们的系统剪贴板中，通过运行以下命令：
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once we have our public SSH key copied into our system clipboard, we need to
    go to the following page in Bitbucket:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们将公共SSH密钥复制到系统剪贴板中，我们需要转到Bitbucket的以下页面：
- en: '![](assets/0cf57ed2-793b-4608-bf7b-6c949403d30b.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0cf57ed2-793b-4608-bf7b-6c949403d30b.png)'
- en: 'We will need to click the Add key button. This will open a modal where we enter
    a label and the contents of our public key, which looks like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要点击添加密钥按钮。这将打开一个模态窗口，我们在其中输入一个标签和我们的公钥的内容，看起来像这样：
- en: '![](assets/d43516f1-3396-4b0f-b269-50f13201a48b.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d43516f1-3396-4b0f-b269-50f13201a48b.png)'
- en: We then click the Add key button and now we are ready to push changes to our
    Bitbucket account.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击添加密钥按钮，现在我们已经准备好将更改推送到我们的Bitbucket账户。
- en: Setting up a new Java project in Bitbucket with CircleCI build
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Bitbucket中使用CircleCI构建设置新的Java项目
- en: 'We will create a new Java project in Bitbucket called `java-summer` by clicking
    on the plus button in the left navigation pane:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过点击左侧导航窗格中的加号按钮在Bitbucket中创建一个名为`java-summer`的新Java项目：
- en: '![](assets/8d4cfacc-ca43-4373-a253-5ccc64c523ac.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8d4cfacc-ca43-4373-a253-5ccc64c523ac.png)'
- en: 'Next we will click the Repository button, which looks like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将单击“存储库”按钮，它看起来像这样：
- en: '![](assets/0067be31-254a-45d4-b5c5-90b7ceda9c12.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0067be31-254a-45d4-b5c5-90b7ceda9c12.png)'
- en: 'Next we will create a new repository by providing a Repository name, setting
    our Version control system to Git, and then finish by clicking the Create repository
    button:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过提供存储库名称，将我们的版本控制系统设置为Git，然后单击“创建存储库”按钮来创建一个新存储库：
- en: '![](assets/e09cf57c-8f00-4248-beac-10b27055218d.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e09cf57c-8f00-4248-beac-10b27055218d.png)'
- en: 'Notice here that we clicked the optional Advanced settings dropdown and set
    our Language to the Java programming language. Once we click the Create repository
    button, we will be redirected to a page that could look like this:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里我们点击了可选的高级设置下拉菜单，并将我们的语言设置为Java编程语言。一旦我们点击创建存储库按钮，我们将被重定向到一个看起来像这样的页面：
- en: '![](assets/b14b4643-df50-4252-a4c3-7e5828c9a0f6.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b14b4643-df50-4252-a4c3-7e5828c9a0f6.png)'
- en: We will use the Maven build tool to create a new Java project that has a `src`
    directory with a main subdirectory and a test subdirectory. We explained in detail
    in [Chapter 7](6b13378c-73a7-4dc5-b547-0e6f2f153927.xhtml),* Developing Plugins*,
    how to install and use the Maven build tool, so please reread the appropriate
    sections in [Chapter 7](https://cdp.packtpub.com/hands_on_continuous_integration_and_delivery/wp-admin/post.php?post=35&action=edit#post_30),* Developing
    Plugins*, if you don't have Maven installed and don't know how to use it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Maven构建工具创建一个新的Java项目，该项目具有一个带有主目录和测试子目录的`src`目录。我们在[第7章](6b13378c-73a7-4dc5-b547-0e6f2f153927.xhtml)中详细解释了如何安装和使用Maven构建工具，*开发插件*，因此如果您尚未安装Maven并且不知道如何使用它，请重新阅读[第7章](https://cdp.packtpub.com/hands_on_continuous_integration_and_delivery/wp-admin/post.php?post=35&action=edit#post_30)，*开发插件*中的适当部分。
- en: 'To create our new Java project with Maven, we will issue the following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Maven创建我们的新Java项目，我们将发出以下命令：
- en: '[PRE2]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will first clone our repository by issuing the following command in a shell
    session:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过在shell会话中发出以下命令来克隆我们的存储库：
- en: '[PRE3]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We will then copy the contents of the hidden `.git` directory in this cloned
    repository and paste it into our new `java-summer` folder that we created with
    the Maven build tool. Assuming that we have the correct path structure, we can
    issue the following command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将复制克隆存储库中隐藏的`.git`目录的内容，并将其粘贴到我们用Maven构建工具创建的新`java-summer`文件夹中。假设我们有正确的路径结构，我们可以发出以下命令：
- en: '[PRE4]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can then delete the `java-summer-proj` folder and then `cd` into the `java-summer`
    folder. We will then use the Java language sample configuration, which you can
    find at **language-java** ([https://circleci.com/docs/2.0/language-java/](https://circleci.com/docs/2.0/language-java/))
    in CircleCI documentation. We will create a folder called `.circleci` and then
    create a file called `config.yml`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以删除`java-summer-proj`文件夹，然后`cd`进入`java-summer`文件夹。然后我们将使用Java语言示例配置，您可以在CircleCI文档的**language-java**
    ([https://circleci.com/docs/2.0/language-java/](https://circleci.com/docs/2.0/language-java/))中找到。我们将创建一个名为`.circleci`的文件夹，然后创建一个名为`config.yml`的文件。
- en: 'We will commit our changes and push it to Bitbucket with the following command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提交我们的更改并使用以下命令将其推送到Bitbucket：
- en: '[PRE5]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now if you look at the CircleCI application, we can switch to the packtci Bitbucket
    user account by clicking on the upper left of the application, which looks like
    this:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您查看CircleCI应用程序，我们可以通过单击应用程序左上角的packtci Bitbucket用户帐户来切换到该用户帐户，它看起来像这样：
- en: '![](assets/1ff09b67-9bfa-4fba-b457-39e115778495.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1ff09b67-9bfa-4fba-b457-39e115778495.png)'
- en: 'Next we need to click the ADD PROJECTS button in the left navigation pane,
    which looks like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在左侧导航窗格中单击“添加项目”按钮，它看起来像这样：
- en: '![](assets/4ba24bf5-8120-472d-8de3-539c4e71ae2f.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4ba24bf5-8120-472d-8de3-539c4e71ae2f.png)'
- en: 'We then need to click the Set Up Project button so that CircleCI knows about
    our `java-summer` repository in Bitbucket, which looks like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要单击“设置项目”按钮，以便CircleCI知道我们在Bitbucket中的`java-summer`存储库，它看起来像这样：
- en: '![](assets/560414e9-269a-4463-b14c-6908451c72ab.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/560414e9-269a-4463-b14c-6908451c72ab.png)'
- en: 'We will then be routed to the Set Up Project page where we need to pick our
    operating system, which defaults to Linux in CircleCI. Then we pick our build
    language, which should be Java in our case. For clarity, we will show this page
    once again in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将被路由到设置项目页面，在这里我们需要选择我们的操作系统，默认情况下在CircleCI中为Linux。然后我们选择我们的构建语言，在我们的情况下应该是Java。为了清晰起见，我们将在以下截图中再次显示此页面：
- en: '![](assets/4c28eea2-ce14-492a-a9ab-96c0041cc10a.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4c28eea2-ce14-492a-a9ab-96c0041cc10a.png)'
- en: 'We will then copy the sample configuration file that CircleCI provided for
    us into the `.circleci/config.yml` file:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将把CircleCI为我们提供的示例配置文件复制到`.circleci/config.yml`文件中：
- en: '[PRE6]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next we will commit the changes and push it up into Bitbucket version control
    system and then we need to scroll to the Next Steps section and simply click the
    Start building button, which looks like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将提交更改并将其推送到Bitbucket版本控制系统，然后我们需要滚动到“下一步”部分，然后简单地单击“开始构建”按钮，它看起来像这样：
- en: '![](assets/86f5041d-52f3-4e25-a3d5-cdabdb6e5781.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/86f5041d-52f3-4e25-a3d5-cdabdb6e5781.png)'
- en: 'This will trigger our first build for the `java-summer` project and get the
    webhook working for the repository. Once we click the Start building button, we
    need to click the JOBS button, in order to see our new build that was triggered:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这将触发我们对`java-summer`项目的第一次构建，并使webhook为存储库工作。一旦我们点击“开始构建”按钮，我们需要点击“作业”按钮，以查看我们触发的新构建：
- en: '![](assets/83ac58b8-7a05-4e9c-a227-685f38cae333.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/83ac58b8-7a05-4e9c-a227-685f38cae333.png)'
- en: Now to test that the webhooks are listening to code changes in Bitbucket, let
    us make a change to our `java-summer` file so that it actually has a function
    that sums up an array of values and add a unit test case with JUnit ([https://junit.org/junit4/javadoc/latest/](https://junit.org/junit4/javadoc/latest/)).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了测试Webhooks是否监听Bitbucket中的代码更改，让我们对`java-summer`文件进行更改，以便它实际上有一个对值数组求和的函数，并使用JUnit([https://junit.org/junit4/javadoc/latest/](https://junit.org/junit4/javadoc/latest/))添加一个单元测试用例。
- en: 'Let us add a static function like this in the app file:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在应用文件中添加一个静态函数，就像这样：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then let us add a test case to test the average function like this with JUnit:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后让我们添加一个测试用例来测试平均函数，就像这样使用JUnit：
- en: '[PRE8]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can test the changes locally with the `mvn package`  command to make sure
    that nothing is broken and then commit our changes and push these changes up to
    the Bitbucket version control system. We should now notice a build that was automatically
    triggered with CircleCI because of our code change to the master branch.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`mvn package`命令在本地测试更改，以确保没有出现问题，然后提交我们的更改并将这些更改推送到Bitbucket版本控制系统。我们现在应该注意到，由于我们对主分支的代码更改，CircleCI自动触发了一个构建。
- en: 'If we go back to the CircleCI web application, we can see that a new build
    was triggered and that it passed:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回到CircleCI Web应用程序，我们可以看到触发了一个新的构建，并且通过了：
- en: '![](assets/73a4fd33-6554-4c2a-997a-542296cebbb6.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/73a4fd33-6554-4c2a-997a-542296cebbb6.png)'
- en: Notice that in the preceding screenshot, CircleCI shows that the second build
    was triggered. It also shows the commit SHA hash and the commit message and confirms
    that the build was a success.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在上面的屏幕截图中，CircleCI显示第二次构建已经触发。它还显示了提交SHA哈希和提交消息，并确认构建成功。
- en: CircleCI configuration overview
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CircleCI配置概述
- en: CircleCI uses YAML ([http://yaml.org/spec/1.2/spec.html](http://yaml.org/spec/1.2/spec.html)),
    which is a data serialization language, for its configuration language, as does
    Travis CI.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: CircleCI使用YAML([http://yaml.org/spec/1.2/spec.html](http://yaml.org/spec/1.2/spec.html))作为其配置语言的数据序列化语言，Travis
    CI也是如此。
- en: Concept overview of CircleCI configuration
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CircleCI配置概述
- en: We will discuss many more concepts and configuration options in CircleCI in
    later chapters but, as an overview, let us look at a basic `config.yml` file and
    explain some of its concepts. We will create a new repository in GitHub with our
    `packtci` ([https://github.com/packtci](https://github.com/packtci)) Github user.
    You can find the new repository at [https://github.com/packtci/go-template-example-with-circle-ci](https://github.com/packtci/go-template-example-with-circle-ci).
    We will also create a function in Golang that parses a template. We will then
    write a test case that parses the template text and then create a CircleCI `config.yml`
    file. We will push these code changes up to GitHub and then finally set up this
    new project with CircleCI.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中讨论CircleCI中的许多概念和配置选项，但是作为概述，让我们看一下基本的`config.yml`文件，并解释一些概念。我们将在GitHub中使用我们的`packtci`([https://github.com/packtci](https://github.com/packtci))
    Github用户创建一个新的存储库。您可以在[https://github.com/packtci/go-template-example-with-circle-ci](https://github.com/packtci/go-template-example-with-circle-ci)找到新的存储库。我们还将在Golang中创建一个解析模板的函数。然后编写一个解析模板文本的测试用例，然后创建一个CircleCI
    `config.yml`文件。我们将把这些代码更改推送到GitHub，然后最终使用CircleCI设置这个新项目。
- en: Adding source files to the new repository
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将源文件添加到新的存储库
- en: 'In the new repository, we added a file called `template.go` and here is the
    function we will test:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的存储库中，我们添加了一个名为`template.go`的文件，这是我们将要测试的函数：
- en: '[PRE9]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We added the following unit test case to test the `parseTemplate` function
    in the `template_test.go` file:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`template_test.go`文件中添加了以下单元测试用例来测试`parseTemplate`函数：
- en: '[PRE10]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We then added the following CircleCI YML script to the repository:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将以下CircleCI YML脚本添加到存储库中：
- en: '[PRE11]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The first thing to add in a CircleCI YML script is the version ([https://circleci.com/docs/2.0/configuration-reference/#version](https://circleci.com/docs/2.0/configuration-reference/#version))
    field. This is a required field to add, and at the moment **version 1** is still
    supported but will soon become deprecated so it is advised to use **version 2** of
    the CircleCI YML syntax. You can read more about this in the following CircleCI
    blog post: [https://circleci.com/blog/sunsetting-1-0/](https://circleci.com/blog/sunsetting-1-0/).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在CircleCI YML脚本中添加的第一件事是版本([https://circleci.com/docs/2.0/configuration-reference/#version](https://circleci.com/docs/2.0/configuration-reference/#version))字段。这是一个必填字段，目前**版本1**仍然受支持，但很快将被弃用，因此建议使用CircleCI
    YML语法的**版本2**。您可以在以下CircleCI博客文章中了解更多信息：[https://circleci.com/blog/sunsetting-1-0/](https://circleci.com/blog/sunsetting-1-0/)。
- en: The next thing we have in this `config.yml` script is the jobs ([https://circleci.com/docs/2.0/configuration-reference/#jobs](https://circleci.com/docs/2.0/configuration-reference/#jobs))
    field, which is comprised of one or more named jobs. In our case, we have one
    named job called build and this build job is required if we are not using the
    workflows field. We will discuss this in greater detail in later chapters.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`config.yml`脚本中，我们接下来要讨论的是作业([https://circleci.com/docs/2.0/configuration-reference/#jobs](https://circleci.com/docs/2.0/configuration-reference/#jobs))字段，它由一个或多个命名作业组成。在我们的情况下，我们有一个名为build的作业，如果我们不使用workflows字段，则需要这个构建作业。我们将在后面的章节中更详细地讨论这个问题。
- en: We then have a field called `docker`, which has a language image for Golang.
    We can also have a service image to run a particular service, which we will discuss
    in later chapters.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有一个名为`docker`的字段，其中包含了Golang的语言镜像。我们还可以有一个服务镜像来运行特定的服务，这将在后面的章节中讨论。
- en: We then have a field called `steps`, which defines the steps we want to execute
    in our CircleCI build. Notice that we have three field entries in the `steps`
    field, which are `checkout` and two `run` ([https://circleci.com/docs/2.0/configuration-reference/#jobs](https://circleci.com/docs/2.0/configuration-reference/#jobs))
    commands. The run commands have a name and a command but you can also omit a name
    and just give a command.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有一个名为`steps`的字段，它定义了我们想要在CircleCI构建中执行的步骤。请注意，`steps`字段中有三个字段条目，分别是`checkout`和两个`run`
    ([https://circleci.com/docs/2.0/configuration-reference/#jobs](https://circleci.com/docs/2.0/configuration-reference/#jobs))
    命令。run命令有一个名称和一个命令，但您也可以省略名称，只给出一个命令。
- en: CircleCI build job for the new repository
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新存储库的CircleCI构建作业
- en: 'The following screenshot shows that the CircleCI build passed:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示CircleCI构建已通过：
- en: '![](assets/e082879b-17e6-4fbb-a726-131992ca9edc.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e082879b-17e6-4fbb-a726-131992ca9edc.png)'
- en: 'Here are the steps in the build job:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是构建作业中的步骤：
- en: '![](assets/60506a6b-8f14-41a5-93ba-477a53144542.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/60506a6b-8f14-41a5-93ba-477a53144542.png)'
- en: Notice here that there is an additional step called Spin up Environment. This
    step creates a new build environment and, for our build in particular, it creates
    a Golang Docker image and then sets some CircleCI-specific environment variables.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里有一个额外的步骤称为Spin up Environment。此步骤创建一个新的构建环境，特别是对于我们的构建，它创建一个Golang Docker镜像，然后设置一些特定于CircleCI的环境变量。
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the differences between CircleCI and Travis CI and
    covered the prerequisites of CircleCI. We created a new Bitbucket account and
    explained the basics of the Bitbucket UI and where to upload your SSH keys for
    repository access in Bitbucket. We then set up CircleCI in GitHub and Bitbucket
    and explained parts of the CircleCI web application and how to navigate around
    it. We finished by giving a brief overview of the CircleCI YAML configuration
    syntax. In the next chapter, we will go over the CircleCI commands and go over
    some more advanced topics in CircleCI, such as workflows.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了CircleCI和Travis CI之间的区别，并介绍了CircleCI的先决条件。我们创建了一个新的Bitbucket帐户，并解释了Bitbucket
    UI的基础知识以及在Bitbucket中上传SSH密钥以访问存储库的位置。然后我们在GitHub和Bitbucket中设置了CircleCI，并解释了CircleCI
    Web应用程序的部分内容以及如何在其中导航。最后，我们简要概述了CircleCI YAML配置语法。在下一章中，我们将介绍CircleCI命令，并介绍CircleCI的一些更高级主题，例如工作流程。
- en: Questions
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the primary difference between Jenkins and Travis CI?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins和Travis CI之间的主要区别是什么？
- en: Can CircleCI work in both Bitbucket and GitHub?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CircleCI可以在Bitbucket和GitHub中都使用吗？
- en: Where do you set up a repository in CircleCI?
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CircleCI中如何设置存储库？
- en: How do you view build jobs in CircleCI?
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在CircleCI中查看构建作业？
- en: Which build tool did we use in the `java-summer` repository in Bitbucket?
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在Bitbucket的`java-summer`存储库中使用了哪个构建工具？
- en: Should you be using version 1 of the CircleCI syntax?
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该使用CircleCI语法的版本1吗？
- en: In what field do we enter our build language in CircleCI `config.yml` script?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CircleCI的`config.yml`脚本中，我们在哪个字段中输入我们的构建语言？
- en: Further reading
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: You can further explore concepts in CircleCI by looking at the official CircleCI
    documentation at [https://circleci.com/docs/2.0/.](https://circleci.com/docs/2.0/)
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查看[https://circleci.com/docs/2.0/.](https://circleci.com/docs/2.0/)官方CircleCI文档，进一步探索CircleCI的概念。
