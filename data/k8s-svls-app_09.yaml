- en: Looking at OpenFaaS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看OpenFaaS
- en: The final platform we are going to be looking at is called OpenFaaS. This is
    a relatively new project and has only gained support for Kubernetes, so we will
    not be going into too much detail. However, the project is gaining a lot of traction
    and supporters, so I believe it is important we mention it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要看的最后一个平台叫做OpenFaaS。这是一个相对较新的项目，只支持Kubernetes，所以我们不会详细介绍。然而，该项目正在获得很多关注和支持者，因此我认为我们有必要提到它。
- en: 'In this chapter we will look at:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到：
- en: What is OpenFaaS and who made it?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是OpenFaaS，由谁制作？
- en: Installing OpenFaaS locally using Minikube
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Minikube在本地安装OpenFaaS
- en: An introduction to OpenFaaS
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenFaaS简介
- en: OpenFaaS was started in December 2016 by Alex Ellis, just over a year to the
    day before I am writing this. Initially, it was designed to work with Docker swarm.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: OpenFaaS是由Alex Ellis于2016年12月开始的，就在我写这篇文章的一年多前。最初，它是设计用于与Docker swarm一起工作的。
- en: Docker swarm is Docker's own clustering technology; it allows you to link some
    hosts running the Docker Engine together. On the face of it, Docker swarm is quite
    similar to Kubernetes. However, the further you delve into the workings of both
    technologies, you will find that they not only work differently, but also have
    been designed to fill different gaps.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Docker swarm是Docker自己的集群技术；它允许您将运行Docker Engine的一些主机连接在一起。从表面上看，Docker swarm与Kubernetes非常相似。然而，当你深入研究这两种技术的工作原理时，你会发现它们不仅工作方式不同，而且设计目的也不同。
- en: Since its first commit in December 2016, OpenFaaS has gotten a lot of attention
    from the Docker world. Ellis and the other OpenFaaS community members have spoken
    at DockerCon Europe, Moby Summit, KubeCon, and Gluecon, as well as numerous meetups
    over the course of the last 12 months. OpenFaaS was also included in the InfoWorld
    Bossie Awards 2017 as one of the best cloud-computing software projects of 2017.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 自2016年12月的第一次提交以来，OpenFaaS在Docker世界中引起了很多关注。Ellis和其他OpenFaaS社区成员曾在DockerCon
    Europe、Moby Summit、KubeCon和Gluecon以及过去12个月的众多聚会上发表讲话。OpenFaaS还被列入了InfoWorld Bossie
    Awards 2017，被评为2017年最佳云计算软件项目之一。
- en: OpenFaaS is probably the most feature-rich Function as a Service offering, and
    it supports Docker swarm, so it made sense that a Kubernetes version of the software
    would eventually be released—this Kubernetes version is called **faas-netes**
    and it had its first commit in July 2017.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: OpenFaaS可能是功能最丰富的函数即服务提供商，它支持Docker swarm，因此很合理地，软件的Kubernetes版本最终会发布——这个Kubernetes版本被称为**faas-netes**，它在2017年7月进行了第一次提交。
- en: Running OpenFaaS locally
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地运行OpenFaaS
- en: Rather than looking at OpenFaaS on Docker swarm and doing a comparison between
    running the service on Kubernetes and Docker swarm, we are going to dive straight
    in and install OpenFaaS on Kubernetes. Like all of the tools we have covered,
    we are going to need a command-line client, so we are going to start by installing
    it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 与其查看Docker swarm上的OpenFaaS并对比在Kubernetes和Docker swarm上运行服务，我们将直接深入并在Kubernetes上安装OpenFaaS。就像我们涵盖的所有工具一样，我们需要一个命令行客户端，所以我们将从安装它开始。
- en: The OpenFaaS command-line client
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenFaaS命令行客户端
- en: The OpenFaaS command-line client is available for our three operating systems.
    Let's work through installing it on each, starting with macOS High Sierra.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: OpenFaaS命令行客户端适用于我们的三个操作系统。让我们逐个安装它，从macOS High Sierra开始。
- en: 'As you may have already guessed, we are going to be using Homebrew for this.
    To install the client, simply run the following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经猜到的那样，我们将使用Homebrew来完成这个任务。要安装客户端，只需运行以下命令：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'For Ubuntu 17.04, the CLI can be installed using the OpenFaaS CLI installation
    script, which you can run directly from GitHub by running the following command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Ubuntu 17.04，可以使用OpenFaaS CLI安装脚本来安装CLI，您可以通过运行以下命令直接从GitHub运行：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This script will also update the installed version of faas-cli if you are running
    an older version.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行的是旧版本，此脚本还将更新已安装的faas-cli版本。
- en: 'To install the CLI on Windows 10 Professional, first of all open a PowerShell
    window as the admin user; you can do this by selecting Run as Administrator from
    the PowerShell menu in the taskbar. Once open, you should see that you are in
    the `C:\WINDOWS\system32` folder, if you aren''t, then run the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows 10专业版上安装CLI，首先以管理员用户身份打开PowerShell窗口；您可以通过从任务栏中的PowerShell菜单中选择以管理员身份运行来执行此操作。一旦打开，您应该看到您在`C:\WINDOWS\system32`文件夹中，如果没有，那么运行以下命令：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once you are in the `C:\WINDOWS\system32` folder, you can download the OpenFaaS
    CLI by running the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您在`C:\WINDOWS\system32`文件夹中，您可以通过运行以下命令下载OpenFaaS CLI：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can find details on the latest release of the OpenFaaS CLI on the project's
    GitHub release page, which is at [https://github.com/openfaas/faas-cli/releases/](https://github.com/openfaas/faas-cli/releases/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在项目的GitHub发布页面上找到OpenFaaS CLI的最新版本详情，网址为[https://github.com/openfaas/faas-cli/releases/](https://github.com/openfaas/faas-cli/releases/)。
- en: 'Once installed, you should be able to run the following command to confirm
    the version number of the CLI installed:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您应该能够运行以下命令来确认已安装的CLI的版本号：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](assets/755b0199-5cc8-4cd0-8698-12a3e276678e.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/755b0199-5cc8-4cd0-8698-12a3e276678e.png)'
- en: Docker
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker
- en: Next up, we need to locally install Docker. Although I said at the start of
    this section that we would not be installing on Docker swarm, OpenFaaS still uses
    the Docker Engine, so we need it installed locally.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在本地安装Docker。虽然我在本节开头说我们不会在Docker swarm上安装，但OpenFaaS仍然使用Docker Engine，所以我们需要在本地安装它。
- en: 'If you are running Ubuntu 17.04, you can install Docker using the installation
    script by Docker, by running the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行Ubuntu 17.04，可以通过运行以下命令使用Docker的安装脚本来安装Docker：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To install Docker on macOS High Sierra, we can install it using Homebrew and
    Cask, by running:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要在macOS High Sierra上安装Docker，可以使用Homebrew和Cask进行安装，运行：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For Windows 10 Professional users, you can use Chocolatey and run:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows 10专业版用户，您可以使用Chocolatey并运行：
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once you have installed Docker for macOS and Docker for Windows, you will need
    to open the Docker application to complete the installation. If you don't, then
    Docker will not start and none of the examples we are going to be using Docker
    for later in the chapter will work. It will take a few minutes to start at first
    as it needs to download and configure a small virtual machine.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Docker for macOS和Docker for Windows之后，您需要打开Docker应用程序来完成安装。如果不这样做，Docker将无法启动，我们稍后在本章中将使用Docker的示例也将无法工作。首次启动需要几分钟，因为它需要下载和配置一个小型虚拟机。
- en: Starting the Minikube cluster
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动Minikube集群
- en: 'Now that we have the OpenFaaS CLI installed, we can go ahead and launch a single-node
    Kubernetes cluster using Minikube. To do this, run the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了OpenFaaS CLI，我们可以继续使用Minikube启动单节点Kubernetes集群。要做到这一点，请运行以下命令：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will start the cluster and configure our local Kubernetes CLI to communicate
    with it, unless you have Windows 10 Professional installed, and then you might
    see a message like the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动集群并配置我们的本地Kubernetes CLI与之通信，除非您安装了Windows 10专业版，然后您可能会看到以下消息：
- en: '![](assets/a9ca19c0-9696-454a-903a-0fe6de27f3c4.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a9ca19c0-9696-454a-903a-0fe6de27f3c4.png)'
- en: Part of the Docker for Windows installation enables Hyper-V, and as we found
    out in [Chapter 3](7836cfd9-bce3-4d77-9331-f8dda5a31999.xhtml), *Installing Kubernetes
    Locally*, when we installed Minikube originally, you cannot run VirtualBox and
    Hyper-V at the same time. To get around this, we need to configure Minikube to
    use Hyper-V to power the virtualization rather than VirtualBox.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Docker for Windows安装的一部分启用了Hyper-V，正如我们在[第3章](7836cfd9-bce3-4d77-9331-f8dda5a31999.xhtml)中发现的，*本地安装Kubernetes*，当我们最初安装Minikube时，您不能同时运行VirtualBox和Hyper-V。为了解决这个问题，我们需要配置Minikube使用Hyper-V来支持虚拟化，而不是VirtualBox。
- en: 'To do this, open the Hyper-V Manager, select the Virtual Switch Manager, and
    then create a new external virtual switch. Call it `minikube` as in the following
    screenshot, and make sure that the Allow management operating system to share
    this network adapter checkbox is selected:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，打开Hyper-V Manager，选择Virtual Switch Manager，然后创建一个新的外部虚拟交换机。如下截图中所示，将其命名为`minikube`，并确保选中“允许管理操作系统共享此网络适配器”复选框：
- en: '![](assets/4cccc3ff-5003-4021-a6f2-155c57d1eee4.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4cccc3ff-5003-4021-a6f2-155c57d1eee4.png)'
- en: 'Once you have created the virtual switch, reboot your machine. Once your machine
    is back online, open a PowerShell window with administrator privileges and run
    the following command to start the single-node Kubernetes cluster:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了虚拟交换机后，重新启动您的机器。一旦您的机器恢复在线，以管理员权限打开一个PowerShell窗口，并运行以下命令启动单节点Kubernetes集群：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the Hyper-V Manager, you should be able to see your `minikube` VM has a
    status of Running, alongside the Docker VM, which is listed as `MobyLinuxVM`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在Hyper-V Manager中，您应该能够看到您的`minikube`虚拟机的状态为Running，以及列为`MobyLinuxVM`的Docker虚拟机：
- en: '![](assets/0fa3f169-963a-4e0c-a308-eeeba8f82d05.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0fa3f169-963a-4e0c-a308-eeeba8f82d05.png)'
- en: You should now be able to proceed with the rest of the instructions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该可以继续进行其余的指令了。
- en: Installing OpenFaaS using Helm
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Helm安装OpenFaaS
- en: 'Now we have the cluster launched, we need to install the OpenFaaS components.
    We are going to be using Helm for this. If you didn''t install Helm during the
    previous chapter please refer to the installation instructions there. As with
    a Helm installation, we need to initialize it, which installs the server-side
    component Tiller. To do this, run the following command:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动了集群，我们需要安装OpenFaaS组件。我们将使用Helm来进行安装。如果您在上一章没有安装Helm，请参考那里的安装说明。与Helm安装一样，我们需要初始化它，这将安装服务器端组件Tiller。要做到这一点，请运行以下命令：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now that we have Helm configured on our local, single-node Kubernetes cluster,
    we need to download a copy of the faas-netes code repository from GitHub. To do
    this, run either of the following commands:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在本地单节点Kubernetes集群上配置了Helm，我们需要从GitHub下载faas-netes代码库的副本。为此，请运行以下命令之一：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can also download a copy as a ZIP file from [https://github.com/openfaas/faas-netes](https://github.com/openfaas/faas-netes).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从[https://github.com/openfaas/faas-netes](https://github.com/openfaas/faas-netes)下载ZIP文件的副本。
- en: 'Once downloaded, we can install OpenFaaS with Helm using the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 下载后，我们可以使用以下命令使用Helm安装OpenFaaS：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This will return quite a bit of output, but the only part that you really to
    need to pay attention to is the last line, which should contain something similar
    to the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回相当多的输出，但您真正需要关注的部分只有最后一行，其中应该包含类似于以下内容：
- en: '![](assets/fe5b30fa-a8f5-4736-809d-94d7e9feeee1.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fe5b30fa-a8f5-4736-809d-94d7e9feeee1.png)'
- en: 'After a minute or two, you can check the status of the installation by running
    the command at the end of the output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一两分钟后，您可以通过运行输出末尾的命令来检查安装的状态：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You should see something like the following Terminal output:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到类似以下终端输出的内容：
- en: '![](assets/f5e2ab89-6887-493d-a321-260e301d43d7.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f5e2ab89-6887-493d-a321-260e301d43d7.png)'
- en: Now that we have OpenFaaS installed and available, we can look at launching
    a hello world example.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装并可用OpenFaaS，我们可以尝试启动一个hello world示例。
- en: Hello world!
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好世界！
- en: 'Like the other services we have covered, we will be running a quick hello world
    example. This will introduce you to the difference between OpenFaaS and the other
    tools. We will also find out why we needed to install Docker. To start with, run
    the following commands:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们涵盖的其他服务一样，我们将运行一个快速的hello world示例。这将让您了解OpenFaaS和其他工具之间的区别。我们还将找出为什么需要安装Docker。首先，运行以下命令：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will create a folder called `hello` and then within it, a file called
    `hello.yml` and a few folders will be created:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`hello`的文件夹，然后在其中创建一个名为`hello.yml`的文件和一些文件夹：
- en: '![](assets/97bc33e6-f93c-4191-ad65-571393f4f11b.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/97bc33e6-f93c-4191-ad65-571393f4f11b.png)'
- en: 'Next, we need to log into a Docker Hub account. To do this, run the following
    command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要登录到Docker Hub帐户。要做到这一点，请运行以下命令：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you do not have a Docker Hub account, you can sign-up for one at [https://hub.docker.com/](https://hub.docker.com/)
    for free:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有Docker Hub帐户，可以免费在[https://hub.docker.com/](https://hub.docker.com/)注册一个：
- en: '![](assets/44b3b777-a1a9-4342-8432-c6ab97d093d7.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/44b3b777-a1a9-4342-8432-c6ab97d093d7.png)'
- en: 'Opening `hello.yml` in a text editor will show you the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本编辑器中打开`hello.yml`将显示以下内容：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Edit the file so that the `image` reads `your-dockerhub-username/hello`. In
    my case, this was `russmckendrick/hello`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑文件，使`image`读取`your-dockerhub-username/hello`。在我的情况下，这是`russmckendrick/hello`。
- en: 'Once edited, run the following command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑后，运行以下命令：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will build a container locally, using your local Docker Engine installation
    containing the code in the `/hello` folder:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在本地构建一个包含`/hello`文件夹中代码的容器，使用您本地的Docker Engine安装：
- en: '![](assets/ff59dada-a3d9-4e38-bfee-d58b5a02f201.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ff59dada-a3d9-4e38-bfee-d58b5a02f201.png)'
- en: 'Now we have the container image built, which you can see by running the following:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了容器镜像，您可以通过运行以下命令来查看：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](assets/9145c33e-e82d-4e8c-8942-8bb53f190389.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9145c33e-e82d-4e8c-8942-8bb53f190389.png)'
- en: 'We can now push the image to our Docker Hub account by running the following:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过运行以下命令将图像推送到我们的Docker Hub帐户：
- en: '[PRE19]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](assets/f757aea0-a857-4e24-a72b-02eb57ce3bb5.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f757aea0-a857-4e24-a72b-02eb57ce3bb5.png)'
- en: 'Now that we have the container image containing our function uploaded to the
    Docker Hub, you can see this at [https://hub.docker.com/r/russmckendrick/hello/](https://hub.docker.com/r/russmckendrick/hello/):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将包含我们函数的容器镜像上传到Docker Hub，您可以在[https://hub.docker.com/r/russmckendrick/hello/](https://hub.docker.com/r/russmckendrick/hello/)上看到：
- en: '![](assets/559b3361-a14c-44c8-8f59-0e9532aeb1b5.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/559b3361-a14c-44c8-8f59-0e9532aeb1b5.png)'
- en: 'We can launch our function, but to do this, first of all we need to put the
    IP address of our Minikube VM into a variable so when we run the OpenFaaS CLI,
    it knows where it is connecting to:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以启动我们的函数，但是首先我们需要将Minikube VM的IP地址放入一个变量中，这样当我们运行OpenFaaS CLI时，它就知道要连接到哪里：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now we can launch our function using the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用以下命令启动我们的函数：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](assets/a63b1b53-b601-43de-8ee6-41e64d3ec566.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a63b1b53-b601-43de-8ee6-41e64d3ec566.png)'
- en: 'We can invoke the function by running:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令来调用该函数：
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This should return the word `test`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该返回单词`test`：
- en: '![](assets/1ada0bc1-891a-4eaa-9188-e094f01868ba.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1ada0bc1-891a-4eaa-9188-e094f01868ba.png)'
- en: 'We can also check the status of the function by running:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过运行以下命令来检查函数的状态：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](assets/a5dd67fd-8896-4dbb-b242-e61614d8df70.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a5dd67fd-8896-4dbb-b242-e61614d8df70.png)'
- en: As you can see, we have a single copy of the function running, and it has been
    called once. Before we move onto the next section, run the function a few more
    times.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有一个正在运行的函数副本，并且已被调用一次。在我们进入下一节之前，再运行几次该函数。
- en: The OpenFaaS UI and store
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenFaaS UI和store
- en: 'OpenFaaS comes with a web-based user interface, which can be accessed by running
    the following command on macOS and Ubuntu:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: OpenFaaS带有基于Web的用户界面，可以通过在macOS和Ubuntu上运行以下命令来访问：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Windows users can run:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户可以运行：
- en: '[PRE25]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This will open the OpenFaaS web UI, where you should see the `hello` function
    we created in the previous section. Selecting the function, entering some text
    in the Request Body form field, and then clicking on INVOKE will call the function,
    as you can see from the following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开OpenFaaS Web UI，在那里您应该看到我们在上一节中创建的`hello`函数。选择该函数，在请求正文表单字段中输入一些文本，然后点击调用将调用该函数，如下截图所示：
- en: '![](assets/24a2b453-9d34-4971-b127-5e8b4697d243.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/24a2b453-9d34-4971-b127-5e8b4697d243.png)'
- en: 'The OpenFaaS UI also includes a store, where you can deploy community-curated
    functions directly to your OpenFaaS installation. To access the store, click on
    the Deploy New Function button and you will be presented with a list of functions
    that you can deploy:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: OpenFaaS UI还包括一个商店，您可以直接将社区策划的函数部署到您的OpenFaaS安装中。要访问商店，请单击“部署新函数”按钮，然后您将看到可以部署的函数列表：
- en: '![](assets/9ef526f6-3ee4-46c4-9adc-ed9bedd0f095.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9ef526f6-3ee4-46c4-9adc-ed9bedd0f095.png)'
- en: 'Select the `mememachine` function, and click on the DEPLOY button. Once deployed,
    you should see a function called `mememachine` under your `hello` function, select
    this and in the Request Body form field enter the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`mememachine`函数，然后点击DEPLOY按钮。部署后，您应该在`hello`函数下看到一个名为`mememachine`的函数，选择它，在请求正文表单字段中输入以下内容：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Select Download and then click INVOKE:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 选择下载，然后点击调用：
- en: '![](assets/685d551a-0eb9-4ad3-b25d-aeebf9f2b90f.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/685d551a-0eb9-4ad3-b25d-aeebf9f2b90f.png)'
- en: 'After a second or two, a file will be downloaded and on opening it you should
    see something like the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一两秒后，将下载一个文件，打开它后，您应该看到类似以下截图的内容：
- en: '![](assets/6964eb6f-b4f3-4a65-a6d3-dcfd31702831.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6964eb6f-b4f3-4a65-a6d3-dcfd31702831.png)'
- en: As you can see, we have the success baby meme, which is defined in the image
    field with the URL [http://i.imgflip.com/qiefv.jpg](http://i.imgflip.com/qiefv.jpg),
    and the two lines of text we passed to the `top` and `bottom` variables.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们有成功宝宝的迷因，它在图像字段中以URL [http://i.imgflip.com/qiefv.jpg](http://i.imgflip.com/qiefv.jpg)定义，并且我们传递给`top`和`bottom`变量的两行文本。
- en: The source code for the function can be found at [https://github.com/faas-and-furious/openfaas-mememachine/](https://github.com/faas-and-furious/openfaas-mememachine/).
    As you can see, it is a Node.js container that downloads the image, adds the text,
    and then returns the content of the new image. The source for most of the functions
    available in the OpenFaaS store can be found on the *FaaS and Furious* GitHub
    repository at [https://github.com/faas-and-furious/](https://github.com/faas-and-furious/).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数的源代码可以在[https://github.com/faas-and-furious/openfaas-mememachine/](https://github.com/faas-and-furious/openfaas-mememachine/)找到。正如您所看到的，它是一个Node.js容器，用于下载图像，添加文本，然后返回新图像的内容。OpenFaaS商店中大多数函数的源代码可以在*FaaS
    and Furious* GitHub存储库中找到[https://github.com/faas-and-furious/](https://github.com/faas-and-furious/)。
- en: Prometheus
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Prometheus
- en: When we first launched OpenFaaS, you may have noticed that one of the deployments
    was called Prometheus.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们第一次推出OpenFaaS时，您可能已经注意到其中一个部署被称为Prometheus。
- en: Prometheus is one of the Cloud Native Computing Foundation projects we have
    been discussing in previous chapters. Originally built by SoundCloud, it has quickly
    become the new standard for collecting metrics on container-based installations—you
    can find out more at the project's website at [https://prometheus.io/](https://prometheus.io/).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus是我们在前几章中讨论过的云原生计算基金会项目之一。最初由SoundCloud构建，它迅速成为基于容器的安装收集指标的新标准-您可以在项目网站[https://prometheus.io/](https://prometheus.io/)上找到更多信息。
- en: 'This is logging some basic stats for the OpenFaaS gateway we have been calling
    throughout the chapter; you can open Prometheus by running one of the two commands
    (remember, `open` does not work on Windows):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这是记录我们在整个章节中一直在调用的OpenFaaS网关的一些基本统计信息；您可以通过运行以下两个命令之一来打开Prometheus（请记住，`open`在Windows上不起作用）：
- en: '[PRE27]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Once opened, you will be presented with a blank page. Enter the following into
    the textbox:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 打开后，您将看到一个空白页面。在文本框中输入以下内容：
- en: '[PRE28]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'After clicking the Execute button, you will see a graph, which breaks down
    the number of times each function has been called, along with the HTTP status
    of each function call:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“执行”按钮后，您将看到一个图表，其中详细说明了每个函数被调用的次数，以及每个函数调用的HTTP状态：
- en: '![](assets/02f14ab3-6331-44ed-94d9-1cbd16893c6e.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/02f14ab3-6331-44ed-94d9-1cbd16893c6e.png)'
- en: As you can see from the preceding graph, there were a few errors when I ran
    the `mememachine` function because the image size was too big, causing the function
    to crash. There are plenty of other metrics being captured. I would recommend
    having a click around and looking at some of the graphs.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的图表中可以看出，当我运行`mememachine`函数时出现了一些错误，因为镜像大小太大，导致函数崩溃。还有很多其他指标被捕获。我建议您点击一下，看看一些图表。
- en: 'Once you have finished with your OpenFaaS installation, you can remove the
    installation by running:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 完成OpenFaaS安装后，可以通过运行以下命令来删除安装：
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: OpenFaaS is a fast-growing Functions as a Service platform, and as already mentioned,
    it is getting a lot of community support behind it. It is unique in that it interacts
    with Docker locally to build and push images to the Docker Hub, where the other
    tools we have been using are using Kubernetes to inject our functions into containers
    and runtime.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: OpenFaaS是一个快速增长的函数即服务平台，正如前面提到的，它得到了很多社区支持。它的独特之处在于它与Docker本地交互，用于构建和推送镜像到Docker
    Hub，而我们之前使用的其他工具是使用Kubernetes将我们的函数注入到容器和运行时中。
- en: This is the advantage of being able to easily distribute container images for
    use with OpenFaaS, as demonstrated by the `mememachine` example we worked through
    and the other functions in the OpenFaaS store.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是能够轻松分发容器镜像供OpenFaaS使用的优势，正如我们通过`mememachine`示例和OpenFaaS商店中的其他函数所演示的。
- en: One of the things we didn't do in this chapter is launch Kubernetes cluster
    in a public cloud and deploy OpenFaaS. One of the reasons for this is, to be able
    to access it, we would have had to make it available to our host machine via a
    public IP address, which would have exposed our installation to the world. In
    the next chapter, we are going to look at the security considerations of running
    our Kubernetes clusters in public clouds, among other things.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们没有做的一件事是在公共云中启动Kubernetes集群并部署OpenFaaS。其中一个原因是，为了能够访问它，我们必须通过公共IP地址使其对我们的主机机器可用，这将使我们的安装暴露给世界。在下一章中，我们将讨论在公共云中运行我们的Kubernetes集群时的安全考虑，以及其他事项。
