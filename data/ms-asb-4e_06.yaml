- en: '*Chapter 5*: Infrastructure Management for Enterprises with AWX'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第5章*：使用AWX进行企业基础设施管理'
- en: It is clear that Ansible is an incredibly powerful and versatile automation
    tool, lending itself well to managing an entire estate of servers and network
    devices. Mundane, repetitive tasks can be made repeatable and straightforward,
    saving a great deal of time! Obviously, this is of great benefit in a corporate
    environment. However, this power comes at a price. If everyone has their own copy
    of Ansible on their own machines, how do you know who ran what playbook, and when?
    How do you ensure that all playbooks are correctly stored and version-controlled?
    Furthermore, how do you prevent the proliferation of superuser-level access credentials
    across your organization, while benefiting from the power of Ansible?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 可以明显看出，Ansible是一个非常强大和多功能的自动化工具，非常适合管理整个服务器和网络设备。单调、重复的任务可以变得可重复和简单，节省大量时间！显然，在企业环境中，这是非常有益的。然而，这种力量是有代价的。如果每个人都在自己的机器上有自己的Ansible副本，那么你怎么知道谁运行了什么playbook，以及何时运行的？如何确保所有playbooks都被正确存储和进行版本控制？此外，你如何防止超级用户级别的访问凭据在你的组织中泛滥，同时又能从Ansible的强大功能中受益？
- en: The answer to these questions comes in the form of AWX, an open-source enterprise
    management system for Ansible. AWX is the open-source, upstream version of the
    commercial Ansible Tower software available from Red Hat, and it offers virtually
    the same features and benefits, but without the support or product release cycle
    that Red Hat offers. AWX is a powerful, feature-rich product that includes not
    only a GUI to make it easy for non-Ansible users to run playbooks, but also a
    complete API for integration into larger workflows and CI/CD pipelines.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题的答案以AWX的形式呈现，它是一个用于Ansible的开源企业管理系统。AWX是商业Ansible Tower软件的开源上游版本，可从Red Hat获得，它提供几乎相同的功能和好处，但没有Red
    Hat提供的支持或产品发布周期。AWX是一个功能强大、功能丰富的产品，不仅包括GUI，使非Ansible用户可以轻松运行playbooks，还包括完整的API，可集成到更大的工作流和CI/CD流水线中。
- en: 'In this chapter, we will give you a solid foundation for installing and using
    AWX, specifically covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为您提供安装和使用AWX的坚实基础，具体涵盖以下主题：
- en: Getting AWX up and running
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动和运行AWX
- en: Integrating AWX with your first playbook
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将AWX与您的第一个playbook集成
- en: Going beyond the basics
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超越基础知识
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the examples presented in this chapter, you will need a Linux machine
    running Ansible 4.3 or newer. Almost any flavor of Linux should do; for those
    interested in specifics, all the code presented in this chapter was tested on
    Ubuntu Server 20.04 LTS unless stated otherwise, and on Ansible 4.3\. The example
    code that accompanies this chapter can be downloaded from GitHub at this URL:
    [https://github.com/PacktPublishing/Mastering-Ansible-Fourth-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/Mastering-Ansible-Fourth-Edition/tree/main/Chapter05).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章中提出的示例，您需要一台运行Ansible 4.3或更新版本的Linux机器。几乎任何Linux版本都可以；对于那些对具体细节感兴趣的人，本章中提供的所有代码都是在Ubuntu
    Server 20.04 LTS上测试的，除非另有说明，并且在Ansible 4.3上测试。本章附带的示例代码可以从GitHub的以下网址下载：[https://github.com/PacktPublishing/Mastering-Ansible-Fourth-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/Mastering-Ansible-Fourth-Edition/tree/main/Chapter05)。
- en: 'Check out the following video to see the Code in Action video from Packt: [https://bit.ly/3ndx73Q](https://bit.ly/3ndx73Q)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解来自Packt的实际代码演示视频：[https://bit.ly/3ndx73Q](https://bit.ly/3ndx73Q)
- en: Getting AWX up and running
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动和运行AWX
- en: 'Before we get stuck into installing AWX, it is worth briefly exploring what
    AWX is, and what it isn''t. AWX is a tool to be employed alongside Ansible. It
    does not duplicate or replicate, in any way, the features of Ansible. Indeed,
    when Ansible playbooks are run from AWX, the `ansible-playbook` executable is
    being called behind the scenes. AWX should be considered a complementary tool
    that adds the following benefits, on which many enterprises depend:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论安装AWX之前，值得简要探讨一下AWX是什么，以及它不是什么。AWX是一个与Ansible并用的工具。它不以任何方式复制或复制Ansible的功能。事实上，当从AWX运行Ansible
    playbooks时，幕后实际上是调用了`ansible-playbook`可执行文件。AWX应被视为一个补充工具，它增加了许多企业所依赖的以下好处：
- en: Rich **role-based access control** (**RBAC**)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 丰富的基于角色的访问控制（RBAC）
- en: Integration with centralized login services (for example, LDAP or AD)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与集中式登录服务（例如LDAP或AD）集成
- en: Secure credential management
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全凭据管理
- en: Auditability
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可审计性
- en: Accountability
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问责制
- en: Lower barrier to entry for new operators
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降低新操作员的准入门槛
- en: Improved management of playbook version control
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进playbook版本控制的管理
- en: Fully featured API
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的API
- en: Most of the AWX code runs in a set of Linux containers. However, the standard
    installation method has changed since the last edition of the book, and it is
    now preferred that you deploy AWX on Kubernetes. If you are already proficient
    at Kubernetes, you may wish to try and deploy this in your own environment, as
    AWX should run on Red Hat's OpenShift, the open-source OKD, and any one of the
    many other existing flavors of Kubernetes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分AWX代码在一组Linux容器中运行。然而，自上一版书以来，标准安装方法已经改变，现在更倾向于在Kubernetes上部署AWX。如果您已经精通Kubernetes，您可能希望尝试在自己的环境中部署，因为AWX应该可以在Red
    Hat的OpenShift、开源OKD以及许多其他现有的Kubernetes版本上运行。
- en: If, however, you are not proficient in Kubernetes, or you are looking for some
    pointers on how to get started, then we will walk you through a complete installation
    of AWX from scratch in this part of the chapter. We will base this on the excellent
    `microk8s` distribution, which you can get up and running on a single node on
    Ubuntu Server with just one command!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您不精通Kubernetes，或者正在寻找一些入门指南，那么我们将在本章的这一部分为您详细介绍如何从头开始完整安装AWX。我们将基于出色的`microk8s`发行版进行，您可以在Ubuntu
    Server上只用一个命令即可在单个节点上启动和运行！
- en: 'Before we get started, one final note. Although Kubernetes is the preferred
    installation platform now, at the time of writing there is still an installation
    method available for Docker hosts. However, the maintainers of the AWX project
    note that this is targeted at development and test environments only, and has
    no official published release. As such, we will not cover this in this chapter.
    If you want to learn more, however, you can read the installation instructions
    at the following link: [https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md](https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，最后一点。尽管Kubernetes现在是首选的安装平台，但在撰写本文时，仍然有一个可用于Docker主机的安装方法。但是，AWX项目的维护者指出，这仅针对开发和测试环境，并没有官方发布的版本。因此，我们在本章中不会涵盖这一点。但是，如果您想了解更多，可以阅读以下链接中的安装说明：[https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md](https://github.com/ansible/awx/blob/devel/tools/docker-compose/README.md)。
- en: With that covered, let's get started on our `microk8s`-based deployment. The
    installation process outlined here assumes you are starting from an unmodified
    Ubuntu Server 20.04 installation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，让我们开始我们基于`microk8s`的部署。这里概述的安装过程假定您从未修改过的Ubuntu Server 20.04安装开始。
- en: 'First of all, let''s install `microk8s` itself, using the `snap` available
    with Ubuntu:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们安装`microk8s`本身，使用Ubuntu提供的`snap`：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The only other step required is to add your user account to the `microk8s`
    group so that you can run the remaining commands in this section without needing
    `sudo` privileges:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一需要的其他步骤是将您的用户帐户添加到`microk8s`组中，以便您可以在本节中运行剩余的命令而无需`sudo`权限：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You will need to log out and back in again for the change in group membership
    to apply to your account. Once you have done this, let''s get started on preparing
    `microk8s` for our AWX deployment. We will need the `storage`, `dns`, and `ingress`
    add-ons for our deployment, so let''s go ahead and enable them using the following
    command:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要注销并重新登录，以使组成员身份的更改应用到您的帐户。一旦您这样做了，让我们开始准备`microk8s`进行AWX部署。我们需要`storage`、`dns`和`ingress`插件来进行我们的部署，因此让我们使用以下命令启用它们：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we''re ready to install AWX Operator, which is in turn used to manage the
    rest of the installation. Installing this is as simple as running the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备安装AWX Operator，这又用于管理其余的安装。安装这个就像运行以下命令一样简单：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The command will return immediately while the installation continues in the
    background. You can check on the status of the installation with the following
    command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令将立即返回，而安装将在后台继续进行。您可以使用以下命令检查安装的状态：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `STATUS` field should say `Running` for the AWX Operator deployment once
    it is completed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`STATUS`字段应该在AWX Operator部署完成后显示`Running`。'
- en: Important note
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The previous command will clone the latest development release of AWX Operator.
    If you want to clone one of the releases, browse the *Releases* section of the
    repository, available at the following link, and check out your desired version: [https://github.com/ansible/awx-operator/releases](https://github.com/ansible/awx-operator/releases).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令将克隆AWX Operator的最新开发版本。如果您想克隆其中一个发布版，请浏览存储库的*Releases*部分，可在以下链接找到，并检出您想要的版本：[https://github.com/ansible/awx-operator/releases](https://github.com/ansible/awx-operator/releases)。
- en: 'The screenshot in *Figure 5.1* shows the output following the successful deployment
    of AWX Operator:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.1*中的屏幕截图显示了成功部署AWX Operator后的输出：'
- en: '![Figure 5.1 – The microk8s pod status following the successful deployment
    of AWX Operator'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.1 - 成功部署AWX Operator后的microk8s pod状态'
- en: '](Images/B17462_05_01.png)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_01.png)'
- en: Figure 5.1 – The microk8s pod status following the successful deployment of
    AWX Operator
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 - 成功部署AWX Operator后的microk8s pod状态
- en: 'Next, we''ll create a simple self-signed certificate for our AWX deployment.
    If you have your own certificate authority, you are of course welcome to generate
    your own certificate with the appropriate signing for your environment. If you
    are generating a self-signed certificate using the command that follows, be sure
    to replace `awx.example.org` with the hostname you have assigned to your AWX server:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为我们的AWX部署创建一个简单的自签名证书。如果您有自己的证书颁发机构，当然可以生成适合您环境的证书。如果您要使用以下命令生成自签名证书，请确保将`awx.example.org`替换为您为AWX服务器分配的主机名：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will create a secret (an object that contains a small amount of sensitive
    data) in Kubernetes containing our newly generated certificate:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在Kubernetes中创建一个包含我们新生成的证书的secret（包含少量敏感数据的对象）：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With this done, it''s time to think about storage. AWX is designed to source
    its playbooks from source control repositories such as Git, and as such, the default
    installation does not provide easy access to local playbook files. However, for
    the purposes of creating a working example in this book that everyone can follow,
    we will create a persistent volume to store local playbooks. Create a YAML file
    called `my-awx-storage.yml`, containing the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，现在是考虑存储的时候了。AWX旨在从源代码存储库（如Git）中获取其playbooks，并且因此，默认安装不提供对本地playbook文件的简单访问。但是，为了在本书中创建一个每个人都可以遵循的工作示例，我们将创建一个持久卷来存储本地playbooks。创建一个名为`my-awx-storage.yml`的YAML文件，其中包含以下内容：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the following command to create this storage using the YAML file we just
    created:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令，使用我们刚创建的YAML文件来创建这个存储：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now it''s time to deploy AWX itself. To do this, we must create another YAML
    file that describes the deployment. We''ll call this one `my-awx.yml`, and for
    our example, it should contain the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是部署AWX本身的时候了。为此，我们必须创建另一个描述部署的YAML文件。我们将称其为`my-awx.yml`，对于我们的示例，它应该包含以下内容：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Deploy AWX using this file with the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令使用此文件部署AWX：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The deployment will take a few minutes, especially the first time you run it,
    as container images have to be downloaded in the background. You can check on
    the status with the following command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 部署将需要几分钟时间，特别是第一次运行时，因为容器映像必须在后台下载。您可以使用以下命令检查状态：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When the deployment is complete, all pods should show `STATUS` as `Running`,
    as shown in *Figure 5.2*:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当部署完成时，所有pod的`STATUS`应显示为`Running`，如*图5.2*所示：
- en: '![Figure 5.2 – Kubernetes pod status after a successful AWX deployment'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.2-成功部署AWX后的Kubernetes pod状态'
- en: '](Images/B17462_05_02.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_02.jpg)'
- en: Figure 5.2 – Kubernetes pod status after a successful AWX deployment
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2-成功部署AWX后的Kubernetes pod状态
- en: 'Of course, deploying AWX is only of limited use if we are unable to access
    it. We will use the ingress add-on of Microk8s to create an ingress router so
    that we can access our AWX deployment at our chosen hostname (`awx.example.org`
    in this example), over the standard HTTPS port. Create another YAML file, this
    time called `my-awx-ingress.yml`. It should contain the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果我们无法访问AWX，部署AWX就只能有限的用途。我们将使用Microk8s的入口附加组件创建一个入口路由器，以便我们可以在我们选择的主机名（在本例中为`awx.example.org`）上访问我们的AWX部署，通过标准的HTTPS端口。创建另一个YAML文件，这次称为`my-awx-ingress.yml`。它应包含以下内容：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Deploy and then check this ingress definition with the following commands:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 部署，然后使用以下命令检查此入口定义：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you don''t see an event with the `Reason` value set to `CREATE`, you may
    have to delete and then redeploy the ingress definition as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有看到`Reason`值设置为`CREATE`的事件，您可能需要删除然后重新部署入口定义，如下所示：
- en: '[PRE14]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'A successful deployment of the ingress rule should look like that shown in
    the following figure:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 入口规则的成功部署应该看起来像下图所示：
- en: '![Figure 5.3 – A successful deployment of the ingress configuration for AWX'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.3-成功部署AWX的入口配置'
- en: '](Images/B17462_05_03.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_03.jpg)'
- en: Figure 5.3 – A successful deployment of the ingress configuration for AWX
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3-成功部署AWX的入口配置
- en: 'The default username for logging into AWX is `admin`. However, the password
    is randomly generated and stored in a secret within Kubernetes. To retrieve this
    so you can log in for the first time, run the following command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到AWX的默认用户名是`admin`。但是，密码是随机生成的并存储在Kubernetes的一个秘密中。要检索这个密码以便您第一次登录，请运行以下命令：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Congratulations! You should now be able to log into your AWX deployment by pointing
    a web browser as the hostname you chose earlier. In this example, it would be
    [https://awx.example.org](https://awx.example.org).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您现在应该能够通过浏览器登录到您之前选择的主机名的AWX部署。在本例中，它将是[https://awx.example.org](https://awx.example.org)。
- en: 'On the first run of AWX, many operations, such as building the database schema,
    are performed in the background. As such, it might initially appear that the GUI
    is not responding. If your pod statuses look healthy, simply wait, and in a few
    minutes you will see the login screen appear, as shown in the following figure:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次运行AWX时，许多操作（如构建数据库模式）都是在后台执行的。因此，最初看起来GUI没有响应。如果您的pod状态看起来健康，请耐心等待，几分钟后您将看到登录屏幕出现，如下图所示：
- en: '![Figure 5.4 – Accessing the login screen of AWX after deployment'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.4-部署AWX后访问登录屏幕'
- en: '](Images/B17462_05_04.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_04.jpg)'
- en: Figure 5.4 – Accessing the login screen of AWX after deployment
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4-部署AWX后访问登录屏幕
- en: When you first log into AWX, you will be presented with a dashboard screen and
    a menu bar down the left-hand side. It is through this menu bar that we will explore
    AWX and perform our first configuration work. Equally, it is worth noting that
    when AWX is first installed, some example content is populated to help you get
    up to speed quicker. Feel free to explore the demo content, as the examples are
    different to those given in this book.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当您第一次登录到AWX时，您将看到一个仪表板屏幕和左侧的菜单栏。通过这个菜单栏，我们将探索AWX并进行我们的第一个配置工作。同样值得注意的是，当首次安装AWX时，会填充一些示例内容，以帮助您更快地上手。请随意探索演示内容，因为示例与本书中给出的示例不同。
- en: Before we complete this section, consider the persistent volume we created earlier
    for storing our local playbooks. How do we get access to that? When using a simple
    single-node deployment of `microk8s` as we have used here, you can execute a few
    commands to query the environment and find out where the files should go.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成本节之前，考虑一下我们之前创建的用于存储本地playbooks的持久卷。我们如何访问它？当使用`microk8s`的简单单节点部署时，您可以执行一些命令来查询环境并找出文件应该放在哪里。
- en: 'First off, retrieve the name of your `hostpath-provisioner` pod. It should
    look a little something like `hostpath-provisioner-5c65fbdb4f-jcq8b`, and can
    be retrieved using the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，检索您的`hostpath-provisioner` pod的名称。它应该看起来有点像`hostpath-provisioner-5c65fbdb4f-jcq8b`，可以使用以下命令检索：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Having established this unique name, run the following command to discover
    the local directory where files are being stored for your pods. Be sure to replace
    the unique `hostpath-provisioner` name with the one from your system:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 确定了这个唯一的名称后，运行以下命令来发现文件被存储在您的pod的本地目录。确保用您系统中的唯一`hostpath-provisioner`名称替换它：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, retrieve the unique name of your persistent volume claim for your
    AWX playbooks, using the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下命令检索您的AWX playbooks的持久卷索赔的唯一名称：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Your final path will be an amalgamation of these results, including `namespace`
    (`default` in this example), and your PVC name (defined as `awx-pvc` in the `my-awx-storage.yml`
    file earlier). Thus, on my demo system, my local playbooks should be placed under
    the following directory:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您的最终路径将是这些结果的综合，包括`namespace`（在本例中为`default`），以及您的PVC名称（在之前的`my-awx-storage.yml`文件中定义为`awx-pvc`）。因此，在我的演示系统上，我的本地playbooks应放在以下目录下：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We will put some simple example playbooks into this directory later in the chapter,
    so it's worth locating it now and making a note of it so that you can access it
    easily for the later examples.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章后面将一些简单的示例操作手册放入此目录，因此现在找到它并做个笔记，以便您可以轻松地在以后的示例中访问它。
- en: With AWX up and running on Microk8s, in the next section we will look at getting
    our first playbook integrated and running with AWX.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在Microk8s上运行AWX后，我们将在下一节中查看如何将我们的第一个操作手册集成并运行在AWX中。
- en: Integrating AWX with your first playbook
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将AWX与您的第一个操作手册集成
- en: 'There is a basic four-stage process involved in getting a playbook to run from
    AWX. Once you understand this, it paves the way for more advanced usage and fuller
    integration in an enterprise environment. In this part of the chapter, we will
    master these four stages in order to get to the point where we can run our first
    simple playbook, and this will give us the building blocks to move forward with
    AWX in confidence. The four stages are as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 将操作手册集成到AWX中涉及基本的四个阶段过程。一旦您理解了这一点，就为更高级的用法和在企业环境中更完整的集成铺平了道路。在本章的这一部分，我们将掌握这四个阶段，以便达到我们可以运行我们的第一个简单操作手册的地步，这将为我们在AWX中自信地前进提供基础。这四个阶段如下：
- en: Define a project.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义项目。
- en: Define an inventory.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义清单。
- en: Define credentials.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义凭据。
- en: Define a template.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义模板。
- en: The first three stages can be performed in any order, but the template mentioned
    in the final stage pulls together the three previously created facets. Therefore,
    it must be defined last. Also, note that there does not need to be a one-to-one
    relationship between these items. Several templates can be created from one project.
    This is also the case for inventories and credentials.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个阶段可以以任何顺序执行，但最后一个阶段提到的模板将三个先前创建的方面汇集在一起。因此，它必须最后定义。还要注意，这些项目之间不需要一对一的关系。可以从一个项目创建多个模板。清单和凭据也是如此。
- en: Before we get started, we need a simple playbook that we can use in our examples
    as we go through this part of the chapter. On the AWX host, locate the local AWX
    persistent volume folder (this is described in the previous section if you are
    running AWX on Microk8s). I will show examples from my demo system in the following
    commands, but your system will have its own unique IDs. Make sure you adjust the
    paths for your system – copying and pasting the ones from mine will almost certainly
    not work!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，我们需要一个简单的操作手册，可以在本章的示例中使用。在AWX主机上，找到本地AWX持久卷文件夹（如果您在Microk8s上运行AWX，则在上一节中有描述）。我将在以下命令中展示我的演示系统的示例，但您的系统将有其自己的唯一ID。确保您调整路径以适应您的系统-复制和粘贴我的路径几乎肯定不起作用！
- en: 'Every locally hosted project must have its own subdirectory within the persistent
    volume, so let''s create one here:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 每个本地托管的项目必须在持久卷中有自己的子目录，因此让我们在这里创建一个：
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now place the following example code into this folder, as `example.yaml`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将以下示例代码放入此文件夹中，作为`example.yaml`：
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: With this done, we can proceed to defining a project.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们可以继续定义项目。
- en: Defining a project
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义项目。
- en: A project, in AWX terms, is simply a collection of Ansible playbooks grouped
    together. These collections of playbooks are often retrieved from a **source control
    management** (**SCM**) system. Indeed, this is the recommended way to host Ansible
    playbooks in an enterprise. Using an SCM means that everyone is working from the
    same version of code, and all changes are tracked. These are the elements that
    are vital in an enterprise environment.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWX术语中，项目只是一组组合在一起的Ansible操作手册。这些操作手册的集合通常来自**源代码管理**（SCM）系统。事实上，这是在企业中托管Ansible操作手册的推荐方式。使用SCM意味着每个人都在使用相同版本的代码，并且所有更改都得到跟踪。这些是企业环境中至关重要的元素。
- en: With regards to the grouping of playbooks, there is no right or wrong way to
    organize projects, so this is very much up to the teams involved. Put simply,
    one project links to one repository, and so where it makes sense for multiple
    playbooks to live in one repository, it would make sense for them to live in one
    project within AWX. This is not a requirement, however – you can have just one
    playbook per project if it suits your needs best!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 关于操作手册的分组，没有组织项目的正确或错误方式，因此这很大程度上取决于涉及的团队。简单地说，一个项目链接到一个存储库，因此如果多个操作手册存放在一个存储库中是有意义的，它们将存放在AWX中的一个项目中。但这不是必需的-如果适合您的需求，您可以每个项目只有一个操作手册！
- en: As previously discussed, it is also possible to store Ansible playbooks locally.
    This is useful when testing or when starting out, and we will utilize this capability
    in our example here, as it ensures everyone reading this book can complete the
    examples with ease.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，还可以在本地存储Ansible操作手册。在测试或刚开始时，这很有用，我们将在这里的示例中利用这种能力，因为它确保了阅读本书的每个人都可以轻松完成示例。
- en: Log into the AWX interface using the `admin` account and click on the **Projects** link
    on the left-hand menu bar. Then click on the **Add** button near the top right
    of the window. This creates a new blank project for us.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`admin`帐户登录AWX界面，然后单击左侧菜单栏上的**项目**链接。然后单击窗口右上角附近的**添加**按钮。这为我们创建了一个新的空白项目。
- en: 'For now, we do not need to worry about all the fields (we''ll discuss these
    in detail later). However, we do need to configure the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们不需要担心所有字段（我们将在后面详细讨论这些）。但是，我们需要配置以下内容：
- en: '![](Images/Table_1.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/Table_1.jpg)'
- en: 'The end result should look something like the following figure:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果应该看起来像下图所示：
- en: '![Figure 5.5 – Creating your first project in AWX using our local playbook
    directory'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.5-使用我们的本地操作手册目录在AWX中创建您的第一个项目'
- en: '](Images/B17462_05_05.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_05.jpg)'
- en: Figure 5.5 – Creating your first project in AWX using our local playbook directory
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5-使用我们的本地操作手册目录在AWX中创建您的第一个项目
- en: Click the **Save** button to store your edits. That's it – you have defined
    your first project in AWX! From here, we can define an inventory.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**保存**按钮以保存您的编辑。就是这样-您已经在AWX中定义了您的第一个项目！从这里开始，我们可以定义清单。
- en: Defining an inventory
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义库存
- en: Inventories in AWX work exactly the same as the inventories that we worked with
    in [*Chapter 1*](B17462_01_Final_JC_ePub.xhtml#_idTextAnchor015), *The* *System
    Architecture and Design of Ansible*, where we referenced them using the command
    line. They can be static or dynamic, can consist of groups and/or individual hosts,
    and can have variables defined on a global per group or per-host basis – we are
    now simply defining them through a user interface.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: AWX中的库存与我们在[*第1章*](B17462_01_Final_JC_ePub.xhtml#_idTextAnchor015)中使用命令行引用的库存完全相同，*Ansible的系统架构和设计*，它们可以是静态的或动态的，可以由组和/或单个主机组成，并且可以在全局每组或每个主机基础上定义变量-我们现在只是通过用户界面定义它们。
- en: Click on the **Inventories** item on the left-hand menu bar. As with projects,
    we want to define something new, so click on the **Add** button near the top right
    of the window. A drop-down list will appear. Select **Add Inventory** from this
    list.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 单击左侧菜单栏上的**库存**项。与项目一样，我们想要定义新的内容，因此单击窗口右上方附近的**添加**按钮。将出现一个下拉列表。从中选择**添加库存**。
- en: When the **Create new inventory** screen appears, enter a name for the inventory
    (for example, `Mastery Demo`), and then click the **Save** button.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当**创建新库存**屏幕出现时，输入库存的名称（例如`Mastery Demo`），然后单击**保存**按钮。
- en: Important note
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: You must save your blank inventory before you can start defining hosts or groups.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义主机或组之前，您必须保存空白库存。
- en: 'When this is completed, you should have a screen that looks something like
    that shown in the following figure:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您应该看到一个类似于以下图所示的屏幕：
- en: '![Figure 5.6 – Creating a new empty inventory in AWX'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.6-AWX中创建新的空库存'
- en: '](Images/B17462_05_06.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_06.jpg)'
- en: Figure 5.6 – Creating a new empty inventory in AWX
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6-AWX中创建新的空库存
- en: Once you have saved the new inventory, note the tabs along the top of the inventories
    sub-pane – **Details**, **Access**, **Groups**, **Hosts**, **Sources**, and **Jobs**.
    You will find tabs like these on almost every pane in the AWX user interface –
    we also saw them after we defined our first project earlier in this chapter (we
    just didn't need to use them at that stage).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 保存新库存后，请注意库存子窗格顶部的选项卡-**详情**、**访问**、**组**、**主机**、**来源**和**作业**。您几乎可以在AWX用户界面的每个窗格上找到这样的选项卡-我们在本章早些时候定义了第一个项目后也看到了它们（在那个阶段我们只是不需要使用它们）。
- en: 'Keeping our example simple, we will define one host in a group to run our example
    playbook against. Click on the **Groups** tab, and then click on the **Add** button
    to add a new inventory group. Give the group a name and click **Save**, as shown
    in the following figure:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化我们的示例，我们将在一个组中定义一个主机，以便运行我们的示例playbook。单击**组**选项卡，然后单击**添加**按钮以添加新的库存组。给组命名并单击**保存**，如下图所示：
- en: '![Figure 5.7 – Creating a new inventory group in AWX'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.7-在AWX中创建新的库存组'
- en: '](Images/B17462_05_07.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_07.jpg)'
- en: Figure 5.7 – Creating a new inventory group in AWX
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7-在AWX中创建新的库存组
- en: 'Now click on the **Hosts** tab, and then click on the **Add** button and select
    **Add new host** from the drop-down menu. Enter the IP address of your AWX host
    into the **Name** field (or the FQDN if you have set up DNS resolution). You can
    also add a description to the host if you wish, then click **Save**. The end result
    should look something like the following figure:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在单击**主机**选项卡，然后单击**添加**按钮，并从下拉菜单中选择**添加新主机**。将您的AWX主机的IP地址输入到**名称**字段中（如果您已设置DNS解析，则输入FQDN）。如果需要，您还可以向主机添加描述，然后单击**保存**。最终结果应该看起来像以下图所示：
- en: '![Figure 5.8 – Creating a new host in the Mastery Group group of the Mastery
    Demo inventory'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.8-在Mastery Demo库存的Mastery Group组中创建新主机'
- en: '](Images/B17462_05_08.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_08.jpg)'
- en: Figure 5.8 – Creating a new host in the Mastery Group group of the Mastery Demo
    inventory
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.8-在Mastery Demo库存的Mastery Group组中创建新主机
- en: Important note
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: 'The **Variables** box seen on most of the inventory screens expects variables
    to be defined in YAML or JSON format, and not the INI format we used on the command
    line. Where earlier we had defined variables such as `ansible_ssh_user=james`,
    we would now enter `ansible_ssh_user: james` if the YAML mode is selected.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '大多数库存屏幕上看到的**变量**框期望以YAML或JSON格式定义变量，而不是我们在命令行上使用的INI格式。在此之前，我们已经定义了变量，例如`ansible_ssh_user=james`，如果选择了YAML模式，我们现在将输入`ansible_ssh_user:
    james`。'
- en: 'Well done! You''ve just created your first inventory in AWX. If we were to
    create this inventory on the command line, it would look like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！您刚刚在AWX中创建了您的第一个库存。如果我们要在命令行上创建这个库存，它将如下所示：
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: It might be simple, but it paves the way for us to run our first playbook. Next,
    let's look at the concept of credentials in AWX.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能很简单，但它为我们运行第一个playbook铺平了道路。接下来，让我们看看AWX中凭据的概念。
- en: Defining credentials
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义凭据
- en: One of the ways in which AWX lends itself to an enterprise is the secure storage
    of credentials. Ansible, given its nature and typical use cases, is often given
    the *keys to the kingdom* in the form of SSH keys or passwords that have root
    or other administrative-level privileges. Even if encrypted in a vault, the user
    running the playbook will have the encryption password and hence can obtain the
    credentials. Obviously, having many people with uncontrolled access to administrator
    credentials may not be desirable. Luckily for us, AWX solves this issue.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: AWX适用于企业的一种方式是安全存储凭据。鉴于Ansible的性质和典型用例，通常以SSH密钥或具有root或其他管理级别特权的密码的形式提供*王国的钥匙*。即使在保险库中加密，运行playbook的用户也将拥有加密密码，因此可以获取凭据。显然，让许多人不受控制地访问管理员凭据可能是不可取的。幸运的是，AWX解决了这个问题。
- en: Let's take a simple example. Suppose my test host (the one that we defined the
    inventory for previously) has a `root` password of `Mastery123!`. How do we store
    this securely?
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个简单的例子。假设我的测试主机（我们之前为其定义了库存）的`root`密码是`Mastery123!`。我们如何安全地存储这个密码？
- en: First of all, navigate to the **Credentials** menu item, and then click the
    **Add** button (as we have done previously) to create something new. Give the
    credential an appropriate name (for example, `Mastery Login`), and then click
    on the **Credential Type** dropdown to expand the list of available credential
    types (you can even create your own if you can't see the ones you need in here!).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导航到**凭据**菜单项，然后单击**添加**按钮（就像我们之前所做的那样）来创建新内容。为凭据命名（例如，`Mastery Login`），然后单击**凭据类型**下拉菜单以展开可用凭据类型的列表（如果您在此处找不到所需的凭据类型，甚至可以创建自己的凭据类型！）。
- en: 'You will see that there are many different credential types that AWX can store.
    For a machine login, such as ours, we want to select the `Machine` type. Once
    the credential type is set, you will see that the screen changes and fields appropriate
    to creating a machine credential have appeared. We could define the login based
    on the SSH key and various other parameters, but in our simple example, we will
    simply set the username and password to the appropriate values, as shown in the
    following figure:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您会看到AWX可以存储许多不同的凭据类型。对于我们这样的机器登录，我们希望选择`Machine`类型。设置凭据类型后，您会看到屏幕发生变化，并出现了创建机器凭据所需的字段。我们可以基于SSH密钥和其他各种参数定义登录，但在我们的简单示例中，我们将简单地将用户名和密码设置为适当的值，如下图所示：
- en: '![Figure 5.9 – Adding a new machine credential in AWX'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.9 - 在AWX中添加新的机器凭据'
- en: '](Images/B17462_05_09.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_09.jpg)'
- en: Figure 5.9 – Adding a new machine credential in AWX
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.9 - 在AWX中添加新的机器凭据
- en: Now, save the credential. If you now go back to edit the credential, you will
    note that the password disappears and is replaced by the string `ENCRYPTED`. It
    is now impossible to retrieve the password (or SSH key, or other sensitive data)
    through the AWX user interface directly. You will notice that you can replace the
    existing value (by clicking on the curly arrow to the left of the now grayed-out
    password field), but cannot see it. The only way to get the credential would be
    to get both connectivity to the backend database and the encryption key for the
    database that was used at the time of installation. This means even someone performing
    a `SELECT` operation on the database itself won't be able to see the key, as database
    rows containing sensitive data are all encrypted with a key that is autogenerated
    at install time. While this clearly has massive security benefits for an organization,
    it must also be pointed out that the loss of the backend database, or the encryption
    key associated with it, would result in a complete loss of the AWX configuration.
    As a result, it is important (as with any infrastructure deployment) to back up
    your AWX deployment and associated secrets, in case you need to recover from a
    potential disaster situation.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，保存凭据。如果您现在返回编辑凭据，您会注意到密码消失了，并被字符串`ENCRYPTED`替换。现在无法通过AWX用户界面直接检索密码（或SSH密钥或其他敏感数据）。您会注意到可以替换现有值（通过单击现在变灰的密码字段左侧的卷曲箭头），但无法看到它。获取凭据的唯一方法将是获得与后端数据库的连接以及安装时使用的数据库的加密密钥。这意味着即使执行对数据库本身的`SELECT`操作，也无法看到密钥，因为包含敏感数据的数据库行都是使用在安装时自动生成的密钥进行加密的。尽管这显然对组织有巨大的安全益处，但也必须指出，后端数据库的丢失或与之关联的加密密钥将导致AWX配置的完全丢失。因此，重要的是（与任何基础设施部署一样）备份您的AWX部署和相关机密，以防需要从潜在的灾难情况中恢复。
- en: Nonetheless, AWX has protected your sensitive access data in a manner not totally
    dissimilar to Ansible Vault. Of course, Ansible Vault remains a command-line tool
    and, although vault data can be used in playbooks in AWX exactly as it can when
    Ansible is used on the command line, vault creation and modification remains a
    command line-only activity. With our credential in place, let's proceed to the
    final step necessary to run our first ever playbook from AWX – defining a template.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，AWX以一种与Ansible Vault并不完全不同的方式保护了您的敏感访问数据。当然，Ansible Vault仍然是一个命令行工具，尽管在AWX中可以像在命令行上使用Ansible时一样使用vault数据，但vault的创建和修改仍然是一个仅限命令行的活动。有了我们的凭据，让我们继续进行运行我们的第一个来自AWX的playbook所需的最后一步
    - 定义一个模板。
- en: Defining a template
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义模板
- en: A job template – to give it its full name – is a way of pulling together all
    the previously created configuration items, along with any other required parameters,
    to run a given playbook against an inventory. Think of it as defining how you
    would run `ansible-playbook` if you were on the command line.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 作业模板 - 给它完整的名称 - 是一种将之前创建的所有配置项以及任何其他所需参数汇集在一起，以针对清单运行给定playbook的方式。可以将其视为定义如果在命令行上运行`ansible-playbook`时的方式。
- en: 'Let''s dive right in and create our template by carrying out the following
    steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即开始创建我们的模板，按照以下步骤进行：
- en: Click on **Templates** in the left-hand menu.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单中单击**模板**。
- en: Click on the **Add** button to create a new template.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击**添加**按钮创建新模板。
- en: Select **Add Job Template** from the drop-down list.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉列表中选择**添加作业模板**。
- en: 'As a minimum to run our first job, you will need to define the following fields
    on the **Create New Job Template** screen:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行我们的第一个作业，您需要在**创建新作业模板**屏幕上定义以下字段：
- en: '![](Images/Table_2.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/Table_2.jpg)'
- en: 'This should result in a screen that looks something like that shown in the
    following figure:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会导致一个屏幕，看起来与下图所示的屏幕有些相似：
- en: '![Figure 5.10 – Creating a new template in AWX'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.10 - 在AWX中创建新模板'
- en: '](Images/B17462_05_10.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_10.jpg)'
- en: Figure 5.10 – Creating a new template in AWX
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.10 - 在AWX中创建新模板
- en: 'With all the fields populated, as in the previous screenshot, click on the **Save** button.
    Congratulations! You are now ready to run your first playbook from AWX. To do
    so, navigate back to the list of templates and click on the small rocketship icon
    to the right of our newly created template. Immediately upon doing so, you will
    see the job execute and will see the output from `ansible-playbook` that we are
    familiar with from the command line, as shown in the following figure:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有字段都填充完毕后，如前面的截图所示，点击**Save**按钮。恭喜！你现在已经准备好从AWX运行你的第一个playbook。要这样做，返回到**templates**列表，点击我们新创建的模板右侧的小火箭图标。立即执行后，你将看到作业执行并将看到来自`ansible-playbook`的输出，这是我们从命令行熟悉的，如下图所示：
- en: '![Figure 5.11 – The output from our first playbook template run in AWX'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.11 - 我们在AWX中第一个playbook模板运行的输出'
- en: '](Images/B17462_05_11.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_11.jpg)'
- en: Figure 5.11 – The output from our first playbook template run in AWX
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.11 - 我们在AWX中第一个playbook模板运行的输出
- en: On this screen, you can see the raw output from `ansible-playbook`. You can
    access the **Jobs** screen any time by clicking on the **Jobs** menu item on the
    menu bar, and browsing all jobs that have been run. This is excellent for auditing
    the various activities that AWX has been orchestrating, especially in a large
    multi-user environment.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕上，你可以看到来自`ansible-playbook`的原始输出。你可以随时通过点击菜单栏上的**Jobs**菜单项，浏览所有已运行的作业。这对于审计AWX一直在协调的各种活动特别有用，尤其是在大型多用户环境中。
- en: 'At the top of the **Jobs** screen, you can see the **Details** tab, where all
    the fundamental parameters we defined earlier are listed, such as **Project** and **Template**.
    Also displayed is useful information for auditing purposes, such as information
    regarding the user the job was launched by, and times that the job started and finished.
    A screenshot of this is shown in the following figure:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Jobs**屏幕的顶部，你可以看到**Details**选项卡，列出了我们之前定义的所有基本参数，比如**Project**和**Template**。还显示了有用的审计信息，比如有关作业启动和完成时间的信息。如下图所示：
- en: '![Figure 5.12 – The Details tab from our playbook template run'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.12 - 我们的playbook模板运行的Details选项卡'
- en: '](Images/B17462_05_12.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_12.jpg)'
- en: Figure 5.12 – The Details tab from our playbook template run
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.12 - 我们的playbook模板运行的Details选项卡
- en: While AWX is capable of much more, these fundamental stages are central to most
    of the tasks you will want to perform in AWX. Therefore, gaining an understanding
    of their usage and sequence is essential in learning how to use AWX. Now that
    we have the fundamentals under our belts, in the next section we will take a look
    at some of the more advanced things you can do with AWX.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然AWX能够做更多的事情，但这些基本阶段对于你想在AWX中执行的大多数任务来说是至关重要的。因此，了解它们的用法和顺序对于学习如何使用AWX是至关重要的。现在我们已经掌握了基础知识，在下一节中我们将看一下你可以用AWX做的一些更高级的事情。
- en: Going beyond the basics
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超越基础知识
- en: We have now covered the basics necessary to run your first playbook from AWX
    – the basics required for most Ansible automation within this environment. Of
    course, we can't possibly cover all the advanced features AWX has to offer in
    a single chapter. In this section, we will therefore highlight a few of the more
    advanced facets to explore if you wish to learn more about AWX.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经涵盖了从AWX运行你的第一个playbook所需的基础知识 - 这是在这个环境中大多数Ansible自动化所需的基础知识。当然，我们不可能在一个章节中涵盖AWX提供的所有高级功能。因此，在本节中，我们将重点介绍一些更高级的方面，如果你想了解更多关于AWX的内容，可以探索。
- en: Role-based access control (RBAC)
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于角色的访问控制（RBAC）
- en: So far, we have only looked at using AWX from the perspective of the built-in `admin` user.
    Of course, one of AWX's enterprise-level features is RBAC. This is achieved by
    the use of **users** and **teams**. A team is basically a group of users, and
    users can be a member of one or more teams.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只从内置的`admin`用户的角度来看AWX的使用。当然，AWX的企业级功能之一就是RBAC。这是通过使用**用户**和**团队**来实现的。团队基本上是一组用户，用户可以是一个或多个团队的成员。
- en: Both users and teams can be created manually in the AWX user interface, or through integration with
    an external directory service, such as LDAP or Active Directory. In the case of
    directory integration, teams would most likely be mapped to groups within the
    directory, though rich configuration allows for administrators to define the exact
    nature of this behavior.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 用户和团队都可以在AWX用户界面中手动创建，或通过与外部目录服务（如LDAP或Active Directory）集成来创建。在目录集成的情况下，团队很可能会映射到目录中的组，尽管丰富的配置允许管理员定义这种行为的确切性质。
- en: The RBAC's within AWX are rich. For example, a given user can be granted the `Admin` role
    within one team, and either the `Member` or `Read` roles in another.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: AWX内的RBAC非常丰富。例如，给定用户可以在一个团队中被授予`Admin`角色，并在另一个团队中被授予`Member`或`Read`角色。
- en: User accounts themselves can be set up as system administrators, normal users,
    or system auditors.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 用户帐户本身可以设置为系统管理员、普通用户或系统审计员。
- en: In addition to this, as we stepped through the basic setup part of this chapter,
    you will have noticed the tabs on just about every page of the AWX user interface.
    Among these, there is almost always a tab called **Permissions**, which allows
    true fine-grained access control to be achieved.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，当我们在本章的基本设置部分进行设置时，你会注意到AWX用户界面的几乎每个页面上都有选项卡。其中，几乎总会有一个名为**Permissions**的选项卡，它允许实现真正的细粒度访问控制。
- en: For example, a given user of the **Normal User** type could be given the `Admin` role
    within their assigned team. However, they can then be assigned the `READ` role
    on a given project, and this more specific privilege supersedes the less specific `Admin`
    role set at the **Team** level. So, when they log in, they can see the project in
    question but can't change it or execute any tasks – for example, an update from
    the SCM.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，给定的**普通用户**类型的用户可以在其分配的团队中被赋予`Admin`角色。然而，他们可以在给定项目上被分配`READ`角色，这种更具体的特权将取代在**Team**级别设置的不太具体的`Admin`角色。因此，当他们登录时，他们可以看到相关的项目，但不能更改它或执行任何任务
    - 例如，来自SCM的更新。
- en: Important note
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: As a general rule of thumb, more specific privileges supersede less specific
    ones. So, those at a project level will take precedence over those at a team or user level.
    Note that, for items where no permission is specified via either a user or their team,
    that person will not even see that item when logged into the user interface. The
    only exception to these rules are system administrators, who can see everything
    and perform any action. Assign this type to user accounts sparingly!
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，更具体的权限会覆盖不太具体的权限。因此，在项目级别的权限将优先于团队或用户级别的权限。请注意，对于没有通过用户或其团队指定权限的项目，当用户登录到用户界面时，该人甚至都看不到该项目。唯一的例外是系统管理员，他们可以看到一切并执行任何操作。请谨慎将此类型分配给用户账户！
- en: There is a great deal to explore when it comes to RBAC. Once you get the hang
    of it, it is easy to create secure and tightly locked-down deployments of AWX
    where everyone has just the right amount of access.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在涉及RBAC时有很多可以探索的内容。一旦掌握了它，就可以轻松创建安全且严格锁定的AWX部署，每个人都具有适当的访问权限。
- en: Organizations
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组织
- en: AWX contains a top-level configuration item called an **organization**. This is
    a collection of **inventories**, **projects**, **job templates**, and **teams** (these,
    in turn, are a grouping of **users**). Hence, if you have two distinct parts of
    an enterprise that have entirely different requirements but still require the
    use of AWX, they can share a single AWX instance without the need for overlapping
    configuration in the user interface by virtue of organizations.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: AWX包含一个名为**组织**的顶级配置项。这是一组清单、项目、作业模板和团队（这些又是用户的分组）。因此，如果企业的两个不同部分具有完全不同的需求，但仍需要使用AWX，它们可以共享单个AWX实例，而无需在用户界面中重叠配置。
- en: While users of the system administrator type have access to all organizations,
    normal users will only see their associated organizations and configuration. These
    are a really powerful way of segregating access to the different parts of an enterprise
    deployment of AWX.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然系统管理员类型的用户可以访问所有组织，但普通用户只能看到他们关联的组织和配置。这是一种非常强大的方式，可以将企业部署的AWX的不同部分的访问权限进行分隔。
- en: By way of example, when we created our inventory earlier in the chapter, you
    will have noticed that we ignored the **Organization** field (this was set to
    default – the only organization that exists on a new AWX install). If we were
    to create a new organization called `Mastery`, then anyone who was not a member
    of this organization would be unable to see this inventory, regardless of the
    permissions or privileges they have (the exception to this being the **System
    administrator** user type, which can see everything).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，当我们在本章的前面创建清单时，您可能已经注意到我们忽略了**组织**字段（这被设置为默认值 - 在新的AWX安装中存在的唯一组织）。如果我们要创建一个名为`Mastery`的新组织，那么不是该组织成员的任何人都无法看到此清单，无论他们拥有的权限或特权如何（唯一的例外是**系统管理员**用户类型，可以看到一切）。
- en: Scheduling
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调度
- en: Some AWX configuration items, such as projects (which may need to update from
    an SCM) or job templates (which perform a specific task), may need to be run on
    a regular basis. Having a powerful tool such as AWX, but then requiring operators
    to log in regularly to perform routine tasks, would be pointless. Therefore, AWX
    has built-in scheduling.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 一些AWX配置项，例如项目（可能需要从SCM更新）或作业模板（执行特定任务），可能需要定期运行。拥有像AWX这样强大的工具，但又需要操作员定期登录执行常规任务，这是没有意义的。因此，AWX具有内置的调度功能。
- en: 'On the definition page for any project or template, simply look for the **Schedules** tab,
    and you then have a rich range of scheduling options available to you – *Figure
    5.13* shows an example of the creation of a daily schedule, running every day
    from the 7th to the 11th of May 2021 at 1 pm in the London time zone. Note that
    this schedule is being created against the `Mastery Template` job template that
    we created earlier, and so will automatically run this playbook template on the
    defined schedule:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何项目或模板的定义页面上，只需查找**调度**选项卡，然后您就可以使用丰富的调度选项 - *图5.13*显示了一个每天运行一次的日程安排示例，从2021年5月7日到11日在伦敦时区的下午1点。请注意，此日程安排是针对我们之前创建的`Mastery
    Template`作业模板创建的，因此将自动按照定义的日程安排运行此playbook模板：
- en: '![Figure 5.13 – Creating a daily schedule to run the Mastery Template job template
    created earlier'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.13 - 创建一个每日日程安排来运行之前创建的Mastery Template作业模板'
- en: '](Images/B17462_05_13.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_13.jpg)'
- en: Figure 5.13 – Creating a daily schedule to run the Mastery Template job template
    created earlier
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.13 - 创建一个每日日程安排来运行之前创建的Mastery Template作业模板
- en: Note the variety of options available to you for scheduling. To help you ensure
    that the schedule suits your requirements, a detailed breakdown of the schedule
    is shown when you save the new schedule. When you have schedules running unattended,
    along with multiple users logging into a system such as AWX, it is vital that
    you can maintain oversight of what is going on. Thankfully, AWX has rich features
    to allow auditing of the events that occur, and we will take a look at these in
    the next section.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以选择多种调度选项。为了帮助您确保日程安排符合您的要求，在保存新日程安排时会显示日程安排的详细信息。当您有多个用户登录到AWX等系统并运行无人值守的日程安排时，您可以维护对正在进行的操作的监督是至关重要的。幸运的是，AWX具有丰富的功能，允许对发生的事件进行审计，我们将在下一节中介绍这些功能。
- en: Auditing
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审计
- en: One of the risks of running Ansible on the command line is that once a particular
    task has been run, its output is lost forever. It is, of course, possible to turn
    on logging for Ansible. However, in an enterprise, this would need to be enforced,
    which would be difficult with lots of operators having root access to a given
    Ansible machine, be it their own laptop or a server elsewhere. Thankfully, as
    we saw in our earlier example, AWX stores not only the details of who ran what
    tasks and when but also stores all the output from the `ansible-playbook` runs.
    In this way, compliance and auditability are achieved for enterprises wishing
    to use Ansible.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行上运行Ansible的一个风险是，一旦运行了特定任务，其输出将永远丢失。当然，可以为Ansible打开日志记录。但是，在企业中，这需要强制执行，对于许多操作员具有给定Ansible机器的root访问权限，无论是他们自己的笔记本电脑还是其他地方的服务器，这将是困难的。幸运的是，正如我们在之前的示例中看到的，AWX不仅存储了谁运行了什么任务以及何时运行的详细信息，还存储了所有`ansible-playbook`运行的输出。通过这种方式，企业希望使用Ansible的合规性和可审计性得到了实现。
- en: Simply navigate to the **Jobs** menu item, and a list of all previously run
    jobs (that the user has permission to see) will be shown. It is even possible
    to repeat previously completed jobs directly from this screen simply by clicking
    on the rocketship icon next to the job in question. Note that this immediately
    launches the job with the same parameters it was launched with last time, so be
    sure that clicking it is what you want to do!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 只需导航到**作业**菜单项，将显示所有先前运行的作业（用户有权限查看的）。甚至可以直接从此屏幕重复以前完成的作业，只需单击问题中的火箭图标。请注意，这将立即使用与上次启动时相同的参数启动作业，因此请确保单击是您想要执行的操作！
- en: '*Figure 5.14* shows the job history for our demo AWX instance being used for
    the book:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.14*显示了我们用于本书的演示AWX实例的作业历史：'
- en: '![Figure 5.14 – The job history pane of the AWX instance being used for the
    book'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.14-用于本书的AWX实例的作业历史窗格'
- en: '](Images/B17462_05_14.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_14.jpg)'
- en: Figure 5.14 – The job history pane of the AWX instance being used for the book
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.14-用于本书的AWX实例的作业历史窗格
- en: Clicking on the numbered entry in the **Name** column takes you to the **Output**
    and **Details** tab panes that we saw in *Figure 5.11* and *Figure 5.12*, but
    of course, relevant to the specific job run you clicked on. While you can clean
    up the job history, the jobs remain there for you to examine until you delete
    them. Also note the two grayed-out buttons at the top of *Figure 5.14*. Using
    these, you can cancel running jobs (useful if for any reason they get stuck or
    fail) and also delete multiple entries from the job history. This is great for
    cleaning up once you have finished your auditing.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**名称**列中的编号条目将带您到我们在*图5.11*和*图5.12*中看到的**输出**和**详细信息**选项卡窗格，但当然，与您单击的特定作业运行相关。虽然您可以清理作业历史记录，但作业仍然保留在那里供您检查，直到您删除它们。还请注意*图5.14*顶部的两个灰色按钮。使用这些按钮，您可以取消运行作业（如果由于任何原因它们被卡住或失败），还可以从作业历史记录中删除多个条目。一旦完成审核，这对于清理非常有用。
- en: Of course, with playbooks, there is no one-size-fits-all solution, and sometimes
    we need operators to be able to input unique data at the time of running playbooks.
    AWX provides a feature for exactly this purpose called surveys, and we will look
    at this in the next section.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，对于playbooks，没有一种大小适合所有的解决方案，有时我们需要操作员能够在运行playbooks时输入唯一的数据。AWX提供了一个名为调查的功能，专门用于此目的，我们将在下一节中看到。
- en: Surveys
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调查
- en: Sometimes, when launching a job template, it is not possible (or desirable)
    to define all information upfront. While it is perfectly possible to define parameters
    using variables in the AWX user interface, this is not always desirable, or indeed
    user friendly, as the variables must be specified in valid JSON or YAML syntax.
    In addition, users who have only been granted the `Read` role on a template will
    not be able to edit that template definition – this includes the variables! However,
    there might be a valid reason for them to set a variable, even though they shouldn't
    be editing the template itself.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在启动作业模板时，不可能（或不希望）预先定义所有信息。虽然在AWX用户界面中使用变量定义参数是完全可能的，但这并不总是理想的，或者用户友好的，因为变量必须以有效的JSON或YAML语法指定。此外，只被授予模板上的“读取”角色的用户将无法编辑该模板定义-这包括变量！然而，他们可能有正当的理由设置一个变量，即使他们不应该编辑模板本身。
- en: Surveys provide the answer to this, and on any job template you have created,
    you will find a tab at the top marked **Survey**. A survey is essentially a questionnaire
    (hence the name!) defined by an administrator that asks for input in a user-friendly
    manner and where simple user input validation is performed. Once validated, the
    entered values are stored in Ansible variables, just as they would be if they
    had been defined in YAML or JSON format.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 调查提供了答案，对于您创建的任何作业模板，您将在顶部找到一个标记为**调查**的选项卡。调查本质上是由管理员定义的问卷调查（因此得名！），以用户友好的方式要求输入，并进行简单的用户输入验证。一旦验证，输入的值将被存储在Ansible变量中，就像它们如果以YAML或JSON格式定义一样。
- en: 'For example, if we wanted to capture the `http_port` variable value for a job
    template when it is run, we could create a survey question, as shown in *Figure
    5.15*:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想要在运行作业模板时捕获`http_port`变量值，我们可以创建一个调查问题，如*图5.15*所示：
- en: '![Figure 5.15 – Creating a survey question to capture a valid HTTP port number
    into a variable'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.15-创建一个调查问题，以捕获有效的HTTP端口号到一个变量'
- en: '](Images/B17462_05_15.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_15.jpg)'
- en: Figure 5.15 – Creating a survey question to capture a valid HTTP port number
    into a variable
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.15-创建一个调查问题，以捕获有效的HTTP端口号到一个变量
- en: 'Once you have created all your questions, note that you need to turn surveys
    on for your job template, as shown in *Figure 5.16*, otherwise the questions will
    not appear when it is run:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 创建所有问题后，请注意，您需要为作业模板打开调查，如*图5.16*所示，否则在运行时问题将不会出现：
- en: '![Figure 5.16 – Turning on surveys for a job template'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.16-为作业模板打开调查'
- en: '](Images/B17462_05_16.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_16.jpg)'
- en: Figure 5.16 – Turning on surveys for a job template
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.16 – 为作业模板启用调查
- en: Now, when the playbook is run, the user is prompted to enter a value, and AWX
    ensures it is an integer in the specified range. A sensible default is also defined. Let's
    now move forward to looking at a more advanced way of using job templates in AWX,
    called workflows.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当运行playbook时，用户将被提示输入一个值，并且AWX将确保它是指定范围内的整数。还定义了一个合理的默认值。现在让我们继续看一下在AWX中更高级使用作业模板的方法，称为工作流。
- en: Workflow templates
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作流模板
- en: Playbook runs, especially from AWX, can be complex. For example, it might be
    desirable to update a project from an SCM system and any dynamic inventories first.
    We might then run a job template to roll out some updated code. If this fails,
    however, it would almost certainly be desirable to roll back any changes that
    were made (or take other remedial action). When you click on the now-familiar
    **Add** button to add a new template, you will see two options in the drop-down
    menu – **Job template** (we have already used this), and **Workflow template**.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Playbook运行，特别是来自AWX，可能会很复杂。例如，可能希望首先从SCM系统更新项目和任何动态清单。然后我们可能会运行一个作业模板来部署一些更新的代码。然而，如果失败，几乎肯定希望回滚所做的任何更改（或采取其他补救措施）。当您单击现在熟悉的**添加**按钮以添加新模板时，您将在下拉菜单中看到两个选项
    – **作业模板**（我们已经使用过）和**工作流模板**。
- en: Once all the required fields are filled in for the new workflow template and
    it is saved, you will automatically enter **Workflow Visualizer** (to get back
    to this in the future, simply access your workflow template through the GUI in
    the normal manner, and then click on the **Visualizer** tab). The workflow visualizer
    builds up a flow, from left to right, of tasks for AWX to perform. For example,
    the following screenshot shows a workflow where our demo project is initially
    synchronized with its SCM.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦为新的工作流模板填写了所有必填字段并保存了，您将自动进入**工作流可视化器**（要在将来返回到此处，只需通过常规方式在GUI中访问工作流模板，然后单击**可视化器**选项卡）。工作流可视化器从左到右构建了AWX执行的任务流程。例如，以下屏幕截图显示了一个工作流，其中我们的演示项目最初与其SCM同步。
- en: 'If that step succeeds (denoted by the green link to the next block), the demo
    job template is run. If that in turn succeeds, then the mastery template is run.
    If any of the preceding steps fail, then the workflow stops there (though an **On
    Failure** action can be defined at any stage). Based on this simple building block
    premise and the ability to perform subsequent actions in the event of success,
    failure, or always, will enable you to build large-scale operational flows within
    AWX. This will all be achieved without having to build up huge monolithic playbooks.
    *Figure 5.17* shows our simple workflow in the visualizer:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该步骤成功（由指向下一个块的绿色链接表示），则运行演示作业模板。如果这反过来成功，则运行Mastery模板。如果前面的任何步骤失败，则工作流在那里停止（尽管可以在任何阶段定义**失败时**操作）。基于这个简单的构建块前提和在成功、失败或始终发生事件后执行后续操作的能力，将使您能够在AWX中构建大规模的运营流程。这将在不必构建庞大的单片剧本的情况下实现。*图5.17*显示了我们在可视化器中的简单工作流：
- en: '![Figure 5.17 – The workflow visualizer in AWX'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.17 – AWX中的工作流可视化器'
- en: '](Images/B17462_05_17.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_17.jpg)'
- en: Figure 5.17 – The workflow visualizer in AWX
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.17 – AWX中的工作流可视化器
- en: Using this tool, we can powerfully build up multi-step workflows, taking intelligent
    action after each stage, depending on whether it succeeded or not.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个工具，我们可以强大地构建多步工作流，在每个阶段之后采取智能行动，具体取决于它是否成功。
- en: Everything we have discussed so far is great if you are interacting directly
    with the AWX GUI. However, what happens if you have set up unattended actions
    to run, but wish to be notified about their results (especially if they fail)?
    Equally, how can you notify a team if someone runs a potentially service-impacting
    change? You'll find the answers to these questions in the next section.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论的一切都很棒，如果您直接与AWX GUI交互。但是，如果您设置了无人值守的操作来运行，但希望收到其结果的通知（特别是如果它们失败了），会发生什么？同样，如果有人运行了可能影响服务的更改，您如何通知团队？您将在下一节中找到这些问题的答案。
- en: Notifications
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通知
- en: As you examined the AWX user interface, you will have noticed that most screens
    have a tab called **Notifications**. AWX has the ability to integrate with many
    popular communication platforms, such as Slack, IRC, Pagerduty, and even good
    old-fashioned email (this list is not exhaustive). Once the configuration for
    a given platform is defined through the user interface, notifications can then
    be sent when specific events occur. These events will vary according to the item
    you are wishing to generate notifications from. For example, with job templates,
    you can choose to be notified when the job starts, when it succeeds, and/or when
    it fails (and any combination of those events). You can generate different notification
    types for different events. For example, you could notify a Slack channel of a
    template being started, but email your ticketing system if the template fails
    to automatically generate a ticket to prompt further investigation.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 当您检查AWX用户界面时，您会注意到大多数屏幕都有一个名为**通知**的选项卡。AWX有能力与许多流行的通信平台集成，例如Slack、IRC、Pagerduty，甚至老式的电子邮件（此列表不是详尽的）。一旦通过用户界面定义了给定平台的配置，就可以在特定事件发生时发送通知。这些事件将根据您希望从中生成通知的项目而变化。例如，对于作业模板，您可以选择在作业开始时、成功时和/或失败时收到通知（以及这些事件的任何组合）。您可以为不同的事件生成不同的通知类型。例如，您可以通知Slack频道模板已启动，但如果模板未能自动生成票据以促进进一步调查，则通过电子邮件通知您的票务系统。
- en: 'For example, *Figure 5.18* shows our previously configured `Mastery Template`
    set up to email a given recipient list in the event that its execution fails.
    On start, and on success, no notification is given (though this can be turned
    on, of course):'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，*图5.18*显示了我们之前配置的`Mastery Template`设置为在其执行失败时向给定的收件人列表发送电子邮件。在开始和成功时，不会收到通知（当然可以打开）：
- en: '![Figure 5.18 – Setting up email notifications for failed runs of Mastery Template'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.18 – 为Mastery模板设置失败运行的电子邮件通知'
- en: '](Images/B17462_05_18.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_18.jpg)'
- en: Figure 5.18 – Setting up email notifications for failed runs of Mastery Template
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.18 - 设置Mastery Template失败运行的电子邮件通知
- en: All notifications defined in AWX appear in the **Notifications** tab. However,
    they do not have to be added once defined. It is simply up to the user to turn
    the **Start**, **Success**, and **Failure** notifications on or off for each notification
    service.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: AWX中定义的所有通知都显示在**通知**选项卡中。但是，一旦定义，它们就不必添加。用户只需决定是否为每个通知服务打开或关闭**启动**、**成功**和**失败**通知。
- en: There is one more way to interact with AWX without using the GUI. This, of course,
    is through the API, which we'll look at in the final part of this chapter.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一种与AWX交互的方式，而不使用GUI。当然，这是通过API，我们将在本章的最后部分进行讨论。
- en: Using the API
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用API
- en: Throughout this chapter of the book, we have looked at all AWX operations using
    the GUI, as this is probably the easiest and most visual way to explain their
    functions and usage. However, one of the key features of AWX for any enterprise
    is the API, which is a complete feature that enables us to perform all of the
    operations completed here (and more) without having to touch the UI.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的本章中，我们已经使用GUI查看了所有AWX操作，因为这可能是解释其功能和用法的最简单和最直观的方式。然而，对于任何企业来说，AWX的一个关键特性是API，这是一个完整的功能，使我们能够执行所有这里完成的操作（以及更多），而无需触及UI。
- en: This is an incredibly powerful tool, especially with regards to integration
    into larger workflows. For example, you could hook AWX into your CI/CD pipeline
    using the API, and upon a successful build of your code, you could trigger an
    AWX job to deploy a test environment to run it in (and even deploy the code to
    that environment). Similarly, you can automatically create job templates, inventory
    items, and all other aspects of the configuration through the API.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常强大的工具，特别是在集成到更大的工作流程中。例如，您可以使用API将AWX连接到您的CI/CD流水线中，在代码成功构建后，您可以触发AWX作业来部署一个测试环境来运行它（甚至将代码部署到该环境）。同样，您可以通过API自动创建作业模板、清单项和配置的所有其他方面。
- en: The API itself is browsable, and you can access it by adding `/api` or `/api/v2`
    to the URL of your AWX server (for version 1 and version 2 of the API respectively).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: API本身是可浏览的，您可以通过在AWX服务器的URL中添加`/api`或`/api/v2`来访问它（分别用于API的版本1和版本2）。
- en: 'Although normally you would integrate these into a larger application or workflow,
    it is easy to demonstrate the API usage with `curl`. For example, suppose we want
    to retrieve a list of the inventories defined in our AWX server. We can do that
    with a command like the following:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管通常您会将这些集成到更大的应用程序或工作流程中，但使用`curl`很容易演示API的用法。例如，假设我们想要检索在我们的AWX服务器中定义的清单列表，我们可以使用以下命令来执行：
- en: '[PRE23]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Naturally, you will need to substitute your credentials into the `--user` parameter
    and the correct FQDN for your AWX server into the URL in the command. Once done,
    this command will retrieve details of all the inventories defined in AWX in JSON
    format – you don't need to pipe this through Python's `json.tool` tool – it just
    makes the output more readable for a human!
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您需要将您的凭据替换到`--user`参数中，并将您的AWX服务器的正确FQDN替换到命令中的URL中。完成后，此命令将以JSON格式检索AWX中定义的所有清单的详细信息
    - 您不需要通过Python的`json.tool`工具进行管道处理 - 它只是使输出对人类更可读！
- en: 'Similarly, we could launch our mastery example template through the API. All
    configuration elements of AWX have a unique numeric ID associated with them that
    we must use to access them. Thus, for example, let''s retrieve the list of job
    templates from AWX using the API:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以通过API启动我们的Mastery示例模板。AWX的所有配置元素都有与之关联的唯一数字ID，我们必须使用这些ID来访问它们。因此，例如，让我们使用API从AWX检索作业模板的列表：
- en: '[PRE24]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Looking through the JSON output, I can see that our `Mastery Template` has
    an `id` of `12` on my system. Also, because I set up a survey on this template
    for one of the earlier examples in this chapter, the JSON output is telling me
    that I need to specify some variables before the template can be launched. There
    are a number of items in the output of the `GET` query that might need to be set
    before a playbook can be launched, so it is worth reviewing them carefully before
    putting your `API POST` together. *Figure 5.19* shows the output from the `API
    GET` call, displaying the variables that must be set before the template can be
    launched:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 通过JSON输出，我可以看到在我的系统上，我们的`Mastery Template`具有`12`的`id`。另外，因为我在本章的早期示例中为这个模板设置了一个调查，JSON输出告诉我在启动模板之前需要指定一些变量。在`GET`查询的输出中可能需要设置一些项目，因此在组合`API
    POST`之前仔细审查它们是值得的。*图5.19*显示了从`API GET`调用中获取的输出，显示了在启动模板之前必须设置的变量：
- en: '![Figure 5.19 – Partial output from the API GET call on job template 12'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.19 - 从作业模板12的API GET调用中获取的部分输出'
- en: '](Images/B17462_05_19.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '](Images/B17462_05_19.jpg)'
- en: Figure 5.19 – Partial output from the API GET call on job template 12
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.19 - 从作业模板12的API GET调用中获取的部分输出
- en: 'This variable data can be specified using the `extra_vars` data field in the
    API, so we can craft an API call like the following to launch the job:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用API中的`extra_vars`数据字段来指定这些变量数据，因此我们可以组合一个类似以下的API调用来启动作业：
- en: '[PRE25]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The output from this command will include use details such as the job ID so
    that we can query the job run if we wish to. In my example, the job ID returned
    was `10`, so I can query the status of this job (including whether it was successful
    or not) with the following:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的输出将包括作业ID等使用详细信息，以便我们可以查询作业运行（如果需要的话）。在我的示例中，作业ID返回为`10`，因此我可以使用以下命令查询此作业的状态（包括是否成功）：
- en: '[PRE26]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You can even retrieve the output of the `ansible-playbook` command from the
    job run, using an API call like the following:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以使用类似以下的API调用从作业运行中检索`ansible-playbook`命令的输出：
- en: '[PRE27]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Although you are unlikely to be driving the API using `curl` in a production
    environment, it is hoped that these simple, repeatable examples will help to get
    you started on your journey of AWX integration using the API.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在生产环境中不太可能使用`curl`来驱动API，但希望这些简单、可重复的示例能帮助你开始使用API集成AWX的旅程。
- en: 'There is even a CLI available for AWX that can be installed through Python''s
    `pip` packaging system. This CLI uses a naming and command structure that is consistent
    with the HTTP-based API we have discussed in this section, and given the similarity,
    this is therefore left as an optional exercise. However, to get you started, the
    official documentation for the AWX CLI can be found here:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以通过Python的`pip`包装系统安装AWX的CLI。这个CLI使用了与我们在本节讨论过的基于HTTP的API一致的命名和命令结构，鉴于相似性，因此这被留作可选练习。然而，为了帮助你入门，AWX
    CLI的官方文档可以在这里找到：
- en: '[https://docs.ansible.com/ansible-tower/latest/html/towercli/index.html](https://docs.ansible.com/ansible-tower/latest/html/towercli/index.html)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible-tower/latest/html/towercli/index.html](https://docs.ansible.com/ansible-tower/latest/html/towercli/index.html)'
- en: Although the documentation mentions Ansible Tower, it is just as valid when
    used with the open-source AWX software.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管文档提到了Ansible Tower，但在使用开源AWX软件时同样有效。
- en: Summary
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: That concludes our whistle-stop tour of AWX. In this chapter, we showed that
    AWX is straightforward to install and configure once you know the core four-step
    process involved. We also showed how to build on this process with features such
    as surveys, notifications, and workflows.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了我们对AWX的快速介绍。在本章中，我们展示了一旦你了解了涉及的核心四个步骤过程，AWX安装和配置起来是很简单的。我们还展示了如何通过调查、通知和工作流等功能来完善这个过程。
- en: You learned that AWX is straightforward to install (in fact, it installs with
    Ansible!), and how to add SSL encryption to it. You then gained an understanding
    of how the platform works, and how to go from a fresh install to building out
    projects, inventories, credentials, and templates to run Ansible jobs. You learned
    that there are many additional features that build on this. These were covered
    in the final part of this chapter in order to help you build a robust enterprise
    management system for Ansible.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 你学到了AWX安装简单（实际上，它是用Ansible安装的！），以及如何为其添加SSL加密。然后你了解了平台的工作原理，以及如何从新安装到构建项目、清单、凭据和模板来运行Ansible作业。你了解到有许多其他功能可以构建在此基础上。这些在本章的最后部分进行了介绍，以帮助你构建一个强大的企业管理系统来管理Ansible。
- en: In the next chapter, we will return to the Ansible language and look at the
    benefits of the Jinja2 templating system.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将回到Ansible语言，看看Jinja2模板系统的好处。
- en: Questions
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: AWX runs either in standalone Docker containers or Kubernetes.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWX可以在独立的Docker容器或Kubernetes中运行。
- en: a) True
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: a) True
- en: b) False
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: b) False
- en: AWX provides which of the following to enterprises looking to manage their automation
    processes?
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWX为希望管理其自动化流程的企业提供了以下哪些内容？
- en: a) A web UI
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: a) web UI
- en: b) A feature-complete API
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: b) 一个功能完整的API
- en: c) Source control integration
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: c) 源代码控制集成
- en: d) All of the above
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上所有
- en: AWX directly supports the secure management of credentials for automation.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWX直接支持安全管理自动化的凭据。
- en: a) True
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: a) True
- en: b) False
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: b) False
- en: AWX provides a graphical development environment for creating and testing Ansible
    playbooks.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWX为创建和测试Ansible playbook提供了图形化的开发环境。
- en: a) True
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: a) True
- en: b) False
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: b) False
- en: AWX can schedule unattended jobs to run.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWX可以安排无人值守的作业运行。
- en: a) True
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: a) True
- en: b) False
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: b) False
- en: In AWX, the pre-configured parameter set for an `ansible-playbook` run is known
    as what?
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWX中，预配置的`ansible-playbook`运行的参数集被称为什么？
- en: a) Job Configuration
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: a) 作业配置
- en: b) Ansible Template
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: b) Ansible模板
- en: c) Job Template
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: c) 作业模板
- en: d) Ansible Run
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: d) Ansible运行
- en: AWX can have its configuration divided between different parts of a business
    through the creation of which of the following?
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWX可以通过创建以下哪些内容将其配置分为业务的不同部分？
- en: a) Teams
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: a) 团队
- en: b) Organizations
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: b) 组织
- en: c) Deploying a second AWX server
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: c) 部署第二个AWX服务器
- en: d) Groups
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: d) 组
- en: In AWX, it is possible to tell which of the following?
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWX中，可以告诉以下哪些内容？
- en: a) When a playbook was run
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: a) playbook运行的时间
- en: b) Who ran the playbook
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: b) 谁运行了playbook
- en: c) What parameters were passed to the playbook
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: c) 传递给playbook的参数是什么
- en: d) All of the above
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: d) 以上所有
- en: User-friendly variable definition in AWX is provided via which feature?
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWX中的用户友好的变量定义是通过哪个功能提供的？
- en: a) Forms
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: a) 表单
- en: b) e-Forms
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: b) e-Forms
- en: c) extra vars
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: c) 额外的变量
- en: d) Surveys
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: d) 调查
- en: Projects in AWX are made up of what?
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWX中的项目由什么组成？
- en: a) Logical teams of users
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: a) 用户的逻辑团队
- en: b) Logical folders of playbooks
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: b) playbook的逻辑文件夹
- en: c) A task management system
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: c) 任务管理系统
- en: d) Logical collections of roles
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: d) 角色的逻辑集合
