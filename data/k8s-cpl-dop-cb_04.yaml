- en: Automating Tests in DevOps
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps中自动化测试
- en: In this chapter, we will discuss automating tests in DevOps workflow to accelerate
    time to production, reduce the loss of delivery risks, and detect service anomalies
    using known test automation tools on Kubernetes. After following the recipes in
    this chapter, you will have gained the skills to prevent known defects as well
    as quickly find new defects to reduce service downtime.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论在DevOps工作流中自动化测试，以加快生产时间，减少交付风险的损失，并使用已知的测试自动化工具在Kubernetes上检测服务异常。在本章的配方之后，您将学会预防已知缺陷，以及快速发现新缺陷，以减少服务停机时间。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Building event-driven automation with StackStorm
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用StackStorm构建事件驱动的自动化
- en: Automating tests with the Litmus framework
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Litmus框架自动化测试
- en: Automating Chaos Engineering with Gremlin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Gremlin进行混沌工程自动化
- en: Automating your code review with Codacy
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Codacy自动化您的代码审查
- en: Detecting bugs and anti-patterns with static code analysis with SonarQube
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SonarQube进行静态代码分析检测错误和反模式
- en: Detecting license compliance issues with Fossa
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Fossa检测许可合规问题
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The recipes in this section assume that you have a functional Kubernetes cluster
    deployed by following one of the recommended methods described in [Chapter 1](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml),
    *Building Production-Ready Kubernetes Clusters*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的配方假定您已经通过遵循[第1章](a8580410-3e1c-4e28-8d18-aaf9d38d011f.xhtml)中描述的推荐方法之一部署了一个功能性的Kubernetes集群，*构建生产就绪的Kubernetes集群*。
- en: The Kubernetes command-line tool, `kubectl`, will be used for the rest of the
    recipes in this chapter, since it's the main command-line interface for running
    commands against Kubernetes clusters. We will also use `helm`, where Helm charts
    are available to deploy solutions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes命令行工具`kubectl`将在本章的其余配方中使用，因为它是针对Kubernetes集群运行命令的主要命令行界面。我们还将使用`helm`，其中Helm图表可用于部署解决方案。
- en: Building event-driven automation with StackStorm
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用StackStorm构建事件驱动的自动化
- en: StackStorm is an open source, event-driven automation platform. Using the GitOps
    approach, it helps run workflows based on events. In this section, we will perform
    arbitrary automation or remediation tasks using StackStorm on Kubernetes. You
    will learn how to deploy StackStorm in a highly available configuration on Kubernetes
    using Helm charts and get started by deploying examples of rules, custom sensors,
    actions, and workflows.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: StackStorm是一个开源的、事件驱动的自动化平台。使用GitOps方法，它可以根据事件运行工作流。在本节中，我们将使用Helm图表在Kubernetes上以高可用配置部署StackStorm，并开始部署规则、自定义传感器、操作和工作流的示例，执行任意自动化或补救任务。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Make sure you have a Kubernetes cluster ready, as well as `kubectl` and `helm` configured
    so that you can manage the cluster resources.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经准备好一个Kubernetes集群，以及已经配置好`kubectl`和`helm`，以便您可以管理集群资源。
- en: How to do it…
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本节进一步分为以下子节，以使这个过程更容易：
- en: Installing StackStorm
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装StackStorm
- en: Accessing the StackStorm UI
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问StackStorm UI
- en: Using the st2 CLI
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用st2 CLI
- en: Defining a rule
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义规则
- en: Deploying a rule
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署规则
- en: Installing StackStorm
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装StackStorm
- en: Although StackStorm can be distributed as a **Red Hat Package Manager**/**Debian** (**RPM/Deb**)
    for Linux systems and as Docker images, if you plan to run business-critical automation
    tasks, it is recommended to deploy StackStorm **High Availability** (**HA**) cluster
    on Kubernetes.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管StackStorm可以作为Linux系统的**Red Hat Package Manager**/**Debian**（RPM/Deb）分发，并作为Docker镜像，但如果您计划运行业务关键的自动化任务，建议在Kubernetes上部署StackStorm
    **高可用性**（HA）集群。
- en: 'In this recipe, we will learn how to deploy StackStorm on Kubernetes by following
    these steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何按照以下步骤在Kubernetes上部署StackStorm：
- en: 'Add the Helm repository to your list of local charts:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Helm存储库添加到本地图表列表中：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install the StackStorm HA cluster using the Helm chart. The following command
    will deploy StackStorm and its dependencies, such as MongoDB and RabbitMQ:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Helm图表安装StackStorm HA集群。以下命令将部署StackStorm及其依赖项，如MongoDB和RabbitMQ：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The installation process may take 2 to 3 minutes. Confirm that the release
    has been deployed and running:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装过程可能需要2到3分钟。确认已部署并运行发布：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, you have StackStorm running in our cluster. Next, we will access the UI
    or use the CLI to interact with StackStorm.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的集群中正在运行StackStorm。接下来，我们将访问UI或使用CLI与StackStorm进行交互。
- en: Accessing the StackStorm UI
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问StackStorm UI
- en: The StackStorm Helm installation assumes you are running in a single-node Minikube
    cluster and the instructions provided alongside it serve smaller deployments.
    We are running StackStorm on a large cluster with multiple nodes. We will expose
    the web server externally to access the StackStorm UI.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: StackStorm Helm安装假定您正在单节点Minikube集群中运行，并且随附的说明适用于较小的部署。我们正在一个具有多个节点的大型集群上运行StackStorm。我们将外部公开Web服务器以访问StackStorm
    UI。
- en: 'Let''s perform the following steps to create a cloud load balancer so that
    we can access the StackStorm web interface:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来创建云负载均衡器，以便我们可以访问StackStorm Web界面：
- en: 'Create a load balancer. The following command will create a load balancer through
    your cloud provider and expose the web service on port `80`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建负载均衡器。以下命令将通过您的云提供商创建负载均衡器并在端口`80`上公开Web服务：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Find the external service IP. In the following example, we have used a Kubernetes
    cluster deployed on AWS. Although the output might be different, the following
    command should result in the same on other platforms:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找外部服务IP。在以下示例中，我们使用了部署在AWS上的Kubernetes集群。尽管输出可能不同，但在其他平台上，以下命令应该产生相同的结果：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open the external IP address from *step 2* in a browser:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开*步骤2*中的外部IP地址：
- en: '![](assets/382d6ba1-2aed-4fba-823a-da54c0538663.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/382d6ba1-2aed-4fba-823a-da54c0538663.png)'
- en: 'Log in with the necessary credentials, that is, username as `st2admin` and
    password as `Ch@ngeMe` :'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用必要的凭据登录，即用户名为`st2admin`，密码为`Ch@ngeMe`：
- en: '![](assets/bdb8e23f-31ad-4623-b704-07a929792614.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bdb8e23f-31ad-4623-b704-07a929792614.png)'
- en: Now, you have access to the `StackStorm` interface. Now, we will click on the
    menu items and explore the actions before we create our first rule in the *Defining
    a rule* recipe.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以访问`StackStorm`界面。现在，我们将点击菜单项并在*定义规则*教程中创建我们的第一个规则之前探索操作。
- en: Using the st2 CLI
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用st2 CLI
- en: 'The StackStorm web interface is useful if we want to get familiar with the
    product, but, if you are going to use StackStorm in production, you need to learn
    the CLI commands. Now, perform the following steps to access the st2 CLI from
    the pod:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想熟悉产品，StackStorm Web界面很有用，但是，如果您要在生产中使用StackStorm，则需要学习CLI命令。现在，执行以下步骤以从pod访问st2
    CLI：
- en: 'Find the st2 client''s pod name:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找st2客户端的pod名称：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Execute the following commands via the st2 CLI. This command will execute the
    `st2 --version` command from the pod:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过st2 CLI执行以下命令。此命令将从pod执行`st2 --version`命令：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Authenticate to StackStorm using the following CLI command and save the password
    using the `-w` parameter. If you don''t want to save the password, then you can
    remove the `-w` parameter at the end:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下CLI命令对StackStorm进行身份验证，并使用`-w`参数保存密码。如果不想保存密码，则可以在末尾删除`-w`参数：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'List the available actions from the core pack:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出核心包中可用的操作：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'List the actions from the core pack. You can also try the other pack options
    for Linux, ChatOps, and packs:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出核心包中的操作。您还可以尝试Linux、ChatOps和其他包选项：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: All StackStorm CLI operations are available via REST API, Python, and JavaScript
    bindings. You can find more information at the *StackStorm CLI and Python Client*
    reference link in the *See also* section.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所有StackStorm CLI操作都可以通过REST API、Python和JavaScript绑定进行。您可以在*另请参阅*部分的*StackStorm
    CLI和Python客户端*参考链接中找到更多信息。
- en: Defining a rule
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义规则
- en: 'StackStorm uses rules to run available actions when events occur. StackStorm
    comes with default actions and the catalog of actions can be increased by adding
    new actions from the community. Follow these steps to create your first rule:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: StackStorm使用规则在事件发生时运行可用的操作。StackStorm带有默认操作，并且可以通过从社区添加新操作来增加操作目录。按照以下步骤创建您的第一个规则：
- en: 'Rules are created in a familiar YAML format and consist of three sections:
    trigger, criteria, and action. Before we create the rule file, we will get familiar
    with the available triggers we can use in our rule. Use the following command
    to list the available triggers:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 规则以熟悉的YAML格式创建，由三个部分组成：触发器、条件和操作。在创建规则文件之前，我们将熟悉可以在规则中使用的可用触发器。使用以下命令列出可用的触发器：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Check the details of the webhook trigger. The following command will return
    the description, parameters, and payload schema for the trigger. Review `parameters_schema`
    since we will use this in our example rule later:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查webhook触发器的详细信息。以下命令将返回触发器的描述、参数和有效负载模式。检查`parameters_schema`，因为我们稍后将在示例规则中使用它：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Use the following command to list the available actions:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令列出可用的操作：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Check the details of the `core.local` action. This action executes an arbitrary
    Linux command on the localhost. The following command returns the parameters it
    can take, as follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`core.local`操作的详细信息。此操作在本地主机上执行任意Linux命令。以下命令返回它可以接受的参数，如下所示：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s use the preceding trigger and action in a rule, and set up a webhook
    to listen to the URL at `https://{host}/api/v1/webhooks/sample` using the following
    rule and create a `first_rule.yaml` file. Once you''ve done this, copy the file
    into the container. The action will be triggered when a POST request is made to
    this URL:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在规则中使用前面的触发器和操作，并设置一个webhook来监听`https://{host}/api/v1/webhooks/sample`的URL，使用以下规则并创建一个`first_rule.yaml`文件。完成后，将文件复制到容器中。当向此URL发出POST请求时，操作将被触发：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: With that, you've learned how to find and use available actions and triggers
    to construct a rule. Next, we will learn how to run it in StackStorm.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，您已经学会了如何查找和使用可用的操作和触发器来构建规则。接下来，我们将学习如何在StackStorm中运行它。
- en: Deploying a rule
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署规则
- en: 'StackStorm rules can be deployed through its UI, a CLI, or APIs. In this recipe,
    we will use the rule we defined previously and deploy it using the following steps:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: StackStorm规则可以通过其UI、CLI或API部署。在本教程中，我们将使用之前定义的规则，并使用以下步骤部署它：
- en: 'Create the rule using the YAML file we created in the *Defining a rule* recipe:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们在*定义规则*教程中创建的YAML文件创建规则：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'List the rules and confirm that the new rule has been created. You should see
    the `examples.sample_rule_with_webhook` rule on the list, as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出规则并确认新规则已创建。您应该在列表中看到`examples.sample_rule_with_webhook`规则，如下所示：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With the new rule we created here, the webhook has started to listen on `https://{host}/api/v1/webhooks/sample`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们在这里创建的新规则，webhook已开始监听`https://{host}/api/v1/webhooks/sample`。
- en: See also
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: 'StackStorm documentation: [https://docs.stackstorm.com/install/k8s_ha.html](https://docs.stackstorm.com/install/k8s_ha.html)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StackStorm文档：[https://docs.stackstorm.com/install/k8s_ha.html](https://docs.stackstorm.com/install/k8s_ha.html)
- en: StackStorm CLI and Python client: [https://docs.stackstorm.com/reference/cli.html](https://docs.stackstorm.com/reference/cli.html)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StackStorm CLI和Python客户端：[https://docs.stackstorm.com/reference/cli.html](https://docs.stackstorm.com/reference/cli.html)
- en: StackStorm examples: [https://github.com/StackStorm/st2/tree/master/contrib/examples](https://github.com/StackStorm/st2/tree/master/contrib/examples)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StackStorm示例：[https://github.com/StackStorm/st2/tree/master/contrib/examples](https://github.com/StackStorm/st2/tree/master/contrib/examples)
- en: Automating tests with the Litmus framework
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Litmus框架自动化测试
- en: Litmus is an open source toolset that's used to run chaos experiments in Kubernetes.
    Litmus provides the Chaos **Central Registration Depository** (**CRD**) for cloud-native
    developers and SREs to inject, orchestrate, and monitor chaos to find potential
    weaknesses in Kubernetes deployments in real time in production. In this section,
    we will run some of these chaos experiments to validate the resiliency of the
    systems. You will learn how to build pipelines for CI and end-to-end testing in
    order to validate and certify the new Kubernetes version.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Litmus是一个开源工具集，用于在Kubernetes中运行混沌实验。Litmus为云原生开发人员和SRE提供了混沌中央注册库（CRD），以便在生产环境中实时注入、编排和监视混沌，以发现Kubernetes部署中的潜在弱点。在本节中，我们将运行一些这些混沌实验，以验证系统的弹性。您将学习如何构建CI和端到端测试的流水线，以验证和认证新的Kubernetes版本。
- en: Getting ready
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation to be able
    to use the manifest files under the `chapter4` directory:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将`k8sdevopscookbook/src`存储库克隆到您的工作站，以便能够使用`chapter4`目录下的清单文件：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Make sure you have a Kubernetes cluster ready and `kubectl` and `helm` configured
    so that you can manage the cluster resources.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已准备好Kubernetes集群，并配置了`kubectl`和`helm`，以便您可以管理集群资源。
- en: How to do it…
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 本节进一步分为以下子节，以使这个过程更容易：
- en: Installing the Litmus Operator
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Litmus Operator
- en: Using Chaos Charts for Kubernetes
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Chaos Charts进行Kubernetes
- en: Creating a container kill chaos experiment
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个容器杀死混沌实验
- en: Reviewing chaos experiment results
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查混沌实验结果
- en: Viewing chaos experiment logs
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看混沌实验日志
- en: Installing the Litmus Operator
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Litmus Operator
- en: The Litmus Chaos Engineering tool can be installed using the Helm chart. Books
    are defined as Kubernetes jobs.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Litmus混沌工程工具可以使用Helm图表进行安装。Books被定义为Kubernetes作业。
- en: 'Let''s perform the following steps to install Litmus in our cluster:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来在我们的集群中安装Litmus：
- en: 'Install the Litmus Chaos Operator:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Litmus混沌操作员：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Verify that the Litmus Chaos Operator pod is running:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证Litmus混沌操作员pod是否正在运行：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Verify that the cluster role and cluster role bindings have been applied:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证集群角色和集群角色绑定已应用：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, we have the Litmus Chaos Operator running in our cluster. Next, we need
    to deploy chaos experiments to test the resiliency of our cluster resources.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在集群中运行了Litmus混沌操作员。接下来，我们需要部署混沌实验来测试集群资源的弹性。
- en: Using Chaos Charts for Kubernetes
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Chaos Charts进行Kubernetes
- en: 'Similar to workload Helm charts, Litmus Chaos Charts are used to install chaos
    experiment bundles. Chaos experiments contain the actual chaos details. In this
    recipe, we will learn how to list chaos experiment bundles and download the Kubernetes
    chaos experiment bundle. Let''s perform the following steps to install Chaos Charts
    for the Litmus Operator:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与工作负载Helm图表类似，Litmus混沌图表用于安装混沌实验包。混沌实验包含实际的混沌细节。在本食谱中，我们将学习如何列出混沌实验包并下载Kubernetes混沌实验包。让我们执行以下步骤来为Litmus
    Operator安装混沌图表：
- en: 'Open the Chaos Charts for Kubernetes website at [https://hub.litmuschaos.io](https://hub.litmuschaos.io) on
    your browser and search for `generic` in the search field:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器上打开Kubernetes混沌图表网站[https://hub.litmuschaos.io](https://hub.litmuschaos.io)，并在搜索框中搜索“generic”：
- en: '![](assets/074a4479-ee38-4275-8378-df1d490ab7b1.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/074a4479-ee38-4275-8378-df1d490ab7b1.png)'
- en: 'Click on the Generic Chaos chart:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“通用混沌”图表：
- en: '![](assets/7a88f04a-0fc5-4cb9-8fb9-b5f5cbb7adfa.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7a88f04a-0fc5-4cb9-8fb9-b5f5cbb7adfa.png)'
- en: 'Click on the Install All Experiments button:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“安装所有实验”按钮：
- en: '![](assets/aa72455b-1acd-4e71-b980-5126ff4aa353.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aa72455b-1acd-4e71-b980-5126ff4aa353.png)'
- en: 'Copy the chaos experiment manifest link:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制混沌实验清单链接：
- en: '![](assets/27dab233-8a97-425d-ae69-20c5a57d3064.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/27dab233-8a97-425d-ae69-20c5a57d3064.png)'
- en: 'Install the chaos experiment:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装混沌实验：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Get the list of chaos experiments that have been created:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取已创建的混沌实验列表：
- en: '[PRE22]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Chaos experiment scenarios such as pod delete, network latency, network loss,
    and container kill are available under generic Chaos Chart. You can also install
    or build your own application-specific Chaos Charts to run application-specific
    Chaos.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 通用混沌图表下提供了诸如pod删除、网络延迟、网络丢失和容器杀死等混沌实验场景。您还可以安装或构建自己的特定于应用程序的混沌图表来运行特定于应用程序的混沌。
- en: Creating a pod deletion chaos experiment
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个pod删除混沌实验
- en: 'Chaos experiments bundle the reproducible chaos situations in order to run
    them as a Kubernetes job. In this recipe, we will deploy an example application
    and use a Kubernetes chaos experiment on the application. Let''s perform the following
    steps to test the impact of pod deletion in our cluster:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 混沌实验捆绑了可复现的混沌情况，以便将它们作为Kubernetes作业运行。在这个教程中，我们将部署一个示例应用程序，并在应用程序上使用Kubernetes混沌实验。让我们执行以下步骤来测试在我们的集群中删除pod的影响：
- en: 'Deploy a sample application:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署一个示例应用程序：
- en: '[PRE23]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'List the pods and confirm they are running:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出pod并确认它们正在运行：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Annotate the deployment for chaos using `litmuschaos.io/chaos="true"`:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`litmuschaos.io/chaos="true"`为混沌注释部署：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create a `ServiceAccount` for the chaos executor:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为混沌执行器创建一个`ServiceAccount`：
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a cluster role:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个集群角色：
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a `ClusterRoleBinding`:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`ClusterRoleBinding`：
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Review the experiment CRs to view the chaos parameters. In this case, let''s
    review the `pod-delete` and `container-kill` experiments:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审阅实验CRs以查看混沌参数。在这种情况下，让我们审阅`pod-delete`和`container-kill`实验：
- en: '[PRE29]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create a Chaos Engine using the preceding two experiments you''ve reviewed:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前面两个你已经审阅过的实验创建一个混沌引擎：
- en: '[PRE30]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: With that, you've learned how to create chaos experiments based on predefined
    Chaos Charts.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，您已经学会了如何基于预定义的混沌图表创建混沌实验。
- en: Reviewing chaos experiment results
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审阅混沌实验结果
- en: Chaos experiments are executed as Kubernetes jobs and affected pods will be
    taken down by the chaos executor based on the experiment definition.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 混沌实验是作为Kubernetes作业执行的，受影响的pod将根据实验定义被混沌执行器关闭。
- en: 'Let''s perform the following steps to review the results of our chaos experiments:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来审阅我们混沌实验的结果：
- en: 'Watch the experiment in progress:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察实验进行中：
- en: '[PRE31]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Get the list of results:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取结果列表：
- en: '[PRE32]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'View the `engine-nginx-container-kill` experiment results:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看`engine-nginx-container-kill`实验结果：
- en: '[PRE33]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'View the `engine-nginx-pod-delete` experiment results:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看`engine-nginx-pod-delete`实验结果：
- en: '[PRE34]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: In this recipe, we have tested and reviewed a simple scenario. You can combine
    existing Chaos Charts to create your experiments and write your application chaos
    experiments using the Litmus framework.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们已经测试并审阅了一个简单的场景。您可以结合现有的混沌图表来创建您自己的实验，并使用Litmus框架编写应用程序混沌实验。
- en: Viewing chaos experiment logs
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查看混沌实验日志
- en: Logs are always collected and stored by the standard Kubernetes logging frameworks
    that are used on your cluster. In cases where you need to review them quickly,
    you can use access to the `kubelet` logs.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 日志始终由您的集群上使用的标准Kubernetes日志框架收集和存储。在需要快速查看它们的情况下，您可以访问`kubelet`日志。
- en: 'Let''s perform the following steps to take a deeper look at the tasks that
    are executed during the chaos experiments:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤，深入了解在混沌实验期间执行的任务：
- en: 'Get the list of pods that were created by the completed jobs:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取由已完成的作业创建的Pod列表：
- en: '[PRE35]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'View the logs using the `kubectl logs` command:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl logs`命令查看日志：
- en: '[PRE36]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Inside the logs, you will be able to see the individual tasks that have been
    executed and the summary of passed or failed tasks.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在日志中，您将能够看到已执行的各个任务以及通过或失败任务的摘要。
- en: How it works...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe showed you how to quickly run a predefined chaos experiment on your
    applications running on Kubernetes.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这个步骤向您展示了如何在运行在Kubernetes上的应用程序上快速运行预定义的混沌实验。
- en: Litmus experiments can be easily created from scratch and integrated into an
    application developer's CI pipeline, post the build and unit/integration test
    phases, to test chaos behavior on Kubernetes clusters.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Litmus实验可以很容易地从头开始创建，并集成到应用程序开发人员的CI流水线中，在构建和单元/集成测试阶段之后，对Kubernetes集群上的混沌行为进行测试。
- en: In the *Running a Litmus chaos experiment* recipe, in *step 8*, we created a
    Chaos Engine to test a pod delete experiment, followed by a container kill experiment.
    These two experiments use Chaoskube, a tool that periodically kills random pods
    in your Kubernetes cluster, and Pumba, a chaos testing and network emulation tool,
    as the end injectors of chaos.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在*运行Litmus混沌实验*步骤中，在*步骤8*中，我们创建了一个Chaos Engine来测试一个Pod删除实验，然后是一个容器杀死实验。这两个实验使用Chaoskube，这是一个定期在您的Kubernetes集群中杀死随机Pod的工具，以及Pumba，一个混沌测试和网络仿真工具，作为混沌的最终注入器。
- en: See also
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Litmus documentation: [https://docs.litmuschaos.io/](https://docs.litmuschaos.io/)
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Litmus文档：[https://docs.litmuschaos.io/](https://docs.litmuschaos.io/)
- en: Chaos Charts for Kubernetes: [https://hub.litmuschaos.io/](https://hub.litmuschaos.io/)
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes的混沌图表：[https://hub.litmuschaos.io/](https://hub.litmuschaos.io/)
- en: Chaoskube project: [https://github.com/linki/chaoskube](https://github.com/linki/chaoskube)
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chaoskube项目：[https://github.com/linki/chaoskube](https://github.com/linki/chaoskube)
- en: 'Pumba project: [https://github.com/alexei-led/pumba](https://github.com/alexei-led/pumba)'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pumba项目：[https://github.com/alexei-led/pumba](https://github.com/alexei-led/pumba)
- en: Automating Chaos Engineering with Gremlin
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Gremlin自动化混沌工程
- en: Gremlin is a Chaos Engineering service that prevents outages and builds more
    reliable systems. In this section, we will run chaos attacks in production to
    validate the resiliency of the systems using Gremlin. You will learn how to create
    CPU and node shutdown attacks to test the resiliency of your infrastructure.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Gremlin是一个混沌工程服务，可以防止停机，并构建更可靠的系统。在本节中，我们将在生产环境中运行混沌攻击，以验证使用Gremlin的系统的弹性。您将学习如何创建CPU和节点关闭攻击，以测试基础设施的弹性。
- en: Getting ready
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we need to have the Kubernetes command-line tool, `kubectl`,
    and `helm` installed.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个步骤，我们需要安装Kubernetes命令行工具`kubectl`和`helm`。
- en: All the operations mentioned here require a Gremlin account. If you don't have
    one, go to [https://app.gremlin.com/signup](https://app.gremlin.com/signup) and
    create one.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提到的所有操作都需要Gremlin帐户。如果您没有帐户，请访问[https://app.gremlin.com/signup](https://app.gremlin.com/signup)并创建一个。
- en: How to do it…
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分进一步分为以下子部分，以使这个过程更容易：
- en: Setting up Gremlin credentials
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Gremlin凭据
- en: Installing Gremlin on Kubernetes
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kubernetes上安装Gremlin
- en: Creating a CPU attack against a Kubernetes worker
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对Kubernetes工作节点进行CPU攻击
- en: Creating a node shutdown attack against a Kubernetes worker
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对Kubernetes工作节点创建节点关闭攻击
- en: Running predefined scenario-based attacks
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行预定义的基于场景的攻击
- en: Deleting Gremlin from your cluster
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从您的集群中删除Gremlin
- en: Setting up Gremlin credentials
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置Gremlin凭据
- en: To connect to Gremlin services from our Kubernetes cluster, we will need to
    store our Gremlin credentials as a Kubernetes Secret.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要从我们的Kubernetes集群连接到Gremlin服务，我们需要将Gremlin凭据存储为Kubernetes秘密。
- en: 'Let''s perform the following steps to configure our Gremlin credentials:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来配置我们的Gremlin凭据：
- en: Log in to the Gremlin service at [https://app.gremlin.com/](https://app.gremlin.com/).
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到Gremlin服务[https://app.gremlin.com/](https://app.gremlin.com/)。
- en: 'From the account menu, click on Company Settings:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从帐户菜单中，点击“公司设置”：
- en: '![](assets/794d46cb-8b1c-4675-8c68-4f26e2617da5.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/794d46cb-8b1c-4675-8c68-4f26e2617da5.png)'
- en: 'Click on the Teams tab and select your team:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“团队”选项卡并选择您的团队：
- en: '![](assets/4ee82349-d40b-4f9c-89cf-8c90c06affde.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4ee82349-d40b-4f9c-89cf-8c90c06affde.png)'
- en: 'Click on the Configuration tab and download your certificates:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“配置”选项卡并下载您的证书：
- en: '![](assets/933d24e2-107c-4ece-8781-1a26f4da82c4.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/933d24e2-107c-4ece-8781-1a26f4da82c4.png)'
- en: Copy the `certificates.zip` file to your host where kubectl has been configured.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将“certificates.zip”文件复制到已配置kubectl的主机上。
- en: 'Extract the files:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取文件：
- en: '[PRE37]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Rename the certificate files accordingly:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相应地重命名证书文件：
- en: '[PRE38]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Create a Secret resource in your cluster:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的集群中创建一个秘密资源：
- en: '[PRE39]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: With that, we have converted our credentials into secret resources in Kubernetes.
    This secret will be used later to connect Gremlin to our cluster.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们已经将我们的凭据转换为Kubernetes中的秘密资源。这个秘密将在稍后用于将Gremlin连接到我们的集群。
- en: Installing Gremlin on Kubernetes
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Kubernetes上安装Gremlin
- en: The easiest way to install Gremlin on Kubernetes is by using Helm charts. Make
    sure you have created a gremlin team cert secret, as described in the *Setting
    up Gremlin credentials* recipe, before you proceed.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在Kubernetes上安装Gremlin的最简单方法是使用Helm图表。在继续之前，请确保您已经创建了一个gremlin团队证书秘密，如“设置Gremlin凭据”中所述。
- en: 'Let''s perform the following steps to install Gremlin using Helm charts:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来使用Helm图表安装Gremlin：
- en: 'Add the Gremlin Helm repository:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加Gremlin Helm存储库：
- en: '[PRE40]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Update the repositories:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新存储库：
- en: '[PRE41]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Install the Gremlin client using your Team ID:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的团队ID安装Gremlin客户端：
- en: '[PRE42]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Gremlin will create a DaemonSet that will run on every node in your cluster.
    Validate that the `DESIRED` and `AVAILABLE` pods are equal:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Gremlin将创建一个在集群中的每个节点上运行的DaemonSet。验证“DESIRED”和“AVAILABLE” pod是否相等：
- en: '[PRE43]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Gremlin is running in your cluster. Next, we need to trigger some chaos through
    our Gremlin account.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Gremlin正在您的集群中运行。接下来，我们需要通过我们的Gremlin帐户触发一些混乱。
- en: Creating a CPU attack against a Kubernetes worker
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 针对Kubernetes工作节点创建CPU攻击
- en: Gremlin can generate various infrastructure attacks that impact cores, workers,
    and memory.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Gremlin可以生成各种影响核心、工作节点和内存的基础设施攻击。
- en: 'Let''s perform the following steps to attack the CPU:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来攻击CPU：
- en: 'Deploy a sample application:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署一个示例应用程序：
- en: '[PRE44]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'List the pods and confirm they are running:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出pod并确认它们正在运行：
- en: '[PRE45]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Get the node name for one of the pods:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取一个pod的节点名称：
- en: '[PRE46]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Watch the `pods` status:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察“pods”状态：
- en: '[PRE47]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Log in to your Gremlin account at [https://app.gremlin.com/](https://app.gremlin.com/).
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的Gremlin帐户[https://app.gremlin.com/](https://app.gremlin.com/)。
- en: From the Attacks menu, click on Infrastructure.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从攻击菜单中，点击基础设施。
- en: 'Click on the New Attack button:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“新攻击”按钮：
- en: '![](assets/e40e57d4-614e-47f0-be8e-fa039ca69b71.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e40e57d4-614e-47f0-be8e-fa039ca69b71.png)'
- en: 'Under the Choose Hosts to target tab, pick the node''s local hostname from *step
    3*:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选择目标主机”选项卡下，从“步骤3”中选择节点的本地主机名：
- en: '![](assets/72893605-eb82-48d6-b318-bce697cc6c90.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/72893605-eb82-48d6-b318-bce697cc6c90.png)'
- en: 'Under the Choose a Gremlin tab, click on Resource, select CPU attack, set CPU
    Capacity to `90`, and consume all CPU cores:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选择Gremlin”选项卡下，单击“资源”，选择CPU攻击，将CPU容量设置为`90`，并消耗所有CPU核心：
- en: '![](assets/31115d3a-9a9d-45f1-a6e5-2fe190110aa2.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/31115d3a-9a9d-45f1-a6e5-2fe190110aa2.png)'
- en: 'Click on Unleash Gremlin to run the attack:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“释放Gremlin”以运行攻击：
- en: '![](assets/1099dbdf-581d-4eac-ae0a-ae09c3c2fb3c.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1099dbdf-581d-4eac-ae0a-ae09c3c2fb3c.png)'
- en: Now, the actions you triggered on your Gremlin account will be executed on your
    cluster through the agent.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您在Gremlin帐户上触发的操作将通过代理在您的集群上执行。
- en: Creating a node shutdown attack against a Kubernetes worker
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 针对Kubernetes工作节点执行节点关闭攻击
- en: Gremlin can generate various infrastructure attacks that impact cores, workers,
    and memory.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Gremlin可以生成影响核心、工作节点和内存的各种基础设施攻击。
- en: 'Let''s perform the following steps to attack the CPU:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来攻击CPU：
- en: Log in to your Gremlin account at [https://app.gremlin.com/](https://app.gremlin.com/).
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的Gremlin帐户[https://app.gremlin.com/](https://app.gremlin.com/)。
- en: From the Attacks menu, click on Infrastructure.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“攻击”菜单中，单击“基础设施”。
- en: 'Click on the New Attack button:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“新攻击”按钮：
- en: '![](assets/f724579e-d94b-46af-8e70-72c3758445e1.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f724579e-d94b-46af-8e70-72c3758445e1.png)'
- en: Under the Choose Hosts to target tab, pick the node's local hostname*:*
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选择目标主机”选项卡下，选择节点的本地主机名*：*
- en: '![](assets/72893605-eb82-48d6-b318-bce697cc6c90.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/72893605-eb82-48d6-b318-bce697cc6c90.png)'
- en: 'Under the Choose a Gremlin tab, click on State and select Shutdown:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“选择Gremlin”选项卡下，单击“状态”并选择“关闭”：
- en: '![](assets/8654fec7-3242-477e-aff4-76120b1a2831.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8654fec7-3242-477e-aff4-76120b1a2831.png)'
- en: 'Click on Unleash Gremlin to run the attack:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“释放Gremlin”以运行攻击：
- en: '![](assets/45e7cfbb-60d4-496a-b83b-d1814421ef36.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/45e7cfbb-60d4-496a-b83b-d1814421ef36.png)'
- en: 'Get the pods on the node we executed a Shutdown attack on:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取我们对其执行了关闭攻击的节点上的Pod：
- en: '[PRE48]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: You will notice that the pods are restarted.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 您将注意到Pod被重新启动。
- en: Running predefined scenario-based attacks
  id: totrans-249
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行预定义场景攻击
- en: Gremlin chaos scenarios help bundle attacks together to generate real-world
    outage scenarios. In this recipe, we will learn about the predefined scenarios
    that we can use to validate how our system responds to common failures.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: Gremlin混沌场景帮助捆绑攻击以生成真实世界的故障场景。在这个教程中，我们将学习可以用来验证系统如何响应常见故障的预定义场景。
- en: 'Let''s perform the following steps to validate autoscaling:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来验证自动缩放：
- en: Log in to your Gremlin account at [https://app.gremlin.com/](https://app.gremlin.com/).
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的Gremlin帐户[https://app.gremlin.com/](https://app.gremlin.com/)。
- en: 'Click on the Scenarios menu and review the Recommended scenarios:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“场景”菜单并查看推荐的场景：
- en: '![](assets/c80cdd9a-7877-49ee-9a7e-340aefcacaad.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c80cdd9a-7877-49ee-9a7e-340aefcacaad.png)'
- en: Make sure autoscaling is enabled on your Kubernetes cluster and select the Validate
    Auto-Scaling scenario.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的Kubernetes集群上启用了自动缩放，并选择“验证自动缩放”场景。
- en: 'Click on the Add targets and run button:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“添加目标并运行”按钮：
- en: '![](assets/9eb70ad7-72a5-4f1e-baf7-9cc5aff2b8ee.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9eb70ad7-72a5-4f1e-baf7-9cc5aff2b8ee.png)'
- en: Click on Run Scenario to execute the attack.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“运行场景”以执行攻击。
- en: As a result, Gremlin will execute a CPU attack on the existing nodes to put
    pressure on the cluster, which should ideally trigger the autoscaling feature
    of the cluster to reduce CPU pressure.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Gremlin将对现有节点执行CPU攻击，以对集群施加压力，这理想情况下应触发集群的自动缩放功能以减少CPU压力。
- en: Deleting Gremlin from your cluster
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从您的集群中删除Gremlin
- en: 'Let''s perform the following steps to remove the components of Gremlin from
    your Kubernetes cluster:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来从您的Kubernetes集群中删除Gremlin的组件：
- en: 'List the Gremlin Helm releases:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出Gremlin Helm发布：
- en: '[PRE49]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Remove the Helm release using the release name:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用发布名称删除Helm发布：
- en: '[PRE50]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Helm will remove the release from your cluster.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: Helm将从您的集群中删除发布。
- en: How it works...
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe showed you how to quickly run a predefined chaos attack on your
    worker nodes where applications are scheduled to run by Kubernetes.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方向您展示了如何快速在Kubernetes调度应用程序的工作节点上运行预定义的混沌攻击。
- en: Keep in mind that, although we were looking for the impact on specific pods
    in the *Creating a CPU attack* and *Creating a node shutdown attack* recipes,
    the whole node was under attack, so the other pods on the node were also impacted.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，尽管我们正在寻找*创建CPU攻击*和*创建节点关闭攻击*配方对特定pod的影响，但整个节点都受到了攻击，因此节点上的其他pod也受到了影响。
- en: Especially in small clusters, it is suggested to limit your blast radius and
    start targeting a single container of a pod. This can be done using network latency
    attacks and by specifying the ports that are relevant to the containers you wish
    to see the attack work on.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在小集群中，建议限制爆炸半径，并开始针对一个pod的单个容器进行攻击。这可以通过使用网络延迟攻击和指定与您希望看到攻击效果的容器相关的端口来完成。
- en: See also
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Gremlin documentation: [https://www.gremlin.com/docs/](https://www.gremlin.com/docs/)
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gremlin文档：[https://www.gremlin.com/docs/](https://www.gremlin.com/docs/)
- en: Automating your code review with Codacy
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Codacy自动化您的代码审查
- en: In this section, we will use Codacy to automate code reviews without having
    to make any additional code changes to our repositories and generate notifications
    on code quality and security issues. You will learn how to automate one of the
    most underestimated tasks when it comes to the development of code reviews and
    checks.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Codacy自动化代码审查，而无需对我们的存储库进行任何其他代码更改，并生成有关代码质量和安全问题的通知。您将学习如何自动化在开发代码审查和检查时最被低估的任务之一。
- en: Getting ready
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: All the operations mentioned here require a Codacy account. If you don't have
    one, go to [https://www.codacy.com/pricing](https://www.codacy.com/pricing) and
    create one.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提到的所有操作都需要Codacy帐户。如果您没有帐户，请转到[https://www.codacy.com/pricing](https://www.codacy.com/pricing)并创建一个。
- en: How to do it…
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 本节进一步分为以下子节，以使这个过程更容易：
- en: Accessing the Project Dashboard
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问项目仪表板
- en: Reviewing commits and PRs
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查提交和PR
- en: Viewing issues by category
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按类别查看问题
- en: Adding a Codacy badge to your repository
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Codacy徽章添加到您的存储库
- en: Accessing the Project Dashboard
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问项目仪表板
- en: 'Let''s perform the following steps to access the Codacy Project Dashboard:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来访问Codacy项目仪表板：
- en: Log in to Codacy at [https://app.codacy.com](https://app.codacy.com), which
    will bring you to your Organization Dashboard.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到Codacy网站[https://app.codacy.com](https://app.codacy.com)，这将带您到您的组织仪表板。
- en: 'Click on Projects on the left menu:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单中单击项目：
- en: '![](assets/bf3bf3d6-a316-43dd-a669-2930b1d02b9e.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bf3bf3d6-a316-43dd-a669-2930b1d02b9e.png)'
- en: 'Click on a specific project to get to the project view:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击特定项目以进入项目视图：
- en: '![](assets/c3e8759b-d9e1-4c1f-9d6c-0736efa25a6e.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c3e8759b-d9e1-4c1f-9d6c-0736efa25a6e.png)'
- en: 'Find the Project grading option on the Project Dashboard. In our example, the
    following project has been graded A:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目仪表板上找到项目评分选项。在我们的示例中，以下项目已被评为A：
- en: '![](assets/591c1a99-8e12-4283-8905-36aa29d8ea71.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/591c1a99-8e12-4283-8905-36aa29d8ea71.png)'
- en: 'Find the Quality evolution graph and view the comparison of the number of issues
    versus industry average. If your average is higher than the industry standard,
    you need to review the commit and reduce the number of issues:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找质量演变图，并查看问题数量与行业平均值的比较。如果您的平均值高于行业标准，则需要审查提交并减少问题数量：
- en: '![](assets/da1e4e8e-d9d7-4631-adc0-f39d58e98ecc.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/da1e4e8e-d9d7-4631-adc0-f39d58e98ecc.png)'
- en: Reviewing commits and PRs
  id: totrans-294
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审查提交和PR
- en: 'Let''s perform the following steps to review code commits on the Codacy Dashboard:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来审查Codacy仪表板上的代码提交：
- en: On the Project Dashboard, click on the Commits menu.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目仪表板上，单击“提交”菜单。
- en: 'Select the master branch from the drop-down menu:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择主分支：
- en: '![](assets/9589db08-42df-4956-a087-8c46037a0028.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9589db08-42df-4956-a087-8c46037a0028.png)'
- en: 'On the commit list, find one of your commits with new issues marked in red:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提交列表中，找到其中一个标有新问题的提交标记为红色的提交：
- en: '![](assets/79fc51b6-2a51-4300-9172-8c54c4d94aa0.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/79fc51b6-2a51-4300-9172-8c54c4d94aa0.png)'
- en: 'Click on a Commit to view its details:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击提交以查看其详细信息：
- en: '![](assets/02a7da08-b5e9-4f57-9924-6d0fa5a9f6b0.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/02a7da08-b5e9-4f57-9924-6d0fa5a9f6b0.png)'
- en: Implement the suggested fixes to clear the issues or open a GitHub issue for
    the developer team to fix.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实施建议的修复以清除问题，或者为开发团队打开GitHub问题以进行修复。
- en: 'Now, click on the Open Pull Requests menu:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，单击“打开”拉取请求菜单：
- en: '![](assets/0009aa88-250a-4bfb-8c29-b46aa20b70a4.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0009aa88-250a-4bfb-8c29-b46aa20b70a4.png)'
- en: Repeat *steps 3* to *5* to review the issues and recommended solutions to clear
    them before the code is merged. This will improve code quality.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复*步骤3*至*5*，以查看问题和推荐的解决方案，以在代码合并之前清除它们。这将提高代码质量。
- en: Viewing issues by category
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按类别查看问题
- en: Not all issues are the same and require the same amount of work to be fixed.
    Most of the time, security issues should be the top concern and code styles should
    be an ongoing engineering effort so that they're fixed with improving internal
    review processes.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有问题都相同，也不需要相同数量的工作来解决。大多数情况下，安全问题应该是首要关注的问题，代码样式应该是持续的工程努力，以便通过改进内部审查流程来解决它们。
- en: 'Let''s perform the following steps to see the issue breakdown:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来查看问题分解：
- en: Log in to [https://app.codacy.com](https://app.codacy.com), which will bring
    you to your Organization Dashboard.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到[https://app.codacy.com](https://app.codacy.com)，这将带您到您的组织仪表板。
- en: Click on Projects on the left menu.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单上单击“项目”。
- en: Select a project to analyze.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要分析的项目。
- en: 'Scroll down the Dashboard until you see the Issues breakdown chart:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动仪表板，直到看到问题分解图表：
- en: '![](assets/05d192b6-348e-462d-a0aa-766f4e57ae6f.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/05d192b6-348e-462d-a0aa-766f4e57ae6f.png)'
- en: 'Click on a category with issues and use the provided information on issues
    in code reviews:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击具有问题的类别，并使用代码审查中提供的问题信息：
- en: '![](assets/30da5aa3-1ab6-4667-8e0c-641982c2104a.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/30da5aa3-1ab6-4667-8e0c-641982c2104a.png)'
- en: If you are peer-reviewing or checking your own code, you can filter issues from
    an author by clicking on the All authors filter and changing it to a name.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您正在进行同行评审或检查自己的代码，您可以通过单击“所有作者”过滤器并将其更改为名称来过滤来自作者的问题。
- en: Adding a Codacy badge to your repository
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Codacy徽章添加到您的存储库
- en: Badges are used to represent the high-level project status and its stability
    to the users coming to your repository or website. Since Codacy can show the quality
    of your code, it is definitely something you may want to display on your repository
    in the `README.MD` file.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 徽章用于表示高级项目状态及其对来到您的存储库或网站的用户的稳定性。由于Codacy可以显示您的代码质量，因此您可能希望在`README.MD`文件中显示它。
- en: 'Let''s perform the following steps to add a Codacy badge to your GitHub repository:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来向您的GitHub存储库添加Codacy徽章：
- en: Log in to [https://app.codacy.com](https://app.codacy.com), which will bring
    you to your Organization Dashboard.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到[https://app.codacy.com](https://app.codacy.com)，这将带您到您的组织仪表板。
- en: Click on Projects on the left menu.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单上单击“项目”。
- en: Select a project to analyze.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要分析的项目。
- en: 'Click on the Badge icon next to your project name:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击项目名称旁边的徽章图标：
- en: '![](assets/90edb601-3b2d-45e6-b45e-55859a966efc.png)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/90edb601-3b2d-45e6-b45e-55859a966efc.png)'
- en: 'Click on Add badge to repository to create a **Pull Request** (**PR**) to your
    repository:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“添加徽章到存储库”以创建一个PR到您的存储库：
- en: '![](assets/1f1fc376-4269-4b49-9e6e-7c69a2b72470.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1f1fc376-4269-4b49-9e6e-7c69a2b72470.png)'
- en: 'Review the content of the PR and merge it. Once it''s been merged, you will
    see the code quality score on your repository Overview page, similar to what''s
    shown in the following screenshot:'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查PR的内容并合并它。一旦合并，您将在存储库概述页面上看到代码质量分数，类似于以下截图所示：
- en: '![](assets/02ae694a-70df-4824-bf38-6e1af7b2146d.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/02ae694a-70df-4824-bf38-6e1af7b2146d.png)'
- en: Badges are used to highlight important tests and information for your repository
    visitors.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 徽章用于突出显示存储库访问者的重要测试和信息。
- en: See also
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: Codacy documentation: [https://support.codacy.com/hc/en-us](https://support.codacy.com/hc/en-us)
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Codacy文档：[https://support.codacy.com/hc/en-us](https://support.codacy.com/hc/en-us)
- en: Detecting bugs and anti-patterns with SonarQube
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SonarQube检测错误和反模式
- en: SonarQube is a popular development tool that is used in software development to
    catch bugs and vulnerabilities in your applications. In this section, we will learn
    how to automate static code analysis to detect bugs and anti-patterns that you
    can use in your CI/CD pipelines.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: SonarQube是一个流行的开发工具，用于在软件开发中捕捉应用程序中的错误和漏洞。在本节中，我们将学习如何自动化静态代码分析，以检测您可以在CI/CD流水线中使用的错误和反模式。
- en: Getting ready
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Clone the `k8sdevopscookbook/src` repository to your workstation in order to
    use the manifest files under the `chapter4` directory:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆`k8sdevopscookbook/src`存储库到您的工作站，以便使用`chapter4`目录下的清单文件：
- en: '[PRE51]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Make sure you have a Kubernetes cluster ready and `kubectl` and `helm` configured
    so that you can manage the cluster resources.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经准备好一个Kubernetes集群，并且已经配置了kubectl和helm，以便您可以管理集群资源。
- en: How to do it…
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分进一步分为以下子部分，以使这个过程更容易：
- en: Installing SonarQube using Helm
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Helm安装SonarQube
- en: Accessing the SonarQube Dashboard
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问SonarQube仪表板
- en: Creating a new user and tokens
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新用户和令牌
- en: Enabling Quality Profiles
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用质量配置文件
- en: Adding a project
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加项目
- en: Analyzing a project
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析项目
- en: Viewing issues by category
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按类别查看问题
- en: Adding a SonarQube badge to your repository
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向您的存储库添加SonarQube徽章
- en: Adding marketplace plugins
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加市场插件
- en: Deleting SonarQube from your cluster
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从您的集群中删除SonarQube
- en: Installing SonarQube using Helm
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Helm安装SonarQube
- en: SonarQube is a leading open source solution for code quality and security analysis for
    adopting code quality in your CI/CD. It can be installed as a standalone solution
    from binaries. In this recipe, we will install it on a Kubernetes cluster using
    Helm charts.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: SonarQube是一个领先的开源解决方案，用于采用代码质量的CI/CD中的代码质量和安全分析。它可以作为一个独立的解决方案从二进制文件安装。在这个示例中，我们将使用Helm图表在Kubernetes集群上安装它。
- en: 'Let''s perform the following steps to get SonarQube up and running:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来启动和运行SonarQube：
- en: 'Update your repositories:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新您的存储库：
- en: '[PRE52]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Install SonarQube:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装SonarQube：
- en: '[PRE53]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Validate that the PostgreSQL and SonarQube pods are ready:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证PostgreSQL和SonarQube pod是否就绪：
- en: '[PRE54]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: With that, you've learned how to get SonarQube deployed on the Kubernetes cluster.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，您已经学会了如何在Kubernetes集群上部署SonarQube。
- en: Accessing the SonarQube Dashboard
  id: totrans-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问SonarQube仪表板
- en: When installed using Helm charts, SonarQube creates a load balancer and exposes
    an external IP to connect. We will discover the IP first and connect to the SonarQube
    Dashboard using the service IP.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Helm图表安装SonarQube会创建一个负载均衡器并公开外部IP以进行连接。我们将首先发现IP并使用服务IP连接到SonarQube仪表板。
- en: 'Let''s perform the following steps to expose SonarQube through a cloud load
    balancer:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤通过云负载均衡器公开SonarQube：
- en: 'Get the SonarQube load balancer''s external IP:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取SonarQube负载均衡器的外部IP：
- en: '[PRE55]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Open the address in your browser:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开地址：
- en: '![](assets/36260514-727f-4af3-8267-39f8839b43af.png)'
  id: totrans-367
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/36260514-727f-4af3-8267-39f8839b43af.png)'
- en: 'Click on Log in and use `admin` as both your username and password to log in
    to the Dashboard:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“登录”，并使用`admin`作为用户名和密码登录到仪表板：
- en: '![](assets/0d8f8fd0-fb1c-4c64-96e1-828092bc03b2.png)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0d8f8fd0-fb1c-4c64-96e1-828092bc03b2.png)'
- en: 'Click on the account profile logo on the top right of the screen and select
    My Account:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击屏幕右上角的账户配置标志，然后选择“我的账户”：
- en: '![](assets/cc5610be-284b-4dfd-9f39-64f8c56fc9f4.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cc5610be-284b-4dfd-9f39-64f8c56fc9f4.png)'
- en: 'Select the Security tab:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“安全”选项卡：
- en: '![](assets/04ca34f6-5c10-4de0-b13c-ffc6e405ea46.png)'
  id: totrans-373
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/04ca34f6-5c10-4de0-b13c-ffc6e405ea46.png)'
- en: 'Change the default admin password and save it by clicking the Change password
    button:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击“更改密码”按钮来更改默认管理员密码并保存：
- en: '![](assets/60f76082-67d7-4901-b9ca-147bab506b75.png)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/60f76082-67d7-4901-b9ca-147bab506b75.png)'
- en: Since the service port is accessible externally, it is important to change the
    default credentials of SonarQube.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 由于服务端口可以从外部访问，重要的是更改SonarQube的默认凭据。
- en: Creating a new user and tokens
  id: totrans-377
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建新用户和令牌
- en: Team members need to have their own user accounts to access the Dashboard. It
    is recommended that you generate tokens in order to manage accounts. You can use
    them to run analyses or invoke web services without needing to access the user's
    actual credentials. This way, your analysis of the user's password does not go
    through the network.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 团队成员需要拥有自己的用户帐户来访问仪表板。建议您生成令牌以管理帐户。您可以使用它们来运行分析或调用Web服务，而无需访问用户的实际凭据。这样，您对用户密码的分析不会通过网络传输。
- en: 'Let''s perform the following steps to create new users that can access SonarQube:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤来创建可以访问SonarQube的新用户：
- en: From the top menu, click on Administration.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶部菜单中，点击“管理”。
- en: 'Click on the Security tab and select Users:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“安全”选项卡，然后选择“用户”：
- en: '![](assets/85a4749a-ca0b-440b-afcf-d83e20c1f1d6.png)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/85a4749a-ca0b-440b-afcf-d83e20c1f1d6.png)'
- en: 'Click on the Create User button:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建用户”按钮：
- en: '![](assets/c8aca861-3cc9-4462-9bd0-6dc99faab8a6.png)'
  id: totrans-384
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c8aca861-3cc9-4462-9bd0-6dc99faab8a6.png)'
- en: 'Enter the Name, Email, and Password of the user and click on Create:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入用户的“名称”、“电子邮件”和“密码”，然后点击“创建”：
- en: '![](assets/560ef3fc-9d3a-4871-90f2-c95ec777dfab.png)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/560ef3fc-9d3a-4871-90f2-c95ec777dfab.png)'
- en: 'On the Users table, click the Update Tokens button under the Tokens column:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“用户”表上，点击“令牌”列下的“更新令牌”按钮：
- en: '![](assets/82f4fd57-8fbb-40e2-95e9-a1a1e70e0b8c.png)'
  id: totrans-388
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/82f4fd57-8fbb-40e2-95e9-a1a1e70e0b8c.png)'
- en: Set a token name and click on the Generate button.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个令牌名称，然后点击“生成”按钮。
- en: Make sure that you copy the token and take note of it for the upcoming recipes.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保复制令牌并记下它，以备后续使用。
- en: Enabling quality profiles
  id: totrans-391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用质量配置
- en: To be able to analyze a project, first, you need to install specific programming
    language plugins. Let's perform the following steps to install Java plugins that
    we'll use in the next recipe, *Adding a project:*
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够分析一个项目，首先需要安装特定的编程语言插件。让我们执行以下步骤来安装我们将在下一个示例“添加项目”中使用的Java插件：
- en: 'Click on Quality Profiles. If you see a message saying There are no languages
    available, then you need to install the language plugins:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“质量配置”。如果看到消息“没有可用的语言”，则需要安装语言插件：
- en: '![](assets/3ea230ee-85b1-4073-8190-a48dd7370d1b.png)'
  id: totrans-394
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3ea230ee-85b1-4073-8190-a48dd7370d1b.png)'
- en: 'Click on the Administration menu and switch to the Marketplace tab:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“管理”菜单，切换到“市场”选项卡：
- en: '![](assets/c4f44eed-c243-4443-a5e5-ec01248dff4f.png)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c4f44eed-c243-4443-a5e5-ec01248dff4f.png)'
- en: 'On the Marketplace search field, search for the language you would like to
    enable. For this recipe, this is `java` :'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在市场搜索栏中，搜索您想要启用的语言。对于这个示例，这是`java`：
- en: '![](assets/52a72ec6-ccc5-47b4-bf5a-1518a9c36089.png)'
  id: totrans-398
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/52a72ec6-ccc5-47b4-bf5a-1518a9c36089.png)'
- en: 'Add **Adobe Experience Manager** (**AEM**) rules for SonarQube, Checkstyle,
    Findbugs, Java i18n rules, **Programming Mistake Detector** (**PMD**), and SonarJava
    plugins by clicking on the Install button next to the respective plugins:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击相应插件旁边的“安装”按钮，为SonarQube、Checkstyle、Findbugs、Java i18n规则、PMD和SonarJava插件添加**Adobe
    Experience Manager**（**AEM**）规则：
- en: '![](assets/d78db616-67d9-4122-8eaa-5c4a003ee7ad.png)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d78db616-67d9-4122-8eaa-5c4a003ee7ad.png)'
- en: 'This action requires a restart. Click on Restart Server and log in to the Dashboard
    after it''s restarted:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此操作需要重新启动。点击“重新启动服务器”，并在重新启动后登录到仪表板：
- en: '![](assets/8c97c852-943c-42f2-abee-cd56f7d262c4.png)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8c97c852-943c-42f2-abee-cd56f7d262c4.png)'
- en: 'Once you''ve logged back into the Dashboard, click on Quality Profiles. This
    time, you should see Java profiles:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您重新登录到仪表板，点击“质量配置文件”。这次，您应该看到Java配置文件：
- en: '![](assets/8d0ae9c7-fe31-46b3-91c6-6b2e6ac6e27e.png)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8d0ae9c7-fe31-46b3-91c6-6b2e6ac6e27e.png)'
- en: Repeat *steps 1* to *5* for any other languages you want to install.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 对于您想安装的其他语言，请重复*步骤1*至*5*。
- en: Adding a project
  id: totrans-406
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加一个项目
- en: A project is created in SonarQube automatically on its first analysis. Before
    we can scan a project, we need to choose an analysis method. In this recipe, we
    will launch a Gradle analysis. The other available methods are listed in the *See
    also* section.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次分析时，SonarQube会自动创建一个项目。在我们扫描项目之前，我们需要选择一种分析方法。在这个教程中，我们将启动一个Gradle分析。其他可用的方法列在*另请参阅*部分中。
- en: 'Let''s perform the following steps to add a new project to SonarQube:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤将新项目添加到SonarQube中：
- en: 'Clone an example repository to scan:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆一个示例存储库进行扫描：
- en: '[PRE56]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'For this example, we also need Java 1.8 installed on our node. If you already
    have it, skip to *step 4*:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个示例，我们还需要在我们的节点上安装Java 1.8。如果您已经安装了，跳到*步骤4*：
- en: '[PRE57]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Confirm the version of Java you''re using:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认您正在使用的Java版本：
- en: '[PRE58]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Get the SonarQube service''s external IP:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取SonarQube服务的外部IP：
- en: '[PRE59]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Run the analysis. The analysis will complete in a couple of minutes:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行分析。分析将在几分钟内完成：
- en: '[PRE60]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Switch back to the SonarQube portal to see the new project:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回SonarQube门户，查看新项目：
- en: '![](assets/47eadf48-d0dc-4926-9ed7-5a75596c7660.png)'
  id: totrans-420
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/47eadf48-d0dc-4926-9ed7-5a75596c7660.png)'
- en: Now, you will be able to see your new project on the SonarQube portal.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将能够在SonarQube门户上看到您的新项目。
- en: Reviewing a project's quality
  id: totrans-422
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 审查项目的质量
- en: SonarQube's analysis varies, depending on the language that's scanned, but,
    in most cases, it generates good-quality measures, issues reports, and finds where
    coding rules were broken. In this recipe, you will learn where to find types of
    issues and look into issues by severity.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: SonarQube的分析因所扫描的语言而异，但在大多数情况下，它会生成高质量的度量、问题报告，并找出编码规则被违反的地方。在这个教程中，您将学习如何查找问题类型，并按严重程度查看问题。
- en: 'Make sure that you added the sample project to SonarQube by following the *Adding
    a project* recipe. Now, perform the following steps:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您通过遵循*添加项目*教程将示例项目添加到SonarQube中。现在，执行以下步骤：
- en: 'Click on the Issues menu:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“问题”菜单：
- en: '![](assets/2b3f8b4f-417d-46ed-8211-719ccb3525e8.png)'
  id: totrans-426
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2b3f8b4f-417d-46ed-8211-719ccb3525e8.png)'
- en: 'Known vulnerabilities are considered blockers and need to be addressed immediately.
    Under Filters, expand Severity and select Blocker:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 已知漏洞被视为阻碍因素，需要立即解决。在过滤器下，展开严重性并选择阻碍因素：
- en: '![](assets/f1750847-93c1-446e-9156-428a8d809d1d.png)'
  id: totrans-428
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f1750847-93c1-446e-9156-428a8d809d1d.png)'
- en: 'A hardcoded credential has been detected in the example code, which is a serious
    vulnerability. To assign this issue to a team member, click on the Not assigned
    dropdown and type in the person''s name to assign it to them:'
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在示例代码中检测到了一个硬编码凭据，这是一个严重的漏洞。要将此问题分配给团队成员，请点击“未分配”下拉菜单，并输入该人的名字以将其分配给他们：
- en: '![](assets/d2226dcd-1812-4907-8d06-bd8df0effe64.png)'
  id: totrans-430
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d2226dcd-1812-4907-8d06-bd8df0effe64.png)'
- en: Eventually, all the issues need to be either confirmed and assigned or resolved
    as fixed, false positive, or won't be fixed. The status can be set by clicking
    on the Open dropdown and changing it to a new status value.
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终，所有问题都需要确认和分配，或者解决为已修复、误报或不会修复。可以通过单击“打开”下拉菜单并将其更改为新的状态值来设置状态。
- en: Adding marketplace plugins
  id: totrans-432
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加市场插件
- en: 'Let''s perform the following steps to add new plugins to SonarQube from the
    marketplace:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤，从市场上添加新的插件到SonarQube中：
- en: 'Click on the Administration menu and switch to the Marketplace tab:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“管理”菜单，切换到“市场”选项卡：
- en: '![](assets/c4f44eed-c243-4443-a5e5-ec01248dff4f.png)'
  id: totrans-435
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c4f44eed-c243-4443-a5e5-ec01248dff4f.png)'
- en: 'On the Marketplace, in addition to code analyzers, you can find alternative
    authentication methods, language packs, and other useful integrations. As an example,
    let''s search for GitHub authentication:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在市场上，除了代码分析器，您还可以找到替代的身份验证方法、语言包和其他有用的集成。例如，让我们搜索GitHub身份验证：
- en: '![](assets/aca71291-0f35-435b-90e4-1ad28c6a83a5.png)'
  id: totrans-437
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/aca71291-0f35-435b-90e4-1ad28c6a83a5.png)'
- en: Click on the Install button next to the plugin.
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击插件旁边的“安装”按钮。
- en: Now, click on Restart Server and log in to the Dashboard after it's been restarted.
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，单击“重新启动服务器”，并在重新启动后登录仪表板。
- en: With SonarQube, go to Administration | Configuration | General Settings | GitHub.
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用SonarQube，转到“管理”|“配置”|“常规设置”|“GitHub”。
- en: 'Set Enabled to true:'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Enabled设置为true：
- en: '![](assets/bd101ccb-feae-4172-8755-418813bbb99c.png)'
  id: totrans-442
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bd101ccb-feae-4172-8755-418813bbb99c.png)'
- en: Set the `client ID` and `client secret` to the values provided by the GitHub
    developer application. Register a new OAuth application with GitHub by going to [https://github.com/settings/applications/new](https://github.com/settings/applications/new).
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`client ID`和`client secret`设置为GitHub开发人员应用程序提供的值。通过转到[https://github.com/settings/applications/new](https://github.com/settings/applications/new)在GitHub上注册一个新的OAuth应用程序。
- en: 'Save the settings and log out from SonarQube:'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存设置并从SonarQube注销：
- en: '![](assets/409cded0-0b88-41c5-8006-c6629755e465.png)'
  id: totrans-445
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/409cded0-0b88-41c5-8006-c6629755e465.png)'
- en: New, users will be asked to log in with a GitHub user.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 新用户将被要求使用GitHub用户登录。
- en: Deleting SonarQube from your cluster
  id: totrans-447
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从集群中删除SonarQube
- en: 'Let''s perform the following steps to remove SonarQube from your Kubernetes
    cluster:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤，从您的Kubernetes集群中删除SonarQube：
- en: 'List the SonarQube Helm releases:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出SonarQube Helm发布：
- en: '[PRE61]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Remove the Helm release using the release name:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用发布名称删除Helm发布：
- en: '[PRE62]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Helm will remove the SonarQube release and its components from your cluster.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: Helm将从您的集群中删除SonarQube发布及其组件。
- en: How it works...
  id: totrans-454
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe showed you how to quickly detect security vulnerabilities and bugs
    in your project.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程向您展示了如何快速检测项目中的安全漏洞和错误。
- en: In the *Adding a project* recipe, in *s**tep 5*, when we start analyzing our
    example, the files that are provided to the analysis are analyzed on the server-side,
    and the result of the analysis is sent back to the server as a report. This report
    is analyzed in an asynchronous way on the server-side.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 在“添加项目”教程中，在“第5步”中，当我们开始分析我们的示例时，提供给分析的文件在服务器端进行分析，并将分析结果作为报告发送回服务器。这个报告在服务器端以异步方式进行分析。
- en: Reports are added to a queue and processed by the server in order. If multiple
    reports are sent back to the server, the results may take some time to be displayed
    on the SonarQube Dashboard.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 报告被添加到队列中，并按顺序由服务器处理。如果将多个报告发送回服务器，结果可能需要一些时间才能显示在SonarQube仪表板上。
- en: By default, only the files that can be detected by the installed code analyzer
    are loaded into the project. This means that if you only have SonarJava code written
    in C or Go and YAML files that are very common in the Kubernetes world, they will
    be ignored.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，只有安装的代码分析器可以检测到的文件才会加载到项目中。这意味着如果你只有用C或Go编写的SonarJava代码和在Kubernetes世界中非常常见的YAML文件，它们将被忽略。
- en: See also
  id: totrans-459
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'SonarQube Documentation: [https://docs.sonarqube.org/latest/setup/overview/](https://docs.sonarqube.org/latest/setup/overview/)'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SonarQube文档：[https://docs.sonarqube.org/latest/setup/overview/](https://docs.sonarqube.org/latest/setup/overview/)
- en: Static code analysis example using SonarScanner for Gradle: [https://github.com/javajon/code-analysis ](https://github.com/javajon/code-analysis)
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SonarScanner for Gradle进行静态代码分析示例：[https://github.com/javajon/code-analysis](https://github.com/javajon/code-analysis)
- en: SonarScanner for Jenkins: [https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/  ](https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/)
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins的SonarScanner：[https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/](https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/)
- en: 'SonarQube extension for Azure DevOps: [https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-azure-devops/](https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-azure-devops/)'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure DevOps的SonarQube扩展：[https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-azure-devops/](https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-azure-devops/)
- en: SonarQube Scanner for MSBuild: [https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild)
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MSBuild的SonarQube扫描仪：[https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild)
- en: SonarQube Scanner for Maven: [https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Maven](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Maven)
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven的SonarQube扫描仪：[https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Maven](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Maven)
- en: SonarQube Scanner for Ant: [https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Ant](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Ant)
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ant的SonarQube扫描仪：[https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Ant](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+Ant)
- en: SonarQube Scanner to launch analysis from the CLI: [https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner)
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SonarQube扫描仪可从CLI启动分析：[https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner](https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner)
- en: Plugin Library: [https://docs.sonarqube.org/display/PLUG/Plugin+Library](https://docs.sonarqube.org/display/PLUG/Plugin+Library)
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件库：[https://docs.sonarqube.org/display/PLUG/Plugin+Library](https://docs.sonarqube.org/display/PLUG/Plugin+Library)
- en: SonarQube Community: [https://community.sonarsource.com/](https://community.sonarsource.com/)
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SonarQube社区：[https://community.sonarsource.com/](https://community.sonarsource.com/)
- en: Detecting license compliance issues with FOSSA
  id: totrans-470
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用FOSSA检测许可合规问题
- en: FOSSA is an open source software license compliance tool that allows modern
    teams to be successful with open source software development. In this section,
    we will scan software licenses with the FOSSA framework. You will learn how to
    automate license compliance and vulnerability checks.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: FOSSA是一个开源软件许可合规工具，允许现代团队成功开发开源软件。在本节中，我们将使用FOSSA框架扫描软件许可证。您将学习如何自动化许可合规性和漏洞检查。
- en: Getting ready
  id: totrans-472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: All the operations mentioned here require a FOSSA account. If you don't have
    one, go to [https://app.fossa.com/account/register](https://app.fossa.com/account/register) and
    create one.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 所有在这里提到的操作都需要一个FOSSA账户。如果你没有，请访问[https://app.fossa.com/account/register](https://app.fossa.com/account/register)并创建一个。
- en: How to do it…
  id: totrans-474
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'This section is further divided into the following subsections to make this
    process easier:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 该部分进一步分为以下子部分，以使该过程更加简单：
- en: Adding projects to FOSSA
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将项目添加到FOSSA
- en: Triaging licensing issues
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理许可问题
- en: Adding a FOSSA badge to your project
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向您的项目添加FOSSA徽章
- en: Adding projects to FOSSA
  id: totrans-479
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将项目添加到FOSSA
- en: 'Let''s perform the following steps to add projects to FOSSA:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤将项目添加到FOSSA：
- en: Log in to FOSSA at [https://app.fossa.com/projects](https://app.fossa.com/projects).
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录FOSSA网站[https://app.fossa.com/projects](https://app.fossa.com/projects)。
- en: 'Click on the ADD PROJECTS button:'
  id: totrans-482
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“添加项目”按钮：
- en: '![](assets/dd0fcf9b-efab-479b-ad04-d9b05e49a159.png)'
  id: totrans-483
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dd0fcf9b-efab-479b-ad04-d9b05e49a159.png)'
- en: 'Select QUICK IMPORT and then Continue:'
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择QUICK IMPORT，然后继续：
- en: '![](assets/a9f5d363-3fa6-4a00-be68-c798b83f6907.png)'
  id: totrans-485
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a9f5d363-3fa6-4a00-be68-c798b83f6907.png)'
- en: 'Select your repository location. In this recipe, we will use Gitlab:'
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择存储库位置。在本教程中，我们将使用Gitlab：
- en: '![](assets/f3d5605e-5421-4552-a5e9-31abfdf2b0a2.png)'
  id: totrans-487
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f3d5605e-5421-4552-a5e9-31abfdf2b0a2.png)'
- en: Click on the Connect with Service button.
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“连接服务”按钮。
- en: 'Select the repositories you would like to scan and click on the IMPORT button:'
  id: totrans-489
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您想要扫描的存储库，然后单击“导入”按钮：
- en: '![](assets/de687df8-8954-4c3d-9b92-2c3b208cbe8f.png)'
  id: totrans-490
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/de687df8-8954-4c3d-9b92-2c3b208cbe8f.png)'
- en: FOSSA will import and automatically scan for license compliance issues.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: FOSSA将导入并自动扫描许可合规问题。
- en: Triaging licensing issues
  id: totrans-492
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理许可问题
- en: 'FOSSA does not require any additional steps or code to scan your projects.
    It runs the license scans as soon as you add your repositories to your FOSSA account.
    Let''s take a look:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: FOSSA不需要任何额外的步骤或代码来扫描您的项目。一旦将您的存储库添加到FOSSA帐户中，它就会运行许可证扫描。让我们来看一下：
- en: Log in to [https://app.fossa.com/projects](https://app.fossa.com/projects).
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录[https://app.fossa.com/projects](https://app.fossa.com/projects)。
- en: Select Projects.
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择项目。
- en: 'The SUMMARY tab will display any Flagged Dependencies that have been detected:'
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “摘要”选项卡将显示已检测到的任何“标记的依赖项”：
- en: '![](assets/b5a99787-b596-4e66-9db1-67725ebb24d4.png)'
  id: totrans-497
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b5a99787-b596-4e66-9db1-67725ebb24d4.png)'
- en: 'Click on the ISSUES tab:'
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“问题”选项卡：
- en: '![](assets/511cb090-9bf1-4539-964a-f80468b77b0e.png)'
  id: totrans-499
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/511cb090-9bf1-4539-964a-f80468b77b0e.png)'
- en: Select an Issue Thread from the left menu.
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中选择一个问题线程。
- en: 'Review the issue and the recommended resolution:'
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看问题和推荐的解决方案：
- en: '![](assets/715c2ad4-3f24-413b-a60b-09eca9cc4250.png)'
  id: totrans-502
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/715c2ad4-3f24-413b-a60b-09eca9cc4250.png)'
- en: Based on the action that needs to be taken for the issue, you can either decide
    to create a ticket, leave a comment for discussion with a team member, or resolve
    it with an explanation.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 根据问题需要采取的行动，您可以选择创建一个工单，留下一条评论与团队成员讨论，或者解释并解决问题。
- en: Adding a FOSSA badge to your project
  id: totrans-504
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向您的项目添加FOSSA徽章
- en: 'Let''s perform the following steps to add a FOSSA license check badge to our
    GitHub repository page:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤将FOSSA许可证检查徽章添加到我们的GitHub存储库页面：
- en: Log in to FOSSA at [https://app.fossa.com/projects](https://app.fossa.com/projects).
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录FOSSA网站[https://app.fossa.com/projects](https://app.fossa.com/projects)。
- en: Select Projects to generate a badge.
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择项目以生成徽章。
- en: Switch to the SETTINGS tab.
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到“设置”选项卡。
- en: 'Select SHEILD as the badge format:'
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择SHIELD作为徽章格式：
- en: '![](assets/a01a0175-3b61-44ec-be83-f7c993fe5410.png)'
  id: totrans-510
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a01a0175-3b61-44ec-be83-f7c993fe5410.png)'
- en: Copy the MARKDOWN content to the clipboard.
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将MARKDOWN内容复制到剪贴板。
- en: 'Edit the `README.md` file on the GitHub repository you scanned. Paste the MARKDOWN badge
    code you copied in *step 5* to the beginning of the file:'
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您扫描的GitHub存储库上编辑`README.md`文件。将您在*步骤5*中复制的MARKDOWN徽章代码粘贴到文件的开头：
- en: '![](assets/f005b9d5-de72-474d-9a9e-44e358b70020.png)'
  id: totrans-513
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f005b9d5-de72-474d-9a9e-44e358b70020.png)'
- en: Once you've saved the file, the results of the FOSSA scan will be displayed
    in the badge on your repository.
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件后，FOSSA扫描的结果将显示在存储库的徽章上。
