- en: CircleCI CLI Commands and Automation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CircleCI CLI命令和自动化
- en: In the previous chapter, we covered how to get set up using CircleCI in Bitbucket
    and in GitHub and showed you how to navigate the Bitbucket UI and covered the
    basics of the CircleCI Web UI. In this chapter, we will cover how to install CircleCI
    CLI on macOS/Linux and show you how to get a nightly build from the CLI. We will
    go over each CircleCI CLI command in detail and explain how the workflows in CircleCI
    work. We'll show you how to get a more complicated workflow with a sequential
    jobs setup. We will finish by covering the CircleCI API and show you how to use
    the `jq` JSON command utility to transform JSON when using HTTP requests.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了如何在Bitbucket和GitHub中设置使用CircleCI，并向您展示了如何导航Bitbucket UI，并介绍了CircleCI
    Web UI的基础知识。在本章中，我们将介绍如何在macOS/Linux上安装CircleCI CLI，并向您展示如何从CLI获取夜间构建。我们将详细介绍每个CircleCI
    CLI命令，并解释CircleCI中的工作流程。我们将向您展示如何使用顺序作业设置更复杂的工作流程。最后，我们将介绍CircleCI API，并向您展示如何在使用HTTP请求时使用`jq`
    JSON命令实用程序转换JSON。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: CircleCI CLI installation
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CircleCI CLI安装
- en: CircleCI CLI commands
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CircleCI CLI命令
- en: Using workflows in CircleCI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在CircleCI中使用工作流
- en: Working with the CircleCI API
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CircleCI API
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter will require some basic Unix programming skills and we will build
    upon some of the **continuous integration** (**CI**) and **continuous delivery**
    (**CD**) concepts we have talked about in the previous chapters. It would be useful
    to be somewhat familiar with working with RESTful APIs as we will be using curl
    as a REST client at the end of the chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将需要一些基本的Unix编程技能，并且我们将在前几章中讨论的**持续集成**（**CI**）和**持续交付**（**CD**）概念上进行一些构建。熟悉使用RESTful
    API可能会有所帮助，因为我们将在本章末尾使用curl作为REST客户端。
- en: CircleCI CLI installation
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CircleCI CLI安装
- en: The first prerequisite to install CircleCI CLI is to have Docker ([https://docs.docker.com/install/](https://docs.docker.com/install/))
    installed. To install Docker on your OS, visit the Docker store at [https://store.docker.com/search?type=edition&offering=community](https://store.docker.com/search?type=edition&offering=community) and
    click on the **Docker CE** link which is suitable for your OS or cloud service.
    Follow the installation instructions on their website.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 安装CircleCI CLI的第一个先决条件是已安装Docker ([https://docs.docker.com/install/](https://docs.docker.com/install/))。要在您的操作系统上安装Docker，请访问Docker商店[https://store.docker.com/search?type=edition&offering=community](https://store.docker.com/search?type=edition&offering=community)，并单击适合您的操作系统或云服务的**Docker
    CE**链接。按照其网站上的安装说明进行安装。
- en: 'Make sure that Docker is installed by checking the Docker version either on
    a Windows Command Prompt or an macOS/Linux Terminal application by running a command
    like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在Windows命令提示符或macOS/Linux终端应用程序上运行类似以下命令的命令来确保已安装Docker版本：
- en: '![](assets/2e5d2e3e-f37b-4356-927d-2c001b684e2b.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2e5d2e3e-f37b-4356-927d-2c001b684e2b.png)'
- en: Here I have Docker version 18 installed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我安装了Docker版本18。
- en: Installing CircleCI CLI on macOS/Linux
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在macOS/Linux上安装CircleCI CLI
- en: 'You will need to run the following command to install CircleCI:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要运行以下命令来安装CircleCI：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You will need to run this in a Terminal application shell session.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在终端应用程序shell会话中运行此命令。
- en: Installing nightly build versions of CircleCI through GitHub releases
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过GitHub发布安装夜间版本的CircleCI
- en: 'You can install nightly versions of the CircleCI CLI at the GitHub releases
    page: [https://github.com/CircleCI-Public/circleci-cli/releases](https://github.com/CircleCI-Public/circleci-cli/releases)[.](https://github.com/CircleCI-Public/circleci-cli/releases) You
    will need to look at the Assets section, which looks like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub发布页面安装CircleCI CLI的夜间版本：[https://github.com/CircleCI-Public/circleci-cli/releases](https://github.com/CircleCI-Public/circleci-cli/releases)。您需要查看类似于以下内容的“Assets”部分：
- en: '![](assets/67e6728d-ee02-414c-a6b7-a3c8eb22e1f3.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/67e6728d-ee02-414c-a6b7-a3c8eb22e1f3.png)'
- en: We will pick the `circleci-cli_0.1.771_darwin_amd64.tar.gz` asset as we will
    be running the local CLI on the macOS OS.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将选择`circleci-cli_0.1.771_darwin_amd64.tar.gz`资产，因为我们将在macOS操作系统上运行本地CLI。
- en: 'Run the following commands in a Terminal shell session:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端shell会话中运行以下命令：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We now have a newer version of the CircleCI CLI and can verify this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个更新版本的CircleCI CLI，并且可以验证：
- en: '![](assets/b9cf3e70-6862-46b8-bfc7-26d2374f5d68.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b9cf3e70-6862-46b8-bfc7-26d2374f5d68.png)'
- en: We have named this binary executable `circleci-beta`. This is so we can run
    the stable and nightly versions of CircleCI CLI. This is not something that you
    will have to do; we are doing this for illustration purposes only.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这个二进制可执行文件命名为`circleci-beta`。这样我们就可以运行稳定版和夜间版本的CircleCI CLI。这不是您必须做的事情；我们只是为了举例说明而这样做。
- en: CircleCI CLI commands
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CircleCI CLI命令
- en: The CircleCI CLI is not as fully featured as the Travis CI CLI in terms of feature
    parity with all the features that you can actually use in CircleCI. More commands
    will become available in the future, but at the moment you have six commands that
    you can use in CircleCI CLI, which are `build`, `config`, `help`, `step`, `tests`,
    and `version`, if you use the CircleCI CLI binary in AWS releases ([https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci](https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci))
    from the official CircleCI documentation. We will be using both the stable build
    version and the nightly build version, which has several more commands than the
    stable version. Remember that we installed in the *Installing nightly build versions
    of CircleCI through GitHub releases* section of this chapter. The stable version
    of the command will be `circleci` and the nightly build will be `circleci-beta`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 就功能对等性而言，CircleCI CLI并不像Travis CI CLI那样功能齐全。未来将会有更多的命令可用，但目前您可以在CircleCI CLI中使用六个命令，它们是`build`、`config`、`help`、`step`、`tests`和`version`，如果您从官方CircleCI文档中的AWS发布的CircleCI
    CLI二进制文件中使用([https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci](https://circle-downloads.s3.amazonaws.com/releases/build_agent_wrapper/circleci))。我们将同时使用稳定版本和夜间构建版本，后者比稳定版本多了几个命令。请记住，我们在本章的*通过GitHub发布安装CircleCI的夜间构建版本*部分中安装了它。稳定版本的命令将是`circleci`，夜间构建将是`circleci-beta`。
- en: 'In the following screenshot, we run the `help` command which shows the available
    commands and gives us a brief overview of what each command does:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们运行了`help`命令，显示了可用的命令，并简要概述了每个命令的功能：
- en: '![](assets/b9b84382-b46d-4674-ab85-9d64b56173fb.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b9b84382-b46d-4674-ab85-9d64b56173fb.png)'
- en: Version command
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本命令
- en: 'The `version` command outputs the current version of the CLI that you have
    installed on your local system:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`version`命令输出您在本地系统上安装的CLI的当前版本：'
- en: '![](assets/de730070-ae1c-42ac-8b74-1d24e0ef3032.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/de730070-ae1c-42ac-8b74-1d24e0ef3032.png)'
- en: 'You can also pass a flag/option to each command in the CLI and you can find
    the options that a command takes by running the `--help` flag:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以向CLI中的每个命令传递标志/选项，并且可以通过运行`--help`标志找到每个命令接受的选项：
- en: '![](assets/42c7f35c-48e2-48bd-998a-fcd9188d6ea0.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/42c7f35c-48e2-48bd-998a-fcd9188d6ea0.png)'
- en: There is only one option we can pass to the `version` command, which is `-h`,
    `--help` as this is a very simple command.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以向“version”命令传递的选项只有一个，即“-h”，“--help”，因为这是一个非常简单的命令。
- en: Help command
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帮助命令
- en: 'The `help` command will show all the CLI commands, as we demonstrated at the
    beginning of this section, but it can also be used to explain how each command
    works and will display any flags/options that each command takes:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`help`命令将显示所有CLI命令，就像我们在本节开头演示的那样，但它也可以用来解释每个命令的工作原理，并显示每个命令接受的任何标志/选项：'
- en: '![](assets/fc870348-c0c8-412d-9fd4-a62c926e929e.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fc870348-c0c8-412d-9fd4-a62c926e929e.png)'
- en: Here we ran help on the `help` command itself.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们对“help”命令本身运行了帮助。
- en: Config command
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置命令
- en: 'The `config` command validates and updates the CircleCI configuration YML script:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`config`命令验证并更新CircleCI配置YML脚本：'
- en: '![](assets/14bdd3d0-5df0-4e41-aacf-aaa0b0d555c1.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/14bdd3d0-5df0-4e41-aacf-aaa0b0d555c1.png)'
- en: Here the `config` command also takes the `validate` command, which validates
    your config YML script file.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里`config`命令还接受`validate`命令，用于验证您的配置YML脚本文件。
- en: 'Let us validate the configuration script in the `functional-summer` repo ([https://github.com/packtci/functional-summer](https://github.com/packtci/functional-summer)):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们验证`functional-summer`存储库中的配置脚本([https://github.com/packtci/functional-summer](https://github.com/packtci/functional-summer))：
- en: '![](assets/c4d99005-c7f1-4ce5-94b5-115781f8e0fd.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c4d99005-c7f1-4ce5-94b5-115781f8e0fd.png)'
- en: 'Let us look at the configuration script again:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次查看配置脚本：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is actually a very subtle bug in the config YML script where we simply
    need to indent the `build` field because CircleCI thinks that we do not have any
    jobs in our script. To fix the issue, we simply need to indent the `build` field:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是配置YML脚本中的一个非常微妙的错误，我们只需要缩进`build`字段，因为CircleCI认为我们的脚本中没有任何作业。为了解决这个问题，我们只需要缩进`build`字段：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](assets/57677a87-6dc3-49e9-8113-0de69a9c0863.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/57677a87-6dc3-49e9-8113-0de69a9c0863.png)'
- en: When we ran the `validate` command, it reported that the config YML script is
    valid.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行`validate`命令时，它报告说配置YML脚本是有效的。
- en: Build command
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建命令
- en: 'The `build` command helps you run a CircleCI build on your local machine and
    takes a variety of options as shown in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`build`命令帮助您在本地计算机上运行CircleCI构建，并且可以采用各种选项，如下面的屏幕截图所示：'
- en: '![](assets/352fae0a-159c-40e6-b69d-be17fc023ba7.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/352fae0a-159c-40e6-b69d-be17fc023ba7.png)'
- en: Let us run the `go-template-example-with-circle-ci` ([https://github.com/packtci/go-template-example-with-circle-ci](https://github.com/packtci/go-template-example-with-circle-ci))[ ](https://github.com/packtci/go-template-example-with-circle-ci)GitHub
    repository that we created in [Chapter 12](b65e7e26-1e86-44fc-a912-34de30c085ac.xhtml),
    *Installation and Basics of CircleCI*, and then run the `circleci build` command
    on our local system.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行我们在[第12章](b65e7e26-1e86-44fc-a912-34de30c085ac.xhtml)中创建的`go-template-example-with-circle-ci`
    ([https://github.com/packtci/go-template-example-with-circle-ci](https://github.com/packtci/go-template-example-with-circle-ci))GitHub存储库，然后在本地系统上运行`circleci
    build`命令。
- en: 'Make sure that you go into the directory where your repository lives before
    you run the build command as it needs to read the `config.yml` file inside of
    the `.circleci` folder:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行构建命令之前，确保进入存储库所在的目录，因为它需要读取`.circleci`文件夹中的`config.yml`文件：
- en: '![](assets/d0cbff8c-3ea5-4b78-9047-030e15dec87b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d0cbff8c-3ea5-4b78-9047-030e15dec87b.png)'
- en: The `build` command will execute the steps in the config YML script, starting
    by spinning up an environment. If you have not pulled the language image specified
    in the config YML script then the `circleci build` command will pull down the
    Docker image for you.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`build`命令将执行配置YML脚本中的步骤，首先会启动一个环境。如果您尚未拉取配置YML脚本中指定的语言映像，则`circleci build`命令将为您拉取Docker映像。'
- en: By default, the `circleci build` command will run the steps that are defined
    in the `build` field in the `jobs` section, so if you want to run any other jobs
    than you will need to pass the `--job string` option.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`circleci build`命令将运行在`jobs`部分的`build`字段中定义的步骤，因此如果您想运行其他作业，就需要传递`--job
    string`选项。
- en: 'Here is the current `config.yml` script that we have in the `go-template-example-with-circle-ci`
    GitHub project:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在`go-template-example-with-circle-ci` GitHub项目中的当前`config.yml`脚本：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we want to use another job, we can use the `--job string` option, assuming
    that there is another job:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想使用另一个作业，可以使用`--job string`选项，假设有另一个作业：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now let us validate our config YML script to make sure that it is still valid:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们验证我们的config YML脚本，以确保它仍然有效：
- en: '![](assets/3cb68165-ad8a-4945-9822-1dce13ec5dd7.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3cb68165-ad8a-4945-9822-1dce13ec5dd7.png)'
- en: Now that we know our config YML script is still valid, we can run the new job
    using the `--job string` flag with the `build` command.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道我们的config YML脚本仍然有效，我们可以使用`--job string`标志运行新作业。
- en: '![](assets/51212ff6-1664-4cd8-a934-c4ce2bef6c02.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/51212ff6-1664-4cd8-a934-c4ce2bef6c02.png)'
- en: Here the CLI is downloading the Docker image because we have not pulled this
    particular Docker image into our local computer.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，CLI正在下载Docker映像，因为我们尚未将此特定Docker映像拉入我们的本地计算机。
- en: step command
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤命令
- en: The `step` command will execute a specific step in your config YML script that
    you have defined. At the moment, there is only one sub command of `halt`, which
    will halt the current execution.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`step`命令将执行您定义的配置YML脚本中的特定步骤。目前，只有一个`halt`的子命令，它将停止当前执行。'
- en: 'Here is a sample run of the `step` command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`step`命令的一个示例运行：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: configure command
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置命令
- en: 'The `configure` command is only available with the nightly build version of
    CircleCI and it helps you configure your credentials and the API endpoint you
    will hit:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`configure`命令仅在CircleCI的夜间构建版本中可用，它可以帮助您配置您的凭据和将要访问的API端点：'
- en: '![](assets/8029ac68-e023-49fb-9ae3-e6cb97c53c96.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8029ac68-e023-49fb-9ae3-e6cb97c53c96.png)'
- en: We will run the `configure` command with no flags, which will set it to an interactive
    mode, and then we will set our API token and the API endpoint we wish to hit.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以无标志运行`configure`命令，这将将其设置为交互模式，然后我们将设置我们的API令牌和我们希望访问的API端点。
- en: Setting an API token with CircleCI
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在CircleCI中设置API令牌
- en: 'You need to click on your user avatar in the upper-right side of the CircleCI
    web application, which looks like the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要点击CircleCI Web应用程序右上角的用户头像，它看起来像以下截图：
- en: '![](assets/b52aeda5-fd1e-4896-b976-68edc24f0cf5.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b52aeda5-fd1e-4896-b976-68edc24f0cf5.png)'
- en: 'Once you click on the User settings link you will be redirected to the accounts
    API page which looks like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击“用户设置”链接，您将被重定向到账户API页面，它看起来像这样：
- en: '![](assets/7e9b20cb-f2ed-4f3b-9aa7-477a40725725.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7e9b20cb-f2ed-4f3b-9aa7-477a40725725.png)'
- en: 'Next you will need to click on the Create New Token button, which pops up a
    modal like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要点击“创建新令牌”按钮，这将弹出一个类似于这样的模态框：
- en: '![](assets/c710dd6e-0d34-4470-8940-8044863841c4.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c710dd6e-0d34-4470-8940-8044863841c4.png)'
- en: Here we put in a token name of `PacktCI`. Then we simply click on the Add API
    Token button, which will generate a new API token for us. You need to copy the
    API token into a safe location as you can only use it once.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们输入了一个名为`PacktCI`的令牌名称。然后我们只需点击“添加API令牌”按钮，这将为我们生成一个新的API令牌。您需要将API令牌复制到安全位置，因为您只能使用一次。
- en: Setting the API token and API endpoint in interactive mode
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在交互模式下设置API令牌和API端点
- en: 'We will run the `circleci-beta configure` command in a Terminal session and
    set our credentials and API endpoint:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在终端会话中运行`circleci-beta configure`命令，并设置我们的凭据和API端点：
- en: '![](assets/c3d3c273-d75e-424f-a810-3586cbf79dc5.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c3d3c273-d75e-424f-a810-3586cbf79dc5.png)'
- en: Here we set the API token but the value is hidden for security purposes, and we
    set the API Endpoint to `https://circleci.com/api/v1.1/`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们设置了API令牌，但出于安全目的，该值被隐藏，我们将API端点设置为`https://circleci.com/api/v1.1/`。
- en: The `configure` command is only available in the nightly release and not the
    stable release.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`configure`命令仅在夜间版本中可用，而不是稳定版本。'
- en: Tests command
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试命令
- en: 'The `tests` command collects and splits files with tests:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`tests`命令收集并拆分具有测试的文件：'
- en: '![](assets/976efbd2-7629-4cbd-8165-808896377642.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/976efbd2-7629-4cbd-8165-808896377642.png)'
- en: 'Let us use the `glob` subcommand to find all the Go test files in the `go-template-example-with-circle-ci` ([https://github.com/packtci/go-template-example-with-circle-ci](https://github.com/packtci/go-template-example-with-circle-ci)) GitHub
    repository:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`glob`子命令在`go-template-example-with-circle-ci`（[https://github.com/packtci/go-template-example-with-circle-ci](https://github.com/packtci/go-template-example-with-circle-ci)）GitHub存储库中查找所有Go测试文件：
- en: '![](assets/a1396e90-838a-4cf3-ac36-01701e16b79b.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a1396e90-838a-4cf3-ac36-01701e16b79b.png)'
- en: Using Workflows in CircleCI
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在CircleCI中使用工作流程
- en: 'Workflows in CircleCI are a way to run parallel `build` jobs and can be used
    to define a collection of jobs and to specify a job order. Let us add a workflows
    field to the `go-template-example-with-circle-ci` ([https://github.com/packtci/go-template-example-with-circle-ci](https://github.com/packtci/go-template-example-with-circle-ci)) configuration
    YML script:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: CircleCI中的工作流程是一种运行并行`build`作业的方式，可以用来定义一组作业并指定作业顺序。让我们在`go-template-example-with-circle-ci`（[https://github.com/packtci/go-template-example-with-circle-ci](https://github.com/packtci/go-template-example-with-circle-ci)）配置YML脚本中添加一个工作流字段：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this workflow, we create two parallel jobs called `build` and `integration`
    respectively. They are independent of each other and this will help speed up the
    build process.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个工作流程中，我们分别创建了两个并行作业，分别称为`build`和`integration`。它们彼此独立，这将有助于加快构建过程。
- en: Workflows in action in CircleCI Web UI
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CircleCI Web UI中的工作流程
- en: 'We can see the workflows in the CircleCI web UI if we click on the Workflows
    link in the left navigation pane. You then need to click on a specific project
    which in this case is `go-template-example-with-circle-ci` as shown in the following
    screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击左侧导航窗格中的“工作流程”链接，我们可以在CircleCI Web UI中看到工作流程。然后您需要点击特定的项目，本例中是`go-template-example-with-circle-ci`，如下截图所示：
- en: '![](assets/a9b667b7-79ee-4b5b-bf55-01c74a56b22c.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a9b667b7-79ee-4b5b-bf55-01c74a56b22c.png)'
- en: 'If you click on the RUNNING workflow, you will see the following page:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击“RUNNING”工作流程，您将看到以下页面：
- en: '![](assets/97bbc387-2a2f-4664-bbc4-83b686d00cb5.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/97bbc387-2a2f-4664-bbc4-83b686d00cb5.png)'
- en: The build job ran in 2 seconds but that the integration tests run for longer
    than the build job. It is better to separate these two jobs, as the workflows
    demonstrate, as they are not dependent on each other.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 构建作业运行了2秒，但集成测试运行的时间比构建作业长。最好将这两个作业分开，因为工作流程表明它们彼此不依赖。
- en: Sequential workflows example
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 顺序工作流程示例
- en: The workflows example that we showed you previously contained two jobs that
    ran independent of each other, but we can also have jobs that require other jobs
    to finish in order to be run. Let us say that we have an acceptance test suite
    that only runs if the build is run, and then our application is only deployed
    if the acceptance test suite passes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前展示的工作流程示例包含了两个独立运行的作业，但我们也可以有需要其他作业完成后才能运行的作业。假设我们有一个只有在构建运行时才运行的验收测试套件，然后我们的应用程序只有在验收测试套件通过后才会部署。
- en: In our example, we run an end-to-end test using `cypress.io` ([https://www.cypress.io/](https://www.cypress.io/)), which
    is an end-to-end JavaScript testing library. Assuming that our acceptance tests
    pass in the CI build we can then deploy  our application to Heroku. We covered
    getting set up with Heroku in [Chapter 11](f2319c39-b2e4-40cb-b1bb-53daa589776b.xhtml),
    *Travis CI UI Logging and Debugging*, in the *Heroku setup in Travis CI* section,
    so read that if you need more information on getting Heroku installed and set
    up and for creating an application in Heroku that you can deploy to. We will need
    to add our Heroku API key and app name as environment variables.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们使用`cypress.io`（[https://www.cypress.io/](https://www.cypress.io/)）运行端到端测试，这是一个端到端的JavaScript测试库。假设我们的验收测试在CI构建中通过，我们就可以将我们的应用程序部署到Heroku。我们在[第11章](f2319c39-b2e4-40cb-b1bb-53daa589776b.xhtml)中介绍了如何在Travis
    CI中设置Heroku，*Travis CI UI Logging and Debugging*部分，所以如果您需要更多关于安装和设置Heroku以及在Heroku中创建可以部署的应用程序的信息，请阅读那部分。我们需要将Heroku
    API密钥和应用程序名称添加为环境变量。
- en: Adding environment variables to a project
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向项目添加环境变量
- en: 'In our CircleCI project, we first need to go to our project settings by clicking
    on the gear icon next to the `go-template-example-with-circle-ci` ([https://circleci.com/gh/packtci/go-template-example-with-circle-ci](https://circleci.com/gh/packtci/go-template-example-with-circle-ci))
    project. Make sure that you are in the Jobs or Workflows view and then you should
    see a gear icon:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的CircleCI项目中，我们首先需要通过点击`go-template-example-with-circle-ci`（[https://circleci.com/gh/packtci/go-template-example-with-circle-ci](https://circleci.com/gh/packtci/go-template-example-with-circle-ci)）项目旁边的齿轮图标进入项目设置。确保您在“作业”或“工作流程”视图中，然后您应该看到一个齿轮图标：
- en: '![](assets/66fc9596-b687-45d3-ad52-a4c1640dacc5.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/66fc9596-b687-45d3-ad52-a4c1640dacc5.png)'
- en: 'Once you click the gear icon, you will be redirected to the PROJECT SETTINGS
    page and you will need to click the Environment Variables link. Then your page
    will look like the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击齿轮图标，您将被重定向到“项目设置”页面，您需要点击“环境变量”链接。然后您的页面将看起来像以下截图：
- en: '![](assets/adc3a7b8-517b-4dd3-ad0d-e7826c795c22.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/adc3a7b8-517b-4dd3-ad0d-e7826c795c22.png)'
- en: 'We are going to add two environment variables to our project by clicking on
    the Add Variable button, which pops up a modal like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过点击“添加变量”按钮向我们的项目添加两个环境变量，这将弹出一个如下的模态框：
- en: '![](assets/9befa423-c161-4e90-92a7-4c87e656a223.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9befa423-c161-4e90-92a7-4c87e656a223.png)'
- en: For security purposes, I have removed the contents of both the application name
    and the API token for the project, but once you click the Add Variable button,
    an environment variable is available in the project. We now have two environment
    variables we can use, namely `HEROKU_API_KEY` and `HEROKU_APP_NAME`. These environment
    variables will be available in our `.circleci/config.yml` script.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 出于安全目的，我已经删除了项目的应用程序名称和API令牌的内容，但是一旦您点击“添加变量”按钮，项目中就会有一个环境变量可用。我们现在有两个可以使用的环境变量，即`HEROKU_API_KEY`和`HEROKU_APP_NAME`。这些环境变量将在我们的`.circleci/config.yml`脚本中可用。
- en: Updated workflows section and config YML script
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新了工作流程部分和配置YML脚本
- en: 'Our config YML script now has a deploy `jobs` section and we have updated our
    workflows field like this:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的配置YML脚本现在有一个部署`jobs`部分，并且我们已经更新了我们的工作流程字段如下：
- en: '[PRE8]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The workflow for this change will look different now, as we have set up a sequential
    pipeline for the jobs:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这次更改的工作流程现在看起来不同，因为我们为作业设置了一个顺序管道：
- en: '![](assets/02303299-1a33-42ee-acbf-d6477921db32.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/02303299-1a33-42ee-acbf-d6477921db32.png)'
- en: In the preceding screenshot the build job ran first and then the integration
    job and finally the deploy job. Read the workflows documentation at [https://circleci.com/docs/2.0/workflows/](https://circleci.com/docs/2.0/workflows/)
    for information on more types of workflows.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，构建作业首先运行，然后是集成作业，最后是部署作业。阅读[https://circleci.com/docs/2.0/workflows/](https://circleci.com/docs/2.0/workflows/)上的工作流程文档，了解更多类型的工作流程信息。
- en: Working with the CircleCI API
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CircleCI API
- en: The CircleCI API documentation is available at [https://circleci.com/docs/api/v1-reference/](https://circleci.com/docs/api/v1-reference/).
    To get started working with the API you will need to add an API token. We already
    set an API token in the *Setting an API token with CircleCI* section of this chapter,
    so read that section if necessary.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: CircleCI API文档可在[https://circleci.com/docs/api/v1-reference/](https://circleci.com/docs/api/v1-reference/)上找到。要开始使用API，您需要添加一个API令牌。我们已经在本章的*使用CircleCI设置API令牌*部分设置了一个API令牌，因此如有必要，请阅读该部分。
- en: Test CircleCI API connection
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试CircleCI API连接
- en: 'We will use the `curl` command and our API token to test that we have a good
    CircleCI API connection:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`curl`命令和我们的API令牌来测试我们是否有一个良好的CircleCI API连接：
- en: '![](assets/ec44ad31-573a-413f-bcf9-74d25ceb84c1.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ec44ad31-573a-413f-bcf9-74d25ceb84c1.png)'
- en: Here we did not get any response headers or a status code. In order for you
    to receive those, you need to use the `-i`, `--include` options with the `curl`
    command.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们没有得到任何响应头或状态码。为了接收这些，您需要在`curl`命令中使用`-i`、`--include`选项。
- en: Using the CircleCI API to get build summary for a single Git repo
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CircleCI API获取单个Git存储库的构建摘要
- en: We will use the `GET /project/:vcs-type/:username/:project` API endpoint to
    get the build summary information. You can read the documentation for recent builds
    for a single project at [https://circleci.com/docs/api/v1-reference/#recent-builds-project](https://circleci.com/docs/api/v1-reference/#recent-builds-project).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`GET /project/:vcs-type/:username/:project` API端点来获取构建摘要信息。您可以在[https://circleci.com/docs/api/v1-reference/#recent-builds-project](https://circleci.com/docs/api/v1-reference/#recent-builds-project)上阅读单个项目的最近构建的文档。
- en: 'In the following screenshot, we use the `curl` command to make the REST call
    and use the `jq` ([https://stedolan.github.io/jq/](https://stedolan.github.io/jq/))
    JSON command-line processor to prettify the JSON output as shown in the following
    screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们使用`curl`命令进行REST调用，并使用`jq`（[https://stedolan.github.io/jq/](https://stedolan.github.io/jq/)）JSON命令行处理器来美化JSON输出，如下面的截图所示：
- en: '![](assets/c394b673-bb14-4445-9d0b-cca3ef7d8d9c.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c394b673-bb14-4445-9d0b-cca3ef7d8d9c.png)'
- en: Using the jq utility to compute some metrics of our CircleCI builds
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jq实用程序计算我们的CircleCI构建的一些指标
- en: Let us use the `jq` command-line utility in order to compute some metrics with
    information provided by the CircleCI API. One thing we may want to find is all
    the builds that have passed in the project. We can do this with the `jq` command
    by using the `map` and `select` built-in functions in jq ([https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions](https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions)).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`jq`命令行实用程序来计算CircleCI API提供的信息的一些指标。我们可能想要找到的一个是项目中所有已通过的构建。我们可以使用`jq`命令通过使用jq中的`map`和`select`内置函数来实现这一点（[https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions](https://stedolan.github.io/jq/manual/#Builtinoperatorsandfunctions)）。
- en: 'In the following screenshot, we get the build summary for the last 30 builds
    and then only show the build that actually passed:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们获取了最近30次构建的构建摘要，然后只显示实际通过的构建：
- en: '![](assets/9b06e7b2-40d1-4e8c-8d41-cc1e3f0f6729.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9b06e7b2-40d1-4e8c-8d41-cc1e3f0f6729.png)'
- en: 'Here, we run the `jq` utility with two different queries:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`jq`实用程序进行了两个不同的查询。
- en: The first query is `jq 'map(select(.failed == false)) | length'` and it maps
    over the array of objects and filters out the top-level attribute called `failed`
    when it is `false`.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个查询是`jq 'map(select(.failed == false)) | length'`，它对对象数组进行映射，并在`failed`为`false`时过滤掉顶级属性`failed`。
- en: The second query is `jq '. | length'` and it simply computes the length of the
    array, which is `5`.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个查询是`jq '. | length'`，它只是计算数组的长度，即`5`。
- en: We ran the second command to ensure that the first command did in fact filter
    out some entries in the response payload. From this, we can tell that one build
    did fail in the recent 30 builds for the `go-template-example-with-circle-ci` ([https://github.com/packtci/go-template-example-with-circle-ci](https://github.com/packtci/go-template-example-with-circle-ci))
    GitHub repository.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行了第二个命令，以确保第一个命令确实过滤了响应有效负载中的一些条目。从中我们可以得知，在最近的30次构建中，`go-template-example-with-circle-ci`（[https://github.com/packtci/go-template-example-with-circle-ci](https://github.com/packtci/go-template-example-with-circle-ci)）GitHub存储库中有一次构建失败。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered how to install CircleCI CLI in the macOS/Linux environments
    and showed you how to install a nightly build of the CLI. We showed you how to
    use each command in the CircleCI CLI and also showed you some command features
    that are available in the nightly build of CircleCI CLI. We explained why workflows
    are useful and how to use them in CircleCI. Finally, we showed you how to use
    the CircleCI API and how to gather useful metrics by using the `jq` command utility.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何在macOS/Linux环境中安装CircleCI CLI，并向您展示了如何安装CLI的夜间构建。我们向您展示了如何使用CircleCI
    CLI中的每个命令，并向您展示了CircleCI CLI夜间构建中可用的一些命令功能。我们解释了工作流程为什么有用以及如何在CircleCI中使用它们。最后，我们向您展示了如何使用CircleCI
    API以及如何使用`jq`命令实用程序收集有用的指标。
- en: Questions
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the primary prerequisite to installing the CircleCI CLI?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装CircleCI CLI的主要先决条件是什么？
- en: Where did we get the nightly build of CircleCI CLI from?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从哪里获取了CircleCI CLI的夜间构建？
- en: How many CLI commands exist for the CLI?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI中有多少个命令存在？
- en: Which command in the CLI is useful to know what a specific command does and
    what options a given command takes?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CLI中的哪个命令对于了解特定命令的功能以及给定命令的选项很有用？
- en: How can we run parallel jobs in CircleCI?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在CircleCI中运行并行作业？
- en: Which command did we use to validate our CircleCI YML script?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用哪个命令来验证我们的CircleCI YML脚本？
- en: What is the endpoint for the CircleCI RESTful API?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CircleCI RESTful API的端点是什么？
- en: Further reading
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: You can further explore concepts in CircleCI by looking at the official CircleCI
    documentation at [https://circleci.com/docs/2.0/](https://circleci.com/docs/2.0/).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查看[https://circleci.com/docs/2.0/](https://circleci.com/docs/2.0/)上的官方CircleCI文档进一步探索CircleCI中的概念。
