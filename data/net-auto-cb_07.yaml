- en: Deploying and Operating AWS Networking Resources with Ansible
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible部署和操作AWS网络资源
- en: The cloud is one technology that is transforming multiple industries. It is
    having a significant impact on the overall infrastructure of IT, how applications
    are deployed, and how they are architected to be adopted for the cloud.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 云是改变多个行业的一项技术。它对IT的整体基础设施、应用程序的部署方式以及为云采用而进行架构设计都产生了重大影响。
- en: AWS is one of the main cloud providers. It provides multiple networking resources
    and services to build scalable and highly available networking designs to house
    applications on the AWS cloud.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: AWS是主要的云提供商之一。它提供了多个网络资源和服务，以构建可扩展和高可用的网络设计，以在AWS云上托管应用程序。
- en: One of the main pillars of cloud adoption is automation and how quickly we can
    deploy workloads. Each cloud provider has its own automation capabilities. In
    the case of AWS, this is a service called CloudFormation, which enables us to
    describe the AWS infrastructure using **Infrastructure as Code (IaC)** and to
    deploy the infrastructure on the AWS cloud. However, Ansible's advantage, when
    compared to CloudFormation, is its ability to describe/deploy resources across
    all cloud providers, including AWS. This allows us to have a consistent tool to
    deploy our workload in a multi-cloud environment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 云采用的主要支柱之一是自动化以及我们能够多快地部署工作负载。每个云提供商都有自己的自动化能力。在AWS的情况下，这是一个名为CloudFormation的服务，它使我们能够使用**基础设施即代码（IaC）**描述AWS基础设施，并在AWS云上部署基础设施。然而，与CloudFormation相比，Ansible的优势在于其能够描述/部署所有云提供商（包括AWS）的资源。这使我们能够在多云环境中使用一致的工具来部署我们的工作负载。
- en: Ansible provides multiple modules to interact with the AWS cloud to provision
    and control the different resources within.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible提供了多个模块来与AWS云进行交互，以提供和控制不同的资源。
- en: 'In this chapter, we will focus on the deployment of the basic network services
    offered by AWS, which allow us to build a scalable network design in AWS. We will
    use the following sample AWS network design in our illustration and outline how
    to build this network using Ansible:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于部署AWS提供的基本网络服务，这些服务允许我们在AWS中构建可扩展的网络设计。我们将在我们的示例中使用以下样本AWS网络设计，并概述如何使用Ansible构建这个网络：
- en: '![](assets/d065f4c6-ed9e-4e54-8ea5-41f207c8e462.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d065f4c6-ed9e-4e54-8ea5-41f207c8e462.png)'
- en: 'The main recipes covered in this chapter are as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主要教程如下：
- en: Installing the AWS SDK
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装AWS SDK
- en: Building an Ansible inventory
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建Ansible清单
- en: Authenticating to your AWS account
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证到您的AWS账户
- en: Deploying VPCs using Ansible
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible部署VPC
- en: Deploying subnets using Ansible
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible部署子网
- en: Deploying IGWs using Ansible
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible部署IGWs
- en: Controlling routing within a VPC using Ansible
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible控制VPC内的路由
- en: Deploying network ACLs using Ansible
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible部署网络ACL
- en: Deployment validation using Ansible
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible进行部署验证
- en: Decommissioning AWS resources using Ansible
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible取消部署AWS资源
- en: Technical requirements
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The GitHub code used in this chapter can be found here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的GitHub代码可以在这里找到：
- en: '[https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch7_aws](https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch7_aws)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch7_aws](https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch7_aws)'
- en: 'The following are the software releases that this chapter is based on:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本章基于以下软件版本：
- en: An Ansible machine running CentOS 7
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行CentOS 7的Ansible机器
- en: Ansible 2.9
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 2.9
- en: Python 3.6.8
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6.8
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码的实际操作：
- en: '[https://bit.ly/3ckoAFe](https://bit.ly/3ckoAFe)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3ckoAFe](https://bit.ly/3ckoAFe)'
- en: Installing the AWS SDK
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装AWS SDK
- en: In this recipe, we will outline how to install the Python libraries required
    by Ansible to start interacting with the AWS orchestration system. This step is
    mandatory as these Python libraries must be installed on the Ansible control machine
    in order for all of the Ansible AWS modules to work.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将概述如何安装Ansible所需的Python库，以开始与AWS编排系统进行交互。这一步是强制性的，因为这些Python库必须安装在Ansible控制机器上，以便所有的Ansible
    AWS模块都能正常工作。
- en: Getting ready
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to have sudo access on the machine in order to install the required
    Python libraries. Furthermore, you need to have the `python-pip` package installed
    since we will be using **pip** to install the required Python libraries.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在机器上拥有sudo访问权限，以安装所需的Python库。此外，您需要安装`python-pip`包，因为我们将使用**pip**来安装所需的Python库。
- en: How to do it...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We can test any Ansible AWS module to check whether the required Python library
    is installed:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以测试任何Ansible AWS模块，以检查所需的Python库是否已安装：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Install the `boto` and `boto3` packages, as follows:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`boto`和`boto3`包，如下所示：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The Python SDK libraries that interact with the AWS orchestration system API
    are `boto` and `boto3`. These python packages must be present on the Ansible control
    machine since, with Ansible, all the AWS modules rely on one of these python packages
    to operate. We can check whether this package is already installed on the system
    using the preceding first step to run any AWS module (`aws_az_facts`, for example)
    using the `ansible` command. If the `boto3` library is not present, we will get
    an error message informing us that `boto3` is not installed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与AWS编排系统API交互的Python SDK库是`boto`和`boto3`。这些Python包必须存在于Ansible控制机器上，因为在Ansible中，所有的AWS模块都依赖于这些Python包中的一个来操作。我们可以通过使用上述第一步来运行任何AWS模块（例如`aws_az_facts`）使用`ansible`命令来检查系统上是否已安装了这个包。如果`boto3`库不存在，我们将收到一条错误消息，告知我们`boto3`未安装。
- en: We can install the `boto` and `boto3` packages using the Python pip program
    using the `pip3` command, which will install the packages and all the dependencies
    needed to install and run the package correctly. At this stage, we have all that
    we need to run all the Ansible AWS modules.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Python pip程序使用`pip3`命令安装`boto`和`boto3`包，这将安装所有需要安装和运行包的依赖项。在这个阶段，我们已经拥有了运行所有Ansible
    AWS模块所需的一切。
- en: Building an Ansible inventory
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Ansible清单
- en: In this recipe, we will outline how to build an Ansible inventory to describe
    the infrastructure network setup that we will build across the AWS public cloud.
    This is a mandatory step in order to define all of our VPCs across all the regions
    where we will deploy our infrastructure.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将概述如何构建一个Ansible清单，以描述我们将在AWS公共云中构建的基础设施网络设置。这是为了定义我们将部署基础设施的所有地区中的所有VPC而必须的步骤。
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Create a new `ch7_aws` folder and create a `hosts` file inside it, as shown
    here:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`ch7_aws`文件夹，并在其中创建一个`hosts`文件，如下所示：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create the `ansible.cfg` file inside `ch7_aws` with the contents shown here:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ch7_aws`内创建`ansible.cfg`文件，内容如下所示：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We created the host's Ansible inventory file and we now need to declare our
    VPCs as nodes in our inventory, similarly to how we define a network node. The
    only exception is that a VPC doesn't have a management IP address, so we don't
    specify the `ansible_host` argument for those VPCs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了主机的Ansible清单文件，现在我们需要在清单中声明我们的VPC作为节点，类似于我们如何定义网络节点。唯一的例外是VPC没有管理IP地址，因此我们不为这些VPC指定`ansible_host`参数。
- en: 'We need to create the following groups in our inventory file:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在我们的清单文件中创建以下组：
- en: A US group, which groups all the VPCs in the United States
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个US组，将所有美国的VPC分组在一起
- en: An EU group, which groups all the VPCs in Europe
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个EU组，将所有欧洲的VPC分组在一起
- en: '`prod_vpcs`, which groups all of our production VPCs'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prod_vpcs`，将所有我们的生产VPC分组在一起'
- en: We also need to define the `ansible.cfg` file with all the configuration options
    that we used in all the previous recipes. We need to specify the vault password
    file that includes the encryption password that we will use to encrypt all of
    our sensitive information.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要定义`ansible.cfg`文件，其中包含我们在所有先前示例中使用的所有配置选项。我们需要指定包含我们将用于加密所有敏感信息的加密密码的vault密码文件。
- en: Authenticating to your AWS account
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证到您的AWS账户
- en: In this recipe, we will outline how to create the credentials required to programmatically
    authenticate to our AWS account and how to secure these credentials using Ansible
    Vault. This is a mandatory step in order to be able to run any Ansible modules
    in all the following recipes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将概述如何创建所需的凭据，以便以编程方式对我们的AWS账户进行身份验证，并且如何使用Ansible Vault来保护这些凭据。这是为了能够在所有后续示例中运行任何Ansible模块而必须的步骤。
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible controller must have internet access and the Ansible inventory must
    be set up as outlined in the previous recipe. Also, the user performing these
    steps must have the required access privileges on the AWS account to be able to
    create new users.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible控制器必须具有互联网访问权限，并且Ansible清单必须按照上一个示例中的说明进行设置。此外，执行这些步骤的用户必须具有在AWS账户上创建新用户所需的访问权限。
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Create a new user using **IAM** with Programmatic access, as follows:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**IAM**创建一个新用户，具有编程访问权限，如下所示：
- en: '![](assets/b76fd29a-d093-464f-a7d7-235fdf2f6fe4.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b76fd29a-d093-464f-a7d7-235fdf2f6fe4.png)'
- en: 'Assign the correct IAM policy to this new user, which allows them to create
    all the networking resources that it should manage (or a full access policy, for
    simplicity):'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个新用户分配正确的IAM策略，允许他们创建应该管理的所有网络资源（或者为简单起见，使用完全访问策略）：
- en: '![](assets/becb5c59-a184-499f-8bca-d4c0bb95a62b.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/becb5c59-a184-499f-8bca-d4c0bb95a62b.png)'
- en: 'Finish creating the user and, on the last page, the Add user wizard will display
    the access key ID and the secret access key in a `.csv` file to download. These
    parameters will be used to authenticate to the AWS API for this account:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成用户创建，在最后一页，添加用户向导将显示访问密钥ID和秘密访问密钥的`.csv`文件以供下载。这些参数将用于对该账户的AWS API进行身份验证：
- en: '![](assets/0d4fa659-b2a1-4ad1-bf41-e6c1d687e015.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0d4fa659-b2a1-4ad1-bf41-e6c1d687e015.png)'
- en: 'Encrypt the access key ID and secret access key using Ansible Vault, as follows:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Ansible Vault加密访问密钥ID和秘密访问密钥，如下所示：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create `group_vars` inside `ch7_aws` and create the `all.yml` file inside `group_vars`.
    Populate the `all.yml` file with the passwords encrypted using the `ansible-vault`
    in the previous step:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ch7_aws`内创建`group_vars`，并在`group_vars`内创建`all.yml`文件。使用在上一步中使用`ansible-vault`加密的密码填充`all.yml`文件：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first step is to ensure that a user account has programmatic access to the
    AWS console through the API. In order for a user to authenticate to the AWS API,
    the user must be assigned two passwords, which are generated by AWS during user
    creation or when the user requests to change their password. These two passwords
    are the access key ID and the secret access key. These two passwords are only
    visible and available upon creation and AWS provides them in a CSV file that you
    can download. Furthermore, we need to ensure that this user has the correct IAM
    permission to create the necessary resources (the VPC, subnets, routing tables,
    and so on). So, in our example, this new user is assigned the administrator policy,
    which gives them full access to the AWS account to create any resources (such
    as EC2 instances, VPCs, subnets, and so on). The steps that we have outlined to
    create a new user are optional if a user already has programmatic access and the
    required IAM privileges; we have just demonstrated this for completeness.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是确保用户帐户通过API对AWS控制台具有编程访问权限。为了使用户能够对AWS API进行身份验证，用户必须被分配两个密码，这些密码在用户创建或用户请求更改密码时由AWS生成。这两个密码是访问密钥ID和秘密访问密钥。这两个密码仅在创建时可见，并且AWS会在CSV文件中提供它们供您下载。此外，我们需要确保此用户具有正确的IAM权限来创建必要的资源（VPC、子网、路由表等）。因此，在我们的示例中，为这个新用户分配了管理员策略，这使他们可以完全访问AWS账户以创建任何资源（如EC2实例、VPC、子网等）。我们概述了创建新用户的步骤，如果用户已经具有编程访问权限和所需的IAM权限，则这些步骤是可选的；我们只是为了完整性而演示了这一点。
- en: Since we have the secrets generated by AWS for this account in the CSV file
    in plain text, we can take these passwords and encrypt them using Ansible Vault
    and store them in the `group_vars/all.yml` file so that we can use these credentials
    when we are creating all the resources for our VPCs. We store these secrets into
    the `aws_access_key` and `aws_secret_key_id` parameters after they have been encrypted
    by the `ansible-vault encrypt_string` command. Ansible Vault uses the Vault password
    file that we have declared in the `ansible.cfg` file and this file has the encryption
    password that we will use to encrypt all of these passwords.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在CSV文件中以明文形式生成了AWS为该账户生成的密码，我们可以使用Ansible Vault加密这些密码，并将它们存储在`group_vars/all.yml`文件中，以便在创建VPC的所有资源时使用这些凭据。我们将这些密码加密后存储到`aws_access_key`和`aws_secret_key_id`参数中，使用`ansible-vault
    encrypt_string`命令进行加密。Ansible Vault使用我们在`ansible.cfg`文件中声明的Vault密码文件，该文件具有我们将用于加密所有这些密码的加密密码。
- en: In the next recipe, we will outline how to use these encrypted variables that
    we have created to authenticate to the AWS console when creating VPCs.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个教程中，我们将概述如何使用我们创建的这些加密变量来在创建VPC时进行AWS控制台身份验证。
- en: Deploying VPCs using Ansible
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible部署VPC
- en: In this recipe, we will outline how to deploy AWS VPCs using Ansible. AWS VPCs
    are the foundational networking construct in AWS and they can be thought of as
    a virtual data center within the cloud that the administrator creates within their
    AWS account. In order to start building any other infrastructure-related services
    within AWS, a VPC must first be created. We will outline how to describe all the
    required VPCs and how to automate their creation using Ansible.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将概述如何使用Ansible部署AWS VPC。AWS VPC是AWS中的基础网络构造，可以被视为管理员在其AWS账户中创建的云中的虚拟数据中心。为了开始构建AWS中的任何其他基础设施相关服务，必须首先创建一个VPC。我们将概述如何描述所有必需的VPC以及如何使用Ansible自动化它们的创建。
- en: Getting ready
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: To connect to the AWS API, the AWS control machine must be connected to the
    internet. The AWS account must also be prepared, as outlined in the previous recipe,
    with the required AWS credentials.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到AWS API，AWS控制机器必须连接到互联网。AWS账户也必须按照前面的教程准备好，具有所需的AWS凭据。
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create the `us.yml` and `eu.yml` files under the `group_vars` directory and
    populate these files with the AWS region name definitions, as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`group_vars`目录下创建`us.yml`和`eu.yml`文件，并填写这些文件与AWS区域名称定义，如下所示：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create the `eu_prod_vpc.yml` and `us_prod_vpc.yml` files under the `host_vars`
    directory and populate them with the VPC parameters, as follows:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`host_vars`目录下创建`eu_prod_vpc.yml`和`us_prod_vpc.yml`文件，并填写VPC参数，如下所示：
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create a new playbook, `pb_aws_net_build.yml`, and populate it, as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的playbook，`pb_aws_net_build.yml`，并填写如下：
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: AWS has a global presence and it segregates each part of its infrastructure
    in each part of the world into Regions. An AWS Region is a collection of AWS facilities
    in a part of the world and each Region in AWS is considered to be an isolated
    fault domain with its own orchestration and management systems. So, when we are
    creating a VPC, we need to specify which region we will deploy this VPC into,
    so we need to describe this information in our Ansible variables. In our case,
    we specify the AWS Region for all of our VPCs in the US as `us-east-1` and all
    of our VPCs in the EU as `eu-west-1`. This is achieved by defining the `aws_region`
    variable under the `eu.yml` and `us.yml` files and under the `group_vars` directory.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: AWS具有全球存在，并将其基础设施的每个部分分隔到世界的每个部分中的区域。AWS区域是世界某个地区的AWS设施集合，AWS中的每个区域被认为是一个具有自己的编排和管理系统的隔离故障域。因此，当我们创建VPC时，我们需要指定将在哪个区域部署此VPC，因此我们需要在我们的Ansible变量中描述这些信息。在我们的情况下，我们将所有VPC的AWS区域指定为`us-east-1`和所有VPC的AWS区域指定为`eu-west-1`。这是通过在`eu.yml`和`us.yml`文件以及`group_vars`目录下定义`aws_region`变量来实现的。
- en: 'This logic of the AWS Region is critical for most of the services in AWS that
    are region-specific, and all of the networking constructs that we will build are
    all region-specific. For almost all the AWS Ansible modules, we need to specify
    the AWS Region in order to initiate the correct API call to the correct API endpoint
    in the designated region. This is because the API endpoint for each region has
    a different FQDN. For more information regarding AWS endpoints for all of the
    services in AWS in all of the regions, use the following link:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: AWS区域的这种逻辑对于大多数AWS中特定于区域的服务至关重要，我们将构建的所有网络构造都是特定于区域的。对于几乎所有的AWS Ansible模块，我们需要指定AWS区域，以便发起正确的API调用到指定区域的正确API端点。这是因为每个区域的API端点具有不同的FQDN。有关AWS在所有区域中所有服务的API端点的更多信息，请使用以下链接：
- en: '[https://docs.aws.amazon.com/general/latest/gr/rande.html](https://docs.aws.amazon.com/general/latest/gr/rande.html)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.aws.amazon.com/general/latest/gr/rande.html](https://docs.aws.amazon.com/general/latest/gr/rande.html)'
- en: We need to declare the variables for each VPC under the `host_vars` directory
    and create a YAML file for each of our VPCs. We need to specify the VPC name,
    prefix, and the tags that should be assigned to the VPC. Finally, we need to create
    the Ansible playbook to build our infrastructure and use a new option within the
    playbook, which is the environment. This option creates temporary environment
    variables (`AWS_ACCESS_KEY` and `AWS_SECRET_KEY`) during the playbook's execution.
    These environment variables have their values set to the same values as the `aws_access_key`
    and `aws_secret_key_id` variables that we defined in the `group_vars/all.yml`
    file. This makes the values contained within these environment variables present
    during the playbook execution so that the AWS modules within each task can use
    this information to authenticate all the API calls.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`host_vars`目录下为每个VPC声明变量，并为每个VPC创建一个YAML文件。我们需要指定VPC名称、前缀和应分配给VPC的标记。最后，我们需要创建Ansible剧本来构建我们的基础设施，并在剧本中使用一个新选项，即环境。此选项在剧本执行期间创建临时环境变量（`AWS_ACCESS_KEY`和`AWS_SECRET_KEY`）。这些环境变量的值设置为`group_vars/all.yml`文件中定义的`aws_access_key`和`aws_secret_key_id`变量的相同值。这样，在剧本执行期间，这些环境变量中包含的值可以用于验证每个任务中的AWS模块的所有API调用。
- en: We can create the VPCs on the AWS cloud using the `ec2_vpc_net` Ansible module and
    we can specify the AWS Region where this VPC will be deployed using the `region`
    attribute. We need to define its IP prefix, name, and any associated tags. All
    this information is derived from the variables that we have defined in the `host_vars`
    file for this VPC.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`ec2_vpc_net` Ansible模块在AWS云上创建VPC，并可以使用`region`属性指定将部署此VPC的AWS区域。我们需要定义其IP前缀、名称和任何相关标记。所有这些信息都来自我们为此VPC在`host_vars`文件中定义的变量。
- en: As the module creates the VPC, it returns all of the information for the VPC
    that was created, and we can save this information in a new variable called `create_vpc`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当模块创建VPC时，它会返回创建的VPC的所有信息，我们可以将这些信息保存在一个名为`create_vpc`的新变量中。
- en: 'The following is a snippet of the data returned by the VPC creation task:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是VPC创建任务返回的数据片段：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following screenshot outlines the VPC created on AWS from the console:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图概述了从控制台在AWS上创建的VPC：
- en: '![](assets/ce9fe352-24df-4cf8-ae3c-ea589e06d8d0.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ce9fe352-24df-4cf8-ae3c-ea589e06d8d0.png)'
- en: See also
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'For more information regarding the `ec2_vpc_net` module and the other parameters
    available within this module, use the following URL:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`ec2_vpc_net`模块和此模块中可用的其他参数的更多信息，请使用以下URL：
- en: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_net_module.html](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_net_module.html)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_net_module.html](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_net_module.html)'
- en: Deploying subnets using Ansible
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible部署子网
- en: In this recipe, we will outline how to deploy subnets within our AWS VPCs using
    Ansible. Subnets are a fundamental networking construct within AWS in order to
    provide more resiliency for applications deployed on the AWS cloud. This extra
    resiliency is achieved by the fact that subnets can be mapped to different availability
    zones. Using this logic, we can provide high availability for our deployment by
    spreading our resources into different availability zones.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将概述如何使用Ansible在AWS VPC中部署子网。子网是AWS中的基本网络构造，以便为部署在AWS云上的应用程序提供更弹性。通过将子网映射到不同的可用区，可以实现额外的弹性。使用这种逻辑，我们可以通过将资源分布到不同的可用区来为我们的部署提供高可用性。
- en: Getting ready
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible control machine must have internet reachability and the VPCs must
    already be provisioned as per the previous recipe.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible控制机必须具有互联网可达性，并且VPC必须根据之前的配方进行预配。
- en: How to do it...
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Update the `host_vars/eu_prod_vpc.yml` file with the subnet''s data, as shown
    here. The same is done for `host_vars/us_prod_vpc.yml` to include all of the subnet''s
    data:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用如下所示的子网数据更新`host_vars/eu_prod_vpc.yml`文件。对于`host_vars/us_prod_vpc.yml`也是一样，包括所有子网的数据：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Update the `pb_aws_net_build.yml` playbook and populate it with the new task
    to build the subnets:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`pb_aws_net_build.yml`剧本，并填充新任务以构建子网：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The availability zone is the construct that provides resiliency for the physical
    infrastructure within an AWS Region. In order to use availability zones efficiently,
    we need to map our infrastructure within a VPC to be allocated to different availability
    zones within a region. This is accomplished using AWS subnets.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 可用区是在AWS区域内为物理基础设施提供弹性的构造。为了有效使用可用区，我们需要将VPC内的基础设施分配到区域内的不同可用区。这是通过使用AWS子网来实现的。
- en: In our sample deployment, we use two subnets spread across two availability
    zones in order to provide high availability for our network setup. We declare
    the subnets that we will deploy within each VPC using the `vpc_subnets` variable.
    These variables include the CIDR that we will use within each subnet (which must
    be a subset of the VPC CIDR), the availability zone that we want this subnet to
    be attached to, and, finally, the tags that we want to assign to this subnet.
    We build the availability zone's name using the AWS Region plus a suffix (`a`,
    `b`, `c`, and so on). This is the naming convention that AWS uses to name the
    availability zones within a region.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例部署中，我们使用了两个子网，分布在两个可用区，以提供我们的网络设置高可用性。我们使用`vpc_subnets`变量声明我们将在每个VPC中部署的子网。这些变量包括我们将在每个子网中使用的CIDR（必须是VPC
    CIDR的子集），我们希望将此子网附加到的可用区，最后，我们希望分配给此子网的标签。我们使用AWS区域加上后缀（`a`，`b`，`c`等）构建可用区的名称。这是AWS用于命名区域内可用区的命名约定。
- en: In order to create subnets in AWS, we need to associate a subnet with its parent
    VPC. In order to do this, we need to specify the `vpc-id` parameter during the
    API call to create the subnet. This `vpc-id` is a unique identifier that AWS assigns
    to a VPC during its creation. We get this value from the VPC creation task that
    was executed to create the VPC and we saved the output of this task to the `vpc_create` variable. We
    can use this variable to retrieve the ID of the VPC and assign it to the `vpc-id`
    variable using the `set_fact` module.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在AWS中创建子网，我们需要将子网与其父VPC关联。为了做到这一点，我们需要在创建子网的API调用期间指定`vpc-id`参数。这个`vpc-id`是AWS在创建VPC时分配给VPC的唯一标识符。我们从创建VPC的任务中获取这个值，并将此任务的输出保存到`vpc_create`变量中。我们可以使用这个变量来检索VPC的ID，并使用`set_fact`模块将其分配给`vpc-id`变量。
- en: Finally, we can build the subnets using the `ec2_vpc_subnet` module to create
    the necessary subnets within each VPC and loop over the `vpc_subnets` data structure
    in order to build all the required subnets.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以使用`ec2_vpc_subnet`模块构建子网，以在每个VPC中创建必要的子网，并循环遍历`vpc_subnets`数据结构，以构建所有所需的子网。
- en: 'The following screenshot shows the subnets that are correctly provisioned on
    the AWS cloud in our `US_Prod` VPC:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在我们的`US_Prod` VPC中在AWS云上正确规定的子网：
- en: '![](assets/add19306-d6c3-4727-a6b5-ffe0a79bce24.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/add19306-d6c3-4727-a6b5-ffe0a79bce24.png)'
- en: 'The following are the tags assigned to this subnet:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是分配给此子网的标签：
- en: '![](assets/d16e8772-1fb9-42aa-8db6-077df168efe8.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d16e8772-1fb9-42aa-8db6-077df168efe8.png)'
- en: See also
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'For more information regarding the `ec2_vpc_subnet` module and the other parameters
    available within this module, use the following URL:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`ec2_vpc_subnet`模块和此模块中可用的其他参数的更多信息，请使用以下URL：
- en: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_subnet_module.html#ec2-vpc-subnet-module](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_subnet_module.html#ec2-vpc-subnet-module)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_subnet_module.html#ec2-vpc-subnet-module](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_subnet_module.html#ec2-vpc-subnet-module)'
- en: Deploying IGWs using Ansible
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible部署IGWs
- en: In this recipe, we will outline how to deploy **Internet Gateways** (**IGWs**)
    to our AWS VPCs using Ansible. IGWs are our exit points from our VPC to the internet
    in order to reach a public external destination. Since we are building a public-facing
    service, we need to have internet reachability from our VPC. This is accomplished
    by the IGW construct in the AWS cloud.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将概述如何使用Ansible部署**Internet Gateways**（**IGWs**）到我们的AWS VPC。IGWs是我们从VPC到互联网的出口点，以便到达公共外部目的地。由于我们正在构建一个面向公众的服务，我们需要从我们的VPC到互联网的可达性。这是通过AWS云中的IGW构造实现的。
- en: Getting ready
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible control machine must have internet reachability and the VPCs must
    already be provisioned, as per the previous recipe.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible控制机必须具有互联网可达性，并且VPC必须根据先前的配方进行了规定。
- en: How to do it...
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Update the `eu_prod_vpc.yml` file with the IGW data, as shown here, and do
    the same for `us_prod_vpc.yml`:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`eu_prod_vpc.yml`文件与IGW数据，如下所示，并对`us_prod_vpc.yml`执行相同操作：
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Update the `pb_aws_net_build.yml` playbook and populate it with the new task
    to build the IGW nodes:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`pb_aws_net_build.yml` playbook，并填充新任务以构建IGW节点：
- en: '[PRE13]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The IGW network construct is our exit point from our VPC to reach public destinations
    across the internet. The IGW is attached to the VPC and it provides internet connectivity
    to any resource located within the VPC (such as EC2 or RDS instances). In order
    to create an IGW, we need to specify the VPC that this IGW will be attached to.
    So, we need the ID for the VPC.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: IGW网络构造是我们从VPC到互联网公共目的地的出口点。IGW附加到VPC，并为位于VPC内的任何资源（如EC2或RDS实例）提供互联网连接。为了创建IGW，我们需要指定要将此IGW附加到的VPC。因此，我们需要VPC的ID。
- en: As we discussed in the previous recipe, we get the VPC ID when we create the
    VPC and we can save this variable using a separate task. We can use the value
    of this variable during the IGW's creation. We can use the `ec2_vpc_igw` module
    to create the IGW and specify the region that we want this IGW deployed into.
    We can also specify the VPC ID that the IGW will be attached to. Finally, we can
    specify the tags that we will allocate to the IGW node. The IGW tags are optional,
    but they are critical when using automated deployment since they allow us to reference
    the objects that we have created. We will outline the use of tags when we discuss
    deployment validation and fact collection in the following recipes.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的配方中讨论的，当我们创建VPC时，我们会得到VPC ID，并且我们可以使用一个单独的任务保存这个变量。我们可以在IGW的创建过程中使用这个变量的值。我们可以使用`ec2_vpc_igw`模块创建IGW，并指定我们希望将此IGW部署到的区域。我们还可以指定IGW将附加到的VPC
    ID。最后，我们可以指定要分配给IGW节点的标签。IGW标签是可选的，但在使用自动部署时非常重要，因为它们允许我们引用我们创建的对象。我们将在后续的配方中概述在部署验证和事实收集时使用标签。
- en: When we deploy a new IGW, the `ec2_vpc_igw` module returns the IGW parameters
    that were provisioned inside AWS. One particular parameter that is important is
    `igw-id`. This parameter uniquely identifies the IGW node that was provisioned
    and we must use it when we reference the IGW in any operation related to this
    IGW node.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们部署新的IGW时，`ec2_vpc_igw`模块返回在AWS内部配置的IGW参数。一个特别重要的参数是`igw-id`。此参数唯一标识了配置的IGW节点，我们在引用此IGW节点相关的任何操作时必须使用它。
- en: 'The following is a snippet of the IGW parameters returned by `ec2_vpc_igw`,
    which we captured in the `vpc_igw_create` variable for the IGW node in `us_prod_vpc`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是由`ec2_vpc_igw`返回的IGW参数片段，我们在`us_prod_vpc`中的IGW节点中捕获了这些参数，并将其存储在`vpc_igw_create`变量中：
- en: '[PRE14]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the previous task, we captured the `gateway-id` variable returned by `ec2_vpc_igw`
    and stored it in a new variable, called `igw_id`, which we will use in subsequent
    tasks when referencing the IGW node.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个任务中，我们捕获了`ec2_vpc_igw`返回的`gateway-id`变量，并将其存储在一个新变量`igw_id`中，我们将在后续任务中引用IGW节点时使用它。
- en: 'The following screenshot outlines the IGW node that was provisioned and attached
    to the VPC:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图概述了在VPC中配置和附加的IGW节点：
- en: '![](assets/54d15f07-43e2-430d-847e-7a069061b1d3.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/54d15f07-43e2-430d-847e-7a069061b1d3.png)'
- en: See also
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'For more information regarding the `ec2_igw_vpc` module and the other parameters
    available within this module, use the following URL:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`ec2_igw_vpc`模块和此模块中可用的其他参数的更多信息，请使用以下URL：
- en: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_igw_module.html#ec2-vpc-igw-module](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_igw_module.html#ec2-vpc-igw-module)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_igw_module.html#ec2-vpc-igw-module](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_igw_module.html#ec2-vpc-igw-module)'
- en: Controlling routing within a VPC using Ansible
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible控制VPC内的路由
- en: In this recipe, we will outline how to adjust the routing inside an AWS VPC
    in order to control the traffic forwarding within the subnets inside a VPC. Controlling
    the routing within a VPC allows us to customize the VPC design and how the traffic
    is forwarded within the VPC, as well as how to exit the VPC to external destinations.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将概述如何调整AWS VPC内的路由，以控制VPC内子网中的流量转发。通过控制VPC内的路由，我们可以自定义VPC设计以及VPC内的流量转发方式，以及如何将流量发送到外部目的地。
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible control machine must have internet reachability and the VPCs must
    already be provisioned as per the previous recipe.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible控制机必须具有互联网可达性，并且VPC必须按照上一个示例进行配置。
- en: How to do it...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤
- en: 'Update the `eu_prod_vpc.yml` file with the routing table data, as shown here,
    and do the same for `us_prod_vpc.yml`:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`eu_prod_vpc.yml`文件，其中包含路由表数据，如下所示，并对`us_prod_vpc.yml`执行相同操作：
- en: '[PRE15]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Update the `pb_aws_net_build.yml` playbook and populate it with the following
    tasks to attach the route table to the VPC that we have created:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`pb_aws_net_build.yml` playbook，并填充以下任务以将路由表附加到我们创建的VPC：
- en: '[PRE16]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Update the playbook and populate it with the following tasks to update the
    route table with the required routes:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新playbook并填充以下任务以更新所需路由的路由表：
- en: '[PRE17]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理
- en: Up until this point, we have managed to set up the VPC, the subnets, and the
    IGW. However, although the IGW node is connected to the internet and it is attached
    to the VPC, none of the traffic within the VPC will use the IGW node since the
    routing table associated with the VPC is still not updated and there is no route
    to point the IGW.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经设置了VPC、子网和IGW。但是，尽管IGW节点已连接到互联网并附加到VPC，但VPC相关联的路由表仍未更新，也没有路由指向IGW，因此VPC内的流量都不会使用IGW节点。
- en: 'The following is a snippet of the default routing table for `us_prod_vpc` before
    changing the route table:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在更改路由表之前`us_prod_vpc`的默认路由表的片段：
- en: '![](assets/88194edb-9160-4aed-89c0-038edf8fd015.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/88194edb-9160-4aed-89c0-038edf8fd015.png)'
- en: AWS VPCs have a default route table that is assigned to the VPC and to all the
    subnets that don't have a specific route table associated with them. So, by default,
    all the subnets within the VPC are associated with the VPC's default route table.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: AWS VPC具有默认路由表，该路由表分配给VPC和所有未分配特定路由表的子网。因此，默认情况下，VPC中的所有子网都与VPC的默认路由表相关联。
- en: 'The following is a screenshot that shows that the subnets created within `us_prod_vpc`
    are associated with the default route table:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个截图，显示了在`us_prod_vpc`中创建的子网与默认路由表相关联的情况：
- en: '![](assets/4040a00e-1a9f-44d6-83a6-f2bee739de17.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4040a00e-1a9f-44d6-83a6-f2bee739de17.png)'
- en: In the VPC definition that we have declared for each of our VPCs, we included
    a new data structure called `route_table`, which includes all the information
    we need to adjust the routing table for our VPC and associate all the subnets
    with it.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们为每个VPC声明的VPC定义中，我们包含了一个名为`route_table`的新数据结构，其中包含我们需要调整VPC的路由表并将所有子网与其关联的所有信息。
- en: The first task that we will execute in this recipe is getting the ID for the
    default route table that is associated with the VPC that we have created. We will
    use the `ec2_vpc_route_table_facts` module to get the facts for the route table
    and supply the VPC ID to uniquely identify the VPC. We can store the ID for the
    default route table in the new variable: `rt_id`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将执行的第一个任务是获取与我们创建的VPC相关联的默认路由表的ID。我们将使用`ec2_vpc_route_table_facts`模块来获取路由表的信息，并提供VPC
    ID来唯一标识VPC。我们可以将默认路由表的ID存储在新变量`rt_id`中。
- en: 'The following snippet outlines the route table facts that we retrieved from
    the `ec2_vpnc_facts` module:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们从`ec2_vpnc_facts`模块中检索到的路由表信息的片段：
- en: '[PRE18]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Once we have the ID of the route table associated with the VPC, we can use the
    `ec2_vpc_route_table` module to adjust the routing table for the default route
    table associated with the VPC. We must supply the VPC and route table IDs to uniquely
    identify the exact route table that we want to modify. We can specify the routes
    that we want to inject in the routing table and the subnets that we want to associate
    with this route table. We can inject the default route and point it toward the
    IGW that we created in the previous recipe using `igw-id`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了与VPC关联的路由表的ID，我们可以使用`ec2_vpc_route_table`模块来调整与VPC关联的默认路由表的路由表。我们必须提供VPC和路由表ID以唯一标识我们要修改的确切路由表。我们可以指定要在路由表中注入的路由和要与此路由表关联的子网。我们可以注入默认路由并将其指向我们在上一个配方中使用`igw-id`创建的IGW。
- en: 'The following screenshot outlines the routing table for our VPC after adjusting
    the routing:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在调整路由后，以下截图概述了我们VPC的路由表：
- en: '![](assets/a82b74fa-453e-47b5-97df-a525aea13d33.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a82b74fa-453e-47b5-97df-a525aea13d33.png)'
- en: 'The following screenshot outlines how the two subnets that we have in the VPC
    are now associated with this default route table:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图概述了我们在VPC中有的两个子网现在与此默认路由表关联：
- en: '![](assets/d09225ae-3fd7-40a3-91d6-87f500e492a3.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d09225ae-3fd7-40a3-91d6-87f500e492a3.png)'
- en: See also
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'For more information regarding the multiple modules to interact with the routing
    table of the AWS VPC and the associated modules, use the following links:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 有关与AWS VPC路由表交互的多个模块以及相关模块的更多信息，请使用以下链接：
- en: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_route_table_module.html#ec2-vpc-route-table-module](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_route_table_module.html#ec2-vpc-route-table-module)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_route_table_module.html#ec2-vpc-route-table-module](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_route_table_module.html#ec2-vpc-route-table-module)'
- en: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_route_table_facts_module.html#ec2-vpc-route-table-facts-module ](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_route_table_facts_module.html#ec2-vpc-route-table-facts-module)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_route_table_facts_module.html#ec2-vpc-route-table-facts-module ](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_route_table_facts_module.html#ec2-vpc-route-table-facts-module)'
- en: Deploying network ACLs using Ansible
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible部署网络ACL
- en: In this recipe, we will outline how to deploy **network ACLs** (**NACLs**) on
    AWS. NACLs are one of the security solutions available in AWS to secure computer
    resources deployed in the AWS cloud. In this recipe, we will outline how to describe
    and automate the deployment of NACLs in AWS.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将概述如何在AWS上部署**网络ACLs**（**NACLs**）。NACLs是AWS中可用的安全解决方案之一，用于保护在AWS云中部署的计算资源。在本配方中，我们将概述如何描述和自动化在AWS中部署NACLs的过程。
- en: Getting ready
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible control machine must have internet reachability to reach the AWS
    API endpoints, and the VPCs and subnets must already be provisioned, as per the
    previous recipe.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible控制机必须具有互联网可达性，以便到达AWS API端点，并且VPC和子网必须根据先前的配方进行预配。
- en: How to do it...
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Update the `eu_prod_vpc.yml` file with the NACL definition data, as shown here,
    and do the same for `us_prod_vpc.yml`:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用NACL定义数据更新`eu_prod_vpc.yml`文件，如下所示，并对`us_prod_vpc.yml`执行相同操作：
- en: '[PRE19]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Update the `pb_aws_net_build.yml` playbook and populate it with the following
    task to create the NACLs:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`pb_aws_net_build.yml` playbook，并填充以下任务以创建NACLs：
- en: '[PRE20]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: AWS NACLs are stateless ACLs that have the ability to allow or deny IP traffic
    based on L3 and L4 IP address information. They are enforced on the subnet level
    and are associated with subnets in order to protect all the resources provisioned
    on a subnet. They can block traffic in the ingress (traffic entering the subnet)
    or egress (traffic exiting the subnet) direction. The rules within an NACL are
    processed based on the rule number, so the first matching rule will be applied
    to the traffic flow.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: AWS NACL是有能力基于L3和L4 IP地址信息允许或拒绝IP流量的无状态ACL。它们在子网级别执行，并与子网关联以保护在子网上预配的所有资源。它们可以阻止入口（进入子网的流量）或出口（离开子网的流量）方向的流量。NACL中的规则是根据规则编号进行处理的，因此第一个匹配的规则将应用于流量流向。
- en: 'All subnets have a default NACL attached and AWS sets up the following rules
    for the default NACL:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 所有子网都附加了默认NACL，并且AWS为默认NACL设置了以下规则：
- en: 'On ingress, all traffic is permitted. The following screenshot outlines the
    rules applied to the default NACL:'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在入口处，允许所有流量。以下截图概述了应用于默认NACL的规则：
- en: '![](assets/817ad855-1518-4a40-8850-0851b7082f72.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/817ad855-1518-4a40-8850-0851b7082f72.png)'
- en: 'On egress, all traffic is permitted. The following screenshot outlines the
    rules applied to the default NACL:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在出口处，允许所有流量。以下截图概述了应用于默认NACL的规则：
- en: '![](assets/bb1f7bbc-d33e-4668-97af-4edfc69b03ba.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bb1f7bbc-d33e-4668-97af-4edfc69b03ba.png)'
- en: 'In our sample setup, we will apply an NACL on all of our subnets that enforces
    the following security policy:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例设置中，我们将在所有子网上应用NACL，强制执行以下安全策略：
- en: All TCP traffic to ports `80` and `443` must be allowed.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须允许所有TCP流量到端口`80`和`443`。
- en: Any other traffic should be dropped.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何其他流量应该被丢弃。
- en: By default, there is a `DENY` rule at the end of any NACL that drops all traffic.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，任何NACL的末尾都有一个`DENY`规则，会丢弃所有流量。
- en: 'We define the `network_acls` data structure that holds the NACL definitions
    and all the required fields to set up the required NACLs on all of our subnets
    in both the EU and US regions. In this data structure, we need to define the following
    parameters:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了`network_acls`数据结构，其中包含NACL定义和设置所有所需字段以在我们的EU和US地区的所有子网上设置所需的NACLs。在此数据结构中，我们需要定义以下参数：
- en: '`Name`: This is the name of the NACL and it serves as an identifier.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Name`：这是NACL的名称，它作为标识符。'
- en: '`Subnets`: This defines the subnets that should be associated with this NACL.
    We use the data in our `vpc_subnets` definition to construct this list.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Subnets`：这定义了应与此NACL关联的子网。我们使用我们的`vpc_subnets`定义中的数据来构建此列表。'
- en: '`Ingress_rules`: This defines all the rules that should be applied as part
    of this NACL in the ingress direction.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Ingress_rules`：这定义了应作为此NACL的一部分应用的所有规则，方向为入站。'
- en: '`Engress_rules`: This defines all the rules that should be applied as part
    of this NACL in the egress direction.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Engress_rules`：这定义了应作为此NACL的一部分应用的所有规则，方向为出站。'
- en: We can create a new task within our playbook using `ec2_net_nacl` to provision
    the NACL and attach it to all of our subnets.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在playbook中创建一个新任务，使用`ec2_net_nacl`来配置NACL并将其附加到我们所有的子网。
- en: 'The following screenshot outlines the new NACL deployed in the `EU_prod` VPC:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图概述了在`EU_prod` VPC中部署的新NACL：
- en: '![](assets/84b0059f-fdba-41d5-a1bf-dedb5864da28.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/84b0059f-fdba-41d5-a1bf-dedb5864da28.png)'
- en: 'The following screenshot outlines the subnets associated with our NACL in the
    `EU_prod` VPC:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图概述了与我们在`EU_prod` VPC中的NACL相关联的子网：
- en: '![](assets/4efc85f3-9834-413c-926b-40016ac74cf1.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4efc85f3-9834-413c-926b-40016ac74cf1.png)'
- en: See also
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'For more information regarding the `ec2_net_nacl` Ansible module and the different
    parameters supported by this module, consult the following URL:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 有关`ec2_net_nacl` Ansible模块以及此模块支持的不同参数的更多信息，请参阅以下URL：
- en: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_nacl_module.html](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_nacl_module.html)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_nacl_module.html](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_nacl_module.html)'
- en: Deployment validation using Ansible
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible进行部署验证
- en: In this recipe, we will outline how to collect the operational state of the
    different networking components within AWS, such as VPCs and subnets, and how
    to check that our deployment is being implemented as per our design.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将概述如何收集AWS中不同网络组件的操作状态，例如VPC和子网，并检查我们的部署是否按照我们的设计实施。
- en: Getting ready
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible control machine must have internet reachability and all the networking
    components that we have outlined in the previous recipes should be in place.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible控制机必须具有互联网可达性，并且我们在先前的配方中概述的所有网络组件都应该就位。
- en: How to do it...
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new `pb_vpc_validate.yml` playbook and populate it with the tasks
    to validate the VPC build:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`pb_vpc_validate.yml` playbook，并填充它以验证VPC的构建任务：
- en: '[PRE21]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Update the playbook with the following tasks to collect the facts for the AWS
    subnets:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新playbook以收集AWS子网的信息：
- en: '[PRE22]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Update the playbook with the following task to validate the state of the AWS
    subnets:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新playbook以验证AWS子网的状态：
- en: '[PRE23]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'We can create a new playbook to collect the VPC and subnet''s facts using the `ec2_vpc_net_facts`
    and `ec2_vpc_subnet_facts` Ansible modules. We can collect the data returned from
    these modules and use the `assert` module to validate the state, as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个新的playbook，使用`ec2_vpc_net_facts`和`ec2_vpc_subnet_facts` Ansible模块来收集VPC和子网的信息。我们可以收集这些模块返回的数据，并使用`assert`模块来验证状态，如下所示：
- en: 'VPCs:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VPCs：
- en: Check that the name assigned to the VPC is provisioned as per our design.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查为VPC分配的名称是否按照我们的设计进行了配置。
- en: Check that the CIDR block assigned to the VPC is deployed as per our design.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查为VPC分配的CIDR块是否按照我们的设计部署。
- en: 'Subnets:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 子网：
- en: Check that the CIDR assigned to the subnets is provisioned correctly.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查为子网分配的CIDR是否正确配置。
- en: Check that the subnet is provisioned in the correct availability zone.
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查子网是否在正确的可用区中进行了配置。
- en: We can perform all of the preceding validation by comparing the operational
    state returned by the facts modules with the metadata that we have defined for
    each VPC in either of the `group_vars` or `host_vars` variables.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将事实模块返回的操作状态与我们在`group_vars`或`host_vars`变量中为每个VPC定义的元数据进行比较，执行所有前述验证。
- en: In the `ec2_vpc_net_facts` task, we used the `filters` parameter to select our
    VPC based only on its `Name` tag. By default, this module will return the facts
    for all of the VPCs within this region.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ec2_vpc_net_facts`任务中，我们使用`filters`参数仅基于其`Name`标签选择我们的VPC。默认情况下，此模块将返回此区域内所有VPC的信息。
- en: In the `ec2_vpc_subnet_facts` task, we used the `filters` parameter to only
    retrieve the subnets data for our VPC, since by default this module will return
    all the subnets' facts for all of our VPCs within the region.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ec2_vpc_subnet_facts`任务中，我们使用`filters`参数仅检索我们的VPC的子网数据，因为默认情况下，此模块将返回此区域内所有VPC的所有子网信息。
- en: See also
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'For more information regarding the modules for fact collection for the different
    network resources in AWS, use the following links:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 有关AWS中不同网络资源的事实收集模块的更多信息，请使用以下链接：
- en: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_net_facts_module.html#ec2-vpc-net-facts-module](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_net_facts_module.html#ec2-vpc-net-facts-module)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_net_facts_module.html#ec2-vpc-net-facts-module](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_net_facts_module.html#ec2-vpc-net-facts-module)'
- en: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_subnet_facts_module.html#ec2-vpc-subnet-facts-module](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_subnet_facts_module.html#ec2-vpc-subnet-facts-module)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_subnet_facts_module.html#ec2-vpc-subnet-facts-module](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_subnet_facts_module.html#ec2-vpc-subnet-facts-module)'
- en: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_igw_facts_module.html#ec2-vpc-igw-facts-module](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_igw_facts_module.html#ec2-vpc-igw-facts-module)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.ansible.com/ansible/latest/modules/ec2_vpc_igw_facts_module.html#ec2-vpc-igw-facts-module](https://docs.ansible.com/ansible/latest/modules/ec2_vpc_igw_facts_module.html#ec2-vpc-igw-facts-module)'
- en: Decommissioning resources on AWS using Ansible
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible在AWS上解除资源
- en: In this recipe, we will outline how to decommission a complete network within
    AWS with all the associated network resources. This outlines how we can easily
    build and tear down resources on the cloud with a simple playbook execution using
    Ansible.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将概述如何在AWS中解除完整的网络及其所有相关网络资源。这概述了我们如何可以使用Ansible轻松构建和拆除云上的资源，只需执行一个简单的playbook。
- en: Getting ready
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Ansible control machine must have internet reachability and all the networking
    components that we have outlined in the previous recipes should be in place.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible控制机必须具有互联网可达性，并且我们在前面的配方中概述的所有网络组件都应该就位。
- en: How to do it...
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new `pb_delete_vpc.yml` playbook with the following tasks to collect
    the facts for the VPC:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`pb_delete_vpc.yml` playbook，包括以下任务来收集VPC的事实：
- en: '[PRE24]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Update the playbook with the following tasks to remove all the subnets and
    IGW nodes within the VPC:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新playbook，添加以下任务以删除VPC内的所有子网和IGW节点：
- en: '[PRE25]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Update the playbook with the following task to remove all the NACLs:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新playbook，添加以下任务以删除所有NACLs：
- en: '[PRE26]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Update the playbook with the final task to remove all the VPCs:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新playbook，添加最终任务以删除所有VPCs：
- en: '[PRE27]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works...
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: We can start our new playbook with a collection of facts for our VPC to get
    the VPC ID for our deployed VPC. Once we have this information, we can start to
    delete the resources. However, the order in which we delete the resources is important.
    We need to remove any dependent resources first, so we must remove the subnets
    before we can remove the VPC. So, for example, if there are EC2 instances attached
    to the subnet, we must remove these EC2 instances before we can remove the subnets.
    So, in our case, we need to remove the subnets, then the IGW node, and then, finally,
    remove the VPC.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从收集VPC事实开始我们的新playbook，以获取部署的VPC的VPC ID。一旦我们获得了这些信息，我们就可以开始删除资源。然而，删除资源的顺序很重要。我们需要先删除任何依赖资源，因此我们必须先删除子网，然后才能删除VPC。例如，如果有EC2实例连接到子网，我们必须先删除这些EC2实例，然后才能删除子网。因此，在我们的情况下，我们需要先删除子网，然后是IGW节点，最后才是删除VPC。
- en: In all of these tasks, we are using the same exact modules that we have outlined
    in the previous recipes. The only change is that we are setting the state to be
    absent and we are supplying the required VPC ID to uniquely identify the VPC that
    we need to remove the required resources from.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些任务中，我们使用的是前面配方中概述的完全相同的模块。唯一的变化是我们将状态设置为不存在，并且我们提供所需的VPC ID来唯一标识我们需要从中删除所需资源的VPC。
- en: Finally, when we start removing the resources within the VPC, we are validating
    first whether a VPC ID is present. If the resources have already been deleted
    and we run the playbook again, the deletion step would be skipped since no VPC
    ID would be retrieved by the `facts` task.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当我们开始删除VPC内的资源时，我们首先验证是否存在VPC ID。如果资源已经被删除并且我们再次运行playbook，删除步骤将被跳过，因为`facts`任务不会检索到VPC
    ID。
