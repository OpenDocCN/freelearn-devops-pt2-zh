- en: Network Validation with Batfish and Ansible
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Batfish和Ansible进行网络验证
- en: In all previous chapters of this book, we have used multiple recipes to outline
    how to perform network validation using Ansible—we have done this by utilizing
    the different modules available within Ansible. In all of these cases, we performed
    network validation after pushing the configuration into the network devices. We
    then collected the network state and validated that it was aligned with our intended
    state. However, we may want to validate the network state *prior* to pushing the
    configuration on the devices. As well as this, it might be necessary to validate
    that the intended network state is as desired without even touching our network.
    But how do we do this?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的所有先前章节中，我们使用了多个示例来概述如何使用Ansible执行网络验证——我们通过利用Ansible中可用的不同模块来实现这一点。在所有这些情况下，我们在将配置推送到网络设备后执行了网络验证。然后，我们收集了网络状态并验证其是否与我们预期的状态一致。然而，我们可能希望在将配置推送到设备之前验证网络状态。此外，可能需要验证预期的网络状态是否符合要求，甚至在不触及网络的情况下进行验证。但是我们该如何做到呢？
- en: 'Batfish is an open source project that targets this use case. Its main aim
    is to provide an offline network validation tool to validate multiple aspects
    of the network configuration. Batfish can provide a validation and correctness
    guarantee for security, compliance, and traffic forwarding for the network. It
    uses the device configuration from our network devices to build a neutral data
    model and forwarding tree for our network, which we can then use to validate the
    network state and validate the correct traffic forwarding within our network.
    The following diagram outlines the high-level architecture of Batfish, and how
    it works:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Batfish是一个针对这种用例的开源项目。它的主要目标是提供一个离线网络验证工具，以验证网络配置的多个方面。Batfish可以为网络提供安全性、合规性和流量转发的验证和正确性保证。它使用我们网络设备的设备配置来构建我们网络的中立数据模型和转发树，然后我们可以使用它来验证网络状态和验证网络内的正确流量转发。以下图表概述了Batfish的高级架构以及其工作原理：
- en: '![](assets/e2bc47aa-c25f-432b-8b20-04af58125533.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e2bc47aa-c25f-432b-8b20-04af58125533.png)'
- en: Batfish uses a client/server model. With this, we run a Batfish server instance
    (written in Java), and we communicate with the server using a client-side **software
    development kit** (**SDK**) called **Pybatfish** (written in Python). We then
    initialize a snapshot of our network using our network configuration files, and,
    based on this network snapshot, the Batfish server computes a data model for our
    network. Using the client, we can start to ask questions to validate our network
    using this vendor-neutral data model.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Batfish使用客户端/服务器模型。通过这种模型，我们运行一个Batfish服务器实例（用Java编写），并使用一个名为Pybatfish的客户端软件开发工具包（用Python编写）与服务器进行通信。然后，我们使用网络配置文件初始化我们网络的快照，并且基于这个网络快照，Batfish服务器为我们的网络计算了一个数据模型。使用客户端，我们可以开始使用这个供应商中立的数据模型来验证我们的网络。
- en: The Batfish team has developed multiple Ansible modules that wrap around the
    **Pybatfish** client library to retrieve the data model generated by the Batfish
    server. The modules allow us to perform different queries against this network
    model to validate our network state. The diagram that appears next outlines the
    interaction between Ansible, Pybatfish, and the Batfish server.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Batfish团队开发了多个Ansible模块，这些模块包装了Pybatfish客户端库，以检索Batfish服务器生成的数据模型。这些模块允许我们针对网络模型执行不同的查询，以验证我们的网络状态。接下来的图表概述了Ansible、Pybatfish和Batfish服务器之间的交互。
- en: In this chapter, we will outline how to install Batfish and how to integrate
    it with Ansible in order to start using it to validate the network state, prior
    to pushing the configuration to our devices. This combination is very powerful,
    and can easily be extended to build complete **continuous integration/continuous
    deployment** (**CI/CD**) pipelines for network configuration changes. Batfish
    can be an integral part to provide pre-validation prior to pushing the configuration
    to network devices in production.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将概述如何安装Batfish以及如何将其与Ansible集成，以便开始使用它来验证网络状态，而不是将配置推送到我们的设备。这种组合非常强大，并且可以轻松扩展到构建用于网络配置更改的完整持续集成/持续部署（CI/CD）流水线。Batfish可以成为在将配置推送到生产网络设备之前提供预验证的重要组成部分。
- en: 'We are going to use the following network topology, which we used in *[Chapter
    4](c37fb79b-fda8-46cb-8ff2-742a3a4e6b97.xhtml), Building Data Center Networks
    with Arista and Ansible, *to outline how we can validate this sample leaf-spine
    network topology using Ansible and Batfish:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下网络拓扑，该拓扑在*[第4章](c37fb79b-fda8-46cb-8ff2-742a3a4e6b97.xhtml)中使用，构建数据中心网络与Arista和Ansible，*来概述如何使用Ansible和Batfish验证样本叶脊网络拓扑：
- en: '**![](assets/892d5c1c-8d25-43c5-be84-50ed78c1311b.png)**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](assets/892d5c1c-8d25-43c5-be84-50ed78c1311b.png)**'
- en: 'The main recipes covered in this chapter are:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主要内容有：
- en: Installing Batfish
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Batfish
- en: Integrating Batfish with Ansible
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Batfish与Ansible集成
- en: Generating the network configuration
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成网络配置
- en: Creating a network snapshot for Batfish
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Batfish创建网络快照
- en: Initializing the network snapshot with Ansible
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Ansible初始化网络快照
- en: Collecting network facts from Batfish
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从Batfish收集网络信息
- en: Validating traffic forwarding with Batfish
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Batfish验证流量转发
- en: Validating **access control lists** (**ACLs**) with Batfish
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Batfish验证访问控制列表（ACLs）
- en: Technical requirements
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'All the code described in this chapter can be found at this URL: [https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch10_batfish](https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch10_batfish).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中描述的所有代码都可以在以下网址找到：[https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch10_batfish](https://github.com/PacktPublishing/Network-Automation-Cookbook/tree/master/ch10_batfish)。
- en: 'This chapter is based on the following software releases:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章基于以下软件版本：
- en: Ansible machine running CentOS 7.7
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行CentOS 7.7的Ansible机器
- en: A CentOS 7.7 machine hosting a Batfish container
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管Batfish容器的CentOS 7.7机器
- en: Python 3.6.8
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6.8
- en: Ansible 2.9
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 2.9
- en: Arista **virtualized extensible operating system** (**vEOS**) running EOS 4.20.1F
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Arista **虚拟化可扩展操作系统**（**vEOS**）运行 EOS 4.20.1F
- en: 'Check out the following video to see the Code in Action:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际操作：
- en: '[https://bit.ly/3bhke1A](https://bit.ly/3bhke1A)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://bit.ly/3bhke1A](https://bit.ly/3bhke1A)'
- en: Installing Batfish
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Batfish
- en: In this recipe, we will outline how to install the Batfish container (the server
    component in the Batfish architecture) and start it, in order to start to interact
    with it from Ansible. This is a mandatory foundation step in order to start validating
    our network using Batfish.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们将概述如何安装 Batfish 容器（Batfish 架构中的服务器组件）并启动它，以便从 Ansible 开始与其进行交互。这是一个必要的基础步骤，以便开始使用
    Batfish 验证我们的网络。
- en: Getting ready
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: As outlined in this chapter introduction, we will install Batfish on a separate
    Linux machine. This machine needs to have internet connectivity in order to be
    able to install Docker and pull down the Batfish container.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章介绍所述，我们将在单独的 Linux 机器上安装 Batfish。这台机器需要具有互联网连接，以便能够安装 Docker 并下载 Batfish
    容器。
- en: How to do it...
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Install Docker on the CentOS Linux machine, as demonstrated at the following
    URL:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 CentOS Linux 机器上安装 Docker，如下面的网址所示：
- en: '[https://docs.docker.com/install/linux/docker-ce/centos/](https://docs.docker.com/install/linux/docker-ce/centos/)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.docker.com/install/linux/docker-ce/centos/](https://docs.docker.com/install/linux/docker-ce/centos/)'
- en: 'Once Docker is installed and operational, download the Docker container, as
    shown in the following code snippet:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Docker 安装并运行，下载 Docker 容器，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Start the Batfish container, as shown in the following code snippet:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Batfish 容器，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Batfish provides multiple options for installing and running the Batfish server.
    However, the simplest and most recommended method is to run a Docker container
    that houses the Batfish server. In order to run this Docker container, we first
    need to install Docker on the CentOS Linux machine. In our case, Docker can be
    installed on different Linux distributions, and also on macOS and Windows.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Batfish 提供了多种安装和运行 Batfish 服务器的选项。然而，最简单和最推荐的方法是运行一个包含 Batfish 服务器的 Docker 容器。为了运行这个
    Docker 容器，我们首先需要在 CentOS Linux 机器上安装 Docker。在我们的情况下，Docker 可以安装在不同的 Linux 发行版上，也可以安装在
    macOS 和 Windows 上。
- en: Once Docker is installed, we download the Batfish container to our Linux machine
    using the `docker pull` command and start the Docker container using the `docker
    run` command. We must expose **Transmission Control Protocol** (**TCP**) ports
    `9996` and `9997` from the container and map them on the Linux machine, using
    the `-p` directive. We map these ports to the same ports on the Linux machine.
    These ports are used to interact with the Batfish server from the remote client
    (the *Pybatfish* client library installed on the Ansible control machine).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 Docker，我们使用 `docker pull` 命令将 Batfish 容器下载到我们的 Linux 机器上，并使用 `docker run`
    命令启动 Docker 容器。我们必须从容器中暴露 **传输控制协议**（**TCP**）端口 `9996` 和 `9997`，并将它们映射到 Linux
    机器上，使用 `-p` 指令。我们将这些端口映射到 Linux 机器上的相同端口。这些端口用于从远程客户端（安装在 Ansible 控制机器上的 *Pybatfish*
    客户端库）与 Batfish 服务器进行交互。
- en: 'Batfish provides two Docker containers: `batfish/batfish` and `batfish/allinone`.
    The `batfish/allinone` container has the Batfish server and the Pybatfish client
    library. It also has the Jupyter Notebook Python library installed, along with
    some sample notebooks, to start interacting with the Batfish server. However,
    we will not be using this approach. Instead, we will be using the `batfish/batfish`
    container, which only has the Batfish server.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Batfish 提供两个 Docker 容器：`batfish/batfish` 和 `batfish/allinone`。`batfish/allinone`
    容器包含 Batfish 服务器和 Pybatfish 客户端库。它还安装了 Jupyter Notebook Python 库以及一些示例笔记本，以开始与
    Batfish 服务器进行交互。但是，我们不会使用这种方法。相反，我们将使用 `batfish/batfish` 容器，它只包含 Batfish 服务器。
- en: See also...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅…
- en: 'For more information regarding Batfish and how to install it, please visit
    the following URLs:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Batfish 及其安装方法的更多信息，请访问以下网址：
- en: '[https://github.com/batfish/docker](https://github.com/batfish/docker)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/batfish/docker](https://github.com/batfish/docker)'
- en: '[https://github.com/batfish/batfish/blob/master/README.md](https://github.com/batfish/batfish/blob/master/README.md)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/batfish/batfish/blob/master/README.md](https://github.com/batfish/batfish/blob/master/README.md)'
- en: Integrating Batfish with Ansible
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Batfish 与 Ansible 集成
- en: In order to integrate Batfish with Ansible, we need to install the required Python
    packages. Doing so will allow Ansible to communicate with the Batfish server.
    In this recipe, we will outline how to install these Python packages, as well
    as how to install the required Ansible roles needed to run the required Batfish
    Ansible modules.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 Batfish 与 Ansible 集成，我们需要安装所需的 Python 包。这样做将允许 Ansible 与 Batfish 服务器进行通信。在这个步骤中，我们将概述如何安装这些
    Python 包，以及如何安装运行所需的 Batfish Ansible 模块所需的 Ansible 角色。
- en: Getting ready
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In order to follow along with this recipe, the Ansible controller must have
    internet connectivity. This will allow us to install the required dependencies
    for Batfish.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了按照这个步骤进行操作，Ansible 控制器必须具有互联网连接。这将允许我们安装 Batfish 所需的依赖项。
- en: How to do it…
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Install the Batfish client python3 package on the Ansible controller, as shown
    in the following code snippet:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Ansible 控制器上安装 Batfish 客户端 python3 包，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Download the `batfish` Ansible roles to the `roles` folder, as shown in the
    following code snippet:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 `batfish` Ansible 角色到 `roles` 文件夹中，如下面的代码片段所示：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In this recipe, we are setting up the integration between Ansible and Batfish.
    This is accomplished through two steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个步骤中，我们正在设置 Ansible 和 Batfish 之间的集成。这通过两个步骤完成：
- en: On the Ansible controller, we need to install the `pybatfish` Python library,
    which is the Batfish client-side SDK that interacts with the Batfish server. This
    package is required by the Ansible modules. These will be used to interact with
    the Batfish server in our playbooks.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Ansible控制器上，我们需要安装`pybatfish` Python库，这是与Batfish服务器交互的Batfish客户端SDK。这个包是Ansible模块所需的。这些将被用于在我们的playbooks中与Batfish服务器交互。
- en: Secondly, we install the `batfish` roles that the Batfish team has developed
    in order to interact with the Batfish server and validate network device configuration.
    This Ansible role contains all the required Python scripts to run the custom Ansible
    modules for Batfish. In order to install this role onto the Ansible control machine,
    we are using `ansible-galaxy`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，我们安装了Batfish团队开发的`batfish`角色，以便与Batfish服务器交互并验证网络设备配置。这个Ansible角色包含了运行Batfish自定义Ansible模块所需的所有Python脚本。为了将此角色安装到Ansible控制机上，我们使用`ansible-galaxy`。
- en: 'We can validate that `pybatfish` is installed correctly like so:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以验证`pybatfish`是否正确安装，如下所示：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can now explore the installed role downloaded by `ansible-galaxy`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以探索由`ansible-galaxy`下载的已安装角色：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is the list of Python source code for this role, which is found in the
    `library` folder for this role:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此角色的Python源代码列表，该列表位于此角色的`library`文件夹中：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With these two steps covered, the Ansible controller is ready to start interacting
    with the Batfish server that we deployed in the previous recipe.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 通过完成这两个步骤，Ansible控制器已经准备好开始与我们在上一个示例中部署的Batfish服务器进行交互。
- en: Since we didn't specify any additional arguments on the `ansible-galaxy install`
    command, the roles will be installed on the `~/.ansible/roles` path by default.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有在`ansible-galaxy install`命令上指定任何额外的参数，这些角色将默认安装在`~/.ansible/roles`路径上。
- en: See also...
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'For more information on Pybatfish and the Ansible roles developed by Batfish
    and to be used with Ansible, please check this page: [https://github.com/batfish/batfish/blob/master/README.md](https://github.com/batfish/batfish/blob/master/README.md).'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Pybatfish和Batfish开发的Ansible角色以及与Ansible一起使用的更多信息，请查看此页面：[https://github.com/batfish/batfish/blob/master/README.md](https://github.com/batfish/batfish/blob/master/README.md)。
- en: Generating the network configuration
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成网络配置
- en: To start our analysis and validation with Batfish, we need to provide the configuration
    for our network devices to the Batfish server. In this recipe, we will outline
    how to generate this configuration using Ansible. Batfish is an offline network
    validation tool, and having a complete network configuration is one of the mandatory
    steps for achieving the correct network validation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Batfish进行分析和验证，我们需要向Batfish服务器提供我们网络设备的配置。在这个示例中，我们将概述如何使用Ansible生成这个配置。Batfish是一种离线网络验证工具，拥有完整的网络配置是实现正确的网络验证的必要步骤之一。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: There are no specific requirements here, other than having Ansible installed
    on the Ansible control machine.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有特定的要求，除了在Ansible控制机上安装了Ansible。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Create a new folder named `ch10_batfish` that will hold all our variables and
    playbooks.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`ch10_batfish`的新文件夹，其中将包含所有我们的变量和playbooks。
- en: Populate all the variables to describe our network in the `group_vars/all.yml` file
    and the `host_vars` folder. Here, we are using the exact same variables that were
    outlined in [*Chapter* 4](c37fb79b-fda8-46cb-8ff2-742a3a4e6b97.xhtml), *Building
    Data Center Networks with Arista and Ansible*.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填充所有变量以描述我们的网络在`group_vars/all.yml`文件和`host_vars`文件夹中。在这里，我们使用的是[*第4章*](c37fb79b-fda8-46cb-8ff2-742a3a4e6b97.xhtml)中概述的完全相同的变量，*使用Arista和Ansible构建数据中心网络*。
- en: Create a `roles` folder inside the `ch10_batfish` folder, in order to house
    all the roles that we will create.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ch10_batfish`文件夹内创建一个`roles`文件夹，以容纳我们将创建的所有角色。
- en: 'Create a new role named `generate_fabric_config`, like so:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`generate_fabric_config`的新角色，如下所示：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Build all the Jinja2 templates inside the `templates` folder to create the interfaces,
    management, and **Border Gateway Protocol** (**BGP**) configuration.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`templates`文件夹中的所有Jinja2模板，以创建接口、管理和**边界网关协议**（**BGP**）配置。
- en: Include all the required tasks to build the configuration in the `tasks/main.yml`
    file. Again, we are using the exact same steps and modules already discussed in
    [*Chapter* 4](c37fb79b-fda8-46cb-8ff2-742a3a4e6b97.xhtml), *Building Data Center
    Networks with Arista and Ansible,* to build the configuration for this sample
    network.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`tasks/main.yml`文件中包含构建配置所需的所有任务。同样，我们使用的是[*第4章*](c37fb79b-fda8-46cb-8ff2-742a3a4e6b97.xhtml)中已经讨论过的完全相同的步骤和模块，*使用Arista和Ansible构建数据中心网络*，以构建此示例网络的配置。
- en: 'Create the `ansible_host` inventory, as shown in the following code block:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`ansible_host`清单，如下面的代码块所示：
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, create a new playbook named `pb_build_fabric_config.yml`, like so:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个名为`pb_build_fabric_config.yml`的新playbook，如下所示：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we are using Ansible to generate the configuration for the network
    devices in our sample topology. We are also using the exact same data and variables
    structure that we have discussed in [Chapter 4](c37fb79b-fda8-46cb-8ff2-742a3a4e6b97.xhtml),
    *Building Data Center Networks with Arista and Ansible*. We group all our infrastructure
    definition using the YAML files inside the `group_vars` and `host_vars` folders.
    We are also using the exact same Jinja2 templates that have been used in [Chapter
    4](c37fb79b-fda8-46cb-8ff2-742a3a4e6b97.xhtml),* Building Data Center Networks
    with Arista and Ansible*,in order to generate the configuration snippet for interfaces,
    BGP, and the management configuration for our devices.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用Ansible来生成我们示例拓扑中网络设备的配置。我们还使用了我们在[第4章](c37fb79b-fda8-46cb-8ff2-742a3a4e6b97.xhtml)中讨论过的完全相同的数据和变量结构，*使用Arista和Ansible构建数据中心网络*。我们使用YAML文件将所有基础设施定义分组在`group_vars`和`host_vars`文件夹中。我们还使用了在[第4章](c37fb79b-fda8-46cb-8ff2-742a3a4e6b97.xhtml)中使用的完全相同的Jinja2模板，*使用Arista和Ansible构建数据中心网络*，以生成接口、BGP和设备管理配置的配置片段。
- en: We use the `ansible-galaxy init` command to build the role skeleton, and we
    use the `--init-path` directive to specify where to create this new role.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`ansible-galaxy init`命令构建角色骨架，并使用`--init-path`指令指定在哪里创建这个新角色。
- en: 'The following output outlines the structure of our new role to generate the
    configuration for our devices:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出概述了我们用于生成设备配置的新角色的结构：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'At this point, we create a new playbook to generate the device configuration,
    and we use the `connection` local parameter since we need to capture the configuration
    of the network devices on the Ansible controller node. Once we have run the playbook,
    we are left with the configuration for all our devices on the `configs` folder,
    as shown in the following code block:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们创建一个新的playbook来生成设备配置，并使用`connection`本地参数，因为我们需要在Ansible控制器节点上捕获网络设备的配置。运行完playbook后，我们将得到所有设备的配置在`configs`文件夹中，如下面的代码块所示：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Creating a network snapshot for Batfish
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Batfish创建网络快照
- en: To allow Batfish to analyze the network using the devices' configuration files,
    these files need to be structured in a specific order. This makes it easy for
    the Batfish server to ingest this data.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Batfish能够使用设备的配置文件来分析网络，这些文件需要按特定顺序结构。这样Batfish服务器就可以轻松地摄取这些数据。
- en: In this recipe, we will outline how to properly structure and prepare our network
    configuration files to be consumed by the Batfish service.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将概述如何正确地结构和准备我们的网络配置文件，以便Batfish服务消费。
- en: Getting ready
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The device configuration should already be generated, as demonstrated in the
    previous recipe.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 设备配置应该已经生成，就像在上一个教程中演示的那样。
- en: How to do it...
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Create a new playbook named `pb_batfish_analyis.yml`, and add the following
    task to create a new folder. This folder will house the network configuration
    that will be analyzed by `batfish`:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`pb_batfish_analyis.yml`的新playbook，并添加以下任务以创建一个新文件夹。这个文件夹将存放`batfish`分析所需的网络配置：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Update the playbook named `pb_batfish_analyis.yml` with the following task
    to copy all the configuration files to the new folder:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新名为`pb_batfish_analyis.yml`的playbook，添加以下任务以将所有配置文件复制到新文件夹中：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works…
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: 'In order to start our analysis of our network, we create a new playbook that
    is used to execute all the required tasks and validate the network configuration
    with Batfish. In this playbook, we use the following parameters:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始对我们的网络进行分析，我们创建一个新的playbook，用于执行所有必需的任务，并使用Batfish验证网络配置。在这个playbook中，我们使用以下参数：
- en: We run the playbook on all the nodes in our network. This is because we will
    need to reference the parameters for each node in subsequent tasks (such as loopback
    **internet protocols** (**IPs**)).
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在网络中的所有节点上运行playbook。这是因为我们需要在随后的任务中引用每个节点的参数（如环回**互联网协议**（**IP**））。
- en: We set the `ansible_connection` parameter to `local` as we don't need to connect
    to our devices, and all the tasks will run locally on the Ansible machine.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`ansible_connection`参数设置为`local`，因为我们不需要连接到设备，所有任务将在Ansible机器上本地运行。
- en: We specify the IP address of the Batfish server machine hosting the `batfish`
    container. This will be used in all subsequent tasks to communicate with the Batfish
    server.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们指定Batfish服务器机器的IP地址，该服务器托管`batfish`容器。这将在随后的所有任务中用于与Batfish服务器通信。
- en: For Batfish to start analyzing the configuration of our devices, the configuration
    files for our devices need to be structured in a specific order in one directory.
    This step is often referred to as preparing the network snapshot for Batfish analysis.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Batfish开始分析设备的配置，设备的配置文件需要按特定顺序结构在一个目录中。这一步通常被称为为Batfish分析准备网络快照。
- en: Here, we create a new playbook for the Batfish analysis. In the first task,
    we create the `configs` folder, which will be the base used by Batfish to retrieve
    the configuration for our network devices.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为Batfish分析创建一个新的playbook。在第一个任务中，我们创建`configs`文件夹，这将是Batfish用来检索网络设备配置的基础。
- en: 'In the second task, we use the `copy` module to copy the configuration files
    of our network devices over to the `configs` folder. Once we run the playbook
    with the tasks specified, we will get the following directory structure needed
    for Batfish analysis:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个任务中，我们使用`copy`模块将网络设备的配置文件复制到`configs`文件夹中。一旦我们运行了包含指定任务的playbook，我们将得到Batfish分析所需的以下目录结构：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In all the tasks, we are using the `run_once` parameter as we want to create
    the folder and copy the files only once. If we omit this option, we will run these
    tasks per each node in our inventory, which is not optimal in this case.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有任务中，我们都使用`run_once`参数，因为我们只想创建文件夹并复制文件一次。如果我们省略此选项，将会对清单中的每个节点运行这些任务，这在这种情况下并不理想。
- en: See also...
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'For more information on the directory structure needed by Batfish for network
    snapshots, please visit this link: [https://pybatfish.readthedocs.io/en/latest/notebooks/interacting.html#Uploading-configurations](https://pybatfish.readthedocs.io/en/latest/notebooks/interacting.html#Uploading-configurations).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Batfish网络快照所需的目录结构的更多信息，请访问此链接：[https://pybatfish.readthedocs.io/en/latest/notebooks/interacting.html#Uploading-configurations](https://pybatfish.readthedocs.io/en/latest/notebooks/interacting.html#Uploading-configurations)。
- en: Initializing the network snapshot with Ansible
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Ansible初始化网络快照
- en: In this recipe, we will outline how to open a session between Ansible and the
    Batfish server. In addition to this, we will look at how to initialize the network
    snapshot that we prepared in the previous step, as well as how to send it to the
    Batfish server.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将概述如何在Ansible和Batfish服务器之间建立会话。除此之外，我们还将看看如何初始化我们在上一步准备的网络快照，并将其发送到Batfish服务器。
- en: Getting ready
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: As outlined in the previous recipe, the device configuration is generated, and
    the network snapshot is packaged at this point. Furthermore, IP reachability is
    now also provided between the Ansible controller and the Batfish server on TCP
    ports 9996 and 9997.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一篇文章所述，设备配置是在此时生成的，并且网络快照已经打包好了。此外，现在还在TCP端口9996和9997上提供了Ansible控制器与Batfish服务器之间的IP可达性。
- en: How to do it...
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Update the `pb_batfish_analyis.yml` playbook with the following task to start
    the session with the Batfish server:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`pb_batfish_analyis.yml`剧本，以与Batfish服务器开始会话：
- en: '[PRE15]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Update the `pb_batfish_analyis.yml` playbook to initialize the network snapshot
    on the Batfish server:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`pb_batfish_analyis.yml`剧本以在Batfish服务器上初始化网络快照：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the playbook, we are using the `batfish.base` Ansible role (which we have
    downloaded from `ansible-galaxy`) that interacts with the Batfish server. This
    role provides multiple modules that we use to start the integration between the
    Ansible control machine and the Batfish server.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在剧本中，我们使用了从`ansible-galaxy`下载的`batfish.base` Ansible角色与Batfish服务器进行交互。该角色提供了多个模块，我们使用这些模块来启动Ansible控制机和Batfish服务器之间的集成。
- en: The first module is `bf_session`. This module opens the session between the
    Batfish client (Ansible, in this case) and the Batfish server, in order to start
    to exchange data between the two. The second module, `br_init_snapshot`, initializes
    the network snapshot (device configuration files) that we have created on the
    Ansible controller. It then sends them to the Batfish server in order to start
    analysis on the Batfish server and for the Batfish server to build the neutral
    data model for our network, based on these configuration files.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个模块是`bf_session`。该模块在Batfish客户端（在本例中为Ansible）和Batfish服务器之间打开会话，以便开始在两者之间交换数据。第二个模块`br_init_snapshot`初始化了我们在Ansible控制器上创建的网络快照（设备配置文件）。然后将它们发送到Batfish服务器，以便在Batfish服务器上开始分析，并且Batfish服务器根据这些配置文件为我们的网络构建中立的数据模型。
- en: 'The `bf_init_session` module returns the status of how Batfish parsed the configuration
    and whether there was any problem in decoding the configuration. We capture this
    return value in the `bf_snapshot` variable. The following snippet outlines the
    status of parsing that was performed by Batfish on the supplied network snapshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`bf_init_session`模块返回了Batfish解析配置的状态，以及在解码配置时是否出现任何问题。我们将这个返回值捕获在`bf_snapshot`变量中。以下代码段概述了Batfish在提供的网络快照上执行的解析状态：'
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We can ignore the warning we received since it will not impact our analysis.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以忽略我们收到的警告，因为它不会影响我们的分析。
- en: Collecting network facts from Batfish
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Batfish收集网络事实
- en: Batfish can generate a vendor-neutral data model that represents the critical
    facts discovered from the configuration files supplied to Batfish. In this recipe,
    we will outline how to collect these facts discovered by Batfish and how to use
    this information to validate the network configuration on the devices as per the
    intended state.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Batfish可以生成一个代表从提供给Batfish的配置文件中发现的关键事实的供应商中立的数据模型。在本篇文章中，我们将概述如何收集Batfish发现的这些事实，并如何使用这些信息来验证设备的网络配置是否符合预期状态。
- en: Getting ready
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The network configuration is already generated and the network snapshot is already
    synced with the Batfish server.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 网络配置已经生成，并且网络快照已经与Batfish服务器同步。
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Update the `pb_batfish_analyis.yml` playbook with the following task to collect
    facts generated by Batfish:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`pb_batfish_analyis.yml`剧本，以收集Batfish生成的事实：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Update the `pb_batfish_analysis.yml` playbook with the following task to validate
    the interface configuration that was generated:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`pb_batfish_analysis.yml`剧本，以验证生成的接口配置：
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Batfish processes the network snapshot (device configuration) and generates
    a vendor-neutral data model for the different sections of the configuration. These
    are considered to be the facts that Batfish has generated and collected from the
    input configuration files. We use the `bf_extract_facts` Ansible module to extract
    the facts, and we can then save it to a directory for further analysis.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Batfish处理网络快照（设备配置）并为配置的不同部分生成供应商中立的数据模型。这些被认为是Batfish从输入配置文件生成并收集的事实。我们使用`bf_extract_facts`
    Ansible模块来提取这些事实，然后可以将其保存到一个目录以供进一步分析。
- en: 'In our case, we saved the Batfish analysis in the `bf_facts` folder, and the
    module generated a unique YAML file that contains this neutral data model for
    each device. The following snippet outlines the interface data model for one of
    the devices (`leaf01`) in our sample topology:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们将Batfish分析保存在`bf_facts`文件夹中，并且该模块生成了一个唯一的YAML文件，其中包含了每个设备的这个中立数据模型。以下代码段概述了我们样本拓扑中一个设备（`leaf01`）的接口数据模型：
- en: '[PRE20]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This same data structure is returned by the module, and we save this result
    in a new variable called `bf_facts`. We use the data in this variable to validate
    the intended network state of our devices, based on the configuration that we
    have generated. We also use the `assert` module to loop through all our interfaces
    for each node that we have declared in our data model. We then compare the value
    for these parameters from the generated data model of Batfish to make sure that
    all our interfaces are operational and that all the IP addresses are configured
    correctly.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块返回相同的数据结构，我们将这个结果保存在一个名为`bf_facts`的新变量中。我们使用这个变量中的数据来验证我们生成的配置的设备的预期网络状态。我们还使用`assert`模块来循环遍历我们数据模型中声明的每个节点的所有接口。然后，我们比较Batfish生成的数据模型中这些参数的值，以确保我们所有的接口都是可操作的，并且所有的IP地址都配置正确。
- en: There's more...
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Batfish also provides different built-in `assert` tests to perform validation
    on the data model that it generates. This allows it to provide a more simple and
    robust validation for the critical issues that might affect the network. Here
    is a task that uses these built-in `assert` that are already available with Batfish:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Batfish还提供了不同的内置`assert`测试，以对其生成的数据模型执行验证。这使其能够对可能影响网络的关键问题提供更简单和更健壮的验证。以下是使用Batfish已有的内置`assert`的任务：
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We can see two assertions in the preceding code block:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在上述代码块中看到两个断言：
- en: '`assert_no_undefined_references`:This validates that all configuration blocks
    are present and valid. For example, all prefix lists are present and there is
    no undefined reference to a missing prefix list. This ensures that the configuration
    generated is sane and doesn''t include any undefined reference to an object that
    is not declared.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assert_no_undefined_references`：这个断言验证所有配置块是否存在且有效。例如，所有前缀列表都存在，没有未定义引用到缺失的前缀列表。这确保生成的配置是合理的，不包括对未声明对象的未定义引用。'
- en: '`Assert_no_incompatible_bgp_sessions`: This assertion validates that all the
    BGP sessions are configured correctly and there is no mismatch between the configuration
    of the BGP peers. This also ensures that the generated configuration is valid
    and the resulting BGP session will be operational.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Assert_no_incompatible_bgp_sessions`：这个断言验证所有BGP会话是否正确配置，并且BGP对等体的配置之间没有不匹配。这也确保生成的配置是有效的，生成的BGP会话将是可操作的。'
- en: 'If we need to validate that these tests will catch errors in the configuration,
    we can do so by shutting down a link between a leaf and spine switch in our master
    configuration files, as shown in the following code block:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要验证这些测试是否会捕捉到配置中的错误，我们可以通过关闭主配置文件中叶子和脊柱交换机之间的链路来进行验证，如下面的代码块所示：
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This configuration change should bring down the underlay BGP session between
    the `leaf01` and `spine01` nodes.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置更改应该使`leaf01`和`spine01`节点之间的底层BGP会话中断。
- en: 'When we run our playbook again with the preceding task, we will see the following
    error message:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次运行我们的剧本时，将会看到以下错误消息：
- en: '[PRE23]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: From the output, we can see that the first assertion was successful, meaning
    that there were no undefined references in our configuration. However, the second
    assertion failed, since there is now a BGP session that is failing.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中，我们可以看到第一个断言成功了，这意味着我们的配置中没有未定义的引用。然而，第二个断言失败了，因为现在有一个BGP会话失败了。
- en: See also...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅...
- en: 'For more information regarding all the available assertions supported by Batfish
    Ansible modules, please check the following links:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Batfish Ansible模块支持的所有可用断言的更多信息，请查看以下链接：
- en: '[https://github.com/batfish/ansible/blob/master/docs/bf_assert.rst](https://github.com/batfish/ansible/blob/master/docs/bf_assert.rst)'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/batfish/ansible/blob/master/docs/bf_assert.rst](https://github.com/batfish/ansible/blob/master/docs/bf_assert.rst)'
- en: '[https://github.com/batfish/ansible/blob/master/docs/assertions.rst](https://github.com/batfish/ansible/blob/master/docs/assertions.rst)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/batfish/ansible/blob/master/docs/assertions.rst](https://github.com/batfish/ansible/blob/master/docs/assertions.rst)'
- en: Validating traffic forwarding with Batfish
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Batfish验证流量转发
- en: In this recipe, we will outline how to validate traffic forwarding in the network.
    This is accomplished in Batfish using the forwarding tables that Batfish generates
    from the device configuration. It is very useful to validate proper traffic forwarding
    within the network prior to any change.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将概述如何验证网络中的流量转发。这是通过Batfish使用从设备配置生成的转发表来实现的。在进行任何更改之前，验证网络内的正确流量转发非常有用。
- en: Getting ready
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The network configuration is already generated and the network snapshot is already
    synced with the Batfish server.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 网络配置已经生成，并且网络快照已经与Batfish服务器同步。
- en: How to do it...
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Update the `pb_batfish_analyis.yml` playbook with the following task to validate
    traffic forwarding within our topology:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`pb_batfish_analyis.yml`剧本，以验证我们拓扑中的流量转发：
- en: '[PRE24]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Batfish provides a built-in validation method to validate the proper traffic
    forwarding between endpoints within your network topology. This is achieved using
    the `assert_all_flows_succeed` method. This method validates that all the flows
    between given endpoints are successful. In order for Batfish to validate the traffic
    flow for any given flow, we need to provide the following information:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Batfish提供了一种内置的验证方法，用于验证网络拓扑内端点之间的正确流量转发。这是通过使用`assert_all_flows_succeed`方法实现的。该方法验证给定端点之间的所有流量是否成功。为了使Batfish验证任何给定流的流量流动，我们需要提供以下信息：
- en: The start node location
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始节点位置
- en: The source IP for the flow
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流的源IP
- en: The destination IP addresses for the flow
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流的目标IP地址
- en: Batfish will use the data model that it generated to build the forwarding table
    for all the nodes in our network topology and to validate that the flows we are
    testing will be forwarded within the network.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Batfish将使用其生成的数据模型为网络拓扑中的所有节点构建转发表，并验证我们正在测试的流量是否在网络中转发。
- en: In our sample topology, we want to validate that all the flows from all the
    nodes' loopback IP addresses can reach the destination loopback IP address on
    all the remote nodes. We use the `with_nested` looping construct to loop across
    all the nodes in our inventory and to loop across all the loopback IP addresses
    within the `lo_ip` data structure. This will test from all the nodes within our
    inventory if we can reach the remote loopbacks of all the other nodes.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例拓扑中，我们希望验证所有节点的回环IP地址的所有流量是否可以到达所有远程节点的目标回环IP地址。我们使用`with_nested`循环结构来循环遍历我们清单中的所有节点，并在`lo_ip`数据结构中循环遍历所有回环IP地址。这将测试我们清单中的所有节点是否可以到达其他所有节点的远程回环。
- en: 'When we run this test, we will see that all the flows are working fine except
    for traffic from `spine01` to `spine02` and the reverse traffic from `spine02`
    to `spine01`, as shown in the following code block:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这个测试时，我们会发现除了从`spine01`到`spine02`的流量和从`spine02`到`spine01`的反向流量之外，所有流量都正常工作，如下面的代码块所示：
- en: '[PRE25]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'On the live network, we can check the routing on the live nodes to validate
    our findings from Batfish:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在实时网络中，我们可以检查实时节点上的路由，以验证我们从Batfish得出的发现：
- en: '[PRE26]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: After checking our network configuration, we can see that the preceding output
    is correct. This is possible since we are using a route-map on all the `leaf`
    switches to only advertise the local loopback IP address, and we are not re-advertising
    any other IP address from the `leaf` nodes.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查我们的网络配置后，我们可以看到前面的输出是正确的。这是可能的，因为我们在所有`leaf`交换机上使用路由映射，只广播本地环回IP地址，并且我们不会重新广播来自`leaf`节点的任何其他IP地址。
- en: Furthermore, there is no BGP session between the `spine` nodes, thus there is
    no traffic path between them. So, in order to complete our test and make it successful,
    we will only test all flows originating from the `leaf` nodes toward all the destinations.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`spine`节点之间没有BGP会话，因此它们之间没有流量路径。因此，为了完成我们的测试并使其成功，我们将仅测试所有源自`leaf`节点到所有目的地的流量。
- en: 'We will not test traffic originating from the `spine` nodes. Here, you can
    see the modified task:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会测试源自`spine`节点的流量。在这里，您可以看到修改后的任务：
- en: '[PRE27]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: After running the test again, all the flows pass and the task is successful.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 再次运行测试后，所有流量都通过了，任务成功。
- en: Validating ACLs with Batfish
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Batfish验证ACL
- en: In this recipe, we will outline how to use Batfish to validate ACL entries and
    validate the correct traffic handling by these ACLs' definition. This allows us
    to use Batfish and Ansible as auditing tools to enforce correct security compliance
    for our infrastructure.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将概述如何使用Batfish验证ACL条目，并验证这些ACL定义的正确流量处理。这使我们能够将Batfish和Ansible作为审计工具，强制执行基础设施的正确安全合规性。
- en: Getting ready
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: The device configuration is generated and the network snapshot is packaged,
    as outlined in the previous recipe.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 设备配置已生成，并且网络快照已打包，如前面的教程所述。
- en: How to do it…
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤…
- en: 'Update our network configuration on `leaf03` and `leaf04` with the following
    ACLs'' entries to secure the web **virtual local area network** (**VLAN**):'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下ACL条目更新`leaf03`和`leaf04`上的网络配置以保护Web **虚拟局域网**（**VLAN**）：
- en: '[PRE28]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Update the `pb_batfish_analyis.yml` playbook with the following task to validate
    correct egress ACL behavior for our web VLAN:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`pb_batfish_analyis.yml` playbook，以验证我们Web VLAN的正确出口ACL行为：
- en: '[PRE29]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Update the `pb_batfish_analyis.yml` playbook with the following task to validate
    correct ingress ACL behavior for our VLAN:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下任务更新`pb_batfish_analyis.yml` playbook，以验证我们VLAN的正确入口ACL行为：
- en: '[PRE30]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works…
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Batfish is yet another great tool for validating the correct traffic handling
    of traffic processed by ACLs. This allows us to validate whether or not a specific
    flow is permitted or denied by a specific ACL. Batfish also provides a powerful
    tool to validate network changes involving ACLs. Furthermore, it can be used as
    a safeguard against implementing rogue ACL changes that could impact the live
    traffic on the network or lead to violations in our security policy.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Batfish是另一个用于验证ACL处理流量的强大工具。这使我们能够验证特定ACL是否允许或拒绝特定流量。Batfish还提供了一个强大的工具，用于验证涉及ACL的网络更改。此外，它可以用作防范实施可能影响网络上的实时流量或导致违反安全策略的恶意ACL更改的保障。
- en: 'We use the `bf_assert` Batfish module again—however, in this case, for validating
    ACL. We use two other `assert` methods implemented in this module, which are as
    follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次使用`bf_assert` Batfish模块，但是在这种情况下，用于验证ACL。我们使用了该模块中实现的另外两个`assert`方法，如下所示：
- en: The `assert_filter_permits` method tests and validates that a specific flow
    is correctly allowed by our ACL.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assert_filter_permits`方法测试并验证ACL正确允许特定流量。'
- en: The `assert_filter_denies` method tests and validates that a specific flow is
    denied by our ACL.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assert_filter_denies`方法测试并验证ACL拒绝特定流量。'
- en: In our playbook, we create two separate tasks. The first one uses the `assert_filter_permits` method
    to validate that all traffic from the internet to our web server's subnet is permitted.
    We use the `headers` parameter in order to specify the IP header information for
    all the flows that we want to be validated.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的playbook中，我们创建了两个单独的任务。第一个任务使用`assert_filter_permits`方法验证从互联网到我们的Web服务器子网的所有流量是否被允许。我们使用`headers`参数来指定要验证的所有流量的IP头信息。
- en: We then create the second task using the `assert_filter_denies` method, and
    this tests that a specific web server is blocked from communicating with any destination.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建第二个任务，使用`assert_filter_denies`方法，测试特定Web服务器是否被阻止与任何目的地通信。
- en: When we run our playbook with the newly updated tasks, we can see that all of
    them are completed successfully, which outlines that the ACL behavior in our sample
    network is as expected.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次运行我们的playbook时，我们可以看到所有任务都成功完成，这表明我们示例网络中ACL的行为符合预期。
- en: 'In order to validate that our filters are working correctly, we will introduce
    a problem in one of our ACL filters by allowing **Hypertext Transfer Protocol
    Secure** (**HTTPS**) traffic to our denied web servers (`172.20.10.10`), as shown
    in the following code snippet:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证我们的过滤器是否工作正常，我们将通过允许**超文本传输安全协议**（**HTTPS**）流量到被拒绝的Web服务器（`172.20.10.10`）来引入ACL过滤器的问题，如下面的代码片段所示：
- en: '[PRE31]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'When we run our playbook again, we can see that we have an error in the last
    task. This error shows that specific traffic flow has been allowed when it was
    expected to be denied by our ACL, as shown in the following code block:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们再次运行我们的playbook时，我们可以看到最后一个任务出现错误。这个错误显示特定流量流被允许，而预期应该被ACL拒绝，如下面的代码块所示：
- en: '[PRE32]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This simple example shows that we can create more sophisticated assertion rules
    in order to enforce the correct security policy within our network. Furthermore,
    we can utilize Batfish to validate the correct enforcement of this policy across
    our network.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的例子表明，我们可以创建更复杂的断言规则，以强制执行网络内的正确安全策略。此外，我们可以利用Batfish来验证网络范围内该策略的正确执行。
