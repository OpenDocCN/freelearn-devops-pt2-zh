- en: Creating Containers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建容器
- en: The concepts of *containers* and *OS-level virtualization* have their roots
    in the `chroot` system call in Unix V7 operating systems (OSes), which date back
    to the late 1970s. Starting with a simple concept of process isolation and *chroot
    jails*, where the process is running in an apparently isolated root directory,
    containerization has undergone rapid evolution and became a mainstream technology
    in the 2010s with the advent of **Linux Containers** (**LXC**) and Docker. In
    2014, Microsoft announced support for Docker Engine in the incoming release of
    Windows Server 2016\. This is where the story of Windows containers and Kubernetes
    on Windows begins.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*容器*和*操作系统级虚拟化*的概念源自Unix V7操作系统（OS）中的`chroot`系统调用，可以追溯到20世纪70年代末。从最初的进程隔离和*chroot监狱*的简单概念开始，容器化经历了快速发展，并在2010年代成为主流技术，随着**Linux容器**（**LXC**）和Docker的出现。2014年，微软宣布在即将发布的Windows
    Server 2016中支持Docker Engine。这是Windows容器和Windows上的Kubernetes故事的开始。'
- en: In this chapter, we will provide you with a better understanding of containers
    for the Windows OS by highlighting important differences between containerization
    on Linux and Windows and container runtime types on Windows, namely Windows Server
    Containers (or process isolation) and Hyper-V isolation. We will also learn how
    to install Docker Desktop for Windows 10 for development scenarios and create
    our first example container running on your machine.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过突出Windows操作系统上容器化与Linux上的重要区别以及Windows上的容器运行时类型，即Windows Server容器（或进程隔离）和Hyper-V隔离，为您提供更好的理解。我们还将学习如何为Windows
    10安装Docker Desktop以进行开发，并在您的计算机上运行我们的第一个示例容器。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Linux versus Windows containers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux与Windows容器
- en: Understanding Windows container variants
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Windows容器变体
- en: Installing Docker Desktop for Windows tooling
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Windows工具的Docker Desktop
- en: Building your first container
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建您的第一个容器
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The requirements for this chapter are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的要求如下：
- en: '**Intel Virtualization Technology** (**Intel VT**) or **AMD Virtualization**
    (**AMD-V**) technology features enabled in the BIOS'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在BIOS中启用**Intel虚拟化技术**（**Intel VT**）或**AMD虚拟化**（**AMD-V**）技术功能
- en: A minimum of 4 GB of RAM
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少4GB的RAM
- en: Windows 10 Pro, Enterprise, or Education (version 1903 or later, 64-bit) installed
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装Windows 10 Pro、企业版或教育版（1903版本或更高版本，64位）
- en: Visual Studio Code
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: For more information regarding the hardware requirements for running Docker
    and containers on Windows, please refer to [https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/system-requirements](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/system-requirements).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在Windows上运行Docker和容器的硬件要求的更多信息，请参阅[https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/system-requirements](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/system-requirements)。
- en: Windows 10 versions starting with Anniversary Update (version 1607, build 14393)
    are supported, but version 1903 is recommended for the best experience since it
    comes with all the necessary features. For more details regarding Windows 10 versions
    and container runtimes compatibility, please refer to [https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 支持从周年更新（版本 1607，构建 14393）开始的 Windows 10 版本，但建议使用版本 1903 以获得最佳体验，因为它具备所有必要的功能。有关
    Windows 10 版本和容器运行时兼容性的更多详细信息，请参阅[https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility)。
- en: Visual Studio Code can be downloaded for free from the official web page at: [https://code.visualstudio.com/](https://code.visualstudio.com/).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 可以免费从官方网页下载 Visual Studio Code：[https://code.visualstudio.com/](https://code.visualstudio.com/)。
- en: You can download the latest code samples for this chapter from this book's official
    GitHub repository at: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter01](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter01).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从本书的官方 GitHub 存储库下载本章的最新代码示例：[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter01](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter01)。
- en: Linux versus Windows containers
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux 与 Windows 容器
- en: Containerization on both Linux and Windows aims to achieve the same goal – creating
    predictable and lightweight environments that are isolated from other applications.
    For Linux, a classic example of container usage can be running a Python RESTful
    API written in Flask, without worrying about conflicts between Python modules
    that are required by other applications. Similarly, for Windows, the containers
    can be used to host an **Internet Information Services** (**IIS**) web server
    that's entirely isolated from other workloads running on the same machine.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Linux 和 Windows 上的容器化都旨在实现相同的目标 - 创建可预测且轻量的环境，与其他应用程序隔离。对于 Linux，容器使用的一个经典示例可以是运行使用
    Flask 编写的 Python RESTful API，而不必担心与其他应用程序所需的 Python 模块之间的冲突。同样，对于 Windows，容器可以用于托管完全与同一台机器上运行的其他工作负载隔离的
    Internet Information Services (IIS) web 服务器。
- en: Compared to traditional hardware virtualization, containerization comes at the
    cost of being tightly coupled with the host OS since it uses the same kernel to
    provide multiple isolated user spaces. This means that running Windows containers
    on the Linux OS or running Linux containers on the Windows OS is not possible
    natively without the additional help of traditional hardware virtualization techniques.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统的硬件虚拟化相比，容器化的代价是与主机操作系统紧密耦合，因为它使用相同的内核来提供多个隔离的用户空间。这意味着在 Linux 操作系统上运行 Windows
    容器，或者在 Windows 操作系统上运行 Linux 容器，不可能在没有传统硬件虚拟化技术的额外帮助下本地实现。
- en: In this book, we will focus on the Docker container platform, which is required
    for running containers on Windows. Now, let's summarize the current state of containerization
    support on Linux and Windows that's provided by Docker Engine and what the possible
    solutions are when it comes to development and production scenarios.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将专注于 Docker 容器平台，这是在 Windows 上运行容器所必需的。现在，让我们总结 Docker Engine 提供的 Linux
    和 Windows 上容器化支持的当前状态，以及在开发和生产场景中可能的解决方案。
- en: Docker containerization on Linux
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux 上的 Docker 容器化
- en: 'Originally, Docker Engine was developed primarily for the Linux OS, which provides
    the following kernel features for the Docker runtime:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，Docker Engine 主要是为 Linux 操作系统开发的，它为 Docker 运行时提供了以下内核特性：
- en: '**Kernel namespaces**: This is the core concept for containers and makes it
    possible to create isolated process workspaces. Namespaces partition kernel resources
    (such as network stacks, mount points, and so on) so that each process workspace
    can access its own set of resources and ensures they can''t be accessed by processes
    from other workspaces. This is what ensures the isolation of containers.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内核命名空间**：这是容器的核心概念，它使得创建隔离的进程工作空间成为可能。命名空间分割内核资源（比如网络堆栈、挂载点等），这样每个进程工作空间可以访问自己的一组资源，并确保它们不能被其他工作空间的进程访问。这就是确保容器隔离的方式。'
- en: '**Control groups**: Resource usage limits and isolation is a secondary core
    concept in containerization. On Linux, this feature is provided by *cgroups*,
    which enables resource limiting (CPU usage, RAM usage, and so on) and priority
    access to resources for one process or a group of processes.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制组**：资源使用限制和隔离是容器化的次要核心概念。在Linux上，这个特性由*cgroups*提供，它使得资源限制（CPU使用率、RAM使用率等）和优先访问资源对于一个进程或一组进程来说成为可能。'
- en: '**Layer filesystem capabilities**: On Linux, *UnionFS* is one of the many implementations
    of *union mount* –  a file system service that allows files and directories coming
    from separate filesystems to be unified into one transparent, coherent filesystem.
    This feature is crucial for Docker container images that consist of immutable
    layers. During the container runtime, the read-only layers are transparently overlaid
    together with a writable container layer.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分层文件系统功能**：在Linux上，*UnionFS*是*联合挂载*的许多实现之一——这是一个文件系统服务，允许来自不同文件系统的文件和目录被统一到一个透明、一致的文件系统中。这个特性对于由不可变层组成的Docker容器镜像至关重要。在容器运行时，只读层会被透明地叠加在一起，与可写的容器层一起。'
- en: 'Docker Engine is responsible for providing a basic runtime for containers,
    abstracting container management, and exposing functionalities using the REST
    API to the client layer, such as the Docker CLI. The architecture of Docker on
    Linux can be summarized with the following diagram:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Engine负责为容器提供基本运行时，抽象容器管理，并使用REST API向客户端层暴露功能，比如Docker CLI。Docker在Linux上的架构可以用以下图表总结：
- en: '![](assets/12ce9141-1d04-4fef-9cc4-7b3b1d47db00.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/12ce9141-1d04-4fef-9cc4-7b3b1d47db00.png)'
- en: 'From a Linux OS perspective, the container runtime architecture is presented
    in the following diagram. This architecture applies to container engines on Linux
    in general, not only Docker:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从Linux操作系统的角度来看，容器运行时架构如下图所示。这个架构适用于Linux上的容器引擎，不仅仅是Docker。
- en: '![](assets/e181dd7d-46c2-49cb-a919-eaaca097d285.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e181dd7d-46c2-49cb-a919-eaaca097d285.png)'
- en: Next, we will look at Docker containerization on Windows.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看一下Windows上的Docker容器化。
- en: Docker containerization on Windows
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows上的Docker容器化
- en: 'In 2014, when Microsoft announced support for Docker Engine in the incoming
    release of Windows Server 2016, the Docker container engine had already matured
    on Linux and was proven to be an industry standard for container management. This
    fact has driven design decisions for Docker and containerization support for Windows,
    which eventually received a similar architecture for running process-isolated
    Windows Server containers. The Windows kernel features that are used by Docker
    Engine roughly map to the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年，当微软宣布在即将发布的Windows Server 2016中支持Docker Engine时，Docker容器引擎在Linux上已经成熟，并被证明是容器管理的行业标准。这个事实推动了Docker和Windows容器化支持的设计决策，最终为运行进程隔离的Windows
    Server容器提供了类似的架构。Docker Engine使用的Windows内核功能大致映射如下：
- en: '**Kernel namespaces**: This functionality is provided by, among others, Object
    Namespaces and the Process Table in the Windows kernel.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内核命名空间**：这个功能是由Windows内核中的对象命名空间和进程表等提供的。'
- en: '**Control groups**: Windows has its own concept of *Job Objects*, which allows
    a group of processes to be managed as a single unit. Essentially, this feature
    provides similar functionality to *cgroups* on Linux.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制组：Windows有自己的*作业对象*概念，允许一组进程作为单个单元进行管理。基本上，这个功能提供了类似于Linux上的*cgroups*的功能。
- en: '**Layer filesystem capabilities**: The *Windows Container Isolation File System *is
    a filesystem driver that provides a virtual filesystem view for processes that
    are executed in Windows containers. This is analogous to *UnionFS* or other implementations
    of *union mount* for the Linux OS.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层文件系统功能：*Windows容器隔离文件系统*是一个文件系统驱动程序，为在Windows容器中执行的进程提供虚拟文件系统视图。这类似于Linux操作系统上的*UnionFS*或其他*联合挂载*的实现。
- en: 'On top of these low-level functionalities, the services layer, which consists
    of a **Host Compute Service **(**HCS**) and a **Host Network Service** (**HNS**),
    abstracts a public interface for running and managing containers with language
    bindings available for C# and Go (hcsshim). For more information about the current
    container platform tools, please refer to the official documentation at: [https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/containerd#hcs](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/containerd#hcs).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些低级功能之上，服务层由一个**主机计算服务**（**HCS**）和一个**主机网络服务**（**HNS**）组成，为使用C#和Go（hcsshim）提供了运行和管理容器的公共接口。有关当前容器平台工具的更多信息，请参阅官方文档：[https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/containerd#hcs](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/containerd#hcs)。
- en: 'It is important to know that there are two types of Windows containers: process-isolated
    and Hyper-V-isolated. The difference between them will be explained in the next
    section – isolation is a runtime property of the containers and you can expect
    them to, in general, behave similarly and differ only from a security and compatibility perspective.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要知道，Windows容器有两种类型：进程隔离和Hyper-V隔离。它们之间的区别将在下一节中解释 - 隔离是容器的运行时属性，您可以期望它们在一般情况下表现类似，并且只在安全性和兼容性方面有所不同。
- en: 'The following diagram summarizes the containerization architecture and Docker
    support for Windows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表总结了容器化架构和Docker对Windows的支持：
- en: '![](assets/b221e9d5-36dd-4b7f-bea7-cdc89fabafda.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b221e9d5-36dd-4b7f-bea7-cdc89fabafda.png)'
- en: 'For comparison with the high-level architecture of containerization on Linux,
    the following diagram presents the multi-container runtime architecture for Windows.
    At this point, we are only considering *process-isolated Windows Server containers*,
    which closely resemble containers on Linux, but in the next section, we will also
    cover the architecture of *Hyper-V isolation* for containers on Windows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与Linux上容器化的高级架构进行比较，以下图表展示了Windows的多容器运行时架构。在这一点上，我们只考虑*进程隔离的Windows Server容器*，它们与Linux上的容器非常相似，但在下一节中，我们还将介绍Windows上容器的*Hyper-V隔离*架构：
- en: '![](assets/d7a93b95-2174-4e8e-89e5-47bd79cab5c1.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d7a93b95-2174-4e8e-89e5-47bd79cab5c1.png)'
- en: Next, let's look at the some differences between containers on Linux and Windows.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看一下Linux和Windows上容器的一些区别。
- en: Key differences between containers on Linux and Windows
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux和Windows上容器之间的关键区别
- en: Docker containers on Linux and Windows aim to solve the same problems in principle
    and currently, the container management experience is starting to converge on
    these platforms. Nevertheless, if you come from the Linux ecosystem and have used
    Docker extensively there, you may be surprised by some differences that you can
    find. Let's briefly summarize them.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Linux和Windows上的Docker容器在原则上旨在解决相同的问题，目前，容器管理体验开始在这些平台上趋于一致。然而，如果您来自Linux生态系统，并且在那里广泛使用了Docker，您可能会对一些不同感到惊讶。让我们简要总结一下。
- en: 'The largest and the most apparent limitation is the Windows host OS and Windows
    container OS compatibility requirements. In the case of Linux, you can safely
    assume that if the host OS kernel is running the minimum required version of 3.10,
    any Linux container will run without any problems, no matter which distribution
    it is based on. For Windows, it is possible to run containers with base OS versions
    that are exactly the same as the host OS version that''s supported without any
    limitations. Running a newer container OS version on an old host OS is not supported,
    and what''s more, running older container OS versions on a newer host OS comes
    with the requirement of using *Hyper-V isolation*. For example, a host running
    Windows Server version 1803 build 17134 can use containers with base image version Windows
    Server version 1803 build 17134 natively, but running containers with Windows
    Server version 1709 build 16299 will require Hyper-V isolation, and starting a
    container with Windows Server 2019 build 17763 is not possible at all. The following
    table visualizes this principle:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最大且最明显的限制是Windows主机操作系统和Windows容器操作系统的兼容性要求。在Linux的情况下，您可以安全地假设，如果主机操作系统内核运行的是最低要求版本3.10，那么任何Linux容器都将无需任何问题地运行，无论它基于哪个发行版。对于Windows来说，可以运行具有与受支持的主机操作系统版本完全相同的基础操作系统版本的容器，而不受任何限制。在旧的主机操作系统上运行更新的容器操作系统版本是不受支持的，而且更重要的是，在更新的主机操作系统上运行旧的容器操作系统版本需要使用*Hyper-V隔离*。例如，运行Windows
    Server版本1803构建17134的主机可以原生地使用具有基础镜像版本Windows Server版本1803构建17134的容器，但在需要使用Hyper-V隔离的情况下，运行具有Windows
    Server版本1709构建16299的容器，并且根本无法启动具有Windows Server 2019构建17763的容器。以下表格可视化了这一原则：
- en: '| **Host OS version** | **Container base image OS version** | **Compatibility**
    |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| **主机操作系统版本** | **容器基础镜像操作系统版本** | **兼容性** |'
- en: '| Windows Server, version 1803 build 17134 | Windows Server, version 1803 build
    17134 | *Process *or *Hyper-V *isolation |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| Windows Server，版本1803构建17134 | Windows Server，版本1803构建17134 | *进程*或*Hyper-V*隔离
    |'
- en: '| Windows Server, version 1803 build 17134 | Windows Server, version 1709 build
    16299 | *Hyper-V *isolation |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| Windows Server，版本1803构建17134 | Windows Server，版本1709构建16299 | *Hyper-V*隔离
    |'
- en: '| Windows Server, version 1803 build 17134 | Windows Server 2019 build 17763
    | Not supported |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| Windows Server，版本1803构建17134 | Windows Server 2019构建17763 | 不支持 |'
- en: '| Windows Server 2019 build 17763 | Windows Server 2019 build 17763 | *Process *or
    H*yper-V *isolation |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| Windows Server 2019构建17763 | Windows Server 2019构建17763 | *进程*或*Hyper-V*隔离
    |'
- en: For a more detailed compatibility matrix, please refer to the official Microsoft
    documentation at: [https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility#choose-which-container-OS-version-to-use](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility#choose-which-container-os-version-to-use).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更详细的兼容性矩阵，请参阅官方微软文档：[https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility#choose-which-container-os-version-to-use](https://docs.microsoft.com/en-us/virtualization/windowscontainers/deploy-containers/version-compatibility#choose-which-container-os-version-to-use)。
- en: It is worth mentioning that the requirements for Hyper-V isolation may be a
    significant limitation in cloud environments or when running Docker on **virtual
    machines** (**VMs**). In such cases, Hyper-V isolation requires the nested virtualization
    feature to be enabled by the hypervisor. We will cover Hyper-V isolation in detail
    in the next section.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，Hyper-V隔离的要求可能是云环境或在虚拟机上运行Docker时的一个重要限制。在这种情况下，Hyper-V隔离需要由hypervisor启用嵌套虚拟化功能。我们将在下一节详细介绍Hyper-V隔离。
- en: Another important aspect you may notice is the difference in sizes between the
    base images for Linux and Windows containers. Currently, the minimal Windows Server
    image, `mcr.microsoft.com/windows/nanoserver:1809`, is 98 MB in size, whereas,
    for example, the minimalistic image for Alpine Linux, `alpine:3.7`, is only 5
    MB in size. The full Windows Server image, `mcr.microsoft.com/windows/servercore:ltsc2019`, is
    over 1.5 GB, while the base image for Windows, `mcr.microsoft.com/windows:1809`,
    is 3.5 GB. But it is worth mentioning that since the first release of Windows
    Server 2016 Core image, when the image size was 6 GB, these numbers constantly
    go down.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux和Windows容器的基本图像之间的大小差异是你可能注意到的另一个重要方面。目前，最小的Windows Server图像`mcr.microsoft.com/windows/nanoserver:1809`大小为98
    MB，而例如，Alpine Linux的最小图像`alpine:3.7`只有5 MB。完整的Windows Server图像`mcr.microsoft.com/windows/servercore:ltsc2019`超过1.5
    GB，而Windows的基本图像`mcr.microsoft.com/windows:1809`为3.5 GB。但值得一提的是，自Windows Server
    2016 Core图像首次发布时，图像大小为6 GB，这些数字不断下降。
- en: These differences can be seen more as the limitations of Docker containers on
    Windows. However, there is one aspect where Windows provides more flexibility
    than Linux – support for running Linux containers on Windows. Docker Desktop for
    Windows 10 supports such a scenario out of the box. Although this feature is still
    in development, it is possible to host Linux containers alongside Windows containers
    on Windows 10 with the help of Hyper-V isolation. We will cover this feature in
    more detail in the next section. The opposite scenario with Windows containers
    running on Linux has no native solution and requires manually hosting additional
    Windows VM on a Linux host.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些差异更多地可以看作是Windows上Docker容器的限制。然而，有一个方面是Windows比Linux提供更多灵活性的地方 - 支持在Windows上运行Linux容器。Windows
    10的Docker Desktop支持这样的场景。尽管这个功能仍在开发中，但在Windows 10上使用Hyper-V隔离可以同时托管Linux容器和Windows容器。我们将在下一节更详细地介绍这个功能。而在Linux上运行Windows容器的相反情况没有本地解决方案，需要在Linux主机上手动托管额外的Windows虚拟机。
- en: Windows Server also supports running Linux containers, providing that the **Linux
    Containers on Windows** (**LCOW**) experimental feature is enabled.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Windows Server也支持运行Linux容器，前提是启用了**Linux容器在Windows上**（**LCOW**）实验性功能。
- en: In the next section, we will focus on the differences between different Windows
    container runtime variants.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将重点关注不同Windows容器运行时变体之间的差异。
- en: Understanding Windows container variants
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Windows容器的变体
- en: 'Windows containers come in two distinct levels of isolation: process and Hyper-V.
    Process isolation is also known as **Windows Server Containers** (**WSC**). Initially,
    process isolation was available on the Windows Server OS only, whereas on desktop
    versions of the Windows OS, you could run containers using Hyper-V isolation.
    Starting with Windows 10, version 1809 (October 2018 Update) and Docker Engine
    18.09.1, process isolation is also available on Windows 10.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Windows容器有两种不同的隔离级别：进程和Hyper-V。进程隔离也被称为**Windows Server容器**（**WSC**）。最初，进程隔离仅适用于Windows
    Server操作系统，而在Windows桌面版本上，您可以使用Hyper-V隔离运行容器。从Windows 10的1809版本（2018年10月更新）和Docker
    Engine 18.09.1开始，进程隔离也适用于Windows 10。
- en: In the official documentation, you may find the terms Windows container *types*
    and *runtimes*. They also refer to the isolation levels, and these terms are used
    interchangeably.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方文档中，您可能会发现Windows容器*类型*和*运行时*这些术语。它们也指的是隔离级别，这些术语可以互换使用。
- en: Now, let's take a look at how these isolation levels differ, what the use cases
    for them are, and how to create containers by specifying the desired isolation
    type.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看这些隔离级别的区别，它们的用例是什么，以及如何通过指定所需的隔离类型来创建容器。
- en: Process isolation
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进程隔离
- en: 'Process-isolated containers, also known as **WSC**, is the default isolation
    mode provided for containers on Windows Server. The architecture of process isolation
    is similar to what you have when running containers on the Linux OS:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 进程隔离容器，也称为**WSC**，是Windows Server上容器的默认隔离模式。进程隔离的架构类似于在Linux OS上运行容器时的架构：
- en: Containers use the same shared kernel.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器使用相同的共享内核。
- en: Isolation is provided at the kernel level using features such as process tables,
    object namespaces, and job objects. More information can be found in the *Docker
    containerization on Windows *section.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隔离是在内核级别提供的，使用诸如进程表、对象命名空间和作业对象等功能。更多信息可以在*Windows上的Docker容器化*部分找到。
- en: 'This is summarized in the following diagram:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这在以下图表中总结如下：
- en: '![](assets/ed754824-a094-4e79-9460-c38f088f9fc8.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ed754824-a094-4e79-9460-c38f088f9fc8.png)'
- en: 'Process isolation provides a lightweight runtime for containers (compared to
    Hyper-V isolation) and offers a greater density of deployment, better performance,
    and lower spin-up time. However, there are a few points you should consider when
    using this type of isolation:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 进程隔离为容器提供了轻量级的运行时（与Hyper-V隔离相比），并提供了更高的部署密度、更好的性能和更低的启动时间。然而，在使用这种类型的隔离时，有一些要考虑的要点：
- en: The Docker container base image has to match the version of the container host
    OS. For example, if you are running Windows 10, version 1903, you can only run
    containers that have used base image version 1903 of Windows 10 or Windows Server.
    This means you have to rebuild the image for each version of Windows that is being
    released (only major *feature updates*).
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker容器基础镜像必须与容器主机操作系统的版本匹配。例如，如果您正在运行Windows 10，1903版本，您只能运行使用Windows 10或Windows
    Server 1903版本基础镜像的容器。这意味着您必须为每个发布的Windows版本重新构建镜像（仅适用于主要*功能更新*）。
- en: This should be only for the execution of trusted code. In order to execute untrusted
    code, Hyper-V isolation is advised.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这应该只用于执行受信任的代码。为了执行不受信任的代码，建议使用Hyper-V隔离。
- en: 'With Windows 10, version 1809 and later, it is possible to use process isolation
    for the container runtime, provided that you are running Docker Desktop for Windows 2.0.1.0
    *(Edge* release channel) or later and Docker Engine 18.09.1+. For Windows 10,
    the default isolation level for containers is Hyper-V and in order to use process
    isolation, it has to be specified explicitly while creating a container using
    the `--isolation=process` argument:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Windows 10，1809版本及更高版本，可以在容器运行时使用进程隔离，前提是您正在运行Docker Desktop for Windows 2.0.1.0
    *(Edge*发布渠道)或更高版本和Docker Engine 18.09.1+。对于Windows 10，容器的默认隔离级别是Hyper-V，为了使用进程隔离，必须在使用`--isolation=process`参数创建容器时明确指定：
- en: '[PRE0]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This option can be also specified as a parameter to the Docker daemon using
    the `--exec-opt` parameter. For more details, please see the official Docker documentation
    at the: [https://docs.docker.com/engine/reference/commandline/run/#specify-isolation-technology-for-container---isolation](https://docs.docker.com/engine/reference/commandline/run/#specify-isolation-technology-for-container---isolation).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项也可以作为参数指定给Docker守护程序，使用`--exec-opt`参数。有关更多详细信息，请参阅官方Docker文档：[https://docs.docker.com/engine/reference/commandline/run/#specify-isolation-technology-for-container---isolation](https://docs.docker.com/engine/reference/commandline/run/#specify-isolation-technology-for-container---isolation)。
- en: Using process-isolated containers on the Windows 10 OS is only recommended for
    development purposes. For production deployments, you should still consider using
    Windows Server for process-isolated containers.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 10操作系统上使用进程隔离容器仅建议用于开发目的。对于生产部署，您仍应考虑使用Windows Server进行进程隔离容器。
- en: Hyper-V isolation
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hyper-V隔离
- en: 'Hyper-V isolation is the second type of isolation available for Windows containers.
    In this type of isolation, each container is running inside a dedicated, minimal
    Hyper-V virtual machine and can be briefly summarized as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Hyper-V隔离是Windows容器的第二种隔离类型。在这种隔离类型中，每个容器都在一个专用的、最小的Hyper-V虚拟机中运行，可以简要总结如下：
- en: Containers do not share the kernel with host OS. Each container has its own
    Windows kernel.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器不与主机操作系统共享内核。每个容器都有自己的Windows内核。
- en: Isolation is provided at the virtual machine hypervisor level (requires Hyper-V
    role to be installed).
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隔离是在虚拟机hypervisor级别提供的（需要安装Hyper-V角色）。
- en: There are no compatibility limitations between the host OS version and container
    base OS version.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机操作系统版本和容器基础操作系统版本之间没有兼容性限制。
- en: This is recommended for the execution of untrusted code and multi-tenant deployments
    as it provides better security and isolation.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是推荐用于执行不受信任的代码和多租户部署，因为它提供了更好的安全性和隔离性。
- en: 'The details of the Hyper-V isolation architecture can be seen in the following
    diagram:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Hyper-V隔离的详细架构可以在以下图表中看到：
- en: '![](assets/7c9b01c7-0631-4b19-8cc5-ba2ec27c0135.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7c9b01c7-0631-4b19-8cc5-ba2ec27c0135.png)'
- en: 'This type of isolation comes at a cost that you have to take into account when
    choosing the isolation level:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择隔离级别时，这种隔离类型会带来一些成本：
- en: Hyper-V isolation involves virtualization overhead, higher memory, and CPU usage
    footprint compared to process isolation, but still provides much better performance
    than running a full VM with Windows Nano Server. You can check the memory requirements
    for running containers with different isolation levels in the following table.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与进程隔离相比，Hyper-V隔离涉及虚拟化开销、更高的内存和CPU使用量，但仍然比在Windows Nano Server上运行完整虚拟机提供更好的性能。您可以在以下表格中查看使用不同隔离级别运行容器的内存要求。
- en: Container spin-up time is slower compared to process isolation.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与进程隔离相比，容器的启动时间较慢。
- en: 'Requires nested virtualization when used for containers running on a VM. This
    may be a limitation for some hypervisors and cloud deployments. The following
    table shows the memory requirements for Windows Server 1709 containers:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在虚拟机上运行容器时需要嵌套虚拟化。这可能是一些虚拟化程序和云部署的限制。以下表格显示了Windows Server 1709容器的内存要求：
- en: '| **Container base image** | **Process isolation (WSC)** | **Hyper-V isolation**
    |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| **容器基础镜像** | **进程隔离（WSC）** | **Hyper-V隔离** |'
- en: '| Nano Server | 30 MB | 110 MB + 1 GB pagefile |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| Nano Server | 30 MB | 110 MB + 1 GB页面文件 |'
- en: '| Server Core | 45 MB | 360 MB + 1 GB pagefile |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| Server Core | 45 MB | 360 MB + 1 GB页面文件 |'
- en: 'The container images remain unchanged compared to process isolation; you only
    need to specify a different isolation level when creating the actual container.
    You can do this using the `--isolation=hyperv` parameter:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 与进程隔离相比，容器镜像保持不变；在创建实际容器时，只需要指定不同的隔离级别。您可以使用`--isolation=hyperv`参数来实现这一点：
- en: '[PRE1]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that in this case, even if you are running Windows 10, version 1903, you
    can use the container base image version 1809 without any limitations.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这种情况下，即使您使用的是Windows 10的1903版本，也可以使用1809版的容器基础镜像而没有任何限制。
- en: Hyper-V isolation is the default level of isolation when running containers
    on Windows 10, so the `--isolation=hyperv` parameter is not required. The opposite
    is also true; process isolation is the default level for Windows Server and if
    you want to use Hyper-V isolation, you have to specify it explicitly. The default
    isolation level can be changed in the `daemon.json` configuration file by specifying
    the `isolation `parameter in `exec-opts`. For more information, please refer to [https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file](https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file)
    and [https://docs.docker.com/engine/reference/commandline/dockerd/#docker-runtime-execution-options](https://docs.docker.com/engine/reference/commandline/dockerd/#docker-runtime-execution-options).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 10上运行容器时，Hyper-V隔离是默认的隔离级别，因此不需要`--isolation=hyperv`参数。反之亦然；进程隔离是Windows
    Server的默认级别，如果要使用Hyper-V隔离，必须明确指定。可以通过在`daemon.json`配置文件中指定`exec-opts`中的`isolation`参数来更改默认隔离级别。有关更多信息，请参阅[https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file](https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-configuration-file)和[https://docs.docker.com/engine/reference/commandline/dockerd/#docker-runtime-execution-options](https://docs.docker.com/engine/reference/commandline/dockerd/#docker-runtime-execution-options)。
- en: Linux containers on Windows
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows上的Linux容器
- en: In April 2017, Docker announced LinuxKit, a solution for running Linux containers
    on platforms that are not shipped with the Linux kernel, namely Windows and macOS.
    LinuxKit is a toolkit for building portable and lightweight Linux subsystems that
    contain only the bare minimum for running Linux containers on a given platform.
    Although Docker, since the first release in 2016, was able to run Linux containers
    on Windows to some limited extent, the announcement of LinuxKit was the milestone
    that started the story of **Linux Containers on Windows** (**LCOW**) as we know
    them today.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年4月，Docker宣布推出LinuxKit，这是一个在不带Linux内核的平台上运行Linux容器的解决方案，即Windows和macOS。LinuxKit是一个用于构建便携和轻量级Linux子系统的工具包，其中只包含在特定平台上运行Linux容器所需的最低限度。尽管自2016年首次发布以来，Docker能够在Windows上以有限的程度运行Linux容器，但LinuxKit的宣布是开始今天我们所知的**Windows上的Linux容器**（**LCOW**）故事的里程碑。
- en: Running Linux containers on Windows is not recommended for production deployments
    yet. Using LinuxKit and MobyLinuxVM is intended only for Desktop for Windows and
    development purposes. At the same time, the LCOW feature is still experimental
    and is not suitable for production.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产部署中，不建议在Windows上运行Linux容器。使用LinuxKit和MobyLinuxVM仅适用于Windows桌面和开发目的。与此同时，LCOW功能仍处于实验阶段，不适合生产环境使用。
- en: LinuxKit and MobyLinuxVM
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LinuxKit和MobyLinuxVM
- en: Docker for Windows (which was the initial name of Docker Desktop for Windows
    at that time) eventually came with a dedicated Hyper-V virtual machine based on
    LinuxKit named MobyLinuxVM. The purpose of this virtual machine is to provide
    a minimal runtime for Linux containers that can technically be run side by side
    with Windows containers.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Docker for Windows（当时Docker Desktop for Windows的初始名称）最终配备了基于LinuxKit的专用Hyper-V虚拟机，名为MobyLinuxVM。这个虚拟机的目的是为Linux容器提供一个最小的运行时，从技术上讲可以与Windows容器并存。
- en: By default, Docker Desktop for Windows runs in Linux containers mode, which
    utilizes MobyLinuxVM. In order to switch to Windows containers mode, you have
    to navigate to the Docker Desktop tray icon and select Switch to Windows containers....
    Docker will restart and switch to native Windows containers.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker Desktop for Windows以Linux容器模式运行，使用MobyLinuxVM。要切换到Windows容器模式，必须转到Docker
    Desktop托盘图标，选择切换到Windows容器.... Docker将重新启动并切换到本机Windows容器。
- en: 'In this solution, MobyLinuxVM runs its own Docker daemon and technically acts
    as a separate container host enclosed inside a virtual machine. Similarly, Windows
    has its own Docker Daemon that''s responsible for Windows containers and also
    provides the Docker Client (CLI), which communicates with both Docker Daemons.
    This architecture can be seen in the following diagram:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个解决方案中，MobyLinuxVM运行自己的Docker守护程序，技术上充当一个封装在虚拟机内部的独立容器主机。同样，Windows有自己的Docker守护程序，负责Windows容器，并提供Docker客户端（CLI），可以与两个Docker守护程序通信。这个架构可以在下图中看到：
- en: '![](assets/39eeaca8-5c69-4af0-b95f-31be59238f17.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/39eeaca8-5c69-4af0-b95f-31be59238f17.png)'
- en: 'Now, let''s take a look at a more up-to-date approach for running Linux containers
    on Windows: LinuxKit LCOW.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看一个更为现代的在Windows上运行Linux容器的方法：LinuxKit LCOW。
- en: LinuxKit LCOW and Hyper-V isolation
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LinuxKit LCOW和Hyper-V隔离
- en: Contrary to the MobyLinuxVM approach, **Linux Containers on Windows** (**LCOW**)
    uses Hyper-V isolated containers to achieve similar results. LCOW is available
    for Windows 10, which comes with Docker for Windows 17.10, and for Windows Server,
    version 1709, which comes with a preview release of Docker Enterprise Edition.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 与MobyLinuxVM方法相反，**Windows上的Linux容器**（**LCOW**）使用Hyper-V隔离容器来实现类似的结果。LCOW适用于Windows
    10，配备Docker for Windows 17.10，并适用于Windows Server 1709版本，配备Docker企业版的预览版本。
- en: The main difference compared to MobyLinuxVM is the possibility to natively run
    Linux and Windows containers side by side using *the same* Docker Daemon. This
    solution is the current strategy for supporting Linux containers running on Windows
    but as the long-term solution, in June 2019, Docker and Microsoft started a collaboration
    to integrate the Windows Subsystem for Linux version 2 as the primary Linux container
    runtime on Windows. Eventually, both LinuxKit LCOW and MobyLinuxVM with Docker
    Desktop for Windows will be retired.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 与MobyLinuxVM相比的主要区别是可以使用*相同的* Docker守护程序本地运行Linux和Windows容器。这个解决方案是支持在Windows上运行Linux容器的当前策略，但作为长期解决方案，在2019年6月，Docker和微软开始合作，将Windows子系统版本2集成为Windows上的主要Linux容器运行时。最终，LinuxKit
    LCOW和带有Docker Desktop for Windows的MobyLinuxVM将被淘汰。
- en: 'The following diagram shows LCOW:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了LCOW：
- en: '![](assets/706e2bf5-3e4c-4551-ad13-8dc009f14563.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/706e2bf5-3e4c-4551-ad13-8dc009f14563.png)'
- en: 'In order to enable LCOW support in Docker Desktop (version 18.02 or later),
    you have to enable the Experimental features option in Docker Settings *>* Daemon.
    Creating an LCOW container requires specifying the `--platform linux` parameter
    (if platform selection is unambiguous, that is, the image only exists in Linux,
    then it can be omitted in newer versions of Docker Desktop):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Docker Desktop（18.02版本或更高版本）中启用LCOW支持，必须在Docker设置>*守护程序中启用实验性功能选项。创建LCOW容器需要指定`--platform
    linux`参数（如果平台选择是明确的，即镜像只存在于Linux中，则在较新版本的Docker Desktop中可以省略）：
- en: '[PRE2]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding command will create a busybox Linux container and enter the interactive
    Bourne shell (sh).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将创建一个busybox Linux容器，并进入交互式Bourne shell（sh）。
- en: As of Docker Desktop for Windows 2.0.4.0, it is not possible to run the development
    Kubernetes cluster provided by Docker <q>("batteries included")</q> with the LCOW
    feature enabled.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 截至Docker Desktop for Windows 2.0.4.0版本，启用LCOW功能后，无法运行Docker提供的开发Kubernetes集群（“一应俱全”）。
- en: In this section, you learned how containers are currently supported on the Windows
    platform and the key differences between the provided runtimes. Now, we can start
    installing **Docker Desktop for Windows**.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，您了解了容器目前在Windows平台上的支持情况以及所提供运行时之间的关键区别。现在，我们可以开始安装**Windows的Docker桌面**。
- en: Installing Docker Desktop for Windows tooling
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Windows的Docker桌面工具
- en: 'Creating applications for Kubernetes on Windows requires an environment for
    developing and testing Docker containers. In this section, you will learn how
    to install Docker Desktop for Windows, which is the recommended tooling environment
    for development, building, shipping, and running Linux and Windows containers
    on Windows 10\. First, let''s recap on the prerequisites and Docker''s minimum
    requirements before continuing with the installation process:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上创建Kubernetes应用程序需要一个用于开发和测试Docker容器的环境。在本节中，您将学习如何安装Windows的Docker桌面，这是开发、构建、交付和在Windows
    10上运行Linux和Windows容器的推荐工具环境。首先，让我们在继续安装过程之前回顾一下先决条件和Docker的最低要求：
- en: A minimum of 4 GB of RAM.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少4GB的RAM。
- en: The **Intel Virtualization Technology** (**Intel VT**) or **AMD Virtualization**
    (**AMD-V**) technology features enabled in the BIOS. Note that if you are using
    a VM as your development machine, Docker Desktop for Windows does not guarantee
    support for nested virtualization. If you want to find out more about this scenario,
    please refer to [https://docs.docker.com/docker-for-windows/troubleshoot/#running-docker-desktop-for-windows-in-nested-virtualization-scenarios](https://docs.docker.com/docker-for-windows/troubleshoot/#running-docker-desktop-for-windows-in-nested-virtualization-scenarios).
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在BIOS中启用**Intel虚拟化技术** (**Intel VT**)或**AMD虚拟化** (**AMD-V**)技术。请注意，如果您将VM用作开发机器，Windows的Docker桌面不保证支持嵌套虚拟化。如果您想了解更多关于这种情况的信息，请参考[https://docs.docker.com/docker-for-windows/troubleshoot/#running-docker-desktop-for-windows-in-nested-virtualization-scenarios](https://docs.docker.com/docker-for-windows/troubleshoot/#running-docker-desktop-for-windows-in-nested-virtualization-scenarios)。
- en: Windows 10 Pro, Enterprise, or Education (version 1903 or later, 64-bit) installed.
    The current Docker Desktop supports version 1703 or later, but for the best experience
    when going through the examples in this book, it is recommended that you upgrade
    it to version 1903 or later. You can check your version of Windows by opening
    the Start menu, selecting the Settings icon, and navigating to System > About.
    You will find the necessary details under Windows Specifications.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装Windows 10 Pro、企业版或教育版（1903版本或更高版本，64位）。当前的Docker桌面支持1703版本或更高版本，但为了在本书的示例中获得最佳体验，建议您将其升级到1903版本或更高版本。您可以通过打开开始菜单，选择设置图标，然后导航到系统
    > 关于来检查Windows的版本。您将在Windows规格下找到必要的详细信息。
- en: Docker Desktop for Windows is also known as Docker for Windows and Docker **Community
    Edition** (**CE**) for Windows. This is especially important if you are following
    older installation guides.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Windows的Docker桌面也被称为Windows的Docker和Docker **社区版** (**CE**)。如果您正在遵循较旧的安装指南，这一点尤为重要。
- en: If you are interested in the installation of Docker Enterprise for Windows Server,
    please refer to [Chapter 7](165c2fcc-4ce8-4dbc-a19c-c7fd427b3379.xhtml), *Deploying
    a Hybrid On-Premises Kubernetes Cluster*.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对Windows Server上的Docker企业版的安装感兴趣，请参考[第7章](165c2fcc-4ce8-4dbc-a19c-c7fd427b3379.xhtml)，*部署混合本地Kubernetes集群*。
- en: Stable and Edge channels
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 稳定和边缘渠道
- en: 'Depending on your requirements, you can choose from two release channels for
    Docker Desktop for Windows: **Stable** and **Edge**. You should consider using
    a Stable channel if you are OK with the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的需求，您可以选择Windows的Docker桌面的两个发布渠道：**稳定**和**边缘**。如果您满意以下情况，您应该考虑使用稳定渠道：
- en: You want the recommended and reliable platform to work with containers. Releases
    in a Stable channel follow the release cycle of Docker platform stable releases.
    You can expect releases in the Stable channel to be performed once per quarter.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您希望使用推荐和可靠的平台来处理容器。稳定频道中的发布遵循Docker平台稳定发布的发布周期。您可以期望稳定频道的发布每季度进行一次。
- en: You want to have a choice of whether to send usage statistics.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您想选择是否发送使用统计信息。
- en: 'You should consider using an Edge channel if you are OK with the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您同意以下内容，可以考虑使用边缘频道：
- en: You want to get the experimental features as soon as possible. This may come
    at a cost of some instability and bugs. You can expect releases in the Edge channel
    to be performed once per month.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您希望尽快获得实验性功能。这可能会带来一些不稳定性和错误。您可以期望边缘频道的发布每月进行一次。
- en: You are OK with usage statistics being collected.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您同意收集使用统计数据。
- en: Now, let's proceed with the installation itself.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续进行安装。
- en: Installation
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: 'The installation process described in this section follows the recommendations
    from the official Docker documentation. Let''s begin:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中描述的安装过程遵循官方Docker文档的建议。让我们开始：
- en: If you are using chocolatey to manage application packages on your Windows system,
    it is also possible to use the official trusted package for Docker Desktop, available
    from: [https://chocolatey.org/packages/docker-desktop.](https://chocolatey.org/packages/docker-desktop)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Windows系统上使用chocolatey来管理应用程序包，也可以使用官方的Docker Desktop可信包，网址为：[https://chocolatey.org/packages/docker-desktop.](https://chocolatey.org/packages/docker-desktop)
- en: In order to download Docker Desktop for Windows, navigate to [https://hub.docker.com/editions/community/docker-ce-desktop-windows](https://hub.docker.com/editions/community/docker-ce-desktop-windows).
    Downloading it requires registering for the service. You can also choose direct
    links for downloading the Stable channel release ([https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe](https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe))
    or the Edge channel release ([https://download.docker.com/win/edge/Docker%20Desktop%20Installer.exe](https://download.docker.com/win/edge/Docker%20Desktop%20Installer.exe)).
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了下载Windows版Docker Desktop，请转到[https://hub.docker.com/editions/community/docker-ce-desktop-windows](https://hub.docker.com/editions/community/docker-ce-desktop-windows)。下载需要注册服务。您还可以选择直接链接来下载稳定频道发布（[https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe](https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe)）或边缘频道发布（[https://download.docker.com/win/edge/Docker%20Desktop%20Installer.exe](https://download.docker.com/win/edge/Docker%20Desktop%20Installer.exe)）。
- en: Docker Desktop for Windows will automatically enable the Hyper-V role if needed
    and restart the machine. If you are a VirtualBox user or Docker Toolbox user,
    you will no longer be able to run VirtualBox VMs as Type-1 and Type-2 hypervisors
    cannot run side by side. You will be still able to access your existing VM images
    but will not be able to start the VMs.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，Docker Desktop for Windows将自动启用Hyper-V角色并重新启动计算机。如果您是VirtualBox用户或Docker
    Toolbox用户，则将无法同时运行VirtualBox VM，因为Type-1和Type-2 hypervisors不能同时运行。您仍然可以访问现有的VM映像，但无法启动VM。
- en: Navigate to the directory where the installer has been downloaded to and double-click
    on it.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到安装程序下载的目录，然后双击它。
- en: 'Enable Windows container support by default by selecting the Use Windows containers
    instead of Linux containers option:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择“使用Windows容器而不是Linux容器”选项，默认启用Windows容器支持：
- en: '![](assets/a698518b-a15b-45d9-b00d-521f98abb7e3.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a698518b-a15b-45d9-b00d-521f98abb7e3.png)'
- en: 'Proceed with the installation:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行安装：
- en: '![](assets/44a30aea-7043-4d86-acc4-d460405dc593.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/44a30aea-7043-4d86-acc4-d460405dc593.png)'
- en: You may be prompted to restart your machine if the Hyper-V role was enabled
    by the installer.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果安装程序启用了Hyper-V角色，可能会提示您重新启动计算机。
- en: Launch the Docker Desktop application.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Docker桌面应用程序。
- en: 'Wait until Docker is fully initialized. You will see the following prompt:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待Docker完全初始化。您将看到以下提示：
- en: '![](assets/97d63c81-d24e-4ae2-a3ea-87a0012f243d.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/97d63c81-d24e-4ae2-a3ea-87a0012f243d.png)'
- en: After installation, we need to verify whether Docker has been installed properly
    and can run a simple *hello world* container image.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，我们需要验证Docker是否已正确安装并能运行一个简单的*hello world*容器镜像。
- en: Verifying the installation
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证安装
- en: 'Now, let''s verify whether the installation was successful:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们验证安装是否成功：
- en: 'Confirm that the Docker Client is working properly by opening Powershell and
    executing the following command:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开Powershell并执行以下命令来确认Docker客户端是否正常工作：
- en: '[PRE3]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should see an output similar to the following:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到类似以下的输出：
- en: '[PRE4]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run a simple container based on the official Powershell image:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行基于官方Powershell镜像的简单容器：
- en: '[PRE5]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'During the first run of this command, the missing container image layers will
    be downloaded. After some time, you will see Hello, World! written to the console
    output by Powershell:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行此命令的第一次运行期间，将下载缺少的容器镜像层。过一段时间后，您将在Powershell的控制台输出中看到Hello, World!：
- en: '![](assets/ff4db97a-6e8f-4b64-8b19-dec8c139da4f.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ff4db97a-6e8f-4b64-8b19-dec8c139da4f.png)'
- en: Congratulations! You have successfully installed Docker Desktop for Windows
    and run your first container.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恭喜！您已成功安装了Windows版Docker桌面并运行了您的第一个容器。
- en: In the next subsection, you will learn how to enable process isolation for containers.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一小节中，您将学习如何为容器启用进程隔离。
- en: Running process-isolated containers
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行进程隔离的容器
- en: 'On Windows 10, in order to run process-isolated containers, you have to explicitly
    specify the `--isolation=process` parameter while creating the container. As we
    mentioned previously, it is also necessary to specify the container image version
    that matches your OS. Let''s get started:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 10上，为了运行进程隔离的容器，您必须在创建容器时显式指定`--isolation=process`参数。正如我们之前提到的，还需要指定与您的操作系统匹配的容器镜像版本。让我们开始吧：
- en: 'Assuming you are running Windows 10, version **1903**, let''s execute the following
    command, which attempts to create a process-isolated container in detached (background)
    mode. Run a ping command stating the number of echo requests to be sent to your
    localhost machine, that is, `100`:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您正在运行Windows 10，版本**1903**，让我们执行以下命令，尝试在分离（后台）模式下创建一个进程隔离的容器。运行ping命令，指定要发送到本地主机机器的回显请求的数量，即`100`：
- en: '[PRE6]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The selected version of the mcr.microsoft.com/windows/nanoserver image is 1809,
    which does not match your OS version. Therefore, it will fail with an error informing
    you that the container''s base image OS version does not match the host OS:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 所选的mcr.microsoft.com/windows/nanoserver镜像版本为1809，与您的操作系统版本不匹配。因此，它将因错误而失败，通知您容器的基本镜像操作系统版本与主机操作系统不匹配：
- en: '![](assets/f3f46785-b75e-45cf-af23-e7231a26b06f.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f3f46785-b75e-45cf-af23-e7231a26b06f.png)'
- en: 'Now, let''s execute a similar command but now specify the proper, matching
    version (1903) of the container base image:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们执行类似的命令，但现在指定正确的匹配版本（1903）的容器基本镜像：
- en: '[PRE7]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this case, the container has started successfully, which can be verified
    by using the `docker ps` command:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，容器已成功启动，可以使用`docker ps`命令进行验证：
- en: '![](assets/4e2349c5-478a-4f9b-b883-d6fcf6d02036.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4e2349c5-478a-4f9b-b883-d6fcf6d02036.png)'
- en: Now, let's check how process isolation differs in practice from Hyper-V isolation.
    We will compare the visibility of the container processes in the host OS between
    these two isolation types.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们检查进程隔离在实践中与Hyper-V隔离有何不同。我们将比较这两种隔离类型之间主机OS中容器进程的可见性。
- en: 'First, get the container ID of your newly created process-isolated container.
    This container should run for a few minutes as it performs 100 echo requests to
    localhost before it terminates and is removed automatically. In our example, the
    container ID is `a627beadb1297f492ec1f73a3b74c95dbebef2cfaf8f9d6a03e326a1997ec2c1`.
    Using the `docker top <containerId>` command, it is possible to list all the processes
    running inside the container, including their **process IDs** (**PID**):'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，获取您新创建的进程隔离容器的容器ID。这个容器应该运行几分钟，因为它在终止并自动删除之前会执行100次对本地主机的回显请求。在我们的示例中，容器ID是`a627beadb1297f492ec1f73a3b74c95dbebef2cfaf8f9d6a03e326a1997ec2c1`。使用`docker
    top <containerId>`命令，可以列出容器内运行的所有进程，包括它们的**进程ID**（**PID**）：
- en: '[PRE8]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了上述命令的输出：
- en: '![](assets/9f8d0fe1-1eac-4bbb-bbfb-ee610f9b066d.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9f8d0fe1-1eac-4bbb-bbfb-ee610f9b066d.png)'
- en: 'In the preceding screenshot, the PID of the `ping.exe` process inside the container
    is `6420`. In order to list `ping.exe` processes running in the context of the
    host OS, use the `Get-Process` cmdlet in Powershell:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述屏幕截图中，容器内的`ping.exe`进程的PID为`6420`。为了列出在主机OS的上下文中运行的`ping.exe`进程，请在Powershell中使用`Get-Process`命令：
- en: '[PRE9]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了上述命令的输出：
- en: '![](assets/5e694e96-df0a-416e-9396-45bb766095f0.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5e694e96-df0a-416e-9396-45bb766095f0.png)'
- en: The preceding output reveals that the `ping.exe` process running inside the
    container is also visible from the host and has exactly the same PID: `6420`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出显示，容器内运行的`ping.exe`进程也可以从主机上看到，并且PID完全相同：`6420`。
- en: 'For comparison, we will create a similar container, but this time specify the `--isolation=hyperv`
    parameter in order to enforce Hyper-V isolation. On Windows 10, when running a
    default Docker configuration, you can omit the `--isolation` parameter altogether
    since the default isolation level is Hyper-V. We can create the container (with
    a different base image OS version than the host) using the following command:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行比较，我们将创建一个类似的容器，但这次指定`--isolation=hyperv`参数以强制使用Hyper-V隔离。在Windows 10上，当运行默认的Docker配置时，可以完全省略`--isolation`参数，因为默认隔离级别是Hyper-V。我们可以使用以下命令创建容器（使用与主机不同的基本镜像OS版本）：
- en: '[PRE10]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了上述命令的输出：
- en: '![](assets/50aef9bd-6d68-42ba-9326-872ac139b2f3.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/50aef9bd-6d68-42ba-9326-872ac139b2f3.png)'
- en: 'The container has started successfully. In this case, the container ID is `c62f82f54cbce3a7673f5722e29629c1ab3d8a4645af9c519c0e60675730b66f`.
    Inspecting the processes running inside the container reveals that `ping.exe`
    has a PID of `1268`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 容器已成功启动。在这种情况下，容器ID是`c62f82f54cbce3a7673f5722e29629c1ab3d8a4645af9c519c0e60675730b66f`。检查容器内运行的进程会发现`ping.exe`的PID为`1268`：
- en: '![](assets/f65a1630-dce0-49df-a4b5-a2e133c95546.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f65a1630-dce0-49df-a4b5-a2e133c95546.png)'
- en: 'When inspecting the processes running on the host, you will see that there
    is no `ping.exe` process with a PID of `1268` (and nor is there a `cmd.exe` process
    with a PID of `1216`, which is the main process in the container):'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当检查主机上运行的进程时，您会发现没有PID为`1268`的`ping.exe`进程（也没有PID为`1216`的`cmd.exe`进程，这是容器中的主要进程）。
- en: '![](assets/a7ac9cb8-7846-4670-ae98-5be3c0088cf2.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a7ac9cb8-7846-4670-ae98-5be3c0088cf2.png)'
- en: The reason for this is that the processes running in the Hyper-V container are
    not sharing the kernel with host as they are executed in separate, lightweight
    Hyper-V VM with their own kernel matching the container base image OS version.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为在 Hyper-V 容器中运行的进程不会与主机共享内核，因为它们在单独的轻量级 Hyper-V VM 中执行，并且具有与容器基础镜像 OS 版本匹配的自己的内核。
- en: Now, it's time to run your first Linux container on Windows using LCOW!
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候在 Windows 上使用 LCOW 运行你的第一个 Linux 容器了！
- en: Running LCOW containers
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 LCOW 容器
- en: By default, Docker Desktop for Windows hosts Linux containers using MobyLinuxVM,
    which provides a minimal, fully-functional environment for hosting Linux containers.
    This approach is meant only for development and testing purposes as it is not
    available on Windows Server. Windows Server currently has experimental support
    for LCOW and it is also possible to enable this feature in Docker Desktop.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Docker Desktop for Windows 使用 MobyLinuxVM 托管 Linux 容器，为其提供了一个最小的、完全功能的环境。这种方法仅用于开发和测试目的，因为它在
    Windows Server 上不可用。Windows Server 目前对 LCOW 有实验性支持，也可以在 Docker Desktop 中启用此功能。
- en: 'To enable LCOW support in Docker Desktop, you have to enable experimental features
    in the Docker Daemon. Let''s take a look:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Docker Desktop 中启用 LCOW 支持，您必须在 Docker Daemon 中启用实验性功能。让我们来看一下：
- en: Open the Docker Desktop tray icon and select Settings.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Docker Desktop 托盘图标并选择设置。
- en: Navigate to the Daemon tab.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 Daemon 选项卡。
- en: 'Enable the Experimental features checkbox:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用实验性功能复选框：
- en: '![](assets/2a177e9e-1efd-4a0c-a457-7f7736bcfe53.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2a177e9e-1efd-4a0c-a457-7f7736bcfe53.png)'
- en: Apply the changes. Docker Desktop will restart.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用更改。 Docker Desktop 将重新启动。
- en: 'Open PowerShell and create a container that uses Linux as the base image by
    providing the `--platform=linux` parameter to `docker run`. In this example, we''re
    creating a busybox container in interactive mode and starting a Bourne shell:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 PowerShell 并创建一个使用 Linux 作为基础镜像的容器，通过提供 `--platform=linux` 参数给 `docker run`。在这个例子中，我们以交互模式创建一个
    busybox 容器，并启动 Bourne shell：
- en: '[PRE11]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If the image exists in a version for one platform, it is not necessary to provide
    the `--platform` parameter. After downloading the image, it is also no longer necessary
    to specify the `--platform` parameter to run the container.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果镜像存在一个平台的版本，则不需要提供 `--platform` 参数。下载镜像后，也不再需要指定 `--platform` 参数来运行容器。
- en: 'After the container is started, the Bourne shell prompt will appear (`/ #`).
    Now, you can verify that you are indeed running inside a Linux container by using
    the `uname` command, which prints Linux kernel information:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '容器启动后，Bourne shell 提示符将出现 (`/ #`)。现在，您可以使用 `uname` 命令验证您确实在 Linux 容器内运行，该命令会打印
    Linux 内核信息：'
- en: '[PRE12]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](assets/973b1876-1765-4ace-88ba-abc71c22bdca.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/973b1876-1765-4ace-88ba-abc71c22bdca.png)'
- en: 'In a separate Powershell window, without closing the Bourne shell in the container,
    execute the `docker inspect <containerId>` command in order to verify that the
    container is indeed running using LCOW using Hyper-V isolation:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个单独的 Powershell 窗口中，在不关闭容器中的 Bourne shell 的情况下，执行 `docker inspect <containerId>`
    命令以验证容器确实是使用 LCOW 使用 Hyper-V 隔离运行的：
- en: '![](assets/afc73b54-ce91-47dd-a333-66673318ce37.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/afc73b54-ce91-47dd-a333-66673318ce37.png)'
- en: In this section, you learned how to install Docker Desktop for Windows tooling
    and how to verify its functionality, including running Linux containers on Windows.
    In the next section, you will learn how to approach building your first Windows
    container image with the help of Visual Studio Code.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您学习了如何安装 Docker Desktop for Windows 工具和验证其功能，包括在 Windows 上运行 Linux 容器。在下一节中，您将学习如何使用
    Visual Studio Code 来构建您的第一个 Windows 容器镜像。
- en: Building your first container
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建你的第一个容器
- en: In the previous section, you have learned how to install Docker Desktop for
    Windows and how to run simple Windows and Linux containers. This section will
    demonstrate how to build a custom Docker image using `Dockerfile` and how to perform
    the most common actions on running containers, such as accessing logs and perform `exec`
    into a container.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，您已经学会了如何在Windows上安装Docker Desktop以及如何运行简单的Windows和Linux容器。本节将演示如何使用Dockerfile构建自定义Docker镜像，以及如何执行运行容器的最常见操作，例如访问日志和执行`exec`进入容器。
- en: A Dockerfile is a text file that contains all the commands that the user would
    execute in order to assemble a container image. As this book does not focus on
    Docker only, this section will be a short recap of common Docker operations. If
    you are interested in Dockerfiles themselves and building containers, please refer
    to the official documentation at: [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile是一个文本文件，包含用户执行的所有命令，以组装容器镜像。由于本书不仅关注Docker，本节将简要回顾常见的Docker操作。如果您对Dockerfile本身和构建容器感兴趣，请参考官方文档：[https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)。
- en: As an example, we will prepare a Dockerfile that creates a Windows container
    image of Microsoft IIS hosting a demonstration HTML web page. The image definition
    won't be complicated in order to demonstrate operation principles.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将准备一个Dockerfile，创建一个Microsoft IIS的Windows容器镜像，托管一个演示HTML网页。为了演示操作原则，镜像定义不会很复杂。
- en: Preparing a Visual Studio Code workspace
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备Visual Studio Code工作区
- en: 'The first step is preparing the Visual Studio Code workspace. Visual Studio
    Code requires you to install an additional extension for managing Docker. Let''s
    get started:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是准备Visual Studio Code工作区。Visual Studio Code需要您安装一个额外的扩展来管理Docker。让我们开始吧：
- en: In order to do that, open the Extensions view by pressing *Ctrl *+ *Shift *+ *X*.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了做到这一点，按*Ctrl*+*Shift*+*X*打开扩展视图。
- en: 'In Extensions: Marketplace, search for `docker` and install the official Docker
    extension from Microsoft:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在扩展：市场中，搜索`docker`并安装微软官方的Docker扩展：
- en: '![](assets/9074b59b-a8e3-4612-9a12-ac4a0a839539.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9074b59b-a8e3-4612-9a12-ac4a0a839539.png)'
- en: All of the operations demonstrated in this section can be performed without
    Visual Studio Code, in any code/text editor and using the command line. Visual
    Studio Code is a useful, multi-platform IDE for developing and testing applications
    running in Docker containers.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 本节演示的所有操作都可以在任何代码/文本编辑器和使用命令行中执行，而无需使用Visual Studio Code。Visual Studio Code是一个有用的多平台IDE，用于开发和测试在Docker容器中运行的应用程序。
- en: 'After the installation is complete, Docker Explorerwill become available:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，Docker Explorer将可用：
- en: '![](assets/2e3864f4-1789-48db-ad96-29304e7a2f36.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2e3864f4-1789-48db-ad96-29304e7a2f36.png)'
- en: 'You can also leverage new Docker-oriented commands from the Command Palette
    after pressing *Ctrl *+ *Shift *+ P and typing `docker` into the search bar:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以在按下*Ctrl*+*Shift*+P后，输入`docker`到搜索栏中，从命令面板中利用新的面向Docker的命令。
- en: '![](assets/3203b306-5a02-4d56-8c09-9ab80ec083cf.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3203b306-5a02-4d56-8c09-9ab80ec083cf.png)'
- en: Now, initialize the workspace by opening the desired folder using the *Ctrl *+ *K*, *Ctrl *+ *O*shortcut
    or navigating to File | Open Folder....
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过使用*Ctrl*+*K*，*Ctrl*+*O*快捷键初始化工作区，打开所需的文件夹或导航到文件|打开文件夹...。
- en: In the next subsection, we will create a demonstration HTML web page that will
    be hosted inside the Windows container.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一小节中，我们将创建一个演示HTML网页，该网页将托管在Windows容器中。
- en: Creating a sample HTML web page
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个示例HTML网页
- en: 'We will start creating our Docker image by creating a minimalistic HTML "Hello
    World!" web page. This step mimics implementing an application without any containerization
    and is a common scenario in application development: you are running a non-containerized
    application and then you move it to a Docker container.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个简约的HTML“Hello World！”网页来开始创建我们的Docker镜像。这一步骤模拟了在没有任何容器化的情况下实现应用程序，并且在应用程序开发中是一个常见的场景：您正在运行一个非容器化的应用程序，然后将其移动到Docker容器中。
- en: You can also use the files from this book's GitHub repository to do this, available
    from: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter01/01_docker-helloworld-iis](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter01/01_docker-helloworld-iis).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用本书的GitHub存储库中的文件来执行此操作，该存储库位于：[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter01/01_docker-helloworld-iis](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter01/01_docker-helloworld-iis)。
- en: 'Add a new file in Visual Studio Code in your workspace using the *Ctrl* + *N *shortcut
    or by navigating to File > New File. Use the following sample HTML code in the
    new file:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *N*快捷键或通过导航到文件 > 新建文件在Visual Studio Code中的工作区中添加一个新文件。在新文件中使用以下示例HTML代码：
- en: '[PRE13]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Save the file (using *Ctrl* + S) as `index.html` in your workspace.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存（使用*Ctrl* + S）为`index.html`在您的工作区中。
- en: Let's proceed with creating the Dockerfile itself.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建Dockerfile本身。
- en: Creating a Dockerfile
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Dockerfile
- en: As we will be hosting the web page in the container using IIS, we need to create
    a **Dockerfile** that uses the `mcr.microsoft.com/windows/servercore/iis` official
    image as the base image for the build. We will use a Docker image with the `windowsservercore-1903`
    tag to ensure that we are running a version that matches the host OS and make
    it possible to use process isolation.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在容器中使用IIS托管网页，因此我们需要创建一个**Dockerfile**，该文件使用`mcr.microsoft.com/windows/servercore/iis`官方镜像作为构建的基础镜像。我们将使用带有`windowsservercore-1903`标签的Docker镜像，以确保我们运行与主机操作系统匹配的版本，并使其能够使用进程隔离。
- en: 'Create a new file in your workspace named `Dockerfile`, containing the following:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的工作区中创建一个名为`Dockerfile`的新文件，其中包含以下内容：
- en: '[PRE14]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Visual Studio Code gives you a lot of snippets while writing the Dockerfile,
    providing that you have named the file following the expected convention. You
    can also bring up the list of snippets by pressing *Ctrl* + SPACE while editing.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写Dockerfile时，Visual Studio Code会提供许多代码片段，前提是您已经按照预期的约定命名了文件。您还可以在编辑时按*Ctrl*
    + SPACE来显示代码片段列表。
- en: In the next subsection, you will learn how to manually build a Docker image
    based on the Dockerfile you have just created.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一小节中，您将学习如何根据刚刚创建的Dockerfile手动构建Docker镜像。
- en: Building a Docker image
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建Docker镜像
- en: 'Building a Docker image is performed using the `docker build` command. You
    have two options when it comes to performing this step:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`docker build`命令来执行构建Docker镜像。在执行此步骤时，您有两个选项：
- en: Use Visual Studio Code's Command Palette.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code的命令面板。
- en: Use the Powershell command line.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Powershell命令行。
- en: 'In Visual Studio Code, do the following:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中，执行以下操作：
- en: Use the *Ctrl* + *Shift* + *P *shortcut in order to open the Command Palette.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *Shift* + *P*快捷键打开命令面板。
- en: 'Search for Docker: Build Image and execute it by providing the image name and
    tag in the following format (or use the default suggested name based on the directory
    name):'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '搜索Docker: Build Image并按照以下格式执行它，提供镜像名称和标签（或者使用基于目录名称的默认建议名称）：'
- en: '[PRE15]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If you are logged into a custom registry or using Docker Hub, you can also
    specify the following:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已登录到自定义注册表或使用Docker Hub，您还可以指定以下内容：
- en: '[PRE16]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The concepts of Docker Registry and the public Docker Hub will be covered in
    [Chapter 3](e00b7610-2513-4513-863f-62a054d8cd98.xhtml), *Working with Container
    Images*.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Registry和公共Docker Hub的概念将在[第3章](e00b7610-2513-4513-863f-62a054d8cd98.xhtml)中进行介绍，*使用容器镜像*。
- en: We will use the following image name and tag in this example: `docker-helloworld-iis:latest`.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将使用以下镜像名称和标签：`docker-helloworld-iis:latest`。
- en: 'The Visual Studio Code command is equivalent to performing the following actions
    in Powershell:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code命令相当于在Powershell中执行以下操作：
- en: 'Change the working directory to the folder that contains the `Dockerfile`;
    for example:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将工作目录更改为包含`Dockerfile`的文件夹；例如：
- en: '[PRE17]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Execute the `docker build` command while specifying the `-t` argument in order
    to provide the image name and tag and use the current directory, `.`, as the build context:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`docker build`命令，同时指定`-t`参数以提供镜像名称和标签，并使用当前目录`.`作为构建上下文：
- en: '[PRE18]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前述命令的输出：
- en: '![](assets/179facb6-a584-4dc6-8be5-ca7c9f3db64a.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/179facb6-a584-4dc6-8be5-ca7c9f3db64a.png)'
- en: After a successful build, you can use the `docker-helloworld-iis` local image
    to create new containers. We will cover this in the next subsection.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 成功构建后，您可以使用`docker-helloworld-iis`本地镜像来创建新的容器。我们将在下一小节中介绍这个过程。
- en: Running Windows containers
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Windows容器
- en: 'Now, let''s create a process-isolated Windows container with our example web
    page. In Visual Studio Code, navigate to the Command Palette (*Ctrl* + *Shift* + *P*)
    and find the Docker: Run command. As the image, choose `docker-helloworld-iis`.
    A terminal with the appropriate command will open.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，让我们使用示例网页创建一个进程隔离的Windows容器。在Visual Studio Code中，导航至命令面板（*Ctrl* + *Shift*
    + *P*），找到Docker: Run命令。选择`docker-helloworld-iis`作为镜像。将打开一个带有适当命令的终端。'
- en: 'This is the equivalent to performing the `docker run` command in Powershell,
    as follows (if port *tcp/80* on your host machine is already in use, use any other
    port that''s available):'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于在Powershell中执行`docker run`命令，如下（如果您的主机机器上的端口*tcp/80*已被占用，请使用其他可用端口）：
- en: '[PRE19]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'After successfully starting the container, navigate to `http://localhost:80/`
    in a web browser. You should see the following output:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 成功启动容器后，通过网络浏览器导航至`http://localhost:80/`。您应该会看到以下输出：
- en: '![](assets/893e8fde-0e4d-42da-be61-0f8c2c153f8b.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/893e8fde-0e4d-42da-be61-0f8c2c153f8b.png)'
- en: Next, we will be inspecting container logs, which are one of the most useful
    tools for debugging container issues.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将检查容器日志，这是调试容器问题最有用的工具之一。
- en: Inspecting container logs
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查容器日志
- en: Accessing the main process' standard output and standard error logs in the container
    is crucial for debugging issues with containerized applications. This is also
    a common scenario when using Kubernetes, where you can perform similar operations
    using Kubernetes CLI tools.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 访问容器中主进程的标准输出和标准错误日志对于调试容器化应用程序的问题至关重要。这在使用Kubernetes时也是常见的情况，您可以使用Kubernetes
    CLI工具执行类似的操作。
- en: 'The current architecture of the official Microsoft IIS Docker image does not
    provide any logs to the `stdout` of `ServiceMonitor.exe` (the main process in
    the container), so we will demonstrate this on the simple `ping.exe` example that
    we used previously. Run the following container in order to create the container:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 官方Microsoft IIS Docker镜像的当前架构不会将任何日志输出到`ServiceMonitor.exe`（容器中的主进程）的`stdout`，因此我们将在之前使用的简单`ping.exe`示例上进行演示。运行以下容器以创建容器：
- en: '[PRE20]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, in Visual Studio Code, you can inspect the logs by opening the Command
    Palette (*Ctrl* + *Shift* + *P*) and executing the `Docker: Show Logs` command.
    After selecting the container name, the logs will be shown in the terminal. Alternatively,
    you can use the Docker Explorer tab, expand the Containers list, right-click the
    container you want to inspect, and select Show Logs:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，在Visual Studio Code中，您可以通过打开命令面板（*Ctrl* + *Shift* + *P*）并执行`Docker: Show
    Logs`命令来检查日志。选择容器名称后，日志将显示在终端中。或者，您可以使用Docker Explorer选项卡，展开容器列表，右键单击要检查的容器，然后选择显示日志：'
- en: '![](assets/705b6c2a-dbba-436b-a9e7-68a49305735a.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/705b6c2a-dbba-436b-a9e7-68a49305735a.png)'
- en: This will open a terminal in Visual Studio Code so that you can start streaming
    logs from the container's `stdout` and `stderr` instances.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在Visual Studio Code中打开一个终端，以便您可以开始从容器的`stdout`和`stderr`实例中流式传输日志。
- en: 'For the PowerShell command line, you have to use the `docker logs` command:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 对于PowerShell命令行，您必须使用`docker logs`命令：
- en: '[PRE21]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'It is also worth noting that in debugging scenarios, you may find the `-f`
    and `--tail` parameters useful:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在调试场景中，您可能会发现`-f`和`--tail`参数很有用：
- en: '[PRE22]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `-f` parameter instructs the log output  to be followed in real-time, whereas
    the `--tail` parameter makes it possible to show only a specified number of last
    lines from the output.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`-f`参数指示实时跟踪日志输出，而`--tail`参数使其仅显示输出的最后几行。'
- en: Apart from inspecting container logs, you will often need to `exec` into a running
    container. This will be covered in the next subsection.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 除了检查容器日志之外，您经常需要`exec`进入正在运行的容器。这将在下一小节中介绍。
- en: Exec into a running container
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入正在运行的容器
- en: In debugging and testing scenarios, it is often required to execute another
    process inside a running container in an ad hoc manner. This is especially useful
    for creating a shell instance (for Windows, with `cmd.exe` or `powershell.exe`,
    and for Linux, with `bash` or `sh`) in the container and interactively debugging
    the container. Such an operation is called performing `exec` into a running container.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试和测试场景中，通常需要以临时方式在运行的容器内执行另一个进程。这对于在容器中创建一个shell实例（对于Windows，使用`cmd.exe`或`powershell.exe`，对于Linux，使用`bash`或`sh`）并进行交互式调试特别有用。这样的操作称为执行`exec`进入正在运行的容器。
- en: 'Visual Studio Code enables this through Docker Explorer. In the Docker Explorer
    tab, find the container you would like to exec into, right-click it, and choose
    Attach Shell:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code通过Docker Explorer实现了这一点。在Docker Explorer选项卡中，找到要进入的容器，右键单击它，然后选择附加Shell：
- en: '![](assets/4b5dc68e-fba2-493b-af84-2d291317b18d.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4b5dc68e-fba2-493b-af84-2d291317b18d.png)'
- en: By default, for Windows containers, this command will exec using the `powershell.exe`
    command. If you are running images based on Windows Nano Server, you will not
    be able to use `powershell.exe` and you'll have to use `cmd.exe` instead. To customize
    which command is used during Attach Shell, open Settings (*Ctrl* + *,*), search
    for docker, and customize the docker.attachShellCommand.windowsContainer setting.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，对于Windows容器，此命令将使用`powershell.exe`命令进行exec。如果您正在运行基于Windows Nano Server的映像，则将无法使用`powershell.exe`，而必须改用`cmd.exe`。要自定义在附加Shell期间使用的命令，请打开设置（*Ctrl*
    + *,*），搜索docker，并自定义docker.attachShellCommand.windowsContainer设置。
- en: 'In the Powershell command line, the equivalent `docker exec` command is as
    follows:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在Powershell命令行中，等效的`docker exec`命令如下：
- en: '[PRE23]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preceding command creates a new `powershell.exe` process inside the running
    container in interactive mode with the attached terminal (the `-it` parameter).
    As you can see, a new interactive instance of the Powershell terminal opens:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令在附加终端（`-it`参数）的交互模式下在运行的容器中创建了一个新的`powershell.exe`进程。如您所见，Powershell终端的新交互式实例已打开：
- en: '![](assets/9b426421-3095-4a73-a5c3-b5ffb226e16a.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9b426421-3095-4a73-a5c3-b5ffb226e16a.png)'
- en: You can only exec into containers that have the main process running. If the
    container is exited, terminated, or placed in a paused state, it will **not**
    be possible to use the `exec` command.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 您只能进入正在运行主进程的容器。如果容器已退出、终止或处于暂停状态，则**无法**使用`exec`命令。
- en: 'Let''s try inspecting the contents of `index.html` inside the container''s
    working directory:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试检查容器工作目录中`index.html`的内容：
- en: '[PRE24]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前述命令的输出：
- en: '![](assets/c4e99bfd-2322-4099-86bf-526c2b50dd71.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c4e99bfd-2322-4099-86bf-526c2b50dd71.png)'
- en: This reveals the expected contents of the `index.html` file that we created
    and added to the image earlier.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了我们之前创建并添加到镜像中的`index.html`文件的预期内容。
- en: 'We can also inspect the IIS worker process (`w3wp.exe`) for the application
    pool hosting `index.html`. This is a common scenario during debugging when not
    all the logs are available directly via container output logs:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以检查托管`index.html`的应用程序池的IIS工作进程（`w3wp.exe`）。这是在调试期间的常见场景，当不是所有日志都直接通过容器输出日志可用时：
- en: '[PRE25]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前述命令的输出：
- en: '![](assets/dbdd1d72-bf7b-430f-b19a-d17b063cf6d6.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dbdd1d72-bf7b-430f-b19a-d17b063cf6d6.png)'
- en: Using `docker exec` is one of the most powerful commands that you have in your
    container toolbox. If you learn how to use it, you'll be able to debug your applications
    almost as if they were hosted in a non-containerized environment.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`docker exec`是您容器工具箱中最强大的命令之一。如果您学会如何使用它，您将能够几乎像在非容器化环境中托管应用程序一样进行调试。
- en: Summary
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the key aspects of the Windows containers
    architecture and the differences between the isolation modes provided by the Windows
    container runtime. We also covered how to install Docker Desktop for Windows and
    demonstrated how to perform the most important operations using the Docker CLI
    on the Windows platform.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了Windows容器架构的关键方面以及Windows容器运行时提供的隔离模式之间的区别。我们还介绍了如何在Windows平台上安装Docker
    Desktop，并演示了如何使用Docker CLI执行最重要的操作。
- en: This and the next two chapters will be the foundations of what you are going
    to learn about regarding Kubernetes on Windows in the rest of this book. In the
    next chapter, we will focus on managing state in Windows containers, that is,
    how to persist data when running containers.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 本章和接下来的两章将是本书其余部分关于Windows上Kubernetes的基础。在下一章中，我们将专注于在Windows容器中管理状态，即在运行容器时如何持久化数据。
- en: Questions
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the kernel features that Windows exposes in order to enable containerization?
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Windows暴露哪些内核特性以实现容器化？
- en: What are the key differences between containerization on Linux and on Windows?
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Linux和Windows上容器化之间的主要区别是什么？
- en: What is the difference between Hyper-V isolation and process isolation? When
    should you use Hyper-V isolation?
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Hyper-V隔离和进程隔离之间有什么区别？何时应该使用Hyper-V隔离？
- en: How can we enable LCOW on Windows 10?
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在Windows 10上启用LCOW？
- en: What command can we use to access logs for the main process in a Docker container?
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用什么命令来访问Docker容器中主进程的日志？
- en: How can we start a new Powershell process inside a running container?
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在运行的容器内启动一个新的Powershell进程？
- en: You can find the answers to these questions in the *Assessments* section of
    this book.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书的*评估*部分找到这些问题的答案。
- en: Further reading
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'This chapter has provided a recap of Docker containers on Windows. For more
    information concerning Windows containers, please refer to two excellent Packt
    books:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 本章对Windows上的Docker容器进行了回顾。有关Windows容器的更多信息，请参考两本优秀的Packt图书。
- en: '*Docker on Windows: From 101 to production with Docker on Windows, at* [https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition](https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition).'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上使用Docker：从101到生产环境，请访问[https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition](https://www.packtpub.com/virtualization-and-cloud/docker-windows-second-edition)。
- en: '*Learning Windows Server Containers, at* [https://www.packtpub.com/virtualization-and-cloud/learning-windows-server-containers](https://www.packtpub.com/virtualization-and-cloud/learning-windows-server-containers).'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习Windows Server容器，请访问[https://www.packtpub.com/virtualization-and-cloud/learning-windows-server-containers](https://www.packtpub.com/virtualization-and-cloud/learning-windows-server-containers)。
- en: You can also check out the official Microsoft documentation on Windows containers,
    at [https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/](https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/).
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您也可以查阅官方微软关于Windows容器的文档，请访问[https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/](https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/)。
