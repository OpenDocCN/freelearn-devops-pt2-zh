- en: Deploying WordPress
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署WordPress
- en: In the previous chapter, we worked on building a playbook that installs and
    configures a basic LAMP stack. In this chapter, we are going to be building on
    top of the techniques we used there in order to create a playbook that installs
    a LEMP stack and WordPress.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们致力于构建一个安装和配置基本LAMP堆栈的playbook。在本章中，我们将在那里使用的技术基础上构建一个安装LEMP堆栈和WordPress的playbook。
- en: 'We will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Preparing our initial playbook
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备我们的初始playbook
- en: Downloading and installing the WordPress CLI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并安装WordPress CLI
- en: Installing and configuring WordPress
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置WordPress
- en: Logging in to your WordPress installation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录到您的WordPress安装
- en: Before we start, we should quickly cover what WordPress is. It is likely that
    at some point in the last 48 hours, you have visited a website that is powered
    by WordPress. It is an open source **content management system** (**CMS**) that
    is powered by PHP and MySQL and is used by around 19,545,516 websites according
    to the CMS usage statistics provided by BuiltWith.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们应该快速了解一下WordPress是什么。很可能在过去的48小时内，您已经访问过由WordPress提供支持的网站。它是一个由PHP和MySQL提供支持的开源**内容管理系统**（**CMS**），根据BuiltWith提供的CMS使用统计数据，它被约19,545,516个网站使用。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Again, a fresh copy of the CentOS 7 Vagrant box we have launched in the previous
    chapters will be used. This does mean that packages will need to be downloaded
    again, along with WordPress. You can find a complete copy of the playbook at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter05/lemp](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter05/lemp).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中启动的CentOS 7 Vagrant box的新副本将被使用。这意味着软件包需要重新下载，以及WordPress。您可以在[https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter05/lemp](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter05/lemp)找到playbook的完整副本。
- en: Preinstallation tasks
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预安装任务
- en: 'As mentioned in the previous chapter, a LEMP stack is composed of the following
    elements:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，LEMP堆栈由以下元素组成：
- en: '**Linux**: In our case, this will be CentOS 7 again'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**：在我们的情况下，这将再次是CentOS 7'
- en: '**NGINX**: If you remember, it is pronounced as *engine-x*, and replaces Apache
    in our stack'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NGINX**：如果您记得，它的发音是*engine-x*，并且在我们的堆栈中替代了Apache'
- en: '**MariaDB**: As we have seen, this will be the database component'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MariaDB**：正如我们所看到的，这将是数据库组件'
- en: '**PHP**: We will be using PHP 7.2 again for this'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PHP**：我们将再次使用PHP 7.2'
- en: Before we install WordPress, we need to install and configure these components.
    Also, as this playbook is eventually going to be executed against publicly available
    cloud servers, we need to think about some best practices around our NGINX configuration.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装WordPress之前，我们需要安装和配置这些组件。此外，由于这个playbook最终将被执行在公开可用的云服务器上，我们需要考虑一些关于NGINX配置的最佳实践。
- en: 'Let''s start by getting the initial structure of the playbook set up:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从设置playbook的初始结构开始：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that we have the basic layout, we need to put some content in the `Vagrantfile`
    and `.gitignore` files. `Vagrantfile` contains the following, similar to the previous
    chapters:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们有了基本布局，我们需要在`Vagrantfile`和`.gitignore`文件中放一些内容。`Vagrantfile`包含以下内容，与前几章类似：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you may have spotted, we are using a different IP address for this Vagrant
    box; the `.gitignore` file should contain a single line:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经注意到的那样，我们为这个Vagrant box使用了不同的IP地址；`.gitignore`文件应该包含一行：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that we have the basics configured, we can make a start by writing the playbook
    to deploy and configure our initial software stack.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置好了基本内容，我们可以开始编写playbook来部署和配置我们的初始软件堆栈。
- en: The stack-install command
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: stack-install命令
- en: 'We are going to start by creating a role called `stack-install`using `ansible-galaxy
    init`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从使用`ansible-galaxy init`创建一个名为`stack-install`的角色开始：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will install our initial software stack. Once installed, we hand over to
    a second role, which will then configure the software stack before a third role
    starts the WordPress installation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装我们的初始软件堆栈。安装完成后，我们将交给第二个角色，然后配置软件堆栈，然后第三个角色开始安装WordPress。
- en: 'So what packages do we need? WordPress has the following requirements:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们需要哪些软件包呢？WordPress有以下要求：
- en: PHP 7.2 or higher
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP 7.2或更高版本
- en: MariaDB 10.0 or greater, or MySQL 5.6 or greater
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB 10.0或更高版本，或者MySQL 5.6或更高版本
- en: NGINX or Apache with the `mod_rewrite` module
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有`mod_rewrite`模块的NGINX或Apache
- en: HTTPS support
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTPS支持
- en: We know from the previous chapter that the IUS repository can provide PHP 7.2
    and MariaDB 10.1, so we will use that as the source for those packages, but what
    about NGINX? There are NGINX packages in the EPEL repository. However, we are
    going to be using the main NGINX repository so we can get the latest and greatest
    version.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道从上一章，IUS仓库可以提供PHP 7.2和MariaDB 10.1，所以我们将使用它作为这些软件包的来源，但NGINX呢？EPEL仓库中有NGINX软件包。但是，我们将使用主要的NGINX仓库，以便获取最新和最好的版本。
- en: Enabling the repositories
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用仓库
- en: Let's start our playbook by enabling the three repositories we need in order
    to install our software stack and then, once those repositories are enabled, we
    should do a `yum update` to make sure that the base operating system is up to
    date.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过启用我们安装软件堆栈所需的三个仓库来开始我们的playbook，然后，一旦这些仓库被启用，我们应该执行`yum update`来确保基本操作系统是最新的。
- en: 'The `roles/stack-install/defaults/main.yml` file requires the following content
    to achieve this. First, we have the locations for the RPM packages that enable
    EPEL and IUS:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`roles/stack-install/defaults/main.yml`文件需要以下内容才能实现这一点。首先，我们有启用EPEL和IUS的RPM软件包的位置：'
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After that, we have the following nested variable, which contains all of the
    information we need to use the `yum_repository` module in order to create a `.repo`
    file for the NGINX repository:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们有以下嵌套变量，其中包含我们使用`yum_repository`模块创建NGINX仓库的`.repo`文件所需的所有信息：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that we have the defaults in place, we can add the tasks to the `roles/stack-install/tasks/main.yml`
    file; these are as follows, with the first task being already familiar as all
    it does is install our two packages:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了默认设置，我们可以将任务添加到`roles/stack-install/tasks/main.yml`文件中；具体如下，第一个任务已经很熟悉，因为它只是安装我们的两个软件包：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The next task creates a repository file called `nginx.repo` in `/etc/yum.repos.d/`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的任务是在`/etc/yum.repos.d/`中创建一个名为`nginx.repo`的存储库文件：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As you can see from the following Terminal output, the content of the file
    is pointing toward the NGINX repository, and we can get more information on the
    NGINX package by running:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下终端输出可以看出，文件的内容指向了NGINX存储库，我们可以通过运行以下命令获取有关NGINX软件包的更多信息：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面命令的输出：
- en: '![](assets/0acb7dd0-336e-4be1-9d47-664069f25d1c.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0acb7dd0-336e-4be1-9d47-664069f25d1c.png)'
- en: 'The following task should also look familiar, as we used it in the previous
    chapter to update the installed packages:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的任务也应该看起来很熟悉，因为我们在上一章中使用它来更新已安装的软件包：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now that we have our source repositories set up and the already installed packages
    updated, we can proceed with the remainder of the package installations.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了源存储库并更新了已安装的软件包，我们可以继续进行其余的软件包安装。
- en: Installing the packages
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装软件包
- en: 'We are going to create four lists of packages; these are in the `roles/stack-install/defaults/main.yml`
    file. As per the previous chapter, we first need to uninstall a preinstalled MariaDB
    package, so our first list includes packages to remove:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建四个软件包列表；这些在`roles/stack-install/defaults/main.yml`文件中。与上一章一样，我们首先需要卸载预安装的MariaDB软件包，因此我们的第一个列表包括要删除的软件包：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next up, we have the packages needed to allow Ansible to interact with services
    such as SELinux and MariaDB, as well as installing the Postfix package, which,
    we know from the last time, is removed:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装一些软件包，以允许Ansible与诸如SELinux和MariaDB之类的服务进行交互，以及安装Postfix软件包，我们知道上次已经删除了：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, we have all of the packages that make up our core software stack:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有组成核心软件堆栈的所有软件包：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, we have a few nice-to-haves:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还有一些不错的功能：
- en: '[PRE13]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The tasks to remove the packages and then install them should be placed in
    the `roles/stack-install/tasks/main.yml` file, starting with the task to remove
    the packages:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 删除软件包然后安装它们的任务应该放在`roles/stack-install/tasks/main.yml`文件中，从删除软件包的任务开始：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, we can install all of the packages in one go using the following task:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用以下任务一次性安装所有软件包：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice how we are combining the three remaining lists of packages in a single
    variable. We are doing this so we do not have to repeat the `yum` task any more
    than we have to. It also allows us to override, say, just `extra_packages` elsewhere
    in the playbook and not have to repeat the entire list of required packages needed
    for other parts of the stack.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们正在将剩下的三个软件包列表合并为一个变量。我们这样做是为了尽量减少重复使用`yum`任务。这也允许我们在剧本的其他地方覆盖，比如只覆盖`extra_packages`，而不必重复整个堆栈其他部分所需的软件包列表。
- en: The stack-config role
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: stack-config角色
- en: 'The next role will configure the software stack we have just installed, so
    let''s create the role:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的角色将配置我们刚刚安装的软件堆栈，所以让我们创建这个角色：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now that we have the files needed for the role, we can make a start on planning
    what we need to configure. We will need to do the following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了角色所需的文件，我们可以开始计划需要配置的内容。我们需要做以下事情：
- en: Create a user for our WordPress to run under
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的WordPress创建一个用户
- en: Configure NGINX as per the best practices on the WordPress Codex
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照WordPress Codex上的最佳实践配置NGINX
- en: Configure PHP-FPM to run as the WordPress user
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将PHP-FPM配置为以WordPress用户身份运行
- en: Do the initial configuration for SELinux
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为SELinux进行初始配置
- en: Let's start by creating the WordPress user.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建WordPress用户开始。
- en: WordPress system user
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress系统用户
- en: 'The defaults for the WordPress system user, which should be placed in `roles/stack-config/defaults/main.yml`,
    are as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: WordPress系统用户的默认设置，应该放在`roles/stack-config/defaults/main.yml`中，如下所示：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We are referring to this as the system user as we will be creating a user in
    WordPress later in the chapter. This user's details will also be defined in Ansible,
    so we do not want to get the two different users confused.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这称为系统用户，因为我们将在本章后面创建一个WordPress用户。这个用户的详细信息也将在Ansible中定义，所以我们不想混淆两个不同的用户。
- en: 'The task that uses these variables, found in `roles/stack-config/tasks/main.yml`,
    should look like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些变量的任务应该在`roles/stack-config/tasks/main.yml`中，看起来像这样：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see, we are not adding a key to the user this time as we don't want
    to be logging in to the user account to start manipulating files and other actions.
    This should all be done within WordPress itself or by using Ansible.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这次我们没有向用户添加密钥，因为我们不想登录到用户帐户来开始操作文件和其他操作。这应该全部在WordPress内部完成，或者通过使用Ansible完成。
- en: NGINX configuration
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NGINX配置
- en: 'We are going to be using several template files for our NGINX configuration.
    The first template is called `roles/stack-config/templates/nginx-nginx.conf.j2`,
    and it will replace the main NGINX configuration deployed by the package installation:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用几个模板文件来配置我们的NGINX。第一个模板名为`roles/stack-config/templates/nginx-nginx.conf.j2`，它将替换软件包安装部署的主要NGINX配置：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The content of the file itself is pretty much the same as the initial file,
    except that we are updating `worker_processes` so that it uses the number of processors
    detected by Ansible when the `setup` module runs, rather than a hardcoded value.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 文件本身的内容基本上与初始文件相同，只是我们正在更新`worker_processes`，以便它使用Ansible运行`setup`模块时检测到的处理器数量，而不是硬编码的值。
- en: 'The task to deploy the configuration file is as you would expect and it should
    be placed in `roles/stack-config/tasks/main.yml`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 部署配置文件的任务就像你期望的那样，应该放在`roles/stack-config/tasks/main.yml`中：
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'As you can see, we are notifying the `restart nginx` handler, which is stored
    in the following `roles/stack-config/handlers/main.yml`  file:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们正在通知`restart nginx`处理程序，它存储在以下`roles/stack-config/handlers/main.yml`文件中：
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next up, we have the default site template, `roles/stack-config/templates/nginx-confd-default.conf.j2`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有默认站点模板，`roles/stack-config/templates/nginx-confd-default.conf.j2`：
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: To help identify where the template files will be placed on the target host,
    I am naming them so that the full path is in the filename. In this case, the filename
    is `nginx-confd-default.conf.j2` and it will be deployed to `/etc/nginx/conf.d/..`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助识别模板文件将放置在目标主机上的位置，我将它们命名，以便文件名中包含完整路径。在这种情况下，文件名是`nginx-confd-default.conf.j2`，它将部署到`/etc/nginx/conf.d/..`。
- en: 'The next two templates we are deploying are going into a folder that doesn''t
    exist. So, we first need to create the destination folder. To do this, we need
    to add the following to `roles/stack-config/tasks/main.yml`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要部署的下两个模板将进入一个不存在的文件夹。因此，我们首先需要创建目标文件夹。为此，我们需要将以下内容添加到`roles/stack-config/tasks/main.yml`中：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, the following command will copy the files to the `global` folder:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，以下命令将文件复制到`global`文件夹中：
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'As we are not making any replacements in the `nginx-global-restrictions.conf`
    file, we are using the `copy` module rather than `template` here; the file is
    stored in `roles/stack-config/files/` and has the following content:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在`nginx-global-restrictions.conf`文件中没有进行任何替换，所以我们在这里使用`copy`模块而不是`template`；文件存储在`roles/stack-config/files/`中，内容如下：
- en: '[PRE25]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As we are setting `php.upstream` as a variable, we are using the `template`
    module to make sure that our configuration contains the correct value, the file
    `roles/stack-config/templates/nginx-global-wordpress_shared.conf.j2` contains
    the following:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将`php.upstream`设置为变量，我们使用`template`模块来确保我们的配置包含正确的值，文件`roles/stack-config/templates/nginx-global-wordpress_shared.conf.j2`包含以下内容：
- en: '[PRE26]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The final part of the NGINX configuration is to copy the main configuration
    for the WordPress site. The task in `roles/stack-config/tasks/main.yml` looks
    as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: NGINX配置的最后一部分是复制WordPress站点的主配置。`roles/stack-config/tasks/main.yml`中的任务如下所示：
- en: '[PRE27]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'As we are setting a few variables, such as the path and domain name, we have
    the following template file:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们设置了一些变量，比如路径和域名，我们有以下模板文件：
- en: '[PRE28]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: As you can see, we are using a few variables we haven't defined yet, `php.ip`
    and `php.port`. We are going to look at configuring PHP-FPM next.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们正在使用一些尚未定义的变量，`php.ip`和`php.port`。我们将在接下来看如何配置PHP-FPM。
- en: PHP and PHP-FPM configuration
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP和PHP-FPM配置
- en: 'As we saw in the last section, there are a few variables defined for PHP in
    `roles/stack-config/defaults/main.yml`, and these are:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中看到的，`roles/stack-config/defaults/main.yml`中为PHP定义了一些变量，它们是：
- en: '[PRE29]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The first configuration task is to deploy the PHP-FPM configuration; this is
    what the template looks like:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个配置任务是部署PHP-FPM配置；模板如下所示：
- en: '[PRE30]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: As you can see, we have a few replacements in this file. Starting at the top
    between the square brackets, we are defining the PHP-FPM pool name; we are using
    the content of the `wordpress_system.user` for this. Next up, we have the user
    and group we want our pool to run under; here, we are using `wordpress_system.user`
    and `wordpress_system.group`. Finally, we are setting the IP address and port
    we want our PHP-FPM pool to listen on by using the `php.ip` and `php.port` variables.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们在这个文件中进行了一些替换。从方括号之间开始，我们定义了PHP-FPM池名称；我们使用`wordpress_system.user`的内容。接下来，我们有我们希望池运行的用户和组；在这里，我们使用`wordpress_system.user`和`wordpress_system.group`。最后，我们通过使用`php.ip`和`php.port`变量来设置我们希望PHP-FPM池监听的IP地址和端口。
- en: 'The task in `roles/stack-config/tasks/main.yml` to deploy the template looks
    as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 部署模板的`roles/stack-config/tasks/main.yml`任务如下所示：
- en: '[PRE31]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The handler to restart PHP-FPM in **`roles/stack-config/handlers/main.yml`**
    is just:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在**`roles/stack-config/handlers/main.yml`**中重新启动PHP-FPM的处理程序只是：
- en: '[PRE32]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The next task in `roles/stack-config/tasks/main.yml` uses the `lineinfile`
    module:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`roles/stack-config/tasks/main.yml`中的下一个任务使用`lineinfile`模块：'
- en: '[PRE33]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: What we are doing here is taking the content of `php.ini` and looping through
    it by looking for the value defined by the `regexp` key. Once we find the value,
    we are replacing it with the content of the `replace` key. If there are changes
    to the file, we are making a `backup` first, just in case. Also, we are using
    `backrefs` to ensure that if there is no matching regex in the file, then it will
    be left unchanged; if we didn't use them, the `restart php-fpm` handler would
    be called every time the playbook runs, and we do not want PHP-FPM to be restarted
    if there is no reason to.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做的是获取`php.ini`的内容，并通过查找`regexp`键来循环遍历它。一旦找到值，我们就用`replace`键的内容替换它。如果文件有更改，我们首先进行`backup`，以防万一。此外，我们使用`backrefs`来确保如果文件中没有匹配的正则表达式，它将保持不变；如果我们不使用它们，那么每次运行playbook时都会调用`restart
    php-fpm`处理程序，而我们不希望在没有理由的情况下重新启动PHP-FPM。
- en: Starting NGINX and PHP-FPM
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动NGINX和PHP-FPM
- en: 'Now that we have our stack installed and configured, we need to start the two
    services rather than waiting until the end of the playbook run. If we don''t do
    this now, our upcoming role to install WordPress will fail. The two tasks in `roles/stack-config/tasks/main.yml`
    are:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装和配置了我们的堆栈，我们需要启动两个服务，而不是等到playbook运行结束。如果现在不这样做，我们即将安装WordPress的角色将失败。`roles/stack-config/tasks/main.yml`中的两个任务是：
- en: '[PRE34]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: MariaDB Configuration
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MariaDB配置
- en: The MariaDB configuration is going to closely match that of the last chapter,
    minus a few of the steps, so I am not going to go into too much detail.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB配置将与上一章的配置非常相似，减去一些步骤，所以我不打算详细介绍。
- en: 'The default variables for this part of the role in `roles/stack-config/defaults/main.yml`
    are:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 该角色在`roles/stack-config/defaults/main.yml`中的默认变量为：
- en: '[PRE35]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'As you can see, we are now using a nested variable, and we have removed root
    access on the host wildcard, the `%`, as the first part of the task in `roles/stack-config/tasks/main.yml`
    binds MariaDB to the localhost:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们现在正在使用嵌套变量，并且已经在`roles/stack-config/tasks/main.yml`的任务的第一部分中删除了主机通配符`%`的根访问权限，将MariaDB绑定到本地主机：
- en: '[PRE36]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'From there, we then start MariaDB, set the root password, configure the `~/.my.cnf`
    file, and then remove the anonymous user and test database:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里，我们开始MariaDB，设置根密码，配置`~/.my.cnf`文件，然后删除匿名用户和测试数据库：
- en: '[PRE37]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The template used for the `.my.cnf` file, which can be found in `roles/stack-config/templates/my.cnf.j2`,
    now looks as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`.my.cnf`文件的模板，可以在`roles/stack-config/templates/my.cnf.j2`中找到，现在如下所示：'
- en: '[PRE38]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This means that we will not need to pass the root username and password with
    each database-related task from where we copied the `.my.cnf` file.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们将不需要在每个与数据库相关的任务中传递根用户名和密码，从我们复制`.my.cnf`文件的地方开始。
- en: SELinux configuration
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SELinux配置
- en: 'The final task of the role is to set HTTP in SELinux to be permissive; to do
    this, we have the following variable in `roles/stack-config/defaults/main.yml`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 角色的最后一个任务是将SELinux中的HTTP设置为宽松模式；为了做到这一点，我们在`roles/stack-config/defaults/main.yml`中有以下变量：
- en: '[PRE39]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The task in `roles/stack-config/tasks/main.yml` has a condition that runs if
    `selinux.http_permissive` equals `true`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`roles/stack-config/tasks/main.yml`中的任务有一个条件，如果`selinux.http_permissive`等于`true`，则运行：'
- en: '[PRE40]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: We will be looking more at SELinux in a later chapter; for now, we are just
    allowing all HTTP requests.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节更多地关注SELinux；目前，我们只允许所有的HTTP请求。
- en: WordPress installation tasks
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress安装任务
- en: Now that we have the roles that prepare our target Vagrant box completed, we
    can proceed with the actual WordPress installation; this will be split into a
    few different parts, starting with downloading `wp_cli` and setting up the database.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了准备目标Vagrant盒子的角色，我们可以继续进行实际的WordPress安装；这将分为几个不同的部分，首先是下载`wp_cli`和设置数据库。
- en: 'Before we progress, we should create the role:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们应该创建角色：
- en: '[PRE41]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: WordPress CLI installation
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress CLI安装
- en: '**WordPress CLI** (**WP-CLI**) is a command-line tool used to administer your
    WordPress installation; we will be using it throughout the role, so the first
    thing our role should do is download it. To do this, we need to download the following
    variables in `roles/wordpress/defaults/main.yml`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**WordPress CLI**（**WP-CLI**）是一个用于管理WordPress安装的命令行工具；我们将在整个角色中使用它，所以我们角色应该首先下载它。为了做到这一点，我们需要在`roles/wordpress/defaults/main.yml`中下载以下变量：'
- en: '[PRE42]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'As you probably have gathered from the two variables, we are going to be downloading
    the file from `wp_cli.download` and copying it to `wp_cli.path`. The task in `roles/wordpress/tasks/main.yml`
    to do this looks like the following:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能从这两个变量中了解到的，我们将从`wp_cli.download`下载文件，并将其复制到`wp_cli.path`。在`roles/wordpress/tasks/main.yml`中执行此操作的任务如下：
- en: '[PRE43]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: As you can see, we are downloading the `.phar` file, moving it, and then setting
    permissions so that it can be executed by anyone logged in to the server—this
    is important as we will be running a lot of the installation commands as the `wordpress`
    user.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们正在下载`.phar`文件，移动它，然后设置权限，以便任何登录到服务器的人都可以执行它——这很重要，因为我们将以`wordpress`用户的身份运行许多安装命令。
- en: Creating the WordPress database
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建WordPress数据库
- en: 'The next part of the role creates the database our WordPress installation will
    use; as per the other tasks in this chapter, it uses a nested variable, which
    can be found in `roles/wordpress/defaults/main.yml`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 角色的下一部分是创建我们的WordPress安装将使用的数据库；与本章其他任务一样，它使用了一个可以在`roles/wordpress/defaults/main.yml`中找到的嵌套变量：
- en: '[PRE44]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The tasks in `roles/wordpress/tasks/main.yml` to create the database and user
    look like the following:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在`roles/wordpress/tasks/main.yml`中创建数据库和用户的任务如下：
- en: '[PRE45]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Notice how we are using the `mariadb.hosts` variable from the previous role.
    Now that we have the database created, we can make a start on downloading and
    installing WordPress.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们正在使用前一个角色中的`mariadb.hosts`变量。现在我们已经创建了数据库，我们可以开始下载和安装WordPress了。
- en: Downloading, configuring, and installing WordPress
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载、配置和安装WordPress
- en: 'Now that we have everything in place to install WordPress, we can make a start,
    first by setting some default variables in `roles/wordpress/defaults/main.yml`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好安装WordPress，我们可以开始了，首先在`roles/wordpress/defaults/main.yml`中设置一些默认变量：
- en: '[PRE46]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now that we have our variables, we can start our download if we need to:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了变量，如果需要，我们可以开始下载：
- en: '[PRE47]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: As you can see, the first task uses the `stat` module to check for the presence
    of an `index.php` in our system user's home directory, which is also the webroot.
    The second task uses the `shell` module to issue the `wp core download` command.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，第一个任务使用`stat`模块来检查系统用户的主目录（也是webroot）中是否存在`index.php`。第二个任务使用`shell`模块来执行`wp
    core download`命令。
- en: 'There are a few arguments we should work through before moving on to the next
    task. These are:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一个任务之前，我们应该处理一些参数。这些是：
- en: '`args` and `chdir`: You can pass additional arguments to the `shell` module
    using `args`. Here, we are passing `chdir`, which instructs Ansible to change
    to the directory we specify before running the `shell` command we provide.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args`和`chdir`：您可以使用`args`向`shell`模块传递额外的参数。在这里，我们传递`chdir`，它指示Ansible在运行我们提供的`shell`命令之前切换到我们指定的目录。'
- en: '`become_user`: The user we want to run the command as. If we do not use this,
    the command will run as the root user.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`become_user`：我们希望以哪个用户的身份运行命令。如果我们不使用这个，命令将以root用户的身份运行。'
- en: '`become`: This instructs Ansible to execute the task as the defined user.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`become`：这指示Ansible以定义的用户身份执行任务。'
- en: 'The next task in the playbook sets the correct permissions on the user''s home
    directory:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 剧本中的下一个任务设置了用户主目录的正确权限：
- en: '[PRE48]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now that WordPress is downloaded, we can start the installation. First, we
    need to check whether this has already been done:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在WordPress已经下载，我们可以开始安装。首先，我们需要检查是否已经完成了这一步：
- en: '[PRE49]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'If there is no `wp-config.php` file, then the following task will be executed:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有`wp-config.php`文件，那么将执行以下任务：
- en: '[PRE50]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Now that we have our `wp-config.php` file created, with the database credentials
    in place, we can install WordPress. First, we need to check whether WordPress
    has already been installed:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了`wp-config.php`文件，并且数据库凭据已经就位，我们可以安装WordPress了。首先，我们需要检查WordPress是否已经安装：
- en: '[PRE51]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'As you can see from the presence of the `ignore_errors` option, if WordPress
    is not installed, this command will give us an error. We are then using this to
    our advantage when registering the results, as you can see from the following
    task:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你从`ignore_errors`选项的存在可以看出，如果WordPress未安装，这个命令将给我们一个错误。然后我们利用这一点来注册结果，正如你从下面的任务中可以看到的：
- en: '[PRE52]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Now we have a basic WordPress site installed, we can progress with installing
    the plugins and theme files.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了一个基本的WordPress网站，我们可以继续安装插件和主题文件。
- en: WordPress plugins and theme installation
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WordPress插件和主题安装
- en: The last part of our WordPress installation is downloading and installing the
    plugins and theme files we defined in the `wordpress.plugins` and `wordpress.theme`
    variables.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们WordPress安装的最后一部分是下载和安装我们在`wordpress.plugins`和`wordpress.theme`变量中定义的插件和主题文件。
- en: 'Let''s start with the tasks that install the plugins, so we don''t end up rerunning
    the task that installs the plugins. When we need to, we will be building a little
    logic into the tasks. First of all, we run a task to see if all of the plugins
    are already installed:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从安装插件的任务开始，这样我们就不会重新运行安装插件的任务。当需要时，我们将在任务中构建一些逻辑。首先，我们运行一个任务来查看所有插件是否已经安装：
- en: '[PRE53]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'If the plugins are not installed, then this task should fail, which is why
    we have the `ignore_errors` in there. As you can see, we are registering the results
    of the entire task, because if you remember we are installing several plugins,
    as `wp_plugin_installed`. The next two tasks take the results of `wp_plugin_installed`
    and use the `setfact` module to set a fact:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果插件未安装，则此任务应该失败，这就是为什么我们在其中使用`ignore_errors`的原因。正如你所看到的，我们正在注册整个任务的结果，因为如果你记得，我们正在安装几个插件，作为`wp_plugin_installed`。接下来的两个任务获取`wp_plugin_installed`的结果，并使用`setfact`模块设置一个事实：
- en: '[PRE54]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'As you can see, we are setting `wp_theme_installed_skip` to be `true` or `false`:
    if the fact is set to `false`, then the next task will loop through installing
    the plugins:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们将`wp_theme_installed_skip`设置为`true`或`false`：如果事实设置为`false`，那么接下来的任务将循环安装插件：
- en: '[PRE55]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'If we add another plugin to the list but leave the others in place, it will
    show an error, causing the plugin to be installed. We are going to be using this
    same logic to figure out whether the theme file we have defined as `wordpress.theme`
    needs to be installed:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将另一个插件添加到列表中，但保留其他插件不变，它将显示一个错误，导致插件被安装。我们将使用相同的逻辑来判断我们是否需要安装我们定义为`wordpress.theme`的主题文件：
- en: '[PRE56]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Now that we have the plugins and theme installed, we can have a go at running
    our playbook.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了插件和主题，可以尝试运行我们的playbook了。
- en: Running the WordPress playbook
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行WordPress playbook
- en: 'To run the playbook and install WordPress, we need a few things, starting with
    the inventory file called `production`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行playbook并安装WordPress，我们需要一些东西，首先是名为`production`的清单文件：
- en: '[PRE57]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'As you can see, it takes into account the updated IP address of the Vagrant
    box we defined at the start of the chapter. Also, we need the playbook itself;
    `site.yml` should look as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，它考虑了我们在本章开头定义的Vagrant box的更新后IP地址。另外，我们需要playbook本身；`site.yml`应该如下所示：
- en: '[PRE58]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now, start the Vagrant box by running one of the following two commands:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过运行以下两个命令之一来启动Vagrant box：
- en: '[PRE59]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Once your Vagrant box is up and running, we can start the playbook run with
    this command:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的Vagrant box启动并运行，我们可以使用以下命令开始playbook运行：
- en: '[PRE60]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'When the playbook is first executed, you should see something like the following
    results:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当首次执行playbook时，你应该看到类似以下结果的内容：
- en: '[PRE61]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: As you can see during the playbook, we have fatal errors for the check to see
    whether we need to install WordPress, and also for the plugin and theme checks,
    as we have accounted for these in the tasks the playbook ran as expected and installed
    the software stack, WordPress, plugins, and theme.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在playbook中所看到的，我们对检查是否需要安装WordPress以及插件和主题检查都有致命错误，因为我们在任务中已经考虑到了这些情况，playbook正常运行并安装了软件堆栈、WordPress、插件和主题。
- en: 'Rerunning the playbook gives us the following results for the sections we errored
    previously:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行playbook会给我们之前出错的部分带来以下结果：
- en: '[PRE62]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Now that WordPress is installed, we should be able to access in a browser by
    going to `http://192.168.50.5.nip.io/`. As you can see here, the theme we defined
    is running rather than the WordPress default theme:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在WordPress已经安装，我们应该能够通过浏览器访问`http://192.168.50.5.nip.io/`。正如你在这里所看到的，我们定义的主题正在运行，而不是WordPress默认主题：
- en: '![](assets/ec278635-7e4c-4990-8332-6cc6f14e3c40.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ec278635-7e4c-4990-8332-6cc6f14e3c40.png)'
- en: 'Also, if you go to `http://192.168.50.5.nip.io/wp-admin/`, you should be able
    to log in to WordPress using the username and password we defined:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，如果你去`http://192.168.50.5.nip.io/wp-admin/`，你应该能够使用我们定义的用户名和密码登录WordPress：
- en: 'Username: `ansible`'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名：`ansible`
- en: 'Password: `password`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码：`密码`
- en: 'Once logged in, you should see a few messages about the plugins we installed
    during the playbook run needing to be configured:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，你应该会看到一些关于我们在playbook运行期间安装的插件需要配置的消息：
- en: '![](assets/7cc6369b-51f5-4525-ad38-0eada8f26699.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7cc6369b-51f5-4525-ad38-0eada8f26699.png)'
- en: 'Feel free to have a play with the WordPress installation; also, you can remove
    the Vagrant box by running:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 随意尝试使用WordPress安装；另外，你可以通过运行以下命令来删除Vagrant box：
- en: '[PRE63]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Then bring up a fresh copy and redeploy it using the commands at that start
    of this section.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 然后启动一个新的副本，并使用本节开头的命令重新部署它。
- en: Summary
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have reused a lot of the same principles we covered in the
    previous chapter and moved on to deploying a full application. What is good about
    this is that the process is both repeatable and just a single command.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经重复使用了我们在上一章中介绍的许多原则，并开始部署一个完整的应用程序。好处在于这个过程既可重复又只需一个命令。
- en: So far, we have been targeting a CentOS 7 Vagrant box. If we ran our playbook
    against an Ubuntu Vagrant box, the playbook would give an error. In the next chapter,
    we will look at how we can target multiple operating systems using the same playbook.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在针对CentOS 7 Vagrant box。如果我们对Ubuntu Vagrant box运行我们的playbook，playbook将会出错。在下一章中，我们将看看如何使用相同的playbook来针对多个操作系统。
- en: Questions
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which fact gathered during `setup` module execution can we use to tell our playbook
    how many processors our target host has?
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`setup`模块执行期间收集的哪个事实可以告诉我们的playbook目标主机有多少处理器？
- en: 'True or false: Using `backref` in the `lineinfile` module makes sure that no
    changes are applied if the regular expression is not matched.'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`lineinfile`模块中的`backref`是否确保如果正则表达式不匹配则不会应用任何更改。
- en: Explain why we would want to build the logic into the playbook to check whether
    WordPress is already installed.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释为什么我们希望在playbook中构建逻辑来检查WordPress是否已经安装。
- en: Which module do we use to define variables as part of a playbook run?
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用哪个模块来定义作为playbook运行一部分的变量？
- en: Which argument do we pass to the `shell` module to have the command we want
    to run executed in a directory of our choosing?
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们传递给`shell`模块的哪个参数可以让我们想要运行的命令在我们选择的目录中执行？
- en: 'True or false: Setting MariaDB to bind to `127.0.0.1` will allow us to access
    it externally.'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：将MariaDB设置为绑定到`127.0.0.1`将允许我们从外部访问它。
- en: Change the theme of your WordPress site to one of your choice; see [https://wordpress.org/themes/](https://wordpress.org/themes/)
    for some options.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的WordPress网站主题更改为您选择的主题；请参阅[https://wordpress.org/themes/](https://wordpress.org/themes/)以获取一些选项。
- en: Further reading
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find out more information on the technologies we have covered in this
    chapter at the following links:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接找到有关本章涵盖的技术的更多信息：
- en: '**NGINX**: [http://nginx.org/](http://nginx.org/)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NGINX**: [http://nginx.org/](http://nginx.org/)'
- en: '**WordPress**: [https://wordpress.org/](https://wordpress.org/)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WordPress**: [https://wordpress.org/](https://wordpress.org/)'
- en: '**WP-CLI**: [http://wp-cli.org](http://wp-cli.org)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WP-CLI**: [http://wp-cli.org](http://wp-cli.org)'
- en: '**CMS statistics from BuiltWith**: [https://trends.builtwith.com/cms](https://trends.builtwith.com/cms)'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BuiltWith的CMS统计数据**：[https://trends.builtwith.com/cms](https://trends.builtwith.com/cms)'
- en: '**The WordPress NGINX Codex**: [https://codex.wordpress.org/Nginx](https://codex.wordpress.org/Nginx)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WordPress NGINX Codex**: [https://codex.wordpress.org/Nginx](https://codex.wordpress.org/Nginx)'
- en: '**The Sydney WordPress theme**: [https://en-gb.wordpress.org/themes/sydney/](https://en-gb.wordpress.org/themes/sydney/)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**悉尼WordPress主题**：[https://en-gb.wordpress.org/themes/sydney/](https://en-gb.wordpress.org/themes/sydney/)'
- en: 'The project pages for the plugins we installed can be found at:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们安装的插件的项目页面可以在以下位置找到：
- en: '**Jetpack**: [https://en-gb.wordpress.org/plugins/jetpack/](https://en-gb.wordpress.org/plugins/jetpack/)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jetpack**: [https://en-gb.wordpress.org/plugins/jetpack/](https://en-gb.wordpress.org/plugins/jetpack/)'
- en: '**WP Super Cache**: [https://en-gb.wordpress.org/plugins/wp-super-cache/](https://en-gb.wordpress.org/plugins/wp-super-cache/)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WP Super Cache**: [https://en-gb.wordpress.org/plugins/wp-super-cache/](https://en-gb.wordpress.org/plugins/wp-super-cache/)'
- en: '**Yoast SEO**: [https://en-gb.wordpress.org/plugins/wordpress-seo/](https://en-gb.wordpress.org/plugins/wordpress-seo/)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Yoast SEO**: [https://en-gb.wordpress.org/plugins/wordpress-seo/](https://en-gb.wordpress.org/plugins/wordpress-seo/)'
- en: '**Wordfence**: [https://en-gb.wordpress.org/plugins/wordfence/](https://en-gb.wordpress.org/plugins/wordfence/)'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Wordfence**: [https://en-gb.wordpress.org/plugins/wordfence/](https://en-gb.wordpress.org/plugins/wordfence/)'
- en: '**NGINX Helper**: [https://wordpress.org/plugins/nginx-helper/](https://wordpress.org/plugins/nginx-helper/)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NGINX Helper**: [https://wordpress.org/plugins/nginx-helper/](https://wordpress.org/plugins/nginx-helper/)'
