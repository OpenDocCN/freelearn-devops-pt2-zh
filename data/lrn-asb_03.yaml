- en: The Ansible Commands
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible命令
- en: Before we move on to writing and executing more advanced playbooks, we are going
    to take a look at the inbuilt Ansible commands. Here, we will cover the usage
    of the set of commands that makes up Ansible. Towards the end of the chapter,
    we will also install a few third-party tools, one being an inventory grapher,
    which will let us visualize our hosts, and the second allows you to record your
    playbook runs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续编写和执行更高级的playbook之前，我们将看一下内置的Ansible命令。在这里，我们将介绍组成Ansible的一组命令的用法。在本章末尾，我们还将安装一些第三方工具，其中一个是清单图形化工具，它可以让我们可视化我们的主机，另一个允许你记录你的playbook运行。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: 'Inbuilt commands:'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置命令：
- en: '`ansible`'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible`'
- en: '`ansible-config`'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-config`'
- en: '`ansible-console`'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-console`'
- en: '`ansible-doc`'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-doc`'
- en: '`ansible-inventory`'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-inventory`'
- en: '`ansible-vault`'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-vault`'
- en: 'Third-party commands:'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方命令：
- en: '`ansible-inventory-grapher`'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-inventory-grapher`'
- en: '`ara`'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ara`'
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We will be reusing the Vagrant box we launched in the previous chapter; if you
    have not been following along, please refer to the previous chapter for instructions
    on how to install both Ansible and Vagrant. There are a few playbook examples
    throughout this chapter; you can find the complete examples at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter03](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter03).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重复使用上一章中启动的Vagrant box；如果你没有跟着做，请参考上一章关于如何安装Ansible和Vagrant的说明。本章中有一些playbook示例；你可以在[https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter03](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter03)找到完整的示例。
- en: Inbuilt commands
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内置命令
- en: 'When we installed Ansible, there were several different commands installed.
    These were:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们安装Ansible时，安装了几个不同的命令。这些是：
- en: '`ansible`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible`'
- en: '`ansible-config`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-config`'
- en: '`ansible-console`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-console`'
- en: '`ansible-doc`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-doc`'
- en: '`ansible-inventory`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-inventory`'
- en: '`ansible-vault`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-vault`'
- en: We will be covering a few of the commands, such as `ansible-galaxy`, `ansible-playbook`,
    and `ansible-pull`, in later chapters, so I will not go into any detail about
    those commands in this chapter. Let's make a start at the top of the list with
    a command we have already used.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续章节中，我们将涵盖一些命令，比如`ansible-galaxy`、`ansible-playbook`和`ansible-pull`，所以在本章中我不会详细介绍这些命令。让我们从列表顶部开始，使用一个我们已经使用过的命令。
- en: Ansible
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible
- en: Now, you would have thought that `ansible` is going to be the most common command
    we will be using throughout this book, but it isn't.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能会认为`ansible`是我们在整本书中将经常使用的最常见的命令，但事实并非如此。
- en: 'The `ansible` command is really only ever used for running ad hoc commands
    again in a single or collection of hosts. In the last chapter, we created a host
    inventory file that targeted a single local virtual machine. For this chapter,
    let''s take a look at targeting four different hosts running in DigitalOcean;
    my hosts file looks as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`ansible`命令实际上只用于针对单个或一组主机运行临时命令。在上一章中，我们创建了一个目标为单个本地虚拟机的主机清单文件。在本章中，让我们来看看如何针对在DigitalOcean上运行的四个不同主机进行操作；我的主机文件如下所示：'
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you can see, I have four hosts, `ansible01` > `ansible04`. My first two hosts
    are in a group called `london` and my second two are in a group called `nyc`.
    I have then taken these two groups and created one containing them called `digitalocean`,
    and I have then used this group to apply some basic configuration based on the
    hosts I have launched.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我有四个主机，`ansible01` > `ansible04`。我的前两个主机在一个名为`london`的组中，我的后两个主机在一个名为`nyc`的组中。然后我将这两个组合并创建了一个名为`digitalocean`的组，并且我使用这个组来应用一些基本配置，基于我启动的主机。
- en: 'Using the `ping` module, I can check connectivity to the hosts by running the
    following commands:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ping`模块，我可以通过运行以下命令检查与主机的连接：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see from these results, all four hosts return `pong`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些结果中可以看出，所有四个主机都返回了`pong`：
- en: '![](assets/eacb9b7b-708c-4dba-b865-95e45fd84d8f.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eacb9b7b-708c-4dba-b865-95e45fd84d8f.png)'
- en: 'I can also target all four hosts at once by using the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我也可以通过以下方式一次性针对所有四个主机进行操作：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](assets/1585a18f-2fa3-421b-92aa-75c03d3a3af2.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1585a18f-2fa3-421b-92aa-75c03d3a3af2.png)'
- en: 'Now that we have our host accessible through Ansible, we can target them with
    some ad hoc commands; let''s start with something basic:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过Ansible访问我们的主机，可以使用一些临时命令来操作它们；让我们从一些基本的开始：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This command will connect to the `london` hosts and run the `ping -c 3 google.com`  command;
    this will ping `google.com` from the hosts and return the results:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将连接到`london`主机并运行`ping -c 3 google.com`命令；这将从主机ping `google.com`并返回结果：
- en: '![](assets/84b9aeb6-8592-4fb9-b7b7-969f9bfcd970.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/84b9aeb6-8592-4fb9-b7b7-969f9bfcd970.png)'
- en: 'We can also run a single module using the `ansible` command; we did this in
    the previous chapter using the `setup` module. However, a better example would
    be updating all of the installed packages:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用`ansible`命令运行单个模块；我们在上一章中使用`setup`模块做过这个。不过，一个更好的例子是更新所有已安装的软件包：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the previous example, we are using the `yum` module to update all of the
    installed packages in the `nyc` group:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个示例中，我们使用`yum`模块来更新`nyc`组中所有已安装的软件包：
- en: '![](assets/acddf1cd-05d0-4233-aa9c-9fb9fb3f38a7.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/acddf1cd-05d0-4233-aa9c-9fb9fb3f38a7.png)'
- en: 'As you can see from the screenshot, the output when running Ansible is quite
    verbose, and it has feedback to tell us exactly what it has done during the ad
    hoc execution. Let''s run the command again against `all` of our hosts, but this
    time just for a single package, say `kpartx`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从屏幕截图中可以看出，运行Ansible时的输出非常详细，并且有反馈告诉我们在临时执行期间它做了什么。让我们再次针对我们的所有主机运行命令，但这次只针对一个单独的软件包，比如`kpartx`：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The Terminal output gives you a better idea of the information being returned
    by each host as the command is executed on it:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 终端输出可以让你更好地了解每个主机在执行命令时返回的信息：
- en: '![](assets/73ef6999-a100-4841-9e37-adf188407f21.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/73ef6999-a100-4841-9e37-adf188407f21.png)'
- en: As you can see, the two hosts in the `nyc` group, while returning a `SUCCESS`
    status, are showing no changes; the two hosts in the `london` group again show
    a `SUCCESS` status but show changes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`nyc`组中的两个主机虽然返回了`SUCCESS`状态，但没有显示任何更改；`london`组中的两个主机再次显示了`SUCCESS`状态，但显示了更改。
- en: So why would you want to do this and what is the difference between the two
    commands we ran?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 那么为什么要这样做，以及我们运行的两个命令之间有什么区别呢？
- en: 'First of all, let''s take a look at two of the commands:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看两个命令：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: While it appears that the first command isn't running a module, it is. The default
    module for the `ansible` command is called `raw` and it just runs raw commands
    on each of the targeted hosts. The `-a` part of the command is passing arguments
    to the module. The `raw` module just happens to accept raw commands, which is
    exactly what we are doing with the second command.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然第一个命令似乎没有运行模块，但实际上是有的。`ansible`命令的默认模块称为`raw`，它只是在每个目标主机上运行原始命令。命令的`-a`部分是将参数传递给模块。`raw`模块碰巧接受原始命令，这正是我们在第二个命令中所做的。
- en: You may have noticed that the syntax is slightly different to when we pass commands
    to the `ansible` command, and when using it as part of a YAML playbook. All we
    are doing here is passing the key-value pairs directly to the module.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，语法与我们向`ansible`命令传递命令以及在YAML playbook中使用时略有不同。我们在这里所做的就是直接向模块传递键值对。
- en: 'So why would you want to use Ansible like this? Well, it''s great for running
    commands directly against non-Ansible managed hosts in an extremely controlled
    way. Ansible just SSHs in, runs the command, and lets you know the results. Just
    be careful, as it is very easy to get overconfident and run something like the
    following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 那么为什么要这样使用Ansible呢？嗯，它非常适合以极其受控的方式直接针对非Ansible管理的主机运行命令。Ansible只是通过SSH连接，运行命令，并告诉您结果。只是要小心，因为很容易变得过于自信，运行以下命令：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If Ansible has permissions to execute the command, then it will do. Running
    the previous command will reboot all the servers in the host inventory file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Ansible有权限执行该命令，那么它会执行。运行上一个命令将重新启动主机清单文件中的所有服务器：
- en: '![](assets/11b8a321-1a1b-4733-902d-8b85bc55bddb.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/11b8a321-1a1b-4733-902d-8b85bc55bddb.png)'
- en: 'Note that all of the hosts have a status of `UNREACHABLE` because the `reboot`
    command kicked our SSH session before the `SUCCESS` status could be returned.
    You can, however, see that each of the hosts has been rebooted by running the
    `uptime` command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有主机的状态都是`UNREACHABLE`，因为`reboot`命令在`SUCCESS`状态返回之前终止了我们的SSH会话。但是，您可以看到每个主机都已通过运行`uptime`命令进行了重启：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](assets/cc1a54f6-64e2-4207-9110-3d3aeeb56a4e.png)As mentioned, be extremely
    careful when using Ansible to manage hosts using ad hoc commands.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/cc1a54f6-64e2-4207-9110-3d3aeeb56a4e.png)正如前面提到的，使用Ansible管理主机时要非常小心使用临时命令。'
- en: The ansible-config command
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ansible-config命令
- en: 'The `ansible-config` command is used to manage Ansible configuration files.
    To be honest, Ansible ships with some quite sensible defaults, so there is not
    much to configure outside of these. You can view the current configuration by
    running:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`ansible-config`命令用于管理Ansible配置文件。老实说，Ansible默认提供了一些相当合理的默认值，因此在这些默认值之外没有太多需要配置的地方。您可以通过运行以下命令查看当前配置：'
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As you can see from the following output, all of the text in green is the default
    config, and any configuration in orange is a changed value:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从以下输出中所见，所有绿色文本都是默认配置，橙色文本中的任何配置都是更改后的值：
- en: '![](assets/5b0142ec-a78c-47c1-9437-42f4bd1b37f3.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5b0142ec-a78c-47c1-9437-42f4bd1b37f3.png)'
- en: 'Running the following command will list details of every configuration option
    there is within Ansible, including what the option does, its current state, when
    it was introduced, the type, and much more:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令将列出Ansible中的每个配置选项的详细信息，包括选项的功能、当前状态、引入时间、类型等等：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](assets/4a64b4c9-a333-4d20-8c45-3372b7fbbcfc.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4a64b4c9-a333-4d20-8c45-3372b7fbbcfc.png)'
- en: 'If you had a configuration file, say at `~/.ansible.cfg`, then you can load
    it using the `-c` or `--config` flags:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个配置文件，比如在`~/.ansible.cfg`，那么您可以使用`-c`或`--config`标志加载它：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The previous command will show you the configuration file.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令将显示配置文件。
- en: The ansible-console command
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ansible-console命令
- en: 'Ansible has its own built-in console. Personally, it is not something I have
    used much at all. To start the console, we simply need to run one of the following
    commands:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible有自己的内置控制台。就个人而言，我几乎没有使用过。要启动控制台，我们只需要运行以下命令之一：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The first of the three commands targets all of the hosts, while the next two
    just target the named groups:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个命令中的第一个命令针对所有主机，而接下来的两个命令只针对指定的组：
- en: '![](assets/761e4018-c266-461b-898c-31e58648ad36.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/761e4018-c266-461b-898c-31e58648ad36.png)'
- en: 'As you can see from the Terminal output, you are asked for an Ansible Vault
    password. Just enter anything here as we do not have anything protected by Ansible
    Vault; more on that later in the chapter. Once connected, you can see that I am
    connected to the `london` group, in which there are two hosts. From here, you
    can just type a module name, such as `ping`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端输出中可以看出，您被要求输入Ansible Vault密码。在这里只需输入任何内容，因为我们没有任何受Ansible Vault保护的内容；稍后在本章中会详细介绍。连接后，您可以看到我连接到了`london`组，其中有两个主机。从这里，您只需输入模块名称，比如`ping`：
- en: '![](assets/ad3f6376-f3b6-46ab-974f-33c1ed1d63ef.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ad3f6376-f3b6-46ab-974f-33c1ed1d63ef.png)'
- en: 'Or use the `raw` module, by typing `raw uptime`:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用`raw`模块，输入`raw uptime`：
- en: '![](assets/e775b6e1-a1a1-480d-80a5-fb6aeac1d6c2.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e775b6e1-a1a1-480d-80a5-fb6aeac1d6c2.png)'
- en: 'You can also use the same syntax as we did when running the `ansible` command
    to pass key-value pairs, for example, `yum name=kpartx state=latest`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用与运行`ansible`命令时相同的语法来传递键值对，例如`yum name=kpartx state=latest`：
- en: '![](assets/c987bdea-05b6-49ed-880d-f44cc43833c4.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c987bdea-05b6-49ed-880d-f44cc43833c4.png)'
- en: To leave the console, simple type `exit` to return to your regular shell.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要离开控制台，只需输入`exit`即可返回到常规shell。
- en: The ansible-doc command
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ansible-doc命令
- en: 'The `ansible-doc` command has one function—to provide documentation for Ansible.
    It mostly covers the core Ansible modules, which you can find a full list of by
    running the following command:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`ansible-doc`命令有一个功能——为Ansible提供文档。它主要涵盖了核心Ansible模块，您可以通过运行以下命令找到完整的列表：'
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For information on a module, just run the command followed by the module name,
    for example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关模块的信息，只需运行命令，然后是模块名称，例如：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As you can see from the following output, the documentation is quite detailed:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从以下输出所见，文档非常详细：
- en: '![](assets/7979b3a7-74f1-4246-b27c-cb7d353bbb58.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7979b3a7-74f1-4246-b27c-cb7d353bbb58.png)'
- en: 'If you just want to see how to use the example in your playbook, then you can
    use the following command:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想查看如何在playbook中使用示例，那么可以使用以下命令：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will give you an idea of what your playbook should contain, as you can
    see from the following output for the `raw` module:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这将让您了解playbook应该包含的内容，如您从`raw`模块的以下输出所见：
- en: '![](assets/2242373d-80fe-4a41-bdcf-bd411c2462d1.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2242373d-80fe-4a41-bdcf-bd411c2462d1.png)'
- en: The content of the `ansible-doc` command mirrors the documentation that can
    be found at the Ansible website, but it's useful if you want to quickly check
    the syntax needed for a module.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`ansible-doc`命令的内容与可以在Ansible网站上找到的文档相同，但如果您想快速检查模块所需的语法，它就很有用。'
- en: The ansible-inventory command
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ansible-inventory`命令'
- en: 'Using the `ansible-inventory` command provides you with details of your host
    inventory files. It can be useful if you want to get an idea of how your hosts
    are grouped. For example, run the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ansible-inventory`命令可以提供主机清单文件的详细信息。如果您想了解主机是如何分组的，这可能会很有用。例如，运行以下命令：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This gives you a logical overview of your host groups. Here is the hosts inventory
    file we first used with the `ansible` command at the start of the chapter:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这为您提供了对主机组的逻辑概述。以下是我们在本章开头使用`ansible`命令的主机清单文件：
- en: '![](assets/80c4cbb7-993f-4828-b997-d45a718a79f7.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/80c4cbb7-993f-4828-b997-d45a718a79f7.png)'
- en: As you can see, it displays the groups, starting with all, then the main host
    group, followed by the child groups, and then finally the hosts themselves.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它显示了分组，从all开始，然后是主机主分组，然后是子分组，最后是主机本身。
- en: 'If you want to view the configuration for a single host, you can use:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要查看单个主机的配置，可以使用：
- en: '[PRE18]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](assets/a5f935dc-bcae-426c-abf3-dfd9d3e2de5f.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a5f935dc-bcae-426c-abf3-dfd9d3e2de5f.png)'
- en: 'You may have noticed that it displays the configuration information that the
    host inherited from the configuration we set for all of the DigitalOcean hosts.
    You can view all the information on each of your hosts and groups by running:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，它显示了主机从我们为所有DigitalOcean主机设置的配置中继承的配置信息。您可以通过运行以下命令查看每个主机和组的所有信息：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This command is useful if you have a large or complicated hosts inventory file
    and you want information on just a single host, or if you have taken on a host
    inventory and want to get a better idea of how the inventory is structured. We
    will be looking at a third-party tool later in this chapter that gives more display
    options.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个庞大或复杂的主机清单文件，并且只想获取有关单个主机的信息，或者如果您已经接管了主机清单并想更好地了解清单的结构，那么这个命令就很有用。我们将在本章后面看一下一个第三方工具，它提供更多的显示选项。
- en: Ansible Vault
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible Vault
- en: 'In Ansible, it is possible to load in variables from files. We will be looking
    at this in our next chapter in more detail. These files can contain sensitive
    information such as password and API keys. An example of this would be the following:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ansible中，可以从文件中加载变量。我们将在下一章中更详细地讨论这个问题。这些文件可以包含诸如密码和API密钥之类的敏感信息。例如：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As you can see, we have two sensitive bits of information visible as plaintext.
    This is OK while the file is on our local machine, but what if we want to check
    the file into source control to share it with our colleagues? Even if the repository
    is private, we shouldn't be storing this type of information in plaintext.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们有两个敏感的信息片段以明文形式可见。这在文件在我们本地机器上时是可以的，但是如果我们想要将文件检入源代码控制以与同事共享呢？即使存储库是私有的，我们也不应该以明文形式存储这种类型的信息。
- en: Ansible introduced Vault to help solve this very problem. Using Vault, we can
    encrypt the file and then when, Ansible is executed, it can be decrypted in memory
    and the content read.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible引入了Vault来帮助解决这个问题。使用Vault，我们可以加密文件，然后在执行Ansible时，可以在内存中解密文件并读取内容。
- en: 'To encrypt a file, we need to run the following command, providing a password
    that will be used to decrypt the file when prompted:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要加密文件，我们需要运行以下命令，提供一个密码，以便在提示时用于解密文件：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following screenshot shows the output for the preceding command:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了前面命令的输出：
- en: '![](assets/a15d1b91-d18e-4b3d-be6f-5bba0a54eb64.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a15d1b91-d18e-4b3d-be6f-5bba0a54eb64.png)'
- en: 'As you can see from the output, you will be asked to confirm the password.
    Once encrypted, your file will look like the following:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从输出中所见，将要求您确认密码。一旦加密，您的文件将如下所示：
- en: '[PRE22]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As you can see, the details are encoded using text. This makes sure that our
    `secrets.yml` file will still work without any problems with source control. You
    can view the content of a file by running:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，详细信息使用文本进行编码。这确保我们的`secrets.yml`文件在源代码控制中仍然可以正常工作。您可以通过运行以下命令查看文件的内容：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This will ask you for the password and print the content of the file to the
    screen:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这将要求您输入密码并将文件内容打印到屏幕上：
- en: '![](assets/64214a87-fcc9-496e-9a84-701197d71584.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/64214a87-fcc9-496e-9a84-701197d71584.png)'
- en: 'You can decrypt the file on disk by running:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过运行以下命令在磁盘上解密文件：
- en: '[PRE24]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When using this command, please remember not to check the decrypted file into
    your source control system!
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用此命令时，请记住不要将解密后的文件检入您的源代码控制系统！
- en: 'Since Ansible 2.4, it is now possible to encrypt a single variable in a file.
    Let''s add some more variables to our file:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 自Ansible 2.4以来，现在可以加密文件中的单个变量。让我们向我们的文件添加更多变量：
- en: '[PRE25]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: It would be good if we didn't have to keep viewing or decrypting our file to
    check the variable name and overall content of the file.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不必一直查看或解密文件来检查变量名和文件的整体内容，那将是很好的。
- en: 'Let''s encrypt the password content by running the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令来加密密码内容：
- en: '[PRE26]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This will encrypt the `mypassword` string and give it a variable name of `password`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加密`mypassword`字符串并给它一个名为`password`的变量名：
- en: '![](assets/df83ad87-808d-40ed-be7e-40dcedf39f06.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/df83ad87-808d-40ed-be7e-40dcedf39f06.png)'
- en: 'We can then copy and paste the output into our file, repeat the process again
    for the `secret-api-key`, and we end up with the following:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以复制并粘贴输出到我们的文件中，再次为`secret-api-key`重复这个过程，最终得到以下结果：
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'As you can see, that is a lot easier to read and is just as secure as encrypting
    the file as a whole. There is one last thing with Ansible Vault, and that is that
    you can also read the password from a file; for example, I have been encoding
    my Vaults using the password of `password`. Let''s put that in a file and then
    use it to unlock our Vault:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这样阅读起来更容易，而且与整个文件加密一样安全。还有一个关于Ansible Vault的最后一件事，那就是您也可以从文件中读取密码；例如，我一直在使用`password`作为密码对我的Vault进行编码。让我们把它放在一个文件中，然后用它来解锁我们的Vault：
- en: '[PRE28]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'As you can see in the following `playbook.yml` file, we are reading the `secrets.yml`
    file and then outputting the content using the `debug` module:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在以下的`playbook.yml`文件中所见，我们正在读取`secrets.yml`文件，然后使用`debug`模块输出内容：
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Run the `playbook.yml` file using the following command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行`playbook.yml`文件：
- en: '[PRE30]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This results in an error message shown in the Terminal output:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致终端输出中显示的错误消息：
- en: '![](assets/e74b642b-41cb-4d79-9d05-d81bc5372e8f.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e74b642b-41cb-4d79-9d05-d81bc5372e8f.png)'
- en: 'As you can see, it is complaining that it found Vault-encrypted data in our
    file, but we haven''t provided the secret to unlock it. Running the following
    command will read the content of `/tmp/vault-file` and decrypt the data:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它抱怨在我们的文件中发现了Vault加密数据，但我们没有提供解锁它的密码。运行以下命令将读取`/tmp/vault-file`的内容并解密数据：
- en: '[PRE31]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'As you can see from the following playbook run, the output is now as we expect:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 从以下的playbook运行中可以看到，输出现在是我们所期望的：
- en: '![](assets/119c603a-0f96-419a-9163-b71cdbd11b5b.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/119c603a-0f96-419a-9163-b71cdbd11b5b.png)'
- en: 'If you prefer to be prompted for the password, you can also use:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您更喜欢被提示输入密码，您也可以使用：
- en: '[PRE32]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: You can find a copy of `playbook.yml` and `secrets.yml` in the `Chapter03` folder
    of the accompanying repository.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在附带存储库的`Chapter03`文件夹中找到`playbook.yml`和`secrets.yml`的副本。
- en: Third-party commands
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第三方命令
- en: Before we finish up looking at Ansible commands, there are a few different third-party
    commands I would like to cover, the first of which is `ansible-inventory-grapher`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束查看Ansible命令之前，有几个不同的第三方命令我想要介绍，其中第一个是`ansible-inventory-grapher`。
- en: The ansible-inventory-grapher command
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ansible-inventory-grapher命令
- en: 'The `ansible-inventory-grapher` command by Will Thames uses the Graphviz library
    to visualize your host inventories. The first thing we need to do is install Graphviz.
    To install this on macOS using Homebrew, run the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`ansible-inventory-grapher`命令由Will Thames使用Graphviz库来可视化您的主机清单。我们需要做的第一件事就是安装Graphviz。要在macOS上使用Homebrew安装它，运行以下命令：'
- en: '[PRE33]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Or, to install Graphviz on Ubuntu, use:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在Ubuntu上安装Graphviz，使用：
- en: '[PRE34]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Once installed, you can install `ansible-inventory-grapher` using `pip`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以使用`pip`安装`ansible-inventory-grapher`：
- en: '[PRE35]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now that we have everything installed, we can generate the graph using the
    `hosts` file we used earlier in the chapter:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所有内容，可以使用本章早些时候使用的`hosts`文件生成图形：
- en: '[PRE36]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We can run the following command to generate the raw graph file:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以运行以下命令来生成原始图形文件：
- en: '[PRE37]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This will generate the following output:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下输出：
- en: '[PRE38]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This is the raw output of the graph. As you can see, it is similar to HTML.
    We can render this using the `dot` command, which ships as part of Graphviz. The
    `dot` command creates hierarchical drawings from graphs. To do this, run:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是图形的原始输出。如您所见，它类似于HTML。我们可以使用作为Graphviz的一部分的`dot`命令来渲染它。`dot`命令从图形中创建分层图。要做到这一点，运行：
- en: '[PRE39]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This will generate a PNG file called `hosts.png` that contains the visualization
    of the host inventory file you can see here:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个名为`hosts.png`的PNG文件，其中包含您可以在这里看到的主机清单文件的可视化：
- en: '![](assets/dca6621b-227a-423c-b3e5-f296cc2c6765.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dca6621b-227a-423c-b3e5-f296cc2c6765.png)'
- en: We will be using this tool in later chapters to get an idea of what our inventory
    files look like as they are generated.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的章节中使用这个工具，以了解我们的清单文件在生成时是什么样子的。
- en: Ansible Run Analysis
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible Run Analysis
- en: '**ARA**, which is a recursive acronym that stands for **Ansible Run Analysis**,
    records Ansible. It is a tool written in Python that records your playbook runs
    and displays the results in an intuitive web interface. To install it on macOS,
    I had to use the following command:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**ARA**是一个递归缩写，代表**Ansible Run Analysis**，记录Ansible。这是一个用Python编写的工具，记录您的playbook运行并在直观的web界面中显示结果。在macOS上安装它，我不得不使用以下命令：'
- en: '[PRE40]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'To install on Ubuntu, I could use just this:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Ubuntu上安装，我可以只使用这个：
- en: '[PRE41]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Once installed, you should be able to run the following commands to configure
    your environment to record your Ansible playbook runs:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您应该能够运行以下命令来配置您的环境以记录您的Ansible playbook运行：
- en: '[PRE42]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'When you have your environment configured, you can run a playbook. For example,
    let''s rerun the playbook from the Ansible Vault section of this chapter using:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当您配置好环境后，可以运行playbook。例如，让我们使用本章中Ansible Vault部分的playbook重新运行：
- en: '[PRE43]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Once the playbook has been executed, running the following command will start
    the ARA web server:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦playbook被执行，运行以下命令将启动ARA web服务器：
- en: '[PRE44]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Opening your browser and going to the URL mentioned in the output of the previous
    command, `http://127.0.0.1:9191/`, will give you the results of your playbook
    run:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并转到前一个命令输出中提到的URL，`http://127.0.0.1:9191/`，将给您显示playbook运行的结果：
- en: '![](assets/c16d88ee-f914-49ad-9933-18ff7fbeca6d.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c16d88ee-f914-49ad-9933-18ff7fbeca6d.png)'
- en: 'As you can see, I have run the playbook four different times, and one of those
    executions failed. Clicking on the elements will show you more detail:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我已经运行了四次playbook，其中一次执行失败。单击元素将显示更多详细信息：
- en: '![](assets/d972cbd2-f777-4348-994e-32f6c63ca83a.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d972cbd2-f777-4348-994e-32f6c63ca83a.png)'
- en: Again, we will be using ARA in later chapters in a lot more detail; we have
    just touched upon the very basics here.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们将在以后的章节中更详细地使用ARA；我们在这里只是简单介绍了基础知识。
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we took a brief look at some of the supporting tools that ship
    as part of a standard Ansible installation, as well as some useful third-party
    tools that have been designed to work with Ansible. We will be using these commands,
    as well as the few we have purposely missed, in later chapters.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了一些作为标准Ansible安装的一部分提供的支持工具，以及一些有用的第三方工具，这些工具旨在与Ansible一起使用。我们将在以后的章节中使用这些命令，以及我们故意忽略的一些命令。
- en: In our next chapter, we are going to make a start by writing a more complex
    playbook that installs a basic LAMP stack on our local Vagrant box.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的下一章中，我们将开始编写一个更复杂的playbook，在我们的本地Vagrant框中安装一个基本的LAMP堆栈。
- en: Questions
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Of the commands that provide information about your host inventory that we have
    covered in this chapter, which ships with Ansible by default?
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍的提供有关主机清单信息的命令中，哪些是默认与Ansible一起提供的？
- en: 'True or false: Variable files that have strings encrypted with Ansible Vault
    will work with versions of Ansible lower than 2.4.'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：使用Ansible Vault加密字符串的变量文件将在低于2.4版本的Ansible中起作用。
- en: What command would you run to get an example of how you should call the `yum`
    module as part of your task?
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将运行哪个命令来获取如何调用`yum`模块作为任务的示例？
- en: Explain why you would want to run single modules against hosts within your inventory.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释为什么您希望针对清单中的主机运行单个模块。
- en: Using your own host inventory file, generate a diagram showing the content.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您自己的主机清单文件，生成显示内容的图表。
- en: Further reading
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find the project pages for the two third-party tools covered at the
    end of the chapter at the following URLs:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本章末尾涵盖的两个第三方工具的项目页面中找到以下URL：
- en: '`ansible-inventory-grapher`: [https://github.com/willthames/ansible-inventory-grapher](https://github.com/willthames/ansible-inventory-grapher)'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-inventory-grapher`: [https://github.com/willthames/ansible-inventory-grapher](https://github.com/willthames/ansible-inventory-grapher)'
- en: '`ara`: [https://github.com/openstack/ara](https://github.com/openstack/ara)'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ara`: [https://github.com/openstack/ara](https://github.com/openstack/ara)'
