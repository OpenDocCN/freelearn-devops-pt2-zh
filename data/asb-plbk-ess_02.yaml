- en: Chapter 1. Blueprinting Your Infrastructure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1. 章 蓝图化您的基础设施
- en: This book is a primer for anyone who has conceptual knowledge of Ansible and
    would like to get started writing Ansible playbooks to automate common infrastructure
    tasks, orchestrate application deployments, and/or manage configurations across
    multiple environments. This book follows an incremental approach, starting with
    the basics such as learning about the anatomy of a playbook and writing simple
    roles to create modular code. Once comfortable with the basics, you will be introduced
    to primitives such as adding dynamic data with variables and templates, and controlling
    execution flow with conditionals and iterators. This is then followed by more
    advanced topics such as node discovery, clustering, encrypting data, and managing
    environments. We conclude with the discussion on the orchestration features of
    Ansible. Let's begin our journey towards being an Ansible practitioner by learning
    about playbooks.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书是为那些对 Ansible 有概念性知识并想开始编写 Ansible playbook 自动化常见基础设施任务、编排应用部署和/或管理多个环境配置的人而设计的入门指南。本书采用渐进式方法，从基础知识开始，比如学习
    playbook 的解剖学和编写简单角色以创建模块化代码。一旦熟悉了基础知识，您将被介绍如何使用变量和模板添加动态数据，并使用条件和迭代器控制执行流程等基本概念。然后是更高级的主题，比如节点发现、集群化、数据加密和环境管理。最后我们将讨论
    Ansible 的编排特性。让我们通过学习 playbooks 来开始成为 Ansible 实践者的旅程吧。
- en: 'In this chapter, we will learn about:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习：
- en: The anatomy of a playbook
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Playbook 的解剖学
- en: What plays are and how to write a Hosts inventory and search patterns
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 plays 以及如何编写主机清单和搜索模式
- en: Ansible modules and the batteries-included approach
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 模块和“电池内置”方法
- en: Getting introduced to Ansible
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 熟悉 Ansible
- en: '**Ansible** is a simple, flexible, and extremely powerful tool that gives you
    the ability to automate common infrastructure tasks, run ad hoc commands, and
    deploy multitier applications spanning multiple machines. Even though you can
    use Ansible to launch commands on a number of hosts in parallel, the real power
    lies in managing those using playbooks.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ansible** 是一个简单、灵活且非常强大的工具，它能够帮助您自动化常见的基础设施任务、运行临时命令并部署跨多台机器的多层应用程序。虽然您可以使用
    Ansible 同时在多个主机上启动命令，但其真正的力量在于使用 playbooks 管理这些主机。'
- en: As systems engineer, infrastructure that we typically need to automate contains
    complex multitier applications. Each of which represents a class of servers, for
    example, load balancers, web servers, database servers, caching applications,
    and middleware queues. Since many of these applications have to work in tandem
    to provide a service, there is topology involved as well. For example, a load
    balancer would connect to web servers, which in turn read/write to a database
    and connect to the caching server to fetch in-memory objects. Most of the time,
    when we launch such application stacks, we need to configure these components
    in a very specific order.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 作为系统工程师，我们通常需要自动化的基础设施包含复杂的多层应用程序。其中每个代表一类服务器，例如负载均衡器、Web 服务器、数据库服务器、缓存应用程序和中间件队列。由于这些应用程序中的许多必须一起工作才能提供服务，所以还涉及拓扑。例如，负载均衡器会连接到
    Web 服务器，后者会读写数据库并连接到缓存服务器以获取内存中的对象。大多数情况下，当我们启动这样的应用程序堆栈时，我们需要按照非常具体的顺序配置这些组件。
- en: 'Here is an example of a very common three-tier web application running a load
    balancer, a web server, and a database backend:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个非常常见的三层 Web 应用程序示例，其中包括一个负载均衡器、一个 Web 服务器和一个数据库后端：
- en: '![Getting introduced to Ansible](img/B03800_01_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![熟悉 Ansible](img/B03800_01_01.jpg)'
- en: Ansible lets you translate this diagram into a blueprint, which defines your
    infrastructure policies. The format used to specify such policies is what playbooks
    are.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 允许您将此图表转换为蓝图，定义您的基础设施策略。用于指定此类策略的格式就是 playbook。
- en: 'Example policies and the sequence in which those are to be applied is shown
    in the following steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 示例策略及其应用顺序如下步骤所示：
- en: Install, configure, and start the MySQL service on the database servers.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库服务器上安装、配置和启动 MySQL 服务。
- en: Install and configure the web servers that run **Nginx** with **PHP** bindings.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装和配置运行 **Nginx** 和 **PHP** 绑定的 Web 服务器。
- en: Deploy a Wordpress application on the web servers and add respective configurations
    to Nginx.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Web 服务器上部署 Wordpress 应用程序，并向 Nginx 添加相应的配置。
- en: Start the Nginx service on all web servers after deploying Wordpress. Finally,
    install, configure, and start the **haproxy** service on the load balancer hosts.
    Update haproxy configurations with the hostnames of all the web servers created
    earlier.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在部署 Wordpress 后在所有 Web 服务器上启动 Nginx 服务。最后，在负载均衡器主机上安装、配置和启动**haproxy**服务。更新
    haproxy 配置以包含之前创建的所有 Web 服务器的主机名。
- en: 'The following is a sample playbook that translates the infrastructure blueprint
    into policies enforceable by Ansible:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例 Playbook，将基础设施蓝图转换为 Ansible 可执行的策略：
- en: '![Getting introduced to Ansible](img/B03800_01_02.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![介绍 Ansible](img/B03800_01_02.jpg)'
- en: Plays
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Plays
- en: A playbook consists of one or more plays, which map groups of hosts to well-defined
    tasks. The preceding example contains three plays, each to configure one layer
    in the multitiered web application. Plays also define the order in which tasks
    are configured. This allows us to orchestrate multitier deployments. For example,
    configure the load balancers only after starting the web servers, or perform two-phase
    deployment where the first phase only adds this configurations and the second
    phase starts the services in the desired order.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Playbook 包含一个或多个 Play，将主机组映射到明确定义的任务。上述示例包含三个 Play，每个 Play 用于配置多层 Web 应用程序中的一个层。Play
    也定义了任务配置的顺序。这使我们能够编排多层部署。例如，仅在启动 Web 服务器后配置负载均衡器，或执行两阶段部署，其中第一阶段仅添加这些配置，第二阶段按预期顺序启动服务。
- en: YAML – the playbook language
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YAML – Playbook 语言
- en: 'As you may have already noticed, the playbook that we wrote previously resembles
    more of a text configuration than a code snippet. This is because the creators
    of Ansible chose to use a simple, human-readable, and familiar YAML format to
    blueprint the infrastructure. This adds to Ansible''s appeal, as users of this
    tool need not learn any special programming language to get started with. Ansible
    code is self-explanatory and self-documenting in nature. A quick crash course
    on YAML should suffice to understand the basic syntax. Here is what you need to
    know about YAML to get started with your first playbook:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能已经注意到的，我们之前编写的 Playbook 更像是一个文本配置，而不是一个代码片段。这是因为 Ansible 的创建者选择使用简单、易读且熟悉的
    YAML 格式来蓝图基础设施。这增加了 Ansible 的吸引力，因为这个工具的用户无需学习任何特殊的编程语言即可开始使用。Ansible 代码是自解释且自描述的。对
    YAML 的快速入门就足以理解基本语法。以下是您需要了解的有关 YAML 的内容，以便开始您的第一个 Playbook：
- en: The first line of a playbook should begin with "--- " (three hyphens) which
    indicates the beginning of the YAML document.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Playbook 的第一行应以 "--- "（三个连字符）开头，表示 YAML 文档的开始。
- en: Lists in YAML are represented with a hyphen followed by a white space. A playbook
    contains a list of plays; they are represented with "- ". Each play is an associative
    array, a dictionary, or a map in terms of key-value pairs.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 YAML 中，列表以一个连字符和一个空格表示。Playbook 包含一系列 Play；它们用 "- " 表示。每个 Play 都是一个关联数组、字典或映射，具有键值对。
- en: Indentations are important. All members of a list should be at the same indentation
    level.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缩进很重要。列表的所有成员应位于相同的缩进级别。
- en: Each play can contain key-value pairs separated by ":" to denote hosts, variables,
    roles, tasks, and so on.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 Play 都可以包含用 ":" 分隔的键值对，以表示主机、变量、角色、任务等。
- en: Our first playbook
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的第一个 Playbook
- en: 'Equipped with the basic rules explained previously and assuming readers have
    done a quick dive into YAML fundamentals, we will now begin writing our first
    playbook. Our problem statement includes the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 配备了前面解释的基本规则，并假设读者已经对 YAML 基础知识有所了解，我们现在将开始编写我们的第一个 Playbook。我们的问题陈述如下：
- en: Create a devops user on all hosts. This user should be part of the `devops`
    group.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有主机上创建一个 devops 用户。该用户应该是 `devops` 组的一部分。
- en: Install the "htop" utility. **Htop** is an improved version of top—an interactive
    system process monitor.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 "htop" 实用程序。**Htop**是 top 的改进版本——一个交互式系统进程监视器。
- en: Add the Nginx repository to the web servers and start it as a service.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Nginx 仓库添加到 Web 服务器，并将其作为服务启动。
- en: 'Now, we will create our first playbook and save it as `simple_playbook.yml`
    containing the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建我们的第一个 Playbook 并将其保存为 `simple_playbook.yml`，其中包含以下代码：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Our playbook contains two plays. Each play consists of the following two important
    parts:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 Playbook 包含两个 Play。每个 Play 包含以下两个重要部分：
- en: '**What to configure**: We need to configure a host or group of hosts to run
    the play against. Also, we need to include useful connection information, such
    as which user to connect as, whether to use `sudo` command, and so on.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**要配置什么**：我们需要配置一个主机或一组主机来运行剧本。此外，我们需要包含有用的连接信息，例如要连接为哪个用户，是否使用`sudo`命令等。'
- en: '**What to run**: This includes the specification of tasks to be run, including
    which system components to modify and which state they should be in, for example,
    installed, started, or latest. This could be represented with tasks and later
    on, by roles.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**要运行什么**：这包括要运行的任务的规范，包括要修改的系统组件以及它们应该处于的状态，例如，安装、启动或最新状态。这可以用任务来表示，稍后可以通过角色来表示。'
- en: Let's now look at each of these briefly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们简要介绍一下每个。
- en: Creating a host inventory
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建主机清单
- en: Before we even start writing our playbook with Ansible, we need to define an
    inventory of all hosts that need to be configured, and make it available for Ansible
    to use. Later, we will start running plays against a selection of hosts from this
    inventory. If you have an existing inventory, such as cobbler, LDAP, a CMDB software,
    or wish to pull it from a cloud provider, such as ec2, it can be pulled from Ansible
    using the concept of a dynamic inventory.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在我们开始使用Ansible编写剧本之前，我们也需要定义一个所有需要配置的主机的清单，并使其可供Ansible使用。稍后，我们将开始对此清单中的一些主机运行剧本。如果您有现有的清单，例如cobbler、LDAP、CMDB软件或希望从云提供商（如ec2）那里拉取清单，则可以使用动态清单的概念从Ansible那里拉取。
- en: 'For text-based local inventory, the default location is `/etc/ansible/hosts`.
    For our learning environment, however, we will create a custom inventory file
    `customhosts` in our working directory, the contents of which are shown as follows.
    You are free to create your own inventory file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于文本的本地清单，默认位置是`/etc/ansible/hosts`。然而，对于我们的学习环境，我们将在工作目录中创建一个自定义清单文件`customhosts`，其内容如下所示。您可以自由创建自己的清单文件：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, when our playbook maps a play to the group, the `www` (`hosts:` `www`),
    hosts in that group will be configured. The `all` keywords will match to all hosts
    from the inventory.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们的剧本将一场戏映射到该组时，`www`（`hosts:` `www`），该组中的主机将被配置。 `all`关键字将匹配清单中的所有主机。
- en: 'The following are the guidelines to for creating inventory files:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建清单文件的指南：
- en: Inventory files follow INI style configurations, which essentially include configuration
    blocks that start with host group/class names included in "`[ ]`". This allows
    the selective execution on classes of systems, for example, `[namenodes]`.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清单文件遵循INI风格的配置，基本上包含以包含在“`[ ]`”中的主机组/类名开头的配置块。这允许选择性地在系统类别上执行操作，例如，`[namenodes]`。
- en: A single host can be part of multiple groups. In such cases, host variables
    from both the groups will get merged, and the precedence rules apply. We will
    discuss variables and precedence in detail later.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个主机可以是多个组的一部分。在这种情况下，来自两个组的主机变量将被合并，并且优先规则适用。稍后我们将详细讨论变量和优先级。
- en: Each group contains a list of hosts and connection details, such as the SSH
    user to connect as, the SSH port number if non-default, SSH credentials/keys,
    sudo credentials, and so on. Hostnames can also contain globs, ranges, and more,
    to make it easy to include multiple hosts of the same type, which follow some
    naming patterns.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个组包含主机列表和连接详细信息，例如要连接的SSH用户、如果不是默认值的SSH端口号、SSH凭据/密钥、sudo凭据等。主机名还可以包含通配符、范围等，以便轻松地包含相同类型的多个主机，这些主机遵循一些命名模式。
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: After creating an inventory of the hosts, it's a good idea to validate connectivity
    using Ansible's ping module (for example, `ansible -m ping all`).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 创建主机清单后，最好使用Ansible的ping模块进行连接性验证（例如，`ansible -m ping all`）。
- en: Patterns
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模式
- en: 'In the preceding playbook, the following lines decide which hosts to select
    to run a specific play:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个剧本中，以下行决定了选择哪些主机来运行特定的剧本：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The first code will match all hosts, and the second code will match hosts which
    are part of the `www` group.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行代码将匹配所有主机，而第二行代码将匹配属于`www`组的主机。
- en: 'Patterns can be any of the following or their combinations:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 模式可以是以下任何一个或它们的组合：
- en: '| Pattern Types | Examples |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 模式类型 | 示例 |'
- en: '| --- | --- |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Group name | `namenodes` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 组名 | `namenodes` |'
- en: '| Match all | `all` or `*` |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 匹配全部 | `all`或`*` |'
- en: '| Range | `namenode[0:100]` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 范围 | `namenode[0:100]` |'
- en: '| Hostnames/hostname globs | `*.example.com`, `host01.example.com` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 主机名/主机名模式 | `*.example.com`，`host01.example.com` |'
- en: '| Exclusions | `namenodes:!secondaynamenodes` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 排除 | `namenodes:!secondaynamenodes` |'
- en: '| Intersection | `namenodes:&zookeeper` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 交集 | `namenodes:&zookeeper` |'
- en: '| Regular expressions | `~(nn&#124;zk).*\.example\.org` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 正则表达式 | `~(nn&#124;zk).*\.example\.org` |'
- en: Tasks
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务
- en: 'Plays map hosts to tasks. Tasks are a sequence of actions performed against
    a group of hosts that match the pattern specified in a play. Each play typically
    contains multiple tasks that are run serially on each machine that matches the
    pattern. For example, take a look at the following code snippet:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Plays 将主机映射到任务。任务是针对与播放中指定的模式匹配的一组主机执行的操作序列。每个播放通常包含在匹配模式的每台机器上串行运行的多个任务。例如，看下面的代码片段：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding example, we have two tasks. The first one is to create a group,
    and second is to create a user and add it to the group created earlier. If you
    notice, there is an additional line in the second task, which starts with `name:`.
    While writing tasks, it's good to provide a name with a human-readable description
    of what this task is going to achieve. If not, the action string will be printed
    instead.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们有两个任务。第一个是创建一个组，第二个是创建一个用户并将其添加到之前创建的组中。如果你注意到，第二个任务中有一行额外的内容，以 `name:`
    开头。在编写任务时，最好提供一个名称，描述这个任务将实现什么。如果没有，将打印动作字符串。
- en: 'Each action in a task list can be declared by specifying the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 任务列表中的每个操作都可以通过指定以下内容来声明：
- en: The name of the module
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块的名称
- en: Optionally, the state of the system component being managed
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选地，管理的系统组件的状态
- en: The optional parameters
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选参数
- en: Tip
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'With newer versions of Ansible (0.8 onwards), writing an action keyword is
    now optional. We can directly provide the name of the module instead. So, both
    of these lines will have a similar action, that is,. installing a package with
    the `apt` module:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用更新的 Ansible 版本（从 0.8 开始），现在写入一个动作关键字是可选的。我们可以直接提供模块的名称。因此，这两行将具有相似的动作，即。使用
    `apt` 模块安装软件包：
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Ansible stands out from other configuration management tools, with its batteries-included
    included approach. These batteries are "modules." It's important to understand
    what modules are before we proceed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 以其一体化的方法脱颖而出，与其他配置管理工具不同。这些“电池”即为“模块”。在继续之前了解模块的含义是很重要的。
- en: Modules
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块
- en: Modules are the encapsulated procedures that are responsible for managing specific
    system components on specific platforms.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是负责在特定平台上管理特定系统组件的封装程序。
- en: 'Consider the following example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: The `apt` module for Debian and the `yum` module for RedHat helps manage system
    packages
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apt` 模块用于 Debian，而 `yum` 模块用于 RedHat，有助于管理系统包'
- en: The `user` module is responsible for adding, removing, or modifying users on
    the system
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user` 模块负责在系统上添加、删除或修改用户'
- en: The `service` module will start/stop system services
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`service` 模块将启动/停止系统服务'
- en: Modules abstract the actual implementation from users. They expose a declarative
    syntax that accepts a list of the parameters and states of the system components
    being managed. All this can be declared using the human-readable YAML syntax,
    using key-value pairs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 模块将实际的实现与用户抽象出来。它们公开了一个声明性语法，接受一系列参数和要管理的系统组件的状态。所有这些都可以使用人类可读的 YAML 语法，使用键-值对来声明。
- en: In terms of functionality, modules resemble providers for those of you who are
    familiar with Chef/Puppet software. Instead of writing procedures to create a
    user, with Ansible we declare which state our component should be in, that is,
    which user to create, its state, and its characteristics, such as UID, group,
    shell, and so on. The actual procedures are inherently known to Ansible via modules,
    and are executed in the background.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在功能上，对于熟悉 Chef/Puppet 软件的人来说，模块类似于提供程序。与编写创建用户的流程不同，使用 Ansible，我们声明我们的组件应处于哪种状态，即应创建哪个用户，其状态及其特征，如
    UID、组、shell 等。实际的过程是通过模块隐含地为 Ansible 所知，并在后台执行。
- en: Tip
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The `Command` and `Shell` modules are special ones. They neither take key-value
    pairs as parameters, nor are idempotent.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`Command` 和 `Shell` 模块是特殊的模块。它们既不接受键-值对作为参数，也不是幂等的。'
- en: Ansible comes preinstalled with a library of modules, which ranges from the
    ones which manage basic system resources to more sophisticated ones that send
    notifications, perform cloud integrations, and so on. If you want to provision
    an ec2 instance, create a database on the remote PostgreSQL server, and get notifications
    on **IRC**, then Ansible has a module for it. Isn't this amazing?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 预先安装了一系列模块库，从管理基本系统资源的模块到发送通知、执行云集成等更复杂的模块。如果您想要在远程 PostgreSQL 服务器上配置
    ec2 实例、创建数据库，并在 **IRC** 上接收通知，那么 Ansible 就有一个模块可供使用。这难道不是令人惊讶的吗？
- en: No need to worry about finding an external plugin, or struggle to integrate
    with cloud providers, and so on. To find a list of modules available, you can
    refer to the Ansible documentation at [http://docs.ansible.com/list_of_all_modules.html](http://docs.ansible.com/list_of_all_modules.html).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 无需担心找外部插件，或者努力与云提供商集成等。要查看可用模块的列表，您可以参考 Ansible 文档中的 [http://docs.ansible.com/list_of_all_modules.html](http://docs.ansible.com/list_of_all_modules.html)。
- en: Ansible is extendible too. If you do not find a module that does the job for
    you, it's easy to write one, and it doesn't have to be in Python. A module can
    be written for Ansible in the language of your choice. This is discussed in detail
    at [http://docs.ansible.com/developing_modules.html](http://docs.ansible.com/developing_modules.html).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 也是可扩展的。如果找不到适合您的模块，编写一个模块很容易，而且不一定要用 Python。模块可以用您选择的语言为 Ansible 编写。这在
    [http://docs.ansible.com/developing_modules.html](http://docs.ansible.com/developing_modules.html)
    中有详细讨论。
- en: The modules and idempotence
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 模块和幂等性
- en: 'Idempotence is an important characteristic of a module. It is something which
    can be applied on your system multiple times, and will return deterministic results.
    It has built-in intelligence. For instance, we have a task that uses the `apt`
    module to install Nginx and ensure that it''s up to date. Here is what happens
    if you run it multiple times:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 幂等性是模块的一个重要特征。它可以多次应用于系统，并返回确定性的结果。它具有内置的智能。例如，我们有一个使用 `apt` 模块安装 Nginx 并确保其为最新版本的任务。如果多次运行它，会发生以下情况：
- en: Every time idempotance is run multiple times, the `apt` module will compare
    what has been declared in the playbook versus the current state of that package
    on the system. The first time it runs, Ansible will determine that Nginx is not
    installed, and will go ahead with the installation.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次运行幂等性时，`apt` 模块都会比较 playbook 中声明的内容与系统上该软件包的当前状态。第一次运行时，Ansible 将确定 Nginx
    未安装，并继续安装。
- en: For every consequent run, it will skip the installation part, unless there is
    a new version of the package available in the upstream repositories.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每次后续运行，它都会跳过安装部分，除非在上游仓库中有新版本的软件包可用。
- en: This allows executing the same task multiple times without resulting in the
    error state. Most of the Ansible modules are idempotent, except for the command
    and shell modules. Users will have to make these modules idempotent.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许多次执行相同的任务而不会导致错误状态。大多数 Ansible 模块都是幂等的，除了 command 和 shell 模块。用户需要使这些模块幂等。
- en: Running the playbook
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行 playbook
- en: 'Ansible comes with the `ansible-playbook` command to launch a playbook with.
    Let''s now run the plays we created:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 配备了 `ansible-playbook` 命令来启动 playbook。现在让我们运行我们创建的 plays：
- en: '[PRE5]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here is what happens when you run the preceding command:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令时会发生以下情况：
- en: The `ansible-playbook` parameter is the command that takes the playbook as an
    argument (`simple_playbook.yml`) and runs the plays against the hosts
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible-playbook` 参数是一个命令，它将 playbook 作为参数（`simple_playbook.yml`）并对主机运行 plays。'
- en: 'The `simple_playbook` parameter contains the two plays that we created: one
    for common tasks, and the other for installing Nginx'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`simple_playbook` 参数包含我们创建的两个 plays：一个用于常规任务，另一个用于安装 Nginx。'
- en: The `customhosts` parameter is our host's inventory, which lets Ansible know
    which hosts, or groups of hosts, to call plays against
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`customhosts` 参数是我们主机清单，它让 Ansible 知道要针对哪些主机或主机组执行 plays。'
- en: 'Launching the preceding command will start calling plays, orchestrating in
    the sequence that we described in the playbook. Here is the output of the preceding
    command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 启动上述命令将开始调用 plays，在 playbook 中描述的顺序中进行编排。以下是上述命令的输出：
- en: '![Running the playbook](img/B03800_01_03.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![运行 playbook](img/B03800_01_03.jpg)'
- en: 'Let''s now analyze what happened:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们分析发生了什么：
- en: Ansible reads the playbooks specified as an argument to the `ansible-playbook`
    command and starts executing plays in the serial order.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible读取指定为`ansible-playbook`命令参数的playbooks，并开始按顺序执行play。
- en: The first play that we declared, runs against the "`all`" hosts. The `all` keyword
    is a special pattern that will match all hosts (similar to `*`). So, the tasks
    in the first play will be executed on all hosts in the inventory we passed as
    an argument.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们声明的第一个play针对"`all`"主机运行。`all`关键字是一种特殊模式，将匹配所有主机（类似于`*`）。因此，第一个play中的任务将在我们作为参数传递的清单中的所有主机上执行。
- en: Before running any of the tasks, Ansible will gather information about the systems
    that it is going to configure. This information is collected in the form of facts.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行任何任务之前，Ansible将收集有关将要配置的系统的信息。这些信息以事实的形式收集。
- en: The first play includes the creation of the `devops` group and user, and installation
    of the htop package. Since we have three hosts in our inventory, we see one line
    per host being printed, which indicates whether there was a change in the state
    of the entity being managed. If the state was not changed, "ok" will be printed.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个play包括创建`devops`组和用户，并安装htop包。由于我们的清单中有三个主机，所以每个主机被打印一行，这表明被管理实体的状态是否发生了变化。如果状态没有更改，将打印“ok”。
- en: Ansible then moves to the next play. This is executed only on one host, as we
    have specifed "`hosts:www`" in our play, and our inventory contains a single host
    in the group "`www`".
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后Ansible转移到下一个play。这只在一个主机上执行，因为我们在play中指定了"`hosts:www`"，而我们的清单中只包含一个位于组"`www`"中的单个主机。
- en: During the second play, the Nginx repository is added, the package is installed,
    and the service is started.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二个play期间，添加了Nginx存储库，安装了该软件包，并启动了该服务。
- en: Finally, Ansible prints the summary of the playbook run in the "`PLAY RECAP`"
    section. It indicates how many modifications were made, if any of the hosts were
    unreachable, or execution failed on any of the systems.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，Ansible会在"`PLAY RECAP`"部分打印播放概要。它指示进行了多少修改，如果其中任何主机无法访问，或者在任何系统上执行失败。
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: What if a host is unresponsive, or fails to run tasks? Ansible has built-in
    intelligence, which will identify such issues and take the failed host out of
    rotation. It will not affect the execution on other hosts.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果主机无响应或无法运行任务怎么办？Ansible具有内置智能，将识别此类问题并将失败的主机从轮换中移出。这不会影响其他主机的执行。
- en: Review questions
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: 'Do you think you''ve understood the chapter well enough? Try answering the
    following questions to test your understanding:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为你已经充分理解了这一章吗？试着回答以下问题来测试你的理解：
- en: What is idempotence when it comes to modules?
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当涉及到模块时，幂等性是什么？
- en: What is the host's inventory and why is it required?
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主机清单是什么，为什么需要它？
- en: Playbooks map ___ to ___ (fill in the blanks)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Playbooks将 ___ 映射到 ___（填空）
- en: What types of patterns can you use while selecting a list of hosts to run plays
    against?
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择要对其运行plays的主机列表时，可以使用哪些类型的模式？
- en: Where is the actual procedure to execute an action on a specific platform defined?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际执行特定平台上操作的程序在哪里定义？
- en: Why is it said that Ansible comes with batteries included?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么说Ansible自带电池？
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about what Ansible playbooks are, what components
    those are made up of, and how to blueprint your infrastructure with it. We also
    did a primer on YAML—the language used to create plays. You learned about how
    plays map tasks to hosts, how to create a host inventory, how to filter hosts
    with patterns, and how to use modules to perform actions on our systems. We then
    created a simple playbook as a proof of concept.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了Ansible playbooks是什么，它们由哪些组件组成，以及如何使用它来为基础设施提供蓝图。我们还对YAML进行了简要介绍——用于创建plays的语言。您了解了plays如何将任务映射到主机，如何创建主机清单，如何使用模式过滤主机以及如何使用模块在我们的系统上执行操作。然后，我们创建了一个简单的playbook作为概念验证。
- en: In the upcoming chapter, we will start refactoring our code to create reusable
    and modular chunks of code, and call them roles.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在即将到来的章节中，我们将开始重构我们的代码，创建可重用和模块化的代码块，并称之为角色。
