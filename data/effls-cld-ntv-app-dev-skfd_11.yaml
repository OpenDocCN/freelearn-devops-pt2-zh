- en: '[*Chapter 8*](B17385_08_Final_PD_ePub.xhtml#_idTextAnchor099): Deploying a
    Spring Boot Application to the Google Kubernetes Engine Using Skaffold'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第8章*](B17385_08_Final_PD_ePub.xhtml#_idTextAnchor099)：使用Skaffold将Spring Boot应用部署到Google
    Kubernetes Engine'
- en: In the previous chapter, you learned how to deploy a **Spring Boot** application
    to a local **Kubernetes** cluster using **Google**'s **Cloud Code** plugin for
    **IntelliJ**. This chapter focuses on deploying the same Spring Boot application
    to the remote **Google Kubernetes Engine** (**GKE**), a managed Kubernetes service
    provided by the **Google Cloud Platform** (**GCP**). We will introduce you to
    Google's recently launched serverless Kubernetes offering, **GKE Autopilot**.
    You will also get to know **Google Cloud SDK** and **Cloud Shell**, and use them
    to connect and manage a remote Kubernetes cluster.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了如何使用Google的IntelliJ的Cloud Code插件将Spring Boot应用部署到本地Kubernetes集群。本章重点介绍了如何将相同的Spring
    Boot应用部署到远程Google Kubernetes Engine（GKE），这是Google Cloud Platform（GCP）提供的托管Kubernetes服务。我们还将向您介绍Google最近推出的无服务器Kubernetes服务GKE
    Autopilot。您还将了解Google Cloud SDK和Cloud Shell，并使用它们来连接和管理远程Kubernetes集群。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Getting started with the Google Cloud Platform
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用Google Cloud Platform
- en: Working with Google Cloud SDK and Cloud Shell
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Google Cloud SDK和Cloud Shell
- en: Setting up the Google Kubernetes Engine
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Google Kubernetes Engine
- en: Introducing GKE Autopilot clusters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍GKE Autopilot集群
- en: Deploying a Spring Boot application to the GKE
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Spring Boot应用部署到GKE
- en: By the end of this chapter, you will have a solid understanding of the essential
    services provided by the GCP to deploy a Spring Boot application to Kubernetes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将对GCP提供的基本服务有深入的了解，以便将Spring Boot应用部署到Kubernetes。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You''ll need the following to be installed on your system to follow the examples
    in this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在系统上安装以下内容才能按照本章的示例进行操作：
- en: Eclipse ([https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/))
    or IntelliJ IDE ([https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/))
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse ([https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/))
    或 IntelliJ IDE ([https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/))
- en: Git ([https://git-scm.com/downloads](https://git-scm.com/downloads))
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git ([https://git-scm.com/downloads](https://git-scm.com/downloads))
- en: Google Cloud SDK
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud SDK
- en: GCP account
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GCP账户
- en: Spring Boot 2.5
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot 2.5
- en: OpenJDK 16
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenJDK 16
- en: The code examples present in the chapter can also be found on GitHub at [https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold](https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码示例也可以在GitHub上找到：[https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold](https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold)。
- en: Getting started with the Google Cloud Platform
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Google Cloud Platform
- en: Today, many organizations take advantage of services provided by different cloud
    providers such as **Amazon** **Web** **Services** (**AWS**), Google's GCP, **Microsoft**
    **Azure**, **IBM** **Cloud**, or **Oracle** **Cloud**. The advantage of using
    these cloud vendors is that you don't have to manage infrastructure yourself,
    and you typically pay per hour for the use of these servers. Also, most of the
    time, if the organizations are unaware of or fail to address the computing power
    needed for their applications, it might result in the overprovision of computing
    resources.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，许多组织利用不同云提供商提供的服务，如亚马逊网络服务（AWS）、谷歌的GCP、微软Azure、IBM云或甲骨文云。使用这些云供应商的优势在于您无需自行管理基础架构，通常按小时支付这些服务器的使用费用。此外，大多数情况下，如果组织不了解或未能解决其应用程序所需的计算能力，可能会导致计算资源的过度配置。
- en: If you're managing the infrastructure yourself, you have to keep an army of
    people to take care of upkeep activities such as patching an operating system,
    upgrading the software, and upgrading the hardware. These cloud vendors help us
    solve business problems by providing these services for us. Also, you get built-in
    maintenance for the products that these cloud vendors support, whether it is databases
    or managed services such as Kubernetes. If you have already used any of these
    cloud vendors, you might find that all of these vendors provide similar services
    or products. Still, the implementation and how they work are different.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您自行管理基础架构，就必须雇佣一大批人员来负责维护活动，如打补丁操作系统、升级软件和升级硬件。这些云供应商通过为我们提供这些服务来帮助我们解决业务问题。此外，这些云供应商支持的产品都具有内置的维护功能，无论是数据库还是Kubernetes等托管服务。如果您已经使用过这些云供应商中的任何一个，您可能会发现所有这些供应商提供类似的服务或产品，但实施和工作方式是不同的。
- en: For example, you can see the services provided by GCP and their AWS and Azure
    equivalents in the link [https://cloud.google.com/free/docs/aws-azure-gcp-service-comparison](https://cloud.google.com/free/docs/aws-azure-gcp-service-comparison).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以在链接[https://cloud.google.com/free/docs/aws-azure-gcp-service-comparison](https://cloud.google.com/free/docs/aws-azure-gcp-service-comparison)中查看GCP提供的服务及其AWS和Azure等价物。
- en: Now we know that there are advantages of using these cloud vendors for different
    use cases, let's talk about one such cloud vendor – Google Cloud Platform.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道使用这些云供应商有不同用例的优势，让我们谈谈一个这样的云供应商——谷歌云平台。
- en: Google Cloud Platform, often abbreviated to GCP, provides you with a collection
    of services such as on-demand virtual machines (through **Google Compute Engine**),
    object storage for storing files (through **Google Cloud Storage**), and managed
    Kubernetes (through Google Kubernetes Engine), to name a few.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌云平台（通常缩写为GCP）为您提供一系列服务，如按需虚拟机（通过谷歌计算引擎）、用于存储文件的对象存储（通过谷歌云存储）和托管的Kubernetes（通过谷歌Kubernetes引擎）等。
- en: Before you can begin utilizing Google's Cloud services, you are first required
    to sign up for an account. If you already have a Google account such as a **Gmail**
    account, then you can use that to log in, but you are still required to sign up
    separately for the Cloud account. You can skip this step if you are already signed
    up on the Google Cloud Platform.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用谷歌的云服务之前，您首先需要注册一个帐户。如果您已经拥有谷歌帐户，如Gmail帐户，那么您可以使用该帐户登录，但您仍需要单独注册云帐户。如果您已经在谷歌云平台上注册，可以跳过此步骤。
- en: 'First, navigate to [https://cloud.google.com](https://cloud.google.com). Next,
    you will be asked to go through a typical Google sign-in process. If you don''t
    have a Google account yet, follow the sign-up process to create one. The following
    screenshot is the Google Cloud sign-in page:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，转到[https://cloud.google.com](https://cloud.google.com)。接下来，您将被要求进行典型的Google登录流程。如果您还没有Google帐户，请按照注册流程创建一个。以下屏幕截图是Google
    Cloud登录页面：
- en: '![Figure 8.1 – Getting started with Google Cloud'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.1 - 开始使用Google Cloud'
- en: '](image/Figure_8.1_B17385.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.1_B17385.jpg)'
- en: Figure 8.1 – Getting started with Google Cloud
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 - 开始使用Google Cloud
- en: If you look at the screenshot carefully, it says **New customers get $300 in
    free credits to spend on Google Cloud. All customers get free usage of 20+ products**.
    This means you can use free tier products without paying anything, and you will
    also get credit worth $300 for 90 days to explore or evaluate different services
    provided by GCP. For example, you can use Compute Engine, Cloud Storage, and **BigQuery**
    free of charge within specified monthly usage limits.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细查看屏幕截图，会发现它说**新客户可获得价值300美元的Google Cloud免费信用额度。所有客户都可以免费使用20多种产品**。这意味着您可以免费使用免费套餐产品，而无需支付任何费用，并且您还将获得价值300美元的信用额度，可供您在90天内探索或评估GCP提供的不同服务。例如，您可以在指定的月度使用限制内免费使用Compute
    Engine、Cloud Storage和**BigQuery**。
- en: 'You can either click on **Get started for free** or **Sign In**. You must provide
    your billing information if you sign up for the first time, and this redirects
    you to your Cloud **Console**. Also, a new project is automatically created for
    you. A project is a sort of workspace for your work. All the resources in a single
    project are isolated from those in all the other projects. You can control access
    to this project and only grant access to specific individuals or service accounts.
    The following screenshot is the view of your Google Cloud Console dashboard:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以单击**免费开始**或**登录**。如果您是第一次注册，必须提供您的计费信息，这将重定向您到您的云**控制台**。此外，系统会自动为您创建一个新项目。项目是您的工作空间。单个项目中的所有资源都与其他项目中的资源隔离。您可以控制对该项目的访问，并仅授予特定个人或服务帐户访问权限。以下屏幕截图是您的Google
    Cloud控制台仪表板视图：
- en: '![Figure 8.2 – Google Cloud Console dashboard'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.2 - Google Cloud控制台仪表板'
- en: '](image/Figure_8.2_B17385.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.2_B17385.jpg)'
- en: Figure 8.2 – Google Cloud Console dashboard
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 - Google Cloud控制台仪表板
- en: 'On the left side of the Console page, you can view different services offered
    by GCP:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台页面的左侧，您可以查看GCP提供的不同服务：
- en: '![Figure 8.3 – Google Cloud services view'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.3 - Google Cloud服务视图'
- en: '](image/Figure_8.3_B17385.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.3_B17385.jpg)'
- en: Figure 8.3 – Google Cloud services view
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 - Google Cloud服务视图
- en: In this chapter, the focus will be on the GKE services API provided by GCP.
    But before we discuss these, we need to install some tools to use those services.
    Let's talk about those tools in the next section.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，重点将放在GCP提供的GKE服务API上。但在讨论这些服务之前，我们需要安装一些工具来使用这些服务。让我们在下一节讨论这些工具。
- en: Working with Google Cloud SDK and Cloud Shell
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Google Cloud SDK和Cloud Shell
- en: You have access to the GCP Console now, and you can pretty much do anything
    using the Console. But a better approach for a developer is to use Cloud SDK,
    which is a collection of tools that allow faster local development by using emulators
    or tools like **kubectl**, **Skaffold**, and **minikube**. Not only that, but
    you can manage your resources, authenticate with remote Kubernetes clusters, and
    enable or disable GCP services from your local workstation. Another option is
    to use Cloud Shell from your browser, and we will be exploring both options in
    this chapter. Cloud SDK gives you tools and a library for interacting with its
    product and services. You can install and remove components as per your needs
    when using Cloud SDK.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以访问GCP控制台，并且可以使用控制台几乎可以做任何事情。但是，开发人员的更好方法是使用Cloud SDK，这是一组工具，允许通过使用仿真器或**kubectl**、**Skaffold**和**minikube**等工具进行更快的本地开发。不仅如此，您还可以管理资源，对远程Kubernetes集群进行身份验证，并从本地工作站启用或禁用GCP服务。另一个选项是从浏览器使用Cloud
    Shell，我们将在本章中探索这两个选项。Cloud SDK为您提供了与其产品和服务进行交互的工具和库。在使用Cloud SDK时，您可以根据需要安装和删除组件。
- en: Let's start with Cloud SDK. You can navigate to [https://cloud.google.com/sdk/](https://cloud.google.com/sdk/)
    and click on the **Get Started** button. This will redirect you to the installation
    guide. A minimum prerequisite for Cloud SDK is to have Python. Supported versions
    are Python 3 (3.5 to 3.8 preferred) and Python 2 (2.7.9 or higher). For example,
    modern versions of macOS include the appropriate version of Python required for
    Cloud SDK. However, if you'd like to install Python 3 with Cloud SDK, you can
    choose the macOS 64-bit with bundled Python installation offering.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从Cloud SDK开始。您可以转到[https://cloud.google.com/sdk/](https://cloud.google.com/sdk/)并单击**开始**按钮。这将重定向您到安装指南。Cloud
    SDK的最低先决条件是具有Python。支持的版本包括Python 3（首选3.5到3.8）和Python 2（2.7.9或更高版本）。例如，现代版本的macOS包括Cloud
    SDK所需的适当版本的Python。但是，如果您想要安装带有Cloud SDK的Python 3，可以选择带有捆绑Python安装的macOS 64位版本。
- en: Downloading Cloud SDK on Linux
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Linux上下载Cloud SDK
- en: 'Cloud SDK requires Python to be installed, so first verify the Python version
    using the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud SDK需要安装Python，因此首先使用以下命令验证Python版本：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To download the Linux 64-bit archive file from your command line, run the following
    command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令行下载Linux 64位存档文件，请运行以下命令：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'For the 32-bit archive file, run the following command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于32位存档文件，请运行以下命令：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Downloading Cloud SDK on macOS
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在macOS上下载Cloud SDK
- en: 'To download Cloud SDK on macOS, you have the following options to choose from:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要在macOS上下载Cloud SDK，您可以选择以下选项：
- en: '![Figure 8.4 – Download options for macOS'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.4 - macOS的下载选项'
- en: '](image/Figure_8.4_B17385.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.4_B17385.jpg)'
- en: Figure 8.4 – Download options for macOS
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 - macOS的下载选项
- en: 'If you are not sure about your machine''s hardware, then run the `uname –m`
    command. Based upon your machine, you will get the following output:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不确定您的机器硬件，那么运行`uname -m`命令。根据您的机器，您将获得以下输出：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now select the appropriate package and download it from the URL given in the
    **Package** column in the table available at [https://cloud.google.com/sdk/docs/install#mac](https://cloud.google.com/sdk/docs/install#mac).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在选择适当的软件包，并从[https://cloud.google.com/sdk/docs/install#mac](https://cloud.google.com/sdk/docs/install#mac)中的表中的**软件包**列中给出的URL进行下载。
- en: Setting up Cloud SDK
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置Cloud SDK
- en: 'After downloading the package, you need to extract the archive to a location
    of your choice on your filesystem. The following is the content of the `google-cloud-sdk`
    extracted archive:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下载软件包后，您需要将存档提取到文件系统上您选择的位置。以下是提取的`google-cloud-sdk`存档的内容：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After extracting the archive, you can proceed with the installation by running
    the `install.sh` script available in the root directory of your extract. You might
    see the following output:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 解压缩存档后，您可以通过运行存档根目录中的`install.sh`脚本来继续安装。您可能会看到以下输出：
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the following screen, you can see the list of installed and not installed
    components:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下屏幕中，您可以看到已安装和未安装的组件列表：
- en: '![Figure 8.5 – List of Google Cloud SDK components'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.5 – Google Cloud SDK组件列表'
- en: '](image/Figure_8.5_B17385.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.5_B17385.jpg)'
- en: Figure 8.5 – List of Google Cloud SDK components
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – Google Cloud SDK组件列表
- en: 'You can use the following Cloud SDK commands to install or remove components:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下Cloud SDK命令来安装或移除组件：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Make sure you source your bash profile after this using the `source .zshrc`
    command. From the installation, you can see that only three components, `. bq`,
    `core`, and `gsutil`, are installed by default.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在此之后使用`source .zshrc`命令来源化您的bash配置文件。从安装中，您可以看到默认只安装了三个组件，即`. bq`、`core`和`gsutil`。
- en: 'The next step is to run `gcloud init` to initialize the SDK using the following
    command:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是运行`gcloud init`命令来初始化SDK，使用以下命令：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: At this point, you will be redirected to a browser window and will be asked
    to log in to your Google account for authentication and granting access to Cloud
    SDK for your Cloud resources.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您将被重定向到浏览器窗口，并被要求登录您的Google账户进行身份验证，并授予Cloud SDK对您的云资源的访问权限。
- en: 'On clicking the **Allow** button, it will make sure that next time you can
    interact with the GCP API as yourself. After granting access, you will see the
    following screen confirming the authentication:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**允许**按钮，确保下次可以作为自己与GCP API进行交互。授予访问权限后，您将看到以下屏幕以确认身份验证：
- en: '![Figure 8.6 – Google Cloud SDK authentication completed'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.6 – Google Cloud SDK身份验证完成'
- en: '](image/Figure_8.6_B17385.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.6_B17385.jpg)'
- en: Figure 8.6 – Google Cloud SDK authentication completed
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6 – Google Cloud SDK身份验证完成
- en: 'Now you have authenticated yourself and are ready to work with Cloud SDK. You
    may see the following on the command line after completing the authentication:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经完成了身份验证，并准备好使用Cloud SDK进行工作。完成身份验证后，您可能会在命令行上看到以下内容：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: From the command line output, it is clear we have selected the project and confirmed
    the Compute Engine region. Now, we have successfully installed Cloud SDK. In the
    next section, we will learn about Cloud Shell.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行输出可以清楚地看出，我们已经选择了项目并确认了计算引擎区域。现在，我们已经成功安装了Cloud SDK。在下一节中，我们将学习有关Cloud Shell的内容。
- en: Using Cloud Shell
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Cloud Shell
- en: 'Cloud Shell is a browser-based terminal/CLI and editor. It comes pre-installed
    with tools like Skaffold, minikube, and Docker, to name a few. It can be activated
    by clicking the following icon, available at the top right-hand side of the Cloud
    Console browser window:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Shell是一个基于浏览器的终端/CLI和编辑器。它预装了诸如Skaffold、minikube和Docker等工具。您可以通过单击Cloud控制台浏览器窗口右上角的以下图标来激活它：
- en: '![Figure 8.7 – Activating Cloud Shell'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.7 – 激活Cloud Shell'
- en: '](image/Figure_8.7_B17385.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.7_B17385.jpg)'
- en: Figure 8.7 – Activating Cloud Shell
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7 – 激活Cloud Shell
- en: 'You will be redirected to the following screen after activation:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 激活后，您将被重定向到以下屏幕：
- en: '![Figure 8.8 – Cloud Shell editor'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.8 – Cloud Shell编辑器'
- en: '](image/Figure_8.8_B17385.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.8_B17385.jpg)'
- en: Figure 8.8 – Cloud Shell editor
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8 – Cloud Shell编辑器
- en: 'You can set your project ID by using the `gcloud config set project projectid`
    command, or just start playing around with `gcloud` commands. The following are
    some of the highlighted features that Cloud Shell provides:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`gcloud config set project projectid`命令设置您的项目ID，或者只是开始使用`gcloud`命令进行操作。以下是Cloud
    Shell提供的一些突出功能：
- en: Cloud Shell is entirely browser-based, and you can access it from anywhere.
    The only requirement is internet connectivity.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Shell完全基于浏览器，并且您可以从任何地方访问它。唯一的要求是互联网连接。
- en: Cloud Shell gives you a 5 GB persistent storage mounted to your `$HOME` directory.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Shell为您的`$HOME`目录挂载了5GB的持久存储。
- en: Cloud Shell comes with an online code editor. You can use it to build, test,
    and debug your applications.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Shell带有在线代码编辑器。您可以使用它来构建、测试和调试您的应用程序。
- en: Cloud Shell also comes with a Git client installed so that you can clone and
    push changes to your repository from the code editor or command line.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Shell还带有安装的Git客户端，因此您可以从代码编辑器或命令行克隆和推送更改到您的存储库。
- en: Cloud Shell comes with a web preview in which you can view your local changes
    in a web app.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud Shell带有Web预览，您可以在Web应用中查看本地更改。
- en: We have installed and configured Google Cloud SDK for our use. We have also
    looked at Cloud Shell and the features it provides. Now let's create a Kubernetes
    cluster where we can deploy our Spring Boot application.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为我们的使用安装和配置了Google Cloud SDK。我们还看了Cloud Shell及其提供的功能。现在让我们创建一个Kubernetes集群，我们可以在其中部署我们的Spring
    Boot应用程序。
- en: Setting up a Google Kubernetes Engine cluster
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Google Kubernetes Engine集群
- en: 'We would need to set up a Kubernetes cluster on GCP to deploy our containerized
    Spring Boot application. GCP can provide a hosted and managed deployment of Kubernetes.
    We can create a Kubernetes cluster on GCP using the following two methods:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在GCP上设置一个Kubernetes集群，以部署我们的容器化Spring Boot应用程序。GCP可以提供托管和管理的Kubernetes部署。我们可以使用以下两种方法在GCP上创建Kubernetes集群：
- en: Creating a Kubernetes cluster using Google Cloud SDK
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Google Cloud SDK创建Kubernetes集群
- en: Creating a Kubernetes cluster using Google Console
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Google控制台创建Kubernetes集群
- en: Let's discuss each of these in detail.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们详细讨论每个。 '
- en: Creating a Kubernetes cluster using Google Cloud SDK
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Google Cloud SDK创建Kubernetes集群
- en: 'We can create a Kubernetes cluster for running containers using the following
    gcloud SDK command. This will create a Kubernetes cluster with default settings:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下gcloud SDK命令创建用于运行容器的Kubernetes集群。这将使用默认设置创建一个Kubernetes集群：
- en: '![](image/Figure_8.9_B17385.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Figure_8.9_B17385.jpg)'
- en: Figure 8.9 – GKE cluster up and running
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9 - GKE集群已启动
- en: We have successfully created a Kubernetes cluster using Cloud SDK. Next, we
    will try to create the cluster using Google Console.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功使用Cloud SDK创建了一个Kubernetes集群。接下来，我们将尝试使用Google控制台创建集群。
- en: Creating a Kubernetes cluster using Google Console
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Google控制台创建Kubernetes集群
- en: 'To create a Kubernetes cluster using the Console, you should first use the
    left-hand side navigation bar and choose **Kubernetes Engine**. In the presented
    option, select **Clusters**:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用控制台创建Kubernetes集群，您应首先使用左侧导航栏并选择**Kubernetes Engine**。在呈现的选项中，选择**Clusters**：
- en: '![Figure 8.10 – Getting started with Google Kubernetes Engine cluster creation'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.10 - 开始使用Google Kubernetes Engine创建集群'
- en: '](image/Figure_8.10_B17385.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.10_B17385.jpg)'
- en: Figure 8.10 – Getting started with Google Kubernetes Engine cluster creation
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10 - 开始使用Google Kubernetes Engine创建集群
- en: 'After that, you will see the following screen on the next page:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您将在下一页上看到以下屏幕：
- en: '![Figure 8.11 – Creating a Google Kubernetes Engine cluster'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.11 - 创建Google Kubernetes Engine集群'
- en: '](image/Figure_8.11_B17385.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.11_B17385.jpg)'
- en: Figure 8.11 – Creating a Google Kubernetes Engine cluster
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11 - 创建Google Kubernetes Engine集群
- en: You can choose to create the cluster by clicking on the **CREATE** button on
    the popup, or by clicking **+CREATE** at the top of the page. Both will give you
    the following options to choose from, as explained in *Figure 8.12:*
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过单击弹出窗口上的**CREATE**按钮或单击页面顶部的**+CREATE**来选择创建集群。两者都会为您提供以下选项可供选择，如*图8.12*中所述：
- en: '![Figure 8.12 – Google Kubernetes Engine cluster modes'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.12 – Google Kubernetes Engine集群模式'
- en: '](image/Figure_8.12_B17385.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.12_B17385.jpg)'
- en: Figure 8.12 – Google Kubernetes Engine cluster modes
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12 – Google Kubernetes Engine集群模式
- en: You can choose to create a **Standard** Kubernetes cluster or a completely hands-off
    experience with **Autopilot** mode. In this section, we will discuss the Standard
    cluster. We will cover the Autopilot separately in the next section.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择创建**标准**Kubernetes集群，或者选择完全无需操作的**Autopilot**模式。在本节中，我们将讨论标准集群。我们将在下一节单独讨论Autopilot。
- en: In the Standard cluster mode, you have the flexibility to choose the number
    of nodes for your cluster and to tweak the configurations or setup as per your
    needs. The following is a walkthrough of creating a Kubernetes cluster. Since
    we are going with default configurations, you must click **Next** to accept the
    default options.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在标准集群模式下，您可以灵活选择集群节点的数量，并根据需要调整配置或设置。以下是创建Kubernetes集群的步骤。由于我们使用默认配置，您必须单击**下一步**接受默认选项。
- en: '![Figure 8.13 – Google Kubernetes Engine cluster creation'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.13 – Google Kubernetes Engine集群创建'
- en: '](image/Figure_8.13_B17385.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.13_B17385.jpg)'
- en: Figure 8.13 – Google Kubernetes Engine cluster creation
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.13 – Google Kubernetes Engine集群创建
- en: Finally, click on the **Create** button at the bottom of the page and voila,
    your Kubernetes cluster will be up and running in a few minutes!
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，单击页面底部的**创建**按钮，您的Kubernetes集群将在几分钟内运行起来！
- en: 'The following are the default configurations for your cluster:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您集群的默认配置：
- en: '![Figure 8.14 – Google Kubernetes Engine cluster configuration view'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.14 – Google Kubernetes Engine集群配置视图'
- en: '](image/Figure_8.14_B17385.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.14_B17385.jpg)'
- en: Figure 8.14 – Google Kubernetes Engine cluster configuration view
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14 – Google Kubernetes Engine集群配置视图
- en: 'Your Kubernetes cluster is now up and running. In the following screenshot,
    we can see that we have a three-node cluster with six vCPUs and 12 GB of total
    memory:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Kubernetes集群现在已经运行起来。在下面的截图中，我们可以看到我们有一个三节点集群，具有六个vCPU和12GB的总内存：
- en: '![Figure 8.15 – Google Kubernetes Engine cluster up and running'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.15 – Google Kubernetes Engine集群已经运行'
- en: '](image/Figure_8.15_B17385.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.15_B17385.jpg)'
- en: Figure 8.15 – Google Kubernetes Engine cluster up and running
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.15 – Google Kubernetes Engine集群已经运行
- en: 'You can view more details about your cluster nodes, storage, and view logs
    by clicking on the cluster name **cluster-1**. The following are the details of
    the cluster nodes we just created:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过单击集群名称**cluster-1**查看有关集群节点、存储和日志的更多详细信息。以下是我们刚刚创建的集群节点的详细信息：
- en: '![Figure 8.16 – Google Kubernetes Engine cluster view'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.16 – Google Kubernetes Engine集群视图'
- en: '](image/Figure_8.16_B17385.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.16_B17385.jpg)'
- en: Figure 8.16 – Google Kubernetes Engine cluster view
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.16 – Google Kubernetes Engine集群视图
- en: You can see that overall cluster status and node health is OK. The cluster nodes
    are created using Compute Engine GCP, and offering to have machine type as **e2-medium**.
    You can verify this by viewing the Compute Engine resources on the left-hand side
    navigation bar. We have the same three nodes shown here, and the GKE cluster uses
    these that we have just created.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到整体集群状态和节点健康状况都是正常的。集群节点是使用Compute Engine GCP创建的，并提供机器类型为**e2-medium**。您可以通过查看左侧导航栏上的Compute
    Engine资源来验证这一点。我们在这里显示了相同的三个节点，GKE集群使用了我们刚刚创建的这些节点。
- en: '![Figure 8.17 – Google Kubernetes Engine cluster VM instances'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.17 – Google Kubernetes Engine集群VM实例'
- en: '](image/Figure_8.17_B17385.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.17_B17385.jpg)'
- en: Figure 8.17 – Google Kubernetes Engine cluster VM instances
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.17 – Google Kubernetes Engine集群VM实例
- en: We have learned how to create a Kubernetes Standard cluster using Google Console.
    In the next section, we will learn about the Autopilot cluster.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何使用Google控制台创建一个Kubernetes标准集群。在接下来的部分，我们将学习关于Autopilot集群。
- en: Introducing the Google Kubernetes Engine Autopilot cluster
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Google Kubernetes Engine Autopilot集群
- en: On February 24th, 2021, Google announced the general availability of their fully
    managed Kubernetes services, GKE Autopilot. It is a completely managed and serverless
    Kubernetes as a service offering. No other cloud provider currently offers this
    level of automation when managing the Kubernetes cluster on the cloud. Most cloud
    providers leave some cluster management for you, be it managing the control planes
    (**API server**, **etcd**, **scheduler**, and so on), worker nodes, or creating
    everything from scratch as per your needs.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 2021年2月24日，Google宣布了他们完全托管的Kubernetes服务GKE Autopilot的一般可用性。这是一个完全托管和无服务器的Kubernetes即服务提供。目前没有其他云提供商在管理云上的Kubernetes集群时提供这种级别的自动化。大多数云提供商会让你自己管理一些集群管理工作，无论是管理控制平面（API服务器、etcd、调度器等）、工作节点，还是根据你的需求从头开始创建一切。
- en: GKE Autopilot, as the name suggests, is an entirely hands-off experience, and
    in most cases you only have to specify a cluster name and region, set the network
    if you want to, and that's it. You can focus on deploying your workloads and let
    Google fully manage your Kubernetes cluster. Google is offering 99.9% uptime for
    Autopilot pods in multiple zones. Even if you manage this yourself, you will not
    beat the number that Google is offering. On top of this, GKE Autopilot is cost-effective
    as you don't pay for **Virtual Machines** (**VMs**), and you are only billed per
    second for resources (for example, vCPU, memory, and disk space consumed by your
    pods).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名字所示，GKE Autopilot是一个完全无需干预的体验，在大多数情况下，你只需要指定一个集群名称和区域，如果需要的话设置网络，就这样。你可以专注于部署你的工作负载，让Google完全管理你的Kubernetes集群。Google为Autopilot
    pods在多个区域提供99.9%的正常运行时间。即使你自己管理这些，也无法达到Google提供的数字。此外，GKE Autopilot是具有成本效益的，因为你不需要支付虚拟机（VMs）的费用，你只需要按资源的秒数计费（例如，被你的pods消耗的vCPU、内存和磁盘空间）。
- en: 'So what''s the difference between a GKE Standard cluster like the one we created
    in the previous section and a GKE Autopilot cluster? The answer is as follows:
    with the Standard cluster, you manage only the nodes, as the GKE manages the control
    plane, and with GKE Autopilot, you don''t manage anything (not even your worker
    nodes).'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们在上一节中创建的GKE标准集群和GKE Autopilot集群有什么区别呢？答案如下：对于标准集群，你只管理节点，因为GKE管理控制平面；而对于GKE
    Autopilot，你什么都不用管理（甚至不用管理你的工作节点）。
- en: 'This raises a question: is it a good or a bad thing that I cannot control my
    nodes? Now, this is debatable, but most organizations today are not handling traffic
    or loads like amazon.com, google.com, or netflix.com. It may be an oversimplification,
    but to be honest, even if you think you have specific needs or you need a specialized
    cluster, more often than not, you end up wasting a lot of time and resources in
    securing and managing your cluster. If you have a team of SRE that can match the
    level of experience or knowledge of Google SRE, you can do whatever you like with
    your cluster. But most organizations today don''t have such expertise and don''t
    know what they are doing. That''s why it is better to rely on fully managed Kubernetes
    services such as GKE Autopilot – it is battle-tested and hardened based on the
    best practices learned from Google SRE.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这引发了一个问题：我无法控制我的节点是好事还是坏事？现在，这是值得讨论的，但是今天大多数组织并不像amazon.com、google.com或netflix.com那样处理流量或负载。这可能是一个过于简化的说法，但老实说，即使您认为自己有特定的需求或需要一个专门的集群，往往最终会浪费大量时间和资源来保护和管理您的集群。如果您有一支SRE团队，他们可以匹敌Google
    SRE的经验或知识水平，您可以随心所欲地处理您的集群。但是今天大多数组织并没有这样的专业知识，也不知道他们在做什么。这就是为什么最好依赖完全托管的Kubernetes服务，比如GKE
    Autopilot – 它经过了实战测试，并且根据从Google SRE学到的最佳实践进行了加固。
- en: We have talked enough about GKE Autopilot features and the complete abstraction
    it provides over how we manage the Kubernetes cluster. However, keeping these
    abstractions in mind, there are some restrictions as well. For example, you cannot
    run privileged mode for containers in the Autopilot mode. For a complete list
    of limitations, read the official documentation at [https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview#limits](https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview#limits).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了足够多关于GKE自动驾驶的特性以及它提供的完全抽象，然而，要记住这些抽象，也有一些限制。例如，在自动驾驶模式下，您不能为容器运行特权模式。有关限制的完整列表，请阅读官方文档：[https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview#limits](https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview#limits)。
- en: We have gained enough knowledge about GKE Autopilot so far, and now it's time
    to create our cluster. So, let's begin!
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经对GKE自动驾驶有了足够的了解，现在是时候创建我们的集群了。让我们开始吧！
- en: Creating an Autopilot cluster
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自动驾驶集群
- en: 'After clicking on the **Configure** button, as explained in *Figure 8.13*,
    you will be redirected to the following screen:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在单击**配置**按钮之后，如*图8.13*中所述，您将被重定向到以下屏幕：
- en: '![Figure 8.18 – Creating a GKE Autopilot cluster'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.18 – 创建GKE自动驾驶集群'
- en: '](image/Figure_8.18_B17385.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.18_B17385.jpg)'
- en: Figure 8.18 – Creating a GKE Autopilot cluster
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.18 – 创建GKE自动驾驶集群
- en: Autopilot clusters have features such as node management, networking, security,
    and telemetry already built-in with Google-recommended best practices. GKE Autopilot
    makes sure that your cluster is optimized and production-ready.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 自动驾驶集群具有节点管理、网络、安全和遥测等功能，这些功能已经内置了Google推荐的最佳实践。GKE自动驾驶确保您的集群经过了优化，并且已经准备好投入生产。
- en: 'As you can see, you have very few options to change here. You can change the
    **Name** of the cluster, pick another **Region**, or choose the **Networking**
    (that is, public or private). Under **NETWORKING OPTIONS**, you can change things
    like network, subnetwork, pod IP address range and cluster services IP address
    range, and so on, as seen in the following screenshot:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，您在这里可以更改的选项非常少。您可以更改集群的**名称**，选择另一个**区域**，或选择**网络**（即公共或私有）。在**网络选项**下，您可以更改诸如网络、子网络、Pod
    IP地址范围和集群服务IP地址范围等内容，如下面的屏幕截图所示：
- en: '![Figure 8.19 – GKE Autopilot cluster configurations'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.19 – GKE自动驾驶集群配置'
- en: '](image/Figure_8.19_B17385.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.19_B17385.jpg)'
- en: Figure 8.19 – GKE Autopilot cluster configurations
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.19 – GKE Autopilot集群配置
- en: Under **ADVANCED OPTIONS**, you can enable a maintenance window and also allow
    maintenance exclusion for a specific time range (as seen in *Figure 8.19*). In
    this window, your GKE cluster will go for an automated maintenance window and
    will not be available for your use. You should choose a maintenance window as
    per your needs.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在**高级选项**下，您可以启用维护窗口，并允许特定时间范围内的维护排除（如*图8.19*所示）。在此窗口中，您的GKE集群将进行自动维护窗口，并且不会对您可用。您应根据自己的需求选择维护窗口。
- en: '![Figure 8.20 – Configuring a GKE Autopilot cluster maintenance window'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.20 – 配置GKE Autopilot集群维护窗口'
- en: '](image/Figure_8.20_B17385.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.20_B17385.jpg)'
- en: Figure 8.20 – Configuring a GKE Autopilot cluster maintenance window
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.20 – 配置GKE Autopilot集群维护窗口
- en: 'For now, we will go with default values and click on the **CREATE** button
    at the bottom of the page to create the cluster. It may take a few minutes to
    create your cluster. In the following screenshot, you can see the Autopilot cluster
    is up and running:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用默认值并单击页面底部的**创建**按钮来创建集群。创建集群可能需要几分钟时间。在下面的屏幕截图中，您可以看到Autopilot集群已经运行：
- en: '![Figure 8.21 – GKE Autopilot cluster up and running'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.21 – GKE Autopilot集群已经运行'
- en: '](image/Figure_8.21_B17385.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.21_B17385.jpg)'
- en: Figure 8.21 – GKE Autopilot cluster up and running
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.21 – GKE Autopilot集群已经运行
- en: Here, you can see that the number of nodes is not mentioned, as it is managed
    by GKE.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到节点的数量没有被提及，因为它是由GKE管理的。
- en: 'Next, we can try connecting to this cluster. To do so, click on the three dots
    at the top right of your screen and click on **Connect**:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以尝试连接到这个集群。要这样做，请单击屏幕右上角的三个点，然后单击**连接**：
- en: '![Figure 8.22 – Connecting to a GKE Autopilot cluster'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.22 – 连接到GKE Autopilot集群'
- en: '](image/Figure_8.22_B17385.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.22_B17385.jpg)'
- en: Figure 8.22 – Connecting to a GKE Autopilot cluster
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.22 – 连接到GKE Autopilot集群
- en: 'After clicking on **Connect**, the following popup should appear. You can copy
    the command mentioned here into your CLI or Cloud Shell:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**连接**后，应该会出现以下弹出窗口。您可以将此处提到的命令复制到您的CLI或Cloud Shell中：
- en: '![Figure 8.23 – Commands for connecting to a GKE Autopilot cluster'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.23 – 连接到GKE Autopilot集群的命令'
- en: '](image/Figure_8.23_B17385.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.23_B17385.jpg)'
- en: Figure 8.23 – Commands for connecting to a GKE Autopilot cluster
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.23 – 连接到GKE Autopilot集群的命令
- en: 'Then you can verify the cluster details by using the following `kubectl get
    nodes` command:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用以下`kubectl get nodes`命令验证集群详细信息：
- en: '![](image/Figure_8.24_B17385.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Figure_8.24_B17385.jpg)'
- en: Figure 8.24 – kubectl command output
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.24 – kubectl命令输出
- en: 'We can also create GKE cluster in autopilot mode using the following command:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下命令在自动驾驶模式下创建GKE集群：
- en: '![](image/Figure_8.25_B17385.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](image/Figure_8.25_B17385.jpg)'
- en: Figure 8.25 – GKE cluster in autopilot
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.25 – 自动驾驶模式下的GKE集群
- en: We can further verify this on Google Cloud Console as well. You can see that
    we now have two clusters. The first is created using Cloud Console and the second
    using the command line with gcloud.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在Google Cloud控制台上进一步验证。您可以看到我们现在有两个集群。第一个是使用Cloud控制台创建的，第二个是使用gcloud命令行创建的。
- en: '![Figure 8.26 – GKE Autopilot and Standard mode cluster'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.26 – GKE Autopilot和标准模式集群'
- en: '](image/Figure_8.26_B17385.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.26_B17385.jpg)'
- en: Figure 8.26 – GKE Autopilot clusters
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.26 – GKE Autopilot集群
- en: We have gone through the different ways of creating the Kubernetes cluster on
    GCP. Now, let's deploy a working Spring Boot application to the GKE using Skaffold.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了在GCP上创建Kubernetes集群的不同方式。现在，让我们使用Skaffold将一个可工作的Spring Boot应用程序部署到GKE。
- en: Deploying a Spring Boot application to the GKE
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Spring Boot应用程序部署到GKE
- en: 'The Spring Boot application that we will use in this section is the same as
    in the previous chapter (the application we named *Breathe – View Real-Time Air
    Quality Data*). We are already familiar with the application, so we will directly
    jump to the deployment to the GKE. We will be using `gke-autopilot-cluster1` we
    created in the previous section for deployment. We will do the deployment using
    the following two approaches using Skaffold:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中使用的Spring Boot应用程序与上一章中相同（我们命名为*Breathe – View Real-Time Air Quality
    Data*的应用程序）。我们已经熟悉这个应用程序，所以我们将直接跳转到部署到GKE。我们将使用在上一节中创建的`gke-autopilot-cluster1`来进行部署。我们将使用Skaffold使用以下两种方法进行部署：
- en: Deploying from local to a remote GKE cluster using Skaffold
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Skaffold从本地部署到远程GKE集群
- en: Deploying from Cloud Shell to a GKE cluster using Skaffold
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Skaffold从Cloud Shell部署到GKE集群
- en: Deploying from local to a remote GKE cluster using Skaffold
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Skaffold从本地部署到远程GKE集群
- en: 'In this section, you will learn how you can deploy the Spring Boot application
    to a remote Kubernetes cluster with the help of Skaffold. Let''s begin:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何使用Skaffold将Spring Boot应用程序部署到远程Kubernetes集群。让我们开始吧：
- en: In the previous chapter, we used **Dockerfile** to containerize our Spring Boot
    application. However, in this chapter, we will be using the `Jib-Maven` plugin
    to containerize the application. We already know how to use the jib-maven plugin
    from previous chapters, so we will skip explaining this again here.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用**Dockerfile**将我们的Spring Boot应用程序容器化。然而，在本章中，我们将使用`Jib-Maven`插件来容器化应用程序。我们已经知道如何在以前的章节中使用jib-maven插件，所以我们将跳过在这里再次解释这个。
- en: 'The only change is that we will be using the **Google Container Registry**
    (**GCR**) for storing the image pushed by Jib. GCR is a secure private registry
    for your images. Before that, we would need to make sure that GCR access is enabled
    for your account. You can allow access by using the following `gcloud` command:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 唯一的变化是我们将使用**Google容器注册表**（**GCR**）来存储Jib推送的图像。GCR是您图像的安全私有注册表。在那之前，我们需要确保GCR访问已对您的帐户启用。您可以使用以下`gcloud`命令来允许访问：
- en: '[PRE9]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Or you can navigate to [https://cloud.google.com/container-registry/docs/quickstart](https://cloud.google.com/container-registry/docs/quickstart)
    and enable the Container Registry API by clicking on the **Enable the API** button.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 或者您可以转到[https://cloud.google.com/container-registry/docs/quickstart](https://cloud.google.com/container-registry/docs/quickstart)，并通过单击**启用API**按钮来启用容器注册表API。
- en: '![Figure 8.27 – Enabling Google Container Registry API'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.27 – 启用Google容器注册表API'
- en: '](image/Figure_8.27_B17385.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.27_B17385.jpg)'
- en: Figure 8.27 – Enabling Google Container Registry API
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.27 – 启用Google容器注册表API
- en: Next, you will be asked to choose a project and then click on **Continue**.
    That's it!
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将被要求选择一个项目，然后单击**继续**。就是这样！
- en: '![Figure 8.28 – Register your application for Container Registry API'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.28 – 为容器注册表API注册您的应用程序'
- en: '](image/Figure_8.28_B17385.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.28_B17385.jpg)'
- en: Figure 8.28 – Register your application for Container Registry API
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.28 – 为容器注册表API注册您的应用程序
- en: You can make the images under your container registry available for public access
    as well. Users of your images can pull the images without any authentication if
    they are public. In the following screenshot, you can see an option, **Enable
    Vulnerability Scanning**, for images pushed to your container registry. If you
    want, you can allow it to scan your container images for vulnerabilities.![Figure
    8.29 – GCR settings
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以使容器注册表中的图像对公共访问可用。如果它们是公共的，您的图像用户可以在不进行任何身份验证的情况下拉取图像。在下面的屏幕截图中，您可以看到一个选项，**启用漏洞扫描**，用于推送到您的容器注册表的图像。如果您愿意，您可以允许它扫描您的容器图像以查找漏洞。![图8.29
    – GCR设置
- en: '](image/Figure_8.29_B17385.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.29_B17385.jpg)'
- en: Figure 8.29 – GCR settings
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.29 – GCR设置
- en: The next piece of the puzzle is to create Kubernetes manifests such as **Deployment**
    and **Service**. In the previous chapter, we created them using the **Dekorate**
    tool ([https://github.com/dekorateio/dekorate](https://github.com/dekorateio/dekorate)).
    We will be using the same Kubernetes manifest generation process here as well.
    The generated Kubernetes manifests are available under the `target/classes/META-INF/dekorate/kubernetes.yml`
    path.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个谜题的部分是创建Kubernetes清单，如**Deployment**和**Service**。在上一章中，我们使用了**Dekorate**工具（[https://github.com/dekorateio/dekorate](https://github.com/dekorateio/dekorate)）创建了它们。在这里，我们将继续使用相同的Kubernetes清单生成过程。生成的Kubernetes清单位于`target/classes/META-INF/dekorate/kubernetes.yml`路径下。
- en: 'Next, we will run the `skaffold init --XXenableJibInit` command, which will
    create a `skaffold.yaml` configuration file for us. You can see that Skaffold
    added the Kubernetes manifest''s path in the generated `deploy` section of the
    `skaffold.yaml` file and will use `jib` for image building:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将运行`skaffold init --XXenableJibInit`命令，这将为我们创建一个`skaffold.yaml`配置文件。您可以看到Skaffold在生成的`skaffold.yaml`文件的`deploy`部分中添加了Kubernetes清单的路径，并将使用`jib`进行镜像构建：
- en: '[PRE10]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We have the same main class as explained in the previous chapter, which uses
    the `@KubernetesApplication` `(serviceType = ServiceType.LoadBalancer)` annotation
    provided by the Dekorate tool to declare the service type as `LoadBalancer`:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们有与上一章中解释的相同的主类，该主类使用了Dekorate工具提供的`@KubernetesApplication` `(serviceType =
    ServiceType.LoadBalancer)`注解，将服务类型声明为`LoadBalancer`：
- en: '[PRE11]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: At the time of compilation, Dekorate will generate the following Kubernetes
    manifests. I have also kept them in the k8s directory in the source code, as sometimes
    we have to manually add or remove things from Kubernetes manifests. The Deployment
    and Service Kubernetes manifests can also be found on GitHub at [https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/blob/main/Chapter07/k8s/kubernetes.yml](https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/blob/main/Chapter07/k8s/kubernetes.yml).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译时，Dekorate将生成以下Kubernetes清单。我还将它们保存在源代码的k8s目录中，因为有时我们必须手动添加或删除Kubernetes清单中的内容。部署和服务Kubernetes清单也可以在GitHub上找到：[https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/blob/main/Chapter07/k8s/kubernetes.yml](https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/blob/main/Chapter07/k8s/kubernetes.yml)。
- en: 'After that, we need to make sure that you are authenticated to use Google Cloud
    services using the `gcloud auth list` command. You will see the following output:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要确保您已经通过`gcloud auth list`命令进行了身份验证，以便使用Google Cloud服务。您将看到以下输出：
- en: '[PRE12]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you are not authenticated, you can also use the `gcloud auth login` command.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未进行身份验证，也可以使用`gcloud auth login`命令。
- en: If it is not already set, set your GCP project using the `gcloud config set
    project <PROJECT_ID>` command.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未设置，请使用`gcloud config set project <PROJECT_ID>`命令设置您的GCP项目。
- en: 'Make sure that the Kubernetes context is set to remote Google Kubernetes cluster.
    Use the following command to verify that:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Kubernetes上下文设置为远程Google Kubernetes集群。使用以下命令进行验证：
- en: '[PRE13]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We are now ready for deployment. Let's run the `skaffold run --default-repo=gcr.io/<PROJECT_ID>`
    command.  This will build the container image of the application. Push it to the
    remote GCR.![Figure 8.30 – Image pushed to Google Container Registry
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经准备好部署。让我们运行`skaffold run --default-repo=gcr.io/<PROJECT_ID>`命令。这将构建应用程序的容器镜像，并将其推送到远程GCR。![图8.30
    – 镜像推送到Google容器注册表
- en: '](image/Figure_8.30_B17385.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.30_B17385.jpg)'
- en: Figure 8.30 – Image pushed to Google Container Registry
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.30 – 镜像推送到Google容器注册表
- en: 'The pushed image details can be seen in the following screenshot:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 推送的镜像详细信息可以在以下截图中看到：
- en: '![Figure 8.31 – Google Container Registry image view'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.31 – Google容器注册表图像视图'
- en: '](image/Figure_8.31_B17385.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.31_B17385.jpg)'
- en: Figure 8.31 – Google Container Registry image view
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.31 – Google容器注册表图像视图
- en: Finally, deploy it to a remote Google Kubernetes cluster. It takes some time
    to stabilize the deployment when you run it for the first time, but subsequent
    runs are much faster.![Figure 8.32 – Skaffold run output
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将其部署到远程Google Kubernetes集群。第一次运行时，部署需要一些时间来稳定，但后续运行会快得多。![图8.32 – Skaffold运行输出
- en: '](image/Figure_8.32_B17385.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.32_B17385.jpg)'
- en: Figure 8.32 – Skaffold run output
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.32 – Skaffold运行输出
- en: We can also view the Deployment status on Google Cloud Console. Go to **Kubernetes
    Engine**, then click on the **Workloads** tab on the left-hand side navigation
    bar to view the deployment status. The Deployment status is **OK**.![Figure 8.33
    – Deployment status
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以在Google Cloud控制台上查看部署状态。转到**Kubernetes Engine**，然后单击左侧导航栏上的**工作负载**选项卡以查看部署状态。部署状态为**OK**。![图8.33
    – 部署状态
- en: '](image/Figure_8.33_B17385.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.33_B17385.jpg)'
- en: Figure 8.33 – Deployment status
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.33 – 部署状态
- en: You can view further **Deployment** details by clicking on the application's
    name.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过单击应用程序名称查看更多**部署**详情。
- en: '![Figure 8.34 – Deployment details'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.34 – 部署详情'
- en: '](image/Figure_8.34_B17385.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.34_B17385.jpg)'
- en: Figure 8.34 – Deployment details
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.34 – 部署详情
- en: Everything looks great so far. Now we just need the IP address of the service
    so that we can access our application. On the same Deployment details page at
    the bottom, we have details about our service.![Figure 8.35 – Exposed services
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止一切看起来都很好。现在我们只需要服务的IP地址，这样我们就可以访问我们的应用程序了。在同一部署详情页面的底部，我们有关于我们的服务的详细信息。![图8.35
    – 暴露的服务
- en: '](image/Figure_8.35_B17385.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.35_B17385.jpg)'
- en: Figure 8.35 – Exposed services
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.35 – 暴露的服务
- en: Let's hit the URL and verify if we get the desired output or not. We can view
    the real-time air quality data for Delhi:![Figure 8.36 – Spring Boot application
    response
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们访问URL并验证是否获得了期望的输出。我们可以查看德里的实时空气质量数据：![图8.36 – Spring Boot应用响应
- en: '](image/Figure_8.36_B17385.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.36_B17385.jpg)'
- en: Figure 8.36 – Spring Boot application response
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.36 – Spring Boot应用响应
- en: We can verify the health of the application using actuator `/health/liveness`
    and `/health/readiness` endpoints. We have used these endpoints as liveness and
    readiness probes for pods deployed to the Kubernetes cluster.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以使用执行器`/health/liveness`和`/health/readiness`端点来验证应用程序的健康状况。我们已经将这些端点用作部署到Kubernetes集群的Pod的活跃性和就绪性探针。
- en: '![Figure 8.37 – Spring Boot application actuator probes'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.37 – Spring Boot应用执行器探针'
- en: '](image/Figure_8.37_B17385.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.37_B17385.jpg)'
- en: Figure 8.37 – Spring Boot application actuator probes
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.37 – Spring Boot应用执行器探针
- en: With these steps, we have completed the deployment of our Spring Boot application
    to a remote Google Kubernetes cluster from a local workstation using Skaffold.
    In the next section, we will learn about deploying the application from a browser-based
    Cloud Shell environment to the GKE.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些步骤，我们已经完成了使用Skaffold从本地工作站将我们的Spring Boot应用部署到远程Google Kubernetes集群。在下一节中，我们将学习如何从基于浏览器的Cloud
    Shell环境部署应用到GKE。
- en: Deploying from Cloud Shell to a GKE cluster using Skaffold
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Skaffold从Cloud Shell部署到GKE集群
- en: In this section, the focus will be on deploying the Spring Boot application
    to the GKE using the browser-based Cloud Shell tool. Let's begin!
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，重点将放在使用基于浏览器的Cloud Shell工具将Spring Boot应用部署到GKE上。让我们开始吧！
- en: The first step is to activate the Cloud Shell environment. This can be done
    by clicking on the **Activate Cloud Shell** icon in the top-right corner of Google
    Cloud Console.![Figure 8.38 – Cloud Shell editor
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是激活Cloud Shell环境。这可以通过在Google Cloud控制台右上角点击**激活Cloud Shell**图标来完成。![图8.38
    – Cloud Shell编辑器
- en: '](image/Figure_8.38_B17385.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.38_B17385.jpg)'
- en: Figure 8.38 – Cloud Shell editor
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.38 – Cloud Shell编辑器
- en: As you can see in the previous screenshot, you are asked to set your Cloud `PROJECT_ID`
    with the `gcloud config set project [PROJECT_ID]` command. You can use this if
    you know your `PROJECT_ID` or use commands like `gcloud projects list`. After
    this, Cloud Shell would ask for permission to authorize your request by making
    a call to the GCP API. You don't have to provide credentials for each request
    after this authorization.![Figure 8.39 – Authorizing Cloud Shell
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前一个截图所示，您被要求使用`gcloud config set project [PROJECT_ID]`命令设置您的Cloud `PROJECT_ID`。如果您知道您的`PROJECT_ID`，您可以使用这个命令，或者使用`gcloud
    projects list`等命令。之后，Cloud Shell将请求授权您的请求，通过调用GCP API。之后，您无需为每个请求提供凭据。![图8.39
    – 授权Cloud Shell
- en: '](image/Figure_8.39_B17385.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.39_B17385.jpg)'
- en: Figure 8.39 – Authorizing Cloud Shell
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.39 – 授权Cloud Shell
- en: We need the source code of the application in the Cloud Shell environment. Cloud
    Shell comes with a Git client installed, so we can run the `git clone` [https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-using-Skaffold.git](https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-using-Skaffold.git)
    command and clone our GitHub repository.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在Cloud Shell环境中的应用程序源代码。Cloud Shell带有安装了Git客户端，因此我们可以运行`git clone` [https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-using-Skaffold.git](https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-using-Skaffold.git)命令并克隆我们的GitHub存储库。
- en: '![Figure 8.40 – Cloning the GitHub repository'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.40 – 克隆GitHub存储库'
- en: '](image/Figure_8.40_B17385.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.40_B17385.jpg)'
- en: Figure 8.40 – Cloning the GitHub repository
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.40 – 克隆GitHub存储库
- en: 'Next, you need to compile the project so that you can generate Kubernetes manifests.
    Run the `./mvnw clean compile` command to build your project. Your build will
    fail and you will get an error:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要编译项目，以便生成Kubernetes清单。运行`./mvnw clean compile`命令来构建您的项目。您的构建将失败，并且您将收到错误：
- en: '[PRE14]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The reason for this failure is that `JAVA_HOME` is set to Java 11 in the Cloud
    Shell environment:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 失败的原因是在Cloud Shell环境中将`JAVA_HOME`设置为Java 11：
- en: '[PRE15]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We have specified in `pomx.ml` to use Java 16\. This problem can be solved by
    downloading Java 16 and setting the `JAVA_HOME` environment variable.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`pomx.ml`中指定要使用Java 16。这个问题可以通过下载Java 16并设置`JAVA_HOME`环境变量来解决。
- en: Note
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We have the right tool to solve this problem, **SDKMAN**, that can be accessed
    from [https://sdkman.io/](https://sdkman.io/). It allows you to work in parallel
    with multiple versions of **Java JDK**s. Check out the supported JDKs ([https://sdkman.io/jdks](https://sdkman.io/jdks))
    and SDKs ([https://sdkman.io/sdks](https://sdkman.io/sdks)). With the new six
    months release cycle, we get a new JDK every six months. As developers, we love
    to try and explore these features by manually downloading and changing `JAVA_HOME`
    if we need to switch to a different JDK. This whole process is manual, and with
    `SDKMAN`, we just have run a single command to download a JDK of your choice,
    and after downloading, it will even update `JAVA_HOME` to the latest downloaded
    JDK. Cool, isn't it?
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有解决这个问题的正确工具，**SDKMAN**，可以从 [https://sdkman.io/](https://sdkman.io/) 访问。它允许您并行使用多个版本的
    **Java JDK**。查看支持的 JDK（[https://sdkman.io/jdks](https://sdkman.io/jdks)）和 SDK（[https://sdkman.io/sdks](https://sdkman.io/sdks)）。随着新的六个月发布周期，我们每六个月就会获得一个新的
    JDK。作为开发人员，我们喜欢尝试和探索这些功能，通过手动下载并更改 `JAVA_HOME` 来切换到不同的 JDK。整个过程都是手动的，而使用 `SDKMAN`，我们只需运行一个命令来下载您选择的
    JDK，下载完成后，它甚至会将 `JAVA_HOME` 更新为最新下载的 JDK。很酷，不是吗？
- en: Let's try to install JDK16 with SDKMAN. Note that you don't have to install
    SDKMAN in your Cloud Shell provisioned VM instance as it comes pre-installed.
    Now enter `sdk` in your CLI, and it will show you the supported commands:![Figure
    8.41 – SDKMAN commands help
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试使用 SDKMAN 安装 JDK16。请注意，您不必在云 Shell 预配的 VM 实例中安装 SDKMAN，因为它已经预装。现在在 CLI
    中输入 `sdk`，它将显示支持的命令：![图 8.41 – SDKMAN 命令帮助
- en: '](image/Figure_8.41_B17385.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.41_B17385.jpg)'
- en: Figure 8.41 – SDKMAN commands help
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.41 – SDKMAN 命令帮助
- en: 'To learn about different supported JDKs, run the `sdk list java` command. In
    the following screenshot, you won''t be able to see all of the supported JDK vendors,
    but you get the idea:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解不同支持的 JDK，请运行 `sdk list java` 命令。在下面的截图中，您将无法看到所有支持的 JDK 供应商，但您可以了解到大致情况：
- en: '![Figure 8.42 – SDKMAN supported JDKs'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.42 – SDKMAN 支持的 JDK'
- en: '](image/Figure_8.42_B17385.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.42_B17385.jpg)'
- en: Figure 8.42 – SDKMAN supported JDKs
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.42 – SDKMAN 支持的 JDK
- en: To download a vendor-specific JDK, run the `sdk install java Identifier` command.
    In our case, the actual command will be `sdk install java 16-open`, since we have
    decided to use the OpenJDK build of Java 16\.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 要下载特定供应商的 JDK，请运行 `sdk install java Identifier` 命令。在我们的情况下，实际命令将是 `sdk install
    java 16-open`，因为我们决定使用 Java 16 的 OpenJDK 构建。
- en: '![Figure 8.43 – Installing JDK16'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.43 – 安装 JDK16'
- en: '](image/Figure_8.43_B17385.jpg)'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.43_B17385.jpg)'
- en: Figure 8.43 – Installing JDK16
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.43 – 安装 JDK16
- en: 'You might also want to run the following command to change the JDK in your
    active shell session:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还想要运行以下命令来更改活动 shell 会话中的 JDK：
- en: '[PRE16]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let's compile the project again by running the `./mvnw clean compile` command.
    In the following output, you can see that the build is successful:![Figure 8.44
    – Maven build success
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们再次通过运行 `./mvnw clean compile` 命令来编译项目。在下面的输出中，您可以看到构建成功：![图 8.44 – Maven
    构建成功
- en: '](image/Figure_8.44_B17385.jpg)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.44_B17385.jpg)'
- en: Figure 8.44 – Maven build success
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.44 – Maven 构建成功
- en: We are ready to run the command to deploy the Spring Boot application to the
    remote GKE cluster from Cloud Shell. Before that, make sure that your Kubernetes
    context is set to the remote cluster. If you are not sure, then verify it by running
    the `kubectl config current-context` command. If it is not set, then set it using
    the `gcloud container clusters get-credentials gke-autopilot-cluster1 --region
    us-east1` command, which will add the entry in the `kubeconfig` file.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们准备好从Cloud Shell运行命令，将Spring Boot应用部署到远程GKE集群。在此之前，请确保您的Kubernetes上下文已设置为远程集群。如果不确定，请通过运行`kubectl
    config current-context`命令进行验证。如果未设置，则使用`gcloud container clusters get-credentials
    gke-autopilot-cluster1 --region us-east1`命令进行设置，这将在`kubeconfig`文件中添加条目。
- en: In the last step, we just have to run the `skaffold run --default-repo=gcr.io/<PROJECT_ID>`
    command. The deployment is stabilized, and the final output is going to be the
    same as seen in *step 13* in the previous section.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一步，我们只需运行`skaffold run --default-repo=gcr.io/<PROJECT_ID>`命令。部署已稳定，最终输出将与上一节中*步骤13*中看到的相同。
- en: '![Figure 8.45 – Skaffold run output'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.45 - Skaffold运行输出'
- en: '](image/Figure_8.45_B17385.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_8.45_B17385.jpg)'
- en: Figure 8.45 – Skaffold run output
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.45 - Skaffold运行输出
- en: 'This completes the deployment of the Spring Boot application to the remote
    GKE cluster using the browser-based Cloud Shell environment. We have learned how
    we can leverage the browser-based preconfigured Cloud Shell environment for development
    purposes. If you want to play around with and try things, then this is an excellent
    feature provided by Google. However, I am not sure if you should be using it for
    your production use cases. The Google Compute Engine VM instances that are provisioned
    with Cloud Shell are provided on a per-user, per-session basis. Your VM instances
    will persist if your session is active; otherwise, they will get discarded. For
    information about the working of Cloud Shell, please go through the official documentation:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基于浏览器的Cloud Shell环境完成了将Spring Boot应用部署到远程GKE集群的过程。我们学会了如何利用基于浏览器的预配置Cloud
    Shell环境进行开发。如果您想尝试和尝试一些东西，那么这是Google提供的一个很好的功能。但是，我不确定您是否应该将其用于生产用例。使用Cloud Shell提供的Google
    Compute Engine VM实例是基于每个用户、每个会话的基础提供的。如果您的会话处于活动状态，您的VM实例将持续存在；否则，它们将被丢弃。有关Cloud
    Shell工作原理的信息，请阅读官方文档：
- en: '[https://cloud.google.com/shell/docs/how-cloud-shell-works](https://cloud.google.com/shell/docs/how-cloud-shell-works)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cloud.google.com/shell/docs/how-cloud-shell-works](https://cloud.google.com/shell/docs/how-cloud-shell-works)'
- en: Summary
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started by discussing the features and advantages of using
    cloud vendors. Then, we introduced you to the GCP. First, we covered a detailed
    walkthrough of how you can get onboard to the Cloud Platform. Next, we covered
    Google Cloud SDK, which allows you to perform various tasks such as installing
    components, creating Kubernetes clusters, and enabling different services such
    as Google Container Registry and more.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先讨论了使用云供应商的功能和优势。然后，我们向您介绍了GCP。首先，我们详细介绍了如何加入Cloud平台。接下来，我们介绍了Google
    Cloud SDK，它允许您执行各种任务，如安装组件、创建Kubernetes集群以及启用不同的服务，如Google容器注册表等。
- en: We also discussed the browser-based Cloud Shell editor, which is powered by
    Google Compute Engine VM instances. You can use this as a temporary sandbox environment
    to test various services supported by GCP. Then, we looked at two different ways
    of creating a Kubernetes cluster using Cloud SDK and Cloud Console. After that,
    we introduced you to the serverless Kubernetes offering, GKE Autopilot, and covered
    its features and advantages over standard Kubernetes clusters. Finally, we successfully
    deployed a Spring Boot application to the GKE Autopilot cluster using Skaffold
    from local and then Google Cloud Shell in the last section.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还讨论了基于浏览器的Cloud Shell编辑器，它由Google Compute Engine VM实例提供支持。您可以将其用作临时沙盒环境，以测试GCP支持的各种服务。然后，我们介绍了使用Cloud
    SDK和Cloud Console创建Kubernetes集群的两种不同方式。之后，我们向您介绍了无服务器Kubernetes提供的GKE Autopilot，并介绍了其特点和优势，以及与标准Kubernetes集群相比的优势。最后，我们使用Skaffold从本地成功将Spring
    Boot应用程序部署到GKE Autopilot集群，然后在最后一节中使用Google Cloud Shell。
- en: In this chapter, you have gained practical knowledge of GCP's managed Kubernetes
    service, as well as tools like Cloud SDK and Cloud Shell. You have also learned
    how you can use Skaffold to deploy a Spring Boot application to a remote Kubernetes
    cluster.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经获得了有关GCP托管的Kubernetes服务以及Cloud SDK和Cloud Shell等工具的实际知识。您还学会了如何使用Skaffold将Spring
    Boot应用程序部署到远程Kubernetes集群。
- en: In the next chapter, we will learn about creating a CI/CD pipeline using GitHub
    actions and Skaffold.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用GitHub actions和Skaffold创建CI/CD流水线。
- en: Further reading
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Learn more about GKE autopilot: [https://cloud.google.com/blog/products/containers-kubernetes/introducing-gke-autopilot](https://cloud.google.com/blog/products/containers-kubernetes/introducing-gke-autopilot)'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解有关GKE自动驾驶的更多信息：[https://cloud.google.com/blog/products/containers-kubernetes/introducing-gke-autopilot](https://cloud.google.com/blog/products/containers-kubernetes/introducing-gke-autopilot)
- en: 'Learn more about Google Cloud Platform: [https://cloud.google.com/docs](https://cloud.google.com/docs)'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解有关Google Cloud平台的更多信息：[https://cloud.google.com/docs](https://cloud.google.com/docs)
- en: 'Google Cloud Platform for Architects: [https://www.packtpub.com/product/google-cloud-platform-for-architects/9781788834308](https://www.packtpub.com/product/google-cloud-platform-for-architects/9781788834308)'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向架构师的Google Cloud平台：[https://www.packtpub.com/product/google-cloud-platform-for-architects/9781788834308](https://www.packtpub.com/product/google-cloud-platform-for-architects/9781788834308)
