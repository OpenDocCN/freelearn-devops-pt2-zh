- en: Cluster Federation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集群联合
- en: This chapter will discuss the new federation capabilities and how to use them
    to manage multiple clusters across cloud providers. We will also cover the federated
    version of the core constructs. We will walk you through federated Deployments,
    ReplicaSets, ConfigMaps, and Events.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论新的联合能力以及如何使用它们来管理跨云提供商的多个集群。我们还将介绍核心结构的联合版本。我们将为您介绍联合部署、副本集、配置映射和事件。
- en: 'This chapter will discuss the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论以下主题：
- en: Federating clusters
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 联合集群
- en: Federating multiple clusters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将多个集群联合起来
- en: Inspecting and controlling resources across multiple clusters
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨多个集群检查和控制资源
- en: Launching resources across multiple clusters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个集群中启动资源
- en: Introduction to federation
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍联合
- en: While **federation** is still very new in Kubernetes, it lays the ground work
    for the highly sought cross-cloud provider solution. Using federation, we can
    run multiple Kubernetes clusters on-premise and in one or more public cloud providers
    and manage applications utilizing the entire set of all our organizational resources.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 **联合** 在 Kubernetes 中仍然非常新颖，但它为高度追求的跨云提供商解决方案奠定了基础。使用联合，我们可以在本地和一个或多个公共云提供商上运行多个
    Kubernetes 集群，并管理利用我们组织的全部资源的应用程序。
- en: This begins to create a path for avoiding cloud provider lock-in and highly
    available deployment that can place application servers in multiple clusters and
    allow for communication to other services located in single points among our federated
    clusters. We can improve isolation on outages at a particular provider or geographic
    location while providing greater flexibility for scaling and utilizing total infrastructure.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这开始为避免云提供商锁定和高可用部署铺平道路，可以将应用服务器放置在多个集群中，并允许与我们的联合集群中位于单个点的其他服务进行通信。我们可以提高对特定提供商或地理位置的中断的隔离性，同时提供更大的灵活性，以便扩展和利用总体基础架构。
- en: Currently, the federation plane supports these resources (ConfigMap, DaemonSets,
    Deployment, Events, Ingress, Namespaces, ReplicaSets, Secrets, and Services).
    Note that federation and its components are in alpha and beta phases of release,
    so functionality may still be a bit temperamental.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，联合平面支持这些资源（配置映射、守护程序集、部署、事件、入口、命名空间、副本集、密码和服务）。请注意，联合及其组件处于发布的 Alpha 和 Beta
    阶段，因此功能可能仍然有些不稳定。
- en: Setting up federation
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置联合
- en: While we can use the cluster we had running for the rest of the examples, I
    would highly recommend that you start fresh. The default naming of the clusters
    and contexts can be problematic for the federation system. Note that the `--cluster-context`
    and `--secret-name` flags are there to help you work around the default naming,
    but for first-time federation, it can still be confusing and less than straightforward.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们可以使用我们为其余示例运行的集群，但我强烈建议您从头开始。集群和上下文的默认命名可能对联合系统有问题。请注意，`--cluster-context`
    和 `--secret-name` 标志旨在帮助您解决默认命名问题，但对于首次联合，可能仍然会令人困惑且不直接。
- en: 'Hence, starting fresh is how we will walk through the examples in this chapter.
    Either use new and separate cloud provider (AWS and/or GCE) accounts or tear down
    the current cluster and reset your Kubernetes control environment by running the
    following commands:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本章中我们将从头开始演示示例。可以使用新的、独立的云提供商（AWS 和/或 GCE）帐户，或者拆除当前的集群并通过运行以下命令重置 Kubernetes
    控制环境：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Double-check that nothing is listed using the following commands:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令双重检查是否列出了任何内容：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we will want to get the `kubefed` command on our path and make it executable.
    Navigate back to the folder where you have the Kubernetes download extracted. The
    `kubefed` command is located in the `/kubernetes/client/bin` folder. Run the following
    commands to get in the bin folder and change the execution permissions:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将希望将 `kubefed` 命令放到我们的路径上并使其可执行。导航回您解压 Kubernetes 下载的文件夹。`kubefed` 命令位于
    `/kubernetes/client/bin` 文件夹中。运行以下命令进入 bin 文件夹并更改执行权限：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Contexts
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上下文
- en: '**Contexts** are used by the Kubernetes control plane to keep authentication
    and cluster configuration stored for multiple clusters. This allow us to access
    and manage multiple clusters accessible from the same `kubectl`. You can always
    see the contexts available with the `get-contexts` command that we used earlier.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**上下文**由 Kubernetes 控制平面用于存储多个集群的身份验证和集群配置。这使我们能够访问和管理从同一个 `kubectl` 访问的多个集群。您可以始终使用我们之前使用过的
    `get-contexts` 命令查看可用的上下文。'
- en: New clusters for federation
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于联邦的新集群
- en: 'Again, make sure you navigate to wherever Kubernetes was downloaded and move
    into the `cluster` sub-folder:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 再次确保你导航到 Kubernetes 下载的位置，并进入`cluster`子文件夹：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Before we proceed, make sure you have the GCE command line and the AWS command
    line installed, authenticated, and configured. Refer to [Chapter 1](772262b1-5b78-4a9b-bbb4-09c6fd858fdf.xhtml),
    *Introduction to Kubernetes*, if you need assistance doing so on a new box.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保你已经安装、验证和配置了 GCE 命令行和 AWS 命令行。如果你需要在新的环境中执行此操作，请参考[第1章](772262b1-5b78-4a9b-bbb4-09c6fd858fdf.xhtml)，*Kubernetes
    简介*。
- en: First, we will create the AWS cluster. Note that we are adding an environment
    variable named `OVERRIDE_CONTEXT` that will allow us to set the context name to
    something that complies with the DNS naming standards. DNS is a critical component
    for federation as it allows us to do cross-cluster discovery and service communication.
    This is important in a federated world where clusters may be in different data
    centers and even providers.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建 AWS 集群。请注意，我们正在添加一个名为`OVERRIDE_CONTEXT`的环境变量，它将允许我们将上下文名称设置为符合 DNS
    命名标准的内容。DNS 是联邦的关键组件，因为它允许我们进行跨集群发现和服务通信。在联邦世界中，这一点至关重要，因为集群可能位于不同的数据中心甚至提供商中。
- en: 'Run these commands to create your AWS cluster:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这些命令来创建你的 AWS 集群：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, we will create a GCE cluster, once again using the `OVERRIDE_CONTEXT` environment
    variable:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`OVERRIDE_CONTEXT`环境变量再次创建一个 GCE 集群：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we take a look at our contexts now, we will notice both the `awsk8s` and
    the `gcek8s` that we just created. The star in front of `gcek8s` denotes that
    it''s where `kubectl` is currently pointing and executing against:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在看一下我们的上下文，我们会注意到我们刚刚创建的`awsk8s`和`gcek8s`。`gcek8s`前面的星号表示它是`kubectl`当前指向并执行的位置：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding command should produce something like the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令应该产生类似以下的内容：
- en: '![](img/B06302_09_01.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06302_09_01.png)'
- en: Context Listing
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文清单
- en: Initializing the federation control plane
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化联邦控制平面
- en: 'Now that we have two clusters, let''s set up the federation control plane in
    the GCE cluster. First, we''ll need to make sure that we are in the GCE context,
    and then we will initialize the federation control plane:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了两个集群，让我们在 GCE 集群中设置联邦控制平面。首先，我们需要确保我们在 GCE 上下文中，然后我们将初始化联邦控制平面：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding command creates a new context just for federation called `master-control`.
    It uses the `gcek8s` cluster/context to host the federation components (such as
    API server and controller). It assumes GCE DNS as the federations DNS service.
    You'll need to update `dns-zone-name` with a domain suffix you manage.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令创建了一个专门用于联邦的新上下文，称为`master-control`。它使用`gcek8s`集群/上下文来托管联邦组件（如 API 服务器和控制器）。它假设
    GCE DNS 作为联邦的 DNS 服务。你需要使用你管理的域后缀更新`dns-zone-name`。
- en: By default, the DNS provider is GCE. You can use `--dns-provider="aws-route53"`
    to set it to AWS `route53`; however, out of the box implementation still has issues
    for many users.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，DNS 提供商是 GCE。你可以使用`--dns-provider="aws-route53"`将其设置为 AWS `route53`；然而，开箱即用的实现对许多用户仍然存在问题。
- en: 'If we check our contexts once again we will now see three contexts:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次检查我们的上下文，我们现在会看到三个上下文：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding command should produce something like the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令应该产生类似以下的内容：
- en: '![](img/B06302_09_02.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06302_09_02.png)'
- en: 'Context Listing #2'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '上下文清单 #2'
- en: 'Let''s make sure we have all the federation components running before we proceed.
    The federation control plane uses the `federation-system` namespace. Use the `kubectl
    get pods` command with the namespace specified to monitor the progress. Once you
    see two API server pods and one controller pod you should be set:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们确保所有联邦组件都在运行。联邦控制平面使用`federation-system`命名空间。使用指定了命名空间的`kubectl get
    pods`命令来监视进度。一旦看到两个 API 服务器 pod 和一个控制器 pod，你就应该准备好了：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](img/B06302_09_03-1.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06302_09_03-1.png)'
- en: 'Federation pod listing #'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '联邦 pod 清单 #'
- en: 'Now that we have the federation components set up and running, let''s switch
    to that context for the next steps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置并运行了联邦组件，让我们切换到该上下文以进行下一步：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Adding clusters to the federation system
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将集群添加到联邦系统中
- en: 'Now that we have our federation control plane we can add the clusters to the
    federation system. First, we will join the GCE cluster and then the AWS cluster:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了联邦控制平面，我们可以将集群添加到联邦系统中。首先，我们将加入 GCE 集群，然后再加入 AWS 集群：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Federated resources
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联邦资源
- en: Federated resources allow us to deploy across multiple clusters and/or regions.
    Currently, version 1.5 of Kubernetes support a number of core resource types in
    the federation API, including ConfigMap, DaemonSets, Deployment, Events, Ingress,
    Namespaces, ReplicaSets, Secrets, and Services.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 联邦资源允许我们跨多个集群和/或区域部署。当前，Kubernetes 版本 1.5 支持联合 API 中的一些核心资源类型，包括 ConfigMap、DaemonSets、Deployment、Events、Ingress、Namespaces、ReplicaSets、Secrets
    和 Services。
- en: 'Let''s take a look at a **Federated Deployment** that will allow us to schedule
    pods across both AWS and GCE:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个**联邦部署**，它将允许我们在 AWS 和 GCE 上安排 Pods：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Listing 9-1. *`node-js-deploy-fed.yaml`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*列表 9-1. *`node-js-deploy-fed.yaml`'
- en: 'Create this deployment with the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令创建此部署：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now let''s try listing the pods from this deployment:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试列出此部署中的 Pods：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](img/B06302_09_04.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06302_09_04.png)'
- en: No pods in federation context
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 联邦上下文中没有 Pods
- en: 'We should see a message like the preceding one depicted. This is because we
    are still using the `master-control` or federation context, which does not itself
    run pods. We will, however, see the deployment in the federation plane and if
    we inspect the events we will see that the deployment was in fact created on both
    our federated clusters:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到类似于上述所示的消息。这是因为我们仍在使用 `master-control` 或联邦上下文，该上下文本身不运行 Pods。然而，我们将在联邦平面上看到部署，并且如果我们检查事件，我们将看到部署实际上是在我们的联合集群上创建的：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We should see something like the following. Notice that the `Events:` section
    shows deployments in both our GCE and AWS contexts:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到类似以下的内容。请注意，`Events:` 部分显示了我们在 GCE 和 AWS 上的部署情况：
- en: '![](img/B06302_09_05-1.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06302_09_05-1.png)'
- en: Federated pod Deployment
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 联邦 Pods 部署
- en: 'We can also see the federated events using the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用以下命令查看联邦事件：
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](img/B06302_09_06-1.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06302_09_06-1.png)'
- en: Federated events
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 联邦事件
- en: 'It may take a moment for all three pods to run. Once that happens, we can switch
    to each cluster context and see some of the pods on each. Note that we can now
    use `get pods` since we are on the individual clusters and not on the control
    plane:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 所有三个 Pods 都运行可能需要一段时间。一旦发生这种情况，我们就可以切换到每个集群上下文，并在每个集群上看到一些 Pods。请注意，我们现在可以使用
    `get pods`，因为我们在各个集群上而不是在控制平面上：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](img/B06302_09_07-1.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06302_09_07-1.png)'
- en: Pods on the AWS cluster
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 集群上的 Pods
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](img/B06302_09_08.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06302_09_08.png)'
- en: Pods on the GCE cluster
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: GCE 集群上的 Pods
- en: We should see the three pods spread across the clusters with two on one and
    a third on the other. Kubernetes has spread it across the cluster without any
    manual intervention. Any pods that fail will be restarted, but now we have the
    added redundancy of two cloud providers.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到三个 Pods 分布在集群中，其中两个在一个集群上，第三个在另一个集群上。Kubernetes 在没有任何手动干预的情况下将其分布在集群中。任何失败的
    Pods 将被重新启动，但现在我们增加了两个云提供商的冗余性。
- en: Federated configurations
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联邦配置
- en: In modern software development, it is common to separate configuration variables
    from the application code itself. In this way it is easier to make updates to
    service URLs, credentials, common paths, and so on. Having these values in external
    configuration files means we can easily update configuration without rebuilding
    the entire application.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代软件开发中，将配置变量与应用代码本身分离是很常见的。这样做可以更容易地更新服务 URL、凭据、常见路径等。将这些值放在外部配置文件中意味着我们可以在不重新构建整个应用程序的情况下轻松更新配置。
- en: This separation solves the initial problem, but true portability comes when
    you can remove the dependency from the application completely. Kubernetes offers
    a configuration store for exactly this purpose. **ConfigMaps** are simple constructs
    that store key-value pairs.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这种分离解决了最初的问题，但真正的可移植性是当您完全从应用程序中移除依赖关系时实现的。Kubernetes 提供了一个专门用于此目的的配置存储。**ConfigMaps**
    是存储键值对的简单结构。
- en: Kubernetes also supports **Secrets** for more sensitive configuration data.
    This will be covered in more detail in [Chapter 10](3e204a07-a7dd-41d2-806d-f9995a1a9e7f.xhtml),
    *Container Security*. You can use the example there in both single clusters or
    on the federation control plane as we are demonstrating with ConfigMaps here.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 还支持用于更敏感的配置数据的**Secrets**。这将在[第 10 章](3e204a07-a7dd-41d2-806d-f9995a1a9e7f.xhtml)
    *容器安全性*中更详细地介绍。您可以在单个集群上或在我们此处演示的联邦控制平面上使用该示例，就像我们在这里使用 ConfigMaps 一样。
- en: 'Let''s take a look at an example that will allow us to store some configuration
    and then consume it in various pods. The following listings will work for both
    federated and single clusters, but we will continue using a federated setup for
    this example. The `ConfigMap` kind can be created using literal values, flat files
    and directories, and finally YAML definition files. The following listing is a
    YAML definition file:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个示例，让我们能够存储一些配置，然后在各种pod中使用它。以下清单将适用于联合和单个集群，但我们将继续为此示例使用联合设置。`ConfigMap`种类可以使用文字值、平面文件和目录，最后是YAML定义文件创建。以下清单是一个YAML定义文件：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Listing 9-2*: `configmap-fed.yaml`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 9-2*: `configmap-fed.yaml`'
- en: 'Let''s first switch back to our federation plane:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先切换回我们的联合平面：
- en: '[PRE20]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, create this listing with the following command:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下命令创建此清单：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let''s display the `configmap` object that we just created. The `-o yaml` flag
    helps us display the full information:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们显示我们刚刚创建的`configmap`对象。`-o yaml`标志帮助我们显示完整的信息：
- en: '[PRE22]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](img/B06302_09_09.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06302_09_09.png)'
- en: Federated ConfigMap description
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 联合`ConfigMap`描述
- en: 'Now that we have a `ConfigMap` object, let''s start up a federated `ReplicaSet` that
    can use the `ConfigMap`. This will create replicas of pods across our cluster
    that can access the `ConfigMap` object. ConfigMapscan be accessed via environment
    variables or mount volumes. This example will use a mount volume that provides
    a folder hierarchy and the files for each key with the contents representing the
    values:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个`ConfigMap`对象，让我们启动一个可以使用`ConfigMap`的联合`ReplicaSet`。这将在我们的集群中创建可以访问`ConfigMap`对象的pod的副本。`ConfigMap`可以通过环境变量或挂载卷进行访问。这个示例将使用一个提供文件夹层次结构和每个键内容表示值的挂载卷：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '*Listing 9-3*: `configmap-rs-fed.yaml`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '*Listing 9-3*: `configmap-rs-fed.yaml`'
- en: 'Create this pod with `kubectl create -f configmap-rs-fed.yaml`. After creation,
    we will need to switch contexts to one of the clusters where the pods are running.
    You can choose either, but we will use the GCE context here:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`kubectl create -f configmap-rs-fed.yaml`创建此pod。创建后，我们将需要切换上下文到其中一个运行pod的集群。您可以随意选择，但我们将在这里使用GCE上下文：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now that we are on the GCE cluster specifically, let''s check the `configmaps` here:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们专门在GCE集群上，让我们检查这里的`configmaps`：
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'As you can see, the `ConfigMap` is propagated locally to each cluster. Next,
    let''s find a pod from our federated `ReplicaSet`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`ConfigMap`本地传播到每个集群。接下来，让我们从我们的联合`ReplicaSet`中找到一个pod：
- en: '[PRE26]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![](img/B06302_09_10.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B06302_09_10.png)'
- en: Pods on the GCE cluster
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: GCE集群上的Pods
- en: 'Let''s take one of the `node-js-rs` pod names from the listing and run a bash
    shell with `kubectl exec`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从清单中选取一个`node-js-rs` pod 名称，并使用`kubectl exec`运行一个bash shell：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then change directories to the `/etc/config` folder that we set up in the pod
    definition. Listing this directory reveals a single file with the name of the
    `ConfigMap` we defined earlier:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后更改目录到我们在pod定义中设置的`/etc/config`文件夹。列出这个目录会显示一个名为我们之前定义的`ConfigMap`的单个文件：
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If we then display the contents of the files with the following command, we
    should see the value we entered earlier: `my-backend-service`:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们然后用以下命令显示文件的内容，我们应该看到我们之前输入的值：`my-backend-service`：
- en: '[PRE29]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If we were to look in any of the pods across our federated cluster we would
    see the same values. This is a great way to decouple configuration from an application
    and distribute it across our fleet of clusters.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看联合集群中任何一个pod，我们将看到相同的值。这是一种很好的方式，可以将配置从应用程序中解耦并分布到我们的集群中。
- en: Other federated resources
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他联合资源
- en: So far we saw federated Deployments, ReplicaSets, Events, and ConfigMaps in
    action. DaemonSets, Ingress, Namespaces, Secrets, and Services are also supported. Your
    specific setup will vary and you may have a set of clusters that differ from our
    example here. As mentioned earlier, these resources are still in beta, so it's
    worth spending some time to experiment with the various resource types and understand
    how well the federation constructs are supported for your particular mix of infrastructure.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到了联合部署、ReplicaSets、事件和ConfigMaps在行动中。`DaemonSets`、`Ingress`、`Namespaces`、`Secrets`和`Services`也受到支持。您的具体设置将有所不同，您可能会有一组与我们此处示例不同的集群。如前所述，这些资源仍处于测试阶段，因此值得花些时间尝试各种资源类型，并了解联合构造对您的特定基础设施组合的支持情况。
- en: True multi-cloud
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 真正的多云
- en: This is an exciting space to watch. As it grows it gives us a really good start
    to doing multi-cloud implementations and providing redundancy across regions,
    data centers, and even cloud providers.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个值得关注的激动人心的领域。随着它的发展，我们有一个真正良好的开始来进行多云实现，并在地区、数据中心甚至云提供商之间提供冗余。
- en: While Kubernetes does provide an easy and exciting path to multi-cloud infrastructure,
    it's important to note that production multi-cloud requires much more than distributed
    deployments. A full set of capabilities from logging and monitoring to compliance
    and host-hardening, there is much to manage in a multi-provider setup.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Kubernetes 提供了一条简便且令人兴奋的多云基础设施路径，但重要的是要注意，生产多云需要比分布式部署更多的东西。从日志记录和监控到合规性和主机加固的全套功能，在多提供商设置中有很多要管理的内容。
- en: True multi-cloud adoption will require a well-planned architecture, and Kubernetes
    takes a big step forward in pursuing this goal.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的多云采用将需要一个精心规划的架构，而 Kubernetes 在追求这一目标上迈出了一大步。
- en: Summary
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at the new federation capabilities in Kubernetes.
    We saw how we can deploy clusters to multiple cloud providers and manage them
    from a single control plane. We also deployed an application across clusters in
    both AWS and GCE. While these features are new and still mainly in alpha and beta,
    we should now have the skills to utilize them as they evolve and become part of
    the standard Kubernetes operating model.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 Kubernetes 中的新联邦能力。我们看到了如何将集群部署到多个云提供商，并从单个控制平面管理它们。我们还在 AWS 和 GCE
    中的集群中部署了一个应用程序。虽然这些功能是新的，仍主要处于 alpha 和 beta 阶段，但我们现在应该有能力利用它们，并将其作为标准 Kubernetes
    运行模型的一部分。
- en: In the next chapter, we will take a look at another advanced topic, security.
    We will cover the basics for secure containers and also how to secure your Kubernetes
    cluster. We will also look at the Secrets construct, which gives us the capability
    to store sensitive configuration data similar to our preceding `ConfigMap` example.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨另一个高级话题，安全性。我们将介绍安全容器的基础知识，以及如何保护您的 Kubernetes 集群。我们还将研究 Secrets
    结构，它使我们能够存储类似于我们之前的 `ConfigMap` 示例中的敏感配置数据。
