- en: Ansible Inventory and Playbook
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible清单和playbook
- en: 'Now that we have Ansible installed, we can move on to the next milestone. We
    are now going to explore two major features: Ansible inventory, for client host
    organization, and Ansible playbooks, to demonstrate how to write Ansible play
    scripts. These two functionalities combined are the foundation for Ansible''s
    automation and orchestration. This chapter will cover how to use Ansible for quick
    commands or modules. We will also look at how to use its inventory to identify
    and configure hosts'' access and group them either statically or dynamically.
    Finally, we will introduce Ansible playbook and look at its actions, its handler,
    and its variables. We will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Ansible，可以继续进行下一个里程碑。我们现在将探索两个主要功能：Ansible清单，用于客户端主机组织，以及Ansible playbooks，演示如何编写Ansible
    play脚本。这两个功能的结合是Ansible自动化和编排的基础。本章将介绍如何使用Ansible进行快速命令或模块。我们还将看看如何使用其清单来识别和配置主机的访问权限，并将它们静态或动态地分组。最后，我们将介绍Ansible
    playbook，并查看其操作、处理程序和变量。我们将涵盖以下主题：
- en: Using simple Ansible commands with manually set hosts
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用手动设置主机的简单Ansible命令
- en: Setting up our first Ansible static inventory
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置我们的第一个Ansible静态清单
- en: Setting up and configuring a group inventory
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置和配置组清单
- en: Setting up and configuring a dynamic inventory
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置和配置动态清单
- en: Ansible playbook overview and usage
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible playbook概述和用法
- en: Ansible playbook best practices
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible playbook最佳实践
- en: Advanced Ansible playbook features
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级Ansible playbook功能
- en: Basic Ad hoc commands on Ansible
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible上的基本临时命令
- en: When automating or orchestrating tasks, Ansible is mainly used with playbooks
    to allow subtasks to be scripted and organized in a handy pipeline. However, Ansible
    also has various ad hoc commands. These allow the execution of a module on a host,
    or group of hosts, no matter how they are identified.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动化或编排任务时，Ansible主要与playbooks一起使用，以允许子任务被脚本化并组织在一个方便的管道中。然而，Ansible也有各种临时命令。这些允许在主机上执行模块，无论它们如何被识别。
- en: 'Once Ansible is installed, the ad hoc command line can be used directly. It
    can be easily tested, either by using it with the raw module or with some simple
    modules, such as `ping` or `shell`. As a quick example, each Ansible instance
    can ping itself using the following command:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Ansible之后，可以直接使用临时命令行。可以通过使用原始模块或一些简单的模块（如`ping`或`shell`）来轻松测试它。举个快速的例子，每个Ansible实例都可以使用以下命令对自己进行ping测试：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We should see the following output:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到以下输出：
- en: '![](assets/74a77b4d-21f1-4c4c-bd5e-8ba11452699b.png)The `-m` option indicates the
    module name that will be used while the task is running.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/74a77b4d-21f1-4c4c-bd5e-8ba11452699b.png)`-m`选项表示任务运行时将使用的模块名称。'
- en: Some could question the Ansible ad hoc commands usefulness. They are actually
    a great way to test your tasks in depth, thereby making it easier to debug step-by-step
    smaller bits of a bigger task and capture the error location or troubleshoot slow
    requests. For beginners, running simple commands may help to master the basic
    operation of the tool by solving simpler tasks and going up a notch until you
    reach more complex tasks—it's better to learn how to walk before you start running.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人可能会质疑Ansible临时命令的用处。实际上，它们是测试任务深度的一种很好的方式，从而更容易逐步调试更大任务的较小部分，并捕获错误位置或排除慢请求。对于初学者来说，运行简单的命令可能有助于通过解决简单的任务来掌握工具的基本操作，并逐步提升到更复杂的任务——在开始奔跑之前最好先学会走路。
- en: 'The most common use for Ansible ad hoc commands is to run raw commands. A raw
    command is basically any line of Bash or PowerShell code to be sent to the host
    or hosts as is:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible临时命令最常见的用途是运行原始命令。原始命令基本上是要发送到主机或主机的任何Bash或PowerShell代码：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Something like the following output will appear after executing the command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令后，将出现类似以下输出：
- en: '![](assets/d2e5bbab-664b-449e-ad31-69b21f13539b.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d2e5bbab-664b-449e-ad31-69b21f13539b.png)'
- en: 'Let''s try to run a command on a different host. For this, we need the host''s
    IP address or a fully qualified hostname, and a user where we can copy the SSH
    key. This can be done by physically copying the key to the user''s `~/.ssh` folder,
    or it can be done using the `ssh-copyid` command mentioned in [Chapter 2](cb196d17-b8ea-44f5-8114-4a91ae541566.xhtml),
    *Ansible Setup and Configuration*. After that, we run the following raw command
    to get information about the host:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试在不同的主机上运行一个命令。为此，我们需要主机的IP地址或完全合格的主机名，以及一个可以复制SSH密钥的用户。这可以通过物理复制密钥到用户的`~/.ssh`文件夹来完成，也可以使用[第2章](cb196d17-b8ea-44f5-8114-4a91ae541566.xhtml)中提到的`ssh-copyid`命令来完成，*Ansible设置和配置*。之后，我们运行以下原始命令来获取有关主机的信息：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This ad hoc command will produce an output as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个临时命令将产生以下输出：
- en: '![](assets/403e9087-8b8a-4c1f-918b-2be8d9ab2b06.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/403e9087-8b8a-4c1f-918b-2be8d9ab2b06.png)'
- en: 'Alternatively, we can try and make the host perform an elevated task that requires
    superuser privileges:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以尝试让主机执行需要超级用户权限的提升任务：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is what the output should look like when executing the preceding command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述命令时，输出应该如下所示：
- en: '![](assets/e771ea35-e758-41d8-a7ae-52595b1fc952.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e771ea35-e758-41d8-a7ae-52595b1fc952.png)'
- en: 'If we use this command without the `--become` option, it will fail with a `permission
    denied` error message:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在不使用`--become`选项的情况下使用这个命令，它将失败，并显示`permission denied`错误消息：
- en: '![](assets/bb228bf1-d11b-4c0b-8bbf-00a8f4685143.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bb228bf1-d11b-4c0b-8bbf-00a8f4685143.png)'
- en: 'This same task can be performed using Ansible modules. To do so, we use the
    `-m` option, followed by the name of the module and its arguments after the `-a`
    option, as shown in the following example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用Ansible模块执行相同的任务。为此，我们使用`-m`选项，后面跟着模块的名称和`-a`选项后的参数，如下例所示：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Ansible also allows you to run tasks as another user by using the `--become`
    option to elevate the current user to a superuser, then selecting which user to
    use to run the command. It can also be done using the `-e` option and defining
    the variables in its input. The two commands are as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible还允许您使用`--become`选项以另一个用户身份运行任务，将当前用户提升为超级用户，然后选择要用于运行命令的用户。也可以使用`-e`选项并在其输入中定义变量来完成。两个命令如下：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is what the output should look like when executing the preceding playbook:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述playbook时，输出应如下所示：
- en: '![](assets/0ca3ee88-6294-408f-bfaa-59eb7715d795.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0ca3ee88-6294-408f-bfaa-59eb7715d795.png)'
- en: 'The ad hoc commands can also be used for a quick file transfer to multiple
    machines. We can either use a raw command, relying on `scp` or `rsync`, or we
    can also use the Ansible `copy` module. To be able to perform tasks on multiple
    hosts, we recommend using a quick static inventory. This can be done by adding
    a few lines to the `/etc/ansible/hosts` file or any other location that the Ansible
    configuration file points to. The file should look as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 临时命令也可以用于快速向多台机器传输文件。我们可以使用原始命令，依赖于`scp`或`rsync`，也可以使用Ansible的`copy`模块。为了能够在多个主机上执行任务，我们建议使用快速静态清单。可以通过向`/etc/ansible/hosts`文件或Ansible配置文件指向的任何其他位置添加几行来完成。文件应如下所示：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Grouping the three hosts under the `servers` name allows us to run tasks on
    all three hosts just by calling their group name. This is shown in the following
    example:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将三个主机分组到`servers`名称下，允许我们通过调用它们的组名来在所有三个主机上运行任务。这在以下示例中显示：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Some tasks are so simple that writing a playbook to achieve them is a huge
    waste of time. Also, any Ansible ad hoc command can be made into a playbook—an
    Ansible user could always try some of the commands and verify their parameters,
    before adding them to the playbook pipeline or workflow. This is a great way of
    troubleshooting and applying a quick update or fix on the fly. The following example
    shows how we can restart a replicate of web servers one at a time by setting the
    number of forks to one (with the `-f` option). This applies the restart command
    host by host:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有些任务非常简单，编写playbook来完成它们是巨大的时间浪费。此外，任何Ansible临时命令都可以转换为playbook——Ansible用户可以在将其添加到playbook管道或工作流之前尝试一些命令并验证其参数。这是故障排除和在运行时应用快速更新或修复的好方法。以下示例显示了如何通过将forks的数量设置为一（使用`-f`选项）逐个重新启动Web服务器的副本。这逐个应用重启命令：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Ansible inventory
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible清单
- en: Ansible host management is simpler by far than all other configuration management
    and orchestration tools. It is basically a simple `.ini` file that contains a
    list of IP addresses, fully qualified hostnames, or short hostnames of the host
    clients. It also sometimes contains extra variables that define some aspects about
    the hosts. Generally, hosts are organized in groups with the name of the group
    put on top between two square brackets, such as `[Group1]`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 远比所有其他配置管理和编排工具简单。基本上是一个包含主机客户端的IP地址、完全合格的主机名或短主机名列表的简单`.ini`文件。有时还包含定义主机某些方面的额外变量。通常，主机以组名放在两个方括号之间组织，例如`[Group1]`。
- en: Adding a new host is as easy and simple as adding a new line to the host file,
    making sure it is in the right group and that it has the right variables needed
    to manage it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新主机与添加新行到主机文件一样简单，确保它在正确的组中，并且具有管理所需的正确变量。
- en: 'In the default Ansible configuration file, the inventory file is located at
    `/etc/ansible/hosts`. It is an `.ini` file with simple text and a basic structure
    composed of sections, properties, and values. Being the default location, however,
    does not make it the best. In many cases, Ansible can be used by non-root users
    who do not have the privileges to edit files located outside their home directory.
    Our recommendation for such an environment is to have all Ansible configuration
    files located in a folder within the home directory of the user. This means that
    these users can alter their configuration to accommodate their needs. Other than
    changing the Ansible configuration file to point to a different inventory location,
    we can also choose an inventory file while executing either an Ansible ad hoc
    command or a playbook by adding the `-i` option, followed by the location of the
    inventory file:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认的Ansible配置文件中，清单文件位于`/etc/ansible/hosts`。它是一个`.ini`文件，包含简单的文本和基本结构，由部分、属性和值组成。然而，作为默认位置并不意味着它是最佳位置。在许多情况下，无法编辑位于家目录之外的文件的非根用户可以使用Ansible。我们建议在用户的家目录内的文件夹中放置所有Ansible配置文件。这意味着这些用户可以更改其配置以适应其需求。除了更改Ansible配置文件以指向不同的清单位置，我们还可以通过添加`-i`选项，后跟清单文件的位置，来在执行Ansible临时命令或playbook时选择清单文件：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Or, we can use the following
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以使用以下
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The Ansible inventory does not just serve to arrange alike hosts; it is also
    much more useful when orchestrating tasks. Having several hosts that provide the
    same type of service (such as web servers, database controllers, or Web APIs)
    grouped in one group allows for a smarter and more efficient group control. A
    good host classification means that you can be more precise when applying fixes
    or optimizations to a specific service. Hosts can be part of multiple groups to
    allow them to answer to each task that is sent toward each specific aspect that
    they possess:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible清单不仅用于安排类似的主机；在编排任务时也更加有用。将提供相同类型服务的多个主机（如Web服务器、数据库控制器或Web API）分组到一个组中，可以实现更智能和高效的组控制。良好的主机分类意味着在对特定服务应用修复或优化时可以更精确。主机可以属于多个组，以便它们可以响应发送到它们拥有的每个特定方面的每个任务：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'There are two types of inventory in Ansible: static and dynamic. In a small
    to medium environment or infrastructure, a static inventory should do just fine.
    However, when there is a very large number of hosts, the tasks can get complicated
    and errors may start to arise. A dynamic inventory relies on a third-party service, such
    as AWS EC2, Rackspace, and OpenStack, to provide it with its inventory. There
    is always the possibility of scripting your way through and filling your Ansible
    static host inventory files, which can be handy if you know what you are doing.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible有两种清单：静态和动态。在小到中等规模的环境或基础设施中，静态清单应该足够了。然而，当主机数量非常多时，任务可能变得复杂，错误可能开始出现。动态清单依赖于第三方服务，比如AWS
    EC2、Rackspace和OpenStack，来提供清单。总是有可能通过脚本填充Ansible静态主机清单文件，如果你知道你在做什么，这可能会很方便。
- en: When adding hosts with a similar pattern to an Ansible inventory file, we can
    simplify its syntax by changing the different pattern with a counter block, as
    in the following examples.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当向Ansible清单文件添加具有相似模式的主机时，我们可以通过将不同模式更改为计数块来简化其语法，如下面的示例所示。
- en: 'This is the original inventory:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是原始清单：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is the simplified inventory:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是简化的清单：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This inventory syntax is not limited to numbers in specific formats. It can
    also be used for alphabetic enumeration, that is, `[a:z]` or `[A:Z]`, or numbers
    with specific digits, such as `[001:250]`. It can be placed at any location in
    the hostname.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这种清单语法不仅限于特定格式的数字。它也可以用于字母枚举，即`[a:z]`或`[A:Z]`，或具有特定数字的数字，如`[001:250]`。它可以放置在主机名的任何位置。
- en: 'First let''s talk about the Ansible static inventory. As its name implies,
    it is a static host organisation in a text file. By default, it is an `.ini` file
    that is very simply structured in lines with values:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先让我们谈谈Ansible静态清单。顾名思义，它是一个文本文件中的静态主机组织。默认情况下，它是一个非常简单的`.ini`文件，结构化为带有值的行：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Alternatively, it can be a YAML file, structured like a Python script structure:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，它可以是一个YAML文件，结构化为Python脚本结构：
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Most of our inventory examples will be written in the `.ini` file format. While
    the YAML format looks prettier and neater, it is easier and faster to write in
    .`ini` format.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的大多数清单示例将以`.ini`文件格式编写。虽然YAML格式看起来更漂亮、更整洁，但在`.ini`格式中编写起来更容易、更快。
- en: 'A host inventory should be tolerant to all kinds and shapes of hosts. The Ansible
    inventory can accommodate these differences by introducing host and group variables.
    This is basically a way of defining each host or group with a certain aspect to
    help Ansible with its management. Host variables are very specific to the host
    and can only affect that host. The most commonly defined host variables are as
    follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 主机清单应该对各种类型和形状的主机都具有容忍性。Ansible清单可以通过引入主机和组变量来容纳这些差异。这基本上是一种定义每个主机或组的特定方面以帮助Ansible进行管理的方式。主机变量非常特定于主机，只能影响该主机。最常定义的主机变量如下：
- en: '`ansible_user`: This value defines which user Ansible will be using to manage
    the host. It has the same function as the `-u` option, which is used in the ad
    hoc command.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible_user`：这个值定义了Ansible将使用哪个用户来管理主机。它的功能与`-u`选项相同，该选项用于临时命令。'
- en: '`ansible_host`: Some hosts may not be located in the DNS server, or we may
    want to give them different names. This variable allows us to point to the IP
    address of the host without checking how we choose to name it in the inventory.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible_host`：有些主机可能不在DNS服务器中，或者我们可能想要给它们不同的名称。这个变量允许我们指向主机的IP地址，而不用检查我们选择在清单中如何命名它。'
- en: '`ansible_port`: This is also known as `host1:port`. This is used when the hosts
    are accessible via a certain port other than the default.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible_port`：这也被称为`host1:port`。当主机通过某个端口而不是默认端口可访问时使用。'
- en: '`ansible_connection`: This varies between `ssh`, the default connection; `local`,
    to communicate with the local machine; and `docker`, for running commands directly
    in Docker containers that rely on the local machine''s Docker client. We will
    cover Ansible Docker usage in more detail in [Chapter 8](43750355-ab57-4d16-b464-10d2a47be2ea.xhtml),
    *Ansible Advanced Features*.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible_connection`：这在`ssh`之间变化，是默认连接；`local`，用于与本地机器通信；和`docker`，用于在依赖于本地机器的Docker客户端的Docker容器中直接运行命令。我们将在[第8章](43750355-ab57-4d16-b464-10d2a47be2ea.xhtml)中更详细地介绍Ansible
    Docker的用法，*Ansible高级特性*。'
- en: '`ansible_become`: This option, when present, forces the host to execute all
    the commands on an elevated privilege (`sudo`).'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible_become`：当存在时，此选项会强制主机以提升的特权（`sudo`）执行所有命令。'
- en: '`ansible_become_user`: This allows Ansible to run a command as a specific user
    other than the remote access user.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible_become_user`：这允许Ansible以特定用户而不是远程访问用户的身份运行命令。'
- en: '`ansible_ssh_pass`: This specifies the password to be used to access the host.
    This is not recommended, since the user''s password will be written in plain text.
    The next option is better.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible_ssh_pass`：这指定要用于访问主机的密码。这是不推荐的，因为用户的密码将以明文形式写入。下一个选项更好。'
- en: '`ansible_ssh_private_key_file`: This option specifies the location of the private
    SSH key to be used to access this VM. This is much more secure than writing the
    password in plain text.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ansible_ssh_private_key_file`：此选项指定要用于访问此VM的私有SSH密钥的位置。这比以明文形式写入密码更安全。'
- en: 'This is a sample configuration:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例配置：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Some host variables can be defined under the group flag, especially when the
    hosts share the same admin username or SSH key. The group-specific variables are
    defined in the same way as the host variable, in a very simple text format. Group
    variables, however, have an extra feature: they can be defined in two ways, either
    on the inventory file or on separate files. By default, Ansible looks for them
    in the `/etc/ansible/group_vars/` folder.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一些主机变量可以在组标志下定义，特别是当主机共享相同的管理员用户名或SSH密钥时。组特定的变量以与主机变量相同的方式定义，以非常简单的文本格式。然而，组变量有一个额外的特性：它们可以以两种方式定义，要么在清单文件中，要么在单独的文件中。默认情况下，Ansible会在`/etc/ansible/group_vars/`文件夹中查找它们。
- en: 'Defining group variables in the inventory file should look like the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在清单文件中定义组变量应该如下所示：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: When running a task on a single host, or a part of a group that has its variables
    defined, those variables will be applied to the host as if they are host variables.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在单个主机上运行任务，或者在已定义其变量的组的一部分上运行任务时，这些变量将被应用到主机上，就好像它们是主机变量一样。
- en: 'Host groups can also be organized into groups using the `:children` suffix
    in `.ini` files and the `children:` entry in the YAML files. This is how it looks
    in an INI format:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 主机组也可以在`.ini`文件中使用`:children`后缀和YAML文件中的`children:`条目进行组织。这是在INI格式中的样子：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Any variable applied to the parent group will get flattened to the hosts of
    each sub-group or child group. However, the variable of the sub-group overrides
    the parent variables:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 应用于父组的任何变量都会被展开到每个子组或子组的主机上。但是，子组的变量会覆盖父变量：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The method recommended by Ansible is to define the group variables by storing
    them away from the inventory file and in the `group_vars` folder in separate YAML
    or JSON files. We will mainly be using the YAML format for the group variables
    file, as shown here:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible推荐的方法是通过将组变量存储在远离清单文件的`group_vars`文件夹中的单独的YAML或JSON文件中进行定义。我们主要将使用YAML格式的组变量文件，如下所示：
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Each file will look as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 每个文件看起来如下：
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Hosts can also have their variables stored in a YAML file. By default, this
    is located in the `/etc/ansible/host_vars/` folder. They share the same structure
    as the group variable files.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 主机也可以在YAML文件中存储它们的变量。默认情况下，这些文件位于`/etc/ansible/host_vars/`文件夹中。它们与组变量文件具有相同的结构。
- en: Variables defined in the playbook directory override those in the inventory
    directory. We will look closely at the playbook directory in the next section.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在playbook目录中定义的变量会覆盖清单目录中的变量。我们将在下一节仔细研究playbook目录。
- en: Ansible also supports importing an inventory from other third-party frameworks,
    such as cloud providers, LDAP servers, or Cobbler. For each of these, there is
    a specific import script that needs to be executed with Ansible after the `-i`
    option for inventory selection. This starts the communication between Ansible
    and the third-party API that returns the inventory list. The execution should
    happen after filling in an `.ini` file with the appropriate parameters of the
    third-party server or API.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible还支持从其他第三方框架（如云提供商、LDAP服务器或Cobbler）导入清单。对于这些情况，需要在选择清单后使用Ansible执行特定的导入脚本。这开始了Ansible与第三方API之间的通信，返回清单列表。在填写了适当的第三方服务器或API的`.ini`文件参数后，执行应该发生。
- en: Ansible playbook
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible playbook
- en: Now things are starting to get interesting. Using Ansible playbooks, we will
    be able to achieve configuration management, orchestration, provisioning, and
    deployment. Playbook scripting uses the Ansible ad hoc commands in a more organized
    way, similar to the way in which shell scripting arranges shell commands to execute
    a task on a system, but more advanced than that. Ansible playbooks can set up
    and configure complex environments on bare metal, virtually, or on the cloud.
    It can sequence multi-tier machine roll-outs; apply systems, devices, and application
    patches and fixes; gather data from hosts or monitoring services; and act accordingly
    to send immediate actions to servers, network devices, and load balancers. All
    of these tasks can be delegated to other servers.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在事情开始变得有趣起来了。使用Ansible playbooks，我们将能够实现配置管理、编排、提供和部署。Playbook脚本使用Ansible临时命令以更有组织的方式，类似于shell脚本安排shell命令来执行系统上的任务，但比那更高级。Ansible
    playbooks可以在裸机、虚拟环境或云上设置和配置复杂的环境。它可以对多层机器进行部署；应用系统、设备和应用程序补丁和修复；从主机或监控服务收集数据；并相应地发送立即操作到服务器、网络设备和负载均衡器。所有这些任务可以委托给其他服务器。
- en: Playbooks are coded in a YAML data serialization format. This is a human-readable
    formatting, allowing the developer an easier sharing of their code and better
    organization as part of team projects. YAML is a very simple language compared
    to a traditional coding/scripting language.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Playbooks以YAML数据序列化格式编码。这是一种人类可读的格式，允许开发人员更轻松地共享他们的代码，并作为团队项目的一部分更好地组织。与传统的编码/脚本语言相比，YAML是一种非常简单的语言。
- en: 'Playbooks cannot do much on their own without their Ansible modules, which
    you can either get from Ansible Galaxy or build yourself. Modules will be explained
    in more detail in the next chapter. A playbook script runs multiple *plays*. Each
    one executes a number of *tasks*, which are composed of a number of modules on
    selected hosts from the Ansible inventory or from an external inventory, if this
    option is selected. These modules apply certain configuration changes, updates,
    or fixes to the selected hosts, depending on the nature of the module. A simple
    playbook running one play with one module to update the package manager cache
    is shown as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 没有Ansible模块的支持，playbooks不能做太多事情，你可以从Ansible Galaxy获取模块，也可以自己构建。模块将在下一章节中详细解释。Playbook脚本运行多个*plays*。每个play执行多个*tasks*，这些tasks由Ansible清单中的选定主机上的多个模块组成，或者来自外部清单，如果选择了这个选项。这些模块应用特定的配置更改、更新或修复到选定的主机，取决于模块的性质。一个简单的playbook运行一个play，其中包含一个模块来更新软件包管理器缓存，如下所示：
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, we fill it in with the following code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们用以下代码填充它：
- en: '[PRE23]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: YAML requires a very strict file structure when writing its files. Well-aligned
    action parameters are very important for the success of the playbook file.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写文件时，YAML要求非常严格的文件结构。对于playbook文件的成功，对齐良好的操作参数非常重要。
- en: 'We save the file and then run the `ansible-playbook` command as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们保存文件，然后运行`ansible-playbook`命令如下：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following output from the playbook''s execution shows if the playbook''s
    has made a change to the hosts:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: playbook执行的以下输出显示了playbook是否对主机进行了更改：
- en: '![](assets/c4ff726e-e56a-4bf6-9d3e-52236844a51b.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c4ff726e-e56a-4bf6-9d3e-52236844a51b.png)'
- en: As you can see, a task called gathering facts has been executed within our simple
    playbook. This is a task that runs the module setup, which collects all of the
    useful information about the host or hosts in question.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们的简单剧本中执行了一个名为收集事实的任务。这是运行模块设置的任务，它收集有关所讨论的主机或主机的所有有用信息。
- en: 'When not needed, disabling the *gathering facts* task can increase the performance
    of your playbooks. This can be done by adding `gather_facts: False` when defining
    a play.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '当不需要时，禁用*gathering facts*任务可以提高剧本的性能。在定义播放时，可以通过添加`gather_facts: False`来实现这一点。'
- en: 'Let''s try to break down the structure of a playbook script. First, let''s
    explain the `name` option. This is an optional parameter, but it is highly recommended.
    When a simple and meaningful sentence is written as input to the `name` option,
    it helps provide a useful description of the play for improved user communication.
    It is also helpful when running the playbook, in order to see which plays have
    finished and which are still processing. A playbook output without the use of
    the `name` option looks as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试着分解剧本脚本的结构。首先，让我们解释`name`选项。这是一个可选参数，但强烈建议使用。当将一个简单而有意义的句子写入`name`选项时，它有助于提供有用的剧本描述，以改进用户沟通。在运行剧本时，它也很有帮助，以便查看哪些剧本已经完成，哪些还在处理中。没有使用`name`选项的剧本输出如下所示：
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: When executing the preceding playbook, the output should look as follows:![](assets/ecb764c3-0fe8-48ac-b4e2-5e8d88e91cb6.png)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述剧本时，输出应如下所示：![](assets/ecb764c3-0fe8-48ac-b4e2-5e8d88e91cb6.png)
- en: 'We then have the `hosts` parameter or line. This is used to point to the inventory
    that the play should be run on, either to specify a certain group or host, or
    both of these combined. At the same level within the playbook, we can fill in
    other parameters underneath it. Those parameters can be host or group variables,
    used to enforce the parameters that are configured in their inventory files. These
    variables can be play-specified when we define them underneath the line hosts:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是`hosts`参数或行。这用于指向应在其上运行剧本的清单，可以指定特定的组或主机，或者两者兼而有之。在剧本的同一级别内，我们可以在其下填写其他参数。这些参数可以是主机或组变量，用于强制执行其清单文件中配置的参数。当我们在行主机下定义它们时，这些变量可以是特定于播放的：
- en: '[PRE26]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'They can also be task-specific when we define them within the task:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在任务内部定义它们时，它们也可以是特定于任务的：
- en: '[PRE27]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We then move to the tasks list, which is basically a list module to be executed
    in a series. Similarly to a playbook, each task can be named using the `name:` parameter.
    This is highly recommended for both documentation and to follow upon the status
    of tasks:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们转到任务列表，这基本上是要按顺序执行的列表模块。与剧本类似，可以使用`name:`参数为每个任务命名。这对于文档编写和跟踪任务状态都是强烈推荐的：
- en: '[PRE28]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If a task fails, the playbook execution stops with the failure. To bypass this
    when running a non-critical task, we can always add the `ignore_errors: True` parameter:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '如果任务失败，剧本执行将因失败而停止。在运行非关键任务时，我们可以始终添加`ignore_errors: True`参数来绕过这一点：'
- en: '[PRE29]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'As you have seen from the two previous examples, each task''s action line can
    be used in two different ways: either broken down or in one line. You can choose
    which to use based on your needs.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面两个示例中可以看出，每个任务的动作行可以以两种不同的方式使用：要么分解，要么一行。您可以根据自己的需求选择使用哪种方式。
- en: 'Finally, handlers are a major factor in making playbooks independent and automated,
    with less interaction for the user. They have the capacity to recognize changes
    and act accordingly. They are a way of controlling the system''s behaviors and
    running actions that respond to the needs of those behaviors:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，处理程序是使剧本独立和自动化的主要因素，用户的交互更少。它们有能力识别变化并相应地采取行动。它们是控制系统行为并运行响应这些行为需求的一种方式：
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'When executing the preceding playbook, the output should look as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 执行上述剧本时，输出应如下所示：
- en: '![](assets/bc82679e-452d-4db7-b266-91465d2f475d.png)Handlers can also be placed
    before the tasks in listen mode to enable action execution whenever they are triggered
    by multiple tasks.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/bc82679e-452d-4db7-b266-91465d2f475d.png)处理程序也可以放置在监听模式中的任务之前，以便在多个任务触发时启用动作执行。'
- en: Advanced Ansible playbook scripting includes conditional and loop statements
    to give the developer various logic and patterns to play within their playbooks.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 高级的Ansible剧本脚本包括条件和循环语句，为开发人员提供了各种逻辑和模式，可以在他们的剧本中使用。
- en: 'For example, the `when` parameter is a way of implementing task control with
    conditions. Consider the following example, which only runs application updates
    when it is running on the right family of Linux:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`when`参数是使用条件实现任务控制的一种方式。考虑以下示例，仅当在正确的Linux系列上运行时才运行应用程序更新：
- en: '[PRE31]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `when` parameter condition is not limited to values collected from the
    host system but also from the task''s execution status, which can be one of the
    following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`when`参数条件不仅限于从主机系统收集的值，还可以从任务的执行状态中收集，可以是以下之一：'
- en: Result has failed
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果失败
- en: Result has succeeded
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果成功
- en: Result has been skipped
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结果已被跳过
- en: There are various other ways to use the playbook conditions. We will look at
    these in later chapters.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他各种使用剧本条件的方法。我们将在后面的章节中讨论这些。
- en: 'The loop statement can also be used. For this, we are going to use the `loop` parameter.
    In some cases, when we want to apply an action on multiple entries, we use the
    `vars:` parameter, as shown in the following example:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 循环语句也可以使用。为此，我们将使用`loop`参数。在某些情况下，当我们想对多个条目应用操作时，我们使用`vars:`参数，如下例所示：
- en: '[PRE32]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'This can also be done using the `loop` parameter:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以使用`loop`参数完成：
- en: '[PRE33]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In this chapter, we have only covered the tip of the iceberg of Ansible playbooks.
    There are many more advanced customizations and parameters that we cannot cover
    in this book. Ansible is well-known for its neat and well-maintained documentation,
    so we recommend you have a look at this for more information.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们只是涉及了 Ansible playbook 冰山一角。还有许多更高级的自定义和参数，我们无法在本书中涵盖。Ansible 以其整洁和良好维护的文档而闻名，因此我们建议您查阅更多信息。
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we saw how Ansible can be used to run quick and simple commands.
    We then looked at how Ansible manages its host inventory, which helped us to understand
    its playbook scripting. We discovered how playbooks are structured and how they
    are used to orchestrate tasks. In the next chapter, we will discover Ansible Modules
    and learn how they are important out of all the tasks that are executed within
    a playbook. We will look at both Linux and Windows system modules, some network
    devices, and various visualization and cloud managers.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何使用 Ansible 运行快速和简单的命令。然后我们看了一下 Ansible 是如何管理其主机清单的，这有助于我们理解其 playbook
    脚本。我们发现了 playbook 的结构以及它们如何用于编排任务。在下一章中，我们将了解 Ansible 模块，并学习它们在 playbook 中执行的所有任务中的重要性。我们将研究
    Linux 和 Windows 系统模块，一些网络设备，以及各种可视化和云管理器。
- en: References
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: Ansible blog: [https://www.ansible.com/blog](https://www.ansible.com/blog)
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 博客：[https://www.ansible.com/blog](https://www.ansible.com/blog)
- en: Ansible documentation: [https://docs.ansible.com/ansible/latest](https://docs.ansible.com/ansible/latest)
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible 文档：[https://docs.ansible.com/ansible/latest](https://docs.ansible.com/ansible/latest)
- en: Vagrant and Ansible lab GitHub repository:  [https://github.com/xanmanning/vagrant-ansible-lab](https://github.com/xanmanning/vagrant-ansible-lab)
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vagrant 和 Ansible 实验室 GitHub 仓库：[https://github.com/xanmanning/vagrant-ansible-lab](https://github.com/xanmanning/vagrant-ansible-lab)
