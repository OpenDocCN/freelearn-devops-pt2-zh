- en: Installing Kubernetes Locally
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地安装Kubernetes
- en: 'In this chapter, we will look at how to get a local Kubernetes installation
    up and running using Minikube. Once we have our local Kubernetes installation
    running, we will work through some of the basic functionality and discuss the
    limitations of running Kubernetes locally. We will work through installing Kubernetes
    on:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看看如何使用Minikube快速搭建本地的Kubernetes安装。一旦我们的本地Kubernetes安装运行起来，我们将学习一些基本功能，并讨论在本地运行Kubernetes的局限性。我们将学习在以下平台上安装Kubernetes：
- en: macOS 10.13 High Sierra
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS 10.13 High Sierra
- en: Windows 10 Professional
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10专业版
- en: Ubuntu 17.04
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu 17.04
- en: Before we start the installation, let's quickly take a look at the tool we will
    be using to deploy our local Kubernetes cluster.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始安装之前，让我们快速看一下我们将使用的工具来部署我们的本地Kubernetes集群。
- en: About Minikube
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于Minikube
- en: One of the things you may have been thinking to yourself when reading the previous
    chapter is that Kubernetes seems complex. There are a lot of moving parts, which
    not only need to be configured but also monitored and managed.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当你阅读上一章时，你可能会想到Kubernetes看起来很复杂。有很多组件需要配置，而且不仅需要配置，还需要监控和管理。
- en: I remember when I originally looked at Kubernetes when it was first released
    before the stable version, and the installation instructions were very long and
    also things were a little delicate.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得当我最初看Kubernetes时，它刚发布不久，安装说明非常长，而且事情有点儿棘手。
- en: Misread a step at the beginning of the installation process and you could find
    yourself in a lot of trouble later in the installation—it reminded me of when
    magazines used to contain type in listings for games. If you made a typo anywhere
    then things would either flat-out not work or crash unexpectedly.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程的开始阶段误读了一步，你可能会在安装过程的后期陷入麻烦——这让我想起了以前杂志上会包含游戏代码清单的情形。如果你在任何地方打错字，那么事情要么根本不起作用，要么会出现意外崩溃。
- en: As Kubernetes matured, so did the installation process. Quite quickly a number
    of helper scripts were developed to aid in launching Kubernetes across various
    platforms; Minikube is one of these tools.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Kubernetes的成熟，安装过程也在不断改进。相当快地，一些辅助脚本被开发出来，以帮助在各种平台上启动Kubernetes；Minikube就是其中之一。
- en: 'It has one job, to create a local Kubernetes node. Considering the breadth
    of features supported by Kubernetes, it has a surprising number of features, such
    as:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作就是创建一个本地的Kubernetes节点。考虑到Kubernetes支持的功能范围，它有令人惊讶的多种功能，比如：
- en: DNS, NodePorts, and Ingress
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DNS，NodePorts和Ingress
- en: ConfigMaps and Secrets
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ConfigMaps和Secrets
- en: A choice of container runtimes; you can use either Docker or rkt
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器运行时的选择；你可以使用Docker或rkt
- en: Persistent Volumes via `hostPath`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`hostPath`持久卷
- en: Dashboards
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仪表板
- en: 'Kubernetes features that would typically require a public cloud provider, such
    as AWS, Microsoft Azure, or Google Cloud, or multiple hosts, are not supported.
    Some of these features are:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通常需要公共云提供商（如AWS，Microsoft Azure或Google Cloud）或多个主机的Kubernetes功能是不受支持的。其中一些功能包括：
- en: LoadBalancers
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡器
- en: Advanced scheduling policies
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级调度策略
- en: This is because Minikube only launches a single node on a virtual machine on
    your local PC. This shouldn't limit you though; remember that you would only ever
    want to use Minikube for development and you should never build production services
    using it. There are a lot more tools, which will be covered in [Chapter 6](7f8f30b3-66f0-474e-9c0e-7cb3741e5eab.xhtml),
    *Installing Kubernetes in the Cloud*, more suited to launching production-ready
    Kubernetes clusters in public clouds or other vendors.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为Minikube只在本地PC上的虚拟机上启动单个节点。但这不应该限制你；请记住，你只会想要在Minikube上进行开发，并且不应该使用它构建生产服务。还有很多其他工具，将在[第6章](7f8f30b3-66f0-474e-9c0e-7cb3741e5eab.xhtml)中介绍，*在云中安装Kubernetes*，更适合在公共云或其他供应商中启动生产就绪的Kubernetes集群。
- en: 'Minikube is made up of two core components:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube由两个核心组件组成：
- en: '**libmachine**: This library from Docker is used to provision virtual machines
    on your host machine. It is a core component of Docker Machine as well as Docker
    for macOS and Docker for Windows.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**libmachine**：这个来自Docker的库用于在主机上提供虚拟机。它是Docker Machine以及Docker for macOS和Docker
    for Windows的核心组件。'
- en: '**localkube**: This library, developed and donated to the Minikube project
    by Redspread (which is now a part of CoreOS), is responsible for deploying and
    maintaining the Kubernetes node once the virtual machine has been launched.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**localkube**：这个库是由Redspread（现在是CoreOS的一部分）开发并捐赠给Minikube项目的，它负责在启动虚拟机后部署和维护Kubernetes节点。'
- en: Rather than talking about what Minikube can do any more, we should look at installing
    it and then discuss how we can interact with it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不再讨论Minikube能做什么，我们应该看看如何安装它，然后讨论如何与它交互。
- en: Installing Minikube
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Minikube
- en: We will be looking at installing Minikube on the three different operating systems
    mentioned in the introduction. Once installed, the process for interacting with
    Minikube is mostly consistent, meaning that, while I will be using macOS in the
    examples, the same commands will work on both Windows and Linux. Given the complexities
    of the early Kubernetes installation and configuration procedure, you will be
    pleasantly surprised how simple the process now is.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看看如何在介绍中提到的三种不同操作系统上安装Minikube。一旦安装完成，与Minikube交互的过程大部分是一致的，这意味着，虽然我在示例中使用的是macOS，但相同的命令也适用于Windows和Linux。考虑到早期Kubernetes安装和配置过程的复杂性，你会惊讶地发现现在的过程是多么简单。
- en: macOS 10.13 High Sierra
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS 10.13 High Sierra
- en: To install Minikube on macOS, you will first have to have Homebrew and Cask
    installed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要在macOS上安装Minikube，你首先必须安装Homebrew和Cask。
- en: Homebrew is a command-line-based package manager for macOS. Homebrew is used
    to install both command-line tools and Cask, which is an add-on used to manage
    desktop applications. It is extremely useful for managing software that is not
    available in the macOS App Store, as well as saving you from having to manually
    compile software on your machine.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Homebrew是macOS的基于命令行的软件包管理器。Homebrew用于安装命令行工具和Cask，Cask是一个用于管理桌面应用程序的附加组件。它非常有用，可以管理macOS应用商店中不可用的软件，同时也可以避免你在自己的机器上手动编译软件。
- en: 'If you have not already got Homebrew installed, you can install it by running
    the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有安装Homebrew，你可以通过运行以下命令来安装它：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once installed, you will need to install Cask by running:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你需要通过运行以下命令来安装Cask：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you have Homebrew and Cask installed, then you should ensure that everything
    is up-to-date and ready to run using the following commands:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了Homebrew和Cask，那么你应该确保一切都是最新的，并且准备好使用以下命令运行：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once Homebrew and Cask are ready, you can install Minikube by running the following
    command:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Homebrew和Cask准备好，你可以通过运行以下命令来安装Minikube：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will first of all download the dependencies and then install Minikube:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先会下载依赖项，然后安装Minikube：
- en: '![](assets/464c27fa-0f16-4e69-ad1e-b1199b8d33ab.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/464c27fa-0f16-4e69-ad1e-b1199b8d33ab.png)'
- en: 'The process takes less than a minute and, once installed, you should be able
    to perform the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程不到一分钟，安装完成后，您应该能够执行以下操作：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will display the current version; in my case, this was `v0.22.2`. We now
    have Minikube installed and ready to go.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这将显示当前版本；在我的情况下，这是`v0.22.2`。我们现在已经安装并准备好使用Minikube了。
- en: Windows 10 Professional
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows 10专业版
- en: Similarly to how we installed Minikube on macOS, we will be using a package
    manager; this time it is called Chocolatey.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们在macOS上安装Minikube的方式类似，我们将使用一个包管理器；这次叫做Chocolatey。
- en: Chocolatey is a package manager for Windows, similar to Homebrew on macOS. It
    enables you to install software from the command line, and supports both PowerShell
    and `cmd.exe`. We will be using PowerShell.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Chocolatey是Windows的一个包管理器，类似于macOS上的Homebrew。它使您能够从命令行安装软件，并支持PowerShell和`cmd.exe`。我们将使用PowerShell。
- en: 'If you do not have Chocolatey installed, you can run the following command
    in a PowerShell console that has been launched with administrator privileges:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有安装Chocolatey，可以在以管理员权限启动的PowerShell控制台中运行以下命令：
- en: The following command is a single line and not multiple lines. Also, as we are
    running the install command using `Set-ExecutionPolicy Bypass`, you will be asked
    if you are sure. As we are running the script directly from the Chocolatey site
    over HTTPS, you should be able to trust the script and answer yes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令是一行，而不是多行。另外，由于我们使用`Set-ExecutionPolicy Bypass`来运行安装命令，您将被询问是否确定。由于我们直接从Chocolatey网站通过HTTPS运行脚本，您应该能够信任该脚本并回答是。
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once Chocolatey is installed, you can install Minikube by running:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了Chocolatey后，您可以通过运行以下命令来安装Minikube：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will download and install the dependencies, and then install Minikube.
    When you are asked to confirm if you would like to run the script, respond with
    yes:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载并安装依赖项，然后安装Minikube。当您被要求确认是否要运行脚本时，请回答是：
- en: '![](assets/7bee2b97-fc9e-4958-8396-3d9f9622162c.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7bee2b97-fc9e-4958-8396-3d9f9622162c.png)'
- en: 'Once installed, you will be able to run the following command:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，您将能够运行以下命令：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will return the version of Minikube installed; for me, this was `v0.22.2`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回安装的Minikube版本；对我来说，这是`v0.22.2`。
- en: Ubuntu 17.04
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ubuntu 17.04
- en: 'Unlike the macOS and Windows version, we will not be using a package manager
    to install Minikube on Ubuntu 17.04\. Instead, we will just be downloading the
    binaries directly from the project page. To do this, simply run the following
    command:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 与macOS和Windows版本不同，我们将不会使用包管理器在Ubuntu 17.04上安装Minikube。相反，我们将直接从项目页面下载二进制文件。要做到这一点，只需运行以下命令：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Minikube will be downloaded, will have execute permissions set, and will be
    moved to `/usr/local/bin/` so it is in a system path.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube将被下载，将设置执行权限，并将移动到`/usr/local/bin/`，以便在系统路径中。
- en: 'Now that Minikube is installed, we need to download `kubectl`. During the macOS
    and Windows installation, this was taken care of by the package manager; luckily,
    the process is pretty much the same as the command we just ran to install Minikube:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Minikube已安装，我们需要下载`kubectl`。在macOS和Windows安装过程中，这是由包管理器处理的；幸运的是，这个过程与我们刚刚运行以安装Minikube的命令几乎相同：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once installed, you should again be able to run the following command to confirm
    the version of Minikube installed:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，您应该能够再次运行以下命令来确认安装的Minikube版本：
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When I ran the command, it returned `v0.22.2`, as seen in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当我运行该命令时，它返回`v0.22.2`，如下截图所示：
- en: '![](assets/a69b796f-ae90-4574-929c-81543ba288e1.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a69b796f-ae90-4574-929c-81543ba288e1.png)'
- en: Hypervisors
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hypervisors
- en: A number of different hypervisors are supported by Minikube. A hypervisor is
    a process that is used to launch the virtual machine; it isolates the virtual
    machine's operating system from your own while allowing it to share resources
    such as CPU, RAM, and drive space.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube支持多种不同的hypervisors。 Hypervisor是一个用于启动虚拟机的进程；它将虚拟机的操作系统与您自己的操作系统隔离开来，同时允许它共享CPU、RAM和磁盘空间等资源。
- en: 'The following hypervisors are supported out-of-the-box by Minikube:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Minikube默认支持以下hypervisors：
- en: '**Hyper-V (Windows 10)**: This is the native hypervisor; it is available in
    Windows 10 Professional and Windows Servers'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hyper-V（Windows 10）**：这是本机hypervisor；它适用于Windows 10专业版和Windows服务器'
- en: '**KVM (Ubuntu 17.04)**: This is the native Linux hypervisor, which operates
    inside the Linux kernel on most modern distributions'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KVM（Ubuntu 17.04）**：这是本机Linux hypervisor，在大多数现代发行版的Linux内核中运行'
- en: '**VirtualBox (macOS, Windows 10, and Ubuntu 17.04)**: Released by Oracle, VirtualBox
    is an open source x86 hypervisor which can be run on a large number of operating
    systems'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VirtualBox（macOS，Windows 10和Ubuntu 17.04）**：由Oracle发布，VirtualBox是一个开源的x86
    hypervisor，可以在大量操作系统上运行'
- en: '**VMware Fusion (macOS)**: Fusion provides a macOS-optimized hypervisor whose
    biggest strength is its ability to run and expose Windows applications on macOS'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VMware Fusion（macOS）**：Fusion提供了一个经过优化的macOS hypervisor，其最大优势是能够在macOS上运行和公开Windows应用程序'
- en: '**xhyve (macOS)**: This is the native hypervisor on macOS; like KVM on Linux,
    it is built into the kernel'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**xhyve（macOS）**：这是macOS上的本机hypervisor；就像Linux上的KVM一样，它内置在内核中'
- en: As you can tell from the list, only VirtualBox is supported across all three
    of the operating systems we are covering in this chapter. Because of this, it
    is the default hypervisor supported by Minikube. If you have already got VirtualBox
    installed, you can run the following commands, which are relevant to your choice
    of operating system.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 从列表中可以看出，在本章中我们涵盖的三种操作系统中，只有VirtualBox得到支持。因此，它是Minikube支持的默认hypervisor。如果您已经安装了VirtualBox，可以运行以下与您选择的操作系统相关的命令。
- en: 'For macOS, we can use Homebrew and Cask to install VirtualBox by running:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS，我们可以使用Homebrew和Cask来安装VirtualBox：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Likewise, for Windows 10 you can use Chocolatey to install VirtualBox:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对于Windows 10，您可以使用Chocolatey来安装VirtualBox：
- en: You cannot use VirtualBox on Windows 10 if Hyper-V is enabled. If you wish to
    follow along, please disable Hyper-V before proceeding.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了Hyper-V，则无法在Windows 10上使用VirtualBox。如果您希望跟随操作，请在继续之前禁用Hyper-V。
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, for Ubuntu 17.04 you will need to run the following commands to add
    the repository and key:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于Ubuntu 17.04，您需要运行以下命令来添加存储库和密钥：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And then run the following commands to load the repository we added previously
    and install the package:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行以下命令来加载我们之前添加的存储库并安装软件包：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You should now be able to see Virtualbox in your listed software programs.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该能够在列出的软件程序中看到Virtualbox。
- en: Starting Minikube
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动Minikube
- en: 'To complete our installation, we need to start Minikube. To do this, run the
    following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成我们的安装，我们需要启动Minikube。要做到这一点，请运行以下命令：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'On macOS, you should see something like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上，您应该看到类似于这样的东西：
- en: '![](assets/d38cb49c-8985-428f-b2aa-1050efa97202.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d38cb49c-8985-428f-b2aa-1050efa97202.png)'
- en: As you can see, the ISO used to create the virtual machine has been downloaded.
    The virtual machine starts, the certificates that we will be using to authenticate
    against our one node cluster are generated, and then finally `kubectl` is configured
    with the details of our local Kubernetes cluster.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，用于创建虚拟机的ISO已经下载。虚拟机启动，我们将用于对我们的单节点集群进行身份验证的证书被生成，最后`kubectl`被配置为使用我们本地Kubernetes集群的详细信息。
- en: 'Running the same command on Windows 10 results in exactly the same set of steps:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows 10上运行相同的命令将得到完全相同的步骤：
- en: '![](assets/f674dbe4-9477-4a5f-b435-8cc7595b4028.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f674dbe4-9477-4a5f-b435-8cc7595b4028.png)'
- en: 'Also, as you may have already guessed, running on Ubuntu 17.04 gives the same
    results. Run the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，正如您可能已经猜到的那样，在Ubuntu 17.04上运行会得到相同的结果。运行以下命令：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You will receive a message confirming that everything is running and that `kubectl`
    has been correctly configured to communicate with your Kubernetes cluster:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您将收到一条消息，确认一切正常运行，并且 `kubectl` 已正确配置以与您的Kubernetes集群通信：
- en: '![](assets/9d82313e-556f-4a63-acd5-9a313debb3fa.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9d82313e-556f-4a63-acd5-9a313debb3fa.png)'
- en: 'If you were to open VirtualBox, you should see your Minikube virtual machine
    running; for example, this is what I see when opening VirtualBox on Windows 10:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打开VirtualBox，您应该会看到您的Minikube虚拟机正在运行；例如，当我在Windows 10上打开VirtualBox时就是这种情况：
- en: '![](assets/9f35164d-8dc0-4b4d-b7ce-c0e8f17eb985.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9f35164d-8dc0-4b4d-b7ce-c0e8f17eb985.png)'
- en: 'Even though we have launched Minikube on three different operating systems,
    other than the initial installation, you can already experience what we discussed
    in [Chapter 2](494a207a-b5ff-4ee2-ae3c-c2abc8cbc108.xhtml), *An Introduction to
    Kubernetes*: there is no vendor lock-in and a consistent experience, and this
    is before we have started to use our newly installed Kubernetes cluster.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在三种不同的操作系统上启动了Minikube，除了初始安装之外，您已经可以体验我们在[第2章](494a207a-b5ff-4ee2-ae3c-c2abc8cbc108.xhtml)中讨论的内容了：没有供应商锁定和一致的体验，而且这是在我们开始使用新安装的Kubernetes集群之前。
- en: Minikube commands
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Minikube命令
- en: So far, we have used the `minikube start` and `minikube status` commands to
    launch our single-node Kubernetes cluster and check that everything is running
    as expected. Before we look at interacting with Kubernetes, there are a few more
    basic Minikube commands I would like to cover.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用了 `minikube start` 和 `minikube status` 命令来启动我们的单节点Kubernetes集群，并检查一切是否按预期运行。在我们开始与Kubernetes交互之前，我想介绍一些更基本的Minikube命令。
- en: Stop and delete
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停止和删除
- en: As we are running our single-node Kubernetes cluster as a virtual machine on
    your host, you may not want it running all of the time, using resources.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将我们的单节点Kubernetes集群作为虚拟机在您的主机上运行，您可能不希望它一直运行，占用资源。
- en: There are two options to achieve this, the first of which is `minikube stop`.
    This command will stop your node and keep the virtual machine intact. You should
    use this command if you plan on picking up where you left off when you next start
    your node by running `minikube start`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种选项可以实现这一点，第一种是 `minikube stop`。这个命令将停止您的节点，并保持虚拟机完整。如果您计划在下次通过运行 `minikube
    start` 启动节点时继续之前的工作，您应该使用这个命令。
- en: While the `minikube stop` command stops your virtual machine from using CPU
    and RAM resources on the host machine, the hard disk image used to host the virtual
    machine will still be present on your machine. While a freshly launched cluster
    does not take much space on the host hard drive, on my macOS installation it is
    around 650 MB; as soon as you start to use the cluster, you may find that this
    space will at least double.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `minikube stop` 命令会停止您的虚拟机在主机上使用CPU和RAM资源，但用于托管虚拟机的硬盘映像仍将存在于您的机器上。虽然新启动的集群不会占用主机硬盘上太多空间，在我的macOS安装中大约为650
    MB；一旦您开始使用集群，您可能会发现这个空间至少会翻倍。
- en: This is where our next command comes in. The `minikube delete` command will
    remove the cluster completely, including all of the virtual machine files, freeing
    the space used on the host machine.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们下一个命令发挥作用的地方。`minikube delete` 命令将完全删除集群，包括所有虚拟机文件，释放主机机器上使用的空间。
- en: At the time of writing, running `minikube delete` will immediately remove your
    machine, running or not. There is no prompt asking if you are sure, or any way
    back from the command (unless you have backups), so please ensure that you use
    this command with caution.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在写作时，运行`minikube delete`将立即删除您的虚拟机，无论其是否正在运行。不会有提示询问您是否确定，也没有从该命令返回的方法（除非您有备份），因此请确保谨慎使用此命令。
- en: When you run `minikube start` again, your cluster will be started from scratch
    again, as we first experienced in the previous section.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当您再次运行`minikube start`时，您的集群将从头开始启动，就像我们在上一节中首次体验到的那样。
- en: Environment
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 环境
- en: Next up, we have a few commands that display information about the virtual machine
    and also the environment that Minikube has configured on your device.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有一些命令，显示有关虚拟机的信息，以及Minikube在您的设备上配置的环境。
- en: First, we have quite a simple command, `minikube ip`. All this command does
    is return the IP address of the virtual machine. This is useful if you want to
    interact with your cluster through a script. You can include the output of the
    command to reference your cluster's current IP address without having to hardcode
    the actual IP address into your scripts.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有一个非常简单的命令`minikube ip`。这个命令只是返回虚拟机的IP地址。如果您想通过脚本与集群交互，这将非常有用。您可以包含命令的输出，以引用集群的当前IP地址，而无需在脚本中硬编码实际的IP地址。
- en: 'The next command we are going to look at is `minikube docker-env`. Running
    this command should print something like the following output to your screen:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要看的下一个命令是`minikube docker-env`。运行此命令应该会在屏幕上打印出类似以下输出：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'What that output does is allow you (if you have it installed) to configure
    your local Docker client to communicate with the Docker installation on our Minikube
    virtual machine. There is, however, a downside to doing this. The version of Docker
    that is currently being distributed as part of the Minikube virtual machine image
    is a little behind the current release. You can see this by running `eval $(minikube
    docker-env)` and then `docker version`. When I ran the two commands, I got the
    following results:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的作用是允许您（如果已安装）配置本地Docker客户端与Minikube虚拟机上的Docker安装进行通信。然而，这样做也有一个缺点。目前作为Minikube虚拟机镜像的一部分分发的Docker版本略落后于当前版本。您可以通过运行`eval
    $(minikube docker-env)`，然后`docker version`来查看这一点。当我运行这两个命令时，得到了以下结果：
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: As you can see from the output, at the time of writing the version of Docker
    that Minikube is using is presently two versions behind my local installation
    of Docker for macOS, which is running the latest stable release. In the context
    of what we are covering in this book, running an older version of Docker is not
    a problem and nothing to worry about, as we will not be interacting with it directly.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看出，写作时Minikube使用的Docker版本比我在macOS上安装的最新稳定版本要落后两个版本。在本书涵盖的内容范围内，运行旧版本的Docker并不是问题，也不需要担心，因为我们不会直接与其交互。
- en: Virtual machine access and logs
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟机访问和日志
- en: 'You are able to SSH into the Minikube virtual machine. As part of the installation,
    an SSH key was generated and shared with the virtual machine when it launched.
    You can check the location of this key by running `minikube ssh-key`. This returns
    the path of the private part of the key. You can use this in combination with
    other commands to SSH into your virtual machine by running the following on macOS
    or Ubuntu:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过SSH登录到Minikube虚拟机。在安装过程中，生成了一个SSH密钥，并在启动时与虚拟机共享。您可以通过运行`minikube ssh-key`来检查此密钥的位置。这将返回密钥的私钥部分的路径。您可以将其与其他命令结合使用，在macOS或Ubuntu上运行以下命令来SSH登录到虚拟机：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This generates the IP address of the virtual machine and path to the private
    key on-the-fly:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '这将动态生成虚拟机的IP地址和私钥路径:'
- en: '![](assets/a0e42ee1-c47f-44a0-ba3f-1d2b969475e3.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a0e42ee1-c47f-44a0-ba3f-1d2b969475e3.png)'
- en: 'However, Minikube also has a command that will run this for you and it is also  supported
    on all platforms. Running `minikube ssh` will log you straight in to the virtual
    machine as the Docker user, as is shown by the following Terminal output:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '然而，Minikube还有一个命令可以为您运行这个命令，并且在所有平台上都受支持。运行`minikube ssh`将直接将您登录到虚拟机作为Docker用户，如下面的终端输出所示:'
- en: '![](assets/69225215-9ba9-4975-b5bc-1f538d51071e.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/69225215-9ba9-4975-b5bc-1f538d51071e.png)'
- en: 'The final command we are going to quickly look at is `minikube logs`. This
    displays all of the logs being generated by the `localkube` instance:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '我们要快速查看的最后一个命令是`minikube logs`。这会显示`localkube`实例生成的所有日志:'
- en: '![](assets/1956e512-f65d-4800-842d-f1273ce6aaee.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1956e512-f65d-4800-842d-f1273ce6aaee.png)'
- en: These logs are used to help debug problems with your Minikube installation.
    They do not contain any user data, meaning that you cannot use them to help track
    down any problems with the services or pods you have launched.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这些日志用于帮助调试您的Minikube安装中的问题。它们不包含任何用户数据，这意味着您不能使用它们来帮助跟踪您启动的服务或pod的任何问题。
- en: Hello world
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好世界
- en: Now we have our single node Kubernetes cluster up and running, using Minikube
    we can look at launching a service. We will start off using the dashboard before
    moving on to the command-line client.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的单节点Kubernetes集群已经运行起来了，使用Minikube，我们可以尝试启动一个服务。我们将首先使用仪表板，然后再转向命令行客户端。
- en: The dashboard
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表板
- en: 'Each installation of Minikube comes with a web-based dashboard. This can be
    accessed by running `minikube dashboard`, which immediately opens the dashboard
    in your default browser:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '每个Minikube安装都带有一个基于Web的仪表板。这可以通过运行`minikube dashboard`来访问，它会立即在您的默认浏览器中打开仪表板:'
- en: '![](assets/37f69f3b-f34e-44b7-9570-875ab2ca69ae.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/37f69f3b-f34e-44b7-9570-875ab2ca69ae.png)'
- en: Clicking on the + CREATE button, which can be found on the top-left of the page,
    will take you to a form that will let you deploy a containerized application.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 点击页面左上角的+创建按钮，将带您到一个表单，让您部署一个容器化应用程序。
- en: 'On the Deploy a Containerized App page, you will find several options. Keeping
    the Specify app details below option enabled, fill them in as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '在部署容器化应用页面上，您会找到几个选项。保持启用下面的指定应用程序详细信息选项，填写如下:'
- en: '**App name**: `dashboard-hello-world`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '应用名称: `dashboard-hello-world`'
- en: '**Container image**: `nginx:latest`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '容器镜像: `nginx:latest`'
- en: '**Number of pods**: `1`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pod数量**: `1`'
- en: '**Service**: External'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**: 外部'
- en: '**Port**: `8080`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口**: `8080`'
- en: '**Target port**: `80`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标端口**: `80`'
- en: '**Protocol**: TCP'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协议**: TCP'
- en: 'For our purposes, we do not need to fill in any of the options that can be
    found under SHOW ADVANCED OPTIONS. Just click on the DEPLOY button at the bottom
    of the form. After a short while, your dashboard should show that you have a deployment,
    pod, ReplicaSet, and service, all with `dashboard-hello-world` in the Name:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '对于我们的目的，我们不需要填写在“显示高级选项”下找到的任何选项。只需点击表单底部的“部署”按钮。过一会儿，您的仪表板应该显示您有一个部署、pod、ReplicaSet和服务，所有这些都带有`dashboard-hello-world`的名称:'
- en: '![](assets/0d41bef9-a797-4ac8-8f1c-da8812423e57.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0d41bef9-a797-4ac8-8f1c-da8812423e57.png)'
- en: 'You can view the service by running the following command:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '您可以通过运行以下命令查看服务:'
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will return the following message:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '这将返回以下消息:'
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Open your browser, where you should see the default NGINX page:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '打开您的浏览器，在那里您应该看到默认的NGINX页面:'
- en: '![](assets/43019ac6-951f-4e28-8783-8e0e48aba3da.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/43019ac6-951f-4e28-8783-8e0e48aba3da.png)'
- en: While this is a very basic example, it does show just how simple it is to launch
    a simple application using the dashboard. Now let's look at moving on to the command
    line.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这只是一个非常基本的例子，但它确实展示了使用仪表板启动简单应用程序有多简单。现在让我们看看如何转移到命令行。
- en: The command line
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令行
- en: In the previous chapter, we briefly touched upon how you can use YAML or JSON
    files to define your pods, ReplicaSets, and services. Let's use `kubectl` to launch
    to an application that is to the preceding one.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们简要介绍了如何使用YAML或JSON文件来定义您的pod、ReplicaSets和服务。让我们使用`kubectl`来启动一个与前一个应用程序相同的应用程序。
- en: 'First of all, we need a file to launch; you can find a copy of the following
    one, which is called `cli-hello-world.yml`, in the `Chapter03` folder of the code
    bundle and GitHub repository that accompany this title:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个要启动的文件；您可以在本书的代码包和GitHub存储库的`Chapter03`文件夹中找到名为`cli-hello-world.yml`的副本：
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you may have noticed, while this is a single file we actually have two different
    sections. The first launches the external service, exposing it on port `8000`
    so that there isn't a clash with the external service we launched using the dashboard
    in the previous section. The second section defines the pod and replication set;
    this is pretty similar to what we launched using the dashboard.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，虽然这是一个单独的文件，但实际上我们有两个不同的部分。第一个启动外部服务，在端口`8000`上公开它，以便与我们在上一节使用仪表板启动的外部服务不发生冲突。第二部分定义了pod和复制集；这与我们使用仪表板启动的内容非常相似。
- en: 'To launch the application, we simply need to run the following command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动应用程序，我们只需要运行以下命令：
- en: '[PRE23]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You will almost immediately receive confirmation that a service and deployment
    have been created:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 您几乎立即会收到已创建服务和部署的确认：
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Once created, you should then be able to run the following command to open
    the application in the browser:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 创建后，您应该能够运行以下命令在浏览器中打开应用程序：
- en: '[PRE25]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Again, you should be greeted by the default NGINX page.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，您应该会看到默认的NGINX页面。
- en: I am sure that when we opened the dashboard you clicked around the menu items
    that can be found on the left of the page. All of this information can also be
    found on the command line, so let's briefly take a look at some of the commands
    we can use to find out more information about our cluster.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信当我们打开仪表板时，您点击了页面左侧可以找到的菜单项。所有这些信息也可以在命令行中找到，所以让我们简要地看一下我们可以使用的一些命令来了解有关我们集群的更多信息。
- en: 'One of the more common commands you will be running is `kubectl get`. This
    fetches lists of the pods, ReplicaSets, and services, as well as much more. Running
    the following commands should give us a similar view to the dashboard overview:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您将要运行的更常见的命令之一是`kubectl get`。这将获取pod、ReplicaSets和服务的列表，以及更多内容。运行以下命令应该给我们一个类似于仪表板概述的视图：
- en: '[PRE26]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'As you can see from the following Terminal output, everything is listed along
    with its current status:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您从以下终端输出中所看到的，所有内容都列出了其当前状态：
- en: '![](assets/64c2e209-fa24-4d47-8db3-6b99d1cfa9e7.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/64c2e209-fa24-4d47-8db3-6b99d1cfa9e7.png)'
- en: 'There are plenty of options you can get; for example, try running this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以获得很多选项；例如，尝试运行这个：
- en: '[PRE27]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Running just `kubectl get` will list all of the different parameters you can
    use. Now that have our full pod name, which in my case is `cli-hello-world-3678853705-f41d2`,
    we can find out more details about it by running the `kubectl describe` command.
    For example, I ran this:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 只运行`kubectl get`将列出您可以使用的所有不同参数。现在我们有了完整的pod名称，在我的情况下是`cli-hello-world-3678853705-f41d2`，我们可以通过运行`kubectl
    describe`命令来了解更多关于它的细节。例如，我运行了这个：
- en: '[PRE28]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: When you run the command locally, please update the pod name to reflect your
    own. Kubernetes adds a unique ID to each pod when launched to ensure that you
    can run multiples of the same pod on any given host.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当您在本地运行命令时，请更新pod名称以反映您自己的名称。Kubernetes在启动时为每个pod添加一个唯一ID，以确保您可以在任何给定的主机上运行多个相同的pod。
- en: 'I had the following information returned:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我得到了以下信息：
- en: '[PRE29]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You can use `kubectl describe` to find information on pretty much everything
    you can list using `kubectl get`, for example:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `kubectl describe` 查找几乎可以使用 `kubectl get` 列出的所有信息，例如：
- en: '[PRE30]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Again, you can find out more by running just `kubectl describe` on its own.
    We will be introducing more commands throughout the following chapters so that,
    by the end of the book, you will be able to use `kubectl` to its fullest.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以通过仅运行`kubectl describe`来了解更多信息。在接下来的章节中，我们将介绍更多命令，以便在本书结束时，您将能够充分利用`kubectl`。
- en: Before we finish this chapter, I want us to take a very quick look at how we
    can mount storage from our local machine inside the Minikube virtual machine and
    then inside our pods.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成本章之前，我希望我们能够快速看一下如何将存储从本地机器挂载到Minikube虚拟机内部，然后再挂载到我们的pod内部。
- en: 'You will find a folder called `html` in the `Chapter03` folder. This contains
    a single file called `index.html`. Running the following command in the `Chapter03`
    folder will mount the HTML inside the virtual machine:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在`Chapter03`文件夹中找到一个名为`html`的文件夹。其中包含一个名为`index.html`的单个文件。在`Chapter03`文件夹中运行以下命令将挂载HTML到虚拟机内部：
- en: '[PRE31]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You can see this from the message that is displayed after the command has run:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从运行命令后显示的消息中看到这一点：
- en: '![](assets/393608e8-b7ce-4f2f-9d89-eb992e934f2e.png)At the time of writing
    there was a known bug using the `minikube mount` command on Windows 10 hosts,
    please see the following GitHub issues for more information [https://github.com/kubernetes/minikube/issues/1473](https://github.com/kubernetes/minikube/issues/1473)
    and [https://github.com/kubernetes/minikube/issues/2072](https://github.com/kubernetes/minikube/issues/2072).'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/393608e8-b7ce-4f2f-9d89-eb992e934f2e.png)在撰写本文时，已知在Windows 10主机上使用`minikube
    mount`命令存在一个已知的bug，请参阅以下GitHub问题以获取更多信息[https://github.com/kubernetes/minikube/issues/1473](https://github.com/kubernetes/minikube/issues/1473)和[https://github.com/kubernetes/minikube/issues/2072](https://github.com/kubernetes/minikube/issues/2072)。'
- en: You will need to keep this process running, so open a new Terminal or PowerShell
    window for use in the remainder of this section.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要保持此进程运行，因此在本节的其余部分中打开一个新的终端或PowerShell窗口以供使用。
- en: 'Run the following commands:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE32]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'These will log you in to the Minikube virtual machine, get a directory listing
    of `/data/html/`, and then `exit` out of the virtual machine:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将使您登录到Minikube虚拟机，获取`/data/html/`的目录列表，然后退出虚拟机：
- en: '![](assets/bb20fd7e-b2c3-481b-ace5-9d98ee7191b6.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/bb20fd7e-b2c3-481b-ace5-9d98ee7191b6.png)'
- en: As you can see, our `index.html` file is available on the cluster node in `/data/html/`.
    Moving back to the `Chapter03` folder, you should see a file called `cli-hello-world-storage.yml`.
    This contains the service and deployment information that uses this mounted folder.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们的`index.html`文件在`/data/html/`中的集群节点上可用。返回到`Chapter03`文件夹，您应该会看到一个名为`cli-hello-world-storage.yml`的文件。其中包含使用此挂载文件夹的服务和部署信息。
- en: 'The service section looks pretty similar to the one we used earlier in this
    section; however, there is an addition to the deployment section:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 服务部分看起来与本节中先前使用的很相似；但是，在部署部分有一个额外的内容：
- en: '[PRE33]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As you can see, in the `spec` part of the deployment we are now defining a `volume`
    named `html`, then in the container part we are taking the volume named `html`
    and using the `mountPath` option to tell Kubernetes that we want the volume to
    be mounted at `/usr/share/nginx/html`, which is the default web root for the NGINX
    container image we are using within the container.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，在部署的`spec`部分中，我们现在正在定义一个名为`html`的`volume`，然后在容器部分中，我们正在使用`mountPath`选项将名为`html`的卷挂载到`/usr/share/nginx/html`，这是我们在容器中使用的NGINX容器映像的默认网页根目录。
- en: 'Use the `kubectl apply` command to launch your application, and then the `minikube
    service` command to open the service in your browser:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`kubectl apply`命令启动您的应用程序，然后使用`minikube service`命令在浏览器中打开服务：
- en: '[PRE34]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You should see the following page:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到以下页面：
- en: '![](assets/eddcda5f-6a0b-4d40-aaeb-e07d3e1d3fe1.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eddcda5f-6a0b-4d40-aaeb-e07d3e1d3fe1.png)'
- en: If you edit `index.html` in the `html` folder on your local machine, the changes
    will be immediately reflected when you refresh your browser window.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在本地机器上的`html`文件夹中编辑`index.html`，当您刷新浏览器窗口时，更改将立即反映出来。
- en: 'Before we move on to the next chapter, we should remove the Minikube machine
    we have used in this chapter so that we are starting with a clean slate. First
    of all, we have the process that is keeping the `html` folder from our host machine
    mounted. To terminate this process, go back to the Terminal or PowerShell and
    press *Ctrl* + *C*; this will send a termination signal to the process and return
    you to the command line. We can then run:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入下一章之前，我们应该删除本章中使用的Minikube虚拟机，以便我们从头开始。首先，我们有一个进程，它正在保持我们主机机器上的`html`文件夹挂载。要终止此进程，请返回到终端或PowerShell并按下*Ctrl*
    + *C*；这将向进程发送终止信号并将您返回到命令行。然后我们可以运行：
- en: '[PRE35]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This will remove the current virtual machine, meaning that, when we next start
    Minikube, it will be from scratch.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这将删除当前的虚拟机，这意味着当我们下次启动Minikube时，它将从头开始。
- en: References
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'More information on the tools we have used in this chapter can be found at
    their project pages:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 有关本章中使用的工具的更多信息，请访问它们的项目页面：
- en: '**Minikube**: [https://github.com/kubernetes/minikube](https://github.com/kubernetes/minikube)'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Minikube**: [https://github.com/kubernetes/minikube](https://github.com/kubernetes/minikube)'
- en: '**kubectl**: [https://kubernetes.io/docs/user-guide/kubectl-overview/](https://kubernetes.io/docs/user-guide/kubectl-overview/)'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kubectl**: [https://kubernetes.io/docs/user-guide/kubectl-overview/](https://kubernetes.io/docs/user-guide/kubectl-overview/)'
- en: '**Homebrew**: [https://brew.sh/](https://brew.sh)'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Homebrew**: [https://brew.sh/](https://brew.sh)'
- en: '**Cask**: [https://caskroom.github.io/](https://caskroom.github.io/)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cask**: [https://caskroom.github.io/](https://caskroom.github.io/)'
- en: '**Chocolatey**: [https://chocolatey.org/](https://chocolatey.org/)'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chocolatey**: [https://chocolatey.org/](https://chocolatey.org/)'
- en: '**VirtualBox**: [https://www.virtualbox.org/](https://www.virtualbox.org/)'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VirtualBox**: [https://www.virtualbox.org/](https://www.virtualbox.org/)'
- en: Summary
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we installed a single-node Kubernetes cluster on our local
    machine using Minikube; we looked at how to achieve this on macOS, Windows 10,
    and Ubuntu Linux. Once installed, we discovered that we can interact with our
    single-node Kubernetes cluster in exactly the same way, no matter which operating
    system our local machine is running.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用Minikube在本地机器上安装了单节点Kubernetes集群；我们看了如何在macOS、Windows 10和Ubuntu Linux上实现这一点。一旦安装完成，我们发现无论我们的本地机器运行哪个操作系统，我们都可以以完全相同的方式与我们的单节点Kubernetes集群进行交互。
- en: We then took our first steps in launching pods, ReplicaSets, and services using
    both the Kubernetes dashboard and the Kubernetes command-line client called `kubectl`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们首次启动了Pods、ReplicaSets和服务，使用了Kubernetes仪表板和名为`kubectl`的Kubernetes命令行客户端。
- en: In the next chapter, we are going to be launching our first serverless tool,
    which is called Kubeless, on top of the single-node Kubernetes cluster we now
    have running locally.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将在我们目前在本地运行的单节点Kubernetes集群上启动我们的第一个无服务器工具，名为Kubeless。
