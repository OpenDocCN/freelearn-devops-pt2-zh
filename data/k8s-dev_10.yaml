- en: Troubleshooting Common Problems and Next Steps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除常见问题和下一步
- en: The previous chapters have explored how to use Kubernetes in your development
    process. In this chapter, we wrap up the examples by looking at some of the common
    errors you might encounter. We look at how to understand them, and techniques
    for diagnosing the issues as well as how to resolve them. This chapter also reviews
    some of the emerging projects that are forming to assist developers with using
    Kubernetes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的章节探讨了如何在开发过程中使用Kubernetes。在本章中，我们通过查看一些您可能遇到的常见错误来总结示例。我们将看看如何理解它们，诊断问题的技术以及如何解决它们。本章还回顾了一些新兴项目，这些项目正在形成以帮助开发人员使用Kubernetes。
- en: 'Topics for this chapter include:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主题包括：
- en: Common errors and how to resolve them
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见错误及其解决方法
- en: Emerging projects for developers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员的新兴项目
- en: Interacting with the Kubernetes project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Kubernetes项目交互
- en: Common errors and how to resolve them
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见错误及其解决方法
- en: Throughout the book, we have provided examples that illustrate how to work with
    Kubernetes. In developing these examples, we hit all the same issues you are likely
    to encounter, some of them confusing—and it isn't always clear how to determine
    what the problem is and how to resolve it so that the system works. This section
    will go through a number of the errors that you might see, discuss how to diagnose
    them, and provide you with some techniques to help you understand if you see these
    same issues yourself.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们提供了一些示例，说明了如何使用Kubernetes。在开发这些示例时，我们遇到了您可能会遇到的所有相同问题，其中一些令人困惑，而且并不总是清楚如何确定问题所在以及如何解决它，使系统正常工作。本节将介绍您可能会看到的一些错误，讨论如何诊断它们，并为您提供一些技术，以帮助您了解如果您自己遇到这些问题。
- en: Error validating data
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据验证错误
- en: 'When you are writing your own manifests for Kubernetes and using them directly,
    it is very easy to make simple mistakes that result in the error message : `error
    validating ...`.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当您为Kubernetes编写自己的清单并直接使用它们时，很容易犯一些简单的错误，导致错误消息：`error validating ...`。
- en: 'These are fortunately very easy to understand, if terribly inconvenient. To
    illustrate this example, I created a slightly broken deployment manifest:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，这些错误非常容易理解，但非常不方便。为了说明这个例子，我创建了一个略有问题的部署清单：
- en: '![](assets/cce62d17-e114-4eb8-a2f1-211d9b5993fc.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cce62d17-e114-4eb8-a2f1-211d9b5993fc.png)'
- en: 'When running `kubectl apply` with this manifest, you will receive an error:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此清单运行`kubectl apply`时，您将收到一个错误：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this case, I made a subtle typo, misnaming a required field, `name`, which
    is highlighted by the message `missing required field` in the error.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我犯了一个细微的拼写错误，错误地命名了一个必需字段`name`，这在错误中被突出显示为`missing required field`。
- en: 'If you include an extra field that the system does know about, you will also
    receive an error, but a slightly different one:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您包含了系统不知道的额外字段，您也会收到一个错误，但是稍有不同：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this case, the key to understanding the message is the `unknown field` section.
    These messages also reference a path through the data structure to exactly where
    the error is occurring. In the preceding example, this is `Deployment` (the object
    defined in the `kind` key) and within that `spec` -> `template` -> `spec` -> `container`.
    The error message also defines exactly what object the Kubernetes API was attempting
    to validate against: `io.k8s.api.core.v1.Container`. If you are confused about
    what it required, you can use this information to look up the documentation at
    the Kubernetes website. These objects are versioned (note the `v1` in the object
    name), and in this case you can find the full definition in the reference documentation
    for Kubernetes.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，理解消息的关键是`unknown field`部分。这些消息还引用了通过数据结构到确切发生错误的路径。在前面的示例中，这是`Deployment`（在`kind`键中定义的对象）以及其中的`spec`
    -> `template` -> `spec` -> `container`。错误消息还确切定义了Kubernetes API尝试根据的对象：`io.k8s.api.core.v1.Container`。如果您对所需内容感到困惑，您可以使用此信息在Kubernetes网站上查找文档。这些对象是有版本的（请注意对象名称中的`v1`），在这种情况下，您可以在Kubernetes的参考文档中找到完整的定义。
- en: 'The reference documentation is released per version of Kubernetes, and for
    version 1.9 that documentation resides at [https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/).
    The documentation includes some example details as well as the definitions within
    a three-column view:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文档是根据Kubernetes的每个版本发布的，对于1.9版本，该文档位于[https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/](https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.9/)。文档还包括一些示例细节以及三列视图中的定义：
- en: '![](assets/9bca5d77-59a8-4f83-9bbb-7f81d1d20f96.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9bca5d77-59a8-4f83-9bbb-7f81d1d20f96.png)'
- en: Navigating the documentation
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航文档
- en: 'The documentation follows the same pattern that we''ve seen from the Kubernetes
    objects themselves: they''re composed of smaller primitives. When you are navigating
    the documentation, for example looking at Deployment as shown in the screenshot,
    you will often see a reference to the objects that are encapsulated, and to dig
    into the details you may need to reference some of these object areas. For example,
    the Deployment example encapsulates Pods, so to properly define all the attributes
    in the template, you may need to reference the Pod v1 core documentation.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 文档遵循我们从Kubernetes对象本身看到的相同模式：它们由较小的基元组成。当您浏览文档时，例如查看屏幕截图中显示的部署，您经常会看到对封装的对象的引用，并且要深入了解细节，您可能需要引用其中一些对象区域。例如，部署示例封装了Pods，因此为了正确定义模板中的所有属性，您可能需要参考Pod
    v1核心文档。
- en: ErrImagePull
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ErrImagePull
- en: 'ErrImagePull is quite possibly the most common, and is fortunately straightforward
    to debug and diagnose. You''ll see `ErrImagePull` as the status message when this
    occurs, indicating that Kubernetes was not able to retrieve the image you specified
    in the manifest. It''s most commonly seen when simply requesting pod status:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: ErrImagePull可能是最常见的问题，幸运的是很容易调试和诊断。当发生这种情况时，您将看到`ErrImagePull`作为状态消息，表明Kubernetes无法检索您在清单中指定的图像。当简单地请求pod状态时，最常见的情况是：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can immediately get more detailed information about why this error occurred
    using the `kubectl describe` command. It's not entirely an error condition, as
    Kubernetes is technically in a waiting state hoping that the image will become
    available.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以立即使用`kubectl describe`命令获取有关为什么发生此错误的更详细信息。从技术上讲，这并不完全是一个错误条件，因为Kubernetes在等待状态下，希望图像变得可用。
- en: 'In this example, we get more detail with this command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们可以使用以下命令获得更多详细信息：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This provides information like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了诸如此类的信息：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can see the container is in a waiting state from this detail, and it''s
    typically the events associated with the pod that provide the most useful information.
    The information is dense, so generally having a wider terminal window available
    when you invoke this command makes it easier to parse:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个细节中可以看出容器处于等待状态，通常与pod相关的事件提供了最有用的信息。信息很密集，因此通常在调用此命令时有一个更宽的终端窗口可用，这样更容易解析：
- en: '![](assets/d7e9ea71-d041-485a-ad53-8e589067fdba.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d7e9ea71-d041-485a-ad53-8e589067fdba.png)'
- en: 'You can see the process steps that Kubernetes has taken:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到Kubernetes已经采取的处理步骤：
- en: Kubernetes scheduled the pod
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Kubernetes安排了pod
- en: The node where the pod was scheduled attempted to retrieve the requested image
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安排pod的节点尝试检索请求的图像
- en: It reported a warning that the image wasn't found, set the status to `ErrImagePull`,
    and started retrying with a back-off
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它报告了一个警告，说找不到图像，将状态设置为`ErrImagePull`，并开始使用回退重试
- en: The first thing to do is verify that the image you have requested is indeed
    the one you intended to request. In this case, I made an intentional typo to request
    an image that doesn't exist.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要做的是验证您请求的图像是否确实是您打算请求的图像。在这种情况下，我故意打了一个错字，请求了一个不存在的图像。
- en: Another common problem can be that the image does exist, but isn't allowed to
    be pulled for some reason. For example, when you first create a container and
    push it to `quay.io`, it keeps that container build private until you explicitly
    go to the website and make it available publicly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的问题可能是图像确实存在，但由于某种原因不允许被拉取。例如，当您首次创建一个容器并将其推送到`quay.io`时，它会保持该容器构建为私有，直到您明确访问网站并将其公开为止。
- en: This same error message can appear if you are pulling from a private repository,
    but the credentials used are invalid (or have become invalid in the process of
    updating them).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从私有存储库中拉取图像，但使用的凭据无效（或在更新过程中变得无效），则可能会出现相同的错误消息。
- en: 'One of the best debugging techniques to verify access, at least to public images,
    is to attempt to retrieve the image yourself. If you have Docker installed locally,
    this is as simple as invoking a Docker `pull` command. In this case, we could
    verify the image:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 验证访问权限的最佳调试技术之一，至少对于公共图像，是尝试自己检索图像。如果您在本地安装了Docker，只需调用Docker的`pull`命令即可。在这种情况下，我们可以验证图像：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The error response is fairly direct from the Docker command line:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Docker命令行的错误响应相当直接：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: CrashLoopBackOff
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CrashLoopBackOff
- en: You may find your pod reporting a status of `CrashLoopBackOff`, another incredibly
    common error state.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会发现您的pod报告状态为`CrashLoopBackOff`，这是另一个非常常见的错误状态。
- en: 'This is an error condition that happens only after a container is invoked,
    so it can be delayed in appearing. You will typically see it when invoking `kubectl
    get pods`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个仅在调用容器后发生的错误条件，因此可能会延迟出现。通常在调用`kubectl get pods`时会看到它：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This explicitly means that one of the containers in the pod has exited unexpectedly,
    and perhaps with a non-zero error code. The first course of action in understanding
    what happened is to utilize the `kubectl describe` command to get more detail.
    In this case:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这明确意味着pod中的一个容器意外退出，可能是以非零错误代码退出。了解发生了什么的第一步是利用`kubectl describe`命令获取更多细节。在这种情况下：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Scan through the resulting content, looking at the status for each of the containers
    within the pod:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览生成的内容，查看pod中每个容器的状态：
- en: '![](assets/a3ad1897-0234-4954-af13-a7c3502b23ff.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a3ad1897-0234-4954-af13-a7c3502b23ff.png)'
- en: In the preceding example, you can see the Jaeger collector container is in the `Running`
    state, and `Ready` is reporting `True`. The flask container, however, is in a
    state of `Terminated`, with the reason only `Error` and an exit code of `2`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，您可以看到 Jaeger 收集器容器处于 `Running` 状态，而 `Ready` 报告为 `True`。然而，flask 容器处于
    `Terminated` 状态，原因只有 `Error`，退出代码为 `2`。
- en: The step that often provides at least some information about why the container
    exited is leveraging the `kubectl logs` command, to see what we reported in `STDOUT`
    and `STDERR`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通常提供关于容器退出原因的至少一些信息的步骤是利用 `kubectl logs` 命令，查看我们在 `STDOUT` 和 `STDERR` 中报告的内容。
- en: 'If you invoke `kubectl logs` and the pod name, you may also see this error:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您调用 `kubectl logs` 和 pod 名称，您可能还会看到此错误：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is simply asking you to be more specific in identifying the container.
    In this example, we are using a pod that has an init container as well as two
    containers: the main and a Jaeger collector side-car. Simply appending the container
    to the end of the command, or using the `-c` option with the container name, will
    do what you want:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是要求您在识别容器时更具体。在这个例子中，我们使用了一个具有初始化容器以及两个容器的 pod：主容器和 Jaeger 收集器 side-car。简单地将容器附加到命令的末尾，或者使用
    `-c` 选项与容器名称，就可以实现您想要的效果：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: What gets returned, and how useful it is, will depend on how you created the
    container and what container runtime your Kubernetes cluster is using.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的内容以及其有多大用处，将取决于您如何创建容器以及您的 Kubernetes 集群使用的容器运行时。
- en: As a reminder, `kubectl logs` also has the `-p` flag, which is exceptionally
    useful in retrieving the logs from the previous run of the container.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，`kubectl logs` 还有 `-p` 标志，这在检索容器的上一次运行日志时非常有用。
- en: If, for some reason, you aren't entirely sure what's been set in the container,
    we can use some of the Docker commands to retrieve and then inspect the container
    image directly and locally, which can often shed light on what the issue may be.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于某种原因，您并不完全确定容器中设置了什么，我们可以使用一些 Docker 命令直接在本地检索并检查容器镜像，这通常可以阐明问题所在。
- en: 'As a reminder, pull the image:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，拉取镜像：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, inspect it:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，进行检查：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Scrolling down to the content, you can see what the container will attempt
    to run and how it''s set up:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 向下滚动到内容，您可以看到容器将尝试运行的内容以及它的设置方式：
- en: '![](assets/d457046a-60c5-4a27-a5bc-71c8ae8a9139.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d457046a-60c5-4a27-a5bc-71c8ae8a9139.png)'
- en: 'In this particular example, I intentionally introduced a typo into the name
    of the Python file getting invoked, leaving off the `.py` extension. This may
    not be obvious when you''re looking at this output, but specifically look for
    `EntryPoint` and `Cmd`, and try and verify that those are expected values. In
    this case, the entrypoint is `python3`, and the command is what gets invoked with
    it: `/opt/exampleapp/exampleapp`.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的例子中，我故意在被调用的 Python 文件名中引入了一个拼写错误，省略了 `.py` 扩展名。当您查看此输出时，这可能并不明显，但请特别查找
    `EntryPoint` 和 `Cmd`，并尝试验证这些是否是预期的值。在这种情况下，入口点是 `python3`，命令是随之被调用的：`/opt/exampleapp/exampleapp`。
- en: Starting and inspecting the image
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始并检查镜像
- en: 'Since this may be unclear without actually inspecting the image, a common way
    to diagnose something like this is to run the image with an alternative command,
    such as `/bin/sh`, and use an interactive session to look around and do your validation
    and debugging. You can do this locally if you have Docker installed; when you
    do so, make sure you explicitly override the `entrypoint` and command to run a
    command interactively:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这可能不太清楚，除了实际检查镜像之外，诊断此类问题的常见方法是使用替代命令运行镜像，例如 `/bin/sh`，并使用交互式会话来查看并进行验证和调试。如果您安装了
    Docker，可以在本地执行此操作；在这样做时，请确保明确覆盖 `entrypoint` 和命令以交互式运行命令：
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can then manually invoke what the container would have run, `python3 /opt/exampleapp/exampleapp`,
    and do any additional debugging there.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以手动调用容器将要运行的内容，`python3 /opt/exampleapp/exampleapp`，并在那里进行任何额外的调试。
- en: You can do this same thing in a Kubernetes cluster, if you don't happen to have
    Docker installed locally. If the pod already exists, you can use `kubectl exec`
    as we have done earlier, but when the container has crashed this typically isn't
    available, as the container isn't already running to utilize.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有在本地安装Docker，您也可以在Kubernetes集群中执行相同的操作。如果Pod已经存在，您可以像之前一样使用`kubectl exec`，但是当容器崩溃时，通常是不可用的，因为容器尚未运行。
- en: 'In those cases, creating a completely new, short lived, and ephemeral deployment
    with `kubectl run` is a good way to continue:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，使用`kubectl run`创建一个全新的、短暂的、临时的部署是一个不错的选择：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: You will want to be careful to have `--command=true` in your options if you
    want to override the entrypoint for the container, which is otherwise set to `python3`.
    Without that option, the `kubectl run` command will presume you are trying to
    pass different arguments to be used with the default entrypoint.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要覆盖容器的入口点，您将需要在选项中小心使用`--command=true`，否则入口点将被设置为`python3`。如果没有该选项，`kubectl
    run`命令将假定您正在尝试传递不同的参数以与默认入口点一起使用。
- en: 'You may also find that when you attempt to invoke a command like this, you
    get this message:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还会发现，当您尝试调用这样的命令时，会收到以下消息：
- en: '[PRE15]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When you create a bare deployment like this, the pod doesn''t get deleted after
    the container exits (or errors). Invoking `kubectl get pods` with the `-a` option
    should show you the pods that exist:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建一个类似的裸部署时，容器退出（或出现错误）后，Pod不会被删除。使用`kubectl get pods`命令加上`-a`选项应该会显示存在的Pod：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can delete it in order to make another attempt at running it:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以删除它以再次尝试运行它：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Adding your own setup to the container
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向容器添加自己的设置
- en: When you are working with a container that includes code and systems you didn't
    create, you may find yourself wanting to set up some environment variables or
    otherwise establish some configuration files before whatever process in the container
    gets run. This is extremely common when using other prebuilt open source software,
    especially software that doesn't already have a well-established container that
    you can utilize.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用包含您没有创建的代码和系统的容器时，您可能会希望在容器中运行任何进程之前设置一些环境变量或者建立一些配置文件。这在使用其他预构建的开源软件时非常常见，特别是那些没有已经建立好的容器可以利用的软件。
- en: A common technique for handling this situation is to add a shell script into
    the container and then have the entrypoint and arguments set to run that script.
    If you do this, make sure you include the appropriate options for invoking the
    script.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这种情况的一种常见技术是将一个shell脚本添加到容器中，然后将入口点和参数设置为运行该脚本。如果这样做，请确保包括适当的选项来调用脚本。
- en: 'A common example is to invoke a script with `/bin/bash -c /some/script`. It
    can be easy to miss the `-c` argument, which can lead to a very confusing error
    message:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的例子是使用`/bin/bash -c /some/script`来调用脚本。很容易忽略`-c`参数，这可能会导致一个非常令人困惑的错误消息：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This happens when the script referenced isn't set to be executable, and you
    didn't include the `-c` option to have the shell attempt to read and interpret
    the file you specified.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当引用的脚本没有设置为可执行时，且您没有包括`-c`选项来让shell尝试读取和解释您指定的文件时，就会发生这种情况。
- en: No endpoints available for service
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务没有可用的端点
- en: 'One of the most subtle issues to hunt down is why isn''t my service acting
    as I expect? A common error to see in these cases is this message:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最难以发现的问题之一是为什么我的服务没有按照我期望的那样工作？在这些情况下常见的错误是这样的消息：
- en: '[PRE19]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you have created a deployment and a service together, and everything seems
    to be running, but when you access the service endpoint you see this output:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经一起创建了部署和服务，并且一切似乎都在运行，但当您访问服务端点时看到这个输出：
- en: '[PRE20]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In this case, I received this message when using `kubectl proxy` to access
    the service endpoint `flask-service` through the proxy using the URL:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，当使用`kubectl proxy`通过代理使用URL访问服务端点`flask-service`时，我收到了这条消息：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In these cases, use the command `kubectl describe` to get details on how the
    service is set up:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，使用`kubectl describe`命令获取有关服务设置的详细信息：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](assets/8865fb81-f6e1-416d-87ad-e0077ff520cb.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8865fb81-f6e1-416d-87ad-e0077ff520cb.png)'
- en: 'Take close note of the selector that is set for the service, and then compare
    it to the deployment you think it should be matching. In this case, the selector
    is `app=flaskapp`, and looks at the detail on our deployment:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 密切注意为服务设置的选择器，然后将其与您认为应该匹配的部署进行比较。在这种情况下，选择器是`app=flaskapp`，看看我们的部署的详细信息：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](assets/75b01149-c0a7-46b0-b577-04558cb24163.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/75b01149-c0a7-46b0-b577-04558cb24163.png)'
- en: The immediate thing you should verify is that the containers are running and
    operational, which they are in this case. The very next thing is to look at the
    labels on the deployment, and in this case you see them set to `app=flask`, not
    `app=flaskapp` which is why nothing is responding on that service.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该立即验证的是容器是否正在运行和正常运行，而在这种情况下是的。接下来要做的事情是查看部署的标签，在这种情况下，您会看到它们设置为`app=flask`，而不是`app=flaskapp`，这就是为什么该服务没有响应的原因。
- en: 'Another way to see what''s happening to pods backing a service is to specifically
    request pods using a label selected with the `kubectl get` command. For example,
    we could have used this command:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 查看支持服务的pod发生的情况的另一种方法是使用`kubectl get`命令具体请求pod。例如，我们可以使用这个命令：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'And because we haven''t set any pods with the relevant labels, we would have
    received this response:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还没有使用相关标签设置任何pod，我们会收到这样的响应：
- en: '[PRE25]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Labels and selectors are how a lot of elements are loosely coupled together
    within Kubernetes. Being loosely coupled, Kubernetes does not validate that you
    have correctly set the right values to bind pods to services. Not making sure
    the labels and selectors are correct is an easy mistake to make, and won't show
    up as an error other than nothing responding as you expected.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 标签和选择器是Kubernetes中许多元素松散耦合在一起的方式。由于松散耦合，Kubernetes不会验证您是否正确设置了将pod绑定到服务的正确值。不确保标签和选择器是正确的是一个容易犯的错误，除了没有按预期响应外，不会显示为错误。
- en: Stuck in PodInitializing
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卡在PodInitializing
- en: You may see a scenario where your pods appear to be hanging while initializing,
    especially when you are first setting up the configuration where it involves volume
    mounts and ConfigMaps.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会遇到一种情况，您的pod似乎在初始化时出现挂起的情况，特别是当您首次设置涉及卷挂载和ConfigMaps的配置时。
- en: 'The status from `kubectl get pods` will look something like this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 从`kubectl get pods`的状态看起来是这样的：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'And the status doesn''t change. Trying to get logs about what is happening,
    such as:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 而且状态没有改变。尝试获取正在发生的日志，比如：
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Results in this message:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 导致这个消息的结果是：
- en: '[PRE28]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The best thing to do here is to use `kubectl describe` to get the detail of
    what is set up on the pod and the recent events:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，最好的做法是使用`kubectl describe`来获取pod和最近事件的详细信息：
- en: '[PRE29]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Here you will see output showing the containers are all in a state of `Waiting`,
    with a reason of `PodInitializing`:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将看到输出显示所有容器都处于“等待”状态，原因是“PodInitializing”：
- en: '![](assets/204cb077-c0b0-41bc-9d44-07c64955be3a.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/204cb077-c0b0-41bc-9d44-07c64955be3a.png)'
- en: 'It may take a few minutes for the events that really show what happen to appear,
    but after a few minutes they should appear:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 事件可能需要几分钟的时间才能真正显示出发生了什么，但几分钟后它们应该会出现：
- en: '![](assets/81c89241-9afb-4c08-a6a0-658e509d5e62.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/81c89241-9afb-4c08-a6a0-658e509d5e62.png)'
- en: 'You see the warning `FailedMount`, and the relevant information:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您会看到警告`FailedMount`，以及相关的信息：
- en: '[PRE30]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This takes some time to appear because Kubernetes provides for some longer
    timeouts when attempting to mount volumes, as well as retries. In this case, the
    error was a typo in the pod specification referencing a ConfigMap that doesn''t
    exist: `flaskConfig`.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要一些时间才能出现，因为Kubernetes在尝试挂载卷时提供了一些较长的超时时间，以及重试。在这种情况下，错误是Pod规范中引用了一个不存在的ConfigMap：`flaskConfig`。
- en: Missing resources
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缺失的资源
- en: In many respects, this issue we just described is very similar to the labels
    and selectors bug, but exhibits itself quite differently. The underlying system
    does its best to look for volumes, ConfigMaps, secrets, and so on, and to let
    you create them in any order. If you make a typo, or if a ConfigMap, secret, or
    volume isn't referenced correctly or is just missing, then the pod will ultimately
    fail.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，我们刚刚描述的这个问题与标签和选择器的错误非常相似，但表现出来的方式完全不同。底层系统会尽力寻找卷、ConfigMaps、秘钥等，并允许您以任何顺序创建它们。如果您打错字，或者ConfigMap、秘钥或卷的引用不正确或者丢失，那么Pod最终将失败。
- en: These resources are all referenced dynamically. In doing that referencing, Kubernetes
    provides retries and timeouts, but cannot explicitly validate the failures before
    actually looking for the related resources and ultimately failing. This can make
    debugging these issues more time consuming. When you first look for why issues
    are failing, not all the information may be visible (a failed volume mount, a
    missing ConfigMap or secret, and so forth). The best option is to keep an eye
    on the events from the `kubectl describe` command, and look explicitly for warnings
    in the events, where these issues will ultimately appear.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这些资源都是动态引用的。在进行引用时，Kubernetes提供了重试和超时，但在实际寻找相关资源并最终失败之前，无法明确验证故障。这可能会使调试这些问题变得更加耗时。当您首次寻找问题失败的原因时，可能不是所有的信息都是可见的（例如卷挂载失败、缺失的ConfigMap或秘钥等）。最佳选择是密切关注`kubectl
    describe`命令中的事件，并明确寻找事件中的警告，这些问题最终会出现在那里。
- en: Some development teams are resolving this C*lass A* problem by generating the
    manifests, using a program that they have verified themselves to create the appropriate
    links and making sure they are correct.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发团队正在通过生成清单来解决这个问题，使用他们自己验证过的程序来创建适当的链接并确保它们是正确的。
- en: Emerging projects for developers
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发人员的新兴项目
- en: Looking at alternatives to help the development process that uses Kubernetes
    starts to expose a large number of projects in development. While writing this
    book, Kubernetes advanced from version 1.7 to the beta release of Kubernetes v1.10\.
    At the same time, a large number of projects have started to establish themselves
    around Kubernetes, working to help smooth some of the rough edges around using
    Kubernetes actively in a development workflow.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找替代方案来帮助使用Kubernetes的开发过程开始暴露出大量的开发中项目。在编写本书时，Kubernetes从版本1.7进化到Kubernetes
    v1.10的beta版本。与此同时，大量的项目已经开始在Kubernetes周围建立自己，努力帮助消除在开发工作流程中积极使用Kubernetes时的一些问题。
- en: Linters
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linters
- en: 'In the previous section, we were talking about missing components that can''t
    be pre-validated by Kubernetes, but which we can look for ourselves. Three projects
    that are related to validation are kubeval, kube-lint, and kubetest, described
    here:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们谈到了Kubernetes无法预先验证的缺失组件，但我们可以自己查找。与验证相关的三个项目是kubeval、kube-lint和kubetest，这里进行了描述：
- en: kubeval : [https://github.com/garethr/kubeval](https://github.com/garethr/kubeval)
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kubeval：[https://github.com/garethr/kubeval](https://github.com/garethr/kubeval)
- en: kubeval was created by Gareth Rushgrove to validate manifests and configuration
    files before attempting to apply them. This tool can be extremely handy in double-checking
    your work when you're creating manifests from your own code or using another project.
    It can't check everything, but it makes an excellent first pass check.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: kubeval由Gareth Rushgrove创建，用于在尝试应用之前验证清单和配置文件。当您从自己的代码创建清单或使用另一个项目时，此工具非常有用。它无法检查所有内容，但是可以进行出色的首次检查。
- en: kube-lint : [https://github.com/viglesiasce/kube-lint](https://github.com/viglesiasce/kube-lint)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kube-lint：[https://github.com/viglesiasce/kube-lint](https://github.com/viglesiasce/kube-lint)
- en: Created by Vic Iglesias, kube-lint is more of an early experiment or functional
    prototype than a growing project. It is intended to validate a set of Kubernetes
    manifests against a group of common rules. Many of these best practices and common
    patterns are forming from the Helm project, in which Vic participates extensively,
    and there is ongoing conversation within the Kubernetes project about possible
    ways to help do more validation along these lines with a `lint` command.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 由Vic Iglesias创建，kube-lint更像是一个早期实验或功能原型，而不是一个不断发展的项目。它旨在根据一组常见规则验证一组Kubernetes清单。其中许多最佳实践和常见模式来自Helm项目，Vic在其中积极参与，并且Kubernetes项目内正在讨论可能的方式来使用`lint`命令进行更多此类验证。
- en: kubetest : [https://github.com/garethr/kubetest](https://github.com/garethr/kubetest)
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kubetest：[https://github.com/garethr/kubetest](https://github.com/garethr/kubetest)
- en: Also by Gareth Rushgrove, kubetest was built to run a pass of testing across
    Kubernetes configuration files. Rather than explicitly encapsulating best practices
    and rules, it is written more in the form of unit testing, allowing assertions
    against sets of files and letting you specify your own constraints.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Gareth Rushgrove也开发了kubetest，用于在Kubernetes配置文件上运行测试。与明确封装最佳实践和规则不同，它更多地以单元测试的形式编写，允许对文件集进行断言，并让您指定自己的约束。
- en: Helm
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Helm
- en: 'We have mentioned about and used Helm in earlier chapters, using it to install
    software within Kubernetes so that we can take advantage of it. Available at [https://helm.sh](https://helm.sh), Helm
    has been stable at version 2 for quite a while, and is actively used by a number
    of development teams. The charts that represent the collected best practices are
    available at [https://github.com/kubernetes/charts](https://github.com/kubernetes/charts),
    and are updated as the software they encapsulate, and Kubernetes, advances:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前几章中提到并使用了Helm，用它在Kubernetes中安装软件，以便我们可以利用它。Helm可在[https://helm.sh](https://helm.sh)找到，版本2已经相当稳定，并且被许多开发团队积极使用。代表收集的最佳实践的图表可在[https://github.com/kubernetes/charts](https://github.com/kubernetes/charts)找到，并且随着它们封装的软件和Kubernetes的进步而更新：
- en: '![](assets/6df6df88-30d9-440f-9e10-4fd26f94a079.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6df6df88-30d9-440f-9e10-4fd26f94a079.png)'
- en: Helm version 3 is the next large step forward with Helm, breaking some of the
    backwards compatibility guarantees they have been keeping while in version 2\.
    With the transition, the project team has been very clear that there will be a
    clear migration path and the current charts and examples will both be useful as
    they are, as well as updated as the project evolves. The details of the vision
    for Helm v3 are still forming and this project will undoubtedly be a key one in
    the larger Kubernetes ecosystem.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Helm版本3是Helm的下一个重大进步，打破了他们在版本2中一直保持的一些向后兼容性保证。随着过渡，项目团队非常清楚地表示将有明确的迁移路径，并且当前的图表和示例将在项目发展过程中保持有用。Helm
    v3的愿景细节仍在形成，这个项目无疑将是更大的Kubernetes生态系统中的关键项目。
- en: In version 2, it sets itself as a package manager for Kubernetes, primarily
    focusing on being a consistent way (and examples) of how to package sets of pods,
    deployments, services, ConfigMaps, and so on together, and deploy them as a whole
    within Kubernetes. Many teams created their own charts and have integrated Helm
    into their continuous integration pipeline, using Helm to render manifests as
    the underlying software was updated and to deploy as a part of that process.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在第2版中，它将自己定位为Kubernetes的软件包管理器，主要专注于成为一种一致的方式（和示例）来打包一组pod、部署、服务、ConfigMaps等，并将它们作为一个整体在Kubernetes中部署。许多团队创建了他们自己的图表，并将Helm集成到他们的持续集成流水线中，使用Helm来渲染清单，随着基础软件的更新并作为该过程的一部分进行部署。
- en: One of the shortcomings of Helm may be that it is fairly complicated to create
    templates for your own software. The templating system that Helm uses is called
    sprig, and may be unfamiliar to a number of development teams. The next major
    revision of Helm, which is being defined as this book is being published, hopes
    to tackle a broad number of challenges, including making it easier for developers
    to write and publish charts. It is really worth keeping an eye on this project.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Helm的一个缺点可能是为自己的软件创建模板相当复杂。Helm使用的模板系统称为sprig，可能对许多开发团队来说并不熟悉。Helm的下一个主要修订版，正在本书出版时被定义，希望解决许多挑战，包括使开发人员更容易编写和发布图表。这个项目真的值得关注。
- en: ksonnet
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ksonnet
- en: 'ksonnet ([https://ksonnet.io](https://ksonnet.io)) was also mentioned earlier
    as another means of templating and rendering manifests for Kubernetes. ksonnet
    approaches the task differently to Helm, focusing on a means of templating the
    manifests, and making those templates very easy to compose:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: ksonnet ([https://ksonnet.io](https://ksonnet.io)) 也被提及为另一种用于模板化和渲染Kubernetes清单的手段。ksonnet以不同的方式处理任务，专注于模板化清单，并使这些模板非常容易组合：
- en: '![](assets/b911f8b1-5192-4365-a9ec-c167d373223f.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b911f8b1-5192-4365-a9ec-c167d373223f.png)'
- en: ksonnet uses the credentials of a user, and doesn't attempt to manage the state
    of releases that it renders, focusing instead on the templating. It is built upon
    a library called Jsonnet, which adds some programmatic aspects to JSON templating.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: ksonnet使用用户的凭据，并不尝试管理其渲染的发布状态，而是专注于模板化。它建立在一个名为Jsonnet的库之上，为JSON模板添加了一些编程方面的内容。
- en: ksonnet is a fairly new project, and is starting to see some traction with other
    projects adopting it. They have stated that they are actively working with the
    Helm community as well, and hopes to enable ksonnet as an alternative way to create
    charts.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: ksonnet是一个相当新的项目，开始受到其他项目的关注。他们表示他们也在积极与Helm社区合作，并希望将ksonnet作为创建图表的替代方式。
- en: Brigade
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Brigade
- en: 'Brigade, available at [https://brigade.sh](https://brigade.sh), takes a slightly
    different tack to solving the deploy to Kubernetes problem. Rather than focus
    on the templating and what sort of DSL that might be used to programmatically
    generate Kubernetes manifests, it leans more towards embracing scripting and programming
    with Kubernetes and its events as first-class citizens:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Brigade，可在[https://brigade.sh](https://brigade.sh)找到，采取了一种略有不同的方法来解决部署到Kubernetes的问题。它不是专注于模板化和用于以编程方式生成Kubernetes清单的DSL，而是更倾向于使用Kubernetes及其事件作为一流公民进行脚本编写和编程：
- en: '![](assets/51a9a47c-c1ad-4035-a453-4efd08c9043d.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/51a9a47c-c1ad-4035-a453-4efd08c9043d.png)'
- en: The Microsoft team from Azure built Brigade to extend on JavaScript, exposing
    Kubernetes objects and events as elements to be composed into workflows and pipelines.
    If your development team is familiar with JavaScript, then Brigade may be an especially
    appealing means of coordinating and interacting with Kubernetes.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Azure的微软团队构建了Brigade来扩展JavaScript，将Kubernetes对象和事件公开为可以组合成工作流程和管道的元素。如果您的开发团队熟悉JavaScript，那么Brigade可能是一种特别吸引人的协调和与Kubernetes交互的手段。
- en: skaffold
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: skaffold
- en: Skaffold is available at [https://github.com/GoogleCloudPlatform/skaffold](https://github.com/GoogleCloudPlatform/skaffold) and
    is developed by a team from Google:![](assets/d3b7171d-4714-4ee4-af9d-3135251817d5.png)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Skaffold可以在[https://github.com/GoogleCloudPlatform/skaffold](https://github.com/GoogleCloudPlatform/skaffold)找到，由Google团队开发！
- en: It is the most recent of these developer-focused projects, and focuses specifically
    on being a command-line tool to enable the process of going from code checked
    in to source control, through building containers to Kubernetes manifests updated
    and deployed. It is also set up to be a component in a larger toolchain, and has
    hooked to work with other projects, most notably Helm, for the deployment portion
    of what it does.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 它是这些面向开发人员的项目中最新的一个，专注于成为一个命令行工具，以实现从检入代码到源代码控制，通过构建容器到更新和部署Kubernetes清单的过程。它还被设置为一个更大工具链中的一个组件，并已连接到其他项目，特别是Helm，用于部署部分。
- en: img
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: img
- en: While looking at tools and projects as components, the img project, which is
    hosted under [genuinetools.org](https://genuinetools.org) and is available on
    GitHub at [https://github.com/genuinetools/img](https://github.com/genuinetools/img),
    is really worth noting. The examples in this book have all used Docker to build
    container images, and img builds on the underlying toolkit that the team at Docker
    has been evolving from their product to support creating containers. Most importantly,
    the img project allows for the creation of Docker images without a Daemon or running
    with significant privileges. This makes creating containers far more amenable
    to being built within a Kubernetes cluster, or more generally without having to
    give the process extensive permissions to the system hosting it.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在将工具和项目视为组件时，值得注意的是托管在[genuinetools.org](https://genuinetools.org)下的img项目，可以在GitHub上找到[https://github.com/genuinetools/img](https://github.com/genuinetools/img)。本书中的示例都使用Docker构建容器映像，而img则构建在Docker团队从其产品演变出来的基础工具包上，以支持创建容器。最重要的是，img项目允许在没有守护程序或以显着权限运行的情况下创建Docker映像。这使得在Kubernetes集群内构建容器或更一般地而言，无需赋予该过程对托管它的系统具有广泛权限的过程更加容易。
- en: The genuinetools project hosts a number of other useful components, most of
    them focused on alternative container runtimes.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: genuinetools项目托管了许多其他有用的组件，其中大多数都专注于替代容器运行时。
- en: Draft
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Draft
- en: 'Another tool from the team at Microsoft, Draft, is available at [https://draft.sh](https://draft.sh),
    and is a tool focused on trying to optimize the time going from a change in source
    control to being deployed within Kubernetes and to seeing those changes in action:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 微软团队的另一个工具Draft可以在[https://draft.sh](https://draft.sh)找到，它是一个专注于优化从源代码更改到在Kubernetes中部署并查看这些更改的工具：
- en: '![](assets/38464c7f-1ba4-4517-a1e3-b2b4c55e50b7.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/38464c7f-1ba4-4517-a1e3-b2b4c55e50b7.png)'
- en: Draft focuses on simple commands and a local configuration file to create a
    local Helm chart for your application and to streamline getting it running on
    a Kubernetes cluster, encapsulating the repetitive process of building the container,
    pushing it to a container registry, and then deploying updated manifests to upgrade.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Draft专注于简单的命令和本地配置文件，用于为您的应用程序创建本地Helm图表，并简化在Kubernetes集群上运行它的过程，封装了构建容器、将其推送到容器注册表，然后部署更新的清单以进行升级的重复过程。
- en: Like a few of these other tools, Draft builds on and uses Helm.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他一些工具一样，Draft建立在Helm的基础上并使用Helm。
- en: ksync
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ksync
- en: 'ksync, available at [https://vapor-ware.github.io/ksync/](https://vapor-ware.github.io/ksync/),
    takes a very different tactic for a development tool. Rather than optimizing the
    time to build and deploy into a Kubernetes cluster, it focuses on expanding the
    proxy capabilities to reach into a cluster and manipulate the code within a specific
    container:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: ksync，可在[https://vapor-ware.github.io/ksync/](https://vapor-ware.github.io/ksync/)找到，采用了一种非常不同的开发工具策略。与其优化构建和部署到Kubernetes集群的时间不同，它专注于扩展代理功能，以便进入集群并操纵特定容器内的代码：
- en: '![](assets/545106ad-a2c5-4695-a294-01725dc341f7.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/545106ad-a2c5-4695-a294-01725dc341f7.png)'
- en: A common pattern for developing with Docker has been to mount a local directory
    that contains interpreted code (such as our Python and JavaScript examples in
    this book) and to have the container run that code, so that you can edit it on
    the fly and quickly restart and retry. ksync mimics this capability by running
    both on your local development machine and within your cluster, watching for changes
    locally and reflecting them into Kubernetes.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Docker进行开发的常见模式是挂载包含解释代码的本地目录（例如本书中的Python和JavaScript示例），并让容器运行该代码，以便您可以即时编辑并快速重新启动和重试。
    ksync通过在本地开发机器和集群内同时运行来模拟此功能，监视本地更改并将其反映到Kubernetes中。
- en: ksync focuses on the development process for software within a single pod. So
    while it won't help with deploying all the supporting applications, it may make
    the development process with a single component in Kubernetes much faster.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ksync专注于单个pod内软件的开发过程。因此，虽然它无法帮助部署所有支持的应用程序，但它可能会加快Kubernetes中单个组件的开发过程。
- en: Telepresence
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程呈现
- en: 'Telepresence, available at [https://www.telepresence.io](https://www.telepresence.io),
    is another project that focuses on providing the developer with tighter access
    from their local machine into a Kubernetes cluster:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Telepresence，可在[https://www.telepresence.io](https://www.telepresence.io)找到，是另一个专注于为开发人员提供从本地机器到Kubernetes集群的更紧密访问的项目：
- en: '![](assets/c2012ba7-97ea-46c7-a9b8-7c87d2ff5875.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c2012ba7-97ea-46c7-a9b8-7c87d2ff5875.png)'
- en: Created by Datawire, which makes additional projects for developers to work
    with Kubernetes, Telepresence creates a two-way proxy that forwards connections
    and responses to a process that would be within a pod in Kubernetes to a process
    running on your local development machine.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 由Datawire创建，该公司还为开发人员提供其他与Kubernetes一起使用的项目。Telepresence创建了一个双向代理，将连接和响应转发到Kubernetes中pod内的进程，该进程在您本地的开发机器上运行。
- en: Where ksync copies your code and runs it within Kubernetes, Telepresence lets
    you run the code on your own machine, transparently connecting it as though it
    were a pod running within Kubernetes.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: ksync复制您的代码并在Kubernetes内运行，而Telepresence则允许您在自己的机器上运行代码，并将其透明地连接，就像它是在Kubernetes内运行的pod一样。
- en: Interacting with the Kubernetes project
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Kubernetes项目交互
- en: 'In discussing all these projects, the one where you can get the most information
    about how to work with Kubernetes is Kubernetes itself. The project hosts a website
    that includes the formal documentation, a blog, a community calendar, tutorials,
    and more at [https://kubernetes.io/](https://kubernetes.io/):'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论所有这些项目时，你可以获得关于如何与Kubernetes一起工作的最多信息的项目就是Kubernetes本身。该项目托管了一个网站，其中包括正式文档、博客、社区日历、教程等，网址为[https://kubernetes.io/](https://kubernetes.io)：
- en: '![](assets/72a793f9-6a6d-4cd6-a448-bd5a891d01a4.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/72a793f9-6a6d-4cd6-a448-bd5a891d01a4.png)'
- en: This site makes a great jumping off point to get more information, but certainly
    isn't the only resource available.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网站是获取更多信息的绝佳起点，但当然不是唯一的资源。
- en: The Kubernetes project is really quite large, so large that it is nearly impossible
    for any single person to track all of the efforts, evolution, projects, and interests
    that are going on within the project. To attempt to provide guidance, the Kubernetes
    project has set itself up with a number of groups to focus on these interests
    in the form of Special Interest Groups, or SIGs. These groups are the semi-formal
    subprojects of Kubernetes, and each focuses on some specific subset of Kubernetes.
    Not surprisingly, many of these SIGs overlap in specifics, and it is not uncommon
    to find a contributor within Kubernetes being active in a number of SIGs at once.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes项目实际上非常庞大，以至于几乎不可能有任何单个人来跟踪项目内正在进行的所有努力、发展、项目和兴趣。为了提供指导，Kubernetes项目已经建立了一些专门关注这些兴趣的小组，即特别兴趣小组或SIG。这些小组是Kubernetes的半正式子项目，每个小组都专注于Kubernetes的某个特定子集。毫不奇怪，许多这些SIG在具体方面有重叠，并且在Kubernetes中发现一个贡献者同时活跃于多个SIG是很常见的。
- en: The complete list of SIGs is available online and is maintained at [https://github.com/kubernetes/community/blob/master/sig-list.md](https://github.com/kubernetes/community/blob/master/sig-list.md).
    Each SIG has specific people called out as leaders, hosts regular meetings, and
    many of them maintain online notes and even recordings of their online meetings.
    These SIGs all loosely coordinate to advance Kubernetes, and are in turn coordinated
    by a Kubernetes steering committee and a number of community managers.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: SIG的完整列表可在线获取，并在[https://github.com/kubernetes/community/blob/master/sig-list.md](https://github.com/kubernetes/community/blob/master/sig-list.md)上进行维护。每个SIG都有特定的人被指定为领导者，定期举行会议，其中许多人维护在线笔记，甚至记录他们的在线会议。这些SIG都松散协调以推进Kubernetes，并由Kubernetes指导委员会和许多社区经理进行协调。
- en: There are also less formal working groups that pop up to focus on specific or
    short-lived interests that don't have any specific leadership or attendance. All
    together, the SIGs and working groups can create a tremendous amount of information
    and depth that is available to look through, and a very open community of people
    to interact with regarding the project.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些不太正式的工作小组，专注于特定或短暂的兴趣，没有特定的领导或出席。所有这些SIG和工作小组一起，可以创造大量的信息和深度，可供查阅，并且有一个非常开放的社区，可以与项目相关的人进行互动。
- en: The community also manages a calendar of SIG meetings and events, available
    at [https://kubernetes.io/community/](https://kubernetes.io/community/), and publishes
    regularly on the Kubernetes blog at [http://blog.kubernetes.io](http://blog.kubernetes.io).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 社区还管理着SIG会议和活动的日历，可在[https://kubernetes.io/community/](https://kubernetes.io/community/)上获取，并定期在Kubernetes博客上发布文章，网址为[http://blog.kubernetes.io](http://blog.kubernetes.io)。
- en: Slack
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Slack
- en: A common and interactive means of Kubernetes contributors working together is
    by using online chat channels at Slack. Kubernetes hosts a large number of interactive
    channels dedicated to SIGs, working groups, and projects within Kubernetes. Anyone
    may join, and you can sign up for access at [http://slack.k8s.io](http://slack.k8s.io).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes贡献者之间常见的互动方式是使用Slack的在线聊天频道。Kubernetes拥有大量专门用于SIGs、工作组和项目的互动频道。任何人都可以加入，您可以在[http://slack.k8s.io](http://slack.k8s.io)注册以获取访问权限。
- en: If you are new to Slack or Kubernetes, then the channels `#kubernetes-users`
    and `#kubernetes-novices` may be of particular interest. The overall community
    team also hosts what they call office hours, which is a live stream hosted on
    YouTube, as well as the Slack channel, `#office-hours`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是Slack或Kubernetes的新手，那么`#kubernetes-users`和`#kubernetes-novices`频道可能会特别感兴趣。整个社区团队还举办他们所谓的办公时间，这是在YouTube上直播的直播，以及Slack频道`#office-hours`。
- en: YouTube
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: YouTube
- en: 'If you prefer video streams, the Kubernetes community offers a YouTube channel,
    available at [https://www.youtube.com/c/KubernetesCommunity/](https://www.youtube.com/c/KubernetesCommunity/).
    These include recorded videos from community meetings, as well as sessions from
    regular Kubernetes conferences. A large number of SIGs also record their regular
    meetings and post those on YouTube, although they are not consistently coordinated
    through this channel. If you want to find related content, it is best to track
    that down through each individual SIG, although you may be able to find what you''re
    looking for under the channel''s playlists at [https://www.youtube.com/channel/UCZ2bu0qutTOM0tHYa_jkIwg/playlists](https://www.youtube.com/channel/UCZ2bu0qutTOM0tHYa_jkIwg/playlists):'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢视频流，Kubernetes社区提供了一个YouTube频道，网址为[https://www.youtube.com/c/KubernetesCommunity/](https://www.youtube.com/c/KubernetesCommunity/)。这些视频包括社区会议的录像，以及定期Kubernetes会议的会议内容。许多SIGs也记录他们的定期会议并在YouTube上发布，尽管它们并不是通过这个频道进行一致协调的。如果您想找到相关内容，最好通过每个单独的SIG来追踪，尽管您可能能够在该频道的播放列表下找到您想要的内容，网址为[https://www.youtube.com/channel/UCZ2bu0qutTOM0tHYa_jkIwg/playlists](https://www.youtube.com/channel/UCZ2bu0qutTOM0tHYa_jkIwg/playlists)：
- en: '![](assets/88ebb60c-5275-4271-8e04-4ada80699991.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/88ebb60c-5275-4271-8e04-4ada80699991.png)'
- en: Stack Overflow
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stack Overflow
- en: Members of the Kubernetes community also watch and offer answers to questions
    on Stack Overflow. The office hours mentioned earlier encourage folks to post
    their questions on Stack Overflow and bring those to the office hours for interactive
    help. You can find Kubernetes-related questions at [https://stackoverflow.com/questions/tagged/kubernetes](https://stackoverflow.com/questions/tagged/kubernetes).
    If you search for Kubernetes-related topics on Google, you may also find the results
    within questions already asked, and answered, on Stack Overflow.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes社区的成员也在Stack Overflow上观看并回答问题。前面提到的办公时间鼓励人们在Stack Overflow上发布问题，并在办公时间上寻求互动帮助。您可以在[https://stackoverflow.com/questions/tagged/kubernetes](https://stackoverflow.com/questions/tagged/kubernetes)找到与Kubernetes相关的问题。如果您在Google上搜索与Kubernetes相关的主题，您可能也会在Stack
    Overflow上找到已经提出和回答的问题的结果。
- en: Mailing lists and forums
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 邮件列表和论坛
- en: 'Kubernetes has a general mailing list/forum, as well as mailing lists for every
    SIG and frequently for each working group as well. The common forums include:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes有一个通用的邮件列表/论坛，以及每个SIG和经常为每个工作组的邮件列表。常见的论坛包括：
- en: '[https://groups.google.com/forum/#!forum/kubernetes-users](https://groups.google.com/forum/#!forum/kubernetes-users)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://groups.google.com/forum/#!forum/kubernetes-users](https://groups.google.com/forum/#!forum/kubernetes-users)'
- en: '[https://groups.google.com/forum/#!forum/kubernetes-dev](https://groups.google.com/forum/#!forum/kubernetes-dev)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://groups.google.com/forum/#!forum/kubernetes-dev](https://groups.google.com/forum/#!forum/kubernetes-dev)'
- en: The list of SIGs at [https://github.com/kubernetes/community/blob/master/sig-list.md](https://github.com/kubernetes/community/blob/master/sig-list.md)
    also includes a reference to the individual mailing lists for each SIG.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/kubernetes/community/blob/master/sig-list.md](https://github.com/kubernetes/community/blob/master/sig-list.md)上的SIG列表还包括了每个SIG的个人邮件列表的参考链接。'
- en: There is no one path for information on Kubernetes, and the community works
    very hard to accommodate multiple ways to get information, ask questions, and
    encourage participation.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Kubernetes的信息并非只有一种途径，社区非常努力地提供多种获取信息、提问和鼓励参与的方式。
- en: Summary
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we touched on some of the problems that you may run into when
    developing and deploying to Kubernetes, and then touched on a number of projects
    that may be of interest to help you or your team speed up their development process
    while also taking advantage of Kubernetes. The final portion of this chapter discussed
    the Kubernetes project itself, how you can interact with it, and where to find
    more information to leverage this amazing set of tools.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涉及了在开发和部署到Kubernetes时可能遇到的一些问题，然后介绍了一些项目，这些项目可能会对帮助您或您的团队加快开发过程并利用Kubernetes提供帮助。本章的最后部分讨论了Kubernetes项目本身，您如何与之交互，以及在哪里找到更多信息来利用这一奇妙的工具集。
