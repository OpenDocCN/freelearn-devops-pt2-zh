- en: Defect Management Phase
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缺陷管理阶段
- en: Software products can only be trusted if they generate satisfactory results
    without any faults. Invalid results can have a negative impact on end users. Faulty
    products can make consumers unhappy and cause frustration. Hence, identifying
    faults or problems in time can aid developers in delivering a good quality product.
    However, we need to understand how to classify defects, along with an effective
    way of reporting them, so as to confirm whether the defect has been resolved.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 只有生成令人满意的结果且没有任何故障的软件产品才能受到信任。无效的结果可能会对最终用户产生负面影响。有缺陷的产品会让消费者感到不满并引起沮丧。因此，及时发现故障或问题可以帮助开发人员交付高质量的产品。然而，我们需要了解如何对缺陷进行分类，以及有效报告缺陷的方法，以确认缺陷是否已解决。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the importance of logging defects
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解记录缺陷的重要性
- en: Creating new defects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新缺陷
- en: Linking existing defects to test cases
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将现有缺陷链接到测试用例
- en: We will also see how Jira helps us in tracking and managing defects effectively.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将看到Jira如何帮助我们有效地跟踪和管理缺陷。
- en: Understanding the importance of logging defects
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解记录缺陷的重要性
- en: Before understanding the importance of defects, let's understand what a defect
    actually means in the software industry. When teams start working on a part or
    component of the project, they start building it with a predefined set of requirements
    or conditions. Similarly, when the test team creates test cases, they base them
    on the same set of requirements for the respective components.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在理解缺陷的重要性之前，让我们先了解一下在软件行业中缺陷实际上意味着什么。当团队开始处理项目的某个部分或组件时，他们会根据预定义的一组要求或条件开始构建它。同样，当测试团队创建测试用例时，他们也是基于相同组件的相同要求。
- en: Now, during the test execution phase, the test team starts validating the actual
    product in the test environment by interacting with the application step by step,
    since the end user will perform the same actions, and compare them with the expected
    results. If the result matches, testers can pass the selected step ...
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在测试执行阶段，测试团队开始逐步与测试环境中的实际产品进行交互验证，因为最终用户将执行相同的操作，并将其与预期结果进行比较。如果结果匹配，测试人员可以通过所选的步骤...
- en: Creating new defects
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新缺陷
- en: Simply speaking, deviations from the anticipated results are regarded as defects.
    There are a few more terms that are used in the industry interchangeably to define
    a problem, such as a failure, bug, or error. However, any form of issue, no matter
    what it's called, must be resolved before launching the product.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，与预期结果的偏差被视为缺陷。在行业中还有一些术语可以互换使用来定义问题，例如故障、错误或错误。然而，无论称呼如何，任何形式的问题在推出产品之前都必须得到解决。
- en: 'Software defects can be the result of the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 软件缺陷可能是以下原因的结果：
- en: A feature is built based on invalid or incomplete requirements
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于无效或不完整的要求构建了一个功能
- en: A feature is stated in the requirements but the required software for it is
    missing
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求文件中规定了一个功能，但缺少了相应的软件
- en: The function used in the code is not returning the expected results, or running
    in an infinite loop, or accepting an invalid number/type of an input parameter
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码中使用的函数未返回预期结果，或者在无限循环中运行，或者接受无效的数字/输入参数类型
- en: Users are not restricted from performing invalid/unauthorized actions
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户未受限制地执行无效/未经授权的操作
- en: Error messages as not shown as expected
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误消息未按预期显示
- en: Stated and unstated requirements are not met
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未满足明示和隐含的要求
- en: Text and images are unreadable
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本和图像无法阅读
- en: Invalid code is merged into the build and is deployed in the test environment
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无效的代码被合并到构建中，并部署到测试环境中
- en: Once there is confirmation that the behavior exhibited by the application does
    not match the stated requirements, which is also confirmed by the development
    team, then the test team can mark it as a defect and log it in the test management
    system. We will look at how we can create and log defects using Jira plugins in
    the following sections.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确认应用程序展示的行为与规定的要求不符，并且开发团队也确认了这一点，测试团队就可以将其标记为缺陷，并在测试管理系统中记录。我们将在接下来的章节中看看如何使用Jira插件创建和记录缺陷。
- en: Now that we know what defects are, let's begin with our defect creation process.
    Test management tools can be used to report newly found defects. It is helpful
    to trace defects and aids the testers in collaborating with the team smoothly.
    Before creating new defects, it is essential to check whether a similar defect
    already exists in the system and what its current status is. Defects can only
    be reported and fixed successfully if they are reproducible; hence, it is necessary
    to reproduce it a few times before logging it in the system.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了什么是缺陷，让我们开始缺陷创建过程。测试管理工具可用于报告新发现的缺陷。跟踪缺陷并帮助测试人员与团队顺利合作是有帮助的。在创建新缺陷之前，有必要检查系统中是否已存在类似的缺陷以及其当前状态。只有在可重现的情况下才能成功报告和修复缺陷；因此，在将其记录在系统中之前，有必要多次重现它。
- en: 'It is recommended that the following checklist be observed before logging any
    defects. Though this is a common checklist, more steps can be added as per your
    requirements:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在记录任何缺陷之前遵守以下检查表。虽然这是一个常见的检查表，但可以根据您的要求添加更多步骤：
- en: An application's behavior specified in the requirements document is different
    from the results achieved
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求文件中指定的应用程序行为与实际结果不同
- en: Verify that testing is being performed in the correct environment with the expected
    configuration
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证测试是否在正确的环境中进行，并且具有预期的配置
- en: Check that the application's build version is correct and that it has been configured
    as per testing requirements
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查应用程序的构建版本是否正确，并且已根据测试要求配置
- en: Check that all the required services of the application are up and running
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查应用程序的所有必需服务是否正常运行
- en: Check that the application is compatible with the specified operating system,
    browser, or third-party application
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查应用程序是否与指定的操作系统、浏览器或第三方应用程序兼容
- en: Check that the test is being performed from the specified state of an application
    with valid test data
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查测试是否是从具有有效测试数据的应用程序的指定状态执行的
- en: Check that the user role has all the necessary permissions to perform the actions
    as mentioned in the test case
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查用户角色是否具有执行测试用例中提到的所有必要权限
- en: Check that there is connectivity between the application, server, and databases
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查应用程序、服务器和数据库之间是否存在连接
- en: Adding more details to the defect helps developers identify an initial location
    in the specific part of the code to start debugging while performing root cause
    analysis, instead of checking the entire product or module. Let's see what details
    should be added while logging the defects.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在缺陷中添加更多细节有助于开发人员在执行根本原因分析时，识别特定代码部分的初始位置以开始调试，而不是检查整个产品或模块。让我们看看在记录缺陷时应添加哪些细节。
- en: For more information about defect management, please check the article on defect
    management that is available at [https://www.red-gate.com/simple-talk/dotnet/software-delivery/a-primer-on-defect-managment/](https://www.red-gate.com/simple-talk/dotnet/software-delivery/a-primer-on-defect-managment/).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有关缺陷管理的更多信息，请查看位于[https://www.red-gate.com/simple-talk/dotnet/software-delivery/a-primer-on-defect-managment/](https://www.red-gate.com/simple-talk/dotnet/software-delivery/a-primer-on-defect-managment/)的缺陷管理文章。
- en: How to create defects using Jira plugins
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用Jira插件创建缺陷
- en: 'Generally, test management tools provide a template with some of the default
    fields to log the defects. However, we can always be more descriptive, for example,
    by specifying the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，测试管理工具提供一个模板，其中包含一些默认字段来记录缺陷。但是，我们总是可以更详细，例如通过指定以下内容：
- en: A unique identifier to identify the defect
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于识别缺陷的唯一标识符
- en: A summary of the defect
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺陷的摘要
- en: Actions to be performed to reproduce the defect
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重现缺陷所需执行的操作
- en: Variations between the actual and expected results
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实际结果与预期结果之间的差异
- en: The test environment used to perform the test
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于执行测试的测试环境
- en: Preconditions, such as the state of the application under test
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预置条件，例如被测试应用程序的状态
- en: The version of the application under test with the configuration details
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被测试应用程序的版本及其配置详细信息
- en: The build version of the code deployed in the test environment
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署在测试环境中的代码构建版本
- en: The test data used to perform the test
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于执行测试的测试数据
- en: The defect creation date
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺陷创建日期
- en: The current status of the defect
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺陷的当前状态
- en: The name ...
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称...
- en: Designing and managing defect workflows in Jira
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Jira中设计和管理缺陷工作流程
- en: 'Defect workflow can be customized to have its own set of statuses that a defect
    issue type can undergo. Organizations can have their own set of workflows. Let''s
    look at some of the recommended statuses that a defect should go through. This
    is also referred to as a defect life cycle:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 缺陷工作流程可以定制为具有其自己的一组缺陷问题类型可以经历的状态。组织可以拥有自己的工作流程。让我们看看缺陷应该经历的一些推荐状态。这也被称为缺陷生命周期：
- en: 'DRAFT: A defect can be set on DRAFT when the tester still needs to provide
    more details in relation to it'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**草稿**：当测试人员仍需要提供与之相关的更多细节时，可以将缺陷设置为草稿'
- en: '**NEW/OPEN**: This status can be set for the defect when all the details are
    added and it is ready to be assigned to a developer'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新/打开**：当所有细节都已添加并且准备分配给开发人员时，可以为缺陷设置此状态'
- en: '**ASSIGNED**: Once the project team identifies a developer who will be working
    on the logged defect, the status of the defect can be set to ASSIGNED and should
    be assigned to the developer in question'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已分配**：一旦项目团队确定了将处理记录的缺陷的开发人员，缺陷的状态可以设置为**已分配**，并应分配给相关的开发人员'
- en: '**IN PROGRESS**: Once a defect gets assigned, the developer can change the
    status of the defect to IN PROGRESS to indicate that the developer is working
    to fix the issue'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进行中**：一旦缺陷被分配，开发人员可以将缺陷状态更改为**进行中**，以指示开发人员正在努力解决问题'
- en: '**FIXED**: The developer can change the defect status to FIXED once the required
    code changes are implemented and it is made available for the testers to verify
    the changes'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已修复**：一旦实施了所需的代码更改并且已供测试人员验证更改，开发人员可以将缺陷状态更改为**已修复**'
- en: '**NOT FIXED**: The tester sets the defect status as NOT FIXED if the defect
    is still reproducible and the fix is not satisfactory as per the requirements'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未修复**：如果缺陷仍然可以重现，并且修复不符合要求，则测试人员将缺陷状态设置为**未修复**'
- en: '**CLOSED**: If the fixed defect is working as expected and it matches the stated
    requirements, then the tester closes the defect and sets its status as CLOSED'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关闭**：如果已修复的缺陷按预期工作并且符合规定的要求，则测试人员关闭缺陷并将其状态设置为**关闭**'
- en: 'REOPEN: If a previously resolved defect is now reoccurring, then the tester
    can change the status of the defect to REOPEN'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新打开**：如果先前已解决的缺陷现在再次出现，则测试人员可以将缺陷状态更改为**重新打开**'
- en: '**NOT APPLICABLE**: If the newly created defect is not related to the verified
    changes, then the developer can change the status of the defect to NOT APPLICABLE'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不适用**：如果新创建的缺陷与已验证的更改无关，则开发人员可以将缺陷状态更改为**不适用**'
- en: '**NOT A DEFECT**: If the application or feature is behaving as expected, then
    the developer can change the status of the defect to NOT A DEFECT'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非缺陷**：如果应用程序或功能的行为符合预期，则开发人员可以将缺陷状态更改为**非缺陷**'
- en: '**NOT REPRODUCIBLE**: If the developer is unable to recreate the defect in
    the same environment and build version, then its status can be updated to NOT
    REPRODUCIBLE'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无法重现**：如果开发人员无法在相同的环境和构建版本中重新创建缺陷，则其状态可以更新为**无法重现**'
- en: '**DUPLICATE**: If a similar defect already exists in the system, then the development team
    can update the defect status to DUPLICATE'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重复**：如果系统中已经存在类似的缺陷，则开发团队可以将缺陷状态更新为**重复**'
- en: '**VERIFIED**: If the code changes for the defect have been verified by the
    tester, then its status can be marked as VERIFIED'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已验证**：如果测试人员已验证了缺陷的代码更改，那么其状态可以标记为“已验证”。'
- en: '**PENDING**: If the defect verification is on hold due to the unavailability
    of the environment, test data, or resources, then its status can be updated to *PENDING*'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**待定**：如果由于环境、测试数据或资源不可用而导致缺陷验证暂停，那么其状态可以更新为“待定”。'
- en: '**DEFERRED**: The defect status can be marked as DEFERRED if the team decides
    to work on the fix in the upcoming sprints or release'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已延迟**：如果团队决定在即将到来的迭代或发布中修复缺陷，则可以将缺陷状态标记为“已延迟”。'
- en: 'Since we are familiar with the defect workflow now, let''s create one using
    Jira:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们现在熟悉了缺陷工作流程，让我们使用Jira创建一个：
- en: 'In order to create a customized workflow in Jira, we need to add a workflow
    scheme and add a customized workflow to this scheme. The option to add a workflow
    scheme is available under Admin | Issues | Workflows | Workflow Scheme. Assign
    a name to this defect workflow scheme, such as `DefectWorkflowScheme-1`, add a
    Description, and then click on the Add button to create a scheme:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在Jira中创建自定义工作流，我们需要添加工作流方案并将自定义工作流添加到此方案中。添加工作流方案的选项可在“管理” | “问题” | “工作流”
    | “工作流方案”下找到。为此缺陷工作流方案指定一个名称，例如“DefectWorkflowScheme-1”，添加描述，然后点击“添加”按钮创建方案：
- en: '![](Images/dd6b41c3-237a-45be-81ff-d0751c38c4b6.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/dd6b41c3-237a-45be-81ff-d0751c38c4b6.png)'
- en: 'As shown in the following screenshot, the customized defect workflow has various
    statuses similar to the ones we discussed earlier. This workflow has been categorized
    as defect workflow, which will be added to a workflow scheme:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下截图所示，定制的缺陷工作流具有与我们之前讨论过的类似的各种状态。此工作流已分类为缺陷工作流，将添加到工作流方案中：
- en: '![](Images/78ff76ac-ac90-4a7a-97bb-32c3c595d424.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/78ff76ac-ac90-4a7a-97bb-32c3c595d424.png)'
- en: 'After selecting the existing workflow, click on the Next button. The following
    screenshot shows issue types that you want to apply to this workflow. Select the Defect issue
    type and click on the Finish button, as shown:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择现有工作流后，点击“下一步”按钮。下图显示了要应用于此工作流的问题类型。选择“缺陷”问题类型，然后点击“完成”按钮，如图所示：
- en: '![](Images/a4db6803-fd44-46a4-b6c2-f4b66cc52598.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/a4db6803-fd44-46a4-b6c2-f4b66cc52598.png)'
- en: 'Once you add a defect workflow, it can be viewed from the Project settings
    | Issues | Workflows section. As shown in the following screenshot, the current
    project has two types of workflow, namely the Jira Workflow and the defect workflow.
    The defect workflow field has an associated issue type as a defect. Here, it will
    prompt you to publish the changes and as soon as you publish, the newly added
    workflow will be added to the defect issue type:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加缺陷工作流后，可以从项目设置 | 问题 | 工作流部分查看。如下截图所示，当前项目有两种工作流，即Jira工作流和缺陷工作流。缺陷工作流字段有一个关联的问题类型为缺陷。在这里，它会提示您发布更改，一旦发布，新添加的工作流将添加到缺陷问题类型中：
- en: '![](Images/698b515d-3842-47a0-a080-e7c4c257e877.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/698b515d-3842-47a0-a080-e7c4c257e877.png)'
- en: 'Now, navigate to the Project | Project Settings | Issues sections. Here, you
    need to customize your project to have a Defect issue type. As shown in the following
    screenshot, we have added a Defect issue type to the Issue Types for Current Scheme section
    so that it will be added to your current project scheme:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到项目 | 项目设置 | 问题部分。在这里，您需要自定义项目以具有缺陷问题类型。如下截图所示，我们已将缺陷问题类型添加到当前方案的问题类型部分，以便将其添加到当前项目方案中：
- en: '![](Images/9e1db2e1-274a-416e-8b59-e2ad70616bb2.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9e1db2e1-274a-416e-8b59-e2ad70616bb2.png)'
- en: Click Save and our defect workflow is created.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存，我们的缺陷工作流已创建。
- en: synapseRT
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: synapseRT
- en: 'synapseRT has additional issue types, including requirement, test case, and
    test plan, but it has a missing defect issue type. From the previous section,
    we now know how to add defect issue types with the customized workflows to our
    project. After adding the issue type, follow these steps to log a defect:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: synapseRT还有其他问题类型，包括需求、测试用例和测试计划，但缺少缺陷问题类型。从前面的部分，我们现在知道如何将带有自定义工作流的缺陷问题类型添加到我们的项目中。添加问题类型后，请按照以下步骤记录缺陷：
- en: 'Since a defect is another issue type, click on the Create button to create
    a defect, select the project in question, and then select the issue type as Defect,
    as shown in the following screenshot. Then, click on the Next button:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于缺陷是另一种问题类型，点击“创建”按钮创建一个缺陷，选择相关项目，然后选择问题类型为缺陷，如下截图所示。然后，点击“下一步”按钮：
- en: '![](Images/56c6a4f0-99d6-4f6d-8840-261ee0aafd95.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/56c6a4f0-99d6-4f6d-8840-261ee0aafd95.png)'
- en: This will load the issue description page with the header Create Issue, as shown
    in the following ...
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将加载带有标题“创建问题”的问题描述页面，如下所示...
- en: Linking existing defects to test cases
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将现有缺陷链接到测试用例
- en: Establishing a relationship between defects and test cases helps to identify
    the impact of a defect on the current execution of test cases. If a single defect
    impacts more than one test case, then the testers can link the same defect to
    all the impacted test cases and update the test case status as Blocked.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 建立缺陷与测试用例之间的关系有助于确定缺陷对当前测试用例执行的影响。如果单个缺陷影响多个测试用例，那么测试人员可以将相同的缺陷链接到所有受影响的测试用例，并将测试用例状态更新为“已阻塞”。
- en: However, apart from the impact analysis, it also helps in generating the traceability
    matrix where the requirements are linked to the test cases and test cases are
    linked to the defect. Defects can be linked to the test case at the test case
    level or test step level. If a test case has a greater number of test steps, and
    there are multiple defects observed for the same test cases, then in such cases,
    it makes more sense to link these defects at the test step level to identify at
    which step specifically the error has occurred.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 除了影响分析之外，它还有助于生成可追溯性矩阵，其中需求与测试用例相关联，测试用例与缺陷相关联。缺陷可以在测试用例级别或测试步骤级别与测试用例相关联。如果一个测试用例有更多的测试步骤，并且对同一个测试用例观察到多个缺陷，那么在这种情况下，将这些缺陷在测试步骤级别相关联更有意义，以确定错误具体发生在哪个步骤。
- en: Changing a test case status with regard to defects
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据缺陷更改测试用例状态
- en: Whenever the test team logs a defect and links it to the relevant test case,
    the status of the test case is updated as Failed. Now, the test case status remains as
    failed, unless and until the related defect is either closed or deferred. Once
    the defect is closed, the relevant test case status is updated to Passed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 每当测试团队记录一个缺陷并将其链接到相关的测试用例时，测试用例的状态将更新为失败。现在，测试用例状态将保持为失败，直到相关的缺陷被关闭或推迟。一旦缺陷关闭，相关的测试用例状态将更新为通过。
- en: However, if the defect is linked at the test step level, the steps that worked
    as expected are updated as Passed. The step where a defect has been observed is
    updated as Failed and the remaining steps that the tester is not able to execute
    remain in the default Not executed or Not run status.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果在测试步骤级别链接了缺陷，那么正常工作的步骤将被更新为通过。观察到缺陷的步骤将被更新为失败，而测试人员无法执行的剩余步骤将保持默认的未执行或未运行状态。
- en: Let's link the defect to the test cases using the Jira plugins.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Jira插件将缺陷链接到测试用例。
- en: synapseRT
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: synapseRT
- en: synapseRT gives an option to link a defect either at the test case level or
    test step level. Select any test case in synapseRT and create an ad hoc run. During
    the execution, it creates a new test run and shows the options to either link
    the existing defect or create new ones under the Run Attributes section. We also
    have an option to update the test status at the test step level.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: synapseRT提供了在测试用例级别或测试步骤级别链接缺陷的选项。在synapseRT中选择任何测试用例并创建一个临时运行。在执行过程中，它会创建一个新的测试运行，并显示在运行属性部分下链接现有缺陷或创建新缺陷的选项。我们还可以选择在测试步骤级别更新测试状态。
- en: 'In the following screenshot, step one has been marked as failed and it has
    an associated SCRUM-7 defect at the test step level. However, there are two defects,
    SCRUM-7 and `SCRUM-5`, linked to the test case level. Since one test step has
    failed here, the status of the entire test case gets updated as FAILED:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，步骤一已标记为失败，并且在测试步骤级别有一个关联的SCRUM-7缺陷。然而，在测试用例级别有两个缺陷，SCRUM-7和`SCRUM-5`。由于这里有一个测试步骤失败，整个测试用例的状态被更新为失败：
- en: '![](Images/e2448179-73f8-443c-8519-42c40871a20d.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/e2448179-73f8-443c-8519-42c40871a20d.png)'
- en: 'If multiple test cases are blocked due to a single defect during the test cycle,
    then the same defect can be linked to the test cases and their status can be updated
    as BLOCKED. The following screenshot depicts this behavior:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在测试周期中由于单个缺陷而阻塞了多个测试用例，那么可以将相同的缺陷链接到测试用例，并将它们的状态更新为阻塞。以下截图展示了这种行为：
- en: '![](Images/edb11728-25c9-4ff3-bdae-ec949f06e1a0.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/edb11728-25c9-4ff3-bdae-ec949f06e1a0.png)'
- en: There are three test cases in total. One has failed because of the defect, and
    the same defect is blocking the remaining two test cases in the current test cycle.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 总共有三个测试用例。其中一个由于缺陷而失败，而相同的缺陷正在阻止当前测试周期中剩余的两个测试用例。
- en: Zephyr
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zephyr
- en: In the case of Zephyr, once we start executing the test case from the selected
    test cycle, we can update the test status at the test case level or test step
    level.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在Zephyr的情况下，一旦我们开始执行所选测试周期中的测试用例，我们可以在测试用例级别或测试步骤级别更新测试状态。
- en: 'While executing the test, we also have an option to link a defect at the test
    step level or at the test case level. As shown in the following screenshot, since
    one step has been marked as FAIL, the status of the entire test case has changed
    to FAIL. The following steps are marked as BLOCKED. In the Defect section, it
    has a defect linked to it as `SCRUMZ-3`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行测试时，我们还可以选择在测试步骤级别或测试用例级别链接缺陷。如下截图所示，由于有一个步骤标记为失败，整个测试用例的状态已更改为失败。以下步骤标记为阻塞。在缺陷部分，它有一个与之链接的缺陷`SCRUMZ-3`：
- en: '![](Images/9aee0e44-8bb6-4c93-9d37-69dffc0dff86.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/9aee0e44-8bb6-4c93-9d37-69dffc0dff86.png)'
- en: After completing this run, the status of the test execution and its linked defects
    can be viewed at the test cycle level. ...
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此运行后，可以在测试周期级别查看测试执行的状态及其链接的缺陷。...
- en: Test Management
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试管理
- en: The Test Management tool also has an option to link a defect and update the
    status of the test step at the test step and test case levels.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 测试管理工具还提供了在测试步骤和测试用例级别链接缺陷并更新测试步骤状态的选项。
- en: 'As shown in the following screenshot, the test case `TESTP-T2` is marked as
    having failed at step 1 and its ISSUES section indicates the linked defects. In
    our case, this is `TESTP-1`. The remaining steps are marked as BLOCKED:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，测试用例`TESTP-T2`在步骤1处标记为失败，并且其ISSUES部分指示了链接的缺陷。在我们的情况下，这是`TESTP-1`。剩下的步骤被标记为阻塞：
- en: '![](Images/b32746a9-8096-4776-b776-dbd0ce38cba3.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b32746a9-8096-4776-b776-dbd0ce38cba3.png)'
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the defect creation and management process. We
    learned to identify defects and understand their possible root causes. We also
    looked at the preliminary checks that should be performed before reporting defects,
    as well as the details that should be provided while logging the defects in the
    system.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了缺陷创建和管理过程。我们学会了识别缺陷并了解它们可能的根本原因。我们还看了在报告缺陷之前应执行的初步检查，以及在系统中记录缺陷时应提供的详细信息。
- en: We then learned to create defects in Jira by having a customized issue type,
    such as **defect**, and a customized workflow. In order to create traceability,
    we learned how to link defects to the relevant test cases with the help of Jira
    plugins, either at the test step or the test case level during the test execution
    phase.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们学会了通过具有自定义问题类型（如**缺陷**）和自定义工作流的Jira来创建缺陷。为了创建可追溯性，我们学会了如何在测试执行阶段通过Jira插件将缺陷链接到相关的测试用例，无论是在测试步骤还是测试用例级别。
- en: In the next chapter, we will discuss how Jira issues can be used to track project
    requirements. ...
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何使用Jira问题来跟踪项目需求。...
