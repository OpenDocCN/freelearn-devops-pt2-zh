- en: Chapter 5. An In-Depth Look at Ansible Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。深入了解Ansible插件
- en: The previous chapter introduced you to the Python API and various extension
    points provided by Ansible. By the time you reach this chapter, you should already
    know how a plugin is loaded by Ansible. The previous chapter listed the different
    types of Ansible plugins.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 前一章向您介绍了Python API以及Ansible提供的各种扩展点。当您到达本章时，您应该已经知道Ansible如何加载插件。前一章列出了不同类型的Ansible插件。
- en: This chapter is a deep dive into what Ansible plugins are and how you can write
    your own custom Ansible plugin. In this chapter, we will discuss the different
    types of Ansible plugins in detail and explore them on a code level. Together,
    we will walk through the Ansible Python API, and you will use the extension points
    to write your own Ansible plugins.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了Ansible插件是什么，以及如何编写自定义的Ansible插件。在本章中，我们将详细讨论不同类型的Ansible插件，并在代码级别上进行探索。一起，我们将通过Ansible
    Python API，使用扩展点来编写自己的Ansible插件。
- en: 'As discussed in the previous chapter, the plugins are categorized as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，插件按以下方式分类：
- en: Lookup plugins
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找插件
- en: Action plugins
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动作插件
- en: Cache plugins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存插件
- en: Callback plugins
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回调插件
- en: Connection plugins
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接插件
- en: Var plugins
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量插件
- en: Filter plugins
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤器插件
- en: Out of these plugins, the most commonly used are lookup plugins, callback plugins,
    var plugins, filter plugins, and connection plugins. Let's explore the plugins
    one by one.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些插件中，最常用的是查找插件、回调插件、变量插件、过滤器插件和连接插件。让我们逐个探索这些插件。
- en: Lookup plugins
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找插件
- en: Lookup plugins are designed to read data from different sources and feed them
    to Ansible. The data source can be either the local file system on the controller
    node or from an external data source. These may also be for file formats that
    are not natively supported by Ansible.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 查找插件旨在从不同来源读取数据并将其提供给Ansible。数据源可以是控制节点上的本地文件系统，也可以是外部数据源。这些数据源也可以是Ansible本身不原生支持的文件格式。
- en: If you decide to write your own lookup plugin, you need to drop it in one of
    the following directories for Ansible to pick it up during the execution of an
    Ansible playbook.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定编写自己的查找插件，您需要将其放入以下一个目录中，以便Ansible在执行Ansible playbook时捡起它。
- en: The directory named `lookup_plugins` in the project `Root`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目`Root`中名为`lookup_plugins`的目录
- en: In `~/.ansible/plugins/lookup_plugins/` or
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`~/.ansible/plugins/lookup_plugins/`或
- en: '`/usr/share/ansible_plugins/lookup_plugins/`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: /usr/share/ansible_plugins/lookup_plugins/
- en: By default, a number of lookup plugins are already available in Ansible. Let's
    discuss some of the most commonly used lookup plugins.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Ansible中已经有许多查找插件可用。让我们讨论一些最常用的查找插件。
- en: Lookup pluginfile
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找插件文件
- en: 'This is the most basic type of lookup plugin available in Ansible. It reads
    through a file''s content on the controller node. The data read from the file
    can then be fed to the Ansible playbook as a variable. In its most basic form,
    usage of a file lookup is demonstrated in the following Ansible playbook:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Ansible中最基本的查找插件类型。它通过控制节点上的文件内容进行读取。然后可以将从文件中读取的数据传递给Ansible playbook作为变量。在其最基本形式中，文件查找的使用方法在以下Ansible
    playbook中进行了演示：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding playbook will read data off a local file, `test-file.txt`, from
    the playbook root directory into the variable `data`. This variable is then fed
    to the `task: debug` module and uses the data variable to print it on screen.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '上述playbook将从playbook根目录中的本地文件`test-file.txt`中读取数据到变量`data`中。然后，这个变量被传递给`task:
    debug`模块，并使用数据变量将其打印在屏幕上。'
- en: Lookup plugin – csvfile
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找插件 - csvfile
- en: 'The `csvfile` lookup plugin was designed to read data from a CSV file on the
    controller node. This lookup module is designed to take in several parameters,
    which are discussed as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`csvfile`查找插件设计用来从控制节点上的CSV文件中读取数据。这个查找模块设计为接受几个参数，如下所述：'
- en: '| Parameter | Default value | Description |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 默认值 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `file` | `ansible.csv` | File to read data from. |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `file` | `ansible.csv` | 要从中读取数据的文件。 |'
- en: '| `delimiter` | TAB | Delimiter used in CSV file. Usually ''`,`''. |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `delimiter` | TAB | CSV文件中使用的分隔符。通常是''`,`''。 |'
- en: '| `col` | `1` | Column number (index). |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `col` | `1` | 列号（索引）。'
- en: '| `default` | Empty string | Returns this value if the requested key is not
    found in the CSV file |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `default` | 空字符串 | 如果在CSV文件中找不到请求的键，则返回此值 |'
- en: 'Let''s take an example of reading data from the following CSV file. The CSV
    file contains population and area details of different cities:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以读取以下CSV文件中的数据为例。CSV文件包含不同城市的人口和面积详情：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This file lies in the controller node at the root of the Ansible play. To read
    off data from this file, the `csvfile` lookup plugin is used. The following Ansible
    play tries to read the population of Mumbai from the preceding CSV file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件位于Ansible play的控制节点的根目录下。要从这个文件中读取数据，使用了`csvfile`查找插件。以下的Ansible play尝试从之前的CSV文件中读取孟买的人口。
- en: '**Ansible Play** : `test-csv.yaml`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ansible Play**：`test-csv.yaml`'
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Lookup plugin – dig
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找插件 - dig
- en: The `dig` lookup plugin can be used to run DNS queries against a **FQDN** (**Fully
    Qualified Domain Name**). You can customize the lookup plugin's output by using
    the different flags that are supported by the plugin. In its most basic form,
    it returns the IP of the given FQDN.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`dig`查找插件可以用来对**FQDN**（**完全合格域名**）运行DNS查询。您可以通过使用插件支持的不同标志来自定义查找插件的输出。在其最基本的形式中，它返回给定FQDN的IP。'
- en: This plugin has a dependency on the `python-dns` package. This should be installed
    on the controller node.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件依赖于`python-dns`包。这应该安装在控制节点上。
- en: 'The following Ansible play explains how to fetch the TXT records for any FQDN:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的Ansible play解释了如何获取任何FQDN的TXT记录：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding Ansible play will fetch the TXT records in step one and any IPs
    associated with the FQDN `yahoo.com` in step two.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的Ansible play将在第一步获取TXT记录，并在第二步获取与FQDN `yahoo.com`相关联的任何IP。
- en: 'It is also possible to perform reverse DNS lookups with the dig plugin by using
    the following syntax:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以使用dig插件执行反向DNS查找，方法是使用以下语法：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Lookup plugin – ini
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找插件 - ini
- en: 'The `ini` lookup plugin is designed to read data off a `.ini` file. The `ini`
    file in general is a collection of key-value pairs under defined sections. The
    `ini` lookup plugin supports the following parameters:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`ini`查找插件设计用来读取`.ini`文件中的数据。一般来说，`ini`文件是在定义的部分下的键-值对的集合。`ini`查找插件支持以下参数：'
- en: '| Parameter | Default value | Description |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 默认值 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `type` | `ini` | Type of file. Currently supports two formats–ini and property.
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `type` | `ini` | 文件类型。目前支持两种格式 - ini和property。'
- en: '| `file` | `ansible.ini` | Name of file to read data from. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `file` | `ansible.ini` | 要读取数据的文件名。 |'
- en: '| `section` | `global` | Section of the `ini` file from which the specified
    key needs to be read from. |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `section` | `global` | 需要从`ini`文件中读取指定键的部分。 |'
- en: '| `re` | `False` | If the key is a regular expression, set this to `true`.
    |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `re` | `False` | 如果键是正则表达式，将其设置为`true`。 |'
- en: '| `default` | Empty string | If the requested key is not found in the `ini`
    file, return this. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `default` | 空字符串 | 如果在`ini`文件中找不到请求的键，则返回此值。'
- en: 'Taking an example of the following `ini` file, let''s try to read some keys
    using the `ini` lookup plugin. The file is named `network.ini`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以以下`ini`文件为例，让我们尝试使用`ini`查找插件读取一些键。文件名为`network.ini`：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following Ansible play will read off the keys from the `ini` file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下Ansible play将从`ini`文件中读取键：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `ini` lookup plugin can also be used to read off values through a file that
    does not contain sections, for instance, a Java property file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`ini`查找插件也可以用于通过不包含部分的文件读取值，例如Java属性文件。'
- en: Loops – lookup plugins for iteration
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 循环-迭代的查找插件
- en: There are times when you may need to perform the same task over and over again.
    It might be the case of installing various dependencies for a package or multiple
    inputs that go through the same operation, for instance, checking and starting
    various services. Just like any other programming language provides a way to iterate
    over data to perform repetitive tasks, Ansible also provides a clean way to carry
    out the same operation. The concept is called looping and is provided by Ansible
    lookup plugins.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您可能需要一遍又一遍地执行相同的任务。这可能是安装软件包的各种依赖项的情况，或者多个输入经过相同的操作，例如检查和启动各种服务。就像任何其他编程语言提供了迭代数据以执行重复任务的方法一样，Ansible也提供了一种清晰的方法来执行相同的操作。这个概念被称为循环，并由Ansible查找插件提供。
- en: Loops in Ansible are generally identified as those starting with `with_`. Ansible
    supports a number of looping options. Few of the most commonly used are discussed
    in the following sections.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible中的循环通常被标识为以`with_`开头的循环。Ansible支持许多循环选项。以下部分讨论了一些最常用的循环选项。
- en: Standard loop – with_items
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准循环-with_items
- en: 'This is the simplest and most commonly used loop in Ansible. It is used to
    iterate over an item list and perform some operation on it. The following Ansible
    play demonstrates the use of the `with_items` lookup loop:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Ansible中最简单和最常用的循环。它用于对项目列表进行迭代并对其执行某些操作。以下Ansible play演示了使用`with_items`查找循环的用法：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `with_items` loop supports the use of hashes where you can access the variables
    by using the item `<keyname>` in the Ansible playbook. The following playbook
    demonstrates the use of `with_items` to iterate over a given hash:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`with_items`循环支持使用哈希，您可以在Ansible playbook中使用项目`<keyname>`来访问变量。以下playbook演示了使用`with_items`来迭代给定哈希：'
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding playbook will create two directories with the specified permission
    sets. If you look closely while accessing the `mode` key from `item`, there exists
    a block of code named | `int`. This is a `jinja2` filter, which is used to convert
    a string to an integer.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的playbook将创建两个具有指定权限集的目录。如果您仔细查看从`item`中访问`mode`键时，存在一个名为`int`的代码块。这是一个`jinja2`过滤器，用于将字符串转换为整数。
- en: Do until loop–until
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直到循环-until
- en: This loop has the same implementation as that of any other programming language.
    It executes at least once and keeps executing unless a specific condition is reached.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个循环与任何其他编程语言的实现相同。它至少执行一次，并且除非达到特定条件，否则会继续执行。
- en: 'Lets take a look at the following code to understand the `do-until` loop:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下代码，以了解`do-until`循环：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `clean-files.sh` script performs a cleanup operation on the specified directory
    and keeps only the latest five files. On every execution, it removes the oldest
    file and returns the number of files remaining in the directory being cleaned
    up as output on `stdout`. The script looks something like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`clean-files.sh`脚本对指定目录执行清理操作，并仅保留最新的五个文件。在每次执行时，它会删除最旧的文件，并在清理的目录中返回剩余文件的数量作为`stdout`的输出。脚本看起来像这样：'
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This operation will be retried a maximum of six times, with a delay of 10\.
    The loop exists once it finds a 5 in the number register variable.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作将重试最多六次，间隔为10。一旦在数字寄存器变量中找到5，循环就会结束。
- en: If "retries" and "delay" are not specified explicitly, a task in such cases,
    by default, is retried three times with a delay of five.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未明确指定“重试”和“延迟”，在这种情况下，默认情况下任务将重试三次，间隔五次。
- en: Create your own lookup plugin
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自己的查找插件
- en: 'The previous chapter introduced you to the Python API and explained how various
    plugins are loaded by Ansible to be used in the Ansible play. This chapter covers
    some already available Ansible lookup plugins and explains how those can be used.
    This section will try to replicate a functionality of the `dig` lookup to get
    the IP address of a given FQDN. This will be done without using the `dnspython`
    library and will use the basic socket library for Python. The following example
    is only a demonstration of how you can write your own Ansible lookup plugin:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 上一章介绍了Python API，并解释了Ansible如何加载各种插件以用于Ansible play。本章涵盖了一些已经可用的Ansible查找插件，并解释了如何使用这些插件。本节将尝试复制“dig”查找的功能，以获取给定FQDN的IP地址。这将在不使用“dnspython”库的情况下完成，并将使用Python的基本socket库。以下示例仅演示了如何编写自己的Ansible查找插件：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding code is a lookup plugin; let's call it `hostip`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是一个查找插件；让我们称之为`hostip`。
- en: As you can see, there exists a class named `LookupModule`. Ansible identifies
    a Python file or module as a lookup plugin only when there is a class called `LookupModule`.
    The module takes in an argument hostname and checks if there exists an IP corresponding
    to it (that is, if it can be resolved to a valid IP address). If yes, it returns
    the IP address of the requested FQDN. If not, it returns `Invalid Hostname`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，存在一个名为`LookupModule`的类。只有当存在一个名为`LookupModule`的类时，Ansible才将Python文件或模块识别为查找插件。该模块接受一个名为hostname的参数，并检查是否存在与之对应的IP（即，是否可以解析为有效的IP地址）。如果是，则返回请求的FQDN的IP地址。如果不是，则返回“无效的主机名”。
- en: 'To use this module, place it in the `lookup_plugins` directory at the root
    of the Ansible play. The following playbook demonstrates how you can use the newly
    created `hostip` lookup:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此模块，请将其放置在Ansible play根目录下的`lookup_plugins`目录中。以下playbook演示了如何使用新创建的`hostip`查找：
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding play will loop through the list of websites and pass it as an
    argument to the `hostip` lookup plugin. This will in turn return the IP associated
    with the requested domain. You may have noticed that, there is an argument called
    `wantlist=True` that is also passed in while the `hostip` lookup plugin is called.
    This is to handle multiple outputs (that is, if there are multiple values associated
    with the requested domain, the values will be returned as a list). This makes
    it easy to iterate over the output values.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 上述play将循环遍历网站列表，并将其作为参数传递给`hostip`查找插件。这将返回与请求的域关联的IP。您可能已经注意到，还有一个名为`wantlist=True`的参数在调用`hostip`查找插件时也被传递进去。这是为了处理多个输出（即，如果有多个值与请求的域关联，这些值将作为列表返回）。这样可以轻松地对输出值进行迭代。
- en: Callback plugins
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回调插件
- en: Callbacks are one of the most widely used plugins with Ansible. They allow you
    to respond back to the events of an Ansible run during runtime. Callbacks are
    a type of plugin that is customized the most.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 回调是Ansible中最广泛使用的插件之一。它们允许您在运行时对Ansible运行的事件做出响应。回调是一种最常定制的插件类型。
- en: Though there are a few generic callback plugins, you most certainly may end
    up writing one yourself to address your requirements. This is because everyone
    has a different perception of what they want to do with the data. Ansible is not
    just a tool limited to configuration management and orchestration. You can do
    much more, for instance, collect data during the Ansible plays and process them
    later on. Callbacks provide a vast playground with possibilities to explore. It's
    all about what you want to do with the results.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有一些通用的回调插件，但您肯定会自己编写一个来满足您的需求。这是因为每个人对数据想要做什么有不同的看法。Ansible不仅仅是一个限于配置管理和编排的工具。您可以做更多的事情，例如，在Ansible
    play期间收集数据并稍后处理它们。回调提供了一个广阔的可能性探索空间。这一切取决于您对结果的期望。
- en: This section, rather than going through the existing callback modules, will
    focus more on writing one.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分不是通过现有的回调模块，而是更专注于编写一个。
- en: Taking a scenario from previous chapters, you created your own `dmidecode` module,
    which executed on the target machines and returned a JSON of hardware specs. The
    module also supported a flag that allowed you to store this result in a JSON file
    on the target machine itself.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的章节中，以一个场景为例，您创建了自己的`dmidecode`模块，该模块在目标机器上执行并返回硬件规格的JSON。该模块还支持一个标志，允许您将此结果存储在目标机器上的JSON文件中。
- en: 'Looking at the scenario, there are two major concerns:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这种情况，有两个主要问题：
- en: You don't have a log of playbook execution. Everything is on `stdout`.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您没有playbook执行的日志。一切都在`stdout`上。
- en: Even if you set the save flag to true while calling the `dmidecode` module,
    the results are stored on the target machine and not on the controller node. Post
    playbook execution, you'll have to collect these JSON files individually from
    each target host.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使在调用`dmidecode`模块时将保存标志设置为true，结果也会存储在目标机器上，而不是控制节点上。在playbook执行后，您将不得不从每个目标主机单独收集这些JSON文件。
- en: The first point is an issue you never want in your production environment. You
    always want to have logs of the Ansible play. This will allow you to later trace
    back any failures that occurred during the playbook execution. There are a few
    generic callback plugins already available in the Ansible code repository for
    this purpose. The link [https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/callback](https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/callback)
    is where you can find some of the existing callback modules. You may choose one
    of them if they satisfy your needs. This section will not discuss the existing
    callback modules.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 第一点是您在生产环境中绝对不希望出现的问题。您总是希望有Ansible play的日志。这将使您能够在playbook执行期间追溯任何失败。Ansible代码存储库中已经有一些通用的回调插件可供此目的使用。您可以在[https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/callback](https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/callback)找到一些现有的回调模块。如果它们满足您的需求，您可以选择其中之一。本节将不讨论现有的回调模块。
- en: The second point is a major reason why people choose to develop their own callback
    plugins. It addresses the concern of what you actually want to do with the data.
    In this particular case, the module collects system information, which can come
    in handy later for audit purposes. In other cases, you might still want to process
    the collected information and logs of the Ansible play in order to determine cause
    of failure, generate reports, keep a track of production changes, and so on. There
    can be a number of possibilities.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 第二点是人们选择开发自己的回调插件的一个主要原因。它解决了你实际想要对数据做什么的问题。在这种情况下，该模块收集系统信息，以备后续审计之用。在其他情况下，您可能仍希望处理收集到的信息和Ansible
    play的日志，以确定失败的原因，生成报告，跟踪生产变更等。可能有许多可能性。
- en: This section will address the second point by creating a custom callback plugin
    that can help you get back the JSON data from the target machine, which was generated
    by using the `dmidecode` module that you created in [Chapter 3](ch03.html "Chapter 3. Digging
    Deeper into Ansible Modules"), *Digging Deeper into Ansible Modules*.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将通过创建一个自定义回调插件来解决第二点，该插件可以帮助您从目标机器获取JSON数据，该数据是使用您在[第3章](ch03.html "第3章。深入了解Ansible模块")中创建的`dmidecode`模块生成的。*深入了解Ansible模块*。
- en: Before diving into writing a callback module, it's important to know how a callback
    module works.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入编写回调模块之前，了解回调模块的工作原理非常重要。
- en: 'A callback module works on events that occur during a playbook execution. The
    various commonly used events as supported in Ansible are:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 回调模块在播本执行期间发生的事件上起作用。Ansible支持的常用事件包括：
- en: '`runner_on_failed`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runner_on_failed`'
- en: '`runner_on_ok`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runner_on_ok`'
- en: '`runner_on_skipped`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runner_on_skipped`'
- en: '`runner_on_unreachable`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runner_on_unreachable`'
- en: '`runner_on_no_hosts`'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runner_on_no_hosts`'
- en: '`playbook_on_start`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`playbook_on_start`'
- en: Events that have a name starting with `runner_` are specific to tasks. Events
    that have names starting with `playbook_` are specific to the entire playbook.
    Clearly, event names are self-explanatory; hence, we will not be going into detail
    of what every event means.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以`runner_`开头的事件名称特定于任务。以`playbook_`开头的事件名称特定于整个播本。显然，事件名称是不言自明的；因此，我们不会详细介绍每个事件的含义。
- en: As described in the previous chapter, the callback plugin should have a class
    named `CallbackModule`, without which Ansible will not identify it as a callback
    plugin. Python API requires the `CallbackModule` class to identify a module as
    a callback plugin. This is required to differentiate between different Python
    files, as different Python modules may reside in the same directory and the callback
    plugin might be using methods from one of the Python modules in the same directory.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一章所述，回调插件应该有一个名为`CallbackModule`的类，否则Ansible将无法识别它作为回调插件。Python API要求`CallbackModule`类来识别模块作为回调插件。这是为了区分不同的Python文件，因为不同的Python模块可能驻留在同一目录中，回调插件可能正在使用同一目录中的一个Python模块的方法。
- en: Having discussed the events and class requirements, it's time to get our hands
    dirty. Let's move on to writing a very basic callback plugin that integrates with
    the `dmidecode` module created in [Chapter 3](ch03.html "Chapter 3. Digging Deeper
    into Ansible Modules"), *Digging Deeper into Ansible Modules*.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论了事件和类的要求之后，现在是时候动手了。让我们继续编写一个非常基本的回调插件，与[第3章](ch03.html "第3章。深入了解Ansible模块")中创建的`dmidecode`模块，*深入了解Ansible模块*进行集成。
- en: If you remember, the Ansible play recorded the JSON output in a register named
    `dmi_data`. This data was then echoed on `stdout` by means of the debug module.
    The callback module thus needs to look for the `dmi_data` key during the playbook
    execution. This key will contain the output JSON. The callback plugin will attempt
    to dump this JSON data in a JSON file on the controller node and name it as either
    the target machine's IP or FQDN followed by the `.json` extension. The callback
    module is named `logvar` and needs to be placed in the `callback_plugins` directory
    at the root of the Ansible play.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得，Ansible播本将JSON输出记录在名为`dmi_data`的寄存器中。然后通过调试模块在`stdout`上回显这些数据。因此，在播本执行期间，回调模块需要查找`dmi_data`键。该键将包含输出的JSON数据。回调插件将尝试在控制节点上将这些JSON数据转储到一个JSON文件中，并将其命名为目标机器的IP或FQDN，后跟`.json`扩展名。回调模块名为`logvar`，需要放置在Ansible播本根目录下的`callback_plugins`目录中。
- en: '[PRE13]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Executing the `dmidecode` playbook after placing the above module in the `callback_plugins`
    directory in the root of Ansible play will result in output files named `<taget>.json`.
    These files contain the `dmidecode` information of the target machine as returned
    by the `dmidecode` module.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在将上述模块放置在Ansible play根目录中的`callback_plugins`目录中后，执行`dmidecode` playbook将导致输出文件命名为`<taget>.json`。这些文件包含由`dmidecode`模块返回的目标机器的`dmidecode`信息。
- en: Var plugins
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Var插件
- en: While writing an Ansible play, you most certainly will use some variables. It
    might be the host-specific `host_vars` or the commonly used `group_vars`. Any
    data that is read from these and fed to the Ansible playbook is done using the
    var plugins.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写Ansible play时，您肯定会使用一些变量。它可能是特定于主机的`host_vars`或常用的`group_vars`。从这些变量中读取的任何数据并馈送到Ansible
    playbook都是使用var插件完成的。
- en: 'The var plugin is identified by the classname `VarModule`. If you explore the
    var plugin on a code level, inside the class, there are three methods:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: var插件由类名`VarModule`标识。如果您在代码级别上探索var插件，在类内部有三种方法：
- en: '`run`: This method should return both the host-specific vars as well as vars
    calculated from groups it is a member of'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run`：此方法应返回特定于主机的变量以及从其成员组计算出的变量'
- en: '`get_host_vars`: Returns host-specific variables'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_host_vars`：返回特定于主机的变量'
- en: '`get_group_vars`: Returns group-specific variables'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_group_vars`：返回特定于组的变量'
- en: Connection plugins
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接插件
- en: Connection plugins define how Ansible connects to the remote machine. Ansible
    can be used to perform operations on various platforms by means of defining playbooks.
    Hence, for different platforms, you may require different connection plugins to
    be used.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 连接插件定义了Ansible如何连接到远程机器。Ansible可以通过定义playbooks来在各种平台上执行操作。因此，对于不同的平台，您可能需要使用不同的连接插件。
- en: By default, Ansible ships with `paramiko_ssh`, native SSH, and a local connection
    plugin. Support for a docker has also been added. There are other less known,
    less used connection plugins, too, like chroot, jail zone, and libvirt.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Ansible附带`paramiko_ssh`，本机SSH和本地连接插件。还添加了对docker的支持。还有其他不太知名，不太常用的连接插件，如chroot，jail
    zone和libvirt。
- en: A connection plugin is identified by its class connection.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 连接插件由其类连接标识。
- en: 'Let''s explore the Paramiko connection plugin on a code level. The connection
    class contains four major methods. These in turn call a few private functions
    for a few operations. The major methods are:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在代码级别上探索Paramiko连接插件。连接类包含四种主要方法。这些方法又调用了一些私有函数来进行一些操作。主要方法是：
- en: '`exec_command`: This method runs the requested command on the remote target.
    You may have a requirement to run commands using `sudo`, which requires a PTY
    by default. Paramiko handles this by passing `pty=True` by default.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exec_command`：此方法在远程目标上运行请求的命令。您可能需要使用`sudo`运行命令的要求，默认情况下需要一个PTY。Paramiko通过默认传递`pty=True`来处理这个问题。'
- en: '`put_file`: This method takes in two parameters – the `in_path` and `out_path`.
    This function is used to copy over files from the local controller node to the
    remote target machine.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`put_file`：此方法接受两个参数 - `in_path`和`out_path`。此函数用于从本地控制器节点复制文件到远程目标机器。'
- en: '`fetch_file`: This method, similar to the `put_file` method, also takes in
    two parameters – the `in_path` and `out_path`. The method is used to fetch files
    from the remote machine to the local controller node.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fetch_file`：这种方法类似于`put_file`方法，也接受两个参数 - `in_path`和`out_path`。该方法用于从远程机器获取文件到本地控制器节点。'
- en: '`Close`: This function terminates the connection when the operation is complete.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Close`：此函数在操作完成时终止连接。'
- en: Filter plugin
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤器插件
- en: Ansible supports Jinja2 templating, but why not Jinja2 filters? You want it;
    Ansible has it!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible支持Jinja2模板化，但为什么不使用Jinja2过滤器？您想要它；Ansible有它！
- en: Filter plugins are Jinja2 template filters that can be used to modify or transform
    the template expression from one form to another. Ansible already has a set of
    Jinja2 filters that come by default. For instance, `to_yaml` and `to_json`. Ansible
    also supports reading data from already formatted texts. For instance, if you
    already have a YAML file or a JSON file from which you need to read data, you
    can use the `from_json` or `from_yaml` filter.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器插件是Jinja2模板过滤器，可用于将模板表达式从一种形式修改或转换为另一种形式。Ansible已经默认提供了一组Jinja2过滤器。例如，`to_yaml`和`to_json`。Ansible还支持从已格式化的文本中读取数据。例如，如果您已经有一个需要从中读取数据的YAML文件或JSON文件，您可以使用`from_json`或`from_yaml`过滤器。
- en: You can also choose to convert a string to an integer by using the `int` filter,
    as demonstrated in the *Loops – lookup plugins for iteration* section while creating
    directories with defined permissions.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以选择使用`int`过滤器将字符串转换为整数，就像在*循环-迭代的查找插件*部分中创建具有定义权限的目录时所示的那样。
- en: Let's discuss how and where the filters can be implemented to get even more
    out of Ansible.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论如何以及在哪里可以实现过滤器，以便更充分地利用Ansible。
- en: Using filters with conditions
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用带条件的过滤器
- en: 'While running a script, a situation might occur where, based on the outcome
    of the previous step, you need to perform a particular step. This is where conditions
    come into the picture. In normal programming, you can use the `if-else` conditional
    statement. In Ansible, you need to check the output of the last command and apply
    a filter along with the `when` clause, as shown in the following code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行脚本时，可能会出现一种情况，根据上一步的结果，您需要执行特定的步骤。这就是条件出现的地方。在正常编程中，您可以使用`if-else`条件语句。在Ansible中，您需要检查上一条命令的输出，并在`when`子句中应用过滤器，如下面的代码所示：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding script, the result of the execution of the shell script `test.sh`
    is stored in the register variable output. If the status is a success, the task
    will print `Success`; otherwise, it will print `Failed`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述脚本中，shell脚本`test.sh`的执行结果存储在寄存器变量output中。如果状态是成功，任务将打印`Success`；否则，将打印`Failed`。
- en: Version comparison
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本比较
- en: 'This filter can be used to check which version of the requested application
    is installed on the target host. It returns a `True` or `False` status. The version
    comparison filter accepts the following operators:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此过滤器可用于检查目标主机上安装的请求应用程序的版本。它返回`True`或`False`状态。版本比较过滤器接受以下运算符：
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: IP address filter
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IP地址过滤器
- en: 'The IP address filter can be used to check if the provided string is a valid
    IP address or not. You can even specify what protocol you are checking against:
    IPv4 or Ipv6.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: IP地址过滤器可用于检查提供的字符串是否为有效的IP地址。甚至可以指定您要检查的协议：IPv4或IPv6。
- en: 'The following filter will check if the IP address is a valid Ipv4 address:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下过滤器将检查IP地址是否为有效的IPv4地址：
- en: '[PRE16]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the same way, an IP address can be checked to see if it''s a valid Ipv6
    address or not by using:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，可以通过使用以下方式来检查IP地址是否为有效的IPv6地址：
- en: '[PRE17]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Understanding the code
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解代码
- en: A Python module is identified by Ansible as a filter plugin by looking for a
    class named `FilterModule`. Inside this class there exists one method named `filters`,
    which maps the filters to their corresponding file outside the `FilterModule`
    class.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible通过查找名为`FilterModule`的类来识别Python模块为过滤器插件。在这个类内部存在一个名为`filters`的方法，它将过滤器映射到它们在`FilterModule`类之外的对应文件中。
- en: 'The following is a structure of the filter plugin if you choose to write one
    yourself:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择自己编写过滤器插件，以下是过滤器插件的结构：
- en: '[PRE18]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding sample code, in the filter method inside the `FilterModule`
    class, the `custom_filter` key maps to the `custom_filter` function outside the
    class.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例代码中，在`FilterModule`类内部的过滤器方法中，`custom_filter`键映射到类外部的`custom_filter`函数。
- en: The `custom_filter` function contains the actual filter implementation code.
    Ansible simply loads the `FilterModule` class and reads through the defined filters.
    The defined filters are then made available to the end user.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`custom_filter`函数包含实际的过滤器实现代码。Ansible只是加载`FilterModule`类并浏览定义的过滤器。然后将定义的过滤器提供给最终用户使用。'
- en: In the Ansible code base, any new suggestions for filters are normally added
    to the `core.py` file inside the filter plugins.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在Ansible代码库中，任何关于过滤器的新建议通常都会添加到过滤器插件内部的`core.py`文件中。
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter continued where [Chapter 4](ch04.html "Chapter 4. Exploring API"),
    *Exploring API* ended and picked up on how the Ansible Python API for plugins
    is implemented in the various Ansible plugins. Throughout this chapter, we discussed
    various types of plugins in detail, both from the implementation point and on
    a code level. The chapter also demonstrated how to write sample plugins by writing
    custom lookup and callback plugins. You should now be able to write your own custom
    plugins for Ansible.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 本章继续了[第4章](ch04.html "第4章。探索API")*探索API*的内容，并介绍了Ansible插件的Python API在各种Ansible插件中的实现方式。在本章中，我们详细讨论了各种类型的插件，从实现角度和代码层面进行了讨论。本章还演示了如何通过编写自定义查找和回调插件来编写示例插件。现在，您应该能够为Ansible编写自己的自定义插件。
- en: The next chapter will explore how to configure Ansible and fit together everything
    that has been discussed up until now. The chapter will also guide you on how to
    share your plugins and roles and explore some best practices to follow.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将探讨如何配置Ansible，并将到目前为止讨论的所有内容整合在一起。本章还将指导您如何共享您的插件和角色，并探索一些最佳实践。
