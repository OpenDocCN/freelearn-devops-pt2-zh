- en: '5: Kubernetes Deployments'
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5：Kubernetes部署
- en: In this chapter, we’ll see how *Deployments* bring self-healing, scalability,
    rolling updates, and rollbacks to Kubernetes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到*部署*如何为Kubernetes带来自愈、可伸缩、滚动更新和回滚。
- en: 'We’ll split the chapter up as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按以下方式拆分本章：
- en: Deployment theory
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署理论
- en: How to create a Deployment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建部署
- en: How to perform a rolling update
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何执行滚动更新
- en: How to perform a rollback
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何执行回滚
- en: Deployment theory
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署理论
- en: At a high level, we start with application code. That gets packaged as a container
    and wrapped in a Pod so it can run on Kubernetes. However, Pods don’t self-heal,
    they don’t scale, and they don’t allow for easy updates.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，我们从应用程序代码开始。将其打包为容器，并包装在Pod中，以便在Kubernetes上运行。但是，Pod不会自愈，它们不会扩展，也不会允许轻松更新。
- en: Deployments do all of those things - *self-heal, scale, and rolling updates*
    . As a result, we almost always deploy Pods via Deployments. See Figure 5.1.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 部署可以做所有这些事情- *自愈、扩展和滚动更新*。因此，我们几乎总是通过部署部署Pod。见图5.1。
- en: '![Figure 5.1](Image00030.gif)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: ！[图5.1]（Image00030.gif）
- en: Figure 5.1
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1
- en: It’s important to know that a Deployment only manages a set of identical Pods.
    For example, if you have an application with a Pod for the front-end and another
    Pod for the back-end, you’ll need two Deployments.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要知道，部署只管理一组相同的Pod。例如，如果您有一个应用程序，其中一个Pod用于前端，另一个Pod用于后端，您将需要两个部署。
- en: The next thing to know, is that Deployments are fully-fledged objects in the
    Kubernetes API. This means we define them in manifest files that we `POST` to
    the API server.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要知道的是，部署是Kubernetes API中的完整对象。这意味着我们在清单文件中定义它们，然后将它们`POST`到API服务器。
- en: The last thing to note, is that behind-the-scenes, Deployments leverage another
    object called a ReplicaSet. We don’t directly manage ReplicaSets, but it’s important
    to understand them as it will help explain the mechanics of some of the operations
    we’re about to describe.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最后要注意的是，幕后，部署利用了另一个称为副本集的对象。我们不直接管理副本集，但了解它们很重要，因为这将有助于解释我们即将描述的一些操作的机制。
- en: Keeping it high-level, Deployments use ReplicaSets to provide the self-healing
    and scalability bits. See Figure 5.2.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 保持高层次，部署使用副本集来提供自愈和可伸缩性。见图5.2。
- en: '![Figure 5.2](Image00031.gif)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: ！[图5.2]（Image00031.gif）
- en: Figure 5.2
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2
- en: In summary; *Deployments* manage *ReplicaSets* , and *ReplicaSets* manage *Pods*
    . Put them all together, and we’ve got a great way to deploy and manage applications
    on Kubernetes!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 总之；*部署*管理*副本集*，而*副本集*管理*Pod*。把它们放在一起，我们有了一个在Kubernetes上部署和管理应用程序的好方法！
- en: Self-healing and scalability
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 自愈和可伸缩性
- en: Pods are great. They augment containers by allowing co-location of containers,
    sharing of volumes, sharing of memory, simplified networking, and a lot more.
    But they offer nothing in the way of self-healing and scalability.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Pod很棒。它们通过允许容器共存、共享卷、共享内存、简化网络等方式增强了容器。但是它们在自愈和可伸缩方面没有任何作用。
- en: Enter Deployments.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 进入部署。
- en: 'Deployments augment Pods by adding things like self-healing and scalability.
    This means:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 部署通过添加自愈和可伸缩等功能来增强Pod。这意味着：
- en: If a Pod being managed by a Deployment fails, it will be replaced - *self-healing*
    .
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果由部署管理的Pod失败，它将被替换- *自愈*。
- en: If a Pod being managed by a Deployment sees increased load, you can easily add
    more of the same Pod to deal with the load - *scaling* .
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果由部署管理的Pod看到负载增加，您可以轻松地添加更多相同的Pod来处理负载- *扩展*。
- en: However, behind-the-scenes, Deployments use an object called a ReplicaSet to
    bring self-healing and scalability. However, ReplicaSets operate in the background
    and we always manage them via Deployments. For this reason, we’ll focus mainly
    on the Deployment side of things.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在幕后，部署使用一个称为ReplicaSet的对象来实现自愈和可伸缩性。但是，ReplicaSets在后台运行，我们总是通过部署来管理它们。因此，我们将主要关注部署方面的事情。
- en: It’s all about the *state*
  id: totrans-26
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 这一切都与*状态*有关。
- en: 'Before going any further, it’s critical to understand three concepts that are
    fundamental to everything about Kubernetes:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，了解三个对Kubernetes的一切都至关重要的概念是至关重要的：
- en: Desired state
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 期望状态
- en: Current state (sometimes called *actual state* or *observed state* )
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前状态（有时称为*实际状态*或*观察状态*）
- en: Declarative model
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明性模型
- en: '*Desired state* is what you **want** . *Current state* is what you **have**
    . If the two match, everybody’s happy.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*期望状态*是您**想要**的。*当前状态*是您**拥有**的。如果两者匹配，每个人都很高兴。'
- en: A *declarative model* is a way of telling Kubernetes what our *desired state*
    is, without getting into the detail of *how* to implement it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*声明性模型*是告诉Kubernetes我们的*期望状态*是什么，而不涉及*如何*实现它的细节。'
- en: The declarative model
  id: totrans-33
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 声明性模型
- en: There are two competing models. The *declarative model* and the *imperative
    model* .
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种竞争模型。*声明性模型*和*命令模型*。
- en: Declarative models are all about describing the end-goal - telling Kubernetes
    what you want. Imperative models are all about lists of commands to achieve an
    end-goal - telling Kubernetes **how** to do something.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 声明性模型是关于描述最终目标的 - 告诉Kubernetes你想要什么。命令模型是关于实现最终目标的命令列表 - 告诉Kubernetes**如何**做某事。
- en: Let’s look at an example.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。
- en: Assume you’ve got an application with two services - front-end and back-end.
    You’ve configured things so that you have a Pod for the front-end service, and
    a separate Pod for the back-end service. To meet expected demand, you always need
    5 instances of the front-end Pod, and 2 instances of the back-end Pod.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您有一个具有两个服务 - 前端和后端的应用程序。您已经配置好了，这样您就有了一个用于前端服务的Pod，以及一个用于后端服务的单独的Pod。为了满足预期的需求，您总是需要5个前端Pod的实例和2个后端Pod的实例。
- en: Taking the declarative approach, you create a configuration file that tells
    Kubernetes what your front-end and back-end Pods should look like - things like
    what images to use and what ports to expose. In the same file you also tell Kubernetes
    that you want 5 replicas of the front-end Pods and 2 of the back-end Pods. That’s
    your *desired state* . You then give that file to Kubernetes and sit back while
    Kubernetes does the hard work of implementing it. But it doesn’t stop there… Kubernetes
    implements watch loops that are constantly checking that what is on the cluster
    matches what you’ve asked for (does current state match desired state).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 采用声明性方法，您创建一个配置文件，告诉Kubernetes您的前端和后端Pod应该是什么样子 - 例如要使用什么镜像和要暴露什么端口。在同一个文件中，您还告诉Kubernetes您想要5个前端Pod的副本和2个后端Pod的副本。这就是您的*期望状态*。然后将该文件交给Kubernetes，然后坐下来，让Kubernetes来实现它的艰苦工作。但事情并不止于此...
    Kubernetes实现了不断检查集群上的内容是否与您要求的内容匹配的监视循环（当前状态是否与期望状态匹配）。
- en: It’s great!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！
- en: The opposite of the declarative model is the imperative model. In the imperative
    model, there’s no concept of desired state. Instead, you write a bunch of scripts
    with the all the commands required to build what you want. And you have to care
    about implementation details. For example, the commands to start `containerd`
    containers are different from the commands to start `rkt` containers. This ends
    up being more work, prone to more errors, and because it’s not declaring a desired
    state, there’s no self-healing.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 声明性模型的相反是命令式模型。在命令式模型中，没有期望状态的概念。相反，您需要编写一堆脚本，其中包含构建所需的所有命令。而且你必须关心实现细节。例如，启动`containerd`容器的命令与启动`rkt`容器的命令不同。这最终会导致更多的工作，更容易出错，并且因为它没有声明期望状态，所以没有自我修复。
- en: It’s not so great :-(
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '这不太好: -('
- en: Kubernetes supports both models, but strongly prefers the declarative model.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes支持两种模型，但强烈倾向于声明性模型。
- en: Reconciliation loops
  id: totrans-43
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 调和循环
- en: Fundamental to desired state is the concept of background reconciliation loops.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 期望状态的基础是后台调和循环的概念。
- en: For example, ReplicaSets implement a background reconciliation loop that is
    constantly checking whether the right number of Pod replicas are present on the
    cluster. If there aren’t enough, it adds more. If there are too many, it terminates
    some.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，ReplicaSets实现了一个后台调和循环，不断检查集群上是否存在正确数量的Pod副本。如果不够，它会添加更多。如果太多，它会终止一些。
- en: To be crystal clear - **Kubernetes is constantly checking whether *current state*
    matches *desired state!***
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要非常清楚- **Kubernetes不断检查*当前状态*是否与*期望状态*匹配！***
- en: If they don’t match - may be desired state is 10 replicas, but only 8 are running
    - Kubernetes switches to red-alert, orders the control plane to battle-stations,
    and brings up two more replicas. And the best part… it does all of this without
    calling you at 4:20 in the morning!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们不匹配-可能期望状态是10个副本，但只有8个在运行-Kubernetes会切换到红色警报，命令控制平面进入战斗状态，并启动另外两个副本。最好的部分是...它在清晨4:20不会给你打电话！
- en: But it’s not just failure scenarios. These very-same reconciliation loops enable
    scaling!
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不仅仅是故障场景。这些完全相同的调和循环也实现了扩展！
- en: For example, if you `POST` an update to your application config that takes replica
    count from 3 to 5\. The new value of 5 will be registered as the application’s
    new *desired state* , and the next time the reconciliation loop runs, it will
    notice the discrepancy and follow the same process - sounding the claxon horn
    for red alert, and spinning up two more replicas.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您将应用程序配置的更新发送到`POST`，将副本计数从3增加到5。新值5将被注册为应用程序的新*期望状态*，并且在下一次调和循环运行时，它将注意到差异并遵循相同的过程-发出红色警报的警报声，并启动另外两个副本。
- en: It’s a beautiful thing!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一件美好的事情！
- en: Rolling updates with Deployments
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用部署进行滚动更新
- en: As well as self-healing and scaling, Deployments also give us zero-downtime
    rolling-updates.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 除了自我修复和扩展，部署还为我们提供了零停机滚动更新。
- en: As previously mentioned. Deployments use ReplicaSets for some of the background
    legwork. In fact, every time we create a Deployment, we automatically get a ReplicaSet
    that manages the Deployment’s Pods.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述。部署使用ReplicaSets进行一些后台工作。实际上，每次创建部署时，我们都会自动获得一个管理部署Pod的ReplicaSet。
- en: '**Note:** You should not directly manage ReplicaSets that are created as part
    of a Deployment. You should perform all actions against the Deployment object
    and leave the Deployment to manage its own ReplicaSets.'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：您不应直接管理作为部署的一部分创建的ReplicaSets。您应该对部署对象执行所有操作，并让部署对象管理其自己的ReplicaSets。
- en: 'It works like this. We design our application with each discrete service as
    a Pod. For convenience - self-healing, scaling, rolling updates and more - we
    wrap Pods in a Deployment. This means creating a YAML configuration file describing
    all of the folllowing:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 它的工作原理是这样的。我们将我们的应用程序设计为每个独立的服务作为一个Pod。为了方便 - 自愈、扩展、滚动更新等 - 我们将Pod包装在一个部署中。这意味着创建一个描述以下所有内容的YAML配置文件：
- en: How many Pod replicas
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有多少个Pod副本
- en: What image to use for the Pod’s container(s)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于Pod容器的镜像
- en: What network ports to use
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用哪些网络端口
- en: Details about how to perform rolling updates
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于如何执行滚动更新的详细信息
- en: You `POST` that YAML file to the API server, and Kubernetes does all of the
    hard work to implement it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 您将该YAML文件发布到API服务器，Kubernetes会完成所有的艰苦工作来实施它。
- en: Once it’s implemented, Kubernetes sets up a watch loop to make sure observed
    state matches desired state.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦实施，Kubernetes设置了一个监视循环，以确保观察到的状态与期望的状态相匹配。
- en: All good so far.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止一切顺利。
- en: Now, assume you want to update the version of the image the Pods are using.
    To do that, you update the **same Deployment YAML file** with the new image version,
    and re-POST it to the API server. This registers a new desired state on the cluster
    requesting the same number of Pods, but all running the new version of the image.
    To achieve this, Kubernetes creates a new ReplicaSet for the Pods with the new
    image. We now have two ReplicaSets - one for the Pods with the old version of
    the image, and another for Pods with the new version. As Kubernetes increases
    the number of Pods in the new ReplicaSet (with the new version of the image) it
    decreases the number of Pods in the old ReplicaSet (with the old version of the
    image). Net result, we get a smooth rolling update with zero downtime. And we
    can rinse and repeat the process for future updates - just keep updating that
    manifest file (which should be stored in a version control system).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设您想要更新Pod使用的镜像版本。为此，您使用新的镜像版本更新**相同的部署YAML文件**，并将其重新发布到API服务器。这在集群上注册了一个新的期望状态，请求相同数量的Pod，但都运行新版本的镜像。为了实现这一点，Kubernetes为具有新镜像的Pod创建了一个新的ReplicaSet。现在我们有两个ReplicaSets
    - 一个用于具有旧版本镜像的Pod，另一个用于具有新版本的Pod。当Kubernetes增加新ReplicaSet中的Pod数量（具有新版本的镜像）时，它会减少旧ReplicaSet中的Pod数量（具有旧版本的镜像）。最终结果是，我们可以实现零停机的平滑滚动更新。而且我们可以为将来的更新重复这个过程
    - 只需不断更新那个清单文件（应该存储在版本控制系统中）。
- en: Brilliant!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！
- en: Figure 5.3 shows a Deployment that has been updated once. The initial deployment
    created the ReplicaSet on the left, and the update created the ReplicaSet on the
    right. We can see that the ReplicaSet for the initial deployment has been wound
    down and no longer has any Pods. The ReplicaSet associated with the update is
    active and owns all of the Pods.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3显示了一个已经更新了一次的部署。初始部署在左侧创建了ReplicaSet，更新在右侧创建了ReplicaSet。我们可以看到初始部署的ReplicaSet已经被逐渐停止，不再拥有任何Pod。与更新相关的ReplicaSet是活动的，并拥有所有的Pod。
- en: '![Figure 5.3](Image00032.gif)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图5.3](Image00032.gif)'
- en: Figure 5.3
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3
- en: Rollbacks
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 回滚
- en: As we’ve seen in Figure 5.3, old ReplicaSets stick around and don’t get deleted.
    They’ve been wound down, so aren’t managing any Pods, but they still exist. This
    makes them a great option for reverting back to previous versions.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在图5.3中看到的，旧的ReplicaSets仍然存在，不会被删除。它们已经被逐渐停止，因此不再管理任何Pod，但它们仍然存在。这使它们成为恢复到先前版本的一个很好的选项。
- en: The process of rolling back is essentially the opposite of a rolling update
    - wind one of the old ReplicaSets up, and wind the current one down. Simple!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 回滚的过程本质上是滚动更新的相反过程 - 将旧的ReplicaSet逐渐启动，将当前的ReplicaSet逐渐停止。简单！
- en: Figure 5.4 shows the same app rolled back to the initial revision.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4显示了同一应用程序回滚到初始修订版。
- en: '![Figure 5.4](Image00033.gif)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图5.4](Image00033.gif)'
- en: Figure 5.4
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4
- en: That’s not the end though! There’s built-in intelligence that lets us say things
    like *“wait X number of seconds after each Pod comes up before we mark it as healthy…“*
    . There’s also readiness probes and all kinds of things. All-in-all, Deployments
    are excellent for performing rolling updates and versioned rollbacks.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 但这还不是结束！内置的智能让我们能够说出像*“在每个 Pod 启动后等待 X 秒再将其标记为健康…”* 这样的话。还有就绪探针和各种各样的东西。总的来说，部署非常适合执行滚动更新和版本回滚。
- en: With all that in mind, let’s get our hands dirty and create a Deployment.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到所有这些，让我们动手创建一个部署。
- en: How to create a Deployment
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何创建部署
- en: In this section, we’ll create a brand-new Kubernetes Deployment from a YAML
    file. We can do the same thing imperatively using the `kubectl run` command, but
    we shouldn’t! The right way is the declarative way!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从 YAML 文件创建一个全新的 Kubernetes 部署。我们可以使用 `kubectl run` 命令以命令方式执行相同的操作，但我们不应该这样做！正确的方式是声明式的方式！
- en: The following code snippet is the Deployment manifest file that we’ll use, and
    the examples assume it’s called `deploy.yml` .
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段是我们将使用的部署清单文件，示例假设它被称为 `deploy.yml`。
- en: If you’re using an older version of Kubernetes you should use the `apps/v1beta1`
    API.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用较旧版本的 Kubernetes，应该使用 `apps/v1beta1` API。
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Warning:** The images used in this book are not maintained and will be full
    of vulnerabilities and other security issues.'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**警告：** 本书中使用的图像未经维护，将充满漏洞和其他安全问题。'
- en: Let’s step through the file and explain some of the important parts.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步浏览文件并解释一些重要部分。
- en: Right at the very top, we’re specifying the API version to use. Assuming that
    you’re using an up-to-date version of Kubernetes, Deployment objects are in the
    `apps/v1` API group. If you’re using an older version, you can try `apps/v1beta1`
    or `extensions/v1beta2` .
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 就在最顶部，我们正在指定要使用的 API 版本。假设您正在使用最新版本的 Kubernetes，部署对象位于 `apps/v1` API 组中。如果您使用的是旧版本，可以尝试
    `apps/v1beta1` 或 `extensions/v1beta2`。
- en: Next, the `.kind` field tells Kubernetes we’re defining a Deployment - this
    is how Kubernetes knows to send this to the Deployments controller on the control
    plane.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`.kind` 字段告诉 Kubernetes 我们正在定义一个部署 - 这是 Kubernetes 知道将其发送到控制平面上的部署控制器的方式。
- en: The `.metadata` section is where we give the Deployment a name and labels.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`.metadata` 部分是我们为部署指定名称和标签的地方。'
- en: The `.spec` section is where most of the action happens. `.spec.replicas` tells
    Kubernetes how may Pod replicas for this Deployment. `spec.selector` is a list
    of labels that Pods must have in order for the Deployment to manage them. And
    `.spec.strategy` tells Kubernetes how to perform updates to the Deployment.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`.spec` 部分是大部分操作发生的地方。`.spec.replicas` 告诉 Kubernetes 为这个部署创建多少个 Pod 副本。`spec.selector`
    是 Pod 必须具有的标签列表，以便部署管理它们。而 `.spec.strategy` 告诉 Kubernetes 如何执行对部署的更新。'
- en: Use `kubectl apply` to implement it on the cluster.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `kubectl apply` 在集群上实现它。
- en: '**Note:** `kubectl apply` POSTs the YAML file to the Kubernetes API server.'
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** `kubectl apply` 将 YAML 文件发送到 Kubernetes API 服务器。'
- en: '[PRE1]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Deployment is instantiated on the cluster.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 部署在集群上实例化。
- en: Inspecting Deployments
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查部署
- en: We can use the usual `kubectl get` and `kubectl describe` commands to see details
    of the Deployment.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用通常的 `kubectl get` 和 `kubectl describe` 命令来查看部署的详细信息。
- en: '[PRE2]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The command outputs have been trimmed for readability. Your outputs will show
    more information.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于阅读，命令输出已被修剪。您的输出将显示更多信息。
- en: As we mentioned earlier, Deployments automatically create associated ReplicaSets.
    Use the following `kubectl` command to confirm this.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，部署会自动创建关联的 ReplicaSets。使用以下 `kubectl` 命令来确认这一点。
- en: '[PRE3]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Right now, we only have one ReplicaSet. This is because we’ve only performed
    the initial rollout of the Deployment. However, we can see it gets the same name
    as the Deployment, with a hash of the Pod template section of the YAML manifest
    file appended to the end.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只有一个ReplicaSet。这是因为我们只执行了部署的初始推出。然而，我们可以看到它与部署的名称相同，后面跟着YAML清单文件的Pod模板部分的哈希值。
- en: We can get more detailed information about the ReplicaSet with the usual `kubectl
    describe` command.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用通常的`kubectl describe`命令获取有关ReplicaSet的更详细信息。
- en: Accessing the app
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 访问应用
- en: In order to access the application from a stable name or IP address, or even
    from outside the cluster, we need a Kubernetes Service object (more on these in
    the next chapter). For now, all you need to know is that Kubernetes Services provide
    a stable DNS name and IP address for a set of Pods.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从稳定的名称或IP地址访问应用，甚至从集群外部访问，我们需要一个Kubernetes Service对象（关于这些内容将在下一章中详细介绍）。现在，你只需要知道Kubernetes
    Services为一组Pods提供了稳定的DNS名称和IP地址。
- en: The following YAML defines a Service that will work with the Pods previously
    deployed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下的YAML定义了一个将与先前部署的Pod一起工作的Service。
- en: '[PRE4]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Deploy it with the following command (the command assumes the manifest file
    is called `svc.yml` ).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令部署它（该命令假设清单文件名为`svc.yml`）。
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now that the Service is deployed, you can access it via either of the following
    ways:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Service已经部署，你可以通过以下任一方式访问它：
- en: From inside the cluster using the DNS name `hello-svc` on port `8080` .
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从集群内部使用DNS名称`hello-svc`在端口`8080`上。
- en: From outside the cluster by hitting any of the cluster nodes on port `30001`
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从集群外部，通过命中端口`30001`上的任何集群节点
- en: Figure 5.5 shows the Service being accessed from outside of the cluster via
    a node called `node1` on port `30001` . It assumes that `node1` is resolvable,
    and that port `30001` is allowed by any intervening firewalls.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5显示了通过名为`node1`的节点在端口`30001`上从集群外部访问Service。它假设`node1`是可解析的，并且端口`30001`被任何中间防火墙允许。
- en: If you are using Minikube, you should append port `30001` to the end of the
    Minikube IP address. Use the `minikube ip` command to get the IP address of your
    Minikube.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用Minikube，你应该在Minikube IP地址的末尾添加端口`30001`。使用`minikube ip`命令获取你的Minikube的IP地址。
- en: '![Figure 5.5](Image00034.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图5.5](Image00034.jpg)'
- en: Figure 5.5
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5
- en: Performing a rolling update
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行滚动更新
- en: In this section, we’ll see how to perform a rolling update on the app we’ve
    just deployed. We’ll assume the new version of the app has already been created
    and containerized as a Docker image with the `edge` tag. All that is left to do
    is use Kubernetes to push the update to production. For this example, we’ll be
    ignoring real-world CI/CD workflows and version control tools.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何对我们刚刚部署的应用执行滚动更新。我们将假设应用的新版本已经被创建并作为带有`edge`标签的Docker镜像容器化。现在只需要使用Kubernetes将更新推送到生产环境。在本例中，我们将忽略真实的CI/CD工作流和版本控制工具。
- en: The first thing we need to do is update the image tag used in the Deployment’s
    manifest file. The initial version of the app that we deployed used an image tagged
    as `nigelpoulton/k8sbook:latest` . We’ll update the `.spec.template.spec.containers`
    section of the Deployment manifest to reference the new `nigelpoulton/k8sbook:edge`
    image. This will ensure that next time the manifest is POSTed to the API server,
    all Pods in the Deployment will be updated to run the new `edge` image.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是更新部署清单文件中使用的镜像标签。我们部署的应用的初始版本使用了标记为`nigelpoulton/k8sbook:latest`的镜像。我们将更新部署清单的`.spec.template.spec.containers`部分，以引用新的`nigelpoulton/k8sbook:edge`镜像。这将确保下次清单被POST到API服务器时，部署中的所有Pod将被更新为运行新的`edge`镜像。
- en: The following is the updated `deploy.yml` manifest file - the only change is
    to `.spec.template.spec.containers.image` indicated by the commented line.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是更新后的 `deploy.yml` 清单文件 - 唯一的更改是由注释行指示的 `.spec.template.spec.containers.image`。
- en: '[PRE6]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Warning:** The images used in this book are not maintained and will be full
    of vulnerabilities and other security issues.'
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 警告：本书中使用的图像未经维护，将充满漏洞和其他安全问题。
- en: Let’s take a look at the settings governing how the Deployment is updated.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看管理部署更新的设置。
- en: The `.spec` section of the manifest contains all of the settings relating to
    how updates will be performed. The first value of interest is `.spec.minReadySeconds`
    . We’ve got this set to `10` , telling Kubernetes to wait for 10 seconds after
    updating each Pod before moving on and updating the next. This is useful for throttling
    the rate at which updates occur - longer waits give us a chance to spot problems
    and avoid situations where we update all Pods to faulty Pods.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 清单的 `.spec` 部分包含了所有与更新执行相关的设置。感兴趣的第一个值是 `.spec.minReadySeconds`。我们将其设置为 `10`，告诉
    Kubernetes 在更新每个 Pod 后等待 10 秒再继续更新下一个。这对于限制更新发生的速率很有用 - 较长的等待时间给我们发现问题的机会，并避免将所有
    Pod 更新为有问题的 Pod 的情况。
- en: 'We also have a nested `.spec.strategy` map that tells Kubernetes we want this
    Deployment to:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个嵌套的 `.spec.strategy` 映射，告诉 Kubernetes 我们希望这个部署：
- en: Update using the `RollingUpdate` strategy
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `RollingUpdate` 策略进行更新
- en: 'Never go more than one Pod below desired state (`maxUnavailable: 1` )'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '永远不要低于期望状态的一个 Pod（`maxUnavailable: 1`）'
- en: 'Never go more than one Pod above desired state (`maxSurge: 1` )'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '永远不要超过期望状态的一个 Pod（`maxSurge: 1`）'
- en: 'As the desired state of the app demands 10 replicas, `maxSurge: 1` means we
    will never have more than 11 Pods during the update process, and `maxUnavailable:
    1` means we’ll never have less than 9.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '由于应用的期望状态要求有 10 个副本，`maxSurge: 1` 意味着在更新过程中我们永远不会有超过 11 个 Pod，而 `maxUnavailable:
    1` 意味着我们永远不会少于 9 个。'
- en: With the updated manifest ready, we can initiate the update by re-POSTing the
    updated YAML file to the API server.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好更新的清单后，我们可以通过重新将更新后的 YAML 文件发送到 API 服务器来启动更新。
- en: '[PRE7]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The update may take some time to complete. This is because it will iterate one
    Pod at a time, pull down the new image on each node, start the new Pod, and wait
    10 seconds before moving on to the next Pod.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 更新可能需要一些时间才能完成。这是因为它将逐个 Pod 迭代，每个节点下载新的图像，启动新的 Pod，并在移动到下一个 Pod 之前等待 10 秒。
- en: We can monitor the progress of the update with `kubectl rollout status` .
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `kubectl rollout status` 监控更新的进度。
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you press `Ctrl+C` to stop watching the progress of the update, you can run
    `kubectl get deploy` commands while the update is in process. This lets us see
    the effect of some of the update-related settings in the manifest. For example,
    the following command shows that 5 of the replicas have been updated and we currently
    have 11\. 11 is 1 more than the desired state of 10\. This is a result of the
    `maxSurge=1` value in the manifest.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果按下 `Ctrl+C` 停止观察更新的进度，您可以在更新过程中运行 `kubectl get deploy` 命令。这样我们就可以看到清单中一些与更新相关的设置的效果。例如，以下命令显示有
    5 个副本已经更新，当前有 11 个。11 比期望的 10 多了 1 个。这是清单中 `maxSurge=1` 值的结果。
- en: '[PRE9]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Once the update is complete, we can verify with `kubectl get deploy` .
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 更新完成后，我们可以使用 `kubectl get deploy` 进行验证。
- en: '[PRE10]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The output shows the update as complete - 10 Pods are up to date. You can get
    more detailed information about the state of the Deployment with the `kubectl
    describe deploy` command - this will include the new version of the image in the
    `Pod Template` section of the output.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示更新已完成 - 10 个 Pod 已经是最新的。您可以使用 `kubectl describe deploy` 命令获取有关部署状态的更详细信息
    - 这将包括输出的 `Pod 模板` 部分中的新图像版本。
- en: If you’ve been following along with the examples you’ll be able to hit `refresh`
    in your browser and see the updated app (Figure 5.6).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您一直在关注示例，您可以在浏览器中点击“刷新”并查看更新后的应用程序（图5.6）。
- en: '![Figure 5.6](Image00035.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图5.6](Image00035.jpg)'
- en: Figure 5.6
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6
- en: The old version of the apps displayed “Kubernetes Rocks!”, the new version displays
    “The Kubernetes Book!!!”.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的旧版本显示“Kubernetes Rocks!”，新版本显示“The Kubernetes Book!!!”。
- en: How to perform a rollback
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何执行回滚
- en: A moment ago, we used `kubectl apply` to perform the rolling update on a Deployment.
    We used the `--record` flag so that Kubernetes would maintain a revision history
    of the Deployment. The following `kubectl rollout history` command shows the Deployment
    with two revisions.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 刚才，我们使用`kubectl apply`对部署执行了滚动更新。我们使用了`--record`标志，以便Kubernetes会维护部署的修订历史。以下`kubectl
    rollout history`命令显示了具有两个修订的部署。
- en: '[PRE11]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Revision `1` was the initial deployment that used the `latest` image tag. Revision
    `2` is the rolling update that we just performed, and we can see that the command
    we used to invoke the update has been recorded in the object’s history. This is
    only there because we used the `--record` flag as part of the command to invoke
    the update. This might be a good reason for you to use the `--record` flag.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 修订版`1`是使用`latest`图像标记的初始部署。修订版`2`是我们刚刚执行的滚动更新，我们可以看到我们用来调用更新的命令已记录在对象的历史记录中。这仅因为我们在调用更新命令时使用了`--record`标志。这可能是您使用`--record`标志的一个很好的理由。
- en: Earlier in the chapter we said that updating a Deployment creates a new ReplicaSet,
    and that previous ReplicaSets are not deleted. We can verify this with a `kubectl
    get rs` .
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前面，我们说更新部署会创建一个新的ReplicaSet，并且以前的ReplicaSets不会被删除。我们可以使用`kubectl get rs`来验证这一点。
- en: '[PRE12]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The output shows that the ReplicaSet for the initial revision still exists (`hello-deploy-7bbd...`
    ) but that it has been wound down and is not managing any replicas. The `hello-deploy-6bc8...`
    ReplicaSet is the one from the latest revision, and is active with 10 replicas
    under management. However, the fact that the previous version still exists makes
    rollbacks extremely simple.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示初始修订的ReplicaSet仍然存在（`hello-deploy-7bbd...`），但已被关闭，并且不再管理任何副本。`hello-deploy-6bc8...`
    ReplicaSet是最新修订的ReplicaSet，并且在管理下有10个副本。然而，以前的版本仍然存在使得回滚变得非常简单。
- en: It’s worth running a `kubectl describe rs` against the old ReplicaSet to prove
    that its configuration still exists.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 值得运行`kubectl describe rs`来证明旧的ReplicaSet的配置仍然存在。
- en: The following example uses the `kubectl rollout` command to roll the application
    back to revision 1\. This is an imperative operation and not recommended. However,
    it can be convenient for quick rollbacks, just remember to update your source
    YAML files to reflect the imperative changes you’ve made to the cluster.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例使用`kubectl rollout`命令将应用程序回滚到修订版1。这是一个命令式操作，不建议使用。但是，对于快速回滚来说可能很方便，只需记住更新源YAML文件以反映您对集群所做的命令式更改。
- en: '[PRE13]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Although it might look like the rollback operation is instantaneous, it’s not.
    Rollbacks follow the same rules set out in the Deployment manifest - `minReadySeconds:
    10` , `maxUnavailable: 1` , and `maxSurge: 1` . You can verify this and track
    the progress with the following `kubectl get deploy` and `kubectl rollout` commands.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '尽管回滚操作看起来可能是瞬时的，但实际上并非如此。回滚遵循部署清单中规定的相同规则-`minReadySeconds: 10`，`maxUnavailable:
    1`和`maxSurge: 1`。您可以使用以下`kubectl get deploy`和`kubectl rollout`命令来验证这一点并跟踪进度。'
- en: '[PRE14]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Congratulations. You’ve performed a rolling update and a successful rollback.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜。您已执行了滚动更新和成功的回滚。
- en: Use `kubectl delete -f deploy.yml` to delete the Deployment used in the examples.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`kubectl delete -f deploy.yml`来删除示例中使用的部署。
- en: Chapter summary
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 章节总结
- en: In this chapter, we learned that *Deployments* are a great way to manage Kubernetes
    apps. They build on top of Pods by adding self-healing, scalability, rolling updates,
    and rollbacks. Behind-the-scenes, they leverage ReplicaSets for the self-healing
    and scalability parts.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们了解到*部署*是管理Kubernetes应用程序的一种很好的方式。它们在Pods的基础上添加了自愈、可伸缩性、滚动更新和回滚功能。在幕后，它们利用ReplicaSets来实现自愈和可伸缩性。
- en: Like Pods, Deployments are objects in the Kubernetes API and we should work
    with them declaratively.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 与Pods一样，部署是Kubernetes API中的对象，我们应该以声明性的方式与它们一起工作。
- en: When we perform updates with the `kubectl apply` command, older versions of
    ReplicaSets get wound down, but they stick around making it easy to perform rollbacks.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`kubectl apply`命令进行更新时，旧版本的ReplicaSets会被逐渐关闭，但它们仍然存在，这样就可以轻松进行回滚操作。
