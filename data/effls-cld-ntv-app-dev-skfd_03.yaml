- en: '[*Chapter 2*](B17385_02_Final_PD_ePub.xhtml#_idTextAnchor026): Developing Cloud-Native
    Applications with Kubernetes – A Developer''s Nightmare'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第2章*](B17385_02_Final_PD_ePub.xhtml#_idTextAnchor026)：使用Kubernetes开发云原生应用程序-开发者的噩梦'
- en: In the previous chapter, we covered the hardships that a developer faces while
    developing a container-native application. We also covered the new steps that
    were introduced to the development life cycle. We may have simplified things to
    explain the concepts, but we will look into each step in detail in this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了开发人员在开发容器原生应用程序时面临的困难。我们还介绍了开发生命周期中引入的新步骤。我们可能已经简化了解释概念，但在本章中我们将详细介绍每个步骤。
- en: This chapter will cover the problems that developers face while developing cloud-native
    applications with Kubernetes. We will cover how and why the overall development
    experience with Kubernetes is painful. We will also see why developers are not
    Kubernetes experts and that they are looking for simplified workflows while developing
    an application with Kubernetes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖开发人员在使用Kubernetes开发云原生应用程序时面临的问题。我们将介绍Kubernetes的整体开发体验为什么如此痛苦，以及为什么开发人员不是Kubernetes专家，他们在使用Kubernetes开发应用程序时寻求简化的工作流程。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Poor developer experience
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者体验不佳
- en: Developers want simplified workflows with Kubernetes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者希望简化Kubernetes的工作流程
- en: Developers are not Kubernetes experts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者不是Kubernetes专家
- en: By the end of this chapter, you will understand the common challenges developers
    face while developing cloud-native applications with Kubernetes. Later, in the
    next chapter, we will learn how to overcome these challenges by using Skaffold
    for your development workflow.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章的学习，您将了解开发人员在使用Kubernetes开发云原生应用程序时面临的常见挑战。随后，在下一章中，我们将学习如何通过使用Skaffold来克服这些挑战，以改善您的开发工作流程。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the examples in this chapter, you need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章中的示例，您需要以下内容：
- en: Eclipse ([https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/))
    or IntelliJ IDE ([https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/))
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse ([https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/))
    或 IntelliJ IDE ([https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/))
- en: Git ([https://git-scm.com/downloads](https://git-scm.com/downloads))
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git ([https://git-scm.com/downloads](https://git-scm.com/downloads))
- en: Spring Boot 2.5 ([https://start.spring.io](https://start.spring.io))
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Boot 2.5 ([https://start.spring.io](https://start.spring.io))
- en: minikube ([https://minikube.sigs.k8s.io/docs/](https://minikube.sigs.k8s.io/docs/))
    or Docker Desktop for macOS and Windows ([https://www.docker.com/products/dockerdesktop](https://www.docker.com/products/dockerdesktop))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: minikube ([https://minikube.sigs.k8s.io/docs/](https://minikube.sigs.k8s.io/docs/))
    或Docker Desktop for macOS和Windows ([https://www.docker.com/products/dockerdesktop](https://www.docker.com/products/dockerdesktop))
- en: OpenJDK 16 ([https://jdk.java.net/16/](https://jdk.java.net/16/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenJDK 16 ([https://jdk.java.net/16/](https://jdk.java.net/16/))
- en: You can download the code examples for this chapter from the GitHub repository
    at [https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/tree/main/Chapter02](https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/tree/main/Chapter02).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从GitHub存储库[https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/tree/main/Chapter02](https://github.com/PacktPublishing/Effortless-Cloud-Native-App-Development-Using-Skaffold/tree/main/Chapter02)下载本章的代码示例。
- en: Poor developer experience
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发者体验不佳
- en: Modern developers are looking for tools and technologies that give them an edge
    to deliver the software that meets the customers' expectations and keeps their
    organization competitive in today's fast-moving world. Enter Kubernetes! **Kubernetes**
    was open sourced in 2014, and since its inception, it has become the container
    orchestration platform of choice for numerous enterprises around the world. Kubernetes
    has dramatically simplified the jobs of operations folks, but we definitely cannot
    say the same thing about developers who are building and deploying applications
    to Kubernetes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现代开发人员正在寻找能够让他们在快节奏的今天世界中保持竞争力并交付符合客户期望的软件的工具和技术。进入Kubernetes！Kubernetes于2014年开源，自诞生以来，已成为全球众多企业选择的容器编排平台。Kubernetes极大地简化了运维人员的工作，但对于构建和部署应用程序到Kubernetes的开发人员来说，情况并非如此。
- en: We have covered this in detail in this chapter. According to a recent study,
    around 59 percent of enterprise organizations are running their production workload
    with Kubernetes. This is excellent for a technology that is just 5 years old.
    The main reason enterprises are adopting Kubernetes is to increase agility, expedite
    software delivery, and support digital transformation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中详细介绍了这一点。根据最近的一项研究，大约59%的企业组织正在使用Kubernetes运行其生产工作负载。对于一个只有5年历史的技术来说，这是非常出色的。企业采用Kubernetes的主要原因是为了增加敏捷性，加快软件交付，并支持数字化转型。
- en: Before going through the pain points of working with Kubernetes, let's take
    a real-world example to understand how Kubernetes can help organizations in their
    digital transformation journey. Let's take an example of an e-commerce website.
    On most days, the website does its job. The website takes advantage of microservices
    architecture and has multiple services that work in tandem to deliver a better
    user experience. However, due to an upcoming holiday, the IT team expects a surge
    in the usage of their website, and the team is worried that it may lead to an
    outage, as the underlying microservices may not be able to handle the load. But
    with Kubernetes, it is easy to scale out without much hassle. For example, you
    can use Kubernetes' autoscaling capabilities with its **horizontal Pod** **auto-scaler**
    (**HPA**). HPA automatically scales the number of Pods based on observed CPU utilization.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论使用Kubernetes的痛点之前，让我们以一个真实的例子来了解Kubernetes如何帮助组织进行数字化转型。让我们以一个电子商务网站为例。大多数时候，网站都能正常运行。该网站利用微服务架构，并拥有多个服务协同工作，以提供更好的用户体验。然而，由于即将到来的假期，IT团队预计网站的使用量会激增，团队担心这可能会导致停机，因为底层的微服务可能无法处理负载。但是有了Kubernetes，很容易进行扩展而不会带来太多麻烦。例如，您可以利用Kubernetes的自动缩放功能以及其水平Pod自动缩放器（HPA）。HPA根据观察到的CPU利用率自动调整Pod的数量。
- en: Furthermore, containers and Kubernetes certainly have changed the way we package,
    deploy, and run cloud-native applications at scale. After containerization, you
    can run your application anywhere, that is, on VMs, on physical machines, or the
    cloud. And with container orchestration tools such as Kubernetes, you can scale,
    deploy, and manage cloud-native applications more efficiently. It has reduced
    the downtime in production and made the job of the operations team much more comfortable.
    However, developer experience and practices have not evolved much since the inception
    of Kubernetes as compared to traditional applications. Let's understand cloud-native
    application development flow with an example.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，容器和Kubernetes确实改变了我们打包、部署和大规模运行云原生应用程序的方式。容器化后，您可以在任何地方运行应用程序，即在虚拟机、物理机或云上。并且借助Kubernetes等容器编排工具，您可以更有效地扩展、部署和管理云原生应用程序。它减少了生产中的停机时间，并使运维团队的工作更加轻松。然而，与传统应用程序相比，开发人员的体验和实践自Kubernetes问世以来并没有多大进步。让我们通过一个例子来了解云原生应用程序开发流程。
- en: Understanding the cloud-native application development workflow
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解云原生应用程序开发工作流程
- en: 'We will use the same *Hello-World Spring Boot Web MVC* application we created
    in [*Chapter 1*](B17385_01_Final_PD_ePub.xhtml#_idTextAnchor015), *Code, Build,
    Test, and Repeat – The Application Development Inner Loop*; however, we will containerize
    it and deploy it to Kubernetes this time. The idea is to go through the hardships
    that a developer goes through while developing cloud-native Spring Boot applications.
    Here are the steps we''ll be following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在[*第1章*](B17385_01_Final_PD_ePub.xhtml#_idTextAnchor015)中创建的相同的*Hello-World
    Spring Boot Web MVC*应用程序，*代码、构建、测试和重复 – 应用程序开发内部循环*；但是，这次我们将对其进行容器化并部署到Kubernetes。我们的想法是经历开发人员在开发云原生Spring
    Boot应用程序时所经历的困难。以下是我们将要遵循的步骤：
- en: We will be using **Docker Desktop** for macOS and Windows as it comes with Kubernetes
    support, and we will not have to download **minikube** separately for this example.
    However, if macOS is not something you work with, then you can install minikube
    ([https://v1-18.docs.kubernetes.io/docs/tasks/tools/install-minikube/#installing-minikube](https://v1-18.docs.kubernetes.io/docs/tasks/tools/install-minikube/#installing-minikube))
    for other OSes as well. Follow the steps to enable Kubernetes support with Docker
    Desktop for macOS and Windows.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用**Docker Desktop**作为macOS和Windows的工具，因为它支持Kubernetes，并且我们不必为此示例单独下载**minikube**。但是，如果您不使用macOS，那么您也可以为其他操作系统安装minikube
    ([https://v1-18.docs.kubernetes.io/docs/tasks/tools/install-minikube/#installing-minikube](https://v1-18.docs.kubernetes.io/docs/tasks/tools/install-minikube/#installing-minikube))。按照步骤在macOS和Windows上启用Docker
    Desktop的Kubernetes支持。
- en: Navigate to **Preferences** in the Docker menu bar. Then, on the **Kubernetes**
    tab, click on the **Enable Kubernetes** checkbox to start a single-node functional
    Kubernetes cluster. It will take some time to start the cluster. It is not mandatory,
    but you can also enable Kubernetes to be the default orchestrator for the `docker
    stack` command.![Figure 2.1 – Enabling Kubernetes
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Docker菜单栏中导航到**首选项**。然后，在**Kubernetes**选项卡上，单击**启用Kubernetes**复选框，以启动单节点功能性Kubernetes集群。启动集群需要一些时间。这不是强制性的，但您也可以将Kubernetes启用为`docker
    stack`命令的默认编排器。![图2.1 – 启用Kubernetes
- en: '](image/Figure_2.1_B17385.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_2.1_B17385.jpg)'
- en: Figure 2.1 – Enabling Kubernetes
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – 启用Kubernetes
- en: After it is enabled, you will see the following screen on your Docker Desktop
    menu bar. This confirms that the Kubernetes cluster is up and running:![Figure
    2.2 – Verifying the setup
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用后，您将在Docker Desktop菜单栏上看到以下屏幕。这证实了Kubernetes集群已经启动和运行：![图2.2 – 验证设置
- en: '](image/Figure_2.2_B17385.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_2.2_B17385.jpg)'
- en: Figure 2.2 – Verifying the setup
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 – 验证设置
- en: Next, make sure that the Kubernetes context is set to `docker-desktop` if you
    have multiple clusters or environments running locally:![Figure 2.3 – Context
    set to docker-desktop
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，请确保Kubernetes上下文设置为`docker-desktop`，如果您在本地运行多个集群或环境：![图2.3 – 上下文设置为docker-desktop
- en: '](image/Figure_2.3_B17385.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_2.3_B17385.jpg)'
- en: Figure 2.3 – Context set to docker-desktop
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.3 – 上下文设置为docker-desktop
- en: 'By the way, Docker Desktop comes with **kubectl** support; you don''t have
    to download it separately. kubectl is a command-line tool for Kubernetes, and
    you can use it to run commands against your cluster. On macOS, it''s generally
    available at path, `/usr/local/bin/kubectl`. For Windows, it is available at `C:\>Program
    Files\Docker\Docker\Resources\bin\kubectl.exe`. You may want to add it to your
    `PATH` variable. Let''s verify the setup with the following command:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 顺便说一句，Docker Desktop带有**kubectl**支持；您不必单独下载它。kubectl是Kubernetes的命令行工具，您可以使用它来针对您的集群运行命令。在macOS上，它通常位于路径`/usr/local/bin/kubectl`。对于Windows，它位于`C:\>Program
    Files\Docker\Docker\Resources\bin\kubectl.exe`。您可能希望将其添加到您的`PATH`变量中。让我们使用以下命令验证设置：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is the Dockerfile we have used for this example:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下是我们用于此示例的Dockerfile：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We have a very basic Dockerfile here. Let me just explain the instructions
    in brief:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里有一个非常基本的Dockerfile。让我简要解释一下指令：
- en: a. The `FROM` instruction specifies the base image for our Spring Boot application,
    which is OpenJDK 16.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: a. `FROM`指令指定了我们的Spring Boot应用程序的基础镜像，即OpenJDK 16。
- en: b. `COPY` is used to move files or directories from the host system to the filesystem
    inside the container. Here, we have copied the `.jar` files from the target directory
    to the root path inside the container.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: b. `COPY`用于将文件或目录从主机系统移动到容器内部的文件系统。在这里，我们将`.jar`文件从目标目录复制到容器内部的根路径。
- en: c. `ENTRYPOINT` works as a runtime executable for the container, which will
    start our application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: c. `ENTRYPOINT`作为容器的运行时可执行文件，将启动我们的应用程序。
- en: 'Now that we have the Dockerfile, next we need to create an executable `.jar`
    file. We will use the `mvn clean install` command to create an executable `.jar`
    file for our application. Let''s run the `docker build` command to create a container
    image. Here, we have set the name of our image as `helloworld`. The output of
    the `docker build` command will be the following:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了Dockerfile，接下来我们需要创建一个可执行的`.jar`文件。我们将使用`mvn clean install`命令为我们的应用程序创建一个可执行的`.jar`文件。让我们运行`docker
    build`命令来创建一个容器镜像。在这里，我们将我们的镜像命名为`helloworld`。`docker build`命令的输出将如下所示：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We have created an image for the application. Now we are ready to push the
    image to the DockerHub container registry with the `docker push` command, as follows:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经为应用程序创建了一个镜像。现在我们准备使用`docker push`命令将镜像推送到DockerHub容器注册表，如下所示：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The last part of this exercise is to create Kubernetes resources (Deployments
    and Services) to get our application up and running on Kubernetes. The declarative
    YAML file for both services and deployment is inside the `K8s` directory of the
    source code. Let''s create the Deployment resource first, which is responsible
    for creating and running a set of Pods dynamically:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个练习的最后一部分是创建Kubernetes资源（部署和服务），以便在Kubernetes上启动和运行我们的应用程序。服务和部署的声明性YAML文件位于源代码的`K8s`目录中。让我们首先创建部署资源，它负责动态创建和运行一组Pod：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let me clarify few things regarding the YAML file we have used to create the
    Kubernetes Deployment object:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我澄清一下我们用来创建Kubernetes部署对象的YAML文件的一些事情：
- en: a. `metadata.name` specifies the name of the Deployment object to be created.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: a. `metadata.name`指定要创建的部署对象的名称。
- en: b. The `spec.replicas` field indicates that the Kubernetes Deployment object
    will create a single replica.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: b. `spec.replicas`字段表示Kubernetes部署对象将创建一个副本。
- en: c. The `template.spec` field indicates that the Pod will run a single container
    named `helloworld` that runs the DockerHub image of our application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: c. `template.spec`字段表示Pod将运行一个名为`helloworld`的单个容器，该容器运行我们应用程序的DockerHub镜像。
- en: 'Here is the `kubectl` command for creating the Deployment object:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建Deployment对象的`kubectl`命令：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Services provide a single DNS name for a set of Pods and handle load balancing
    among them. Let''s create the Service resource so that the application can be
    accessed from outside the cluster:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务为一组Pod提供单一的DNS名称，并在它们之间进行负载平衡。让我们创建Service资源，以便可以从集群外部访问应用程序：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s talk about the YAML file we have used to create the Kubernetes Service
    object:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们谈谈我们用来创建Kubernetes Service对象的YAML文件：
- en: a. `metadata.name` specifies the name of the Service object to be created.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: a. `metadata.name`指定要创建的Service对象的名称。
- en: b. `spec.selectors` allows Kubernetes to group Pods with the name `helloworld`
    and forward the request to them.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: b. `spec.selectors`允许Kubernetes将名为`helloworld`的Pod分组，并将请求转发给它们。
- en: 'c. `type: Nodeport` creates a static IP for each node so that we can access
    the Service from outside.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 'c. `type: Nodeport`为每个节点创建一个静态IP，以便我们可以从外部访问Service。'
- en: d. `targetPort` is the container port.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: d. `targetPort`是容器端口。
- en: e. `port` is the port exposed internally in the cluster.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: e. `port`是在集群内部暴露的端口。
- en: 'The following is the `kubectl` command for creating the Service object:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建Service对象的`kubectl`命令：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let's now verify whether we have a Pod running:![Figure 2.4 – Pod running
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们验证一下我们是否有一个正在运行的Pod：![图2.4 - Pod运行
- en: '](image/Figure_2.4_B17385.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_2.4_B17385.jpg)'
- en: Figure 2.4 – Pod running
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4 - Pod运行
- en: 'As you can see, we now have our application up and running on Kubernetes. Let''s
    verify this:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们现在已经在Kubernetes上运行我们的应用程序。让我们来验证一下：
- en: '![Figure 2.5 – REST endpoint response'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.5 - REST端点响应'
- en: '](image/Figure_2.5_B17385.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_2.5_B17385.jpg)'
- en: Figure 2.5 – REST endpoint response
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5 - REST端点响应
- en: That's a lot of steps and too many keystrokes even if your change is small and
    you don't even know whether it will work or not. Now imagine having to do this
    every time you push a change! This workflow could be even more complicated if
    you have multiple microservices talking to each other. You have the option to
    not deploy to Kubernetes for your local development, but rely instead on your
    CI/CD process. Or maybe you are using something like `docker-compose` or testing
    in isolation with Docker. Just imagine having multiple microservices that you
    need to run this way.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是很多步骤，即使您的更改很小，也需要太多的按键，而且您甚至不知道它是否有效。现在想象一下，每次您推送更改时都需要这样做！如果您有多个微服务相互通信，这个工作流程可能会更加复杂。您可以选择不在本地开发时部署到Kubernetes，而是依赖于CI/CD流程。或者您可能正在使用类似于`docker-compose`或者使用Docker进行隔离测试。想象一下，您需要以这种方式运行多个微服务。
- en: To test everything, realistically, you need your development environment to
    mirror your deployment environment to test your microservices' dependencies. This
    is the downside of container-native development, as the developer spends less
    time coding and more time worrying about the configuration, setting up the environment,
    and waiting for the deployment to be completed. In one of the chapters, later
    in the book, we will cover how we can build and deploy multiple microservices
    with Skaffold.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要真实地测试一切，您需要使开发环境与部署环境相匹配，以测试您的微服务依赖关系。这是容器本地开发的缺点，因为开发人员花费更少的时间编码，而更多的时间担心配置、设置环境和等待部署完成。在本书的后面章节中，我们将介绍如何使用Skaffold构建和部署多个微服务。
- en: Due to the inherent complexity that comes with Kubernetes, developers are looking
    for simple workflows. Let's discuss this in the next section.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Kubernetes带来的固有复杂性，开发人员正在寻找简单的工作流程。让我们在下一节讨论这个问题。
- en: Developers want simplified workflows with Kubernetes
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发人员希望简化Kubernetes的工作流程。
- en: In the last chapter, we discussed the steps that a developer goes through while
    developing traditional Spring Boot applications in the inner development loop.
    We also discussed how easy it is to automate the whole flow with tools such as
    *spring-dev-tools*. Once a developer is confident about the changes, they can
    save them, and changes are deployed automatically.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了开发人员在内部开发循环中开发传统的Spring Boot应用程序时经历的步骤。我们还讨论了如何使用*spring-dev-tools*等工具轻松自动化整个流程。一旦开发人员对更改感到满意，他们可以保存更改，更改将自动部署。
- en: Developers developing cloud-native applications are looking for a similar workflow
    where they can save their changes. With some magic in the background, the application
    should be deployed to local or remote clusters of their choice. Moreover, a developer
    who has previously worked on traditional monolithic applications would expect
    a similar workflow when they switch to developing cloud-native applications. From
    a developer's perspective, the expectation is that additional steps for cloud-native
    application development should be suppressed with a single command or click.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 开发云原生应用程序的开发人员正在寻找类似的工作流程，他们可以保存更改。在后台进行一些魔术操作后，应用程序应该部署到他们选择的本地或远程集群。此外，之前曾在传统单片应用程序上工作过的开发人员在转向开发云原生应用程序时会期望类似的工作流程。从开发人员的角度来看，期望是云原生应用程序开发的额外步骤应该可以通过单个命令或点击来抑制。
- en: 'A developer expects a simplified workflow with Kubernetes, as shown in the
    following diagram:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员期望在Kubernetes中有简化的工作流程，如下图所示：
- en: '![Figure 2.6 – Ctrl + S workflow with Kubernetes'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.6 - 使用Kubernetes的Ctrl + S工作流程'
- en: '](image/Figure_2.6_B17385.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](image/Figure_2.6_B17385.jpg)'
- en: Figure 2.6 – Ctrl + S workflow with Kubernetes
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.6 - 使用Kubernetes的Ctrl + S工作流程
- en: 'To address these problems, enterprises need to provide developers with tools
    that can abstract general Kubernetes complexity. To be specific, developers are
    looking for a platform or tools that can fulfill the following requirements:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为解决这些问题，企业需要为开发人员提供可以抽象一般Kubernetes复杂性的工具。具体而言，开发人员正在寻找可以满足以下要求的平台或工具：
- en: Developers should be able to connect with Kubernetes without going through the
    bureaucracy of getting approval from support managers.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员应该能够在不经过支持经理批准的官僚主义的情况下连接到Kubernetes。
- en: Developers should not be wasting their time and energy configuring the environment.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员不应该浪费时间和精力来配置环境。
- en: Developers should be able to start quickly while working with Kubernetes.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员在使用Kubernetes时应该能够快速开始工作。
- en: Developers can quickly deploy the changes to the Kubernetes cluster with a single
    command.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员可以通过单个命令快速部署更改到Kubernetes集群。
- en: Developers should be debugging cloud-native applications during development,
    such as how they are used to debug traditional applications.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员应该在开发过程中调试云原生应用程序，就像他们习惯于调试传统应用程序一样。
- en: Developers should not be tied to a tool for building and deploying the image.
    The good news is that many enterprises have realized how painful the developer
    experience is with Kubernetes and are coming up with their solutions to improve
    it. Later in this book, we will cover a tool, Skaffold, that simplifies developers'
    inner development loops while working with cloud-native applications. Skaffold
    implements the *Ctrl* + *Save* workflow and automates the build and deploy process.
    Skaffold also gives the developer the freedom to pick a tool for the build (Docker/Jib/Buildpacks)
    and deployment (kubectl/Helm/kustomize).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员不应该被绑定在一个用于构建和部署图像的工具上。好消息是，许多企业已经意识到开发人员在Kubernetes上的体验有多痛苦，并正在提出他们自己的解决方案来改进它。在本书的后面，我们将介绍一个名为Skaffold的工具，它简化了开发人员在处理云原生应用程序时的内部开发循环。Skaffold实现了*Ctrl*
    + *Save*的工作流，并自动化了构建和部署过程。Skaffold还赋予了开发人员选择构建工具（Docker/Jib/Buildpacks）和部署工具（kubectl/Helm/kustomize）的自由。
- en: It would be a good skill set to have, but do we really want developers to be
    Kubernetes experts? Let's discuss this in the next section.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这样的技能集会很不错，但我们真的希望开发人员成为Kubernetes专家吗？让我们在下一节讨论这个问题。
- en: Developers are not Kubernetes experts
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发人员不是Kubernetes专家
- en: 'Kubernetes was originally developed for operations folks and not for developers.
    There are many reasons why a developer would not be interested in knowing Kubernetes
    for their day jobs. One valid reason is that a developer is more interested in
    solving the business problem and adding features to the products they are developing,
    and they are not bothered about the target environment, that is, where they will
    deploy the application. And, let''s be honest, Kubernetes is complex, which makes
    it hard not only for the beginner but also for experienced folks. I saw this joke,
    probably on Twitter, on how hard it is to understand Kubernetes: "*One time I
    tried to explain Kubernetes to someone. Then we both didn''t understand it*."'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes最初是为运维人员开发的，而不是为开发人员开发的。有许多原因，开发人员可能对了解Kubernetes并不感兴趣。一个合理的理由是，开发人员更感兴趣的是解决业务问题，为他们正在开发的产品添加功能，而不关心目标环境，也就是他们将部署应用的地方。而且，说实话，Kubernetes很复杂，这不仅对初学者而言很难，对经验丰富的人也很难。我在哪里看到过这个笑话，可能是在Twitter上，关于理解Kubernetes有多难：“*有一次我试图向某人解释Kubernetes。然后我们俩都没搞懂*。”
- en: It requires a different level skill set than the everyday tasks of a developer.
    Because of its complexity, it usually takes a very long time for the average developer
    to master Kubernetes.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要一种与开发人员日常任务不同的技能水平。由于其复杂性，通常需要很长时间才能让普通开发人员掌握Kubernetes。
- en: 'More often than not, a developer working in an enterprise environment will
    be working on the following tasks:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业环境中工作的开发人员往往会处理以下任务：
- en: Being involved in design discussions
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参与设计讨论
- en: Adding new features for the product
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为产品添加新功能
- en: Writing unit test cases
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写单元测试用例
- en: Improving code quality
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高代码质量
- en: Working on improving the performance of the application
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 致力于改进应用程序的性能
- en: Fixing bugs
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复错误
- en: Refactoring code
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重构代码
- en: Developers just want to code rather than worry about how and where their applications
    will be deployed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员只想编码，而不想担心他们的应用程序将如何部署在哪里。
- en: The bottom line is that we need to keep telling ourselves that Kubernetes is
    not an easy tool for developers. Moreover, developers are more interested in creating
    applications, working with tools that can handle the build, and deploying boilerplate
    for them.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是，我们需要不断告诉自己，Kubernetes对开发人员来说并不是一个容易的工具。此外，开发人员更感兴趣的是创建应用程序，使用可以处理构建并为其部署样板的工具。
- en: Summary
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has covered the hardships that a developer has to go through while
    developing cloud-native applications with Kubernetes. We started the chapter by
    describing the cloud-native application development workflow for an application
    deployed to Kubernetes. We covered the additional steps with some coding examples
    that a developer has to go through while developing cloud-native applications.
    Then we explained that developers are looking for a simplified workflow for easy
    development with Kubernetes. Later in the chapter, we showed that developers are
    not Kubernetes experts, and they should be equipped with tools such as Skaffold
    to improve their development experience with Kubernetes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了开发人员在使用Kubernetes开发云原生应用程序时必须经历的困难。我们首先描述了部署到Kubernetes的应用程序的云原生应用程序开发工作流程。我们通过一些编码示例介绍了开发人员在开发云原生应用程序时必须经历的额外步骤。然后我们解释了开发人员正在寻找一个简化的工作流程，以便在Kubernetes上轻松开发。随后在本章中，我们展示了开发人员并不是Kubernetes专家，他们应该配备诸如Skaffold之类的工具，以改善他们在Kubernetes上的开发体验。
- en: In this chapter, the main goal was to give you a walk-through of developers'
    problems while developing container-native applications. After reading this, you
    should be able to relate to these issues, and at the same time, I have given you
    hints about how Skaffold can help solve these problems.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，主要目标是为您介绍开发人员在开发容器本地应用程序时遇到的问题。阅读完本章后，您应该能够理解这些问题，同时我也给出了Skaffold如何帮助解决这些问题的提示。
- en: In the next chapter, we will quickly cover Skaffold with some coding examples
    to better understand these hints.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将快速介绍Skaffold，并通过一些编码示例来更好地理解这些提示。
- en: Further reading
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读。
- en: Learn more about Docker and Kubernetes at [https://www.packtpub.com/product/kubernetes-and-docker-an-enterprise-guide/9781839213403](https://www.packtpub.com/product/kubernetes-and-docker-an-enterprise-guide/9781839213403).
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解有关Docker和Kubernetes的更多信息，请访问[https://www.packtpub.com/product/kubernetes-and-docker-an-enterprise-guide/9781839213403](https://www.packtpub.com/product/kubernetes-and-docker-an-enterprise-guide/9781839213403)。
- en: More on going cloud-native with Kubernetes can be discovered at [https://www.packtpub.com/product/cloud-native-with-kubernetes/9781838823078](https://www.packtpub.com/product/cloud-native-with-kubernetes/9781838823078).
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关使用Kubernetes进行云原生开发的更多信息，请访问[https://www.packtpub.com/product/cloud-native-with-kubernetes/9781838823078](https://www.packtpub.com/product/cloud-native-with-kubernetes/9781838823078)。
