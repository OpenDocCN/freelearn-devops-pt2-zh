- en: Installation and Basics of Travis CI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI的安装和基础知识
- en: This chapter will help you get set up with Travis **Continuous Integration**
    (**CI**). We will explain the concept of app-embedded configuration for hosted
    solutions like Travis CI. We will also explain what a YAML configuration is and
    how to use it. We will look at the basics of using Travis CI and take some time
    to explore some of the differences between Travis CI and Jenkins, as well as Travis
    CI concepts. We will go over the different part of Travis CI including the syntax
    and the build life cycle, and look at real-world examples.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助您设置Travis **持续集成**（**CI**）。我们将解释托管解决方案（如Travis CI）的应用嵌入式配置的概念。我们还将解释什么是YAML配置以及如何使用它。我们将研究使用Travis
    CI的基础知识，并花一些时间探索Travis CI和Jenkins之间的一些区别，以及Travis CI的概念。我们将介绍Travis CI的不同部分，包括语法和构建生命周期，并查看一些实际示例。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Travis CI introduction
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis CI介绍
- en: Travis CI prerequisites
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis CI先决条件
- en: Adding a simple Travis CI YAML configuration script
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个简单的Travis CI YAML配置脚本
- en: Travis CI script breakdown
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Travis CI脚本解析
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter will require some basic programming skills and many of the CI concepts
    we have discussed in the earlier chapters will be utilized in this chapter. It
    will be helpful if you try to create a GitHub account and Travis CI account. You
    can follow the steps in the *Travis CI prerequisites* section. Some of the examples
    use Docker, which is a container technology, so it would be helpful if you have
    some understanding about containers and Docker. You will learn about the YAML
    syntax in this chapter. There are some commands in the chapter that use command-line
    applications, so it would be helpful to be familiar with command-line applications
    or CLIs.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将需要一些基本的编程技能，并且我们在前几章讨论过的许多CI概念将在本章中得到应用。如果您尝试创建一个GitHub账户和Travis CI账户将会很有帮助。您可以按照*Travis
    CI先决条件*部分中的步骤进行操作。一些示例使用了Docker，这是一种容器技术，因此如果您对容器和Docker有一些了解将会很有帮助。您将在本章学习有关YAML语法的知识。本章中有一些命令使用了命令行应用程序，因此熟悉命令行应用程序或CLI将会很有帮助。
- en: Travis CI introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI介绍
- en: Travis CI is a hosted and automated solution for CI builds. Travis CI uses an
    in-application configuration file that uses YAML ([http://yaml.org/spec/1.2/spec.html](http://yaml.org/spec/1.2/spec.html))
    syntax, which we will go over in more detail later in this chapter. Since Travis
    CI is hosted in the cloud, it therefore has the advantage that it can quickly
    be used in other environments and different operating systems without us worrying
    about setup and installation. This means that Travis CI setup is much faster than
    Jenkins.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI是一个托管和自动化的CI构建解决方案。Travis CI使用一个应用内配置文件，使用了YAML（[http://yaml.org/spec/1.2/spec.html](http://yaml.org/spec/1.2/spec.html)）语法，我们将在本章后面更详细地讨论。由于Travis
    CI托管在云端，因此它具有可以快速在其他环境和不同操作系统中使用的优势，而无需担心设置和安装。这意味着Travis CI的设置比Jenkins要快得多。
- en: Comparing Travis CI and Jenkins
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较Travis CI和Jenkins
- en: Jenkins is a self-contained and open source automation server that is customizable
    and requires setup and configuration at the organization level. Remember, in the
    Jenkins CI chapters we spent some time installing Jenkins on Windows, Linux, and
    macOS. We also had the ability to configure Jenkins however we wanted. While this
    is great for software companies with dedicated teams in operations, DevOps and
    more, it is not as great for open source projects where often lone developers
    are setting up environments for their personal projects.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins是一个自包含的开源自动化服务器，可以在组织级别进行定制和配置。请记住，在Jenkins CI章节中，我们花了一些时间在Windows、Linux和macOS上安装Jenkins。我们还有能力按照自己的意愿配置Jenkins。虽然这对于在运营、DevOps等方面有专门团队的软件公司来说非常好，但对于经常是孤独开发者为个人项目设置环境的开源项目来说就不那么好了。
- en: Travis CI was designed around the principle of open source development and for
    ease of use. Travis CI can be set up within minutes of creating a project in the
    GitHub. Although Travis CI is not as customizable as Jenkins CI in this respect,
    it has the distinct advantage of fast setup and use. Travis CI uses an in-application
    configuration file to accomplish this, however must be used with GitHub ([https://github.com/](https://github.com/))
    development platform at the moment, though perhaps it may be extended to other
    platforms such as Bitbucket ([https://bitbucket.org/dashboard/overview](https://bitbucket.org/dashboard/overview)) in
    the future, but this is still an open discussion.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI是围绕开源开发原则和易用性而设计的。在GitHub中创建项目后，可以在几分钟内设置好Travis CI。尽管在这方面Travis CI不像Jenkins
    CI那样可定制，但它具有快速设置和使用的明显优势。Travis CI使用一个应用内配置文件来实现这一点，但目前必须与GitHub（[https://github.com/](https://github.com/)）开发平台一起使用，尽管也许将来可能会扩展到其他平台，如Bitbucket（[https://bitbucket.org/dashboard/overview](https://bitbucket.org/dashboard/overview)），但这仍然是一个开放的讨论。
- en: Travis CI prerequisites
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI先决条件
- en: In order to get started with Travis CI, you will need to create a GitHub account,
    which you can do at GitHub ([https://github.com/](https://github.com/)).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Travis CI，您需要创建一个GitHub账户，您可以在GitHub（[https://github.com/](https://github.com/)）上进行操作。
- en: Creating a GitHub account
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建GitHub账户
- en: 'Look at the screenshot—all that you have to do is provide a Username, Email,
    and Password, then click the Sign up for GitHub button:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下截图——您所需要做的就是提供用户名、电子邮件和密码，然后点击“注册GitHub”按钮：
- en: '![](assets/2f1afcb4-93bd-44bb-960e-5577a72e5deb.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2f1afcb4-93bd-44bb-960e-5577a72e5deb.png)'
- en: 'For the purposes of this chapter, we will create a GitHub username called `packtci`.
    Once you click the Sign up for GitHub button, you will be taken to the following
    page:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本章的目的，我们将创建一个名为`packtci`的GitHub用户名。一旦您点击了“注册GitHub”按钮，您将被带到以下页面：
- en: '![](assets/22245307-e687-46ee-bd4b-b84a6dff3819.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/22245307-e687-46ee-bd4b-b84a6dff3819.png)'
- en: 'Notice here that you can create an unlimited amount of public repositories
    in GitHub for free, while private repositories require a monthly subscription
    fee. Once you click the Continue button you will be redirected to the following
    page:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以在GitHub中免费创建无限数量的公共存储库，而私有存储库需要支付月度订阅费。一旦单击“继续”按钮，您将被重定向到以下页面：
- en: '![](assets/4dacd282-1022-4fb5-8e8b-ba9bb57a9039.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4dacd282-1022-4fb5-8e8b-ba9bb57a9039.png)'
- en: 'You can skip all of these options if you want by scrolling to the bottom of
    the page and clicking the Skip this step button. Once you click either the Submit
    button or the Skip this step button you will be taken to this page:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您愿意，您可以通过滚动到页面底部并单击“跳过此步骤”按钮来跳过所有这些选项。一旦单击“提交”按钮或“跳过此步骤”按钮，您将被带到这个页面：
- en: '![](assets/dd267de5-da31-43e8-802c-ca1b5df6fa0f.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/dd267de5-da31-43e8-802c-ca1b5df6fa0f.png)'
- en: 'You should a receive an email from GitHub; look at the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该收到来自GitHub的一封电子邮件；请查看以下截图：
- en: '![](assets/d1f45090-d979-4052-919e-b10bbc0ceacc.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d1f45090-d979-4052-919e-b10bbc0ceacc.png)'
- en: You will need to click the link in order to verify your account in GitHub and
    then you should be all set up with your GitHub account.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要单击该链接以验证您在GitHub中的帐户，然后您应该已经设置好了您的GitHub帐户。
- en: Creating a Travis CI account
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Travis CI帐户
- en: 'You will need to create a Travis CI account in order to get started with Travis
    CI. You will need to login with your GitHub login credentials. In the screenshot
    here, notice that you can click the Sign Up button or the Sign in with GitHub
    button:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要创建一个Travis CI帐户才能开始使用Travis CI。您需要使用您的GitHub登录凭据登录。在这里的截图中，请注意您可以单击“注册”按钮或“使用GitHub登录”按钮：
- en: '![](assets/ee84c5fa-9fc5-4e8d-8cc8-24f887892133.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ee84c5fa-9fc5-4e8d-8cc8-24f887892133.png)'
- en: 'For the purposes of this chapter, I clicked the Sign in with GitHub button
    and then entered my login credentials for the GitHub account that I created with
    the username `packtci`. Once you enter your GitHub credentials, you will be redirected
    to the following page:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我单击了“使用GitHub登录”按钮，然后输入了我在GitHub上创建的用户名为`packtci`的GitHub帐户的登录凭据。一旦输入您的GitHub凭据，您将被重定向到以下页面：
- en: '![](assets/b0677cb6-f381-43a8-a54d-2e535854b6fb.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b0677cb6-f381-43a8-a54d-2e535854b6fb.png)'
- en: 'You will need to click the Authorize travis-ci button in order to finalize
    Travis CI setup. Once you click the Authorize travis-ci button, you will be redirected
    to the following page once Travis CI finishes the final setup steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要单击“授权travis-ci”按钮以完成Travis CI设置。一旦单击“授权travis-ci”按钮，Travis CI完成最终设置步骤后，您将被重定向到以下页面：
- en: '![](assets/6f7f8089-3902-47c4-ad1d-38de841226af.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6f7f8089-3902-47c4-ad1d-38de841226af.png)'
- en: Notice here that we have an API token for Travis CI which we will use utilize
    at a later time. We don't have any GitHub projects in this new account so none
    are shown. For the purposes of this chapter, I will create a GitHub project that
    runs some basic tests.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在Travis CI中有一个API令牌，我们将在以后使用。在这个新帐户中我们没有任何GitHub项目，所以没有显示。在本章中，我将创建一个运行一些基本测试的GitHub项目。
- en: Adding an SSH Key to your new GitHub Account
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向您的新GitHub帐户添加SSH密钥
- en: 'In order to create a new GitHub repository, you will need add your SSH keys
    into your user account. If you don''t have any SSH keys in your system they can
    be created with the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个新的GitHub存储库，您需要将您的SSH密钥添加到您的用户帐户中。如果您的系统中没有任何SSH密钥，可以使用以下命令创建：
- en: '![](assets/1123a8dc-d7b3-45ac-a896-9a184e61d44a.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1123a8dc-d7b3-45ac-a896-9a184e61d44a.png)'
- en: Notice here that I provided an email address and specified a type of RSA which
    is a type of encryption algorithm. Once you run this command, it will create a
    public and private key on your system.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我提供了一个电子邮件地址并指定了一种RSA类型的加密算法。一旦运行此命令，它将在您的系统上创建一个公钥和私钥。
- en: 'Once you have created SSH keys you simply need to upload the public key into
    GitHub. You need to copy the contents of the file; if you are using macOS you
    can run the following command to copy it to your system clipboard:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您创建了SSH密钥，您只需要将公钥上传到GitHub。您需要复制文件的内容；如果您使用macOS，您可以运行以下命令将其复制到系统剪贴板：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will need to go into the Settings page in GitHub:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要进入GitHub的设置页面：
- en: '![](assets/a4d92b4c-4b96-4a2a-946a-cc779c256134.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a4d92b4c-4b96-4a2a-946a-cc779c256134.png)'
- en: 'Then you will need to click the following button in the Settings page:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后您需要在设置页面中单击以下按钮：
- en: '![](assets/697d22f8-6004-48b9-b5c8-a8717413a865.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/697d22f8-6004-48b9-b5c8-a8717413a865.png)'
- en: 'Next you will need to click the New SSH key button and then provide a name
    and paste in the contents of your SSH key. In the following screenshot, I provided
    a name of `Example SSH Key` and then pasted in the contents of my public key:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要单击“新SSH密钥”按钮，然后提供一个名称并粘贴您的SSH密钥的内容。在下面的截图中，我提供了一个名为`示例SSH密钥`的名称，然后粘贴了我的公钥的内容：
- en: '![](assets/a57c99fe-6c96-4a3f-8149-548d6d46e159.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a57c99fe-6c96-4a3f-8149-548d6d46e159.png)'
- en: You just need to click the **Add SSH key** button and then you are ready to
    commit changes to any of the repositories that you own in GitHub.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需要单击“添加SSH密钥”按钮，然后您就可以准备好向您在GitHub中拥有的任何存储库提交更改。
- en: Adding a simple Travis CI YAML configuration script
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个简单的Travis CI YAML配置脚本
- en: I created a sample GitHub repository that you can see at functional summer at
    Github ([https://github.com/packtci/functional-summer](https://github.com/packtci/functional-summer)).
    This repository is a Node.js project that has a `package.json` script, a file
    called `summer.js` and a test file called `summer_test.js`. We will add configuration
    for Travis CI in a file called `.travis.yml` at the root of the repository. This
    configuration script will do a couple of things. First, it will notify Travis
    CI that we are running a Node.js project and then it will install the dependencies
    for the project, and last it will run the tests specified in the CI build.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个示例GitHub存储库，您可以在Github上的functional summer中看到（[https://github.com/packtci/functional-summer](https://github.com/packtci/functional-summer)）。该存储库是一个Node.js项目，其中有一个`package.json`脚本，一个名为`summer.js`的文件和一个名为`summer_test.js`的测试文件。我们将在存储库的根目录中的名为`.travis.yml`的文件中为Travis
    CI添加配置。此配置脚本将执行几件事。首先，它将通知Travis CI我们正在运行一个Node.js项目，然后它将安装项目的依赖项，最后将运行CI构建中指定的测试。
- en: Travis CI YML script contents
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI YML脚本内容
- en: 'We will first create a file called `.travis.yml` at the root of the repository
    and then copy the following contents into this file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在存储库的根目录创建一个名为`.travis.yml`的文件，然后将以下内容复制到此文件中：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will go into much more detail about each entry of this YML script but essentially
    what we are saying to Travis CI is that this a Node.js project and we want to
    Travis CI to use node version 6.14.1 in the CI build, then install all the dependencies
    required for the project using the **npm package manager** and then finally to
    run all of the tests using the `npm test script` command. I will commit this change
    into the `functional-summer` repository and then we will see how to toggle on
    Travis CI for this project.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更详细地讨论YML脚本的每个条目，但基本上我们对Travis CI说的是这是一个Node.js项目，我们希望Travis CI在CI构建中使用node版本6.14.1，然后使用npm软件包管理器安装项目所需的所有依赖项，最后使用`npm
    test`命令运行所有测试。我将提交此更改到`functional-summer`存储库，然后我们将看到如何为该项目切换Travis CI。
- en: Adding a Github repository into your Travis CI account
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将GitHub存储库添加到Travis CI帐户
- en: 'The first step is that you must go to [https://travis-ci.org/](https://travis-ci.org/) and
    then provide your login credentials for your GitHub account. Then go to your profile
    page by clicking your avatar in the upper-right corner of the screen, which looks
    like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是您必须转到[https://travis-ci.org/](https://travis-ci.org/)，然后提供GitHub帐户的登录凭据。然后点击屏幕右上角的头像，转到您的个人资料页面，看起来像这样：
- en: '![](assets/44783a25-4996-4476-8430-bc3281a9a27b.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/44783a25-4996-4476-8430-bc3281a9a27b.png)'
- en: 'Next I have added a screenshot detailing the steps to add a new repository
    into Travis CI:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我添加了一张截图，详细说明了将新存储库添加到Travis CI的步骤：
- en: '![](assets/5ff98bdd-ac37-4c73-82cd-c8edca41d80c.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5ff98bdd-ac37-4c73-82cd-c8edca41d80c.png)'
- en: Notice that in the screenshot I added a text block saying that the first step
    is to click the Sync account button which is necessary so that Travis CI will
    see any new repositories that you have added into your GitHub account. Once Travis
    CI has synced your account then should be able to see your repository in your
    account. Depending on how many projects you already have, you may need to filter
    by your repository name to find your project. The next step is to toggle the slider
    with your repository name, as the screenshot depicts.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在截图中，我添加了一个文本块，说第一步是点击“同步帐户”按钮，这是必要的，这样Travis CI才能看到您已添加到GitHub帐户中的任何新存储库。一旦Travis
    CI同步了您的帐户，您就应该能够在您的帐户中看到您的存储库。根据您已经拥有多少项目，您可能需要按存储库名称筛选以找到您的项目。下一步是切换带有您的存储库名称的滑块，就像截图中所示的那样。
- en: 'In the following screenshot, we have toggled on the `functional-summer` repository
    on the Travis UI now and now we can simply click the row to go into this newly
    added Travis CI build job:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，我们已经在Travis UI上切换了`functional-summer`存储库，现在我们只需点击行即可进入这个新添加的Travis CI构建作业：
- en: '![](assets/fd73a097-7339-488b-b014-136d97e27cb4.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fd73a097-7339-488b-b014-136d97e27cb4.png)'
- en: 'Once you click the row you be redirected to the following page in Travis CI:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您点击行，您将被重定向到Travis CI中的以下页面：
- en: '![](assets/a9044c0d-4c62-4113-9d15-4392e473a869.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a9044c0d-4c62-4113-9d15-4392e473a869.png)'
- en: 'We do not have any builds that have been triggered yet but Travis CI has some
    default settings that are set. If you commit changes onto any pushed branches
    or you open a pull request in GitHub, Travis CI will kick off a build. Let us
    commit a minor change to the `functional-summer` repository which will trigger
    a build in Travis CI. If you click the Build History tab you will notice that
    a build has been created with a Git commit change:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有触发任何构建，但Travis CI有一些默认设置。如果您将更改提交到任何推送的分支，或者在GitHub上打开拉取请求，Travis CI将启动构建。让我们对`functional-summer`存储库进行一些微小的更改，这将触发Travis
    CI中的构建。如果您点击“构建历史”选项卡，您会注意到已创建了一个带有Git提交更改的构建：
- en: '![](assets/96af8a43-03ae-4cdb-99f6-513715a7682a.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/96af8a43-03ae-4cdb-99f6-513715a7682a.png)'
- en: Travis CI job log
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI作业日志
- en: 'You can click the build job item on the left of the Travis CI screen which
    looks like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以单击Travis CI屏幕左侧的构建作业项目，看起来像这样：
- en: '![](assets/4cc49956-3e3c-4836-843f-18aed7eb12e2.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/4cc49956-3e3c-4836-843f-18aed7eb12e2.png)'
- en: 'Alternatively, you can click the Current tab to see the currently executing
    job for the configured repository. In order to see the job log, you need to scroll
    down to the Job Log tab and see the running commands in the Travis CI build, which
    for the `functional-summer` repository look like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以单击“当前”选项卡，以查看已配置存储库的当前执行作业。为了查看作业日志，您需要滚动到“作业日志”选项卡，并查看Travis CI构建中的运行命令，对于`functional-summer`存储库，看起来像这样：
- en: '![](assets/7cce8c59-bf43-4885-8227-e0b545996c84.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7cce8c59-bf43-4885-8227-e0b545996c84.png)'
- en: 'Remember that in the `.travis.yml` script that we added to GitHub we specified
    four things:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在我们添加到GitHub的`.travis.yml`脚本中，我们指定了四件事：
- en: At the top of the `.yml` script we specified a language of Node.js
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`.yml`脚本的顶部，我们指定了Node.js的语言
- en: We specified version 6.14.1 of Node.js
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们指定了Node.js的版本6.14.1
- en: We ran `npm install` command to install all the dependencies for a project
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们运行了`npm install`命令来安装项目的所有依赖项
- en: Finally, we ran `npm test` command
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们运行了`npm test`命令
- en: You can confirm that these steps were run in the Job Log. Notice that in the
    previous screenshot, there are right arrow links that expand into further details
    on each command in the CI build.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在作业日志中确认这些步骤是否已运行。请注意，在上一张截图中，有右箭头链接，展开以获取CI构建中每个命令的更多详细信息。
- en: Travis CI script breakdown
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI脚本分解
- en: Now that we have gone over YAML syntax, we can explain in more detail the various
    parts of the Travis CI script.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了YAML语法，我们可以更详细地解释Travis CI脚本的各个部分。
- en: Select a programming language
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择一种编程语言
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this block of the `.travis.yml` script we add the programming language that
    we will be using in the continuous integration build. This is usually the first
    entry in the `.travis.yml` script that you add.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在`.travis.yml`脚本的这一部分中，我们添加了我们将在持续集成构建中使用的编程语言。这通常是您添加到`.travis.yml`脚本中的第一个条目。
- en: 'Travis CI supports many programming languages such as:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI支持许多编程语言，例如：
- en: C
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C
- en: C++
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++
- en: JavaScript with Node.js
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Node.js的JavaScript
- en: Elixir
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Elixir
- en: Go
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go
- en: Haskell
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Haskell
- en: Ruby
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ruby
- en: You can look at languages ([https://docs.travis-ci.com/user/languages](https://docs.travis-ci.com/user/languages))
    in the Travis CI docs for a complete list of supported programming languages.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以查看Travis CI文档中的语言([https://docs.travis-ci.com/user/languages](https://docs.travis-ci.com/user/languages))，以获取支持的编程语言的完整列表。
- en: Selecting infrastructure
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择基础设施
- en: You can set a more customized environment in Travis CI by using the `sudo` and
    `dist` fields in the YML script.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在YML脚本中使用`sudo`和`dist`字段来设置Travis CI中更自定义的环境。
- en: Virtual image with Ubuntu Precise (12.04) infrastructure
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有Ubuntu Precise (12.04)基础设施的虚拟镜像
- en: 'You can use Ubuntu Precise infrastructure by using the following entries in
    the Travis YML script:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Travis YML脚本中使用以下条目来使用Ubuntu Precise基础设施：
- en: '[PRE3]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Default infrastructure
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认基础设施
- en: 'You can explicitly set the default infrastructure which is a containerized
    Ubuntu 14.04 environment by adding this entry:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过添加此条目来显式设置默认基础设施，即基于容器的Ubuntu 14.04环境：
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is not necessary to do as you can just set the language and the default
    infrastructure will be done for you.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这并非必须，因为您可以只设置语言，默认基础设施将为您完成。
- en: Virtual Image with Ubuntu Trusty (14.04) infrastructure
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有Ubuntu Trusty (14.04)基础设施的虚拟镜像
- en: 'You can use Ubuntu Trusty infrastructure by using the following entries in
    the Travis YML script:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Travis YML脚本中使用以下条目来使用Ubuntu Trusty基础设施：
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Container based infrastructure
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于容器的基础设施
- en: 'You can use container based infrastructure by using the following entries in
    the Travis YML script:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Travis YML脚本中使用以下条目来使用基于容器的基础设施：
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Notice here that we explicitly set sudo privileges to false and use Ubuntu Trusty.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在此处明确将sudo权限设置为false，并使用Ubuntu Trusty。
- en: macOS infrastructure
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: macOS基础设施
- en: 'You can use macOS infrastructure by using the following entry in the Travis
    YML script:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Travis YML脚本中使用以下条目来使用macOS基础设施：
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Build customization
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自定义
- en: In Travis CI, you can customize the build in a variety of ways and we will start
    by explaining the build life cycle.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '在Travis CI中，您可以以各种方式自定义构建，我们将从解释构建生命周期开始。 '
- en: The build life cycle
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建生命周期
- en: 'A build in Travis CI is made up of two steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Travis CI中的构建由两个步骤组成：
- en: '**Install**: Install any dependencies required. We saw this step in the install
    block of the YML script.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装**：安装所需的任何依赖项。我们在YML脚本的安装块中看到了这一步骤。'
- en: '**Script**: Run the build script. This can be a series of scripts that are
    run.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Script**：运行构建脚本。这可以是一系列要运行的脚本。'
- en: before_install step
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: before_install步骤
- en: This step is formally called the **before_install** step and it is where you
    install any additional dependencies in your CI build and where you get custom
    services initiated.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步骤正式称为**before_install**步骤，您可以在此步骤中安装CI构建中的任何其他依赖项，并启动自定义服务。
- en: install step
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: install步骤
- en: We have already seen this step in action; in the **install** step you install
    any dependencies needed for the CI build to run correctly.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在**install**步骤中看到了这一步骤，您可以在此步骤中安装CI构建所需的任何依赖项。
- en: before_script step
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: before_script步骤
- en: In the **before_script** step you specify any commands that need to be executed
    before your script block can execute correctly. For example, you may have a PostgreSQL
    ([https://www.postgresql.org/](https://www.postgresql.org/)) database and need
    to seed the database before you run any of your tests.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在**before_script**步骤中，您可以指定在执行脚本块之前需要执行的任何命令。例如，您可能有一个 PostgreSQL ([https://www.postgresql.org/](https://www.postgresql.org/))
    数据库，并且需要在运行任何测试之前对数据库进行填充。
- en: script step
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本步骤
- en: In the **script** step, you execute any commands which are central to a healthy
    code base. For example, it is common to run any tests you have in your code base,
    to lint the code base. A linter or lint tool is a tool that analyzes a code base
    to find any programming related errors, software bugs, style errors, or any code
    that may have **code smells**.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在**script**步骤中，您可以执行对健康代码库至关重要的任何命令。例如，通常会运行代码库中的任何测试，对代码库进行lint。 一个 linter 或 lint 工具是分析代码库以查找任何与编程相关的错误、软件错误、样式错误或可能具有**代码异味**的代码的工具。
- en: after_script step
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: after_script步骤
- en: In the **after_script** step you execute any commands that are helpful such
    as reporting and analytics. You may need to publish a code coverage report or
    create a report on metrics in the code base.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在**after_script**步骤中，您可以执行任何有用的命令，例如报告和分析。您可能需要发布代码覆盖率报告或在代码库中创建指标报告。
- en: List of build life cycle
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建生命周期列表
- en: 'Here is the complete life cycle for Travis CI:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Travis CI的完整生命周期：
- en: Optional install: **apt addons**
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选安装：**apt插件**
- en: 'Optional install: **cache components**'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选安装：**缓存组件**
- en: '**before_install**'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**before_install**'
- en: '**install**'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**install**'
- en: '**before_script**'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**before_script**'
- en: '**script**'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**script**'
- en: 'Optional: **before_cache**'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选：**before_cache**
- en: '**after_success** or **after_failure**'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**after_success**或**after_failure**'
- en: '**before_deploy**'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**before_deploy**'
- en: '**deploy**'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**deploy**'
- en: '**after_deploy**'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**after_deploy**'
- en: '**after_script**'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**after_script**'
- en: Build failure behavior
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建失败行为
- en: If an error occurs in the before_install, install, or before_script life cycle
    events then the CI build will immediately error out and the CI build will stop.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在before_install、install或before_script生命周期事件中发生错误，则CI构建将立即出错，CI构建将停止。
- en: If an error occurs in the script life cycle event then the build will fail but
    the CI build will continue to run.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在脚本生命周期事件中发生错误，则构建将失败，但CI构建将继续运行。
- en: If an error occurs in the after_success, after_failure, after_script, and after_deploylife
    cycle events then the build will not be marked as a failure but if any of these
    life cycle events results in a timeout then the build will be marked as a failure.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在after_success、after_failure、after_script和after_deploy生命周期事件中发生错误，则构建将不会标记为失败，但如果其中任何生命周期事件导致超时，则构建将标记为失败。
- en: Installing a secondary programming language for a CI build
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为CI构建安装第二种编程语言
- en: You can easily install another programming language in the CI build by adding
    an entry into the **before_install** life cycle event. It is best to specify your
    primary language and then a secondary language.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在**before_install**生命周期事件中添加条目来轻松安装另一种编程语言。最好指定您的主要语言，然后是次要语言。
- en: Example Travis CI YML script with multiple languages
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有多种语言的示例Travis CI YML脚本
- en: 'In the Travis CI YML script here, we specify Go version 1.10 as the primary
    programming language and then Node.js as the secondary language. We install Node.js
    dependencies in the before_install life cycle event and then we run a Golang test
    followed by a Node.js test:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在Travis CI YML脚本中，我们将Go版本1.10指定为主要编程语言，然后将Node.js指定为次要语言。我们在before_install生命周期事件中安装Node.js依赖项，然后运行Golang测试，然后是Node.js测试：
- en: '[PRE8]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you would like to further explore this example, then check out the `multiple-languages`
    repository ([https://github.com/packtci/multiple-languages](https://github.com/packtci/multiple-languages)).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想进一步探索此示例，请查看`multiple-languages`存储库（[https://github.com/packtci/multiple-languages](https://github.com/packtci/multiple-languages)）。
- en: Docker in Travis CI
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI中的Docker
- en: 'Docker can be utilized in Travis CI and the only step required to enable Docker
    is to add the following entry into your Travis CI YML script:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Docker可以在Travis CI中使用，启用Docker的唯一步骤是将以下条目添加到您的Travis CI YML脚本中：
- en: '[PRE9]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice here that we added an entry into the `services` block and we added a
    list entry of Docker.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在`services`块中添加了一个条目，并添加了Docker的列表条目。
- en: Example Travis CI YML script with a Dockerfile
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有Dockerfile的示例Travis CI YML脚本
- en: 'In the Travis YML script here, we are specifying `sudo` privileges, a programming
    language of Golang, then we are specifying the Docker service, pulling down a
    custom Docker image of `jbelmont/print-average:1.0` and then running the Docker
    container and removing it:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在Travis YML脚本中，我们指定了`sudo`权限，Golang编程语言，然后指定了Docker服务，下载了自定义Docker镜像`jbelmont/print-average:1.0`，然后运行Docker容器并将其删除：
- en: '[PRE10]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'I have added a screenshot of the Travis CI build for your reference:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经添加了Travis CI构建的截图供您参考：
- en: '![](assets/9ceb2fa3-3160-430f-b9c5-d81472b90627.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9ceb2fa3-3160-430f-b9c5-d81472b90627.png)'
- en: Notice that Docker is running in the CI build because we specified Docker as
    a service to be run in Travis CI. When we run the Docker container, it prints
    out the average computed in the `main.go` in the `docker-travis-ci-example` repository
    ([https://github.com/packtci/docker-travis-ci-example](https://github.com/packtci/docker-travis-ci-example)).
    You can check out my Docker image at Docker Hub ([https://hub.docker.com/r/jbelmont/print-average/](https://hub.docker.com/r/jbelmont/print-average/)).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Docker正在CI构建中运行，因为我们在Travis CI中指定了Docker作为要运行的服务。当我们运行Docker容器时，它会打印出在`docker-travis-ci-example`存储库中的`main.go`中计算的平均值（[https://github.com/packtci/docker-travis-ci-example](https://github.com/packtci/docker-travis-ci-example)）。您可以在Docker
    Hub上查看我的Docker镜像（[https://hub.docker.com/r/jbelmont/print-average/](https://hub.docker.com/r/jbelmont/print-average/)）。
- en: GUI and headless browsers in Travis CI
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Travis CI中的GUI和无头浏览器
- en: You can run headless browsers in Travis CI in a couple of ways. You can utilize
    an X Virtual Framebuffer, or XVFB in short form, which you can read more about
    in the XVFB docs ([https://www.x.org/archive/X11R7.6/doc/man/man1/Xvfb.1.xhtml](https://www.x.org/archive/X11R7.6/doc/man/man1/Xvfb.1.xhtml)).
    We will look at using headless chrome with Puppeteer ([https://pptr.dev/](https://pptr.dev/)),
    which is a library developed by Google that provides a high level API to work
    with headless Chrome.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以以几种方式在Travis CI中运行无头浏览器。您可以利用X虚拟帧缓冲，或简称为XVFB，您可以在XVFB文档中了解更多信息（[https://www.x.org/archive/X11R7.6/doc/man/man1/Xvfb.1.xhtml](https://www.x.org/archive/X11R7.6/doc/man/man1/Xvfb.1.xhtml)）。我们将使用Puppeteer（[https://pptr.dev/](https://pptr.dev/)）来使用无头Chrome，这是由Google开发的库，提供了一个高级API来使用无头Chrome。
- en: Example Travis yml script with headless Chrome, Puppeteer, and the Jest Testing
    Library
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有无头Chrome、Puppeteer和Jest测试库的Travis yml脚本示例
- en: 'In the Travis YML script here, we have set a number of different actions in
    the Travis CI build. First, we set the language to `node_js`, then we set the
    version of `node_js` to `8.11`, then we set a new property called `dist: trusty`
    which set the Travis CI environment to Ubuntu 14.04, which is called **Trusty**.
    We then use the add-ons block to add the latest stable Chrome version. We then
    get the stable version of Google Chrome running on the CI build on port `9222`,
    and then we use the `cache` block so that `node_modules` is cached on each CI
    build run. Then we install our Node.js dependencies and finally we run the Node.js
    tests using the Jest library:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '在Travis YML脚本中，我们在Travis CI构建中设置了许多不同的操作。首先，我们将语言设置为`node_js`，然后将`node_js`的版本设置为`8.11`，然后设置了一个名为`dist:
    trusty`的新属性，该属性将Travis CI环境设置为Ubuntu 14.04，称为**Trusty**。然后我们使用add-ons块添加了最新的稳定版本的Chrome。然后我们在CI构建上的端口`9222`上运行了稳定版本的Google
    Chrome，然后我们使用`cache`块，以便在每次CI构建运行时缓存`node_modules`。然后我们安装我们的Node.js依赖项，最后我们使用Jest库运行Node.js测试：'
- en: '[PRE11]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In this first screenshot, notice the section where we start running `google-chrome`
    in `headless` mode in the Travis CI build and then install the dependencies:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一张截图中，请注意我们在Travis CI构建中以`headless`模式运行`google-chrome`的部分，然后安装依赖项：
- en: '![](assets/2faf9d2c-148d-4721-b163-55d0f36ea157.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2faf9d2c-148d-4721-b163-55d0f36ea157.png)'
- en: 'In this second screenshot, we run the tests using the Google Chrome Puppeteer
    library. Notice that the build runs with an exit status of `0` and finishes successfully:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个截图中，我们使用Google Chrome Puppeteer库运行测试。请注意，构建以`0`的退出状态运行，并成功完成：
- en: '![](assets/8273904c-b838-4bb4-b1b4-8e4a46eabf88.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8273904c-b838-4bb4-b1b4-8e4a46eabf88.png)'
- en: You can find this Travis CI build at [https://travis-ci.org/packtci/puppeteer-headless-chrome-travis-yml-script/jobs/395882388#L70](https://travis-ci.org/packtci/puppeteer-headless-chrome-travis-yml-script/jobs/395882388#L70) and
    you can find the source code for this repository at [https://github.com/packtci/puppeteer-headless-chrome-travis-yml-script](https://github.com/packtci/puppeteer-headless-chrome-travis-yml-script) and
    at GitHub.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://travis-ci.org/packtci/puppeteer-headless-chrome-travis-yml-script/jobs/395882388#L70](https://travis-ci.org/packtci/puppeteer-headless-chrome-travis-yml-script/jobs/395882388#L70)找到此Travis
    CI构建，并且您可以在[https://github.com/packtci/puppeteer-headless-chrome-travis-yml-script](https://github.com/packtci/puppeteer-headless-chrome-travis-yml-script)和GitHub上找到此存储库的源代码。
- en: Summary
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have gone over many aspects of Travis CI in this chapter, including the differences
    between Travis CI and Jenkins. We went over some prerequisite actions in order
    to get Travis CI set up and learned to add an SSH key to your GitHub account.
    We then explained the Travis CI build job and went over the YAML syntax in detail.
    We then explored many real-world examples of Travis YML scripts and explained
    the build life cycle in Travis CI and went over different aspects such as initiating
    services such as Docker and their uses in Travis CI.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经讨论了Travis CI的许多方面，包括Travis CI和Jenkins之间的区别。我们介绍了一些先决条件操作，以便设置Travis
    CI并学会将SSH密钥添加到您的GitHub帐户。然后我们详细解释了Travis CI构建作业，并详细介绍了YAML语法。然后我们探讨了许多Travis YML脚本的真实示例，并解释了Travis
    CI中的构建生命周期，并介绍了不同方面，例如启动Docker等服务及其在Travis CI中的用途。
- en: In the next chapter, we will go over all of the Travis CLI commands, explain
    how to get Travis CLI installed on Linux, macOS, and Windows, and go over automating
    tasks like encrypting credentials using the Travis CLI commands.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍所有Travis CLI命令，解释如何在Linux、macOS和Windows上安装Travis CLI，并介绍如何使用Travis
    CLI命令自动化任务，如加密凭据。
- en: Questions
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the primary difference between Jenkins and Travis CI?
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins和Travis CI之间的主要区别是什么？
- en: Can Travis CI work in Bitbucket?
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Travis CI可以在Bitbucket中工作吗？
- en: How do you add new repositories to Travis CI?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将新存储库添加到Travis CI中？
- en: What is a scalar variable in YAML?
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: YAML中的标量变量是什么？
- en: What is a list in YAML?
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: YAML中的列表是什么？
- en: Why are anchors useful in YAMl?
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: YAML中锚点的作用是什么？
- en: Is it possible to use a secondary programming language in a Travis CI build?
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Travis CI构建中是否可以使用辅助编程语言？
- en: How would you use docker in a Travis CI build?
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在Travis CI构建中使用docker？
- en: Further reading
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: You can further explore concepts in Travis CI by looking at the user documentation
    at the Travis CI website ([https://docs.travis-ci.com/](https://docs.travis-ci.com/)).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过查看Travis CI网站上的用户文档（[https://docs.travis-ci.com/](https://docs.travis-ci.com/)）来进一步探索Travis
    CI中的概念。
