- en: Understanding Components of Testing with Jira
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Jira中的测试组件
- en: Requirements, test suites, a test plan, traceability, and reports are the main
    components of testing provided as part of the Jira test management solution. Test
    suites, also known as test repositories, are used to organize test cases. Test
    planning is an important factor before we move on to the test execution phase.
    Traceability and reports help us to track the coverage and progress of the testing
    efforts in a project-release cycle.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 需求、测试套件、测试计划、可追溯性和报告是Jira测试管理解决方案的主要组成部分。测试套件，也称为测试存储库，用于组织测试用例。在进行测试执行阶段之前，测试计划是一个重要因素。可追溯性和报告帮助我们跟踪项目发布周期中测试工作的覆盖范围和进展情况。
- en: In this chapter, we will cover the approach of Test Management using its plugins
    in Jira. First, we'll understand the requirements and some basics of a test plan,
    along with issue types, including the default workflow that every issue type goes
    through in Jira. We'll learn to create customized workflows and add them to the
    project using workflow schemes. Then we'll create our own issue type and apply
    this newly-created workflow to that issue type. We'll also take a look at issue
    types in detail and compare the test suite features provided by all three plugins.
    We'll start by understanding some basics of the test plan and where it resides
    in Jira plugins.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍使用Jira中的插件进行测试管理的方法。首先，我们将了解需求和测试计划的一些基础知识，包括问题类型，以及Jira中每种问题类型经历的默认工作流程。我们将学习创建自定义工作流程，并将其添加到项目中使用工作流方案。然后，我们将创建自己的问题类型，并将这个新创建的工作流应用到该问题类型。我们还将详细了解问题类型，并比较三个插件提供的测试套件功能。我们将从了解测试计划的一些基础知识开始，以及它在Jira插件中的位置。
- en: 'In this chapter, we''ll look at the following topics in detail:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将详细讨论以下主题：
- en: What are requirements?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是需求？
- en: Issue types
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题类型
- en: What is test suite and what are its advantages?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是测试套件及其优势？
- en: What is test plan?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是测试计划？
- en: What is a traceability matrix and what are its benefits?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是可追溯性矩阵及其好处？
- en: Reports and their types
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告及其类型
- en: Requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需求
- en: Requirements are basically parts of the solution that will help you solve the
    end user's problems. They can also be desirable items that will attract the end
    user to use the product or service. Further, requirements may also contain functions
    that might be widely used in the existing products available in the market, which
    makes it critical to be available for a new product to enter the market.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 需求基本上是解决最终用户问题的解决方案的一部分。它们也可以是吸引最终用户使用产品或服务的可取之处。此外，需求还可能包含在市场上现有产品中广泛使用的功能，这使得它对于新产品进入市场至关重要。
- en: What are requirements?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是需求？
- en: Requirements can be a functional/non-functional and implicit/explicit list of
    features. Either way, they basically get classified as either core needs or good-to-haves
    for a product or service that will satisfy the customer. The specification varies
    on the target audience and the type of product being developed by the organization.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 需求可以是功能性/非功能性和隐式/显式的功能列表。无论哪种方式，它们基本上被分类为产品或服务的核心需求或好要求。规范因目标受众和组织开发的产品类型而异。
- en: In the software industry, once the project is formally initiated and is allocated
    to a software development team, the first task for the project stakeholder is
    to gather the requirements. Gathering requirements helps the team to understand
    the scope of the project, timeline, budget, supported technology, its limitations,
    number of resources required, features requested, the customer's wish list, and
    so on.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件行业中，一旦项目正式启动并分配给软件开发团队，项目利益相关者的第一个任务是收集需求。收集需求有助于团队了解项目范围、时间表、预算、支持的技术、其限制、所需资源数量、所请求的功能、客户的愿望清单等。
- en: After the requirements are gathered and documented, the project coordinator
    (who acts as a liaison between the end user and the software development team)
    gets it approved from the end user. On receiving the go-ahead for the development
    phase, the requirements are analyzed and broken down into smaller work packets
    that become tasks for the team. Jira provides an effective way to help the team
    to organize and manage these tasks.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在收集和记录需求之后，项目协调员（充当最终用户和软件开发团队之间的联络人）会从最终用户那里获得批准。在获得开发阶段的批准后，需求被分析并分解为更小的工作包，成为团队的任务。Jira提供了一种有效的方式来帮助团队组织和管理这些任务。
- en: 'Jira was built as a ticket-based system, where each task is represented as
    a ticket. Thus, requirements that are tasks for the team become a ticket in Jira.
    Jira also allows for the classification of tasks utilizing issue types (which
    basically helps in categorizing requirements to segregate work). Every Jira project
    has supported issue types by default. Now, if you''re wondering whether your project
    supports an issue type, this can be confirmed on the first screen when creating
    a new project:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Jira是一个基于工单的系统，其中每个任务都表示为一个工单。因此，团队的需求在Jira中变成了一个工单。Jira还允许利用问题类型对任务进行分类（基本上有助于对需求进行分类以分隔工作）。每个Jira项目默认支持问题类型。现在，如果你想知道你的项目是否支持某个问题类型，可以在创建新项目时在第一个屏幕上确认：
- en: '![](Images/599a661d-0526-4091-ab7c-ace2993639f2.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/599a661d-0526-4091-ab7c-ace2993639f2.png)'
- en: The default Issue Types that are seen in the preceding screenshot are Bug, Task,
    Sub-task, Story, and Epic. Jira also provides flexibility to customize the supported
    issue types for a project by adding, editing, and/or deleting issue types, as
    well as workflows. If the project or organization requires further segregation
    and classification of items in the project beyond what's available by default,
    then team members can create their own issue types as well, which we'll see in
    the following section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中看到的默认问题类型是Bug、Task、Sub-task、Story和Epic。Jira还提供了灵活性，可以通过添加、编辑和/或删除问题类型以及工作流程来自定义项目支持的问题类型。如果项目或组织需要对项目中的项目进行进一步的分离和分类，超出了默认提供的内容，那么团队成员也可以创建自己的问题类型，我们将在下一节中看到。
- en: In [Chapter 9](da0a480b-81d0-4369-8359-ddd0fd749ffe.xhtml), *Requirement Management*,
    we'll learn how to configure Jira issue types as requirements for testing. We'll
    also use these issue types to link with relevant test cases using Jira plugins.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](da0a480b-81d0-4369-8359-ddd0fd749ffe.xhtml)中，*需求管理*，我们将学习如何将Jira问题类型配置为测试需求。我们还将使用这些问题类型使用Jira插件与相关测试用例进行链接。
- en: Issue types
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题类型
- en: 'Creating and using a new issue type involves the following six steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和使用新的问题类型涉及以下六个步骤：
- en: 'Log in as `Admin`, navigate to Administration | Issues | Add issue type, and
    follow the steps from the official documentation (*Defining issue type field values*: [https://confluence.atlassian.com/adminjiraserver/defining-issue-type-field-values-938847087.html](https://confluence.atlassian.com/adminjiraserver/defining-issue-type-field-values-938847087.html))
    to add a new issue type. We have created a new issue type named `ProdIssue`:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以`Admin`身份登录，导航到Administration | Issues | Add issue type，并按照官方文档中的步骤进行操作（*定义问题类型字段值*：[https://confluence.atlassian.com/adminjiraserver/defining-issue-type-field-values-938847087.html](https://confluence.atlassian.com/adminjiraserver/defining-issue-type-field-values-938847087.html)）添加一个新的问题类型。我们已经创建了一个名为`ProdIssue`的新问题类型：
- en: '![](Images/b165170f-1664-4f94-8582-5dad5bcf1949.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b165170f-1664-4f94-8582-5dad5bcf1949.png)'
- en: 'Let''s create a new workflow for `ProdIssue`. To create a new workflow, log
    in as `Admin`, navigate to Administration | Workflows | Add Workflow, and follow
    the steps from the official documentation (*Working with workflows*: [https://confluence.atlassian.com/adminjiraserver072/working-with-workflows-828787890.html
    ...](https://confluence.atlassian.com/adminjiraserver072/working-with-workflows-828787890.html)'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为`ProdIssue`创建一个新的工作流。要创建一个新的工作流，以`Admin`身份登录，导航到Administration | Workflows
    | Add Workflow，并按照官方文档中的步骤进行操作（*使用工作流*：[https://confluence.atlassian.com/adminjiraserver072/working-with-workflows-828787890.html
    ...](https://confluence.atlassian.com/adminjiraserver072/working-with-workflows-828787890.html)
- en: Test suites
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试套件
- en: 'When a software development company gets a big project, it must split the project
    into smaller components so that it can apply the *divide-and-conquer* strategy.
    The final product is then created by integrating these smaller components. The
    general procedure for dividing the bigger project is by grouping requirements
    for a common feature together to form smaller projects. Each of these smaller
    projects then get assigned to a development team. Thus, each team works on delivering
    part of the larger final product:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当软件开发公司获得一个大项目时，必须将项目分成较小的组件，以便可以应用*分而治之*的策略。然后通过集成这些较小的组件来创建最终产品。划分更大项目的一般程序是将共同特征的需求分组，形成较小的项目。然后将这些较小的项目分配给开发团队。因此，每个团队都致力于交付较大最终产品的一部分：
- en: '![](Images/3be4a3a3-7161-4d0b-8923-c9acbd69eab6.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/3be4a3a3-7161-4d0b-8923-c9acbd69eab6.png)'
- en: Testing efforts for each of these projects starts with the testers creating
    test scenarios and test cases. The number and complexity of the test cases vary
    with the size, duration, complexity, testing tools utilized, and the testing strategy.
    The biggest challenge, however, is to segregate these test cases so that they're
    easily accessible and can be referred to or reused across projects or organization-wide.
    This is where the concept of test suites comes in handy.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些项目的测试工作始于测试人员创建测试场景和测试用例。测试用例的数量和复杂性因项目的大小、持续时间、复杂性、使用的测试工具和测试策略而异。然而，最大的挑战是将这些测试用例分开，以便它们易于访问，并且可以跨项目或整个组织进行引用或重复使用。这就是测试套件的概念派上用场的地方。
- en: What is a test suite?
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是测试套件？
- en: A **test suite** is simply a bucket that holds a collection of test cases with
    similar behaviors or goals. Each test suite has common characteristics defined
    by underlying test cases and varies in numbers.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试套件**只是一个容纳具有相似行为或目标的测试用例集合的容器。每个测试套件都有由基础测试用例定义的共同特征，并且数量不同。'
- en: 'Various characteristics contribute towards recognizing and distinguishing the
    patterns of test suites, namely, the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 各种特征有助于识别和区分测试套件的模式，即以下内容：
- en: Requirements.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求。
- en: 'Priority:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优先级：
- en: High
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高
- en: Low
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低
- en: Critical
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键
- en: Components.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件。
- en: 'Test environment:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试环境：
- en: Development
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发
- en: Test
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: Production
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产
- en: Test input parameters or type. These include different sets or types of values,
    such as `.csv` files, images, variables, objects, or even returned values from
    functions.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试输入参数或类型。这些包括不同的值集或类型，例如`.csv`文件、图像、变量、对象，甚至是从函数返回的值。
- en: Expected behavior.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预期行为。
- en: 'Type of testing:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试类型：
- en: Regression
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回归
- en: Smoke
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 冒烟
- en: Browser-specific
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定于浏览器
- en: Specific tools used by the team for testing, such ...
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队用于测试的特定工具，例如...
- en: The test suite in synapseRT
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: synapseRT中的测试套件
- en: 'In synapseRT, the Test Suites tab is displayed on the left panel of the project
    page. From this section, we can create and manage test cases in the form of main
    and subtest suites. The following screenshot shows the main test suite, `Mobile
    banking App Tests`, which has a total of four test cases that have been organized
    into two subtest suites—`IOS device test` and `Android device test`. We also have
    the option to clone test cases from one test suite to another, delete, or even
    export test cases:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在synapseRT中，测试套件选项卡显示在项目页面的左侧面板上。从这个部分，我们可以创建和管理主要和子测试套件的测试用例。以下截图显示了主测试套件“移动银行应用测试”，其中包含四个测试用例，这些测试用例已经组织成两个子测试套件“IOS设备测试”和“Android设备测试”。我们还可以选择将测试用例从一个测试套件克隆到另一个测试套件，删除，甚至导出测试用例：
- en: '![](Images/59995fbc-65b8-458e-808b-a15ad909c580.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/59995fbc-65b8-458e-808b-a15ad909c580.png)'
- en: The test suite in Zephyr
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zephyr中的测试套件
- en: 'Zephyr provides a way to manage your test execution with the help of test cycles.
    However, it doesn''t provide a feature to organize test cases by test suites.
    The Test Summary screen provides a detailed view of the number of test cases,
    organized by version, component, or label, and their execution status:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Zephyr提供了一种通过测试周期管理测试执行的方式。但是，它并没有提供按测试套件组织测试用例的功能。测试摘要屏幕提供了按版本、组件或标签组织的测试用例数量的详细视图，以及它们的执行状态：
- en: '![](Images/25cf7905-7737-4d78-ae14-687c241bd89c.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/25cf7905-7737-4d78-ae14-687c241bd89c.png)'
- en: The test suite in Test Management
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试管理中的测试套件
- en: 'Click on the Tests tab and create a new folder in the FOLDERS section. These
    folders will be your test suites. You can add new test cases by clicking the +New button
    on the screen. We have created a few test suites and test cases for our banking
    example, shown as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 单击“测试”选项卡，并在“文件夹”部分创建一个新文件夹。这些文件夹将成为您的测试套件。您可以通过单击屏幕上的“+新建”按钮来添加新的测试用例。我们已经为我们的银行示例创建了一些测试套件和测试用例，如下所示：
- en: '![](Images/101a2848-9956-4b48-925c-ddf40abf4796.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/101a2848-9956-4b48-925c-ddf40abf4796.png)'
- en: For the preceding banking example, testers can also create test suites at a
    high level based on mobile testing, web application testing, credit card testing,
    personal banking testing, account types testing, load types testing, and so on.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于前面的银行示例，测试人员还可以基于移动测试、Web应用程序测试、信用卡测试、个人银行测试、账户类型测试、负载类型测试等高层次创建测试套件。
- en: Advantages of test suites
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试套件的优势
- en: 'It''s beneficial for test professionals to have organized test suites for the
    following reasons:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于测试专业人员来说，拥有组织良好的测试套件是有益的，原因如下：
- en: It helps to separate the types of tasks that need to be performed for the verification
    of requirements
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于区分需要执行的任务类型，以验证需求
- en: The effort estimation in terms of time and resource requirements is made easy
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以时间和资源需求为单位进行的工作估计变得容易
- en: It acts as a knowledge-base repository
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它充当了知识库存储库
- en: It makes it easy to identify test cases to mitigate risk
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以帮助轻松识别测试用例以减轻风险
- en: The identification and retesting of previously released components is made easy
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 先前发布的组件的识别和重新测试变得容易。
- en: Test suites often grow as a project progresses. Well-organized test suites are
    essential for effective test management.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 测试套件通常会随着项目的进展而增长。良好组织的测试套件对于有效的测试管理至关重要。
- en: Test plans
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试计划
- en: Planning is important if you want to be successful in delivering a project.
    We plan for each activity at each phase of the development process. Testing is
    no different. To ensure the quality of the product and perform verification, a
    test plan is crucial.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想成功交付项目，规划是很重要的。我们在开发过程的每个阶段都会为每个活动进行规划。测试也不例外。为了确保产品的质量并进行验证，测试计划至关重要。
- en: What is a test plan?
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是测试计划？
- en: A test plan is a document that outlines your approach to verify and test the
    software product. It's a detailed document prepared by test managers or test leads
    that highlights the features that need to be verified, the testing strategy, the
    availability of resources, and their roles. It also contains details about the
    scope of the test, components that are not part of the test phase, supported browser
    types and versions, limitations of the tools being used for testing, and so on.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 测试计划是一份详细的文档，概述了您验证和测试软件产品的方法。这是由测试经理或测试负责人准备的详细文档，突出显示需要验证的功能、测试策略、资源的可用性及其角色。它还包含有关测试范围、不属于测试阶段的组件、支持的浏览器类型和版本、用于测试的工具的限制等详细信息。
- en: Every phase in the SDLC generates a set of deliverables. For example, the requirement
    gathering phase generates the BRD, the design phase generates high-level and low-level
    system and component design plans, and the test planning phase generates ...
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC中的每个阶段都会生成一系列可交付成果。例如，需求收集阶段会生成BRD，设计阶段会生成高级和低级系统和组件设计计划，测试规划阶段会生成...
- en: The test plan in synapseRT
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: synapseRT中的测试计划
- en: The Test Plan is another issue type in synapseRT. On clicking on the Create
    button, we get an option to choose the issue type as Test Plan. Once we enter
    all the details and create our test plan, we can add test cases and test cycles,
    as shown in the following screenshot. synapseRT provides an effective way of managing
    test cycles using the test plan. You can always add or remove test cases from
    the selected cycles before starting the execution.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 测试计划是synapseRT中的另一种问题类型。单击“创建”按钮后，我们可以选择将问题类型设置为测试计划。一旦输入所有细节并创建我们的测试计划，我们可以添加测试用例和测试周期，如下截图所示。synapseRT提供了一种有效的管理测试周期的方式。在开始执行之前，您可以随时向所选周期添加或删除测试用例。
- en: 'However, once the cycle starts, a user can only add new test cases to the test
    cycles:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，一旦周期开始，用户只能向测试周期添加新的测试用例：
- en: '![](Images/247d6496-a0af-4a7f-9865-e39bedb30f93.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/247d6496-a0af-4a7f-9865-e39bedb30f93.png)'
- en: The test plan in Zephyr
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zephyr中的测试计划
- en: 'Zephyr uses the Cycle Summary to plan the test cycle. Once cycles are planned,
    the test team can add and remove test cases from the cycles as needed. Test cases
    are validated for the content and, details, and assigned to the teams for peer
    review. After the peer review, it can be marked as Ready to Test and assigned
    to the team members who will be responsible for the execution of the test cases.
    Once the cycles with the updated test cases are ready, it can be moved under the
    targeted release test cycle and the team can start the execution phase. The following
    screenshot shows how test cycles are planned:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Zephyr使用Cycle Summary来规划测试周期。一旦计划好周期，测试团队可以根据需要添加和删除测试用例。测试用例经过内容和细节的验证，并分配给团队进行同行评审。同行评审后，可以标记为“准备测试”，并分配给负责执行测试用例的团队成员。一旦更新了测试用例的周期准备就绪，就可以将其移动到目标发布测试周期下，并且团队可以开始执行阶段。以下截图显示了如何规划测试周期：
- en: '![](Images/20522d0a-1384-435c-905c-675ae23a1465.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/20522d0a-1384-435c-905c-675ae23a1465.png)'
- en: The test plan in Test Management
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试管理中的测试计划
- en: 'Test Management provides a tab named Plans to create and manage test plans:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 测试管理提供了一个名为“计划”的选项卡来创建和管理测试计划：
- en: '![](Images/0ba35af3-dd2c-4173-8e2f-d36cd1d7a979.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0ba35af3-dd2c-4173-8e2f-d36cd1d7a979.png)'
- en: 'Once you create a test plan, you can add test cycles, which contain test cases,
    as shown in the following screenshot. This can then be viewed from the Traceability
    section of the test plan:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 创建测试计划后，可以添加包含测试用例的测试周期，如下截图所示。然后可以从测试计划的追溯部分查看：
- en: '![](Images/5cadb8f0-8ae0-4ce4-a88b-b63bb131cd96.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5cadb8f0-8ae0-4ce4-a88b-b63bb131cd96.png)'
- en: Traceability
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 追溯
- en: Requirements are usually documented in the BRD, **software requirement and specifications**
    (**SRS**) document, or in the Requirements section of the project management tools,
    such as Jira, being used by the team. Test scenarios and test cases are created
    in order to verify the stated requirements. It's important to ensure and track
    that all the requirements have corresponding test cases and are covered in the
    testing and verification phases. This is what the traceability matrix helps us manage.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 需求通常记录在BRD、**软件需求和规格**（**SRS**）文档中，或者记录在项目管理工具（如团队使用的Jira）的需求部分。测试场景和测试用例是为了验证所述需求而创建的。重要的是要确保并跟踪所有需求都有相应的测试用例，并在测试和验证阶段中得到覆盖。这就是追溯矩阵帮助我们管理的内容。
- en: What is a traceability matrix?
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是追溯矩阵？
- en: The traceability matrix, also known as the **Requirement Traceability Matrix**
    (**RTM**), is a document that helps test professionals to establish a correlation
    between what they are being asked to test and what is being covered in the testing
    phase. It establishes a many-to-many relationship between the requirements and
    the test scenarios or test cases identified, which will be used to verify the
    linked requirements. The traceability matrix helps us to identify any leaks in
    quality and ensures complete test coverage so that no part of the requirements
    missed from the test.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 追溯矩阵，也称为**需求追溯矩阵**（**RTM**），是一份文件，帮助测试专业人员建立被要求测试的内容与测试阶段覆盖的内容之间的关联。它在需求和确定的测试场景或测试用例之间建立了多对多的关系，这些将用于验证相关需求。追溯矩阵帮助我们识别质量泄漏，并确保完整的测试覆盖，以便不会漏掉任何需求的部分。
- en: Once the execution phase begins, the test professionals start the application-validation
    process by following the detailed steps mentioned in the test cases. The main
    goal is to identify whether a module satisfies conditions and meets the expected
    results. If it does, the test is passed, and if it doesn't, we call it a **defect**.
    The number of defects may vary from one execution cycle to another.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行阶段开始，测试专业人员将按照测试用例中提到的详细步骤开始应用验证过程。主要目标是确定模块是否满足条件并符合预期结果。如果是，测试通过，如果不是，我们称之为**缺陷**。缺陷的数量可能会因执行周期而异。
- en: It's important for project stakeholders to be aware of the status of the test
    execution, so that they understand which requirements are yet to be verified and
    can address the obstacles in time. When raising a defect in the system, if it's
    linked to the relevant test case, it's easy to trace the defect back to the test
    cases, which can then be traced back to the given requirement. Often, in the case
    of the traceability matrix, it's important to add the test execution status, as
    well as linked defects' details. There are various formats of the RTM available
    that can help establish this relationship between the requirement being tested
    and the test cases and related defects.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 项目利益相关者了解测试执行状态的重要性，这样他们就能了解尚未验证的需求，并及时解决障碍。在系统中提出缺陷时，如果与相关测试用例相关联，就很容易追溯缺陷到测试用例，然后追溯到给定的需求。通常，在追溯矩阵的情况下，添加测试执行状态以及相关缺陷的细节非常重要。有各种格式的RTM可用于建立被测试需求与测试用例和相关缺陷之间的关系。
- en: Types of traceability matrices
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 追溯矩阵的类型
- en: 'The most popular types of the RTM are shown in the following examples:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎的RTM类型如下示例所示：
- en: '**Forward traceability matrix:** This is where requirements are linked to the
    test cases:'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正向追溯矩阵：** 这是将需求与测试用例相关联的地方：'
- en: '| **Business requirement ID#** | **Use case ID#** | **Priority** | **Test case
    ID#** |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| **业务需求ID#** | **用例ID#** | **优先级** | **测试用例ID#** |'
- en: '| BR_1 | UC_1 | High | TC#001 |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| BR_1 | UC_1 | High | TC#001 |'
- en: '|  | UC_2 | High | TC#002TC#005 |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '|  | UC_2 | High | TC#002TC#005 |'
- en: '| BR_2 | UC_3 | Medium | TC#003TC#004 |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| BR_2 | UC_3 | Medium | TC#003TC#004 |'
- en: '**Backward traceability matrix**: This is where test cases are mapped to the
    requirements:'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反向追溯矩阵：** 这是将测试用例映射到需求的地方：'
- en: '| **Test case ID#** | **Use case ID#** | **Priority** | **Business requirement
    ID#** |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| **测试用例ID#** | **用例ID#** | **优先级** | **业务需求ID#** |'
- en: '| TC#001 | UC_1 | High | BR_1 |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| TC#001 | UC_1 | High | BR_1 |'
- en: '| TC#002 | UC_2 | High | BR_1 |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| TC#002 | UC_2 | High | BR_1 |'
- en: '| TC#003 | UC_3 | Medium | BR_2 |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| TC#003 | UC_3 | Medium | BR_2 |'
- en: '| TC#004 | UC_3 | Medium | BR_2 |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| TC#004 | UC_3 | Medium | BR_2 |'
- en: '| TC#005 | UC_1 | High | BR_1 |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| TC#005 | UC_1 | High | BR_1 |'
- en: '**Bi-directional traceability matrix:** This is where ...'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**双向可追溯矩阵：** 这是...'
- en: Benefits of the traceability matrix
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可追溯矩阵的好处
- en: 'The following are the benefits of the traceability matrix:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可追溯矩阵的好处：
- en: It makes it easy to track the status of test execution
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使跟踪测试执行状态变得容易
- en: It helps to ensure whether the test scenarios provide complete test coverage
    before the test execution begins
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于确保测试场景在测试执行开始之前提供完整的测试覆盖
- en: It identifies which requirements need more testing efforts in terms of resource
    allocation, time, debugging, or defect resolution time
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它确定了哪些需求在资源分配、时间、调试或缺陷解决时间方面需要更多的测试工作。
- en: It addresses and resolves issues ahead of time to reduce their impact on the
    project
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提前解决问题，以减少对项目的影响
- en: It monitors the project's progress and estimates completion time well in advance
    by reducing the risk of failure
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过减少失败的风险，监控项目的进展并提前估计完成时间
- en: In [Chapter 8](02a5b49e-4312-4149-941d-4948fc23db2d.xhtml), *Defect Management
    Phase,* we'll see how to link defects to the test cases, and in [Chapter 9](da0a480b-81d0-4369-8359-ddd0fd749ffe.xhtml), *Requirement
    Management,* we'll learn how to link requirements to the test cases. For now,
    let's see how each Jira plugin generates the traceability report.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](02a5b49e-4312-4149-941d-4948fc23db2d.xhtml)中，*缺陷管理阶段*，我们将看到如何将缺陷与测试用例关联，在[第9章](da0a480b-81d0-4369-8359-ddd0fd749ffe.xhtml)中，*需求管理*，我们将学习如何将需求与测试用例关联。现在，让我们看看每个Jira插件如何生成可追溯报告。
- en: Traceability in synapseRT
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: synapseRT中的可追溯性
- en: 'The traceability matrix in synapseRT can be generated from the Traceability
    tab on the left panel of the page. We have to enter the details, such as requirements
    (Epic, Task, Story, or Requirement) or project, and the relevant test plan (if
    any exists), for which we want to generate a traceability matrix. The following
    screenshot shows a forward traceability matrix generated in synapseRT. It shows
    the details, such as the requirements, their relevant test cases, their current
    execution status, and any linked defects. We also have an option to view traceability
    as a Matrix or Tree:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: synapseRT中的可追溯矩阵可以从页面左侧的可追溯性选项卡生成。我们必须输入详细信息，例如需求（Epic、Task、Story或Requirement）或项目，以及我们要生成可追溯矩阵的相关测试计划（如果存在）。以下截图显示了在synapseRT中生成的前向可追溯矩阵。它显示了需求的详细信息，其相关的测试用例，它们当前的执行状态以及任何关联的缺陷。我们还可以选择将可追溯性视为矩阵或树：
- en: '![](Images/d93a2e65-2186-42e2-91f6-78e251ae0026.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/d93a2e65-2186-42e2-91f6-78e251ae0026.png)'
- en: Traceability in Zephyr
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zephyr中的可追溯性
- en: 'Zephyr provides both, forward and backward traceability reports. Let''s understand
    how to create them in detail:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Zephyr提供前向和后向的可追溯报告。让我们详细了解如何创建它们：
- en: 'To create a forward traceability matrix, specify the current version and select
    the requirement issue type from the list, such as Epic, Story, or Tasks, and click
    on the search icon. Based on the input parameters, Zephyr lists the relevant issue
    types on the page. Select the checkbox for the issue and the Requirements to Defects
    for which you want to generate the traceability matrix:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建前向可追溯矩阵，指定当前版本并从列表中选择需求问题类型，例如Epic、Story或Tasks，并单击搜索图标。根据输入参数，Zephyr在页面上列出了相关的问题类型。选择问题的复选框和要生成可追溯矩阵的需求到缺陷：
- en: '![](Images/f7283f43-800a-4936-9a99-1e78a8e6c6dc.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/f7283f43-800a-4936-9a99-1e78a8e6c6dc.png)'
- en: 'The forward traceability matrix generated in Zephyr shows a relationship between
    requirements, their linked test cases, their execution status, and linked defects.
    We have a requirement, `ZP-1`, and there are three test cases added to this requirement.
    The Executions column shows further details about the execution status of each
    test case, for example, as a test case, `ZP-9` has two executions and both times
    it failed. It also has a linked defect, `ZP-11`, added in the Defects column:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zephyr生成的前向可追溯矩阵显示了需求、其关联的测试用例、其执行状态和关联的缺陷之间的关系。我们有一个需求`ZP-1`，并且有三个测试用例添加到此需求。`Executions`列显示了每个测试用例的执行状态的进一步详细信息，例如，作为一个测试用例，`ZP-9`有两次执行，两次都失败。它还有一个链接的缺陷`ZP-11`，添加在`Defects`列中：
- en: '![](Images/58f04516-9c1e-4454-b4ec-d6288c8fbc18.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/58f04516-9c1e-4454-b4ec-d6288c8fbc18.png)'
- en: 'Use the preceding steps to generate the backward traceability matrix. In this
    case, we will select the issue type as Bug, which we want to generate a traceability
    matrix for Zephyr shows all the relevant bug issues on the screen—select the one
    for which you want to generate the traceability, select the type as Defect to
    Requirements, and click on the Generate button:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用上述步骤生成后向可追溯矩阵。在这种情况下，我们将选择Bug作为问题类型，我们希望为其生成Zephyr的可追溯矩阵，屏幕上显示了所有相关的bug问题-选择要生成可追溯性的问题，选择类型为缺陷到需求，并单击生成按钮：
- en: '![](Images/07f0930d-e552-4e1c-bc64-1d2b46d5c15a.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/07f0930d-e552-4e1c-bc64-1d2b46d5c15a.png)'
- en: 'As shown in the following screenshot, we have a backward traceability matrix
    that establishes a relationship between the defect of a test case and its relevant
    requirements. This matrix has the Defects, Executions, Tests, and Requirements columns
    with the linked Jira issues. In both the cases, we have an option to export the
    traceability in HTML or Excel formats:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下截图所示，我们有一个后向可追溯矩阵，它建立了测试用例的缺陷与相关需求之间的关系。该矩阵具有带有链接的Jira问题的缺陷、执行、测试和需求列。在这两种情况下，我们可以选择以HTML或Excel格式导出可追溯性：
- en: '![](Images/cdcb8152-7143-4755-89dd-e4064110f582.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/cdcb8152-7143-4755-89dd-e4064110f582.png)'
- en: Traceability in Test Management
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试管理中的可追溯性
- en: 'In the Test Management plugin, the traceability report details the Coverage,
    which shows the requirements; Test Cases and Test Executions results, showing
    the details about the test case; and Issues, which details the defects found during
    test execution:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试管理插件中，可追溯报告详细说明了覆盖范围，显示了需求；测试用例和测试执行结果，显示了测试用例的详细信息；以及问题，详细说明了测试执行期间发现的缺陷：
- en: '![](Images/71a09acb-4b8a-4bb0-9705-9f266c747a13.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/71a09acb-4b8a-4bb0-9705-9f266c747a13.png)'
- en: Reports
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告
- en: Reports are a formalized way of effectively and regularly communicating the
    status of the project's progress. They play a key role in the project management
    process. Details provided in the reports are helpful in identifying and mitigating
    the risks that might lead to the failure of the project.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 报告是有效和定期传达项目进展状态的正式方式。它们在项目管理过程中发挥着关键作用。报告中提供的细节有助于识别和减轻可能导致项目失败的风险。
- en: Reports act as a project health-checker and help managers to track any deviation
    from the agreed scope, time, cost, budget, and stated resource requirements necessary to
    meet the quality. These reports also act as reference documents as a part of the
    knowledge base that can be maintained and shared within an organization.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 报告充当项目健康检查员，并帮助管理者跟踪任何偏离约定范围、时间、成本、预算和所需资源的情况，以满足质量要求。这些报告也作为知识库的一部分，可以在组织内进行维护和共享。
- en: Types of reports
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 报告类型
- en: 'Reporting needs vary based on the targeted audience. Jira reports are helpful
    to determine the statistics of the project and can be customized based on the
    people, projects, versions, or issue types that we will be exploring here. In
    [Chapter 10](c75f6a6f-2192-4307-9e7d-faeb17bffb17.xhtml), *Test Execution Status
    Reporting*, we''ll explore the different types of reports supported by Jira plugins.
    For now, let''s look at the types of reports supported by Jira:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 报告的需求根据目标受众而有所不同。Jira报告有助于确定项目的统计数据，并可以根据我们将在这里探讨的人员、项目、版本或问题类型进行定制。在[第10章](c75f6a6f-2192-4307-9e7d-faeb17bffb17.xhtml)中，《测试执行状态报告》，我们将探讨Jira插件支持的不同类型的报告。现在，让我们看看Jira支持的报告类型：
- en: '**Agile**: Agile reports are useful to track the progress of the project by
    generating various types of reports. It gives more insights into the project and
    helps the project team to address the issues in time. It helps to compare and
    contract the projected timelines for the project.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**敏捷**：敏捷报告有助于通过生成各种类型的报告来跟踪项目的进展。它可以更深入地了解项目，并帮助项目团队及时解决问题。它有助于比较和对比项目的预期时间表。'
- en: '**Burndown Chart**: This graph helps to ...'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**燃尽图**：这张图有助于...'
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered how each phase of test management can be performed
    using the Test Management plugins in Jira. We also compared the features provided
    by each plugin. Requirements are the documented needs of the end user, which are
    captured in Jira using issue types. We learned to add and modify issue types and
    workflows for use in our projects in Jira. Test cases can be organized based on
    components or requirements using test suites. We saw how test suites can be created
    in Jira using the plugins. Planning is essential to manage the testing phase.
    The test plan enables us to strategize how tests will be executed. We compared
    how each plugin provides the test plan feature. Traceability reports help us backtrack
    defects to test cases and requirements. We explored how each plugin provides its
    version of traceability reports. Finally, we familiarized ourselves with the reports
    section in Jira, which will be covered in detail in [Chapter 10](c75f6a6f-2192-4307-9e7d-faeb17bffb17.xhtml), *Test
    Execution Status Reporting*.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何使用Jira中的测试管理插件执行测试管理的每个阶段。我们还比较了每个插件提供的功能。需求是最终用户的文档化需求，可以使用问题类型在Jira中捕获。我们学会了如何在Jira中为我们的项目添加和修改问题类型和工作流程。测试用例可以根据组件或需求进行组织，使用测试套件。我们看到了如何使用插件在Jira中创建测试套件。规划对于管理测试阶段至关重要。测试计划使我们能够制定测试的执行策略。我们比较了每个插件如何提供测试计划功能。可追溯性报告帮助我们将缺陷追溯到测试用例和需求。我们探讨了每个插件如何提供其版本的可追溯性报告。最后，我们熟悉了Jira中的报告部分，这将在[第10章](c75f6a6f-2192-4307-9e7d-faeb17bffb17.xhtml)中《测试执行状态报告》中进行详细介绍。
- en: In the next chapter, we'll look at the best approaches for selecting various
    project execution workflows, based on the project's needs.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将根据项目的需求，探讨选择各种项目执行工作流的最佳方法。
