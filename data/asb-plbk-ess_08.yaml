- en: Chapter 7. Node Discovery and Clustering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。节点发现和集群化
- en: For most real-world scenarios, we would need to create a cluster of compute
    nodes with the applications running on top, which are linked together. For example,
    the WordPress site that we have been building requires web servers and databases
    connected together.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数现实场景，我们需要创建一个计算节点集群，其上运行着相互连接的应用程序。例如，我们正在构建的WordPress网站需要将Web服务器和数据库连接在一起。
- en: Clustered infrastructure has a topology where one class of nodes should be able
    to discover information about the different, or the same, class of servers. For
    example, the WordPress application servers need to discover information about
    database servers, and load balancers need to know about the IP address/hostname
    of each web server that it's serving traffic to. This chapter focuses on what
    primitives Ansible offers to group together nodes and discover the attributes
    of interconnected nodes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 集群基础设施具有拓扑结构，其中一类节点应该能够发现关于不同或相同类别服务器的信息。例如，WordPress应用服务器需要发现关于数据库服务器的信息，而负载均衡器需要了解每个Web服务器的IP地址/主机名，以便将流量发送到这些服务器。本章重点介绍Ansible提供的用于将节点分组并发现相互连接的节点属性的原语。
- en: 'In this chapter, we will learn about:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习以下内容：
- en: Discovering information about other nodes in the cluster
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现集群中其他节点的信息
- en: Generating configurations dynamically using the magic variables discovered
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用发现的魔术变量动态生成配置
- en: Why and how to enable fact caching
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么以及如何启用事实缓存
- en: Node discovery with magic variables
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用魔术变量进行节点发现
- en: 'We have looked at user-defined variables as well as system data, that is, facts.
    In addition to these, there are a few variables that define the meta information
    about the nodes, inventory, and plays, for example, which groups a node belongs
    to, what groups are part of the inventory, which nodes belong to which group,
    and so on. These variables, which are implicitly set, are called **magic** variables,
    and are very useful for discovering nodes and topology information. The following
    table lists the most useful magic variables, and their description:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了用户定义的变量以及系统数据，即事实。除了这些之外，还有一些变量用于定义关于节点、清单和播放的元信息，例如节点属于哪些组、哪些组包含在清单中、哪些节点属于哪些组等。这些隐式设置的变量称为**魔术**变量，对于发现节点和拓扑信息非常有用。下表列出了最有用的魔术变量及其描述：
- en: '| Magic Variable | Description |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 魔术变量 | 描述 |'
- en: '| --- | --- |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `hostvars` | These are lookup variables or facts set on another host. |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `hostvars` | 这些是设置在另一台主机上的查找变量或事实。 |'
- en: '| `groups` | This is the list of groups in the inventory. This can be used
    to walk over a group of nodes to discover its topology information. |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `groups` | 这是清单中组的列表。可以使用它来遍历一组节点以发现其拓扑信息。 |'
- en: '| `group_names` | This is the list of groups that the node belongs to. |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `group_names` | 这是节点所属的组列表。 |'
- en: '| `inventory_hostname` | This is the hostname set in the inventory file. It
    can be different to the `ansible_hostname` fact. |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `inventory_hostname` | 这是清单文件中设置的主机名。它可能与`ansible_hostname`事实不同。 |'
- en: '| `play_hosts` | This is the list of all the hosts that belong to the current
    play. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `play_hosts` | 这是属于当前播放的所有主机的列表。 |'
- en: In addition to the preceding table, there are a few additional magic variables,
    for example, the `delegate_to`, `inventory_dir` and `inventory_file` parameters,
    however, these are not relevant to node discovery and are less frequently used.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上表之外，还有一些额外的魔术变量，例如`delegate_to`、`inventory_dir`和`inventory_file`参数，但这些与节点发现无关，使用频率较低。
- en: We are now going to create a new role to serve as a load balancer, which relies
    on this node discovery feature provided by the magic variables.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个新角色作为负载均衡器，该角色依赖于魔术变量提供的节点发现功能。
- en: Creating the load balancer role
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建负载均衡器角色
- en: We created the Nginx and MySQL roles to serve the WordPress site. However, if
    we have to build a scalable site, we also need to add a load balancer to the mix.
    This load balancer will then act as an entry point for the incoming requests,
    and then spread the traffic across the available web servers. Let's consider the
    following scenario, where our fifanews site has become an instant hit. The traffic
    is growing exponentially, and the single web server approach that we have been
    using is showing cracks. We need to scale out horizontally and add more web servers.
    Once we start creating more web servers, we also need to have some mechanism to
    balance traffic across those. We have been tasked to create a `haproxy` role,
    which would discover all web servers in our cluster automatically and add to its
    configurations.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了 Nginx 和 MySQL 角色来服务 WordPress 网站。但是，如果我们必须构建可扩展的网站，我们还需要添加一个负载均衡器。这个负载均衡器将作为传入请求的入口点，然后将流量分散到可用的
    Web 服务器上。让我们考虑以下情况，我们的 fifanews 站点已经成为一瞬间的热门。流量呈指数增长，我们一直在使用的单个 Web 服务器方法正在出现问题。我们需要水平扩展并添加更多的
    Web 服务器。一旦我们开始创建更多的 Web 服务器，我们还需要一些机制来平衡这些流量。我们被委托创建一个 `haproxy` 角色，它将自动发现我们集群中的所有
    Web 服务器并将其添加到其配置中。
- en: 'The following diagram explains this scenario with haproxy as a frontend, balancing
    the load across web servers in the backend. Haproxy is a widely used open source
    TCP/HTTP load balancer. Let''s take a look at the following diagram:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下图解释了使用 HAProxy 作为前端，在后端平衡 Web 服务器负载的情况。HAProxy 是一个广泛使用的开源 TCP/HTTP 负载均衡器。让我们看看下面的图表：
- en: '![Creating the load balancer role](img/B03800_07_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![创建负载均衡器角色](img/B03800_07_01.jpg)'
- en: 'In the next steps, we will not only create a `haproxy` module, but also have
    it configured automatically with the IP addresses of all the web server nodes
    using magic variables:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的步骤中，我们不仅将创建一个 `haproxy` 模块，还将使用魔术变量自动配置其 IP 地址为所有 Web 服务器节点：
- en: 'Let''s start by creating the scaffolding required to write this role, using
    the following command:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们从使用以下命令创建编写此角色所需的框架开始：
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output will look as follows:'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will now add some variables related to the `haproxy` role to the variable
    defaults:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将向变量默认添加与 `haproxy` 角色相关的一些变量：
- en: '[PRE2]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Even though it's a good practice to add a parameter for each configuration that
    haproxy supports, we will stick to a subset of parameters while writing this role;
    this is specially useful for node discovery.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管为 haproxy 支持的每个配置添加参数是一个好的做法，但在编写这个角色时，我们将坚持使用一部分参数；这对于节点发现特别有用。
- en: 'Let''s now create some tasks and handlers, which install, configure, and manage
    the haproxy service on an Ubuntu host:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一些任务和处理程序，在 Ubuntu 主机上安装、配置和管理 haproxy 服务：
- en: '[PRE3]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here is the analysis of the preceding code:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是前述代码的分析：
- en: 'As per the best practices, we created separate task files for each phase: install,
    configure, and service. We then called these from the main tasks file, that is,
    the `tasks/main.yml` file.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据最佳实践，我们为每个阶段创建了单独的任务文件：install、configure 和 service。然后我们从主任务文件，即 `tasks/main.yml`
    文件中调用这些文件。
- en: The configuration file for haproxy will be created in `/etc/haproxy/haproxy.cfg`
    using a Jinja2 template. In addition to creating the configuration, we also need
    to enable the `haproxy` service in the `/etc/defaults/haproxy` file.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HAProxy 的配置文件将使用 Jinja2 模板创建在 `/etc/haproxy/haproxy.cfg` 中。除了创建配置外，我们还需要在 `/etc/defaults/haproxy`
    文件中启用 `haproxy` 服务。
- en: Install, service, and handlers are similar to the roles that we created earlier,
    hence we will skip the description.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装、服务和处理程序与我们之前创建的角色类似，因此我们将跳过描述。
- en: 'We have defined the usage of templates in the `configure.yml` file. Let''s
    now create the templates:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `configure.yml` 文件中定义了模板的使用。现在让我们创建模板：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The second template that we created at `roles/haproxy/templates/haproxy.cfg.j2`
    is of particular interest to us pertaining to node discovery. The following diagram
    shows the relevant section with the usage of magic variables marked:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `roles/haproxy/templates/haproxy.cfg.j2` 创建的第二个模板对于我们来说尤为重要，与节点发现相关。下图显示了标记了魔术变量的相关部分：
- en: '![Creating the load balancer role](img/B03800_07_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![创建负载均衡器角色](img/B03800_07_02.jpg)'
- en: 'Let''s analyze this template snippet:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析这个模板片段：
- en: 'We are using the magic variable `groups` to discover all hosts that belong
    to the group `www` in the inventory, as follows:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们正在使用魔术变量 `groups` 来查找清单中属于 `www` 组的所有主机，如下所示：
- en: '{% for host in groups[''www''] -%}'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{% for host in groups[''www''] -%}'
- en: 'For each discovered host, we fetch facts as well as user-defined variables
    using the `hostvars` parameter, which is another magic variable. We are looking
    up facts and user-defined variables, as well as another magic variable, which
    is `inventory_hostname`, as follows:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个发现的主机，我们使用 `hostvars` 参数获取事实以及用户定义的变量，这是另一个魔术变量。我们正在查找事实和用户定义的变量，以及另一个魔术变量
    `inventory_hostname`，如下所示：
- en: '{{ hostvars[host][''ansible_eth1''][''ipv4''][''address''] }}'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{{ hostvars[host][''ansible_eth1''][''ipv4''][''address''] }}'
- en: '[PRE5]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To apply this role to the load balancer host defined in the inventory, we need
    to create a play, which should be part of the `site.yml` file, which is our main
    playbook:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此角色应用于清单中定义的负载均衡器主机，我们需要创建一个 play，这应该是 `site.yml` 文件的一部分，这是我们的主 playbook：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, run the playbook using the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下命令运行 playbook：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding run will install `haproxy` and create a configuration with all
    web servers added to the `haproxy.cfg` file in the backends section. An example
    of the `haprxy.cfg` file is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 上述运行将安装 `haproxy` 并在后端部分的 `haproxy.cfg` 文件中添加所有 web 服务器的配置。`haproxy.cfg` 文件的示例如下所示：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Accessing facts for non-playbook hosts
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问非 playbook 主机的事实
- en: 'In the earlier exercise, we launched the main playbook, which invokes all the
    other playbooks to configure the entire infrastructure. At times, we may just
    want to configure a portion of our infrastructure, in which case, we can just
    invoke the individual playbooks, such as `lb.yml`, `www.yml`, or `db.yml`. Let''s
    try running the Ansible playbook just for the load balancers:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的练习中，我们启动了主 playbook，该 playbook 调用所有其他 playbook 来配置整个基础架构。有时，我们可能只想配置基础架构的一部分，在这种情况下，我们可以只调用个别的
    playbook，例如 `lb.yml`、`www.yml` 或 `db.yml`。让我们尝试仅为负载均衡器运行 Ansible playbook：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Oops! It failed! Here is the snapshot of the snippet from the output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！失败了！这是输出片段的快照：
- en: '![Accessing facts for non-playbook hosts](img/B03800_07_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![访问非 playbook 主机的事实](img/B03800_07_03.jpg)'
- en: 'Ansible exits with an error as it was not able to find a variable from the
    host, which is not part of the playbook anymore. Here is how Ansible behaves when
    it comes to magic variables:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 因为无法从主机中找到不再属于 playbook 的变量而退出出错。下面是当涉及到魔术变量时 Ansible 的行为方式：
- en: Ansible starts to gather facts while it runs the code on a host. These facts
    are then stored in the memory for the duration of the playbook run. This is the
    default behavior, and can be turned off.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 Ansible 在主机上运行代码时，它开始收集事实。然后将这些事实存储在内存中，以供 playbook 运行期间使用。这是默认行为，可以关闭。
- en: For host B to discover variables from host A, Ansible should have communicated
    with host A earlier in the playbook.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要使主机 B 从主机 A 发现变量，Ansible 应该在 playbook 的早期与主机 A 进行通信。
- en: This behavior from Ansible can cause undesired results and can limit a host
    to discover information about nodes that are only part of its own play.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 的这种行为可能导致不良结果，并且可能限制主机发现关于仅属于其自己 play 的节点的信息。
- en: Facts caching with Redis
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Redis 进行事实缓存
- en: 'Failure to discover facts from non-playbook hosts can be avoided by caching
    facts. This feature was added in version 1.8 of Ansible and supports caching facts
    between playbook runs in **Redis**, a key-value in the memory data store. This
    requires two changes:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过缓存事实来避免从非 playbook 主机中发现事实的失败。此功能已在 Ansible 1.8 版本中添加，并支持在 **Redis** 中缓存事实，在内存数据存储中的键值。这需要两个更改：
- en: Installing and starting the Redis service on the Ansible control node
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Ansible 控制节点上安装并启动 Redis 服务
- en: Configuring Ansible to send facts to the instance of Redis
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Ansible 将事实发送到 Redis 实例
- en: 'Let''s now install and start the Redis server using the following commands:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用以下命令安装并启动 Redis 服务器：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will install Redis on the Ubuntu host and start the service. If you have
    an `rpm` package-based system, you can install it as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 Ubuntu 主机上安装 Redis 并启动服务。如果您有基于 `rpm` 包的系统，可以按照以下方式安装：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Before enabling facts caching, it's a good idea to first check if you are running
    a version of Ansible equal to, or greater, than 1.8\. You can do so by running
    the command `$ ansible –version`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在启用事实缓存之前，首先检查您是否正在运行与 1.8 版本相等或更高版本的 Ansible。您可以通过运行命令 `$ ansible –version`
    来执行此操作。
- en: 'Now that we have started Redis, it''s time to configure Ansible. Let''s edit
    the `ansible.cfg` file as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动了 Redis，是时候配置 Ansible 了。让我们按照以下步骤编辑 `ansible.cfg` 文件：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s now validate this setup by running the playbook, which configures web
    servers:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过运行配置 web 服务器的 playbook 来验证这个设置：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s take a look at the following screenshot:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看下面的截图：
- en: '![Facts caching with Redis](img/B03800_07_04.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![使用Redis进行事实缓存](img/B03800_07_04.jpg)'
- en: 'Now we will try running the load balancer playbook again using the following
    command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将尝试再次运行负载均衡器playbook，使用以下命令：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This time it goes through successfully. It's able to discover facts for the
    web server, which is not part of the play.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次成功通过。它能够发现不属于play的Web服务器的事实。
- en: Caching facts in files
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在文件中缓存事实
- en: 'Even though using Redis is the recommended approach, it''s possible to cache
    facts in flat files as well. Ansible can write facts to files using the JSON format.
    To enable a JSON file as a format, we just need to edit the `ansible.cfg` file
    as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管使用Redis是推荐的方法，但也可以将事实缓存到平面文件中。Ansible可以使用JSON格式将事实写入文件。要将JSON文件作为格式启用，我们只需编辑`ansible.cfg`文件如下：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Ensure that the directory specified exists with the correct permissions:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 确保指定的目录存在且具有正确的权限：
- en: '[PRE16]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: After making these changes, all we have to do is run the playbook, and Ansible
    will start writing facts to JSON files named after the hosts created under this
    directory.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些更改后，我们所要做的就是运行playbook，Ansible将开始将事实写入以此目录下创建的主机的JSON文件中。
- en: Review questions
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾问题
- en: 'Do you think you''ve understood the chapter well enough? Try answering the
    following questions to test your understanding:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你认为你已经足够理解本章了吗？试着回答以下问题来测试你的理解：
- en: Are magic variables different to facts? What are they used for?
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 神奇变量与事实变量有何不同？它们用于什么？
- en: Which magic variable would allow us to walk over a list of web servers and enumerate
    an IP address for each?
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个神奇变量能让我们遍历一个Web服务器列表，并为每个枚举一个IP地址？
- en: Why is facts caching required? What are the different modes for caching facts?
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么需要事实缓存？缓存事实的不同模式是什么？
- en: Will the `inventory_hostname` fact always be the same as the `ansible_hostname`
    fact?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`inventory_hostname`事实变量是否总是与`ansible_hostname`事实变量相同？'
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to discover information about other nodes in
    the cluster to connect them together. We started with the introduction to magic
    variables and looked at the most commonly used ones. We then started creating
    a role for haproxy, which auto-discovers web servers and creates configurations
    dynamically. Finally, we looked at the issue of accessing information about hosts
    not in the playbook, and you learned how to solve it by enabling the caching of
    facts. Magic variables are very powerful, especially while orchestrating your
    infrastructure with Ansible, where discovering topology information automatically
    is very useful.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何发现群集中其他节点的信息以将它们连接在一起。我们从介绍神奇变量开始，然后看了看最常用的变量。然后，我们开始为haproxy创建角色，它会自动发现Web服务器并动态创建配置。最后，我们看了一下如何访问不在playbook中的主机的信息的问题，并且您学会了如何通过启用事实缓存来解决它。神奇变量非常强大，特别是在使用Ansible编排基础架构时，自动发现拓扑信息非常有用。
- en: In the next chapter, you will learn how to securely pass data using vault, an
    encrypted data store.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用vault安全地传递数据，这是一个加密的数据存储。
