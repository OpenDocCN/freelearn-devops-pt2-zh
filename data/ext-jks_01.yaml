- en: Chapter 1. Preparatory Steps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。准备步骤
- en: In this first chapter, we will start off by looking at Jenkins from several
    different perspectives; how to obtain and run it, some of the ways and the reasons
    people use it, and what it provides to them. In doing so, we will take a look
    at some standard use cases and examine how a Jenkins installation will often evolve
    over a period of time—typically starting off with only the basic installation
    and core features, then progressively becoming more customized and advanced with
    different types of extensions. We will start off with "ready-made" plugins, and
    then progress towards extending these before looking at how to develop your own
    plugins.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这第一章中，我们将从几个不同的角度来看Jenkins；如何获取和运行它，人们使用它的方式和原因，以及它为他们提供了什么。在这样做的过程中，我们将看一些标准用例，并检查Jenkins安装通常会随着时间的推移而演变的方式——通常从基本安装和核心功能开始，然后逐渐变得更加定制和先进，使用不同类型的扩展。我们将从“现成的”插件开始，然后逐步扩展这些插件，然后看如何开发自己的插件。
- en: We will then summarize the high-level aims of this book, and give the details
    of what you should hopefully gain from them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将总结本书的高层目标，并详细说明您希望从中获得的内容。
- en: We will provide an overview of the various tools and the environment setup that
    you will need in order to run the practical examples covered in the subsequent
    chapters, and we will review the best practices of **Continuous Integration**
    (**CI**) by identifying some of the ways that Jenkins can be used to achieve them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将概述你需要运行后续章节中涵盖的实际示例所需的各种工具和环境设置，并通过识别Jenkins可以用来实现这些最佳实践的一些方式来审查**持续集成**（**CI**）的最佳实践。
- en: Throughout this book, it is assumed that you already have some working knowledge
    of Jenkins, so we will not spend much time covering the basics, such as installing
    and starting Jenkins, or detailing the usage of standard features and core functions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，假设您已经对Jenkins有一些工作知识，因此我们不会花太多时间来介绍基础知识，比如安装和启动Jenkins，或者详细说明标准功能和核心功能的使用。
- en: If you would like more details on these topics, there are numerous helpful tutorials
    and examples available online; the **Use Jenkins** section of the Jenkins homepage,
    [https://jenkins-ci.org](https://jenkins-ci.org), is often a good starting point
    for help with general setup and usage questions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想了解更多关于这些主题的细节，在线有许多有用的教程和示例；Jenkins主页的**使用Jenkins**部分，[https://jenkins-ci.org](https://jenkins-ci.org)，通常是寻求一般设置和使用问题帮助的好起点。
- en: Getting started with Jenkins
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Jenkins
- en: As a Java application, Jenkins can be installed and run in different ways depending
    on your requirements, personal preferences, and the environment that you are running
    it in.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个Java应用程序，Jenkins可以根据您的要求、个人偏好和运行环境的不同方式进行安装和运行。
- en: 'The simplest and easiest approach to quickly get Jenkins up and running is
    by setting up Java, downloading the latest Jenkins WAR file from the Jenkins homepage
    ([www.jenkins-ci.org](http://www.jenkins-ci.org)), and then simply starting it
    from the command line like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 快速启动Jenkins的最简单和最简单的方法是设置Java，从Jenkins主页([www.jenkins-ci.org](http://www.jenkins-ci.org))下载最新的Jenkins
    WAR文件，然后像这样从命令行启动它：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following figure demonstrates the use of this approach by running just
    two simple commands:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示了通过运行两个简单命令来使用这种方法：
- en: '`wget http://mirrors.jenkins-ci.org/war/latest/jenkins.war`:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`wget http://mirrors.jenkins-ci.org/war/latest/jenkins.war`：'
- en: This command downloads the latest version of Jenkins from the main site.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令从主站点下载最新版本的Jenkins。
- en: '`wget` is a Linux utility that fetches files from the Web—if you are on a platform
    that does not have `wget`, you can simply save the link (the `jenkins.war` file)
    via your browser to a working directory instead.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`wget`是一个从网络获取文件的Linux实用程序——如果您使用的平台没有`wget`，您可以通过浏览器将链接（`jenkins.war`文件）保存到工作目录。'
- en: 'The URL is obtained by copying the **Latest & Greatest** link from the homepage
    at [https://jenkins-ci.org/](https://jenkins-ci.org/). Note that there is also
    an option to download and use the Long-Term Support release instead of the current,
    latest, and greatest, as explained here: [https://wiki.jenkins-ci.org/display/JENKINS/LTS+Release+Line](https://wiki.jenkins-ci.org/display/JENKINS/LTS+Release+Line).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: URL是通过从主页[https://jenkins-ci.org/](https://jenkins-ci.org/)复制**最新和最伟大**链接获得的。请注意，还有一个选项可以下载并使用长期支持版本，而不是当前的、最新的和最伟大的版本，如下所述：[https://wiki.jenkins-ci.org/display/JENKINS/LTS+Release+Line](https://wiki.jenkins-ci.org/display/JENKINS/LTS+Release+Line)。
- en: This is preferable for more conservative installations, where stability is more
    important than having latest features.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于更保守的安装来说更可取，稳定性比拥有最新功能更重要。
- en: '`java –jar jenkins.war`:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`java –jar jenkins.war`：'
- en: 'This second command tells Java to run the WAR file that we just downloaded
    as an application, which produces the resulting output that you can see in the
    following screenshot—Jenkins unpacking from the WAR file, checking and initializing
    the various subsystems, and starting up a process on port `8080`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这第二个命令告诉Java运行我们刚刚下载的WAR文件作为一个应用程序，产生了你可以在下面的截图中看到的结果输出——Jenkins从WAR文件中解压，检查和初始化各个子系统，并在端口`8080`上启动一个进程：
- en: '![Getting started with Jenkins](../images/00002.jpeg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![开始使用Jenkins](../images/00002.jpeg)'
- en: Downloading and starting Jenkins
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下载和启动Jenkins
- en: 'This simple process is usually all that is required to both download the latest
    version of Jenkins and get it up and running. You should now be able to access
    the web interface at `http://localhost:8080` through your browser and begin setting
    up jobs to make Jenkins work for you:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的过程通常是下载最新版本的Jenkins并让它运行所需的全部。现在你应该能够通过浏览器访问`http://localhost:8080`的web界面，并开始设置工作来让Jenkins为你工作：
- en: '![Getting started with Jenkins](../images/00003.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![开始使用Jenkins](../images/00003.jpeg)'
- en: The Jenkins start page
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins启动页面
- en: Extending the basic setup
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展基本设置
- en: 'When you exit from the command prompt or shell that started the process that
    we looked at previously, the Jenkins instance will stop with the exit, so for
    anything beyond a very quick ad hoc test, some form of initialization or process
    management script is highly recommended. Such a script can also be easily tailored
    to perform a few "nice to have" functions for you, for example, things such as
    these:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当您从启动我们之前查看的进程的命令提示符或shell退出时，Jenkins实例将随着退出而停止，因此除了非常快速的临时测试外，强烈建议使用某种初始化或进程管理脚本。这样的脚本也可以很容易地定制，以执行一些对您有益的功能，例如以下内容：
- en: Starting up at system boot time
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在系统启动时启动
- en: Catering to `stop|start|restart|status` requests
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 满足`stop|start|restart|status`请求
- en: Redirecting console output to a log file so that you can monitor it for issues
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将控制台输出重定向到日志文件，以便您可以监视其中的问题
- en: Running as a background/daemon process
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为后台/守护进程运行
- en: Running on a nonstandard port by setting the `--httpPort=` parameter, in cases
    where port `8080` is already used by another application
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过设置`--httpPort=`参数在非标准端口上运行，在端口`8080`已被另一个应用程序使用的情况下
- en: Binding to a specific network interface, rather than the default `0.0.0.0` value
    using the `--httpListenAddress=` option
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绑定到特定的网络接口，而不是使用`--httpListenAddress=`选项的默认值`0.0.0.0`
- en: 'This Ubuntu-based example script from the home page demonstrates many of the
    previously mentioned features of Jenkins that is running under Tomcat. The script
    can be found at [https://wiki.jenkins-ci.org/display/JENKINS/JenkinsLinuxStartupScript](https://wiki.jenkins-ci.org/display/JENKINS/JenkinsLinuxStartupScript)
    and is as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个基于Ubuntu的示例脚本从主页演示了Jenkins在Tomcat下运行的许多先前提到的功能。该脚本可以在[https://wiki.jenkins-ci.org/display/JENKINS/JenkinsLinuxStartupScript](https://wiki.jenkins-ci.org/display/JENKINS/JenkinsLinuxStartupScript)找到，如下所示：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that the [http://jenkins-ci.org/](http://jenkins-ci.org/) home page also
    hosts **Native Installers** for many popular operating systems under the **Native
    packages** column. These pages provide download links and installation instructions
    for each OS.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[http://jenkins-ci.org/](http://jenkins-ci.org/)主页还托管了许多流行操作系统的**本机安装程序**，在**本机软件包**栏下。这些页面提供了每个操作系统的下载链接和安装说明。
- en: 'You may want to look at running Jenkins in a J2EE container too, which can
    often lead to a more seamless fit with your existing software stack and architecture.
    This may mean that you will inherit additional benefits, such as the container''s
    logging, authentication, authorization, or resilience. Jenkins can be run with
    many popular J2EE compatible containers, including the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还想考虑在J2EE容器中运行Jenkins，这通常会更好地与您现有的软件堆栈和架构相匹配。这可能意味着您将继承额外的好处，如容器的日志记录、身份验证、授权或弹性。Jenkins可以在许多流行的J2EE兼容容器中运行，包括以下内容：
- en: WebSphere
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebSphere
- en: WebLogic
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WebLogic
- en: Tomcat
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Tomcat
- en: JBoss
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JBoss
- en: Jetty
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jetty
- en: Jonas
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jonas
- en: There are more `init` script examples and detailed installation instructions
    readily available on the Web, which should cover any combination of operating
    system and container setup. The point of this is that you should be able to set
    up Jenkins to suit your environment and preferences.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Web上有更多的`init`脚本示例和详细的安装说明，应该涵盖任何操作系统和容器设置的组合。这意味着您应该能够设置Jenkins以适应您的环境和偏好。
- en: For the purposes of this book, we will assume that Jenkins is being run directly
    from the command line on the local host. If you are using a J2EE container to
    host the application or running the application on a remote host, the only difference
    you will notice is that you may need to perform additional admin and deployment
    steps.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本书的目的，我们将假设Jenkins直接从本地主机的命令行运行。如果您使用J2EE容器来托管应用程序或在远程主机上运行应用程序，您唯一会注意到的区别是您可能需要执行额外的管理和部署步骤。
- en: Jenkins evolution
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins演进
- en: Typically, most users or organizations will start off on their Jenkins journey
    by setting up a basic, standard Jenkins installation to manage a few simple development
    tasks. The most common use is to build your source code, either periodically or
    whenever it changes in your central repository (Git, Subversion, and so on).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，大多数用户或组织会通过设置基本的标准Jenkins安装来开始他们的Jenkins之旅，以管理一些简单的开发任务。最常见的用途是构建您的源代码，无论是定期还是在中央仓库（Git、Subversion等）中更改时。
- en: Using Jenkins to automate this type of simple and repetitive task often provides
    a lot of useful benefits very quickly and easily. Straight out of the box, so
    to speak, you get a bundle of helpful features, such as task scheduling and job
    triggering, building and testing report pages, sending out email notifications
    and alerts when there are new issues, and providing rapid and live feedback of
    how healthy (or not!) your code base currently is. If you don't already have a
    tool in place to provide these things, then setting up a standard Jenkins instance
    will provide these initial basic features, which on their own may well transform
    your development process.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Jenkins自动化这种简单和重复的任务通常会很快而轻松地提供许多有用的好处。直接使用，您将获得一系列有用的功能，如任务调度和作业触发、构建和测试报告页面、在出现新问题时发送电子邮件通知和警报，以及提供当前代码库的健康（或不健康）的快速实时反馈。如果您还没有工具来提供这些功能，那么设置标准的Jenkins实例将提供这些初始基本功能，这些功能本身可能会改变您的开发流程。
- en: The next logical step after this is to gradually add a little more intelligence
    and complexity to the setup—does the code compile ok? How many unit tests have
    been passed now, how long does the application take to compile? Oh, and could
    we show on a web page who has changed which parts of the code base? Is our application
    running faster or better than it was previously, and is it stable? Even before
    we begin to add any type of extension or customization, the core Jenkins installation
    provides a plethora of options here—you can choose to build your application on
    any platform that runs Java (which means pretty much anywhere these days), and
    you can also do this in whatever way that suits you and your current setup the
    best, including using the standard and popular build tools such as Ant or Maven,
    and/or re-using your existing Ant or Maven build scripts, or your Linux Shell
    or Windows DOS scripts.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这之后的下一个逻辑步骤是逐渐向设置中添加更多的智能和复杂性——代码是否编译正常？现在通过了多少单元测试？应用程序编译需要多长时间？哦，我们能否在网页上显示谁改变了代码库的哪些部分？我们的应用程序是否比以前运行得更快或更好，是否稳定？甚至在我们开始添加任何类型的扩展或定制之前，核心的Jenkins安装就提供了大量的选项——你可以选择在任何运行Java的平台上构建你的应用程序（这意味着现在几乎任何地方都可以），你也可以以最适合你和当前设置的方式来做，包括使用标准和流行的构建工具，如Ant或Maven，并/或重用现有的Ant或Maven构建脚本，或者你的Linux
    Shell或Windows DOS脚本。
- en: You can also easily set up a cross-platform environment by deploying Jenkins
    Slave Nodes, which will allow you to run different jobs on different hosts. This
    can be useful in the environments that use a combination of operating systems;
    for example, your application runs on Linux, and you want to run your browser-based
    tests using Internet Explorer on a Windows host.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过部署Jenkins从节点轻松设置跨平台环境，这将允许您在不同的主机上运行不同的作业。这在使用组合操作系统的环境中可能很有用；例如，您的应用程序在Linux上运行，您希望在Windows主机上使用Internet
    Explorer运行基于浏览器的测试。
- en: This ability to act as an easily configurable "wrapper" for your existing process,
    combined with the flexible nature of Jenkins, makes it very easy to adapt your
    particular setup to suit your requirements with minimal change or interruption.
    This makes Jenkins far easier to implement than having to change your existing
    build and deployment processes and practices just to accommodate the requirements
    of a new tool.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作为现有流程易于配置的“包装器”的能力，再加上Jenkins的灵活性，使得很容易以最小的变化或中断来适应您的特定设置。这使得Jenkins比不得不改变现有的构建和部署流程和实践来适应新工具的要求要容易得多。
- en: 'After this stage, the benefits of setting up a Continuous Integration environment
    often become quite obvious: if we can automatically build our code and package
    our application so easily, wouldn''t it be great if we could go on to deploy it
    too? And then, if we did that, we could automatically test how our new application
    performs on a replica of the target platform!'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段之后，建立持续集成环境的好处往往变得非常明显：如果我们可以自动构建我们的代码并打包我们的应用程序，那么如果我们能够自动部署它，那不是很好吗？然后，如果我们这样做了，我们可以自动测试我们的新应用程序在目标平台的副本上的性能如何！
- en: On reaching this point, Jenkins will be a pivotal tool in your Continuous Integration
    process, and the more you can extend it to suit your growing and specific requirements,
    the more benefit you will receive from it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在达到这一点时，Jenkins将成为您持续集成过程中的关键工具，您可以将其扩展以满足不断增长和特定的需求，您将从中获得更多的好处。
- en: This leads us to extending Jenkins, which is what we will be looking at in the
    rest of the book.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这将引导我们扩展Jenkins，这是我们将在本书的其余部分中研究的内容。
- en: The simplest way to extend Jenkins is through its fantastic and ever-expanding
    wealth of plugins. It is always recommended and informative to browse through
    them; existing plugins are frequently being improved upon and updated with new
    features, and new plugins are being added to the list all the time. We are going
    to do more than just review a few popular plugins here though—by the end of this
    book, you should have the ability to take your usage of Jenkins to the next level
    to create your own custom plugins and extensions and work with the many features
    and interfaces that Jenkins provides us with for extension and interaction.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展Jenkins的最简单方法是通过其不断扩展的插件。建议并且有益的是浏览它们；现有的插件经常得到改进，并更新了新功能，新的插件也在不断增加到列表中。然而，我们将不仅仅在这里审查一些流行的插件——在本书结束时，您应该能够将您对Jenkins的使用提升到一个新的水平，创建您自己的定制插件和扩展，并使用Jenkins提供给我们的许多功能和接口进行扩展和交互。
- en: 'We will be taking a detailed look at the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细研究以下内容：
- en: The different ways in which we can use the existing features
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用现有功能的不同方式
- en: Interacting with Jenkins through its various interfaces and APIs
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过其各种接口和API与Jenkins进行交互
- en: How to interact with Jenkins from within your IDE
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在IDE内部与Jenkins进行交互
- en: Ways to build upon the existing functionality to suit your needs
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建现有功能以满足您的需求的方法
- en: Developing, testing, and building your own custom Jenkins extension
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发、测试和构建您自己的定制Jenkins扩展。
- en: 'Here are the main tools that we will be using to help us extend Jenkins, along
    with some information on setting them up, and the sources for further help and
    information if required:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将使用的主要工具，以及有关设置它们的信息，以及如果需要的话进一步帮助和信息的来源：
- en: '**Java Development Kit** (**JDK**): You will need a version of this at the
    same bit level as your Java IDE, that is, both will need to be 32 bit or 64 bit,
    depending on your architecture and preference. You can choose from IBM, Oracle,
    or OpenJDK 6.0 or later. Each vendor supplies installation instructions for all
    major platforms.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java开发工具包**（**JDK**）：您需要与您的Java IDE相同位级的版本，也就是说，根据您的架构和偏好，两者都需要是32位或64位。您可以选择IBM、Oracle或OpenJDK
    6.0或更高版本。每个供应商都为所有主要平台提供安装说明。'
- en: '**Java IDE**: We will mainly be using Eclipse, but will cater to NetBeans and
    IntelliJ too, where possible.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java IDE：我们主要将使用Eclipse，但也会尽可能满足NetBeans和IntelliJ。
- en: 'The most recent versions of each of these IDEs are available at their respective
    websites:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 每个IDE的最新版本都可以在各自的网站上找到：
- en: '[https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/)'
- en: '[https://netbeans.org/downloads/](https://netbeans.org/downloads/)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://netbeans.org/downloads/](https://netbeans.org/downloads/)'
- en: '[https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.jetbrains.com/idea/download/](https://www.jetbrains.com/idea/download/)'
- en: '**Mylyn**: This is used to communicate with Jenkins from our IDE. If Mylyn
    is not already included in your IDE, you can download it from the Eclipse site
    here: [http://www.eclipse.org/mylyn/downloads/](http://www.eclipse.org/mylyn/downloads/).
    We will cover this in detail in [Chapter 3](part0024_split_000.html#MSDG1-497efea050ab4b7582c7e2ed4ba920ee
    "Chapter 3. Jenkins and the IDE"), *Jenkins and the IDE*.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mylyn：这用于从我们的IDE与Jenkins进行通信。如果您的IDE中尚未包含Mylyn，您可以从Eclipse网站下载它：[http://www.eclipse.org/mylyn/downloads/](http://www.eclipse.org/mylyn/downloads/)。我们将在[第3章](part0024_split_000.html#MSDG1-497efea050ab4b7582c7e2ed4ba920ee
    "第3章。Jenkins和IDE")中详细介绍这一点，*Jenkins和IDE*。
- en: '**Maven**: We will be using Maven 3 to build the Jenkins source code and our
    own custom plugin. Maven is a Java tool, so it will need to know about the JDK
    of your system.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven：我们将使用Maven 3来构建Jenkins源代码和我们自己的自定义插件。Maven是一个Java工具，因此它需要了解您系统的JDK。
- en: '**Jenkins Source**: This will be downloaded by Maven.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jenkins源：这将由Maven下载。
- en: '**Git**: On most Linux platforms, the equivalent of `sudo apt-get install git`
    should suffice. On Mac, there are several options, including the `git-osx` installer
    on Sourceforge. For Microsoft Windows, there is an executable installer available
    at [http://msysgit.github.io/](http://msysgit.github.io/).'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git：在大多数Linux平台上，`sudo apt-get install git`的等效命令应该足够了。在Mac上，有几个选项，包括Sourceforge上的`git-osx`安装程序。对于Microsoft
    Windows，可以在[http://msysgit.github.io/](http://msysgit.github.io/)上找到可执行安装程序。
- en: We will go in to more specifics on the installation and usage of each of these
    components as we use them in the later chapters.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们在后面的章节中使用它们，我们将更详细地介绍每个组件的安装和使用。
- en: Continuous Integration with Jenkins
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jenkins进行持续集成
- en: 'Before we conclude this chapter, here is a list of the key practices of Continuous
    Integration (as defined by Martin Fowler in 2006) with the examples of the ways
    in which Jenkins can be used to help you achieve them:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本章之前，这里是持续集成的关键实践列表（由Martin Fowler在2006年定义），以及Jenkins可以帮助您实现这些实践的方式的示例：
- en: '**Maintain a Single Source Repository**: Jenkins can interact with all modern
    source code and version control repositories—some abilities are built-in, others
    can be added as extensions.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护单一源代码存储库：Jenkins可以与所有现代源代码和版本控制存储库进行交互——一些功能是内置的，其他功能可以作为扩展添加。
- en: '**Automate the Build**: As described earlier in the use cases, this is one
    of the core aims of Jenkins and often the main driver to start using Jenkins.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化构建：正如前面的用例中所描述的，这是Jenkins的核心目标之一，也经常是开始使用Jenkins的主要动力。
- en: '**Make Your Build Self-Testing**: This is usually the second step in setting
    up a CI environment with Jenkins—once you automate the building of the code, automating
    the tests as well is a natural progression.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使您的构建自我测试：这通常是在使用Jenkins设置CI环境的第二步——一旦自动化了代码构建，自动化测试也是自然的进展。
- en: '**Everyone Commits To the Mainline Every Day**: We can''t really force developers
    to do this, unfortunately. However, we can quite easily highlight and report who
    is doing—or not doing—what, which should eventually help them learn to follow
    this best practice.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个人每天都致力于主线：不幸的是，我们无法强迫开发人员这样做。然而，我们可以很容易地突出和报告谁在做什么，或者没有做什么，这最终应该帮助他们学会遵循这一最佳实践。
- en: '**Every Commit Should Build the Mainline on an Integration Machine**: Builds
    can be triggered by developer commits, and Jenkins Slave Nodes can be used to
    build and provide accurate replica environments to build upon.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次提交都应在集成机器上构建主线：构建可以由开发人员的提交触发，并且Jenkins从节点可以用于构建并提供准确的副本环境以进行构建。
- en: '**Fix Broken Builds Immediately**: This is another developer best practice
    that needs to be adopted—when Jenkins shows red, the top focus should be on fixing
    the issue until it shows green. No one should commit new changes while the build
    is broken, and Jenkins can be configured to communicate the current status in
    the most effective way.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 立即修复破损的构建：这是另一个需要采用的开发人员最佳实践——当Jenkins显示红色时，重点应该放在修复问题上，直到显示绿色。在构建破损时，没有人应该提交新的更改，Jenkins可以配置为以最有效的方式传达当前状态。
- en: '**Keep the Build Fast**: By offloading and spreading work to distributed Slave
    Nodes and by breaking down builds to identify and focus on the areas that have
    changed, Jenkins can be tuned to provide a rapid response to changes—a good target
    would be to check in a change and obtain a clear indication of the result or impact
    under 10 minutes.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持构建速度快：通过将工作分派和分布到分布式从节点，并通过分解构建来识别和专注于已更改的区域，Jenkins可以被调整为对变化提供快速响应——一个良好的目标是提交更改并在10分钟内获得清晰的结果或影响。
- en: '**Test in a Clone of the Production Environment**: After compiling the new
    change, downstream Jenkins jobs can be created that will prepare the environment
    and take it to the required level—applying database changes, starting up dependent
    processes, and deploying other prerequisites. Using virtual machines or containers
    in conjunction with Jenkins to automatically start up environments in a known-good
    state can be very useful here.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生产环境的克隆中进行测试：在编译新更改后，可以创建下游Jenkins作业，这些作业将准备环境并将其带到所需的级别——应用数据库更改，启动依赖进程，并部署其他先决条件。在Jenkins与虚拟机或容器结合使用，自动在已知良好状态下启动环境可能非常有用。
- en: '**Make it Easy for Anyone to Get the Latest Executable**: Jenkins can be set
    up to act as a web server hosting the latest version at a known location so that
    everyone (and other processes/consumers) can easily fetch it, or it can also be
    used to send out details and links to interested parties whenever a new version
    has been uploaded to Nexus, Artifactory, and so on.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**让任何人都能轻松获取最新的可执行文件**：Jenkins可以设置为充当托管最新版本的Web服务器，以便每个人（以及其他进程/消费者）可以轻松获取，或者还可以用于在新版本已上传到Nexus、Artifactory等时向感兴趣的方发送详细信息和链接。'
- en: '**Everyone can see what''s happening**: There are many ways in which Jenkins
    communications can be extended—email alerts, desktop notifications, Information
    Radiators, RSS feeds, Instant Messaging, and many more—from lava lamps and traffic
    lights to the ubiquitous toy rocket launchers!'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每个人都可以看到发生了什么**：Jenkins的通信方式可以通过多种方式扩展——包括电子邮件提醒、桌面通知、信息辐射器、RSS订阅、即时通讯等等——从熔岩灯和交通灯到无处不在的玩具火箭发射器！'
- en: '**Automate Deployment**: This is usually a logical progression of the `Build
    -> Test -> Deploy` automation sequence, and Jenkins can help in many ways; with
    Slave Nodes running on the deployment host, or jobs set up to connect to the target
    and update it with the most recently built artifact.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化部署**：这通常是“构建->测试->部署”自动化顺序的逻辑延伸，Jenkins可以在许多方面提供帮助；通过在部署主机上运行从属节点，或者设置作业以连接到目标并使用最近构建的构件进行更新。'
- en: The benefits that can be realized once you have achieved the preceding best
    practices are often many and significant—your team will release software of higher
    quality and will do this more quickly and for less cost than before. However,
    setting up an automated build, test, and deployment pipeline will never be enough
    in itself; the tests, environment, and culture must be of sufficient quality too,
    and having the developers, managers, and business owners "buy in" to the processes
    and practices often makes all the difference.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您实现了前述的最佳实践，通常会有许多重要的好处——您的团队将会发布质量更高的软件，并且比以往更快地完成，成本也更低。然而，仅仅建立自动化构建、测试和部署流程是不够的；测试、环境和文化也必须具有足够的质量，而且开发人员、经理和业主对流程和实践的认可通常会产生重大影响。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this preparatory chapter, we have taken a look at the basics of Jenkins;
    how it is used from both functional and practical points of view. We have run
    through a high-level overview of the toolset that we will be using to extend Jenkins
    in the following chapters and reviewed the best practices for Continuous Integration
    along with the ways in which Jenkins can be used to help your team achieve them.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个准备章节中，我们已经从功能和实际角度了解了Jenkins的基础知识。我们已经对我们将在接下来的章节中使用的工具集进行了高层次的概述，并回顾了持续集成的最佳实践以及Jenkins如何帮助您的团队实现这些实践的方式。
- en: In the next chapter, we will take a look at the ways in which we can extend
    the Jenkins user interface to make it more productive and intelligent, and how
    we can extend the user experience to make life easier and more productive for
    end users, as well as for Jenkins admins, build scripts, and processes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何扩展Jenkins用户界面，使其更加高效和智能，以及如何扩展用户体验，使最终用户、Jenkins管理员、构建脚本和流程的生活更加轻松和高效。
