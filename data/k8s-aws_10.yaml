- en: Managing Container Images
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理容器映像
- en: A container orchestration platform needs a solid foundation to run our containers.
    One vital piece of infrastructure is the location where we store our container
    images, which will allow us to reliably fetch them when creating our pods.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 容器编排平台需要一个坚实的基础来运行我们的容器。基础设施的一个重要组成部分是存储容器映像的位置，这将允许我们在创建pod时可靠地获取它们。
- en: From a developer's point of view, it should be very easy and fast to push new
    images whilst developing the software we wish to deploy to Kubernetes. We'll also
    want to have mechanisms that help us with versioning, cataloging, and describing
    how to use our images, in order to facilitate deployments and reduce the risk
    of delivering the wrong version or configuration of our software.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发人员的角度来看，应该非常容易和快速地推送新的映像，同时开发我们希望部署到Kubernetes的软件。我们还希望有机制帮助我们进行版本控制、编目和描述如何使用我们的图像，以便促进部署并减少交付错误版本或配置的风险。
- en: Container images can often contain intellectual property, proprietary source
    code, infrastructure configuration secrets, and even business secrets. Therefore,
    we need to have proper authentication and authorization mechanisms to protect
    them from unwanted access.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 容器映像通常包含知识产权、专有源代码、基础设施配置秘密，甚至商业机密。因此，我们需要适当的身份验证和授权机制来保护它们免受未经授权的访问。
- en: In this chapter, we're going to learn how to leverage the AWS **Elastic Container
    Registry** (**ECR**) service to store our container images in a manner that tackles
    all these needs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何利用AWS弹性容器注册表（ECR）服务来存储我们的容器映像，以满足所有这些需求。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Pushing Docker images to ECR
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Docker映像推送到ECR
- en: Tagging images
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给图像打标签
- en: Labeling images
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给图像打标签
- en: Pushing Docker images to ECR
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Docker映像推送到ECR
- en: Currently, the most commonly adopted way to store and deliver Docker images
    is through Docker Registry, an open source application by Docker that hosts Docker
    repositories. This application can be deployed on-premises, as well as used as
    a service from multiple providers, such as **Docker Hub**, **Quay.io**, and **AWS
    ECR**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，存储和传递Docker映像的最常见方式是通过Docker注册表，这是Docker的一个开源应用程序，用于托管Docker仓库。这个应用程序可以部署在本地，也可以作为多个提供商的服务使用，比如Docker
    Hub、Quay.io和AWS ECR。
- en: The application is a simple, stateless service, where most of the maintenance
    work involves making sure that storage is available, safe, and secure. As any
    seasoned system administrator knows, that is far from an easy ordeal, especially,
    if there is a large data store. For that reason, and especially if you're just
    starting out, it is highly recommended to use a hosted solution and let someone
    else deal with keeping your images safe and readily available.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序是一个简单的无状态服务，其中大部分维护工作涉及确保存储可用、安全和安全。正如任何经验丰富的系统管理员所知道的那样，这绝非易事，特别是如果有一个大型数据存储。因此，特别是如果您刚开始，强烈建议使用托管解决方案，让其他人负责保持图像的安全和可靠可用。
- en: ECR is AWS's approach to a hosted Docker registry, where there's one registry
    per account, uses AWS IAM to authenticate and authorize users to push and pull
    images. By default, the limits for both repositories and images are set to 1,000\.
    As we'll see, the setup flow feels very similar to other AWS services, whilst
    also being familiar for Docker Registry users.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ECR是AWS对托管Docker注册表的方法，每个帐户有一个注册表，使用AWS IAM对用户进行身份验证和授权以推送和拉取图像。默认情况下，仓库和图像的限制都设置为1,000。正如我们将看到的，设置流程感觉非常类似于其他AWS服务，同时也对Docker注册表用户来说是熟悉的。
- en: Creating a repository
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个仓库
- en: 'To create a repository, it''s as simple as executing the following `aws ecr`
    command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个仓库，只需执行以下`aws ecr`命令即可：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will create a repository for storing our `randserver` application. Its
    output should look like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个存储我们“randserver”应用程序的存储库。其输出应该如下所示：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A nice addition to your repositories is a life cycle policy that cleans up
    older versions of your images, so that you don''t eventually get blocked from
    pushing a newer version. This can be achieved as follows, using the same `aws
    ecr` command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对您的存储库的一个不错的补充是一个生命周期策略，清理旧版本的图像，这样您最终不会被阻止推送更新版本。可以通过使用相同的“aws ecr”命令来实现：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This particular policy will start cleaning up once have more than 800 images
    on the same repository. You could also clean up based on the images, age, or both,
    as well as consider only some tags in your cleanup.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在同一个存储库中有超过800个图像，这个特定的策略将开始清理。您还可以根据图像、年龄或两者进行清理，以及仅考虑清理中的一些标签。
- en: For more information and examples, refer to [https://docs.aws.amazon.com/AmazonECR/latest/userguide/lifecycle_policy_examples.html](https://docs.aws.amazon.com/AmazonECR/latest/userguide/lifecycle_policy_examples.html).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息和示例，请参阅[https://docs.aws.amazon.com/AmazonECR/latest/userguide/lifecycle_policy_examples.html](https://docs.aws.amazon.com/AmazonECR/latest/userguide/lifecycle_policy_examples.html)。
- en: Pushing and pulling images from your workstation
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从您的工作站推送和拉取图像
- en: 'In order use your newly-created ECR repository, first we''re going to need
    to authenticate your local Docker daemon against the ECR registry. Once again,
    `aws ecr` will help you achieve just that:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用您新创建的ECR存储库，首先我们需要对本地Docker守护程序进行身份验证，以针对ECR注册表。再次，`aws ecr`将帮助您实现这一点：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will output a `docker login` command that will add a new user-password
    pair for your Docker configuration. You can copy-paste that command, or you can
    just run it as follows; the results will be the same:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出一个“docker login”命令，该命令将为您的Docker配置添加一个新的用户密码对。您可以复制粘贴该命令，或者您可以按照以下方式运行它；结果将是一样的：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, pushing and pulling images is just like using any other Docker registry,
    using the outputted repository URI that we got when creating the repository:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，推送和拉取图像就像使用任何其他Docker注册表一样，使用创建存储库时得到的存储库URI输出：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Setting up privileges for pushing images
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置推送图像的权限
- en: 'IAM users'' permissions should allow your users to perform strictly only the
    operations they actually need to, in order to avoid any possible mistakes that
    might have a larger area of impact. This is also true for ECR management, and
    to that effect, there are three AWS IAM managed policies that greatly simplify
    achieving it:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: IAM用户的权限应该允许您的用户执行严格需要的操作，以避免可能会产生更大影响的任何可能的错误。对于ECR管理也是如此，为此，有三个AWS IAM托管策略大大简化了实现它的过程：
- en: '`AmazonEC2ContainerRegistryFullAccess`: This allows a user to perform any operation
    on your ECR repositories, including deleting them, and should therefore be left
    for system administrators and owners.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonEC2ContainerRegistryFullAccess`：这允许用户对您的ECR存储库执行任何操作，包括删除它们，因此应该留给系统管理员和所有者。'
- en: '`AmazonEC2ContainerRegistryPowerUser`: This allows a user to push and pull
    images on any repositories, which is very handy for developers that are actively
    building and deploying your software.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonEC2ContainerRegistryPowerUser`：这允许用户在任何存储库上推送和拉取图像，对于正在积极构建和部署您的软件的开发人员非常方便。'
- en: '`AmazonEC2ContainerRegistryReadOnly`: This allows a user to pull images on
    any repository, which is useful for scenarios where developers are not pushing
    their software from their workstation, and are instead just pulling internal dependencies
    to work on their projects.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AmazonEC2ContainerRegistryReadOnly`：这允许用户在任何存储库上拉取图像，对于开发人员不是从他们的工作站推送软件，而是只是拉取内部依赖项来处理他们的项目的情况非常有用。'
- en: 'All of these policies can be attached to an IAM user as follows, by replacing
    the policy name at the end of the ARN with a suitable policy (as described previously)
    and pointing `--user-name` to the user you are managing:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些策略都可以附加到IAM用户，方法是通过将ARN末尾的策略名称替换为适当的策略（如前所述），并将`--user-name`指向您正在管理的用户：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: All these AWS managed policies do have an important characteristic—all of them
    add permissions for all repositories on your registry. You'll probably find several
    use cases where this is far from ideal—maybe your organization has several teams
    that do not need access over each other's repositories; maybe you would like to
    have a user with the power to delete some repositories, but not all; or maybe
    you just need access to a single repository for **Continuous Integration** (**CI**)
    setup.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些由AWS管理的策略都具有一个重要特征-它们都为您的注册表上的所有存储库添加权限。您可能会发现有几种情况远非理想-也许您的组织有几个团队不需要访问彼此的存储库；也许您希望有一个有权删除一些存储库但不是全部的用户；或者您只需要对**持续集成**（**CI**）设置中的单个存储库进行访问。
- en: If your needs match any of these described situations, you should create your
    own policies with as granular permissions as required.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的需求符合上述描述的任何情况，您应该创建自己的策略，并具有所需的细粒度权限。
- en: 'First, we will create an IAM group for the developers of our `randserver` application:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将为我们的`randserver`应用程序的开发人员创建一个IAM组：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then we''ll add the `johndoe` user to the group:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将`johndoe`用户添加到组中：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we''ll need to create our policy so that we can attach it to the group.
    Copy this JSON document to a file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要创建我们的策略，以便我们可以将其附加到组上。将此JSON文档复制到文件中：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To create the policy, execute the following, passing the appropriate path for
    the JSON document file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建策略，请执行以下操作，传递适当的JSON文档文件路径：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The final step is then to attach the policy to the group, so that `johndoe`
    and all future developers of this application can use the repository from their
    workstation, just like we did previously:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将策略附加到组，以便`johndoe`和这个应用程序的所有未来开发人员可以像我们之前一样从他们的工作站使用存储库：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Use images stored on ECR in Kubernetes
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Kubernetes中使用存储在ECR上的图像
- en: You may recall, in [Chapter 7](a873e36a-237e-471d-ae10-d15d29fe47f6.xhtml), *A
    Production-Ready Cluster* that we attached the IAM policy, `AmazonEC2ContainerRegistryReadOnly`,
    to the instance profile used by our cluster nodes. This allows our nodes to fetch
    any images in any repository in the AWS account where the cluster resides.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还记得，在[第7章](a873e36a-237e-471d-ae10-d15d29fe47f6.xhtml)中，*生产就绪的集群*，我们将IAM策略`AmazonEC2ContainerRegistryReadOnly`附加到了我们集群节点使用的实例配置文件。这允许我们的节点在托管集群的AWS帐户中的任何存储库中获取任何图像。
- en: 'In order to use an ECR repository in this manner, you should set the `image`
    field of the pod template on your manifest to point to it, such as in the following
    example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以这种方式使用ECR存储库，您应该将清单上的pod模板的`image`字段设置为指向它，就像以下示例中一样：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Tagging images
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 给图像打标签
- en: 'Whenever a Docker image is pushed to a registry, we need to identify the image
    with a tag. A tag can be any alphanumeric string: `latest stable v1.7.3` and even
    `c31b1656da70a0b0b683b060187b889c4fd1d958` are both perfectly valid examples of
    tags that you might use to identify an image that you push to ECR.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 每当将Docker图像推送到注册表时，我们需要使用标签标识图像。标签可以是任何字母数字字符串：`latest stable v1.7.3`甚至`c31b1656da70a0b0b683b060187b889c4fd1d958`都是您可能用来标识推送到ECR的图像的完全有效的示例标签。
- en: Depending on how your software is developed and versioned, what you put in this
    tag might be different. There are three main strategies that might be adopted
    depending on different types of applications and development processes that that
    we might need to generate images for.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 根据软件的开发和版本控制方式，您在此标签中放入的内容可能会有所不同。根据不同类型的应用程序和开发流程，可能会采用三种主要策略来生成图像。
- en: Version Control System (VCS) references
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制系统（VCS）引用
- en: When you build images from software where the source is managed in a version
    control system, such as Git, the simplest way of tagging your images in this case
    is to utilize the commit ID (often referred to as a SHA when using Git) from your
    VCS. This gives you a very simple way to check exactly which version of your code
    is currently running at any one time.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当您从源代码受版本控制系统管理的软件构建图像时，例如Git，此时标记图像的最简单方式是利用来自您VCS的提交ID（在使用Git时通常称为SHA）。这为您提供了一个非常简单的方式来确切地检查您的代码当前正在运行的版本。
- en: This first strategy is often adopted for applications where small changes are
    delivered in an incremental fashion. New versions of your images might be pushed
    multiple times a day and automatically deployed to testing and production-like
    environments. Good examples of these kinds of applications that are web applications
    and other software delivered as a service.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这种策略通常适用于以增量方式交付小改动的应用程序。您的图像的新版本可能会每天推送多次，并自动部署到测试和类生产环境中。这些应用程序的良好示例是Web应用程序和其他以服务方式交付的软件。
- en: By pushing a commit ID through an automated testing and release pipeline, you
    can easily generate deployment manifests for an exact revision of your software.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将提交ID通过自动化测试和发布流水线，您可以轻松生成软件确切修订版本的部署清单。
- en: Semantic versions
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语义版本
- en: However, this strategy becomes more cumbersome and harder to deal with if you
    are building container images that are intended to be used by many users, whether
    that be multiple users within your organisation or even when you publish images
    publicly for third parties to use. With applications like these, it can be helpful
    to use a semantic version number that has some meaning, helping those that depend
    on you image decide if it safe to move to a newer version.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您正在构建用于许多用户使用的容器图像，无论是您组织内的多个用户，还是当您公开发布图像供第三方使用时，这种策略会变得更加繁琐和难以处理。对于这类应用程序，使用具有一定含义的语义版本号可能会有所帮助，帮助依赖于您图像的人决定是否安全地迁移到新版本。
- en: A common scheme for these sorts of images is called **Semantic Versioning**
    (**SemVer**). This is a version number made up of three individual numbers separated
    by dots. These numbers are known as the **MAJOR**, **MINOR**, and **PATCH** version.
    A semantic version number lays out these numbers in the form `MAJOR.MINOR.PATCH`.
    When a number is incremented, the less significant numbers to the right are reset
    to `0`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图像的常见方案称为**语义化版本**（**SemVer**）。这是由三个由点分隔的单独数字组成的版本号。这些数字被称为**MAJOR**、**MINOR**和**PATCH**版本。语义版本号以`MAJOR.MINOR.PATCH`的形式列出这些数字。当一个数字递增时，右边的不那么重要的数字将被重置为`0`。
- en: 'These version numbers give downstream users useful information about how a
    new version might affect compatibility:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这些版本号为下游用户提供了有关新版本可能如何影响兼容性的有用信息：
- en: The `PATCH` version is incremented whenever a bug or security fix is implemented
    that maintains backwards compatibility
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当实施了一个保持向后兼容的错误修复或安全修复时，`PATCH`版本会递增
- en: The `MINOR` version is incremented whenever a new feature is added that maintains
    backwards compatibility
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每当添加一个保持向后兼容的新功能时，`MINOR`版本号会递增
- en: Any changes that break backwards compatibility should increment the `MAJOR`
    version number
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何破坏向后兼容性的更改都应该增加 `MAJOR` 版本号
- en: This is useful because users of your images know that `MINOR` or `PATCH` level
    changes are unlikely to break anything, so only basic testing should be required
    when upgrading to a new version. But if upgrading to a new `MAJOR` version, they
    ought to check and test the impact on the changes, which might require changes
    to configuration or integration code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这很有用，因为镜像的用户知道 `MINOR` 或 `PATCH` 级别的更改不太可能导致任何问题，因此升级到新版本时只需要进行基本测试。但是，如果升级到新的
    `MAJOR` 版本，他们应该检查和测试更改的影响，这可能需要更改配置或集成代码。
- en: You can read more about SemVer at [https://semver.org/](https://semver.org/).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://semver.org/](https://semver.org/) 了解更多关于 SemVer 的信息。
- en: Upstream version numbers
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上游版本号
- en: Often, when we when build container images that repackage existing software,
    it is desirable to use the original version number of the packaged software itself.
    Sometimes, it can help to add a suffix to version the configuration that you're
    using to package that software with.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当我们构建重新打包现有软件的容器镜像时，希望使用打包软件本身的原始版本号。有时，为了对打包软件使用的配置进行版本控制，添加后缀可能会有所帮助。
- en: In larger organisations, it can be common to package software tools with configuration
    files with organisation-specific default settings. You might find it useful to
    version the configuration files as well as the software tool.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在较大的组织中，常常会将软件工具与组织特定的默认配置文件打包在一起。您可能会发现将配置文件与软件工具一起进行版本控制很有用。
- en: If I were packaging the MySQL database for use in my organisation, an image
    tag might look like `8.0.12-c15`, where `8.0.12` refers to the upstream MySQL
    version and `c15` is a version number I have created for the MySQL configuration
    files included in my container image.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我要为我的组织打包 MySQL 数据库供使用，镜像标签可能看起来像 `8.0.12-c15`，其中 `8.0.12` 是上游 MySQL 版本，`c15`
    是我为包含在我的容器镜像中的 MySQL 配置文件创建的版本号。
- en: Labelling images
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 给镜像贴标签
- en: If you have an even moderately complex workflow for developing and releasing
    your software, you might quickly find yourself wanting to add even more semantic
    information about your images into its tag than just a simple version number.
    This can quickly become unwieldy, as you will need to modify your build and deployment
    tooling whenever you want to add some extra information.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的软件开发和发布流程稍微复杂，您可能会迅速发现自己希望在镜像标签中添加更多关于镜像的语义信息，而不仅仅是简单的版本号。这可能很快变得难以管理，因为每当您想添加一些额外信息时，都需要修改构建和部署工具。
- en: Thankfully, Docker images carry around labels that can be used to store whatever
    metadata is relevant to your image.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢地，Docker 镜像携带标签，可用于存储与镜像相关的任何元数据。
- en: 'Adding a label to your image is done at build time, using the `LABEL` instruction
    in your Dockerfile. The `LABEL` instruction accepts multiple key value pairs in
    this format:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建时，可以使用 Dockerfile 中的 `LABEL` 指令为镜像添加标签。`LABEL` 指令接受多个键值对，格式如下：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Using this instruction, we can store any arbitrary metadata that we find useful
    on our images. And because the metadata is stored inside the image, unlike tags,
    it can't be changed. By using appropriate image labels, we can discover the exact
    revision from our VCS, even if an image has been given an opaque tag, such as `latest`
    or `stable`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此指令，我们可以在镜像上存储任何我们认为有用的任意元数据。由于元数据存储在镜像内部，不像标签那样可以更改。通过使用适当的镜像标签，我们可以发现来自我们版本控制系统的确切修订版，即使镜像已被赋予不透明的标签，如
    `latest` 或 `stable`。
- en: If you want to set these labels dynamically at build time, you can also make
    use of the `ARG` instruction in your Dockerfile.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要在构建时动态设置这些标签，还可以在 Dockerfile 中使用 `ARG` 指令。
- en: 'Let''s look at an example of using build arg''s to set labels. Here is an example
    Dockerfile:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个使用构建参数设置标签的例子。这是一个示例Dockerfile：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When we build the container, we can pass values for our labels using the `--build-arg`
    flag. This is useful when we want to pass dynamic values such as a Git commit
    reference:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们构建容器时，我们可以使用`--build-arg`标志传递标签的值。当我们想要传递动态值，比如Git提交引用时，这是很有用的：
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As with the labels that Kubernetes allows you to attach to the objects in your
    cluster, you are free to label your images with whatever scheme you choose, and
    save whatever metadata makes sense for your organisation.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与Kubernetes允许您附加到集群中对象的标签一样，您可以自由地使用任何方案为您的图像添加标签，并保存对您的组织有意义的任何元数据。
- en: The **Open Container Initiative** (**OCI**), an organization that promotes standards
    for container runtimes and their image formats, has proposed a standard set of
    labels that can be used to provide useful metadata that can then be used by other
    tools that understand them. If you decide to add labels to your container images,
    choosing to use part or all of this set of labels might be a good place to start.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 开放容器倡议（OCI），一个促进容器运行时和其图像格式标准的组织，已经提出了一套标准标签，可以用来提供有用的元数据，然后可以被其他理解它们的工具使用。如果您决定向您的容器图像添加标签，选择使用这套标签的部分或全部可能是一个很好的起点。
- en: 'These labels are all prefixed with `org.opencontainers.image` so that they
    don''t collide with any ad hoc labels that you may already be using:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些标签都以`org.opencontainers.image`为前缀，以便它们不会与您可能已经使用的任何临时标签发生冲突：
- en: '`* org.opencontainers.image.title`: This should be a human-readable title for
    the image. For example, `Redis`.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`* org.opencontainers.image.title`：这应该是图像的可读标题。例如，`Redis`。'
- en: '`org.opencontainers.image.description`: This should be a human -readable description
    of the image. For example, `Redis is an open source key-value store`.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.opencontainers.image.description`：这应该是图像的可读描述。例如，`Redis是一个开源的键值存储`。'
- en: '`org.opencontainers.image.created`: This should contain the date and time that
    the image was created. It should be formatted as per RFC 3339\. For example, `2018-11-25T22:14:00Z`.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.opencontainers.image.created`：这应该包含图像创建的日期和时间。它应该按照RFC 3339格式。例如，`2018-11-25T22:14:00Z`。'
- en: '`org.opencontainers.image.authors`: This should contain contact information
    about the people or organisations responsible for this image. Typically, this
    might be an email address, or other relevant contact information. For example,
    `Edward Robinson <ed@errm.co.uk>`.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.opencontainers.image.authors`：这应该包含有关负责此图像的人或组织的联系信息。通常，这可能是电子邮件地址或其他相关联系信息。例如，`Edward
    Robinson <ed@errm.co.uk>`。'
- en: '`org.opencontainers.image.url`: This should be a URL where more information
    about the image can be found. For example, [https://github.com/errm/kubegratulations](https://github.com/errm/kubegratulations).'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.opencontainers.image.url`：这应该是一个可以找到有关图像更多信息的URL。例如，[https://github.com/errm/kubegratulations](https://github.com/errm/kubegratulations)。'
- en: '`org.opencontainers.image.documentation`: This should be a URL where documentation
    about the image can be found. For example, [https://github.com/errm/kubegratulations/wiki](https://github.com/errm/kubegratulations/wiki).'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.opencontainers.image.documentation`：这应该是一个可以找到有关图像文档的URL。例如，[https://github.com/errm/kubegratulations/wiki](https://github.com/errm/kubegratulations/wiki)。'
- en: '`org.opencontainers.image.source`: This should be a URL where the source code
    used to build an image can be found. You might use it to link to a project page
    on a version control repository, such as GitHub, GitLab, or Bitbucket. For example,
    [https://github.com/errm/kubegratulations](https://github.com/errm/kubegratulations).'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.opencontainers.image.source`：这应该是一个URL，可以在其中找到用于构建镜像的源代码。您可以使用它来链接到版本控制存储库上的项目页面，例如GitHub、GitLab或Bitbucket。例如，[https://github.com/errm/kubegratulations](https://github.com/errm/kubegratulations)。'
- en: '`org.opencontainers.image.version`: This could be a semantic version for the
    software packaged in this image, or it could be a label or tag used in your VCS.
    For example, `1.4.7`.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.opencontainers.image.version`：这可以是打包在此镜像中的软件的语义版本，也可以是您的VCS中使用的标签或标记。例如，`1.4.7`。'
- en: '`org.opencontainers.image.revision`: This should be a reference to a revision
    in your VCS, such as a Git commit SHA. For example, `e2f3bbdf80acd3c96a68ace41a4ac699c203a6a4`.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.opencontainers.image.revision`：这应该是对您的VCS中的修订的引用，例如Git提交SHA。例如，`e2f3bbdf80acd3c96a68ace41a4ac699c203a6a4`。'
- en: '`org.opencontainers.image.vendor`: This should be the name of an organisation
    or individual distributing the image. For example, **Apache Software Foundation**
    (**ASF**).'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.opencontainers.image.vendor`：这应该是分发镜像的组织或个人的名称。例如，**Apache Software Foundation**（**ASF**）。'
- en: '`org.opencontainers.image.licenses`: If your image contains software covered
    by a specific licence, you can list them here. You should use SPDX identifiers
    to refer to the licences. You can find the full list at [https://spdx.org/licenses/](https://spdx.org/licenses/).
    For example, `Apache-2.0`.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.opencontainers.image.licenses`：如果您的镜像包含受特定许可证覆盖的软件，您可以在这里列出它们。您应该使用SPDX标识符来引用许可证。您可以在[https://spdx.org/licenses/](https://spdx.org/licenses/)找到完整的列表。例如，`Apache-2.0`。'
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've learned how easy it is to provision a Docker registry
    to store images for our applications on AWS in a reproducible and foolproof fashion
    using ECR.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了如何轻松地在AWS上配置Docker注册表，以可复制和防错的方式存储我们应用程序的镜像，使用ECR。
- en: We discovered how to push images from our own workstations, how to use IAM permissions
    to restrict access to our images, and how to allow Kubernetes to pull container
    images directly from ECR.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现了如何从我们自己的工作站推送镜像，如何使用IAM权限限制对我们镜像的访问，以及如何允许Kubernetes直接从ECR拉取容器镜像。
- en: You should now be aware of several strategies for tagging your images and know
    how to add additional labels to your images to store metadata about their contents,
    and you have learned about the standard labels recommended by the Open Container
    Initiative image specification.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该了解了几种标记镜像的策略，并知道如何向镜像添加附加标签，以存储有关其内容的元数据，并且您已经了解了Open Container Initiative镜像规范推荐的标准标签。
