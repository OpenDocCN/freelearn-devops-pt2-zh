- en: Chapter 5. Snapshot Your Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。快照您的云
- en: 'In this chapter, we will cover the task of creating instance backups and/or
    snapshots using the native OpenStack capability built into the Compute service
    (Nova). When adopting a true cloud approach, the approach of scaling horizontally
    and disposable resources, you will find great use in leveraging snapshots versus
    traditional backups. Despite that it is good, the best practice is to understand
    both the capabilities and the proper use case for each. We will step through how
    to manually create backups or snapshots first and then transition to creating
    a playbook with roles to fully automate it on a tenant level. We will cover the
    following topics in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖使用内置于计算服务（Nova）的OpenStack能力创建实例备份和/或快照的任务。当采用真正的云方法，即水平扩展和一次性资源的方法时，您会发现在利用快照与传统备份相比时有很大的用处。尽管这很好，但最佳实践是了解每种能力和适当用例。我们将首先逐步介绍如何手动创建备份或快照，然后过渡到创建具有角色的playbook，以完全自动化租户级别的操作。本章将涵盖以下主题：
- en: Defining backups and snapshots
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义备份和快照
- en: Manually creating backups and snapshots
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动创建备份和快照
- en: Restoring an instance backup
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 恢复实例备份
- en: Automation considerations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化考虑
- en: Coding the playbook and roles
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写playbook和角色
- en: The review of playbook and role
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Playbook和角色的审查
- en: Defining backups and snapshots
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义备份和快照
- en: From an OpenStack perspective, there are distinct differences between a backup
    and snapshot of an instance. Those differences could influence the use of each
    of those functions. Keep in mind that with keeping with true cloud behavior, all
    cloud resources are meant to be disposable. You may ask what that statement really
    means. It simply means that any instances or volumes (resources) created to support
    your application functions should be able to be recreated in some sort of automated
    fashion. Instilling the *pets versus cattle* analogy. No longer are the days of
    attempting to bring a sick VM back to life.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从OpenStack的角度来看，备份和实例快照之间存在明显的区别。这些差异可能影响每个功能的使用。请记住，与真正的云行为保持一致，所有云资源都应该是可丢弃的。您可能会问这句话真正意味着什么。它只是意味着为了支持应用功能而创建的任何实例或卷（资源）都应该能够以某种自动化方式重新创建。灌输*宠物与牛*的类比。不再是试图让生病的虚拟机复活的日子。
- en: Destroy the instance, recreate it, and off you go again. These principles remove
    the want for instance backups. With this said, there will be cases where you may
    want to have a backup of an instance. So, let's first examine the capability of
    taking an instance backup.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 销毁实例，重新创建，然后再次开始。这些原则消除了对实例备份的需求。话虽如此，仍会有一些情况下您可能希望备份实例。因此，让我们首先检查获取实例备份的能力。
- en: 'The OpenStack Compute service (Nova) functionality of backing up an instance
    behaves just like any traditional backup process. A purpose of taking a backup
    of an instance would be to preserve the instances current state for later possible
    recovery. Just like any other back process; you can determine the type of backup
    and rotation schedule. Some possible `backup` type parameters can be **daily**
    or **weekly**. The rotation schedule would represent the number of backups to
    keep. A working example of the instance `backup` command via the Nova CLI would
    be as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack计算服务（Nova）备份实例的功能就像任何传统备份过程一样。备份实例的目的是为了保留实例的当前状态，以便以后可能恢复。与任何其他后备过程一样；您可以确定备份类型和轮换计划。一些可能的`备份`类型参数可以是**每日**或**每周**。轮换计划将表示要保留的备份数。通过Nova
    CLI执行实例`备份`命令的工作示例如下：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In full transparency, the Nova `backup` functionality is not in a fully operational
    state as of the time this book was written. The `backup` command at this point
    in time is just a hook put into Nova to set up for future OpenStack service(s)
    focused solely on data protection. The OpenStack Data Protection service, code
    name **Raksha**, will be responsible for helping automate data protection tasks
    such as backups. Raksha is still under development, and it will appear in an upcoming
    OpenStack release. You can read more about Raksha at [https://wiki.openstack.org/wiki/Raksha](https://wiki.openstack.org/wiki/Raksha).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 完全透明地说，截至本书编写时，Nova`备份`功能尚未完全运行。此时的`备份`命令只是Nova中设置的一个挂钩，用于未来专门关注数据保护的OpenStack服务。OpenStack数据保护服务，代号**Raksha**，将负责帮助自动化数据保护任务，如备份。Raksha仍在开发中，并将出现在即将推出的OpenStack版本中。您可以在[https://wiki.openstack.org/wiki/Raksha](https://wiki.openstack.org/wiki/Raksha)上阅读更多关于Raksha的信息。
- en: Now we can move on to talking about snapshots. The Nova functionality of taking
    a snapshot of an instance is similar to a backup, but instead of keeping the backup
    for recovery purposes, it is stored by the image service (Glance) as an image
    template. That image template can then be used to create additional instances
    just like the instance the original snapshot was taken from. It is like making
    a rubber stamp copy of the instance.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续讨论快照。Nova获取实例快照的功能类似于备份，但是不是为了恢复目的而保留备份，而是由镜像服务（Glance）存储为图像模板。然后可以使用该图像模板创建与原始快照所在实例相同的其他实例。这就像制作实例的橡皮图章副本。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please keep in mind that taking a traditional snapshot of an instance will temporarily
    pause the instance until the process completes. If you are seeking to take a snapshot
    without pausing the instance, please review the *Live Snapshots* capability details
    found at [http://docs.openstack.org/openstack-ops/content/snapshots.html](http://docs.openstack.org/openstack-ops/content/snapshots.html).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，对实例进行传统快照会暂时暂停实例，直到过程完成。如果您希望在不暂停实例的情况下进行快照，请查看[http://docs.openstack.org/openstack-ops/content/snapshots.html](http://docs.openstack.org/openstack-ops/content/snapshots.html)上找到的*实时快照*功能详细信息。
- en: I often like the snapshot process to making a golden or gold image of a server
    that would be used to build additional servers. The steps taken would be exactly
    the same. Create the instance with the required OS, install necessary software
    packages, make suggested OS and application security tweaks, certify the applications
    functionality, and then create the snapshot. Having the snapshot capability at
    your fingertips without needing any third-party software is indeed yet another
    powerful tool OpenStack offers.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常喜欢将快照过程比作制作服务器的黄金镜像，该镜像将用于构建其他服务器。所采取的步骤将完全相同。创建具有所需操作系统的实例，安装必要的软件包，进行建议的操作系统和应用程序安全调整，验证应用程序功能，然后创建快照。在不需要任何第三方软件的情况下即可随时使用快照功能，这确实是OpenStack提供的又一个强大工具。
- en: 'A working example of the instance snapshot command via the OpenStackClient
    CLI would be as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过OpenStackClient CLI执行实例快照命令的实际工作示例如下：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Hopefully, this helped provide clear definitions around the differences between
    instance backups and snapshots. Let us now examine the steps required to manually
    create them using the CLI.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这有助于清晰地定义实例备份和快照之间的区别。现在让我们来看看使用CLI手动创建它们所需的步骤。
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For simplicity purposes, we will demonstrate the manual commands using the OpenStack
    CLI only.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，我们将仅使用OpenStack CLI演示手动命令。
- en: Manually creating backups and snapshots
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动创建备份和快照
- en: As stated earlier, the Compute service (Nova) handles the task of creating instance
    backups and snapshots. Just like with every OpenStack service, you must authenticate
    first either by sourcing the OpenRC file discussed in [Chapter 1](ch01.html "Chapter 1. Introduction
    to OpenStack"), *Introduction to OpenStack* or by passing authentication parameters
    in-line with the command. The two tasks individually require different parameter
    values to be provided in order to successfully execute the command. See the examples
    given later.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，计算服务（Nova）负责创建实例备份和快照的任务。与每个OpenStack服务一样，您必须首先进行身份验证，可以通过获取[第1章](ch01.html
    "第1章。OpenStack简介")中讨论的OpenRC文件，*OpenStack简介*或通过在命令中传递内联身份验证参数来进行身份验证。这两个任务分别需要提供不同的参数值才能成功执行命令。请参见后面给出的示例。
- en: 'Here is an instance `backup` using the OpenRC file:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用OpenRC文件的实例“备份”：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Here is an instance `backup` passing authentication parameters in-line:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个使用内联身份验证参数的实例“备份”：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once the command is executed, no output is written back to the screen. You can
    then execute the `openstack image show` command to confirm the update.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令后，不会将任何输出写回屏幕。然后您可以执行`openstack image show`命令来确认更新。
- en: 'A real life working example with an OpenRC file could look something like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OpenRC文件的真实工作示例可能如下所示：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the `openstack image list` command would then be:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`openstack image list`命令的输出将是：
- en: '![Manually creating backups and snapshots](graphics/image_05_001.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![手动创建备份和快照](graphics/image_05_001.jpg)'
- en: With the earlier-mentioned command, you can supply the instance ID or name.
    The example just shown uses the instance name. After sourcing the OpenRC file,
    the `openstack server list` command was executed in order to take note of the
    instance ID or name that you wish to backup. Once you have that information, the
    `nova backup` command can then be executed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面提到的命令，您可以提供实例ID或名称。刚刚显示的示例使用了实例名称。在获取OpenRC文件后，执行`openstack server list`命令以记录您希望备份的实例ID或名称。一旦您获得了这些信息，就可以执行`nova
    backup`命令。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The image service, code name Glance, is responsible for keeping inventory of
    backups, snapshots, and any images manually uploaded by the Cloud operator. To
    view the available inventory, you will have to issue Glance CLI commands and/or
    view them via the **Horizon** dashboard under the **Images** tab.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像服务，代号Glance，负责保留由云操作员手动上传的备份、快照和任何镜像的清单。要查看可用的清单，您将需要发出Glance CLI命令和/或通过**Horizon**仪表板下的**Images**选项卡查看它们。
- en: 'Here is an instance snapshot using an OpenRC file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用OpenRC文件的实例快照：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following is an instance snapshot passing authentication parameters in-line:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用内联身份验证参数的实例快照：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once the command is executed, no output is written back to the screen. You can
    then execute the `openstack image list` command to confirm the update.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 执行命令后，不会将任何输出写回屏幕。然后您可以执行`openstack image list`命令来确认更新。
- en: 'A real life working example with an OpenRC file could look something like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OpenRC文件的真实工作示例可能如下所示：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output of the `openstack image list` command would then be:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`openstack image list`命令的输出将是：
- en: '![Manually creating backups and snapshots](graphics/image_05_002.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![手动创建备份和快照](graphics/image_05_002.jpg)'
- en: Now that we have covered how to create the instance backups and snapshots, it
    only felt right to demonstrate how you can then use them. Particularly, I would
    like to focus on using the instance backups, since I noticed a severe lack of
    documentation around this functionality.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经介绍了如何创建实例备份和快照，那么演示如何使用它们就显得很重要。特别是，我想专注于使用实例备份，因为我注意到在这个功能周围缺乏严重的文档。
- en: Restoring an instance backup
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 恢复实例备份
- en: Although the instance `backup` functionality is not 100% active from a scheduled
    job/automation perspective, you can still use instance backups to restore an instance
    back to a particular point in time. In order to do this, you would use the `nova
    rebuild` command within the Nova CLI. This command will signal the instance to
    shut down, re-image the instance using the `backup` file referenced and then reboot
    the instance.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管实例“备份”功能在计划任务/自动化方面并非100%活跃，但您仍然可以使用实例备份将实例恢复到特定时间点。为了做到这一点，您将使用Nova CLI中的`nova
    rebuild`命令。该命令将指示实例关闭，使用引用的“备份”文件重新映像实例，然后重新启动实例。
- en: 'A working example of the `nova rebuild` command via the Nova CLI would be as
    follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Nova CLI执行`nova rebuild`命令的实际工作示例如下：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `nova rebuild` command also has quite a few optional arguments that can
    be passed with the command. Those optional arguments can do things such as reset
    the admin password or change the name of the instance, for example. I would suggest
    taking a look at the OpenStack CLI documentation, which can be found at [http://docs.openstack.org/cli-reference/content/novaclient_commands.html#novaclient_subcommand_rebuild](http://docs.openstack.org/cli-reference/content/novaclient_commands.html#novaclient_subcommand_rebuild).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`nova rebuild`命令还有一些可选参数可以与命令一起传递。这些可选参数可以执行诸如重置管理员密码或更改实例名称等操作。我建议查看OpenStack
    CLI文档，该文档可以在[http://docs.openstack.org/cli-reference/content/novaclient_commands.html#novaclient_subcommand_rebuild](http://docs.openstack.org/cli-reference/content/novaclient_commands.html#novaclient_subcommand_rebuild)找到。'
- en: Automation considerations
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化考虑
- en: Automating this task was pretty straightforward and did not require any new
    framework decisions. All the other automation decisions we reviewed were previously
    carried over.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化这个任务非常简单，不需要任何新的框架决策。我们之前审查的所有其他自动化决策都已经被采纳。
- en: There was one area worth highlighting that you may too face when automating
    OpenStack tasks using the CLI. The default output of the CLI is **pretty-printed**
    (using the Python **prettytable** module) of which at times is not so pretty when
    you want to sort through the output. Some CLI commands allow specific formatting,
    but in the event the command does not allow it, you have other options. This is
    where the `awk` command becomes your very close ally again. In the next section,
    you will note the specific use of the `awk` command to filter out the values we
    need for the next task within the role.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个值得强调的领域，当您使用CLI自动化OpenStack任务时，您可能也会面临。 CLI的默认输出是**漂亮打印**（使用Python **prettytable**模块），有时当您想要整理输出时并不那么漂亮。一些CLI命令允许特定格式，但如果命令不允许，您还有其他选择。这就是`awk`命令再次成为您非常亲密的盟友的地方。在下一节中，您将注意到`awk`命令的具体用法，以过滤我们在角色中需要的下一个任务的值。
- en: It feels like we are ready to proceed now with creating our next playbook and
    role.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 感觉我们现在准备好继续创建下一个playbook和role了。
- en: Coding the playbooks and roles
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写playbooks和roles
- en: The playbook and role we will now create will allow you to take a snapshot of
    all instances within a single tenant at one time. This distinct task was chosen
    to try to keep the role simple and not to overcomplicate the tasks. You could
    very well also create a role to snapshot or backup all instances in all tenants
    with the removal of just one parameter. Pretty awesome, right? Well, send your
    thank you cards to Ansible for that.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建的playbook和role将允许您一次对单个租户内的所有实例进行快照。选择这个独特的任务是为了保持角色简单，不要使任务过于复杂。您也可以创建一个角色来对所有租户中的所有实例进行快照或备份，只需删除一个参数。很棒，对吧？好吧，感谢Ansible。
- en: At the beginning of this chapter, we reviewed the process of how to take instance
    backups and snapshots. It was a simple two-step process. For the purposes of automating
    this task, we have to add an additional step to the process. That step would be
    to get the tenant ID for the tenant we plan to take the snapshot(s) from. So in
    the big picture, there would be three steps. *Step 1* is to record the tenant
    ID in which you wish to take instance snapshot(s) for. *Step 2* is to now list
    all instance IDs from the tenant. Then, finally, *Step 3* is to actually take
    the instance snapshot(s).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我们审查了如何进行实例备份和快照的过程。这是一个简单的两步过程。为了自动化这个任务，我们必须向过程添加一个额外的步骤。这一步将是获取我们计划从中获取快照的租户的租户ID。因此，在大局中，将有三个步骤。*步骤1*是记录您希望为其获取实例快照的租户ID。*步骤2*是现在列出来自租户的所有实例ID。最后，*步骤3*是实际获取实例快照。
- en: 'Since we are only creating a role in this example, we can start by the `main.yml`
    file within the role directory named `create-snapshot/tasks`. The beginning contents
    of this file will look like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在此示例中我们只创建了一个role，因此我们可以从名为`create-snapshot/tasks`的role目录中的`main.yml`文件开始。该文件的初始内容如下：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The first step of pulling the tenant ID is straightforward with the use of the
    `awk` command and pipe ( `|` ) symbol. This approach is something you will see
    in a lot of the OpenStack documentation. It allows you to take the output of one
    command and filter out the parts you want to keep. First, we will execute the
    project list command, that output will then be used with a filter, the filter
    will search for the tenant name provided via the variable named `tenantname`,
    and finally, output the second column value from the original `project list` command.
    That final output will then be registered with the variable named `tenantid`.
    The `tenantname` variable is defined the same way as in the previous chapter.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`awk`命令和管道（`|`）符号提取租户ID的第一步非常简单。这种方法是您将在许多OpenStack文档中看到的。它允许您获取一个命令的输出并过滤出您想要保留的部分。首先，我们将执行项目列表命令，然后将使用过滤器，该过滤器将搜索通过名为`tenantname`的变量提供的租户名称，并最终输出原始`project
    list`命令的第二列值。然后，将使用名为`tenantid`的变量注册该最终输出。`tenantname`变量的定义方式与上一章相同。
- en: Remember that the `shell` module is used here because we are executing commands
    that require shell-specific operations.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这里使用`shell`模块，因为我们正在执行需要特定于shell的操作的命令。
- en: 'The next task will now list out all instance IDs from the tenant. The code
    to accomplish this looks like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务现在将列出来自租户的所有实例ID。完成此操作的代码如下：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This task is very similar to the first one, except the fact that we are using
    the OpenStackClient CLI instead to list the instances and filtering out just IDs
    removing all leading or trailing characters. I found that the `openstack server
    list` command when using Ansible was very specific about how the instance ID/name
    had to be provided. In order to accomplish this, I decided to use one of the `awk`
    command's built-in variables named `NR`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务与第一个任务非常相似，只是我们使用OpenStackClient CLI而不是列出实例并过滤掉所有前导或尾随字符的ID。我发现当使用Ansible时，`openstack
    server list`命令对实例ID/名称的提供方式非常具体。为了实现这一点，我决定使用`awk`命令的一个内置变量，名为`NR`。
- en: 'The `NR` variable (number of records) within `awk` is intended to supply you
    with the number of records or the line number of the content being filtered. In
    turn, the `NR` variable can be used to focus examination on certain lines as well.
    Here, we use the variable to skip the first three lines of the CLI output. This
    example shows what the normal output would be:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`awk`中的`NR`变量（记录数）旨在为您提供被过滤内容的记录数或行号。反过来，`NR`变量可以用于集中研究某些行。在这里，我们使用该变量跳过CLI输出的前三行。此示例显示了正常输出：'
- en: '![Coding the playbooks and roles](graphics/image_05_003.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![编写playbook和角色](graphics/image_05_003.jpg)'
- en: 'Then, here is what the output looks like when adding the `awk` command, `awk
    ''NR > 3 { print $2 }''`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当添加`awk`命令`awk 'NR > 3 { print $2 }'`时，输出如下：
- en: '![Coding the playbooks and roles](graphics/image_05_004.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![编写playbook和角色](graphics/image_05_004.jpg)'
- en: 'Finally, now that we have our list of instances, we can conclude with the last
    task of taking the snapshot(s). The code to do this would look like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，现在我们有了实例列表，我们可以完成最后一个任务，即拍摄快照。执行此操作的代码如下：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Just as in the previous chapter, defining the `{{item}}` parameter value with
    the module allows us to loop through multiple packages listed here inside the
    `with_items` statement. Also, remember that getting the output after registering
    values into a variable within Ansible requires you to query the `stdout` or `stdout_lines`
    section of the JSON data structure. We then repurposed the tenant name and instance
    ID to name the snapshot for easy future reference. The snapshot name itself can
    be anything you desire, I just felt this naming convention made the most sense.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在上一章中一样，使用模块定义`{{item}}`参数值允许我们循环遍历`with_items`语句中列出的多个软件包。还要记住，在Ansible中将值注册到变量后，需要查询JSON数据结构的`stdout`或`stdout_lines`部分。然后，我们重新利用了租户名称和实例ID来命名快照，以便将来轻松引用。快照名称本身可以是任何您想要的，我只是觉得这种命名约定最有意义。
- en: 'The last two lines in the preceding code, `register` and `failed_when`, had
    to be added due to the output of the `openstack server image create` command.
    If you wanted to provide an output to confirm the successful execution of the
    task, you can add the `openstack image list` command as an additional task in
    your role and either have the task output printed to the screen or saved in a
    file. An example of printing the output to the screen would look like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码的最后两行中，必须添加`register`和`failed_when`，这是由于`openstack server image create`命令的输出。如果您想要提供输出以确认任务的成功执行，可以将`openstack
    image list`命令作为角色的附加任务，并将任务输出打印到屏幕上或保存在文件中。将输出打印到屏幕的示例如下：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You have now completed your third OpenStack administration role. To support
    this role, we now need to create the variable file that will go along with it.
    The variable file named `main.yml` will be located in the `create-snapshot/vars`
    directory.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经完成了第三个OpenStack管理角色。为了支持此角色，我们现在需要创建与之配套的变量文件。名为`main.yml`的变量文件将位于`create-snapshot/vars`目录中。
- en: Tip
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Keep in mind that the values defined in the variable file are intended to be
    changed before each execution for normal everyday use.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，变量文件中定义的值是为了在正常的日常使用中在每次执行之前进行更改的。
- en: 'For this role, there was the only variable that was needed:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于此角色，只需要一个变量：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This variable is intended to be a single value of one of the tenant names for
    which the instance snapshot(s) will be taken.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此变量旨在成为需要拍摄实例快照的租户名称之一的单个值。
- en: Now that our variable file is created, we can move on to creating the master
    playbook file. The file will be named `snapshot-tenant.yml` and saved to the `root`
    directory of the `playbook` directory.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了变量文件，可以继续创建主要的playbook文件。该文件将命名为`snapshot-tenant.yml`，并保存在`playbook`目录的`root`目录中。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The playbook and role names can be anything you choose. Specific names have
    been provided here in order to allow you to easily follow along and reference
    the completed code found in the GitHub repository. The only warning is whatever
    you decide to name the roles must remain uniform when referenced from within the
    playbook(s).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: playbook和角色的名称可以是任何您选择的。这里提供了具体的名称，以便您可以轻松地跟踪并引用GitHub存储库中找到的完整代码。唯一的警告是，无论您决定如何命名角色，都必须在playbook中引用时保持统一。
- en: 'The contents of the `snapshot-tenant.yml` file would be:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`snapshot-tenant.yml`文件的内容将是：'
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The summary of this file is as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件的摘要如下：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: All that is left is to populate our host `inventory` file and the global `variable`
    file. Since we already created these in the previous chapter, there is no need
    to repeat this process. The values defined earlier would remain the same. Here
    is a quick recap of how those files are configured.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只剩下填写我们的主机`inventory`文件和全局`variable`文件。由于我们已经在上一章中创建了这些文件，所以无需重复此过程。之前定义的值将保持不变。以下是这些文件配置的快速回顾。
- en: 'The `hosts` file in the `root` directory of the playbook directory is:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`playbook`目录中`root`目录中的`hosts`文件是：'
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'A global variable file inside the `group_vars/` directory is:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`group_vars/`目录中的全局变量文件是：'
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Great job in completing your third administration playbook and role! As always,
    we will finish up the chapter with a quick review of the playbook and role just
    created.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了第三个管理playbook和role的出色工作！和往常一样，我们将以快速审查刚刚创建的playbook和role来结束本章。
- en: Reviewing playbooks and roles
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查playbooks和roles
- en: 'Let''s jump right into examining the role we created, named `create-snapshot`.
    The completed role and file, named `main.yml`, located in the `create-snapshot/tasks`
    directory, looks like this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即开始检查我们创建的名为`create-snapshot`的role。完成的role和文件名为`main.yml`，位于`create-snapshot/tasks`目录中，如下所示：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The corresponding variable file, named `main.yml`, located in the `create-snapshot/vars`
    directory, for this role will look like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对应的变量文件名为`main.yml`，位于`create-snapshot/vars`目录中，该角色的文件如下：
- en: '[PRE19]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next, the master playbook file, named `snapshot-tenant.yml`, located in the
    `root` directory of the playbook directory, will look like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，位于playbook目录的`root`目录中的主playbook文件名为`snapshot-tenant.yml`，如下所示：
- en: '[PRE20]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Following this we created the `hosts` file, which also is located in the `root`
    directory of the `playbook` directory:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建了`hosts`文件，也位于`playbook`目录的`root`目录中：
- en: '[PRE21]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, creating the global variable file, named `util_container`, and saving
    it to the `group_vars/` directory of the playbook would complete the playbook:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建全局变量文件名为`util_container`，并将其保存到playbook的`group_vars/`目录中，将完成playbook：
- en: '[PRE22]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The complete set of code can again be found in the GitHub repository at [https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2](https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码集可以在GitHub存储库中再次找到[https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2](https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2)。
- en: 'We cannot finish up this chapter without first testing out our work. Assuming
    that you have cloned the preceding GitHub repository, the command to test out
    the playbook from the Deployment node would be as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有先测试我们的工作之前，我们无法结束本章。假设您已经克隆了前面的GitHub存储库，从部署节点测试playbook的命令如下：
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Once you get started creating playbooks and roles with Ansible, you will find
    that you are able to reuse a lot of code for many different purposes. In this
    chapter, we were able to create another role very similar to the previous chapter,
    but include a totally different task very quickly and easily. Always remember
    to design your roles to be the base generic task as much as possible. I sincerely
    cannot emphasize that tip enough. It could be the difference of taking minutes/hours
    versus days to automate something.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开始使用Ansible创建playbooks和roles，您会发现可以为许多不同的目的重复使用大量代码。在本章中，我们能够创建另一个与上一章非常相似的role，但很快且轻松地包含一个完全不同的任务。始终记住尽可能将您的角色设计为尽可能基本的通用任务。我真诚地无法强调这一点。这可能是自动化某事所需的时间差异。
- en: In this chapter, we defined and described the difference between instance backups
    and snapshots. We explained the process, how to manually create backups and snapshots
    using the OpenStack CLI. We also reviewed an example of how to use an instance
    `backup`. Then, we finally developed the Ansible playbook and role to automate
    creating snapshot(s) of all instances within a specified tenant. I am very excited
    to move onto the next chapter where we will examine the process of migrating instances
    between Compute nodes. This is surely an administration task you will face while
    managing your OpenStack cloud. It is rather a controversial topic as well because
    many do not either know that this functionality exists within OpenStack or do
    not believe that this function works well. In the next chapter, we will try to
    clear up the unwarranted confusion by demonstrating how to manually migrate instance(s)
    and then take it a step further by automating it. For those of us who are cloud
    operators, the next chapter will be worth its value in gold. You do not want to
    skip the next chapter; it will certainly be worth it. [Chapter 6](ch06.html "Chapter 6. Migrating
    Instances"), *Migrating Instances*, here we come!
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们定义并描述了实例备份和快照之间的区别。我们解释了使用OpenStack CLI手动创建备份和快照的过程。我们还回顾了如何使用实例`backup`的示例。然后，我们最终开发了用于自动创建指定租户内所有实例的快照的Ansible
    playbook和role。我非常期待进入下一章，我们将在其中研究在计算节点之间迁移实例的过程。这肯定是您在管理OpenStack云时会遇到的管理任务。这也是一个颇具争议的话题，因为许多人要么不知道OpenStack中存在这个功能，要么不相信这个功能运行良好。在下一章中，我们将尝试通过演示如何手动迁移实例，然后进一步自动化来消除不必要的困惑。对于我们这些云操作员来说，下一章将是金子般的价值。您不想跳过下一章；它肯定是值得的。[第6章](ch06.html
    "第6章。迁移实例")，*迁移实例*，我们来了！
