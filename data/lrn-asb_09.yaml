- en: Building Out a Cloud Network
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建云网络
- en: Now that we have launched servers in DigitalOcean, we will move on to starting
    to look at launching services within **Amazon Web Services** (**AWS**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在DigitalOcean上启动了服务器，我们将继续开始研究在Amazon Web Services（AWS）内启动服务。
- en: Before we launch instances, we will need to create a network for them to be
    hosted in. This is called a VPC, and there are a few different elements we will
    need to bring together in a playbook to create one, which we will then be able
    to use for our instances.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动实例之前，我们需要为它们创建一个网络。这称为VPC，我们需要在playbook中汇集一些不同的元素来创建一个VPC，然后我们就可以用于我们的实例。
- en: 'In this chapter, we will:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Get an introduction to AWS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍AWS
- en: Cover what it is we are trying to achieve and why
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍我们试图实现的目标和原因
- en: Create a VPC, subnets, and routes—networking and routing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建VPC、子网和路由-网络和路由
- en: Create security groups—firewall
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建安全组-防火墙
- en: Create an **Elastic Load Balancing** (**ELB**)—load balancer
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建弹性负载均衡（ELB）-负载均衡器
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this chapter, we are going to use AWS; you will need administrator access
    to be able to create the roles needed to allow Ansible to interact with your account.
    As with other chapters, you can find the complete playbooks in the `Chapter09`
    folder in the accompanying GitHub repository at [https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter09/vpc](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter09/vpc).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用AWS；您需要管理员访问权限才能创建所需的角色，以允许Ansible与您的帐户进行交互。与其他章节一样，您可以在附带的GitHub存储库的`Chapter09`文件夹中找到完整的playbooks，网址为[https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter09/vpc](https://github.com/PacktPublishing/Learn-Ansible/tree/master/Chapter09/vpc)。
- en: An introduction to AWS
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS简介
- en: 'AWS has been around since 2002; it started by offering a few services which
    were not linked in any way—it progressed in this form until early 2006 when it
    was relaunched. The relaunched AWS brought together three services:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: AWS自2002年以来一直存在；它开始提供了一些毫不相关的服务，直到2006年初才重新推出。重新推出的AWS汇集了三项服务：
- en: '**Amazon Elastic Compute Cloud (Amazon EC2)**: This is the AWS compute service'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊弹性计算云（Amazon EC2）：这是AWS的计算服务
- en: '**Amazon Simple Storage Service (Amazon S3)**: Amazon''s scalable object storage
    accessible service'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊简单存储服务（Amazon S3）：亚马逊的可扩展对象存储可访问服务
- en: '**Amazon Simple Queue Service (Amazon SQS)**: This service provides a message
    queue, primarily for web applications'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊简单队列服务（Amazon SQS）：该服务主要为Web应用程序提供消息队列
- en: 'Since 2006 it has grown from three unique services to over 160, covering over
    15 primary areas such as:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 自2006年以来，它已经从三项独特的服务发展到了160多项，涵盖了15个主要领域，例如：
- en: Compute
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算
- en: Storage
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储
- en: Database
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库
- en: Networking and content delivery
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络和内容传递
- en: Machine learning
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器学习
- en: Analytics
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析
- en: Security, identity, and compliance
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全、身份和合规性
- en: Internet of Things
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网
- en: At its earnings call in February 2018, it was revealed that AWS had $17.46 billion
    in revenue in 2017 which accounted for 10% of Amazon's total revenue; not bad
    for a service which originally offered to share idle compute time.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在2018年2月的财报电话会议上，透露出AWS在2017年的收入为174.6亿美元，占亚马逊总收入的10%；对于一个最初只提供空闲计算时间共享的服务来说，这并不差。
- en: 'At the time of writing, AWS spans 18 geographic regions, which host a total
    of 54 availability zones: [https://aws.amazon.com/about-aws/global-infrastructure/](https://aws.amazon.com/about-aws/global-infrastructure/).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，AWS覆盖了18个地理区域，总共拥有54个可用区域：[https://aws.amazon.com/about-aws/global-infrastructure/](https://aws.amazon.com/about-aws/global-infrastructure/)。
- en: 'So what makes AWS so successful? Not only its coverage, but its approach to
    putting out its services. Andy Jassy, AWS CEO, has been quoted as saying:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 那么AWS的成功之处在哪里？不仅在于其覆盖范围，还在于其推出服务的方式。AWS首席执行官Andy Jassy曾经说过：
- en: '"Our mission is to enable any developer or any company to be able to build
    all their technology applications on top of our infrastructure technology platform."'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “我们的使命是使任何开发人员或任何公司都能够在我们的基础设施技术平台上构建他们所有的技术应用。”
- en: As an individual, you have access to the same APIs, service, regions, tools,
    and also pricing models as large multi-national companies and also Amazon themselves
    as they consume their services. This really gives you the freedom to start small
    and scale massively. For example, Amazon EC2 instances start from around $4.50
    per month for a t2.nano (1 vCPU, 0.5G) all the way up to over $19,000 per month
    for an x1e.32xlarge (128 vCPU, 3,904 GB RAM, two 1920 GB SSD storage)—as you can
    see, there are instance types for every workload imaginable.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 作为个人，您可以访问与大型跨国公司和亚马逊自身消费其服务相同的API、服务、区域、工具和定价模型。这确实使您有自由从小规模开始并大规模扩展。例如，亚马逊EC2实例的价格从每月约4.50美元的t2.nano（1
    vCPU，0.5G）开始，一直到每月超过19,000美元的x1e.32xlarge（128 vCPU，3,904 GB RAM，两个1920 GB SSD存储）-可以看出，有适用于各种工作负载的实例类型。
- en: Both of these instances and most services are billed as pay-as-you-go modules,
    from per-second billing for EC2 instances or pay per GB per month for the storage
    you are using.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个实例和大多数服务都按照按使用计费，例如EC2实例按秒计费，存储按每月每GB计费。
- en: Amazon Virtual Private Cloud overview
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊虚拟私有云概述
- en: In this chapter, we are going to be concentrating on launching an **Amazon Virtual
    Private Cloud** (**Amazon VPC**); this is the networking layer which will house
    the compute and other Amazon services we will be launching in the next chapter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将集中讨论启动Amazon Virtual Private Cloud（Amazon VPC）；这是将容纳我们将在下一章中启动的计算和其他Amazon服务的网络层。
- en: 'An overview of the VPC our playbook is going to launch is as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将启动的VPC概述如下：
- en: '![](assets/3cc7aae7-3f58-4999-bffc-621d0535095e.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3cc7aae7-3f58-4999-bffc-621d0535095e.png)'
- en: 'As you can see, we are going to be launching our VPC into the **EU-West #1**
    (Ireland) region; we will be spanning all three availability zones for our EC2
    instances and also the **Application Elastic Load Balancer**. We will only be
    using two availability zones for our Amazon **Relational Database Service** (**RDS**)
    instance and also two zones for the **Amazon Elastic File System** (**Amazon EFS**)
    volumes.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '正如您所看到的，我们将在**EU-West #1**（爱尔兰）地区启动我们的VPC；我们将跨越我们的EC2实例和**应用弹性负载均衡器**的所有三个可用区。我们将仅使用两个可用区来启动我们的Amazon
    **关系数据库服务**（**RDS**）实例，以及两个区域用于**亚马逊弹性文件系统**（**Amazon EFS**）卷。'
- en: 'This all means our Ansible playbook needs to create/configure the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的Ansible playbook需要创建/配置以下内容：
- en: One Amazon VPC
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个亚马逊VPC
- en: Three subnets for EC2 instances
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2实例的三个子网
- en: Two subnets for Amazon RDS instances
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个用于Amazon RDS实例的子网
- en: Two subnets for Amazon EFS volumes
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于Amazon EFS卷的两个子网
- en: Three subnets for the Application Load Balancer
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用负载均衡器的三个子网
- en: One internet gateway
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个互联网网关
- en: 'We will also need to configure the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要配置以下内容：
- en: One route to allow access through the internet gateway
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一条允许通过互联网网关访问的路由
- en: One security group which allows everyone to access to port `80` (HTTP) and `443`
    (HTTPS) on the Application Load Balancer
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个安全组，允许每个人访问应用负载均衡器上的端口`80`（HTTP）和`443`（HTTPS）
- en: One security group which allows trusted source access to port `22` (SSH) on
    the EC2 instances
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个安全组，允许EC2实例上的端口`22`（SSH）的受信任来源访问
- en: One security group which allows access to port `80` (HTTP) from the Application
    Load Balancer to the EC2 instances
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个安全组，允许应用负载均衡器从EC2实例访问端口`80`（HTTP）
- en: One security group which allows access to port `3306` (MySQL) on the Amazon
    RDS instances from the EC2 instances
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个安全组，允许EC2实例从Amazon RDS实例访问端口`3306`（MySQL）
- en: One security group which allows access to port `2049` (NGF) on the Amazon EFS
    volumes from the EC2 instances
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个安全组，允许EC2实例从Amazon EFS卷访问端口`2049`（NGF）
- en: This will give us our basic network, allowing restrictive access to everything
    but the Application Load Balancer which we want to be publicly available. Before
    we start creating an Ansible playbook which deploys the network, we need to get
    an AWS API access key and secret.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为我们提供基本网络，允许对除了我们希望公开的应用负载均衡器之外的所有内容进行限制性访问。在我们开始创建部署网络的Ansible playbook之前，我们需要获取AWS
    API访问密钥和密钥。
- en: Creating an access key and secret
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建访问密钥和秘密
- en: It is more than possible to create an access key and secret key for your own
    AWS user that would give Ansible full access to your AWS account.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为您自己的AWS用户创建访问密钥和秘密密钥，以便为Ansible提供对您的AWS帐户的完全访问权限是完全可能的。
- en: 'Because of this, we are going to look at creating a user for Ansible which
    only has permission to access the parts of AWS we know that Ansible will need
    to interact with for the tasks we are covering in this chapter. We will be giving
    Ansible full access to the following services:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将尝试为Ansible创建一个用户，该用户只有权限访问我们知道Ansible将需要与本章涵盖的任务进行交互的AWS部分。我们将为Ansible提供以下服务的完全访问权限：
- en: Amazon VPC
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊VPC
- en: Amazon EC2
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊EC2
- en: Amazon RDS
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊RDS
- en: Amazon EFS
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊EFS
- en: 'To do this, log in to the AWS console, which can be found at [https://console.aws.amazon.com/](https://console.aws.amazon.com/).
    Once logged in, click on Services, which can be found in the menu at the very
    top of the screen. In the menu which opens, enter `IAM` into the search box and
    then click on what should be the only result, IAM Manage User Access and Encryption
    Keys. This will take you to a page that looks something similar to the following:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，请登录到AWS控制台，该控制台可以在[https://console.aws.amazon.com/](https://console.aws.amazon.com/)找到。登录后，单击顶部菜单中的“服务”。在打开的菜单中，输入“IAM”到搜索框中，然后单击应该是唯一结果的IAM管理用户访问和加密密钥。这将带您到一个类似以下内容的页面：
- en: '![](assets/b5d44c52-1d83-43b8-87a8-749837229570.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b5d44c52-1d83-43b8-87a8-749837229570.png)'
- en: On the IAM page, click on Groups in the left-hand side menu; we are going to
    be creating a group which will have the permissions assigned to it, then we will
    create a user and assign it to our group.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在IAM页面上，单击左侧菜单中的“组”；我们将创建一个具有分配权限的组，然后我们将创建一个用户并将其分配给我们的组。
- en: Once you are on the Groups page, click on the Create New Group button. This
    process has three main steps, the first of which is setting the name of the group.
    In the space provided, enter the group name `Ansible` and then click on the Next
    Step button.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您进入组页面，单击“创建新组”按钮。此过程有三个主要步骤，第一个是设置组名。在提供的空间中，输入组名“Ansible”，然后单击“下一步”按钮。
- en: The next step is where we attach the policies; we will be using the Amazon-supplied
    ones. Select AmazonEC2FullAccess, AmazonVPCFullAccess, AmazonRDSFullAccess, and
    AmazonElasticFileSystemFullAccess; once all four have been selected, click on
    the Next Step button.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是我们附加策略的步骤；我们将使用亚马逊提供的策略。选择AmazonEC2FullAccess，AmazonVPCFullAccess，AmazonRDSFullAccess和AmazonElasticFileSystemFullAccess；一旦选择了所有四个，单击“下一步”按钮。
- en: 'You should now be on a page which is giving you an overview of the options
    you have selected; it should look something like the following:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该在一个页面上，该页面向您概述了您选择的选项；它应该看起来类似以下内容：
- en: '![](assets/ab3872af-5311-4a14-80ee-b2ff16b83a6e.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ab3872af-5311-4a14-80ee-b2ff16b83a6e.png)'
- en: When you are happy with your selection, click on the Create Group button and
    then click on Users in the left-hand side menu.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当您对您的选择感到满意时，请单击“创建组”按钮，然后单击左侧菜单中的“用户”。
- en: 'Once on the Users page, click on Add user, and this will take you to a page
    where you can configure your desired username and also what type of user you want.
    Enter the following information:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入用户页面，单击“添加用户”，这将带您到一个页面，您可以在其中配置所需的用户名以及您想要的用户类型。输入以下信息：
- en: 'User name: Enter `Ansible` in here'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名：在此处输入“Ansible”
- en: 'AWS access type: Check the box next to where it says Programmatic access; our
    `Ansible` user does not need AWS Management Console access so leave that option
    unchecked'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 访问类型：勾选“程序化访问”旁边的复选框；我们的“Ansible”用户不需要 AWS 管理控制台访问权限，所以不要勾选该选项
- en: 'You should now be able to click on the Next: Permissions button; this will
    take you to the page where you set the permissions for your user. As we have already
    created the group, select the `Ansible` group from the list and then click on
    Next: Reviewwhich will take you to an overview of the options you have entered.
    If you are happy with them, then click on the Create user button.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该能够点击“下一步：权限”按钮；这将带您到设置用户权限的页面。由于我们已经创建了组，请从列表中选择“Ansible”组，然后点击“下一步：审阅”，这将带您到您输入的选项的概述页面。如果您对它们满意，然后点击“创建用户”按钮。
- en: 'This will take you to a page that looks like the following (I have blurred
    the access key ID on purpose):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带您到一个看起来像以下内容的页面（我已经故意模糊了访问密钥 ID）：
- en: '![](assets/6ed3ccc4-4fd1-468d-8e81-f34d65bd0dc1.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6ed3ccc4-4fd1-468d-8e81-f34d65bd0dc1.png)'
- en: As you can see, the success message tells you that this is the last time you
    will be able to download the credentials, meaning that you will not be able to
    see the secret access key again. Either click on the Show button and make a note
    of the key or click the Download .csv button; you will not have the opportunity
    to recover the secret access key, only to allow it to expire and generate a new
    one.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，成功消息告诉您这是您最后一次能够下载凭据，这意味着您将无法再次看到秘密访问密钥。要么点击“显示”按钮并记下密钥，要么点击“下载 .csv”按钮；您将无法恢复秘密访问密钥，只能让其过期并生成一个新的。
- en: Now that we have an access key ID and secret access key for a user with the
    permissions we need to launch our VPC using Ansible, we can make a start at writing
    the playbook.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个具有我们需要启动 VPC 的权限的用户的访问密钥 ID 和秘密访问密钥，我们可以开始编写 playbook。
- en: The VPC playbook
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VPC playbook
- en: The first thing we need to discuss is how we can pass our access key ID and
    also the secret access key to Ansible in a safe and secure way. As I will be sharing
    the final playbooks in a public repository on GitHub, I do not want to share my
    AWS keys with the world as that could get expensive! Typically, if it were a private
    repository, I would use Ansible Vault to encrypt the keys and include them in
    there with other potentially sensitive data such as deployment keys and so on.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要讨论的是如何以安全的方式将访问密钥 ID 和秘密访问密钥传递给 Ansible。由于我将在 GitHub 上的公共存储库中分享最终的 playbook，我不想与世界分享我的
    AWS 密钥，因为那可能会很昂贵！通常情况下，如果是私有存储库，我会使用 Ansible Vault 加密密钥，并将其与其他可能敏感的数据（如部署密钥等）一起包含在其中。
- en: In this case, I don't want to include any encrypted information in the repository
    as it would mean that people would need to unencrypt it, edit the values, and
    then re-encrypt it. Luckily, the AWS modules provided by Ansible allows you to
    set two environment variables on your Ansible controller; those variables will
    then be read as part of the playbook execution.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我不想在存储库中包含任何加密信息，因为这意味着人们需要解密它，编辑值，然后重新加密它。幸运的是，Ansible 提供的 AWS 模块允许您在
    Ansible 控制器上设置两个环境变量；这些变量将作为 playbook 执行的一部分读取。
- en: 'To set the variables, run the following commands to make sure that you replace
    the content with your own access key and secret (the information listed as follows
    is just placeholder values):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置变量，请运行以下命令，确保您用自己的访问密钥和秘密替换内容（以下列出的信息仅为占位符值）：
- en: '[PRE0]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once set, you can view the contents by running:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好后，您可以通过运行以下命令查看内容：
- en: '[PRE1]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see from the output, this will display the content of the `AWS_ACCESS_KEY`
    variable:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这将显示“AWS_ACCESS_KEY”变量的内容：
- en: '![](assets/2fae39d3-2fab-490c-a908-82b2e8bc720d.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2fae39d3-2fab-490c-a908-82b2e8bc720d.png)'
- en: 'Now that we have a way to pass our credentials to Ansible, we can create the
    playbook structure by running the following commands:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一种将凭据传递给 Ansible 的方法，我们可以通过运行以下命令创建 playbook 结构：
- en: '[PRE2]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that we have the basics in place, we can make a start at creating the roles;
    unlike previous chapters, we are going to be running the playbook after we have
    added each role so we can discuss in more detail what has happened.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了基本的设置，我们可以开始创建角色；与以前的章节不同，我们将在添加每个角色后运行 playbook，以便我们可以更详细地讨论发生了什么。
- en: The VPC role
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VPC 角色
- en: The first role we are going to create is the one which creates the VPC itself.
    Everything we are going to configure/create in the upcoming roles needs to be
    hosted within a VPC, so it needs to be created and then we need to gather some
    information on it so we can proceed with the rest of the playbook.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要创建的第一个角色是创建 VPC 本身的角色。我们将在接下来的角色中配置/创建的所有内容都需要托管在一个 VPC 中，因此需要先创建它，然后我们需要收集一些关于它的信息，以便我们可以继续进行
    playbook 的其余部分。
- en: 'To bootstrap the role, run the following command from within your working folder:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要引导角色，请从您的工作文件夹中运行以下命令：
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that we have the files for the role, open `roles/vpc/tasks/main.yml` and
    enter the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了角色的文件，打开“roles/vpc/tasks/main.yml”并输入以下内容：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, we are using an Ansible module called `ec2_vpc_net`; this module
    replaces one called `ec2_vpc` which was deprecated and removed in Ansible 2.5.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们使用了一个名为“ec2_vpc_net”的 Ansible 模块；这个模块替换了一个名为“ec2_vpc”的模块，后者在 Ansible
    2.5 中已被弃用和移除。
- en: 'We are using three variables within the task; the first two, `ec2_region` and
    `environment_name`, should be placed in `group_vars/common.yml` as we will be
    using them in most of the of the roles we will be creating:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在任务中使用了三个变量；前两个变量“ec2_region”和“environment_name”应该放在“group_vars/common.yml”中，因为我们将在大多数我们将创建的角色中使用它们：
- en: '[PRE5]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Both variables are self-explanatory: the first is the name we will be using
    to reference the various elements we will be launching in AWS and the second lets
    Ansible know where we would like the VPC to be created.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个变量都是不言自明的：第一个是我们将用来引用我们将在 AWS 中启动的各种元素的名称，第二个让 Ansible 知道我们想要在哪里创建 VPC。
- en: 'The third variable, `vpc_cidr_block`, should be placed in the `roles/vpc/defaults/main.yml`
    file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个变量`vpc_cidr_block`应该放在`roles/vpc/defaults/main.yml`文件中：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This defines the CIDR we want to use; `10.0.0.0/16` means that we would like
    to reserve 10.0.0.1 to 10.0.255.254 which gives us a range of around 65,534 usable
    IP address, which should be more than enough for our tests.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了我们想要使用的CIDR；`10.0.0.0/16`表示我们想要保留10.0.0.1到10.0.255.254，这给了我们大约65,534个可用的IP地址范围，这应该足够我们的测试了。
- en: At the end of the first task, we are using the register flag to take all of
    the content which has been captured during the creation of the VPC and register
    that as a variable. We are then using the debug module to print this content to
    the screen.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个任务结束时，我们使用注册标志来获取在创建VPC过程中捕获的所有内容，并将其注册为一个变量。然后我们使用debug模块将这些内容打印到屏幕上。
- en: 'Now that we have our first role, we can add some content to our `site.yml`
    file:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了第一个角色，我们可以在`site.yml`文件中添加一些内容：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then run the playbook using:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下命令运行playbook：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This should give you something like the following output:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该给你一个类似下面的输出：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Checking the VPC section of the AWS console should show you that the VPC has
    been created, and the information should match what has been captured by Ansible:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 检查AWS控制台的VPC部分应该会显示VPC已经创建，并且信息应该与Ansible捕获的信息匹配：
- en: '![](assets/03e9bc2f-fa70-4e2d-82e2-f5111b81b5ab.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/03e9bc2f-fa70-4e2d-82e2-f5111b81b5ab.png)'
- en: If you rerun the playbook, you will notice that, rather than creating the VPC
    again, Ansible recognizes that there is already a VPC called `my-vpc` and it discovers
    the information on the already existing VPC and populates the `vpc_info` variable.
    This is useful as we will be using the information gathered in the next role.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果重新运行playbook，你会注意到，Ansible不会再次创建VPC，而是会认识到已经有一个名为`my-vpc`的VPC，并且会发现已经存在的VPC的信息，并填充`vpc_info`变量。这是有用的，因为我们将在下一个角色中使用收集到的信息。
- en: The subnets role
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子网角色
- en: 'Now that we have our VPC, we can start to populate it. The first thing we are
    going to configure is the 10 subnets. If you recall, we need the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了VPC，我们可以开始填充它。我们要配置的第一件事是10个子网。如果你还记得，我们需要以下内容：
- en: Three EC2 instances
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个EC2实例
- en: Three ELB instances
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个ELB实例
- en: Two RDS instances
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个RDS实例
- en: Two EFS instances
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个EFS实例
- en: 'Create the role by running the following command from your working directory:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从你的工作目录运行以下命令来创建角色：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, in `roles/subnets/defaults/main.yml`, enter the following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`roles/subnets/defaults/main.yml`中输入以下内容：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, we have a list of variables containing what the subnet is being
    used for (`ec2`, `elb`, `rds`, or `efs`), which availability zone the subnet should
    be created in (`a`, `b`, or `c`), and then the subnet itself. Here we are using
    a /24 for each of the availability zones.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们有一个包含子网用途（`ec2`、`elb`、`rds`或`efs`）、子网应该创建在哪个可用区（`a`、`b`或`c`）以及子网本身的变量列表。在这里，我们为每个可用区使用了/24。
- en: 'Grouping the subnets like this should remove some of the repetition when it
    comes to creating the subnets. However, it doesn''t remove it all, as we can see
    from the content of `roles/subnets/tasks/main.yml`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样分组子网应该消除一些在创建子网时的重复。然而，它并没有完全消除，因为我们可以从`roles/subnets/tasks/main.yml`的内容中看到：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The task starts off pretty simple: here we are using the `ec2_vpc_subnet` module
    to create subnets by looping through the `the_subnets` variable. As you can see,
    we are using the variable we registered in the previous role to correctly deploy
    the subnets into our VPC; this is `vpc_info.vpc.id`.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 任务开始时非常简单：在这里，我们使用`ec2_vpc_subnet`模块通过循环`the_subnets`变量来创建子网。正如你所看到的，我们使用了在上一个角色中注册的变量来正确地将子网部署到我们的VPC中；这就是`vpc_info.vpc.id`。
- en: 'You may have noticed that we are not registering the results of this task;
    this is because, if we did, we would have had information on all ten subnets.
    Instead, we want to break this information down based on what the subnet is being
    used for. To find this information out, we can use the `ec2_vpc_subnet_facts`
    module to gather information based on our filtering using the `Environment` and
    `Use` tag we set when creating the subnets:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们没有注册这个任务的结果；这是因为，如果我们这样做了，我们将会得到所有十个子网的信息。相反，我们希望根据子网的用途来分解这些信息。要找出这些信息，我们可以使用`ec2_vpc_subnet_facts`模块来根据我们在创建子网时设置的`Environment`和`Use`标签进行过滤来收集信息：
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'As you can see, here we are filtering the use of and registering four different
    sets of information: `subnets_ec2`, `subnets_elb`, `subnets_rds`, and `subnets_efs`.
    We are not quite there yet, however, because we only want to know the subnet IDs
    rather than all of the information about each of the subnets.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，这里我们正在过滤使用和注册四组不同的信息：`subnets_ec2`、`subnets_elb`、`subnets_rds`和`subnets_efs`。然而，我们还没有完成，因为我们只想知道子网ID而不是关于每个子网的所有信息。
- en: 'To do this, we need to use the `set_fact` module and some Jinja2 filtering:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要使用`set_fact`模块和一些Jinja2过滤：
- en: '[PRE14]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Finally, we can print out all of the IDs to the screen in one big list by joining
    the variables together:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过将变量连接在一起来将所有的ID打印到屏幕上：
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now that we have all of the parts of our role together, let''s run it. Update
    the `site.yml` file so it looks like the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经把角色的所有部分准备好了，让我们运行它。更新`site.yml`文件，使其看起来像下面这样：
- en: '[PRE16]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then run the playbook using:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用以下命令运行playbook：
- en: '[PRE17]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Before running the playbook, I commented out the `debug` task in the VPC role.
    Your output should look something like the output that follows; you may have noticed
    that the VPC role returns an `ok` as our VPC is there:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行playbook之前，我在VPC角色中注释掉了`debug`任务。你的输出应该看起来像接下来的输出；你可能已经注意到，VPC角色返回了一个`ok`，因为我们的VPC已经存在：
- en: '[PRE18]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The only change recorded is the addition of the subnets; if we were to run
    it again, then this would also return an `ok` as the subnets exist. As you can
    also see, we have ten subnet IDs returned and this is also reflected in the AWS
    console:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一记录的更改是子网的添加；如果我们再次运行它，那么这也会返回一个`ok`，因为子网已经存在。正如你也可以看到的，我们返回了十个子网ID，这也反映在AWS控制台中：
- en: '![](assets/c64f7a9f-9ec7-4c01-b840-f5e5e7367277.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c64f7a9f-9ec7-4c01-b840-f5e5e7367277.png)'
- en: Now that we have our subnets, we need to make sure that the EC2 instances can
    route to the internet.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了子网，我们需要确保EC2实例可以连接到互联网。
- en: The internet gateway role
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 互联网网关角色
- en: 'While the internet gateway role is going to only variables which we have defined
    in `common.yml`, and through gathering information in previous tasks, we should
    continue to bootstrap the `roles` folder as we have been doing:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然互联网网关角色只会使用我们在`common.yml`中定义的变量，并通过收集之前任务中的信息，我们应该继续像之前一样继续引导`roles`文件夹：
- en: '[PRE20]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We are going to be using two modules in the role; the first, `ec2_vpc_igw`,
    creates the internet gateway and tags it:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个角色中，我们将使用两个模块；第一个模块`ec2_vpc_igw`创建互联网网关并对其进行标记：
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We then print the information we have registered about the internet gateway
    to the screen:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将已注册的关于互联网网关的信息打印到屏幕上：
- en: '[PRE22]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Before finally using the second module, `ec2_vpc_route_table`, we create a
    route which sends all traffic destined for `0.0.0.0/0` to the newly created internet
    gateway for just the EC2 subnets using the list of IDs we created in the previous
    role:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在最终使用第二个模块`ec2_vpc_route_table`之前，我们创建一个路由，将所有目的地为`0.0.0.0/0`的流量发送到新创建的互联网网关，只针对EC2子网使用我们在之前角色中创建的ID列表：
- en: '[PRE23]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the role of the `site.yml` file:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 将角色添加到`site.yml`文件中：
- en: '[PRE24]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Then run the playbook:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行playbook：
- en: '[PRE25]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'At this point, as we have run the playbook three times now, I should quickly
    mention the `WARNING`. This is because we are not using an inventory file, as
    we have defined `localhost` at the top of our `site.yml` file. You should receive
    something like the following output; again I have commented out the debug tasks
    from previous roles:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，由于我们已经运行了playbook三次，我应该快速提到`警告`。这是因为我们没有使用清单文件，而是在我们的`site.yml`文件的顶部定义了`localhost`。你应该收到类似以下输出的内容；我已经注释掉了之前角色中的调试任务：
- en: '[PRE26]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Back to the AWS console. You should be able to view the internet gateway:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 回到AWS控制台。你应该能够查看到互联网网关：
- en: '![](assets/2b3f505c-0ec7-4212-b931-dcbdd76896e6.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2b3f505c-0ec7-4212-b931-dcbdd76896e6.png)'
- en: 'In the preceding screenshot, you can see the default VPC internet gateway and
    also the one we created using Ansible. You can also see the route table we created:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，你可以看到默认的VPC互联网网关，以及我们使用Ansible创建的互联网网关。你还可以看到我们创建的路由表：
- en: '![](assets/3d308540-a5d0-491b-8912-58b35cbb716d.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3d308540-a5d0-491b-8912-58b35cbb716d.png)'
- en: Here you can see the route Ansible configured along with the default route that
    was created when we created the VPC. This default route is set to be the main
    route and allows routing between all of the subnets we added in the previous role.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到Ansible配置的路由，以及我们创建VPC时创建的默认路由。这个默认路由被设置为主要路由，并允许在我们之前添加的所有子网之间进行路由。
- en: Next up, we need to add some security groups to our VPC.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要向我们的VPC添加一些安全组。
- en: The security group role
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全组角色
- en: 'We have a few different aims with this role. The first is simple enough: create
    a security group which opens port `80` and `443` to the world, or `0.0.0.0/0`
    in IP terms. The second aim is to create a rule that allows SSH access, but only
    to us, and the third is to make sure that only our EC2 instances can connect to
    RDS and EFS.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个角色中有一些不同的目标。第一个目标很简单：创建一个安全组，将端口`80`和`443`对外开放，或者在IP术语中是`0.0.0.0/0`。第二个目标是创建一个允许SSH访问的规则，但只允许我们访问，第三个目标是确保只有我们的EC2实例可以连接到RDS和EFS。
- en: The first aim is easy as `0.0.0.0/0` is a known quantity, the others not so
    much. Our IP could often change so we don't want to hardcode it. Also, we haven't
    launched any EC2 instances, so we don't know their IP addresses.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个目标很容易，因为`0.0.0.0/0`是一个已知的数量，其他的就不那么容易了。我们的IP地址经常会变化，所以我们不想硬编码它。而且，我们还没有启动任何EC2实例，所以我们不知道它们的IP地址。
- en: 'Let''s bootstrap the role and create the first set of rules:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们引导这个角色并创建第一组规则：
- en: '[PRE28]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We are going to be using the `ec2_group` module to create our first group in
    `roles/securitygroups/tasks/main.yml`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`ec2_group`模块在`roles/securitygroups/tasks/main.yml`中创建我们的第一个组：
- en: '[PRE29]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here we are creating a rule called `my-vpc-elb`, tagging it, and then opening
    up ports `80` and `443` to `0.0.0.0/0`. As you can see, adding a rule is easy
    when you know the source IP address is straightforward. Let's now look at adding
    the rule the for the EC2 instances; this one is a little different.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个名为`my-vpc-elb`的规则，对其进行标记，然后将端口`80`和`443`对`0.0.0.0/0`开放。正如你所看到的，当你知道源IP地址很直接的时候，添加规则就很容易。现在让我们来看看为EC2实例添加规则；这个有点不同。
- en: First of all, we do not want to give everyone access to SSH on our instances
    so we need to know the IP address of our Ansible controller. To do this we will
    use the `ipify_facts` module.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们不想让每个人都能访问我们实例上的SSH，所以我们需要知道我们Ansible控制器的IP地址。为了做到这一点，我们将使用`ipify_facts`模块。
- en: ipify is a free web API which simply returns the current public IP address of
    the device you use to query the API.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: ipify是一个免费的web API，简单地返回你用来查询API的设备的当前公共IP地址。
- en: 'As you can see from the tasks that follow, we are making an API call to ipify
    and then setting a fact which contains the IP address before printing the IP address
    to the screen:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 正如接下来的任务所示，我们正在调用ipify的API，然后设置一个包含IP地址的事实，然后将IP地址打印到屏幕上：
- en: '[PRE30]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now that we know what IP address to allow access to port `22`, we can create
    a rule called `my-vpc-ec2`:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道要允许访问端口`22`的IP地址，我们可以创建一个名为`my-vpc-ec2`的规则：
- en: '[PRE31]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: There is also the second rule in the `my-vpc-ec2`security group; this rule allows
    access to port `80` from any source which has the `my-vpc-elb`security group attached,
    which in our case will be just the ELBs. This means that the only way anyone can
    access port `80` on our EC2 instances is through the ELB.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在`my-vpc-ec2`安全组中还有第二个规则；这个规则允许来自具有`my-vpc-elb`安全组附加的任何源的端口`80`的访问，而在我们的情况下，这将只是ELB。这意味着任何人访问我们的EC2实例上的端口`80`的唯一方式是通过ELB。
- en: 'We are going to use this same principle to create the RDS and EFS groups, this
    time only allowing access to ports `3306` and `2049` respectively to any instances
    in the `my-vpc-ec2` security group:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用相同的原则来创建RDS和EFS组，这次只允许访问端口`3306`和`2049`的实例在`my-vpc-ec2`安全组中：
- en: '[PRE32]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now that we have our main groups created, let''s add a `debug` task to print
    the security group IDs to the screen:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的主要组，让我们添加一个`debug`任务，将安全组ID打印到屏幕上：
- en: '[PRE33]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now that we have our full role, we can run the playbook. Remember to add `-
    roles/securitygroups` to the `site.yml` file:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了完整的角色，我们可以运行playbook。记得在`site.yml`文件中添加`- roles/securitygroups`：
- en: '[PRE34]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Again, I have commented out any output from the `debug` module outside the
    `securitygroups` role:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我已经注释掉了`securitygroups`角色之外的`debug`模块的任何输出：
- en: '[PRE35]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You can view the groups that Ansible has created in the AWS console. In the
    following screenshot, you can see the `my-vpc-ec2`security group:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在AWS控制台中查看Ansible创建的组。在下面的截图中，您可以看到`my-vpc-ec2`安全组：
- en: '![](assets/2a7aa377-4181-4b69-96a2-390834eb4deb.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2a7aa377-4181-4b69-96a2-390834eb4deb.png)'
- en: Now that we have our basic VPC configured, we can start to launch services in
    it, starting with an Application Load Balancer.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了基本的VPC，我们可以开始在其中启动服务，首先是Application Load Balancer。
- en: The ELB role
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ELB角色
- en: The final role we are going to look at in this chapter is one which launches
    an Application Load Balancer. Well, it creates a target group which is then attached
    to an Application Load Balancer. The load balancer we will be creating with this
    role is basic; we will be going into a lot more detail in the later chapter.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将要查看的最后一个角色是启动Application Load Balancer的角色。嗯，它创建了一个目标组，然后将其附加到Application
    Load Balancer上。我们将使用这个角色创建的负载均衡器很基本；在后面的章节中，我们将会更详细地介绍。
- en: 'Like the other roles, we first need to bootstrap the files:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他角色一样，我们首先需要引导文件：
- en: '[PRE37]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now open `roles/elb/tasks/main.yml` and use the `elb_target_group` module to
    create the target group:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开`roles/elb/tasks/main.yml`并使用`elb_target_group`模块创建目标组：
- en: '[PRE38]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'As you can see, we are creating the target group in our VPC and calling it
    `my-vpc-target-group`. Now we have the target group, we can launch the Application
    Elastic Balancer using the `elb_application_lb` module:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们正在在我们的VPC中创建目标组，并将其命名为`my-vpc-target-group`。现在我们有了目标组，我们可以使用`elb_application_lb`模块启动Application
    Elastic Balancer：
- en: '[PRE39]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Here, we are provisioning an Application Load Balancer called `my-vpc-elb` in
    our VPC; we are passing the IDs of the ELB subnets we created using the `subnet_elb_ids`.
    We are also adding the ELB security group to the load balancer using the `sg_elb.group_id`
    and configuring a listener on port `80`, which forwards traffic to the `my-vpc-target-group`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在为我们的VPC中的Application Load Balancer创建一个名为`my-vpc-elb`的负载均衡器；我们正在传递我们使用`subnet_elb_ids`创建的ELB子网的ID。我们还使用`sg_elb.group_id`将ELB安全组添加到负载均衡器，并在端口`80`上配置一个侦听器，将流量转发到`my-vpc-target-group`。
- en: 'The final part of the task prints the information we have captured about the
    ELB:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 任务的最后部分打印了我们关于ELB的信息：
- en: '[PRE40]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'That completes our final role; update the `site.yml` file so it looks as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们的最终角色；更新`site.yml`文件，使其如下所示：
- en: '[PRE41]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We can now run our playbook for the final time by running:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过运行以下命令最后一次运行我们的playbook：
- en: '[PRE42]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You can probably guess that the output of the playbook run is going to look
    as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能猜到了playbook运行的输出将如下所示：
- en: '[PRE43]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You should now be able to see the ELB in the EC2 part of the AWS console:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您应该能够在AWS控制台的EC2部分看到ELB：
- en: '![](assets/65e6ad53-1d4f-401b-82d1-5e2e63cc0e69.png)While VPC''s do not incur
    any cost, ELBs do; please ensure that you remove any unused resources as soon
    as you have completed your test.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/65e6ad53-1d4f-401b-82d1-5e2e63cc0e69.png)虽然VPC不会产生任何费用，但ELB会；请确保在完成测试后立即删除任何未使用的资源。'
- en: That concludes this chapter on the VPC playbook; we will be using elements of
    this in the next chapter, where we will be looking at deploying our WordPress
    installation into AWS using a VPC as the foundation of our installation.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了关于VPC playbook的本章；我们将在下一章中使用其中的元素，在那里我们将使用VPC作为我们安装的基础，将我们的WordPress安装部署到AWS。
- en: Summary
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have taken our next step in using Ansible to launch resources
    in a public cloud. We have laid the groundwork for automating quite a complex
    environment by creating a VPC, setting up the subnets we need for our application,
    provisioning an internet gateway, and setting our instances to route their outgoing
    traffic through it.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经迈出了使用Ansible在公共云中启动资源的下一步。我们通过创建VPC，设置我们应用程序所需的子网，配置互联网网关，并设置我们的实例通过它路由其出站流量，为自动化一个相当复杂的环境奠定了基础。
- en: We have also configured four security groups, three of which contained dynamic
    content, to secure our services before finally provisioning an ELB into our VPC.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还配置了四个安全组，其中三个包含动态内容，以在最终在我们的VPC中为我们的服务提供安全保障之前，最终配置了一个ELB。
- en: In the next chapter, we will build on the foundations we have laid in this chapter
    and launch a more complex set of services.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将在本章奠定的基础上构建，并启动一组更复杂的服务。
- en: Questions
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the two environment variables used by the AWS modules to read your
    access ID and secret?
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS模块用来读取您的访问ID和密钥的两个环境变量是什么？
- en: 'True or false: Every time you run the playbook, you will get a new VPC.'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：每次运行playbook，您都会得到一个新的VPC。
- en: State and explain why we are not bothering to register the results of creating
    the subnets.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 说明为什么我们不费心注册创建子网的结果。
- en: What is the difference between using `cidr_ip` and `group_id` when defining
    a rule in a security group?
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在定义安全组规则时，使用`cidr_ip`和`group_id`有什么区别？
- en: 'True or false: The order in which the security groups are added when using
    rules which have `group_id` defined doesn''t matter.'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：在使用定义了`group_id`的规则时，添加安全组的顺序并不重要。
- en: Create a second VPC alongside the existing VPC, give it a different name, and
    also have it use 10.1.0.0/24.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有VPC旁边创建第二个VPC，给它一个不同的名称，并且也让它使用10.1.0.0/24。
- en: Further reading
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find more details on the AWS technologies we have used in this chapter
    at the following links:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本章中使用的AWS技术的以下链接找到更多详细信息：
- en: '**AWS**: [https://aws.amazon.com/](https://aws.amazon.com/)'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS**: [https://aws.amazon.com/](https://aws.amazon.com/)'
- en: '**AWS Management Console**: [https://aws.amazon.com/console/](https://aws.amazon.com/console/)'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Management Console**: [https://aws.amazon.com/console/](https://aws.amazon.com/console/)'
- en: '**AWS IAM**: [https://aws.amazon.com/iam/](https://aws.amazon.com/iam/)'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS IAM**: [https://aws.amazon.com/iam/](https://aws.amazon.com/iam/)'
- en: '**Amazon VPC**: [https://aws.amazon.com/vpc/](https://aws.amazon.com/vpc/)'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon VPC**: [https://aws.amazon.com/vpc/](https://aws.amazon.com/vpc/)'
- en: '**ELB**: [https://aws.amazon.com/elasticloadbalancing/](https://aws.amazon.com/elasticloadbalancing/)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ELB**: [https://aws.amazon.com/elasticloadbalancing/](https://aws.amazon.com/elasticloadbalancing/)'
