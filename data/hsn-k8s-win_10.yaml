- en: Deploying a Hybrid On-Premises Kubernetes Cluster
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署混合本地Kubernetes集群
- en: In the previous chapters, we have focused on Docker and Kubernetes concepts
    from a more theoretical standpoint—now, it is time to utilize this knowledge and
    deploy a Kubernetes cluster from scratch. The goal of this chapter is to have
    a fully functional, hybrid Windows/Linux Kubernetes cluster in an on-premises
    environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们更多地从理论角度关注了Docker和Kubernetes的概念，现在是时候利用这些知识并从头开始部署一个Kubernetes集群了。本章的目标是在本地环境中拥有一个功能齐全的混合Windows/Linux
    Kubernetes集群。
- en: Depending on your needs, you may use this approach to create a minimalistic
    local development cluster (one Linux **virtual machine** (**VM**)) acting as master
    and one Windows VM acting as node) or to deploy a production-grade on-premises
    cluster with Linux and Windows nodes. You are not limited to Hyper-V clusters—this
    approach can be used for bare-metal machines, VMware clusters, or VMs running
    in the cloud. Using kubeadm to create Kubernetes clusters gives you the flexibility
    to deploy the cluster anywhere, as long as the proper networking is set up and
    the machines are capable of running containerized workloads.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的需求，您可以使用这种方法创建一个最小化的本地开发集群（一个充当主节点的Linux虚拟机（VM）和一个充当节点的Windows VM），或者部署一个具有Linux和Windows节点的生产级本地集群。您不仅限于Hyper-V集群——只要设置了适当的网络并且机器能够运行容器化工作负载，这种方法就可以用于裸机、VMware集群或在云中运行的VM。使用kubeadm创建Kubernetes集群可以让您灵活地在任何地方部署集群，只要设置了适当的网络并且机器能够运行容器化工作负载。
- en: We also recommend using kubeadm as it is a low-level tool that gives a lot of
    insight into how the cluster is actually created. In the future, you can expect
    other solutions built on top of kubeadm (such as Kubespray), which supports hybrid
    clusters. But even then, it is still advised to try a pure kubeadm approach to
    learn the baseline steps for Kubernetes cluster Deployment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还建议使用kubeadm，因为它是一个低级工具，可以深入了解集群的实际创建过程。在未来，您可以期待基于kubeadm构建的其他解决方案（如Kubespray），支持混合集群。但即使如此，仍建议尝试纯kubeadm方法来学习Kubernetes集群部署的基本步骤。
- en: 'This chapter covers the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Preparing the Hyper-V environment
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备Hyper-V环境
- en: Creating a Kubernetes master node using kubeadm
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用kubeadm创建Kubernetes主节点
- en: Installing the Kubernetes network
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Kubernetes网络
- en: Preparing VMs for Windows nodes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Windows节点准备虚拟机
- en: Joining Windows nodes using kubeadm
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用kubeadm加入Windows节点
- en: Deploying and inspecting your first application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署和检查您的第一个应用程序
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you will need the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您将需要以下内容：
- en: Windows 10 Pro, Enterprise, or Education (version 1903 or later, 64-bit); a
    Hyper-V host with at least 16 GB RAM (maybe less, if you choose not to install
    Desktop Experience for Windows Server and Ubuntu Server VMs). You may use any
    other Windows or Windows Server edition that has Hyper-V available. For Hyper-V,
    you need the **Intel Virtualization Technology** (**Intel VT**) or **AMD Virtualization**
    (**AMD-V**) technology feature enabled in **Basic Input/Output System** (**BIOS**).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10专业版、企业版或教育版（1903版本或更高版本，64位）；至少16GB RAM的Hyper-V主机（如果选择不安装Windows Server和Ubuntu
    Server VMs的桌面体验，则可能更少）。您可以使用任何其他具有Hyper-V功能的Windows或Windows Server版本。对于Hyper-V，需要在基本输入/输出系统（BIOS）中启用英特尔虚拟化技术（Intel
    VT）或AMD虚拟化（AMD-V）技术功能。
- en: 'Note: Windows 10 Home cannot be used as a Hyper-V host.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：Windows 10家庭版不能用作Hyper-V主机。
- en: A minimum of 15 GB disk space for the Linux master VM and 30 GB disk space for
    each Windows node VM.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux主节点VM需要至少15GB磁盘空间，每个Windows节点VM需要至少30GB磁盘空间。
- en: Ubuntu Server 18.04 **Long-Term Support** (**LTS**) **International Standards
    Organization** (**ISO**) ([http://releases.ubuntu.com/18.04.3/ubuntu-18.04.3-live-server-amd64.iso](http://releases.ubuntu.com/18.04.3/ubuntu-18.04.3-live-server-amd64.iso)).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu Server 18.04 **长期支持** (**LTS**) **国际标准化组织** (**ISO**) ([http://releases.ubuntu.com/18.04.3/ubuntu-18.04.3-live-server-amd64.iso](http://releases.ubuntu.com/18.04.3/ubuntu-18.04.3-live-server-amd64.iso))。
- en: Windows Server 2019 (**Long-Term Servicing Channel** (**LTSC**), Desktop Experience
    available) ISO or Windows Server 1903 (**Semi-Annual Channel** (**SAC**), no Desktop
    Experience) ISO. You should check [https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/](https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/)
    for the latest recommendations regarding the current Windows Server version. You
    can obtain evaluation ISOs from the Microsoft Evaluation Center ([https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2019](https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2019)),
    or, if you have a Visual Studio subscription ([https://my.visualstudio.com/Downloads/Featured](https://my.visualstudio.com/Downloads/Featured)),
    you can download ISOs for development and testing purposes.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Server 2019 (**长期服务渠道** (**LTSC**), 可用桌面体验) ISO或Windows Server 1903
    (**半年频道** (**SAC**), 无桌面体验) ISO。您应该查看[https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/](https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/)，了解有关当前Windows
    Server版本的最新建议。您可以从Microsoft评估中心获取评估ISO([https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2019](https://www.microsoft.com/en-us/evalcenter/evaluate-windows-server-2019))，或者，如果您有Visual
    Studio订阅([https://my.visualstudio.com/Downloads/Featured](https://my.visualstudio.com/Downloads/Featured))，您可以下载用于开发和测试目的的ISO。
- en: Kubectl installed—the installation process has been covered in [Chapter 6](791e78c0-f625-4232-9907-36e25ec2767d.xhtml), *Interacting
    with Kubernetes Clusters*.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubectl已安装-安装过程已在[第6章](791e78c0-f625-4232-9907-36e25ec2767d.xhtml)中介绍过，*与Kubernetes集群交互*。
- en: You can download the latest code samples for this chapter from the official
    GitHub repository at: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter07](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter07).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从官方GitHub存储库下载本章的最新代码示例：[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter07](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter07)。
- en: Preparing the Hyper-V environment
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备Hyper-V环境
- en: The first step in a cluster Deployment is preparing the Hyper-V host for Kubernetes
    master and node VMs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 集群部署的第一步是为Kubernetes主节点和节点VM准备Hyper-V主机。
- en: If you choose to use a different hypervisor or use bare-metal machines, you
    may skip this section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择使用不同的hypervisor或裸机，可以跳过本节。
- en: Now, if you have already installed Docker Desktop for Windows on your machine
    in the previous chapters, then Hyper-V is enabled and configured. All you need
    is to create an internal **Network Address Translation** (**NAT**) or an external
    Hyper-V **Virtual Switch** (**vSwitch**), and you are ready to go.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您在之前的章节中已在您的计算机上安装了Windows的Docker Desktop，那么Hyper-V已启用和配置。您只需要创建一个内部**网络地址转换**
    (**NAT**)或外部Hyper-V **虚拟交换机** (**vSwitch**)，然后您就可以开始了。
- en: 'The following diagram shows the design of the cluster that we are going to
    deploy in this chapter. Bear in mind that the master is *not* configured to be
    **highly available** (**HA**)—HA setup is independent of Windows containers''
    support and you can perform it when preparing Linux master node(s), according
    to the official documentation ([https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/)):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了我们将在本章中部署的集群设计。请记住，主节点*不*配置为**高可用性**（**HA**）- HA设置与Windows容器的支持无关，您可以在准备Linux主节点时执行它，根据官方文档（[https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/)）：
- en: '![](assets/a864ac65-13ab-4d85-b84a-6f58d46a49e4.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a864ac65-13ab-4d85-b84a-6f58d46a49e4.png)'
- en: The minimal deployment is an Ubuntu Server 18.04 LTS Kubernetes master (with
    the possibility to schedule application Pods) with one Windows Server 2019 LTS
    Kubernetes node. Optionally, you may decide to deploy more Windows and Linux nodes
    (marked with dotted lines in the diagram), following the same instructions or
    cloning the VMs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最小部署是一个Ubuntu Server 18.04 LTS Kubernetes主节点（具有调度应用程序Pod的可能性）和一个Windows Server
    2019 LTS Kubernetes节点。可选地，您可以决定部署更多的Windows和Linux节点（在图表中用虚线标记），按照相同的说明或克隆VM。
- en: Enabling Hyper-V
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用Hyper-V
- en: 'First, let''s enable the Hyper-V feature if you haven''t enabled it previously,
    as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们启用Hyper-V功能，如果您之前没有启用它，如下所示：
- en: Open the PowerShell window as Administrator.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员身份打开PowerShell窗口。
- en: 'Execute the following command to enable the Hyper-V feature:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以启用Hyper-V功能：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Reboot the machine.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动计算机。
- en: If you are using Windows Server as your Hyper-V host, the instructions for enabling
    the Hyper-V role can be found in the official documentation at: [https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/get-started/install-the-hyper-v-role-on-windows-server](https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/get-started/install-the-hyper-v-role-on-windows-server).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用Windows Server作为您的Hyper-V主机，可以在官方文档中找到启用Hyper-V角色的说明：[https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/get-started/install-the-hyper-v-role-on-windows-server](https://docs.microsoft.com/en-us/windows-server/virtualization/hyper-v/get-started/install-the-hyper-v-role-on-windows-server)。
- en: 'Now, depending on your networking setup, you have to create an appropriate
    Hyper-V vSwitch. You have two options:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，根据您的网络设置，您必须创建一个适当的Hyper-V vSwitch。您有两个选项：
- en: '**Internal NAT Hyper-V vSwitch**: Use this option if you plan to use the cluster
    for local development only. Any external inbound communication (apart from your
    Hyper-V host machine) will require NAT. This option is preferred for a simple
    Windows 10 development setup, as in most cases you are connected to an external
    network (Ethernet or Wi-Fi) that does not allow you to manage **Dynamic Host Configuration
    Protocol** (**DHCP**) and **Domain Name System** (**DNS**) on your own. In other
    words, if you use an external vSwitch, you will end up with non-predictable IP
    address assignments for your nodes. Without DNS, you will be not able to ensure
    proper Kubernetes cluster connectivity.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**内部NAT Hyper-V vSwitch**：如果您计划仅将集群用于本地开发，请使用此选项。任何外部入站通信（除了您的Hyper-V主机机器）都将需要NAT。在大多数情况下，此选项适用于简单的Windows
    10开发设置，因为您连接到不允许您自行管理**动态主机配置协议**（**DHCP**）和**域名系统**（**DNS**）的外部网络（以太网或Wi-Fi）。换句话说，如果您使用外部vSwitch，您将得到节点的不可预测的IP地址分配。没有DNS，您将无法确保适当的Kubernetes集群连接。'
- en: '**External Hyper-V vSwitch**: Use this option if your network has a DHCP and
    DNS server that you (or the network administrator) can manage. This will be the
    case in most production deployments. You need then to assign appropriate **media
    access control** (**MAC**) addresses for your VMs in order to receive the desired
    IP address.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**外部Hyper-V vSwitch**：如果您的网络有一个DHCP和DNS服务器，您（或网络管理员）可以管理，那么请使用此选项。这在大多数生产部署中都是这样。然后，您需要为VM分配适当的**媒体访问控制**（**MAC**）地址，以便获得所需的IP地址。'
- en: We will follow the convention that the default gateway for the network is `10.0.0.1`,
    the master node has the IP address `10.0.0.2`, and nodes have subsequent IP addresses
    `10.0.0.X`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遵循网络的默认网关为`10.0.0.1`，主节点的IP地址为`10.0.0.2`，节点具有连续的IP地址`10.0.0.X`的约定。
- en: Creating an internal NAT Hyper-V vSwitch
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建内部NAT Hyper-V vSwitch
- en: 'In order to create the internal NAT vSwitch, perform the following steps:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建内部NAT vSwitch，请执行以下步骤：
- en: Open the PowerShell window as Administrator.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员身份打开PowerShell窗口。
- en: 'Execute the following command to create an internal vSwitch named `Kubernetes
    NAT Switch`:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令创建名为`Kubernetes NAT Switch`的内部vSwitch：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Find the `ifIndex` of the vSwitch you have just created. `ifIndex` will be
    needed for NAT gateway creation. You can do this by running the following command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到您刚刚创建的vSwitch的`ifIndex`。`ifIndex`将需要用于NAT网关的创建。您可以通过运行以下命令来执行此操作：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following screenshot shows the output of the preceding command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了上述命令的输出：
- en: '![](assets/c979eca5-b246-4abb-bff2-282f9b654a46.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c979eca5-b246-4abb-bff2-282f9b654a46.png)'
- en: 'Configure the NAT gateway, as follows:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置NAT网关，如下所示：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Create a new NAT network, `Kubernetes NAT Network`, as follows:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新的NAT网络`Kubernetes NAT Network`，如下所示：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you are using an internal NAT vSwitch, you must provide a static IP address,
    a gateway IP address, and DNS server information for each VM. The static IP address
    must be within the range of the NAT internal prefix.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用内部NAT vSwitch，则必须为每个VM提供静态IP地址、网关IP地址和DNS服务器信息。静态IP地址必须在NAT内部前缀范围内。
- en: Please note that currently, you can have only one custom internal NAT vSwitch
    in your system. You can read more in the official documentation at: [https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/user-guide/setup-nat-network](https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/user-guide/setup-nat-network).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，目前您的系统中只能有一个自定义内部NAT vSwitch。您可以在官方文档中阅读更多信息：[https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/user-guide/setup-nat-network](https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/user-guide/setup-nat-network)。
- en: Creating an external Hyper-V vSwitch
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建外部Hyper-V vSwitch
- en: 'Alternatively, in order to create an external vSwitch, perform the following
    steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，为了创建外部vSwitch，请执行以下步骤：
- en: Use the Start menu to launch the Hyper-V Manager.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用“开始”菜单启动Hyper-V管理器。
- en: Click Virtual Switch Manager... from the Actions tab, select External, and click Create
    Virtual Switch.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“操作”选项卡中单击“虚拟交换机管理器…”，选择“外部”，然后单击“创建虚拟交换机”。
- en: 'Use the name `Kubernetes External Switch` and choose the network adapter that
    you use for connecting to the internet—for example, your Wi-Fi adapter, as illustrated
    in the following screenshot:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名称`Kubernetes External Switch`，并选择用于连接到互联网的网络适配器，例如您的Wi-Fi适配器，如下截图所示：
- en: '![](assets/9ab7c843-10af-48e4-8f75-ff9901ea2e9b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9ab7c843-10af-48e4-8f75-ff9901ea2e9b.png)'
- en: Click OK to accept the changes.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“确定”以接受更改。
- en: Now, with the Hyper-V environment ready, you can proceed to the next step—creating
    the Kubernetes master node running on the Ubuntu Server 18.04 LTS VM.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Hyper-V环境准备就绪，您可以继续下一步——在运行Ubuntu Server 18.04 LTS VM上创建Kubernetes主节点。
- en: Creating a Kubernetes master node using kubeadm
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用kubeadm创建Kubernetes主节点
- en: For hybrid Windows/Linux Kubernetes clusters, you need to deploy a Linux master—this
    step remains almost the same as for Linux-only Kubernetes clusters, and you can
    use any supported operating system for this purpose. We have chosen Ubuntu Server
    18.04 LTS as it is widely supported (officially and by the community), has a straightforward
    installation process, and is easy to manage.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于混合Windows/Linux Kubernetes集群，您需要部署一个Linux主节点——这一步与仅Linux的Kubernetes集群几乎相同，并且您可以使用任何支持的操作系统来完成此目的。我们选择了Ubuntu服务器18.04
    LTS，因为它得到了广泛的支持（官方和社区支持），具有简单的安装过程，并且易于管理。
- en: Instructions in this chapter focus on adding Windows nodes to the Kubernetes
    cluster. Master preparation steps are minimal. If you are deploying a development
    cluster on your local machine, using kubeadm to deploy a single control plane
    in your cluster is sufficient. For production deployments, you should consider
    deploying an HA master configuration. You can read more about HA and kubeadm at: [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的说明重点是将Windows节点添加到Kubernetes集群。主节点的准备步骤很少。如果您在本地机器上部署开发集群，使用kubeadm在集群中部署单个控制平面就足够了。对于生产部署，您应该考虑部署一个HA主节点配置。您可以在以下网址了解有关HA和kubeadm的更多信息：[https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/)。
- en: If you haven't already downloaded the ISO image for Ubuntu Server 18.04 LTS,
    the official image can be found at: [http://releases.ubuntu.com/18.04.3/ubuntu-18.04.3-live-server-amd64.iso](http://releases.ubuntu.com/18.04.3/ubuntu-18.04.3-live-server-amd64.iso).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有下载Ubuntu服务器18.04 LTS的ISO镜像，官方镜像可以在以下网址找到：[http://releases.ubuntu.com/18.04.3/ubuntu-18.04.3-live-server-amd64.iso](http://releases.ubuntu.com/18.04.3/ubuntu-18.04.3-live-server-amd64.iso)。
- en: Creating a VM and installing Ubuntu Server
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建虚拟机并安装Ubuntu服务器
- en: 'This subsection will guide you through the following steps, which will prepare
    a new VM with Ubuntu Server:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 本小节将指导您完成以下步骤，以准备一个带有Ubuntu服务器的新虚拟机：
- en: Creating the VM
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建虚拟机
- en: Installing Ubuntu Server
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Ubuntu服务器
- en: Configuring the network
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置网络
- en: Installing additional packages for integration with Hyper-V
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装用于与Hyper-V集成的额外软件包
- en: Setting up a passwordless **Secure Shell** (**SSH**) login
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 建立一个无密码的安全外壳（SSH）登录
- en: Creating the VM
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建虚拟机
- en: 'First, you need to create a VM that will be used as the master node, running
    Ubuntu Server 18.04\. To do that, open the Hyper-V Manager application and perform
    the following steps:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要创建一个将用作主节点的虚拟机，运行Ubuntu服务器18.04。要做到这一点，打开Hyper-V管理器应用程序，并执行以下步骤：
- en: From the Actions menu, choose New and click Virtual Machine.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“操作”菜单中，选择“新建”，然后点击“虚拟机”。
- en: 'Click Next and choose a Name for the master node VM. We will use `Kubernetes
    Master` for this purpose. Optionally, configure a custom directory for storing
    VM data to ensure enough disk space for hosting the VM, as illustrated in the
    following screenshot:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”，为主节点虚拟机选择一个名称。我们将用“Kubernetes Master”来命名。可选地，配置一个自定义目录来存储虚拟机数据，以确保有足够的磁盘空间来托管虚拟机，如下截图所示：
- en: '![](assets/e6f49608-18a1-4cd6-811c-bf0978a54866.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e6f49608-18a1-4cd6-811c-bf0978a54866.png)'
- en: 'In the next dialog, choose Generation 2 and continue, as illustrated in the
    following screenshot:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个对话框中，选择第2代并继续，如下截图所示：
- en: '![](assets/6e1ef1d7-fe34-4b2b-b96c-926f14631b3d.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6e1ef1d7-fe34-4b2b-b96c-926f14631b3d.png)'
- en: 'Assign at least `2048` MB of RAM for the master node. You may also choose to
    use the dynamic memory assignment feature. You can find more about hardware minimal
    requirements in the official documentation, at: [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#before-you-begin](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#before-you-begin).
    For production scenarios, consider using at least `16384` MB of RAM. The following
    screenshot illustrates the process:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为主节点分配至少`2048` MB的RAM。您也可以选择使用动态内存分配功能。您可以在官方文档中找到有关硬件最低要求的更多信息，网址为：[https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#before-you-begin](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#before-you-begin)。对于生产场景，请考虑使用至少`16384`
    MB的RAM。下面的截图说明了这个过程：
- en: '![](assets/d17bff58-307b-4fe4-bd9a-057c78eac84e.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d17bff58-307b-4fe4-bd9a-057c78eac84e.png)'
- en: 'Choose an internal NAT or an external switch as the connection for the VM,
    as shown in the following screenshot:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择内部NAT或外部交换作为虚拟机的连接，如下截图所示：
- en: '![](assets/d09eade9-aaec-4dde-8a56-2b52da1a75d3.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d09eade9-aaec-4dde-8a56-2b52da1a75d3.png)'
- en: 'Create a new virtual hard disk with `250` GB size. As **virtual hard disks
    v2** (**VHDX**) are dynamically expandable, it is easier to allocate more space
    from the beginning instead of expanding the disk and partitions later. The following
    screenshot illustrates the process:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个大小为`250` GB的新虚拟硬盘。由于**虚拟硬盘v2**（**VHDX**）是动态可扩展的，因此最好从一开始就分配更多的空间，而不是以后再扩展磁盘和分区。下面的截图说明了这个过程：
- en: '![](assets/3afdde40-0434-4a19-ab2b-b8e7ed83d009.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3afdde40-0434-4a19-ab2b-b8e7ed83d009.png)'
- en: 'Choose to install an operating system from ISO and select your Ubuntu Server
    18.04 LTS image file, as shown in the following screenshot:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择从ISO安装操作系统，并选择Ubuntu Server 18.04 LTS镜像文件，如下截图所示：
- en: '![](assets/0fe4fd70-cb12-4149-a510-7f403b07538e.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0fe4fd70-cb12-4149-a510-7f403b07538e.png)'
- en: Finish the VM creation wizard. Before starting the VM, we need to configure
    it further. Right-click the Kubernetes Master VM and open Settings.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成虚拟机创建向导。在启动虚拟机之前，我们需要进一步配置它。右键单击Kubernetes Master VM并打开设置。
- en: 'In the Security menu, ensure that the Secure Boot Template is set to Microsoft
    UEFI Certificate Authority, as shown in the following screenshot:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安全菜单中，确保安全启动模板设置为Microsoft UEFI证书颁发机构，如下截图所示：
- en: '![](assets/f8e9c9ab-42a3-4c92-a272-919cf42756a3.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f8e9c9ab-42a3-4c92-a272-919cf42756a3.png)'
- en: 'In the Processor menu, set the Number of virtual processors to at least `2`,
    as shown in the following screenshot:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在处理器菜单中，将虚拟处理器的数量设置为至少`2`，如下截图所示：
- en: '![](assets/2a2f66be-a2b6-433e-81be-550e975cf0c3.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2a2f66be-a2b6-433e-81be-550e975cf0c3.png)'
- en: 'In network adapter Advanced Features menu, select Enable MAC address spoofing
    for containers. If you are using an external vSwitch and have an external DHCP,
    you may also want to configure static DHCP assignments. For an internal NAT vSwitch,
    you can leave the default Dynamic setting, as shown in the following screenshot:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网络适配器高级功能菜单中，选择为容器启用MAC地址欺骗。如果您正在使用外部vSwitch并且有外部DHCP，您可能还想配置静态DHCP分配。对于内部NAT
    vSwitch，您可以保留默认的动态设置，如下截图所示：
- en: '![](assets/eee9bc8e-6372-4141-89a0-f2b8f75fa23a.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/eee9bc8e-6372-4141-89a0-f2b8f75fa23a.png)'
- en: Apply all changes and start the VM.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用所有更改并启动虚拟机。
- en: If you think about fully automating this process, you may choose Vagrant ([https://www.vagrantup.com/](https://www.vagrantup.com/))
    for development purposes or Packer for production scenarios ([https://www.packer.io/](https://www.packer.io/)).
    With Vagrant, you can easily create a development VM from scratch and automate
    the provisioning process using, for example, Ansible. Using Packer, you can produce
    machine images for VMs or cloud providers in order to use the **Infrastructure-as-Code**
    (**IaC**) paradigm.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您考虑完全自动化这个过程，您可以选择Vagrant（[https://www.vagrantup.com/](https://www.vagrantup.com/)）用于开发目的，或者Packer用于生产场景（[https://www.packer.io/](https://www.packer.io/)）。使用Vagrant，您可以轻松地从头开始创建开发VM，并使用例如Ansible自动化配置过程。使用Packer，您可以为VM或云提供商生成机器映像，以便使用**基础设施即代码**（**IaC**）范例。
- en: Installing Ubuntu Server
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Ubuntu服务器
- en: 'The VM for the master node has been created, and now we need to install Ubuntu
    Server 18.04 LTS on the VM. In order to do that, perform the following steps:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 主节点的虚拟机已经创建，现在我们需要在虚拟机上安装Ubuntu Server 18.04 LTS。为了做到这一点，请执行以下步骤：
- en: Connect to the running VM terminal by double-clicking the Kubernetes Master
    VM in Hyper-V manager.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在Hyper-V管理器中双击Kubernetes Master VM来连接到正在运行的VM终端。
- en: Wait for the installer to initialize.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待安装程序初始化。
- en: Choose English as the preferred language.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择英语作为首选语言。
- en: Choose the desired keyboard layout.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所需的键盘布局。
- en: 'In Network connections, proceed depending on your external network configuration:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在网络连接中，根据您的外部网络配置进行操作：
- en: If you use an internal NAT vSwitch, you have to set up the configuration manually.
    Open the eth0 interface and Edit IPv4, selecting the Manual method. Set Subnet
    `10.0.0.0/8`, Address `10.0.0.2`, Gateway `10.0.0.1`, Name servers `8.8.8.8,8.8.4.4`
    (or use your provider's DNS server addresses if possible).
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用内部NAT vSwitch，则必须手动设置配置。打开eth0接口并编辑IPv4，选择手动方法。设置子网`10.0.0.0/8`，地址`10.0.0.2`，网关`10.0.0.1`，名称服务器`8.8.8.8,8.8.4.4`（如果可能，请使用您的提供商的DNS服务器地址）。
- en: If you use an external vSwitch, use automatic configuration or manually configure
    the network according to your requirements.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用外部vSwitch，请根据您的要求使用自动配置或手动配置网络。
- en: Optionally, configure the network proxy. Bear in mind that if you are running
    behind a network proxy, you will later need to configure Docker to use the proxy.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，配置网络代理。请记住，如果您在网络代理后运行，您将稍后需要配置Docker以使用代理。
- en: Proceed with the default Mirror address.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续使用默认的镜像地址。
- en: In Filesystem setup, configure to Use An Entire Disk.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件系统设置中，配置为使用整个磁盘。
- en: Choose the default disk for installation.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择默认的磁盘进行安装。
- en: Proceed with the proposed Filesystem setup.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照建议的文件系统设置进行操作。
- en: In Profile setup, you can configure the machine name and the first username.
    We will use `kubernetes-master` as the machine name and `ubuntu` as the username.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置文件设置中，您可以配置机器名称和第一个用户名。我们将使用`kubernetes-master`作为机器名称，`ubuntu`作为用户名。
- en: In the SSH menu, choose to Install OpenSSH Server.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在SSH菜单中，选择安装OpenSSH服务器。
- en: Do not select any additional packages, and continue with the installation.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要选择任何额外的软件包，并继续安装。
- en: Wait for the installation to finish.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待安装完成。
- en: Reboot.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动。
- en: Automation of Ubuntu Server installation is possible using Kickstart or preseed configuration
    files. You can find more information in the official documentation, at: [https://help.ubuntu.com/lts/installation-guide/i386/ch04s06.html](https://help.ubuntu.com/lts/installation-guide/i386/ch04s06.html).
    This approach can be used together with Vagrant or Packer. An example preseed
    configuration file for Ubuntu Server 18.04 for Packer can be found at: [https://github.com/ptylenda/ironic-packer-template-ubuntu1804-kubernetes-ansible-proxy/blob/master/http/preseed.cfg](https://github.com/ptylenda/ironic-packer-template-ubuntu1804-kubernetes-ansible-proxy/blob/master/http/preseed.cfg).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用Kickstart或preseed配置文件自动安装Ubuntu服务器。您可以在官方文档中找到更多信息，网址为：[https://help.ubuntu.com/lts/installation-guide/i386/ch04s06.html](https://help.ubuntu.com/lts/installation-guide/i386/ch04s06.html)。这种方法可以与Vagrant或Packer一起使用。可以在以下网址找到适用于Packer的Ubuntu
    Server 18.04的示例preseed配置文件：[https://github.com/ptylenda/ironic-packer-template-ubuntu1804-kubernetes-ansible-proxy/blob/master/http/preseed.cfg](https://github.com/ptylenda/ironic-packer-template-ubuntu1804-kubernetes-ansible-proxy/blob/master/http/preseed.cfg)。
- en: Let's look at the network configuration.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看网络配置。
- en: Configuring the network
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置网络
- en: 'If you are using internal NAT vSwitch or an external vSwitch with an external
    Windows-based DHCP server, there is some additional network configuration required
    after the machine reboots, as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用内部NAT vSwitch或外部vSwitch与外部基于Windows的DHCP服务器，则在机器重新启动后需要进行一些额外的网络配置，如下所示：
- en: In the VM terminal window, use the username `ubuntu` and your password to log
    in.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VM终端窗口中，使用用户名`ubuntu`和您的密码登录。
- en: 'Open the following file using `vim` or `nano`:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`vim`或`nano`打开以下文件：
- en: '[PRE5]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you are not familiar with the Vim editor, we highly recommend learning the
    basics. A minimal guide can be found, for example, at: [https://eastmanreference.com/a-quick-start-guide-for-beginners-to-the-vim-text-editor](https://eastmanreference.com/a-quick-start-guide-for-beginners-to-the-vim-text-editor).
    Vim is extremely useful for editing files both on Linux and on Windows, without
    the need for a desktop environment. As an alternative, you can use nano ([https://www.nano-editor.org/](https://www.nano-editor.org/)).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉Vim编辑器，我们强烈建议学习基础知识。例如，可以在以下网址找到一个简明指南：[https://eastmanreference.com/a-quick-start-guide-for-beginners-to-the-vim-text-editor](https://eastmanreference.com/a-quick-start-guide-for-beginners-to-the-vim-text-editor)。Vim非常适用于在Linux和Windows上编辑文件，而无需桌面环境。作为替代，您可以使用nano
    ([https://www.nano-editor.org/](https://www.nano-editor.org/))。
- en: 'If you are using an internal NAT vSwitch, enforce the static IP address configuration
    for the Kubernetes master, as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您正在使用内部NAT vSwitch，请按以下方式强制执行Kubernetes主节点的静态IP地址配置：
- en: '[PRE6]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Alternatively, if you are using an external vSwitch and an external Windows-based
    DHCP server, set the file contents to the following:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，如果您正在使用外部vSwitch和外部基于Windows的DHCP服务器，请将文件内容设置为以下内容：
- en: '[PRE7]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Setting `dhcp-identifier` to `mac` is crucial for making DHCP leases work properly.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 将`dhcp-identifier`设置为`mac`对于使DHCP租约正常工作至关重要。
- en: Save the file and reboot the machine, using the `sudo reboot` command.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并使用`sudo reboot`命令重新启动机器。
- en: We will now be installing some additional packages.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将安装一些额外的软件包。
- en: Installing additional packages for integration with Hyper-V
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装与Hyper-V集成的额外软件包
- en: 'For any network configuration (both internal NAT and external vSwitch), you
    should now install additional virtualization tools that enable some dedicated
    features for integrating with hypervisors, as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何网络配置（包括内部NAT和外部vSwitch），您现在应该安装一些额外的虚拟化工具，以启用与hypervisors集成的一些专用功能，如下所示：
- en: Log in to the machine again.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次登录到机器上。
- en: 'Update the `apt-get` cache by running the following command:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令更新`apt-get`缓存：
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Install additional virtualization tools, as follows:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装额外的虚拟化工具，如下所示：
- en: '[PRE9]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Reboot.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启。
- en: Now, let's set up a passwordless SSH login.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们设置一个无密码SSH登录。
- en: Setting up a passwordless SSH login
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置无密码SSH登录
- en: 'At this point, it is recommended to switch to using SSH instead of the VM terminal
    for managing the machine. This will require the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，建议使用SSH而不是VM终端来管理机器。这将需要以下操作：
- en: Installing the SSH client on your Windows machine that you use to connect to
    the VMs (in most cases, your VM host machine)
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您用于连接到VM的Windows机器上安装SSH客户端（在大多数情况下，您的VM主机机器）
- en: Generating an SSH key pair in order to disable password authentication for SSH
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成SSH密钥对以禁用SSH的密码身份验证
- en: 'To install the native SSH client on your Windows machine, perform the following
    steps:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows机器上安装本机SSH客户端，请执行以下步骤：
- en: Open the PowerShell window as Administrator
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员身份打开PowerShell窗口
- en: 'Run the following command to get the currently available version of the OpenSSH
    client:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以获取当前可用版本的OpenSSH客户端：
- en: '[PRE10]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Install the client, like this:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 像这样安装客户端：
- en: '[PRE11]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To connect to the Kubernetes master node VM, you need to know its IP address.
    If you are using a static IP address configuration, it is rather straightforward—you
    use `10.0.0.2`. For a dynamic IP address provided by DHCP, you need to determine
    it first. Thanks to the virtualization tools installed in the previous steps,
    you can easily find this in Hyper-V manager in the Networking tab, shown at the
    bottom of the following screenshot:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要连接到Kubernetes主节点VM，您需要知道其IP地址。如果您使用静态IP地址配置，这相当简单——您使用`10.0.0.2`。对于由DHCP提供的动态IP地址，您需要首先确定它。由于在前面的步骤中安装了虚拟化工具，您可以在Hyper-V管理器的网络选项卡中轻松找到它，如下面截图底部所示：
- en: '![](assets/8773db22-cacf-49bc-a8e6-cd7ac057c64a.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8773db22-cacf-49bc-a8e6-cd7ac057c64a.png)'
- en: 'In this case, the IP address is `10.0.0.2`, and we can use it to SSH into the
    VM, as follows:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，IP地址是`10.0.0.2`，我们可以使用它来SSH进入VM，如下所示：
- en: '[PRE12]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you run into connection problems such as `Connection closed by 10.0.0.2 port
    22`, you need to regenerate the SSH host keys. In the VM terminal, run `sudo ssh-keygen
    -A` and try connecting again. If problems persist, analyze the sshd service logs
    using `sudo service sshd status`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到连接问题，例如`Connection closed by 10.0.0.2 port 22`，您需要重新生成SSH主机密钥。在VM终端中运行`sudo
    ssh-keygen -A`，然后尝试重新连接。如果问题仍然存在，请使用`sudo service sshd status`分析sshd服务日志。
- en: 'The next step is generating an SSH key pair for passwordless login to your
    Kubernetes master VM. To do this, perform the following steps:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是为无密码登录到Kubernetes主VM生成SSH密钥对。要做到这一点，请执行以下步骤：
- en: Open the PowerShell window.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开PowerShell窗口。
- en: 'Run the following command to generate the key pair. Do not specify a passphrase:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令生成密钥对。不要指定密码：
- en: '[PRE13]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, your public key is available in `C:\Users\<user>\.ssh\id_rsa.pub`. Copy
    it to the Kubernetes Master VM, using the following command. This command ensures
    that the  `authorized_keys` file has proper, secure access permissions:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您的公钥可在`C:\Users\<user>\.ssh\id_rsa.pub`中找到。使用以下命令将其复制到Kubernetes Master VM。此命令确保`authorized_keys`文件具有适当的安全访问权限：
- en: '[PRE14]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And the last step is to test passwordless authentication and disable password
    authentication for the SSH server for the best security, as shown in the following
    code snippet:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是测试无密码身份验证，并禁用SSH服务器的密码身份验证以获得最佳安全性，如下面的代码片段所示：
- en: '[PRE15]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Edit `/etc/ssh/sshd_config`, as follows:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`/etc/ssh/sshd_config`，如下所示：
- en: '[PRE16]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Find the `PasswordAuthentication yes` line and comment it out, like this:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到`PasswordAuthentication yes`行并将其注释掉，如下所示：
- en: '[PRE17]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Save the changes and restart the SSH server, like this:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改并重新启动SSH服务器，如下所示：
- en: '[PRE18]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Reconnect to verify your configuration.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新连接以验证您的配置。
- en: At this point, it is a good idea to export the Hyper-V VM image (or create a checkpoint)
    for `Kubernetes Master`. This will make it easier to revert to the initial configuration
    if anything goes wrong during the Kubernetes master configuration.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，最好为`Kubernetes Master`导出Hyper-V VM镜像（或创建检查点）。如果在Kubernetes主配置期间出现任何问题，这将使恢复到初始配置变得更容易。
- en: Installing and configuring Kubernetes prerequisites
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Kubernetes先决条件
- en: 'Preparing Ubuntu Server 18.04 LTS machines for the Kubernetes master (as well
    as Kubernetes nodes) requires the following steps:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 为Kubernetes主机（以及Kubernetes节点）准备Ubuntu Server 18.04 LTS机器需要执行以下步骤：
- en: Changing the operating system configuration, such as disabling swap.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改操作系统配置，例如禁用交换空间。
- en: Installing the Docker container runtime.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Docker容器运行时。
- en: All the steps for Ubuntu Server preparation for Kubernetes are also available
    as a bash script in the official GitHub repository for the book, which can be
    found at: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/02_ubuntu-prepare-node.sh](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/02_ubuntu-prepare-node.sh).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu Server为Kubernetes准备的所有步骤也可以在书籍的官方GitHub存储库中作为bash脚本找到，网址为：[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/02_ubuntu-prepare-node.sh](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/02_ubuntu-prepare-node.sh)。
- en: As of Kubernetes 1.17, the list of **validated** Docker versions is as follows: 1.13.1,
    17.03, 17.06, 17.09, 18.06, 18.09, 19.03.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 截至Kubernetes 1.17，**经过验证**的Docker版本列表如下：1.13.1、17.03、17.06、17.09、18.06、18.09、19.03。
- en: 'In order to configure the operating system for running Kubernetes, perform
    the following steps:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了配置操作系统以运行Kubernetes，执行以下步骤：
- en: Open the PowerShell window.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开PowerShell窗口。
- en: 'SSH into the Kubernetes master machine, like this:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SSH进入Kubernetes主机，如下所示：
- en: '[PRE19]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Update `apt-get` and upgrade all packages, as follows:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`apt-get`并升级所有软件包，如下所示：
- en: '[PRE20]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Install the required packages, as follows:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装所需的软件包，如下所示：
- en: '[PRE21]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Disable the swap partition for the current boot, like this:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用当前引导的交换分区，如下所示：
- en: '[PRE22]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Remove the swap partition permanently. Edit `sudo vim /etc/fstab` and remove
    any lines of type `swap`—for example, the following line:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 永久删除交换分区。编辑`sudo vim /etc/fstab`并删除任何类型为`swap`的行，例如以下行：
- en: '[PRE23]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Editing `/etc/fstab` should be always performed with a **backup** of the file
    created. Configuration errors in this file may lead to a non-bootable system!
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`/etc/fstab`应始终使用创建的文件**备份**执行。此文件中的配置错误可能导致无法引导的系统！
- en: 'Optionally, reboot the machine to check that the swap partition has not been
    mounted again. When the machine is rebooted, SSH into the machine and check that
    `swap` is disabled—the list should be empty, as follows:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，重新启动计算机以检查交换分区是否未再次挂载。重新启动计算机后，SSH进入计算机并检查`swap`是否已禁用-列表应为空，如下所示：
- en: '[PRE24]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Ensure that the `br_netfilter` kernel module is loaded during system boot.
    Use the `sudo vim /etc/modules-load.d/kubernetes.conf` command to create the file
    and set the following contents:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在系统引导期间加载`br_netfilter`内核模块。使用`sudo vim /etc/modules-load.d/kubernetes.conf`命令创建文件并设置以下内容：
- en: '[PRE25]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Configure the `sysctl` variables for Kubernetes (required for the Flannel network).
    Use the `sudo vim /etc/sysctl.d/99-kubernetes.conf` command to create a new file
    and ensure that the file has the following contents:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为Kubernetes配置`sysctl`变量（Flannel网络所需）。使用`sudo vim /etc/sysctl.d/99-kubernetes.conf`命令创建一个新文件，并确保文件具有以下内容：
- en: '[PRE26]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Load the `br_netfilter` kernel module for the current boot and reload the `sysctl`
    variables using the following commands:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载`br_netfilter`内核模块以进行当前引导，并使用以下命令重新加载`sysctl`变量：
- en: '[PRE27]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'At this point, your Ubuntu Server VM is ready for installing Docker and Kubernetes.
    In order to install Docker 18.09, which is the latest validated version for usage
    with Kubernetes 1.16, perform the following steps:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您的Ubuntu服务器虚拟机已准备好安装Docker和Kubernetes。为了安装Docker 18.09，这是与Kubernetes 1.16一起使用的最新验证版本，请执行以下步骤：
- en: 'Add the official **GNU Privacy Guard** (**GPG**) key for the Docker `apt` package
    repository, like this:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为Docker `apt`软件包存储库添加官方**GNU隐私保护**（**GPG**）密钥，如下所示：
- en: '[PRE28]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The latest installation instructions for Docker on Ubuntu can be found at: [https://docs.docker.com/install/linux/docker-ce/ubuntu/](https://docs.docker.com/install/linux/docker-ce/ubuntu/).
    Always cross-check them with the Kubernetes container runtime installation documentation
    as it contains additional important information, and can be found at: [https://kubernetes.io/docs/setup/production-environment/container-runtimes/#docker](https://kubernetes.io/docs/setup/production-environment/container-runtimes/#docker).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu上Docker的最新安装说明可以在以下网址找到：[https://docs.docker.com/install/linux/docker-ce/ubuntu/](https://docs.docker.com/install/linux/docker-ce/ubuntu/)。始终与Kubernetes容器运行时安装文档进行交叉检查，因为它包含额外重要信息，可以在以下网址找到：[https://kubernetes.io/docs/setup/production-environment/container-runtimes/#docker](https://kubernetes.io/docs/setup/production-environment/container-runtimes/#docker)。
- en: 'Add the Docker `apt` package repository, like this:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加Docker `apt`软件包存储库，如下所示：
- en: '[PRE29]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Update the `apt-get` cache to refresh the repository''s information, like this:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`apt-get`缓存以刷新存储库的信息，如下所示：
- en: '[PRE30]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Install the latest Docker version validated for Kubernetes usage, like this:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装经过Kubernetes使用验证的最新Docker版本，如下所示：
- en: '[PRE31]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Disable automatic updates for the `docker-ce` package by running the following
    command (this will prevent the installation of unvalidated Docker versions):'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令禁用`docker-ce`软件包的自动更新（这将防止安装未经验证的Docker版本）：
- en: '[PRE32]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Configure the Docker daemon for Kubernetes. Use the `sudo vim /etc/docker/daemon.json`
    command to create a new file and set the following contents:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为Kubernetes配置Docker守护程序。使用`sudo vim /etc/docker/daemon.json`命令创建一个新文件，并设置以下内容：
- en: '[PRE33]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Reload `systemctl` and restart the Docker daemon, using the following commands:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载`systemctl`并重新启动Docker守护程序，使用以下命令：
- en: '[PRE34]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Verify that Docker is installed properly by running a `hello-world` container,
    as follows:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证Docker是否已正确安装，方法是运行`hello-world`容器，如下所示：
- en: '[PRE35]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If you are working behind a network proxy, you should ensure you have the following:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在网络代理后面工作，您应该确保您有以下内容：
- en: 'An `/etc/environment` containing the appropriate proxy variables (example guide:
    [https://kifarunix.com/how-to-set-system-wide-proxy-in-ubuntu-18-04/](https://kifarunix.com/how-to-set-system-wide-proxy-in-ubuntu-18-04/)).'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含适当代理变量的`/etc/environment`（示例指南：[https://kifarunix.com/how-to-set-system-wide-proxy-in-ubuntu-18-04/](https://kifarunix.com/how-to-set-system-wide-proxy-in-ubuntu-18-04/)）。
- en: 'A `/etc/systemd/system/docker.service.d` directory containing an additional
    file with proxy variables (example guide: [https://docs.docker.com/config/daemon/systemd/](https://docs.docker.com/config/daemon/systemd/)).'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含具有代理变量的附加文件的`/etc/systemd/system/docker.service.d`目录（示例指南：[https://docs.docker.com/config/daemon/systemd/](https://docs.docker.com/config/daemon/systemd/)）。
- en: Your Ubuntu Server VM is now ready to be initialized as the Kubernetes master
    node. First, let's do the initial planning for the cluster before we install the
    Kubernetes binaries.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Ubuntu服务器虚拟机现在已准备好作为Kubernetes主节点进行初始化。首先，在安装Kubernetes二进制文件之前，让我们对集群进行初始规划。
- en: Planning the cluster
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划集群
- en: 'Before you begin initialization of the cluster, you need to determine specific
    subnets and address ranges that will be used by Kubernetes components. This is
    dependent on your external networking setup (for example, avoiding any IP address
    conflicts) and the number of Pods and Services you are planning to run in the
    cluster. In general, it is a good idea to use the defaults, especially for a development
    cluster running on your local machine behind an internal NAT vSwitch. You need
    to determine the following values from the table for your cluster:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '在开始初始化集群之前，您需要确定Kubernetes组件将使用的特定子网和地址范围。这取决于您的外部网络设置（例如，避免任何IP地址冲突）以及您计划在集群中运行的Pod和服务的数量。一般来说，特别是在本地机器后面的内部NAT
    vSwitch上运行的开发集群，使用默认值是一个好主意。您需要从表中确定以下值用于您的集群： '
- en: '|  | **Description** | **Default value** |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '|  | **描述** | **默认值** |'
- en: '| **Service subnet** | Virtual subnet (non-routable) used by Pods for accessing
    Services. Routable address translation from virtual IPs is performed by the `kube-proxy`
    running on nodes. | `10.96.0.0/12` |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| **服务子网** | 用于Pod访问服务的虚拟子网（不可路由）。节点上运行的`kube-proxy`执行从虚拟IP到可路由地址的地址转换。 | `10.96.0.0/12`
    |'
- en: '| **Cluster (Pod) subnet** | Global subnet used by all Pods in the cluster.
    In general, when using Flannel, each node is assigned a smaller /24 subnet for
    its Pods. Bear in mind that this subnet must be large enough for all Pods running
    in the cluster. | `10.244.0.0/16` |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| **集群（Pod）子网** | 集群中所有Pod使用的全局子网。一般来说，使用Flannel时，每个节点被分配一个较小的/24子网用于其Pod。请记住，这个子网必须足够大，以容纳集群中运行的所有Pod。
    | `10.244.0.0/16` |'
- en: '| **Kubernetes DNS service IP** | The IP address of the `kube-dns` service
    used for cluster service discovery and domain name resolution. | `10.96.0.10`
    |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| **Kubernetes DNS服务IP** | 用于集群服务发现和域名解析的`kube-dns`服务的IP地址。 | `10.96.0.10`
    |'
- en: These values will be needed for the next steps when initializing the cluster.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值将在初始化集群的下一步骤中需要。
- en: Initializing the cluster
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化集群
- en: 'For the initialization of the Kubernetes Ubuntu master and joining Windows
    nodes, we will be using kubeadm—as of Kubernetes 1.16 (and also 1.17), this is
    the only well-automated cluster deployment method for hybrid Windows/Linux clusters.
    The first step is the installation of kubeadm, kubelet, and kubectl on the Ubuntu
    Server VM. This is also covered in a script available in the GitHub repository,
    at: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/03_ubuntu-install-kubeadm.sh](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/03_ubuntu-install-kubeadm.sh).'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 为了初始化Kubernetes的Ubuntu主节点并加入Windows节点，我们将使用kubeadm——在Kubernetes 1.16（以及1.17）中，这是唯一一个用于混合Windows/Linux集群的自动化部署方法。第一步是在Ubuntu服务器VM上安装kubeadm、kubelet和kubectl。这也在GitHub存储库中的脚本中有所涵盖，链接为：[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/03_ubuntu-install-kubeadm.sh](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/03_ubuntu-install-kubeadm.sh)。
- en: 'The official instructions for installing kubeadm and initializing the Kubernetes
    master can be found at: [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/)
    and [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/).'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 安装kubeadm和初始化Kubernetes主节点的官方说明可以在以下链接找到：[https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/)
    和 [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/)。
- en: 'SSH into the Ubuntu Server VM, and perform the following steps:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: SSH进入Ubuntu服务器VM，并执行以下步骤：
- en: 'Add the GPG key for the Kubernetes apt package repository, as follows:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤添加Kubernetes apt软件包存储库的GPG密钥：
- en: '[PRE36]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add the Kubernetes apt package repository. Use the `sudo vim /etc/apt/sources.list.d/kubernetes.list`
    command to create a new file and set the following contents (note that you currently
    have to use the `kubernetes-xenial` repository as `bionic` is not available yet):'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加Kubernetes apt软件包存储库。使用`sudo vim /etc/apt/sources.list.d/kubernetes.list`命令创建一个新文件，并设置以下内容（请注意，您目前必须使用`kubernetes-xenial`存储库，因为`bionic`目前还不可用）：
- en: '[PRE37]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Update `apt-get` and install the required packages, as follows:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`apt-get`并安装所需的软件包，如下：
- en: '[PRE38]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Verify that the latest Kubernetes version has been installed by running the
    following code:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下代码验证最新的Kubernetes版本是否已安装：
- en: '[PRE39]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Disable automatic updates for Kubernetes packages by running the following
    command (this is especially important as any Kubernetes components'' upgrades
    should be performed consciously and in a controlled manner, taking all compatibility
    issues into consideration):'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令禁用Kubernetes软件包的自动更新（这一点尤为重要，因为任何Kubernetes组件的升级都应该经过深思熟虑并以受控的方式进行，考虑到所有的兼容性问题）：
- en: '[PRE40]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Up to this moment, initializing the Kubernetes master and node is exactly the
    same. You can follow the same steps when adding more dedicated Ubuntu nodes to
    the cluster or cloning your VM. If you decide to clone the machine, remember about
    ensuring that the hostname, MAC address, and `product_uuid` are unique for each
    node. Read more about how to ensure this in the official documentation, at: [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#verify-the-mac-address-and-product-uuid-are-unique-for-every-node](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#verify-the-mac-address-and-product-uuid-are-unique-for-every-node).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，初始化Kubernetes主节点和节点的步骤完全相同。当向集群添加更多专用的Ubuntu节点或克隆您的VM时，您可以按照相同的步骤进行。如果决定克隆机器，请记住确保每个节点的主机名、MAC地址和`product_uuid`都是唯一的。在官方文档中了解更多关于如何确保这一点的信息，网址为：[https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#verify-the-mac-address-and-product-uuid-are-unique-for-every-node](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#verify-the-mac-address-and-product-uuid-are-unique-for-every-node)。
- en: 'Now, we are ready to initialize the cluster using kubeadm. In order to do this,
    perform the following steps:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备使用kubeadm初始化集群。为了做到这一点，请执行以下步骤：
- en: 'Execute the following command, assuming that the Service network is `10.96.0.0/12` and
    the Pod network is `10.244.0.0/16`:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令，假设服务网络为`10.96.0.0/12`，Pod网络为`10.244.0.0/16`：
- en: '[PRE41]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Carefully examine the kubeadm initialization output and note down the `kubeadm
    join` information, as follows:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仔细检查kubeadm初始化输出，并记录`kubeadm join`信息，如下：
- en: '[PRE42]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'If your kubeadm token expires (after 24 hours), you can always create a new
    one using the following command:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的kubeadm令牌过期（24小时后），您可以始终使用以下命令创建一个新的：
- en: '[PRE43]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Copy your **kubectl config** (**kubeconfig**) to the default location, as follows:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**kubectl config** (**kubeconfig**)复制到默认位置，如下：
- en: '[PRE44]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, it is recommended to copy the config to your Windows machine in order
    to be able to manage the cluster without logging into the master node. In the
    PowerShell window, execute the following commands:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，建议将配置复制到Windows机器，以便能够在不登录到主节点的情况下管理集群。在PowerShell窗口中，执行以下命令：
- en: '[PRE45]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Carefully examine the merged config to check that you did not override any
    existing clusters'' configuration. You can read more about merging `kubeconfigs`
    in [Chapter 6](791e78c0-f625-4232-9907-36e25ec2767d.xhtml), *Interacting with
    Kubernetes Clusters*. If the merged configuration is good, you may save it as `$env:USERPROFILE\.kube\config`
    and switch context to `kubernetes-admin@kubernetes` using the following commands:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仔细检查合并的配置，以确保您没有覆盖任何现有集群的配置。您可以在[第6章](791e78c0-f625-4232-9907-36e25ec2767d.xhtml)中了解有关合并`kubeconfigs`的更多信息，*与Kubernetes集群交互*。如果合并的配置正确，您可以将其保存为`$env:USERPROFILE\.kube\config`，并使用以下命令切换到`kubernetes-admin@kubernetes`上下文：
- en: '[PRE46]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Verify that the configuration is working correctly. Retrieve the list of nodes,
    as follows (note that the `NotReady` status is caused by no Pod network being
    installed yet):'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证配置是否正常工作。按照以下方式检索节点列表（请注意，“NotReady”状态是由于尚未安装Pod网络）：
- en: '[PRE47]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'If you do not plan to add any Ubuntu nodes, you may choose to **untaint** the
    master node in order to allow the scheduling of Linux Pods on the master node.
    Note that this should be performed for development clusters only. This is achieved
    by running the following code:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您不打算添加任何Ubuntu节点，可以选择**untaint**主节点，以允许在主节点上调度Linux Pods。请注意，这仅适用于开发集群。通过运行以下代码来实现：
- en: '[PRE48]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In case you would like to set up the cluster again, you first need to tear down
    the cluster using kubeadm. Read more about this procedure in the official documentation,
    at: [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#tear-down](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#tear-down).
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想重新设置集群，首先需要使用kubeadm拆除集群。在官方文档中了解更多关于此过程的信息：[https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#tear-down](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#tear-down)。
- en: Your Kubernetes master node is almost ready. The last remaining step is the
    installation of the Pod network. Let's proceed!
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Kubernetes主节点几乎准备就绪。最后一步是安装Pod网络。让我们继续！
- en: Installing the Kubernetes network
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Kubernetes网络
- en: After the Kubernetes master has been initialized with kubeadm, the next step
    is the installation of the Pod network. We have covered Kubernetes networking
    options in [Chapter 5](da2ee6af-a754-4fc8-ae62-86d8e68f0bd0.xhtml), *Kubernetes
    Networking*, which explains in detail which **Container Network Interface** (**CNI**)
    plugins are supported for hybrid Windows/Linux clusters. For this on-premises
    cluster deployment, we will use the Flannel network with a `host-gw` backend (a `win-bridge`
    CNI plugin on Windows nodes). Remember that you can use this approach only if
    there is **Layer 2** (**L2**) connectivity (no **Layer 3** (**L3**) routing) between
    the nodes. In general, a `host-gw` backend is preferable as it is in a stable
    feature state, whereas an overlay backend is still in an alpha feature state for
    Windows nodes.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用kubeadm初始化Kubernetes主节点之后，下一步是安装Pod网络。我们在[第5章](da2ee6af-a754-4fc8-ae62-86d8e68f0bd0.xhtml)中介绍了Kubernetes网络选项，详细解释了混合Windows/Linux集群支持的**容器网络接口**（**CNI**）插件。对于本地部署的集群，我们将使用Flannel网络和`host-gw`后端（Windows节点上的`win-bridge`
    CNI插件）。请记住，只有在节点之间存在**第2层**（**L2**）连接性（没有**第3层**（**L3**）路由）时，才能使用此方法。一般来说，`host-gw`后端更可取，因为它处于稳定的功能状态，而覆盖后端对于Windows节点仍处于alpha功能状态。
- en: 'If you are interested in Flannel with overlay backend installation, please
    refer to the official documentation for detailed steps, at: [https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#configuring-flannel-in-vxlan-mode-on-the-linux-control-plane](https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#configuring-flannel-in-vxlan-mode-on-the-linux-control-plane).
    Note that you need Windows Server 2019 with the KB4489899 patch installed for
    overlay networking.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对使用覆盖后端的Flannel安装感兴趣，请参考官方文档中的详细步骤：[https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#configuring-flannel-in-vxlan-mode-on-the-linux-control-plane](https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#configuring-flannel-in-vxlan-mode-on-the-linux-control-plane)。请注意，您需要安装了KB4489899补丁的Windows
    Server 2019以进行覆盖网络。
- en: 'To install Flannel with a `host-gw` backend, perform the following steps (in
    the PowerShell window or on the Kubernetes master via SSH):'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装带有`host-gw`后端的Flannel，请执行以下步骤（在PowerShell窗口中或通过SSH在Kubernetes主节点上）：
- en: 'Download the latest official manifest file for Flannel for Kubernetes, like
    this:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载Flannel for Kubernetes的最新官方清单文件，如下所示：
- en: '[PRE49]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Customize the manifest, so that the `net-conf.json` file section has a `host-gw` backend
    type and proper Pod network defined (default: `10.244.0.0/16`), as follows:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自定义清单，使`net-conf.json`文件部分具有`host-gw`后端类型和正确定义的Pod网络（默认值：`10.244.0.0/16`），如下所示：
- en: '[PRE50]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Apply the modified manifest, like this:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用修改后的清单，如下所示：
- en: '[PRE51]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The latest official manifest does not need extra patching for Linux-only scheduling,
    as it already covers this requirement. If you are following the official guide,
    you may skip this step.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最新的官方清单不需要额外的补丁来进行仅Linux调度，因为它已经涵盖了这一要求。如果您遵循官方指南，可以跳过此步骤。
- en: 'Verify that the Pod network installation has been successful. You should be
    able to schedule a simple interactive Pod that is running Bourne shell—this will
    work only if you have an untainted master node for Pod scheduling or have other
    Linux nodes. This is achieved by running the following code:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证Pod网络安装是否成功。您应该能够安排一个运行Bourne shell的简单交互式Pod——只有在您有一个未被污染的主节点用于Pod调度或者有其他Linux节点时才能工作。通过运行以下代码来实现这一点：
- en: '[PRE52]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: With the Kubernetes master fully initialized, we can proceed to prepare a VM
    for the Windows node.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes主节点完全初始化后，我们可以继续为Windows节点准备VM。
- en: Preparing VMs for Windows nodes
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Windows节点准备VM
- en: 'This section follows a similar structure as for the Ubuntu Server VM preparation.
    For the Windows VM, we will perform the following steps:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的结构与Ubuntu Server VM准备类似。对于Windows VM，我们将执行以下步骤：
- en: Creating the VM
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建VM
- en: Installing Windows Server 2019
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Windows Server 2019
- en: Configuring the network
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置网络
- en: Installing the SSH server
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装SSH服务器
- en: Installing and configuring Kubernetes prerequisites
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装和配置Kubernetes先决条件
- en: Creating the VM
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建VM
- en: The steps for creating a Windows Server 2019 VM are almost the same as for Ubuntu
    Server 18.04\. If you are interested in screenshots for the process, please refer
    to the previous sections.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Windows Server 2019 VM的步骤几乎与Ubuntu Server 18.04相同。如果您对该过程的截图感兴趣，请参考前面的部分。
- en: 'To create the Windows Server 2019 Kubernetes node VM, open the Hyper-V manager application
    and perform the following steps:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建Windows Server 2019 Kubernetes节点VM，请打开Hyper-V管理器应用程序并执行以下步骤：
- en: From the Actions menu, choose New and click Virtual Machine.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“操作”菜单中，选择“新建”，然后单击“虚拟机”。
- en: Click Next, and choose the Name for the Windows node VM. We will use `Kubernetes
    Windows Node 01` for this purpose. Optionally, configure a custom directory for
    storing VM data to ensure there is enough disk space to host the VM. You need
    at least 30 GB of disk space for each node.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”，选择Windows节点VM的名称。我们将使用“Kubernetes Windows Node 01”来命名。可选地，配置一个自定义目录来存储VM数据，以确保有足够的磁盘空间来托管VM。每个节点至少需要30GB的磁盘空间。
- en: In the next dialog, choose Generation 2 and continue.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个对话框中，选择“第二代”并继续。
- en: Assign at least `4096` MB of RAM for the Windows node. Using less memory may
    result in `KubeletHasInsufficientMemory` being reported occasionally and preventing
    Pods from scheduling. The dynamic memory allocation feature will not work as we
    are going to enable nested virtualization for this machine. For production scenarios,
    consider allocating more resources.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为Windows节点分配至少4096MB的RAM。使用更少的内存可能会导致偶尔报告“KubeletHasInsufficientMemory”并阻止Pod的调度。由于我们将为此机器启用嵌套虚拟化，动态内存分配功能将不起作用。对于生产场景，考虑分配更多资源。
- en: Choose an internal NAT or an external switch as the connection for the VM. This
    must be the same switch that you use for the master node.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择内部NAT或外部交换机作为VM的连接。这必须是您用于主节点的相同交换机。
- en: Create a new virtual hard disk with `250` GB size or more. As VHDX are dynamically
    expandable, it is easier to allocate more space from the beginning instead of
    expanding the disk and partitions later.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的虚拟硬盘，大小为250GB或更大。由于VHDX是动态可扩展的，因此最好从一开始就分配更多的空间，而不是以后再扩展磁盘和分区。
- en: Choose to install the operating system from ISO and select your Windows Server
    2019 (or 1903) image file.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择从ISO安装操作系统，并选择您的Windows Server 2019（或1903）镜像文件。
- en: Finish the VM creation wizard. Before starting the VM, we need to configure
    it further. Right-click the `Kubernetes Windows Node 01` VM and open Settings.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成VM创建向导。在启动VM之前，我们需要进一步配置它。右键单击“Kubernetes Windows Node 01”VM并打开“设置”。
- en: In the Processor menu, set the Number of virtual processors to at least `2`
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“处理器”菜单中，将“虚拟处理器数量”设置为至少2。
- en: In the Network Adapter Advanced Features menu, select Enable MAC address spoofing for
    containers. If you are using an external vSwitch and have an external DHCP, you
    may also want to configure static DHCP assignments. For an internal NAT vSwitch,
    you can leave the default Dynamic setting.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“网络适配器高级功能”菜单中，选择为容器启用MAC地址欺骗。如果您使用外部vSwitch并且有外部DHCP，您可能还想配置静态DHCP分配。对于内部NAT
    vSwitch，您可以保留默认的“动态”设置。
- en: Apply all changes.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用所有更改。
- en: 'Enable nested virtualization with the following command in the PowerShell window,
    running as Administrator:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以管理员身份运行的PowerShell窗口中使用以下命令启用嵌套虚拟化。
- en: '[PRE53]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The machine is now ready to start the operating system installation.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 该机器现在已准备好启动操作系统安装。
- en: Installing Windows Server 2019
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Windows Server 2019
- en: The installation process for Windows Server 2019 is performed using a graphical
    interface. If you are considering automating the installation process—for example,
    for Vagrant or Packer—you should consider using `Autounattend.xml` files provided
    by virtual floppy drives. You can find an example of such a configuration file
    on GitHub, at: [https://github.com/ptylenda/kubernetes-for-windows/blob/master/packer/windows/http/Autounattend.xml](https://github.com/ptylenda/kubernetes-for-windows/blob/master/packer/windows/http/Autounattend.xml).
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: Windows Server 2019的安装过程是使用图形界面执行的。如果您考虑自动化安装过程，例如对于Vagrant或Packer，您应该考虑使用虚拟软驱提供的“Autounattend.xml”文件。您可以在GitHub上找到这样一个配置文件的示例，网址为：[https://github.com/ptylenda/kubernetes-for-windows/blob/master/packer/windows/http/Autounattend.xml](https://github.com/ptylenda/kubernetes-for-windows/blob/master/packer/windows/http/Autounattend.xml)。
- en: 'To perform the installation, perform the following steps:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤来执行安装：
- en: Connect to `Kubernetes Windows Node 01 VM` by double-clicking the machine in
    Hyper-V manager.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在Hyper-V管理器中双击`Kubernetes Windows Node 01 VM`来连接。
- en: Start the VM and immediately press any key in order to boot from the installation
    DVD mounted into the VM.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动虚拟机，并立即按任意键以从安装到虚拟机中的安装DVD启动。
- en: Choose language and locale settings.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择语言和区域设置。
- en: Click Install Now.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击立即安装。
- en: Provide the product key for your installation.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供安装产品密钥。
- en: In the next dialog, you can choose whether to install Desktop Experience or
    not. We suggest not installing it as it makes the installation more compact and
    leaves configuration to command line, which is better for **automation**.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个对话框中，您可以选择是否安装桌面体验。我们建议不安装它，因为这样可以使安装更紧凑，并且将配置留给命令行，这对于**自动化**更好。
- en: Read and accept the license terms.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读并接受许可条款。
- en: Select the Custom installation of Windows Server.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Windows Server的自定义安装。
- en: Proceed with the default installation target (whole disk, without partitioning).
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续使用默认的安装目标（整个磁盘，无需分区）。
- en: Wait for the installation to finish and for the machine to reboot.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待安装完成并等待机器重新启动。
- en: During the first login, you have to set the Administrator's password.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一次登录时，您必须设置管理员密码。
- en: Now, you have a Windows Server 2019 VM up and running, but before joining it
    to the Kubernetes cluster, we need to configure the network and install prerequisites.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经启动并运行了一个Windows Server 2019虚拟机，但在加入Kubernetes集群之前，我们需要配置网络并安装先决条件。
- en: Configuring the network
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置网络
- en: Additional network configuration is needed only if you are running an internal
    NAT vSwitch—in this case, you need to configure a static IP address, a gateway
    address, and DNS server information. If you are running an external vSwitch with
    an external DHCP, the configuration should be performed automatically.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在运行内部NAT vSwitch时才需要进行额外的网络配置——在这种情况下，您需要配置静态IP地址、网关地址和DNS服务器信息。如果您正在运行具有外部DHCP的外部vSwitch，则配置应自动执行。
- en: 'In this guide, we follow the convention that Kubernetes nodes have subsequent
    IP addresses starting with `10.0.0.3`. In order to configure `10.0.0.3` as the
    static IP address for the first node in the cluster, perform the following steps:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在本指南中，我们遵循Kubernetes节点具有以`10.0.0.3`开头的连续IP地址的约定。为了将`10.0.0.3`配置为集群中第一个节点的静态IP地址，请执行以下步骤：
- en: Start PowerShell by running the `powershell` command on the VM.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在虚拟机上运行`powershell`命令来启动PowerShell。
- en: 'Execute the following command to find the `ifIndex` of the main `Ethernet`
    interface:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令以查找主`Ethernet`接口的`ifIndex`：
- en: '[PRE54]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Create a new static IP address of `10.0.0.3` for the interface, as follows:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为接口创建一个新的静态IP地址`10.0.0.3`，如下所示：
- en: '[PRE55]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Set DNS server information for the interface, as follows (use appropriate DNS
    servers if needed):'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为接口设置DNS服务器信息，如下所示（如果需要，请使用适当的DNS服务器）：
- en: '[PRE56]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In case you are behind a network proxy, you can define appropriate environment
    variables at the machine level using the following commands in PowerShell:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在网络代理后面，可以使用PowerShell中的以下命令在机器级别定义适当的环境变量：
- en: '**`[Environment]::SetEnvironmentVariable("HTTP_PROXY", "http://proxy.example.com:80/",
    [EnvironmentVariableTarget]::Machine)`**'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '**`[Environment]::SetEnvironmentVariable("HTTP_PROXY", "http://proxy.example.com:80/",
    [EnvironmentVariableTarget]::Machine)`**'
- en: '**`[Environment]::SetEnvironmentVariable("HTTPS_PROXY", "http://proxy.example.com:443/",
    [EnvironmentVariableTarget]::Machine)`**'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '**`[Environment]::SetEnvironmentVariable("HTTPS_PROXY", "http://proxy.example.com:443/",
    [EnvironmentVariableTarget]::Machine)`**'
- en: Let's now take a look at how to approach accessing Windows Server VM remotely.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何远程访问Windows Server虚拟机。
- en: Installing the SSH server
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装SSH服务器
- en: 'Now, we need a means of connecting to the VM without the Hyper-V terminal—you
    can still use it if you prefer, but it is more limited than using **Remote Desktop
    Protocol** (**RDP**) or SSH. You have the following options:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一种连接到VM而不使用Hyper-V终端的方法——如果您愿意，仍然可以使用它，但与使用**远程桌面协议**（**RDP**）或SSH相比，它的功能更有限。您有以下选项：
- en: Install the SSH server and use Vim for managing configuration files.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装SSH服务器并使用Vim来管理配置文件。
- en: 'Enable the RDP connection (example guide: [https://theitbros.com/how-to-remotely-enable-remote-desktop-using-powershell/](https://theitbros.com/how-to-remotely-enable-remote-desktop-using-powershell/)).'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用RDP连接（示例指南：[https://theitbros.com/how-to-remotely-enable-remote-desktop-using-powershell/](https://theitbros.com/how-to-remotely-enable-remote-desktop-using-powershell/)）。
- en: 'Use PowerShell Remoting (example guide: [https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/enable-psremoting?view=powershell-6](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/enable-psremoting?view=powershell-6)).'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用PowerShell远程连接（示例指南：[https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/enable-psremoting?view=powershell-6](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/enable-psremoting?view=powershell-6)）。
- en: 'We will demonstrate how to enable the first option, SSH server & Vim, on Windows
    Server 2019\. This option makes access to our Kubernetes cluster uniform, and
    you can use the same SSH keys for all nodes. Perform the following steps:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将演示如何在Windows Server 2019上启用第一个选项，即SSH服务器和Vim。此选项使得访问我们的Kubernetes集群变得统一，您可以在所有节点上使用相同的SSH密钥。执行以下步骤：
- en: In the Hyper-V terminal connection for the Windows Server machine, start PowerShell
    by using the `powershell` command.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows Server机器的Hyper-V终端连接中，通过使用`powershell`命令启动PowerShell。
- en: 'Verify which is the current version of SSH server that can be installed, by
    running the following code:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下代码验证当前可以安装的SSH服务器的版本：
- en: '[PRE57]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Install the `OpenSSH.Server` capability, like this:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`OpenSSH.Server`功能，如下所示：
- en: '[PRE58]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Start the `sshd` service, like this:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`sshd`服务，如下所示：
- en: '[PRE59]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Enable automatic startup of the `sshd` service, like this:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用`sshd`服务的自动启动，如下所示：
- en: '[PRE60]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Ensure that the appropriate firewall rule is in place (`OpenSSH-Server-In-TCP`),
    as follows:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保适当的防火墙规则已经就位（`OpenSSH-Server-In-TCP`），如下所示：
- en: '[PRE61]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'If it is not present, add it manually, like this:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果不存在，请手动添加，如下所示：
- en: '[PRE62]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'From your development machine, verify that the connection to the VM at `10.0.0.3` is
    possible via SSH, as follows:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从开发机器上，验证通过SSH连接到`10.0.0.3`的VM是否可行，如下所示：
- en: '[PRE63]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: By default, the `cmd` shell, which has limited functionality, is started. Start
    PowerShell in the SSH session by using the `powershell` command.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，启动具有有限功能的`cmd` shell。通过使用`powershell`命令在SSH会话中启动PowerShell。
- en: 'Change the default shell for SSH to be `powershell`, using the following command:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将SSH的默认shell更改为`powershell`，使用以下命令：
- en: '[PRE64]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Install the Chocolatey package manager in order to install the Vim editor,
    as follows:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Chocolatey软件包管理器以安装Vim编辑器，如下所示：
- en: '[PRE65]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Install Vim using Chocolatey, like this:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Chocolatey安装Vim，如下所示：
- en: '[PRE66]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Configure a passwordless SSH login. Add your `~/.ssh/id_rsa.pub` public SSH
    key to `administrators_authorized_keys` on your Windows Server VM, using the vim
    `C:\ProgramData\ssh\administrators_authorized_keys` command.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置无密码SSH登录。使用`vim C:\ProgramData\ssh\administrators_authorized_keys`命令将您的`~/.ssh/id_rsa.pub`公共SSH密钥添加到Windows
    Server VM上的`administrators_authorized_keys`。
- en: 'Fix permissions for the `administrators_authorized_keys` file, as follows:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修复`administrators_authorized_keys`文件的权限，如下所示：
- en: '[PRE67]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Restart the `sshd` service, like this:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动`sshd`服务，如下所示：
- en: '[PRE68]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: All Windows provisioning operations can be performed by a mix of `Autounattend.xml`
    automated Windows setup (using regular `cmd` and `powershell` scripts) and Ansible,
    which is supported on Windows hosts. You can check how this approach works with
    Packer in this minimal example repository, at: [https://github.com/ptylenda/ironic-packer-template-windows2016](https://github.com/ptylenda/ironic-packer-template-windows2016).
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Windows配置操作都可以通过`Autounattend.xml`自动化Windows设置（使用常规的`cmd`和`powershell`脚本）和在Windows主机上支持的Ansible的混合来执行。您可以在此最小示例存储库中检查Packer如何使用此方法，网址为：[https://github.com/ptylenda/ironic-packer-template-windows2016](https://github.com/ptylenda/ironic-packer-template-windows2016)。
- en: At this point, your Windows Server VM is connected to the network and is ready
    for installing Kubernetes prerequisites.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您的Windows Server VM已连接到网络，并准备安装Kubernetes的先决条件。
- en: Installing and configuring Kubernetes prerequisites
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Kubernetes的先决条件
- en: 'First, ensure that Windows Server 2019 is up to date. In order to do that,
    use the Hyper-V terminal connection and perform the following steps:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确保Windows Server 2019已经更新。为了做到这一点，使用Hyper-V终端连接并执行以下步骤：
- en: If you do not want to use a third-party module for managing updates, you can
    use the `sconfig` command. Currently, these operations cannot be easily performed
    via SSH as they require a **graphical user interface** (**GUI**) interaction.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想使用第三方模块来管理更新，可以使用`sconfig`命令。目前，这些操作无法通过SSH轻松执行，因为它们需要**图形用户界面**（**GUI**）交互。
- en: Open a PowerShell session, using the `powershell` command.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开PowerShell会话，使用`powershell`命令。
- en: 'Install the `PSWindowsUpdate` custom module for managing Windows updates, as
    follows:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装用于管理Windows更新的`PSWindowsUpdate`自定义模块，如下所示：
- en: '[PRE69]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Trigger Windows updates by running the following code (this process may take
    a bit of time to complete):'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下代码触发Windows更新（此过程可能需要一些时间才能完成）：
- en: '[PRE70]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The next step is to install Docker and Kubernetes itself. This can be approached
    in two ways:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是安装Docker和Kubernetes本身。可以通过两种方式来实现：
- en: Manual Docker installation and configuration, as in the official Microsoft documentation,
    at: [https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/joining-windows-workers](https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/joining-windows-workers)
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动安装和配置Docker，如官方微软文档中所述，网址为：[https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/joining-windows-workers](https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/joining-windows-workers)
- en: Semi-automated installation using Kubernetes `sig-windows-tools` scripts, as
    in the official Kubernetes documentation, at: [https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#join-windows-worker-node](https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#join-windows-worker-node)
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Kubernetes `sig-windows-tools`脚本进行半自动化安装，如官方Kubernetes文档中所述，网址为：[https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#join-windows-worker-node](https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#join-windows-worker-node)
- en: 'We will use the second option as it is a more recent approach that aligns with
    kubeadm support for Windows nodes, available from version 1.16 onward. `sig-windows-tools` scripts
    perform the following operations:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用第二个选项，因为这是一个更近期的方法，与kubeadm支持Windows节点一致，从版本1.16开始可用。`sig-windows-tools`脚本执行以下操作：
- en: Enable the Windows Server Containers feature.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用Windows Server容器功能。
- en: Download the selected container runtime (Docker or **Container Runtime Interface**
    (**CRI**)).
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载所选的容器运行时（Docker或**容器运行时接口**（**CRI**））。
- en: Pull the required Docker images.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拉取所需的Docker镜像。
- en: Download Kubernetes and Flannel binaries, install them, and add them to the `$env:PATH`
    variable.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载Kubernetes和Flannel二进制文件，安装它们，并将它们添加到`$env:PATH`变量中。
- en: Download the selected CNI plugins.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载所选的CNI插件。
- en: 'To install all prerequisites for Kubernetes on Windows, perform the following
    steps:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上安装Kubernetes的所有先决条件，请执行以下步骤：
- en: 'SSH into the Windows Server node VM, like this:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SSH进入Windows Server节点VM，如下所示：
- en: '[PRE71]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Create and use a new directory where `sig-windows-tools` scripts will be downloaded—for
    example, `sig-windows-tools-kubeadm`, as follows:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并使用一个新目录，其中将下载`sig-windows-tools`脚本，例如`sig-windows-tools-kubeadm`，如下所示：
- en: '[PRE72]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Download the latest `sig-windows-tools` repository and extract it. Note that
    the path in the repository may change as it is currently dedicated for `v1.15.0` (you
    can check the official documentation for the latest version, at: [https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#preparing-a-windows-node](https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#preparing-a-windows-node)).
    Alternatively, you may use the fork in the GitHub repository for the book: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter07/07_sig-windows-tools-kubeadm](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter07/07_sig-windows-tools-kubeadm).
    The scripts contain a few bug fixes cherry-picked from `sig-windows-tools` that
    ensure networking works correctly. The code for this step can be seen in the following
    snippet:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载最新的`sig-windows-tools`存储库并解压它。请注意，存储库中的路径可能会更改，因为它目前专门用于`v1.15.0`（您可以在官方文档中查看最新版本，网址为：[https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#preparing-a-windows-node](https://kubernetes.io/docs/setup/production-environment/windows/user-guide-windows-nodes/#preparing-a-windows-node)）。或者，您可以使用书中GitHub存储库中的分支：[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter07/07_sig-windows-tools-kubeadm](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter07/07_sig-windows-tools-kubeadm)。这些脚本包含了一些从`sig-windows-tools`中挑选出来的修复bug，以确保网络正常工作。这一步的代码可以在下面的片段中看到：
- en: '[PRE73]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Now, you need to customize the `Kubeclusterbridge.json` file. This configuration
    file is used by a helper PowerShell module that installs prerequisites and joins
    Windows nodes. In the following code block, you can find the configuration for
    the Windows Server 2019 node. You can also download it from the GitHub repository
    for the book at: [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/07_sig-windows-tools-kubeadm/Kubeclusterbridge.json](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/07_sig-windows-tools-kubeadm/Kubeclusterbridge.json).
    You need to ensure that `Images` have versions matching your node operating system
    version and that `Network` has a proper `ServiceCidr` and `ClusterCidr`. Additionally,
    you need to provide a `KubeadmToken` and `KubeadmCAHash`, which were generated
    when the Kubernetes master was initialized. You can generate a new token on the
    Kubernetes master by using the `kubeadm token create --print-join-command` command.
    The code for this step can be seen in the following snippet:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要自定义`Kubeclusterbridge.json`文件。这个配置文件是由一个辅助的PowerShell模块使用的，它安装先决条件并加入Windows节点。在下面的代码块中，您可以找到Windows
    Server 2019节点的配置。您也可以从书的GitHub存储库下载它：[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/07_sig-windows-tools-kubeadm/Kubeclusterbridge.json](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter07/07_sig-windows-tools-kubeadm/Kubeclusterbridge.json)。您需要确保`Images`的版本与您的节点操作系统版本匹配，并且`Network`有适当的`ServiceCidr`和`ClusterCidr`。此外，您需要提供一个`KubeadmToken`和`KubeadmCAHash`，这是在初始化Kubernetes主节点时生成的。您可以使用`kubeadm
    token create --print-join-command`命令在Kubernetes主节点上生成一个新的令牌。这一步的代码可以在下面的片段中看到：
- en: '[PRE74]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: At this point, you need to switch to an RDP connection or to a Hyper-V terminal
    connection. The installation script requires some interaction and elevated privileges
    that cannot be performed via an SSH PowerShell session.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，您需要切换到RDP连接或Hyper-V终端连接。安装脚本需要一些交互和无法通过SSH PowerShell会话执行的提升权限。
- en: 'Start the PowerShell session using the `powershell` command, navigate to the `.\sig-windows-tools-kubeadm`
    directory, and start the installation process, as follows:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`powershell`命令启动PowerShell会话，转到`.\sig-windows-tools-kubeadm`目录，并开始安装过程，如下所示：
- en: '[PRE75]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'The machine will need a reboot during the installation process, and after you
    log in again, the installation will continue. Verify that the loaded configuration
    is as expected, by checking the information shown in the following screenshot:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在安装过程中，机器将需要重新启动，重新登录后安装将继续。通过检查以下截图中显示的信息，验证加载的配置是否符合预期：
- en: '![](assets/318ae8af-2dd1-489c-9d22-7ae13610da62.png)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/318ae8af-2dd1-489c-9d22-7ae13610da62.png)'
- en: You may run into a *race condition* between the fully running Docker daemon
    and images being pulled. In case of an error, just reboot again or restart the
    installation process with the same command—remember to close the existing PowerShell
    session and start a new one before the next attempt. The process of downloading
    images may take some time, depending on your network connection.
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能会遇到完全运行的Docker守护程序和正在拉取的镜像之间的*竞争条件*。如果出现错误，只需再次重启或使用相同命令重新启动安装过程——请记住在下一次尝试之前关闭现有的PowerShell会话并启动一个新的会话。根据您的网络连接情况，下载镜像可能需要一些时间。
- en: 'After images have been pulled, and the Kubernetes, Flannel, and CNI plugins
    have been installed, you will be asked to generate a new SSH key pair for accessing
    the master node from the new Windows node—alternatively, you may do it yourself
    or reuse an existing key pair. This will make the joining process easier, as cluster
    configuration has to be retrieved by the joining script using SSH. Execute the
    command from script output on the `10.0.0.2` master in order to add the public
    key to `authorized_keys` for the Ubuntu user, as shown in the following screenshot:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 镜像已经被拉取，Kubernetes、Flannel和CNI插件已经安装完毕，接下来将会要求您为从新的Windows节点访问主节点生成新的SSH密钥对——或者您也可以自己操作或重用现有的密钥对。这将使加入过程更加简单，因为加入脚本需要使用SSH来检索集群配置。在`10.0.0.2`主节点上执行脚本输出的命令，以将公钥添加到Ubuntu用户的`authorized_keys`中，如下截图所示：
- en: '![](assets/68a0e9e6-640f-4b64-820b-5c25bfb98857.png)'
  id: totrans-395
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/68a0e9e6-640f-4b64-820b-5c25bfb98857.png)'
- en: When the installation finishes, close the PowerShell window and open a new one,
    using the `powershell` command.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，关闭PowerShell窗口并打开一个新窗口，使用`powershell`命令。
- en: 'Currently, you need to clean up the `ContainerBootstrap` scheduler task that
    reruns the script after each boot (this may be fixed in the future releases),
    as follows:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，您需要清理`ContainerBootstrap`调度程序任务，该任务在每次启动后重新运行脚本（这可能在未来的版本中得到修复），操作如下：
- en: '[PRE76]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Verify that Docker images have been pulled using the `docker images` command
    and that Kubernetes binaries have been installed— for example, by running the `kubectl
    version` command.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`docker images`命令验证Docker镜像是否已被拉取，并通过运行`kubectl version`命令验证Kubernetes二进制文件是否已安装。
- en: Consider exporting the VM image or creating a checkpoint—this will be useful
    if you choose to add more Windows nodes to the cluster or run into problems during
    the join process. We can now *finally* proceed to join our first Windows node
    to the cluster!
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑导出VM镜像或创建检查点——如果您选择向集群添加更多的Windows节点或在加入过程中遇到问题，这将非常有用。现在我们终于可以将第一个Windows节点加入集群了！
- en: Joining Windows nodes using kubeadm
  id: totrans-401
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用kubeadm加入Windows节点
- en: 'The next task is joining our Windows Server 2019 VM as a node in the Kubernetes
    cluster. We will use the same `KubeCluster.ps1` script from the Kubernetes `sig-windows-tools`
    repository, which internally uses **kubeadm** for joining the cluster. The script
    will perform the following actions:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务是将我们的Windows Server 2019 VM作为Kubernetes集群中的节点加入。我们将使用来自Kubernetes `sig-windows-tools`存储库的相同`KubeCluster.ps1`脚本，该脚本在内部使用**kubeadm**加入集群。该脚本将执行以下操作：
- en: Retrieve the *kubeconfig* file from the `10.0.0.2` master using SSH.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用SSH从`10.0.0.2`主节点检索*kubeconfig*文件。
- en: Register **kubelet** as a Windows service. This will ensure that the kubelet
    process is always running on the Windows node.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**kubelet**注册为Windows服务。这将确保kubelet进程始终在Windows节点上运行。
- en: Prepare the CNI plugins' configuration.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备CNI插件的配置。
- en: Create a **Host Networking Service** (**HNS**) network.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建**主机网络服务**（**HNS**）网络。
- en: Add firewall rules, if needed.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加防火墙规则（如果需要）。
- en: Register **flanneld** and **kube-proxy** as Windows services.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**flanneld**和**kube-proxy**注册为Windows服务。
- en: If the join script fails, start a new PowerShell session and rerun the script.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 如果加入脚本失败，请启动新的PowerShell会话并重新运行脚本。
- en: 'To join the Windows node, proceed with the following steps:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入Windows节点，请按以下步骤进行：
- en: In the Hyper-V terminal for the Windows Server VM, start a new PowerShell session
    using the `powershell` command.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows Server VM的Hyper-V终端中，使用`powershell`命令启动新的PowerShell会话。
- en: 'Navigate to the directory with the `sig-windows-tools` scripts by running the
    following command:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令导航到带有`sig-windows-tools`脚本的目录：
- en: '[PRE77]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Execute the join command, like this:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行加入命令，就像这样：
- en: '[PRE78]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: In case of any problems with the `kubeadm join` command (for example, hanging
    preflight checks), you can edit the `KubeClusterHelper.psm1` file, find the `kubeadm
    join` command, and add the `--v=3` parameter (or any other verbosity level) to
    have more detailed info. Additionally, you can examine the services logs in the
    `C:\ProgramData\Kubernetes\logs` directory. It is also a good idea to verify whether
    the issue is not already known, at [https://github.com/kubernetes-sigs/sig-windows-tools/issues](https://github.com/kubernetes-sigs/sig-windows-tools/issues)—the
    fix may be already available.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`kubeadm join`命令出现任何问题（例如，挂起的预检查），您可以编辑`KubeClusterHelper.psm1`文件，找到`kubeadm
    join`命令，并添加`--v=3`参数（或任何其他详细程度）以获得更详细的信息。此外，您可以检查`C:\ProgramData\Kubernetes\logs`目录中的服务日志。还可以验证问题是否已知，网址为[https://github.com/kubernetes-sigs/sig-windows-tools/issues](https://github.com/kubernetes-sigs/sig-windows-tools/issues)——修复可能已经可用。
- en: 'Joining a new Windows node is a relatively quick process, and after a few seconds,
    the operation should finish. Now, verify whether the new node is visible in the
    cluster and has a `Ready` status, like this:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加入新的Windows节点是一个相对快速的过程，几秒钟后，操作应该完成。现在，验证新节点是否在集群中可见，并且具有`Ready`状态，就像这样：
- en: '[PRE79]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'On the Windows node, verify using the `ipconfig` command that the `cbr0_ep`
    interface has been created by Flannel, as illustrated in the following screenshot:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows节点上，使用`ipconfig`命令验证Flannel是否已创建`cbr0_ep`接口，如下面的屏幕截图所示：
- en: '![](assets/10ed8551-4d88-49f1-92b4-0d581839e863.png)'
  id: totrans-420
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/10ed8551-4d88-49f1-92b4-0d581839e863.png)'
- en: 'Run a quick smoke test of the new node by creating an ad hoc PowerShell Pod
    named `powershell-debug`. The Pod spec override must contain `nodeSelector`, which
    matches Windows nodes, as illustrated in the following code block:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建一个临时的PowerShell Pod命名为`powershell-debug`来对新节点进行快速的烟雾测试。 Pod规范覆盖必须包含`nodeSelector`，与Windows节点匹配，如下面的代码块所示：
- en: '[PRE80]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The image pull can take a bit of time. You can observe the Pod events by using
    the following command:'
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 镜像拉取可能需要一些时间。您可以使用以下命令观察Pod事件：
- en: '[PRE81]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'When the Pod starts, verify DNS resolution and connectivity to external addresses—for
    example, by using the `ping google.com` command, as shown in the following screenshot:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 Pod 启动时，请验证 DNS 解析和对外部地址的连接 - 例如，通过使用 `ping google.com` 命令，如下截图所示：
- en: '![](assets/8fd7dfa6-09b2-48df-b5c5-ff27dba7d263.png)'
  id: totrans-426
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8fd7dfa6-09b2-48df-b5c5-ff27dba7d263.png)'
- en: 'Exit the container and delete the Pod afterward, by running the following command
    (we did not use the `--rm` flag so that you can easily investigate any problems
    using the `kubectl describe` command):'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 退出容器，然后通过运行以下命令删除 Pod（我们没有使用 `--rm` 标志，以便您可以轻松使用 `kubectl describe` 命令调查任何问题）：
- en: '[PRE82]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'For completeness, in order to remove the Windows node and reset the state of
    the machine (for example, after a configuration change, in order to install and
    join again), use the same `KubeCluster.ps1` script and execute the following command:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，为了删除 Windows 节点并重置机器的状态（例如，在配置更改后，为了重新安装和加入），使用相同的 `KubeCluster.ps1`
    脚本并执行以下命令：
- en: '[PRE83]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: Congratulations—now, you have a fully functional, hybrid Windows/Linux Kubernetes
    cluster running! You may choose to add more Windows or Linux nodes following the
    same instructions or using VM images (remember about regenerating hostnames, MAC
    addresses, and `product_uuids`).
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜 - 现在，您拥有一个完全功能的混合 Windows/Linux Kubernetes 集群正在运行！您可以选择按照相同的说明或使用 VM 镜像添加更多的
    Windows 或 Linux 节点（记得重新生成主机名、MAC 地址和 `product_uuids`）。
- en: Deploying and inspecting your first application
  id: totrans-432
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署和检查您的第一个应用程序
- en: Now, it is time to have some fun with the newly created Kubernetes cluster.
    We will create a minimal Deployment with the NodePort Service, exposing the application
    to users. The application itself is the official ASP.NET Core 3.0 sample packaged
    as a Docker image—feel free to use any other Windows web application container
    image, or create your own. We have chosen the official sample in order to make
    the Deployment as fast as possible so that we can focus on Kubernetes operations.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候用新创建的 Kubernetes 集群玩一些游戏了。我们将创建一个最小的 Deployment 与 NodePort Service，将应用程序暴露给用户。应用程序本身是官方的
    ASP.NET Core 3.0 示例，打包为 Docker 镜像 - 您可以随意使用任何其他 Windows web 应用程序容器镜像，或者创建您自己的镜像。我们选择了官方示例，以便尽快进行部署，以便我们可以专注于
    Kubernetes 操作。
- en: 'To deploy the sample application, perform the following steps:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署示例应用程序，请执行以下步骤：
- en: 'Create a `windows-example.yaml` manifest file that contains the Deployment
    and Service definition. You can download it from the GitHub repository ([https://raw.githubusercontent.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/master/Chapter07/09_windows-example/windows-example.yaml](https://raw.githubusercontent.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/master/Chapter07/09_windows-example/windows-example.yaml))
    or directly apply it to the cluster, as follows:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含 Deployment 和 Service 定义的 `windows-example.yaml` 清单文件。您可以从 GitHub 仓库 ([https://raw.githubusercontent.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/master/Chapter07/09_windows-example/windows-example.yaml](https://raw.githubusercontent.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/master/Chapter07/09_windows-example/windows-example.yaml))
    下载它，或者直接将其应用到集群，如下所示：
- en: '[PRE84]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'There are three important points in this manifest file, which have been marked
    in bold:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 在此清单文件中有三个重要的点，已用粗体标记出来：
- en: '**Scheduling for Windows nodes** requires the use of `nodeSelector` with a `"beta.kubernetes.io/os":
    windows` value. Similarly, if you need to schedule the Pods for Linux nodes, you
    should use the `"beta.kubernetes.io/os": linux` node selector in hybrid clusters.'
  id: totrans-438
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为 Windows 节点进行调度** 需要使用带有值为 `"beta.kubernetes.io/os": windows` 的 `nodeSelector`。同样，如果您需要为
    Linux 节点调度 Pods，在混合集群中应该使用带有值为 `"beta.kubernetes.io/os": linux` 的节点选择器。'
- en: The Pod definition consists of one container based on a `mcr.microsoft.com/dotnet/core/samples:aspnetapp-nanoserver-1809`
    image. It is important to ensure **compatibility** between the container host
    operating system version and the container base image version. In this case, Windows
    Server 2019 LTS is compatible with 1809-based images. If you chose to use Windows
    Server 1903 nodes, you have to use 1903-based images.
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pod定义包括一个基于`mcr.microsoft.com/dotnet/core/samples:aspnetapp-nanoserver-1809`镜像的容器。确保容器主机操作系统版本与容器基础镜像版本之间的**兼容性**非常重要。在这种情况下，Windows
    Server 2019 LTS与基于1809的镜像兼容。如果您选择使用Windows Server 1903节点，则必须使用基于1903的镜像。
- en: The **NodePort Service** will be exposed on port **31001** on each node in the
    cluster. In other words, you can expect that the application will be available
    at the `10.0.0.2:31001` and `10.0.0.3:31001` endpoints. Note that for LoadBalancer
    Services, if your infrastructure does not have load balancers, you can consider
    using **keepalived** ([https://github.com/munnerz/keepalived-cloud-provider](https://github.com/munnerz/keepalived-cloud-provider)).
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NodePort Service**将在集群中的每个节点上的端口**31001**上公开。换句话说，您可以期望该应用程序在`10.0.0.2:31001`和`10.0.0.3:31001`端点可用。请注意，对于负载均衡器服务，如果您的基础设施没有负载均衡器，您可以考虑使用**keepalived**（[https://github.com/munnerz/keepalived-cloud-provider](https://github.com/munnerz/keepalived-cloud-provider)）。'
- en: 'Open the PowerShell window and apply the manifest file using `kubectl`, like
    this:'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开PowerShell窗口，并使用`kubectl`应用清单文件，就像这样：
- en: '[PRE85]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Wait for the Pods to start—the initial image pull may take a few minutes. You
    can observe the status of the Pods with the following command:'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待Pod启动——初始镜像拉取可能需要几分钟。您可以使用以下命令观察Pod的状态：
- en: '[PRE86]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Open your internet browser and navigate to `http://10.0.0.2:31001` and `http://10.0.0.3:31001`.
    You should see the sample application web page that confirms that the deployment
    was successful, as shown in the following screenshot:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的互联网浏览器，转到`http://10.0.0.2:31001`和`http://10.0.0.3:31001`。您应该看到确认部署成功的示例应用程序网页，如下截图所示：
- en: '![](assets/91d84c1f-bfab-4e8b-a3e2-94f4f37d6948.png)'
  id: totrans-446
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/91d84c1f-bfab-4e8b-a3e2-94f4f37d6948.png)'
- en: 'Now, let''s perform two common operations that are useful when debugging the
    application, as follows:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们执行两个在调试应用程序时有用的常见操作，如下所示：
- en: 'Retrieving Pod container logs: To access logs of one of the Pods (`windows-example-66cdf8c4bf-4472x`)
    in the Deployment, use the following `kubectl logs` command:'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检索Pod容器日志：要访问部署中一个Pod（`windows-example-66cdf8c4bf-4472x`）的日志，请使用以下`kubectl logs`命令：
- en: '[PRE87]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Execute into the Pod container in order to inspect the application configuration.
    To start a new `cmd` shell (PowerShell is not available in the `nanoserver` image),
    run the `kubectl exec` command, as follows:'
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行进入Pod容器以检查应用程序配置。要启动一个新的`cmd` shell（`nanoserver`镜像中不可用PowerShell），请运行以下`kubectl
    exec`命令：
- en: '[PRE88]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'You can now freely access and modify the container, which is useful in debugging
    and testing scenarios. For example, you can get the contents of the `appsettings.json`
    file, like this:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在可以自由访问和修改容器，这在调试和测试场景中非常有用。例如，您可以像这样获取`appsettings.json`文件的内容：
- en: '[PRE89]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: As you can see, deploying a sample Windows application to a Kubernetes cluster
    is easy, and all the debugging techniques you know from Linux Kubernetes clusters
    work exactly the same.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，将示例Windows应用程序部署到Kubernetes集群非常容易，而且您从Linux Kubernetes集群中了解的所有调试技术都完全相同。
- en: Summary
  id: totrans-455
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have gone through the journey of creating an on-premises
    Windows/Linux Kubernetes cluster on a Hyper-V host. This approach is useful for
    creating local development clusters as well as deploying production clusters outside
    of cloud environments. Let's have a recap of the procedure—we first planned the
    cluster design and the network for the nodes, Pod, and Service **classless inter-domain
    routings** (**CIDRs**). Then, we have created the Ubuntu Server 18.04 LTS VM—our
    Kubernetes master. Creating the master node required an initial configuration
    of the operating system and the installation of Docker. Initialization was performed
    using kubeadm. The next important step was the installation of the Kubernetes
    Pod network, which had to be compatible with both Linux and Windows nodes. In
    our case, we have chosen Flannel with a `host-gw` backend, which is currently
    the only stable network solution for hybrid clusters running on-premises. And
    after that, you have learned how to create the Windows Server 2019 LTS VM and
    how to join the machine to a Kubernetes cluster using kubeadm and `sig-windows-tools`
    scripts. Finally, we have deployed a sample ASP.NET Core 3.0 application and performed
    common operations, such as accessing container logs or executing into a container.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您已经学习了如何在Hyper-V主机上创建本地Windows/Linux Kubernetes集群的过程。这种方法对于创建本地开发集群以及在云环境之外部署生产集群非常有用。让我们回顾一下程序——我们首先规划了节点、Pod和Service的集群设计和网络**无类域间路由**（**CIDRs**）。然后，我们创建了Ubuntu
    Server 18.04 LTS VM——我们的Kubernetes主节点。创建主节点需要对操作系统进行初始配置并安装Docker。使用kubeadm进行初始化。下一个重要步骤是安装Kubernetes
    Pod网络，该网络必须与Linux和Windows节点兼容。在我们的情况下，我们选择了带有`host-gw`后端的Flannel，这是目前唯一稳定的本地混合集群的网络解决方案。之后，您将学习如何创建Windows
    Server 2019 LTS VM以及如何使用kubeadm和`sig-windows-tools`脚本将机器加入Kubernetes集群。最后，我们部署了一个示例ASP.NET
    Core 3.0应用程序，并执行了常见操作，如访问容器日志或进入容器。
- en: In the next chapter, you will learn how to perform a similar cluster Deployment
    using AKS Engine. Currently, this is the best and the most stable approach for
    deploying hybrid Kubernetes clusters in the cloud.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何使用AKS Engine执行类似的集群部署。目前，这是在云中部署混合Kubernetes集群的最佳和最稳定的方法。
- en: Questions
  id: totrans-458
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: When should you use an internal NAT Hyper-V vSwitch? What are the use cases
    for an external vSwitch?
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 何时应该使用内部NAT Hyper-V vSwitch？外部vSwitch有哪些用例？
- en: Which configuration steps are required for preparing a Linux node or master?
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为准备Linux节点或主节点需要哪些配置步骤？
- en: What are a Service subnet range and a Pod subnet range?
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务子网范围和Pod子网范围是什么？
- en: How do you generate a new kubeadm token for joining the cluster?
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何生成一个新的kubeadm令牌以加入集群？
- en: How do you allow scheduling of application Pods to the master node?
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何允许将应用程序Pod调度到主节点？
- en: What is the recommended networking solution for on-premises clusters with Linux
    and Windows nodes?
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地集群中，Linux和Windows节点的推荐网络解决方案是什么？
- en: Which steps do you need to perform to join a Windows node to the cluster?
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加入集群的Windows节点需要执行哪些步骤？
- en: What is the command for accessing Pod container logs?
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问Pod容器日志的命令是什么？
- en: You can find answers to these questions in *Assessments* in back matter of this
    book.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书的后部的*评估*中找到这些问题的答案。
- en: Further reading
  id: totrans-468
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Currently, most of the resources regarding the Deployment of hybrid Windows/Linux
    clusters are available online. There are two official guides for creating such
    clusters:'
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前，关于混合Windows/Linux集群部署的大多数资源都可以在线获得。有两个官方指南用于创建这样的集群：
- en: The Kubernetes guide, available at: [https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/](https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/).
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes指南，网址为：[https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/](https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/)。
- en: The Microsoft guide, available at: [https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/getting-started-kubernetes-windows](https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/getting-started-kubernetes-windows).
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft指南，网址为：[https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/getting-started-kubernetes-windows](https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/getting-started-kubernetes-windows)。
- en: Both guides are often updated, so it is worth checking them as the Deployment
    procedure may be simplified over time.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个指南经常更新，因此值得检查它们，因为随着时间的推移，部署过程可能会变得更加简化。
- en: You may also find useful the following **Software-Defined Networking** (**SDN**)
    repository from Microsoft, available at: [https://github.com/microsoft/SDN/tree/master/Kubernetes/windows](https://github.com/microsoft/SDN/tree/master/Kubernetes/windows).
    It contains many helper scripts that are gradually adopted into the official deployment
    instructions and kubeadm integration.
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以在Microsoft的以下**软件定义网络**（**SDN**）存储库中找到有用的信息，网址为：[https://github.com/microsoft/SDN/tree/master/Kubernetes/windows](https://github.com/microsoft/SDN/tree/master/Kubernetes/windows)。它包含许多辅助脚本，逐渐被采用到官方部署说明和kubeadm集成中。
- en: For kubeadm usage and documentation, please refer to [https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/).
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关kubeadm的用法和文档，请参阅[https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/](https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/)。
- en: 'If you need help with troubleshooting and common problems, you can use the
    following guides:'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您需要帮助解决问题和常见问题，您可以使用以下指南：
- en: '[https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/common-problems](https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/common-problems).'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/common-problems](https://docs.microsoft.com/en-us/virtualization/windowscontainers/kubernetes/common-problems)。'
- en: '[https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/#troubleshooting](https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/#troubleshooting).'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/#troubleshooting](https://kubernetes.io/docs/setup/production-environment/windows/intro-windows-in-kubernetes/#troubleshooting)。'
- en: '[https://techcommunity.microsoft.com/t5/Networking-Blog/Troubleshooting-Kubernetes-Networking-on-Windows-Part-1/ba-p/508648](https://techcommunity.microsoft.com/t5/Networking-Blog/Troubleshooting-Kubernetes-Networking-on-Windows-Part-1/ba-p/508648)—troubleshooting
    guide, specific to Windows containers networking problems.'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://techcommunity.microsoft.com/t5/Networking-Blog/Troubleshooting-Kubernetes-Networking-on-Windows-Part-1/ba-p/508648](https://techcommunity.microsoft.com/t5/Networking-Blog/Troubleshooting-Kubernetes-Networking-on-Windows-Part-1/ba-p/508648)——特定于Windows容器网络问题的故障排除指南。'
