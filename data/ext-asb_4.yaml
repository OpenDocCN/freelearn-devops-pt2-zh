- en: Chapter 4. Exploring API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。探索API
- en: Ansible plugins are an advanced topic. There are various plugins available for
    Ansible. This chapter will cover different Python API and lookup plugins in brief
    and explore how they fit into the general Ansible architecture.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible插件是一个高级话题。有各种插件可用于Ansible。本章将简要介绍不同的Python API和查找插件，并探讨它们如何适应通用的Ansible架构。
- en: Ansible is pluggable in a lot of ways. It is possible that there are components
    of business logic that don't quite fit in. Hence, Ansible provides extension points
    that can be used to fit your business needs. Ansible plugins are another such
    extension point where you can build your own plugins to extend Ansible to address
    your business logic.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible在很多方面都是可插拔的。可能存在一些业务逻辑组件不太适合的情况。因此，Ansible提供了可以用于满足您业务需求的扩展点。Ansible插件是另一个这样的扩展点，您可以构建自己的插件来扩展Ansible以满足您的业务逻辑。
- en: Python API
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python API
- en: 'Before exploring plugins, it''s important to understand the Ansible Python
    API. The Ansible Python API can be used for the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索插件之前，了解Ansible Python API很重要。Ansible Python API可用于以下用途：
- en: To control the nodes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制节点
- en: To respond to the various Python events
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应各种Python事件
- en: To write various plugins as per the requirement
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据需求编写各种插件
- en: Inventory data from various external data stores can also be plugged in
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还可以将来自各种外部数据存储的清单数据插入其中
- en: 'Python API for Ansible allows Ansible to run programmatically. Running Ansible
    programmatically through the Python API has the following advantages:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible的Python API允许以编程方式运行Ansible。通过Python API以编程方式运行Ansible具有以下优势：
- en: '**Better error handling**: Since everything is Python, it becomes easy to handle
    errors as and when they occur. This gives more control and confidence in the code
    by providing a better context in case of errors.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的错误处理**：由于一切都是Python，因此很容易在发生错误时进行处理。这样可以通过提供更好的上下文，在发生错误时更好地控制和信心。'
- en: '**Extending Ansible**: One of the drawbacks, as you might have noticed in the
    previous runs, is that, by default, Ansible simply writes the output on `stdout`
    and does not log anything to a file. To address this, you can write your own custom
    plugins to save output to a file or database for future reference.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展Ansible**：正如您在之前的运行中可能已经注意到的，一个缺点是，默认情况下，Ansible只是将输出写入`stdout`，并不会将任何内容记录到文件中。为了解决这个问题，您可以编写自己的自定义插件，将输出保存到文件或数据库以供将来参考。'
- en: '**Unknown variables**: There may be cases where complete knowledge of the required
    variables may be discovered only during runtime, for example, when an IP of an
    instance launched on the cloud during the Ansible play. Running Ansible programmatically
    using the Python API can address this issue.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未知变量**：可能存在只有在运行时才能完全了解所需变量的情况，例如，在Ansible执行期间在云上启动实例的IP。使用Python API以编程方式运行Ansible可以解决这个问题。'
- en: Now that you know the advantages of using Python API for Ansible, let's explore
    the Python API and take a look at how one can interact with Ansible through the
    API.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了使用Python API进行Ansible的优势，让我们来探索Python API，并看看如何通过API与Ansible进行交互。
- en: 'This chapter will cover the three most important classes that are used extensively:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍三个最重要的广泛使用的类：
- en: '**Runner**: Used to execute individual modules'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Runner**：用于执行单个模块'
- en: '**Playbook**: Helps in executing the Ansible playbook'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Playbook**：帮助执行Ansible playbook'
- en: '**Callbacks**: Gets back the run results on the controller node'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回调**：在控制节点上获取运行结果'
- en: Let's take an in-depth look at what these classes are and explore the various
    extension points.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解这些类是什么，并探索各种扩展点。
- en: Runner
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Runner
- en: The `runner` class is the core API interface of Ansible. The `runner` class
    is used to execute individual modules. If there is one single module that needs
    to be executed, for example, the `setup` module, we can use the `runner` class
    to execute this module.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`runner`类是Ansible的核心API接口。`runner`类用于执行单个模块。如果有一个需要执行的单个模块，例如`setup`模块，我们可以使用`runner`类来执行此模块。'
- en: Tip
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: One can have multiple `runner` objects in the same Python file to run different
    modules.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在同一个Python文件中有多个`runner`对象来运行不同的模块。
- en: Let's explore a sample code, where the `runner` class will be used to execute
    the `setup` module on localhost. This will print a lot of details about localhost
    such as time, operating system (distribution), IP, Netmask, and hardware details
    such as architecture, free memory, used memory, machine ID, and so on.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来探索一个示例代码，其中`runner`类将用于在本地主机上执行`setup`模块。这将打印有关本地主机的许多详细信息，例如时间、操作系统（发行版）、IP、子网掩码以及硬件详细信息，例如架构、空闲内存、已用内存、机器ID等等。
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will execute the `setup` module on localhost. This is equivalent to running
    the following command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在本地主机上执行`setup`模块。这相当于运行以下命令：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To run the preceding module on remote machines or a group of machines, one can
    specify hosts in an inventory that can later be passed as an argument in the `runner`
    object, along with a remote user that should be used to log into the remote machine.
    You can also specify a pattern of hosts, specifically on which the module needs
    to be executed. This is done by passing the pattern argument to the `runner` object.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要在远程主机或一组主机上运行上述模块，可以在清单中指定主机，然后将其作为参数传递给`runner`对象，以及应用于登录远程机器的远程用户。您还可以指定主机的模式，特别是需要执行模块的主机。这是通过将模式参数传递给`runner`对象来完成的。
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You can also pass in a module argument using the `module_args` key.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用`module_args`键传递模块参数。
- en: 'For instance, if you need to get memory details of remote machines that have
    their domain names set as `store1.mytestlab.com`, `store2.mytestlab.com`, `store12.mytestlab.com`,
    and so on, this can be simply achieved in the following manner:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您需要获取设置为`store1.mytestlab.com`、`store2.mytestlab.com`、`store12.mytestlab.com`等的远程主机的内存详细信息，可以简单地以以下方式实现：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code will execute the `setup` module on all twelve hosts and print
    the memory status that is reachable by each host. Reachable hosts will be listed
    under "contacted," while those that are un-reachable will be listed under "dark."
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将在所有十二个主机上执行`setup`模块，并打印每个主机可访问的内存状态。可访问的主机将列在“contacted”下，而不可访问的主机将列在“dark”下。
- en: 'Apart from the arguments discussed above, the `runner` class provides a large
    number of interfacing options through the arguments that it accepts. The following
    is a list of a few arguments as defined in the source code, along with their use:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上面讨论的参数外，`runner`类通过其接受的参数提供了大量的接口选项。以下是源代码中定义的一些参数及其用途的列表：
- en: '| Arguments/default values | Description |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 参数/默认值 | 描述 |'
- en: '| --- | --- |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `host_list=C.DEFAULT_HOST_LIST` | Example: `/etc/ansible/hosts`, legacy usage
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `host_list=C.DEFAULT_HOST_LIST` | 示例：`/etc/ansible/hosts`，传统用法 |'
- en: '| `module_path=None` | Example: `/usr/share/ansible` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `module_path=None` | 示例：`/usr/share/ansible` |'
- en: '| `module_name=C.DEFAULT_MODULE_NAME` | Example: `copy` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `module_name=C.DEFAULT_MODULE_NAME` | 示例：`copy` |'
- en: '| `module_args=C.DEFAULT_MODULE_ARGS` | Example: "`src=/tmp/a dest=/tmp/b`"
    |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `module_args=C.DEFAULT_MODULE_ARGS` | 示例："`src=/tmp/a dest=/tmp/b`" |'
- en: '| `forks=C.DEFAULT_FORKS` | Parallelism level |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `forks=C.DEFAULT_FORKS` | 并行级别 |'
- en: '| `timeout=C.DEFAULT_TIMEOUT` | SSH timeout |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `timeout=C.DEFAULT_TIMEOUT` | SSH超时 |'
- en: '| `pattern=C.DEFAULT_PATTERN` | Which hosts? Example: "all" `acme.example.org`
    |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `pattern=C.DEFAULT_PATTERN` | 哪些主机？示例："all" `acme.example.org` |'
- en: '| `remote_user=C.DEFAULT_REMOTE_USER` | Example: "`username`" |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `remote_user=C.DEFAULT_REMOTE_USER` | 例如：“`username`”|'
- en: '| `remote_pass=C.DEFAULT_REMOTE_PASS` | Example: "`password123`" or "`None`"
    if using key |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `remote_pass=C.DEFAULT_REMOTE_PASS` | 例如：“`password123`”或使用密钥时为“`None`”|'
- en: '| `remote_port=None` | If SSH on different ports |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `remote_port=None` | 如果SSH在不同的端口上|'
- en: '| `private_key_file=C.DEFAULT_PRIVATE_KEY_FILE` | If not using keys/passwords
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `private_key_file=C.DEFAULT_PRIVATE_KEY_FILE` | 如果不使用密钥/密码|'
- en: '| `transport=C.DEFAULT_TRANSPORT` | "`SSH`," "`paramiko`," "`Local`" |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `transport=C.DEFAULT_TRANSPORT` | “`SSH`”，“`paramiko`”，“`Local`”|'
- en: '| `conditional=True` | Run only if this fact expression evals to `true` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `conditional=True` | 仅在此事实表达式评估为`true`时运行|'
- en: '| `callbacks=None` | Used for output |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `callbacks=None` | 用于输出|'
- en: '| `sudo=False` | Whether to run sudo or not |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `sudo=False` | 是否运行sudo|'
- en: '| `inventory=None` | Reference to inventory object |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `inventory=None` | 对清单对象的引用|'
- en: '| `environment=None` | Environment variables (as `dict`) to use inside the
    command |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `environment=None` | 在命令内部使用的环境变量（作为`dict`）|'
- en: '| `complex_args=None` | Structured data in addition to `module_args`, must
    be a `dict` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `complex_args=None` | 除了`module_args`之外的结构化数据，必须是`dict`|'
- en: Playbook
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Playbook
- en: Playbook, as you have learned in the previous chapters, is a set of instructions
    or commands in a YAML format that runs in a sequential order. Python API for Ansible
    provides a rich interface to run the already created playbooks through the `PlayBook`
    class.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在之前的章节中学到的那样，Playbook是以YAML格式运行的一系列指令或命令。Ansible的Python API提供了一个丰富的接口，通过`PlayBook`类运行已创建的playbooks。
- en: You can create a `PlayBook` object and pass in an existing Ansible playbook
    as an argument along with the required parameters. One thing to note is that multiple
    plays do not execute simultaneously, but the tasks in a play can be executed in
    parallel based on the requested number of forks. Once the object is created, you
    can easily execute the Ansible playbook by calling the `run` function.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个`PlayBook`对象，并将现有的Ansible playbook作为参数传递，以及所需的参数。需要注意的一点是，多个play不会同时执行，但是play中的任务可以根据请求的forks数量并行执行。创建对象后，可以通过调用`run`函数轻松执行Ansible
    playbook。
- en: 'You can create a `Playbook` object that can later be executed using the following
    template:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建一个`Playbook`对象，稍后可以使用以下模板执行：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'One thing to note here is that a `PlayBook` object requires at least four mandatory
    arguments to be passed. These are:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一件事是，`PlayBook`对象需要至少传递四个必需的参数。这些是：
- en: '`playbook`: the path to a Playbook file'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`playbook`：Playbook文件的路径'
- en: '`stats`: Holds aggregated data about events occurring in each host'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stats`：保存每个主机发生的事件的聚合数据'
- en: '`callbacks`: Outputs callbacks for the playbook'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`callbacks`：Playbook的输出回调'
- en: '`runner_callbacks`: Callbacks for the `runner` API'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runner_callbacks`：`runner` API的回调'
- en: You can also define the verbosity in a range of `0`-`4`, which is required by
    the `callbacks` and `runner_callbacks` objects. If verbosity is not defined, the
    default value is taken as `0`. Defining verbosity as a `4` is equivalent to using
    `-vvvv` while executing the Ansible playbook from the command line.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以在`0`-`4`的范围内定义详细程度，这是`callbacks`和`runner_callbacks`对象所需的。如果未定义详细程度，则默认值为`0`。将详细程度定义为`4`相当于在命令行中执行Ansible
    playbook时使用`-vvvv`。
- en: 'For instance, you have your inventory file named `hosts` and a playbook named
    `webservers.yaml`. To execute this playbook on the inventory hosts using the Python
    API, you need to create a `PlayBook` object with the required parameters. You
    also need to require a verbose output. This can be done as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您有名为`hosts`的清单文件和名为`webservers.yaml`的playbook。要使用Python API在清单主机上执行此playbook，您需要创建一个带有所需参数的`PlayBook`对象。您还需要要求详细输出。可以按以下方式完成：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will execute the playbook `webservers.yaml` on the remote hosts specified
    in the `hosts` inventory file.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 `hosts` 清单文件中指定的远程主机上执行 `webservers.yaml` playbook。
- en: To execute the same playbook locally, just as you did in the `runner` object
    earlier, you need to pass the argument `transport=local` in the `PlayBook` object
    and remove the `host_list` argument.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地执行相同的playbook，就像之前在 `runner` 对象中所做的那样，您需要在 `PlayBook` 对象中传递参数 `transport=local`
    并删除 `host_list` 参数。
- en: Apart from the discussed parameters, PlayBook accepts a whole lot more.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '除了讨论过的参数，PlayBook还接受更多。 '
- en: 'The following is a list of all the arguments accepted by the `PlayBook` object
    along with their purpose:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 `PlayBook` 对象接受的所有参数列表，以及它们的目的：
- en: '| Argument | Description |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `playbook` | Path to a playbook file |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `playbook` | playbook文件的路径 |'
- en: '| `host_list` | Path to a file like `/etc/ansible/hosts` |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `host_list` | 文件的路径，如 `/etc/ansible/hosts` |'
- en: '| `module_path` | Path to Ansible modules, like `/usr/share/ansible/` |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `module_path` | Ansible模块的路径，如 `/usr/share/ansible/` |'
- en: '| `forks` | Desired level of parallelism |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `forks` | 期望的并行级别 |'
- en: '| `timeout` | Connection timeout |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `timeout` | 连接超时 |'
- en: '| `remote_user` | Run as this user if not specified in a particular play |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `remote_user` | 如果在特定play中未指定，则以此用户身份运行 |'
- en: '| `remote_pass` | Use this remote password (for all plays) vs using SSH keys
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `remote_pass` | 使用此远程密码（对所有play）而不是使用SSH密钥 |'
- en: '| `sudo_pass` | If `sudo=true` and a password is required, this is the sudo
    password |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `sudo_pass` | 如果 `sudo=true` 并且需要密码，则为sudo密码 |'
- en: '| `remote_port` | Default remote port to use if not specified with the host
    or play |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `remote_port` | 如果在主机或play中未指定，默认的远程端口 |'
- en: '| `transport` | How to connect to hosts that don''t specify a transport (local,
    paramiko, and so on.) |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `transport` | 如何连接未指定传输方式的主机（本地，paramiko等） |'
- en: '| `callbacks` | Output callbacks for the playbook |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `callbacks` | playbook的输出回调 |'
- en: '| `runner_callbacks` | More callbacks, this time for the runner API |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `runner_callbacks` | 更多的回调，这次是为runner API |'
- en: '| `stats` | Holds aggregate data about events occurring to each host |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `stats` | 包含关于每个主机发生的事件的聚合数据 |'
- en: '| `sudo` | If not specified per play, requests all plays use `sudo` mode |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `sudo` | 如果没有在每个play中指定，请求所有play使用 `sudo` 模式 |'
- en: '| `inventory` | Can be specified instead of `host_list` to use a pre-existing
    inventory object |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `inventory` | 可以指定而不是 `host_list` 来使用预先存在的清单对象 |'
- en: '| `check` | Don''t change anything; just try to detect some potential changes
    |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `check` | 不要更改任何内容；只是尝试检测一些潜在的更改 |'
- en: '| `any_errors_fatal` | Terminate the entire execution immediately when one
    of the hosts has failed |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `any_errors_fatal` | 当其中一个主机失败时立即终止整个执行 |'
- en: '| `force_handlers` | Continue to notify and run handlers even if a task fails
    |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `force_handlers` | 即使任务失败，仍然通知并运行处理程序 |'
- en: Callbacks
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回调
- en: Ansible provides hooks for running custom callbacks on the host machine as it
    invokes various modules. Callbacks allow us to log the events and operations that
    are started or completed and aggregate results from the module execution. Python
    API provides callbacks for this purpose, which can be used in its default state
    as well as to develop your own callback plugins.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible提供了在主机上运行自定义回调的钩子，因为它调用各种模块。回调允许我们记录已启动或已完成的事件和操作，并从模块执行中聚合结果。Python
    API提供了用于此目的的回调，可以在其默认状态下使用，也可以用来开发自己的回调插件。
- en: 'Callbacks allow various operations to be performed. Callbacks can also be exploited
    as an extension point for Ansible. Some of the most widely used callbacks operations
    while wrapping up Ansible in Python API are:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 回调允许执行各种操作。回调也可以被利用作为Ansible的扩展点。在Python API中包装Ansible时，一些最常用的回调操作是：
- en: '`AggregateStats`: As the name suggests, `AggregateStats` holds the aggregated
    stats surrounding per host activity during a playbook run. An object of `AggregateStats`
    can be passed on as an argument for `stats` in the `PlayBook` object.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AggregateStats`：顾名思义，`AggregateStats`保存了在剧本运行期间围绕每个主机活动的汇总统计信息。`AggregateStats`的对象可以作为`PlayBook`对象中`stats`的参数传递。'
- en: '`PlaybookRunnerCallbacks`: An object of `PlaybookRunnerCallbacks` is used for
    `Runner()`, for example, when a single module is executed using the `Runner` API
    interface, `PlaybookRunnerCallbacks` is used to return the task status.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PlaybookRunnerCallbacks`：`PlaybookRunnerCallbacks`的对象用于`Runner()`，例如，当使用`Runner`
    API接口执行单个模块时，将使用`PlaybookRunnerCallbacks`返回任务状态。'
- en: '`PlaybookCallbacks`: An object of `PlaybookCallbacks` is used by the playbook
    API interface of the Python API when a playbook is executed from the Python API.
    These callbacks are used by `/usr/bin/ansible-playbook`.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PlaybookCallbacks`：`PlaybookCallbacks`的对象由Python API的playbook API接口在从Python
    API执行playbook时使用。这些回调被`/usr/bin/ansible-playbook`使用。'
- en: '`DefaultRunnerCallbacks`: When there are no callbacks specified for `Runner`
    to use, `DefaultRunnerCallbacks` is used.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DefaultRunnerCallbacks`：当没有为`Runner`指定回调时，将使用`DefaultRunnerCallbacks`。'
- en: '`CliRunnerCallbacks`: This extends `DefaultRunnerCallbacks` and overrides the
    on-event trigger functions, basically optimized to be used with `/usr/bin/ansible`.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CliRunnerCallbacks`：这扩展了`DefaultRunnerCallbacks`并覆盖了事件触发函数，基本上优化用于`/usr/bin/ansible`。'
- en: Ansible plugins
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible插件
- en: Plugins are another extension point that haven't yet been touched on in this
    book. Also, there is very limited documentation available, even on the Internet,
    regarding plugins.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是本书尚未涉及的另一个扩展点。此外，即使在互联网上，关于插件的文档也非常有限。
- en: Plugins are an advanced topic that will be covered in the next chapter. However,
    it's important to understand the Python API behind plugins in order to understand
    how plugins work and how they can be extended.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 插件是下一章将涵盖的一个高级主题。然而，了解插件背后的Python API是很重要的，以便了解插件的工作原理以及如何扩展插件。
- en: PluginLoader
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PluginLoader
- en: As the code documentation states, `PluginLoader` is the base class that loads
    plugins from the configured plugin directories. It iterates through the list of
    play basedirs, configured paths, and Python paths to search for a plugin. The
    first match is used.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如代码文档所述，`PluginLoader`是从配置的插件目录加载插件的基类。它遍历基于播放的目录列表、配置的路径和Python路径，以搜索插件。第一个匹配项被使用。
- en: 'An object of `PluginLoader` takes in the following arguments:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`PluginLoader`的对象接受以下参数：'
- en: '`class_name`: The specific class name for plugin type'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class_name`：插件类型的特定类名'
- en: '`required_base_class`: The base class required by the plugin module'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`required_base_class`：插件模块所需的基类'
- en: '`package`: Package information'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package`：包信息'
- en: '`config`: Specifies the default path from configuration'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config`：指定配置的默认路径'
- en: '`subdir`: All subdirectories in a package'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`subdir`：包中的所有子目录'
- en: '`aliases`: Alternate name for the plugin type'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aliases`：插件类型的替代名称'
- en: 'For every Ansible plugin, there is a defined class name that needs to be used.
    This class in `PluginLoader` is identified by `required_base_class`. The different
    categories of Ansible plugins along with their base names are listed in the following
    table:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个Ansible插件，都有一个定义的类名需要使用。在`PluginLoader`中，这个类由`required_base_class`标识。Ansible插件的不同类别以及它们的基本名称列在下表中：
- en: '| Plugin type | Class name |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 插件类型 | 类名 |'
- en: '| --- | --- |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Action plugins | `ActionModule` |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 动作插件 | `ActionModule` |'
- en: '| Cache plugins | `CacheModule` |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| 缓存插件 | `CacheModule` |'
- en: '| Callback plugins | `CallbackModule` |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 回调插件 | `CallbackModule` |'
- en: '| Connection plugins | `Connection` |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 连接插件 | `Connection` |'
- en: '| Shell plugins | `ShellModule` |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| Shell插件 | `ShellModule` |'
- en: '| Lookup plugins | `LookupModule` |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| 查找插件 | `LookupModule` |'
- en: '| Vars plugins | `VarsModule` |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 变量插件 | `VarsModule` |'
- en: '| Filter plugins | `FilterModule` |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 过滤器插件 | `FilterModule` |'
- en: '| Test plugins | `TestModule` |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 测试插件 | `TestModule` |'
- en: '| Strategy plugins | `StrategyModule` |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 策略插件 | `StrategyModule` |'
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter took you through the Python API for Ansible and introduced you
    to more advanced ways of using Ansible. This included executing single tasks without
    creating an entire playbook to executing a playbook programmatically.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本章带您了解了 Ansible 的 Python API，并向您介绍了更高级的使用 Ansible 的方法。这包括执行单个任务而不创建整个playbook，以及以编程方式执行playbook。
- en: This chapter also introduced you to the various components of the Ansible Python
    API from a more technical point of view, exploring the various extension points
    and ways to exploit them.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还从技术角度向您介绍了Ansible Python API的各种组件，探索了各种扩展点和利用它们的方法。
- en: This chapter additionally sets a base for the next chapter, which will be a
    deep dive into the Ansible plugins. The next chapter will utilize the knowledge
    gained from this chapter to create custom Ansible plugins. We will explore different
    Ansible plugins and guide you through writing your own Ansible plugin in the following
    chapter.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还为下一章奠定了基础，下一章将深入探讨Ansible插件。下一章将利用本章所学知识来创建自定义的Ansible插件。我们将在接下来的章节中探索不同的Ansible插件，并指导您编写自己的Ansible插件。
