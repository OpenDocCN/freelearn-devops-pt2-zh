- en: Chapter 1. Introduction to OpenStack
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。介绍OpenStack
- en: This chapter will serve as a high-level overview of OpenStack and the projects
    that make up this cloud platform. Laying a clear foundation about OpenStack is
    very important in order to describe the OpenStack components, concepts, and verbiage.
    Once the overview is covered, we will transition into discussing the core features
    and benefits of OpenStack. Finally, the chapter will finish up with two working
    examples of how you can consume the OpenStack services via the **application program
    interface** (**API**) and **command-line interface** (**CLI**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章将作为OpenStack和构成这个云平台的项目的高层概述。建立关于OpenStack的清晰基础非常重要，以便描述OpenStack组件、概念和术语。一旦概述完成，我们将过渡到讨论OpenStack的核心特性和优势。最后，本章将以两个工作示例结束，介绍如何通过**应用程序接口**（**API**）和**命令行界面**（**CLI**）使用OpenStack服务。
- en: An overview of OpenStack
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack概述
- en: Reviewing the OpenStack services
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查OpenStack服务
- en: OpenStack supporting components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStack支持组件
- en: Features and benefits
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特性和优势
- en: 'Working examples: listing the services'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作示例：列出服务
- en: An overview of OpenStack
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenStack概述
- en: In the simplest definition possible, OpenStack can be described as an open source
    cloud operating platform that can be used to control large pools of compute, storage,
    and networking resources throughout a data center, all managed through a single
    interface controlled by either an API, CLI, and/or web **graphical user interface**
    (**GUI**) dashboard. The power that OpenStack offers administrators is the ability
    to control all of those resources, while still empowering the cloud consumers
    to provision those very same resources through other self-service models. OpenStack
    was built in a modular fashion; the platform is made up of numerous components.
    Some of those components are considered core services and are required in order
    to have a function cloud, whereas the other services are optional and only required
    unless they fit into your personal use case.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，OpenStack可以被描述为一个开源的云操作平台，可以用来控制数据中心中的大型计算、存储和网络资源池，所有这些都通过一个由API、CLI和/或Web
    **图形用户界面**（**GUI**）仪表板控制的单一界面进行管理。OpenStack提供给管理员的能力是控制所有这些资源，同时还赋予云消费者通过其他自助服务模型来提供这些资源的能力。OpenStack是以模块化方式构建的；该平台由许多组件组成。其中一些组件被认为是核心服务，是构建云所必需的，而其他服务是可选的，只有在符合个人用例时才需要。
- en: The OpenStack Foundation
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenStack基金会
- en: Back in early 2010, Rackspace was just a technology hosting that focused on
    providing service and support through an offering named **Fanatical Support**.
    The company decided to create an open source cloud platform.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 早在2010年初，Rackspace只是一个专注于通过名为**Fanatical Support**的服务和支持提供技术托管的公司。该公司决定创建一个开源云平台。
- en: The OpenStack Foundation is made up of voluntary members governed by appointed
    board of directors and project-based tech committees. Collaboration occurs around
    a six-month, time-based major code release cycle. The release names are run in
    the alphabetical order and reference the region encompassing the location where
    the OpenStack design summit will be held. Each release incorporates something
    called **OpenStack Design Summit**, which is meant to build collaboration among
    OpenStack operators/consumers, allowing project developers to have live working
    sessions and also agree on release items.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack基金会由自愿成员组成，受委任的董事会和基于项目的技术委员会管理。合作发生在一个六个月的、基于时间的主要代码发布周期内。发布名称按字母顺序排列，并参考OpenStack设计峰会将举行的地区。每个发布都包含一个称为**OpenStack设计峰会**的东西，旨在建立OpenStack运营商/消费者之间的合作，让项目开发人员进行实时工作会话，并就发布项目达成一致。
- en: As an OpenStack Foundation member, you can take an active role in helping develop
    any of the OpenStack projects. There is no other cloud platform that allows for
    such participation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 作为OpenStack基金会的成员，您可以积极参与帮助开发任何OpenStack项目。没有其他云平台允许这样的参与。
- en: To learn more about the OpenStack Foundation, you can go to the website, [www.openstack.org](http://www.openstack.org).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于OpenStack基金会的信息，您可以访问网站[www.openstack.org](http://www.openstack.org)。
- en: '![The OpenStack Foundation](graphics/B06086_01_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![OpenStack基金会](graphics/B06086_01_02.jpg)'
- en: Reviewing the OpenStack services
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查OpenStack服务
- en: Getting to the meat and potatoes of what makes up OpenStack as a project would
    be to review the services that make up this cloud ecosystem. One thing to keep
    in mind in reference to the OpenStack services is each service will have an official
    name and a code name associated with it. The use of the code names has become
    very popular among the community and most documentation will refer to the services
    in that manner. Becoming familiar with the code names is important and will ease
    the adoption process.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 深入了解OpenStack作为一个项目的核心内容，就是审查构成这个云生态系统的服务。需要记住的一件事是，关于OpenStack服务，每个服务都会有一个官方名称和与之相关的代码名称。代码名称的使用在社区中变得非常流行，大多数文档都会以这种方式引用服务。熟悉代码名称对于简化采用过程很重要。
- en: The other thing to keep in mind is each service is developed as an API driven
    REST web service. All actions are executed via that API, enabling for ultimate
    consumption flexibility. Even when using the CLI or web-based GUI, behind the
    scenes API calls are being executed and interpreted.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一件需要记住的事是，每个服务都是作为API驱动的REST网络服务开发的。所有操作都是通过API执行的，从而实现了最大的消费灵活性。即使在使用CLI或基于Web的GUI时，幕后也会执行和解释API调用。
- en: As of the Newton release, the OpenStack project consists of six of what are
    called **Core Services** and thirteen **Optional Services**. The services will
    be reviewed in order of release to show an overall services timeline. That timeline
    will show the natural progression of the OpenStack project overall, also showing
    how it is now surely Enterprise ready.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从Newton发布版开始，OpenStack项目包括六个所谓的**核心服务**和十三个**可选服务**。这些服务将按发布顺序进行审查，以展示整体服务时间表。该时间表将展示OpenStack项目整体的自然进展，同时也显示了它现在肯定已经准备好用于企业。
- en: A great recent addition provided to the OpenStack community is the creation
    of **Project Navigator**. The **Project Navigator** is intended to be a living
    guide to the consumers of the OpenStack projects, aimed to share each of the services
    community adoption, maturity, and age. Personally, this resource has been found
    to be very useful and informative. The navigator can be found here on the OpenStack
    Foundation website, [www.openstack.org/software/project-navigator](http://www.openstack.org/software/project-navigator).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack社区最近提供的一个重要补充是**项目导航器**的创建。**项目导航器**旨在成为OpenStack项目的消费者的实时指南，旨在分享每个服务的社区采用情况、成熟度和年龄。就个人而言，这个资源被发现非常有用和信息丰富。导航器可以在OpenStack基金会网站上找到，[www.openstack.org/software/project-navigator](http://www.openstack.org/software/project-navigator)。
- en: OpenStack Compute (code-name Nova)
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenStack计算（代号Nova）
- en: '*Integrated in release: Austin*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*集成在发布版：Austin*'
- en: '**Core Service**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**核心服务**'
- en: This was one of the first and is still the most important service part of the
    OpenStack platform. Nova is the component that provides the bridge to the underlying
    hypervisor used to manage the computing resources.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是OpenStack平台的第一个，也是最重要的服务部分。Nova是提供与用于管理计算资源的底层hypervisor的桥梁。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: One common misunderstanding is that Nova is a hypervisor in itself, which is
    simply not true. Nova is a hypervisor manager of sorts, and it is capable of supporting
    many different types of hypervisors.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的误解是Nova本身是一个hypervisor，这简直是不正确的。Nova是一种hypervisor管理器，能够支持许多不同类型的hypervisor。
- en: Nova would be responsible for scheduling instance creation, sizing options for
    the instance, managing the instance location, and as mentioned before, keeping
    track of the hypervisors available to the cloud environment. It also handles the
    functionality of segregating your cloud into isolation groups named **cells**,
    **regions**, and **availability zones**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Nova将负责调度实例的创建、实例的大小选项、管理实例位置，以及如前所述，跟踪云环境中可用的hypervisor。它还处理将您的云分隔成名为**cells**、**regions**和**可用区域**的隔离组的功能。
- en: OpenStack Object Storage (code-name Swift)
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenStack对象存储（代号Swift）
- en: '*Integrated in release: Austin*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*集成在发布版：Austin*'
- en: '**Core Service**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**核心服务**'
- en: This service was also one of the first services part of the OpenStack platform.
    Swift is the component that provides **Object Storage as a Service** to your OpenStack
    cloud, capable of storing petabytes of data, in turn, adding highly available,
    distributed, and eventually consistent object/blob store. Object storage is intended
    to be cheap, cost-effective storage solution for static data, such as images,
    backups, archives, and static content. The objects can then be streamed over standard
    web protocols (HTTP/S) to or from the object server to the end user initiating
    the web request. The other key feature to Swift is all data is automatically made
    highly available as it is replicated across the cluster. The storage cluster is
    meant to scale horizontally just by simply adding new servers.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这项服务也是OpenStack平台的第一个服务之一。Swift是OpenStack云提供**对象存储服务**的组件，能够存储宠字节的数据，从而提供高可用性、分布式和最终一致的对象/块存储。对象存储旨在成为静态数据的廉价、成本效益的存储解决方案，例如图像、备份、存档和静态内容。然后，这些对象可以通过标准的Web协议（HTTP/S）从对象服务器流式传输到发起Web请求的最终用户，或者从最终用户流式传输到对象服务器。Swift的另一个关键特性是所有数据都会自动复制到集群中，从而实现高可用性。存储集群可以通过简单地添加新服务器来实现水平扩展。
- en: OpenStack Image Service (code-name Glance)
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenStack镜像服务（代号Glance）
- en: '*Integrated in release: Bextar*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*集成在发布版：Bextar*'
- en: '**Core Service**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**核心服务**'
- en: This service was introduced during the second OpenStack release, and it is responsible
    for managing/registering/maintaining server images for your OpenStack cloud. It
    includes the capability to upload or export OpenStack compatible images and store
    instance snapshots as use as a template/backup for later use. Glance can store
    those images on a variety of locations, such as locally and/or on distributed
    storage, for example, object storage. Most Linux kernel distributions already
    have OpenStack compatible images available for download. You can also create your
    own server images from existing servers. There exists support for multiple image
    formats including Raw, VHD, qcow2, VMDK, OVF, and VDI.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这项服务是在第二个OpenStack发布版中引入的，它负责管理/注册/维护OpenStack云的服务器镜像。它包括上传或导出OpenStack兼容的镜像的能力，并存储实例快照以供以后用作模板/备份。Glance可以将这些镜像存储在各种位置，例如本地和/或分布式存储，例如对象存储。大多数Linux内核发行版已经提供了可用于下载的OpenStack兼容镜像。您还可以从现有服务器创建自己的服务器镜像。支持多种图像格式，包括Raw、VHD、qcow2、VMDK、OVF和VDI。
- en: OpenStack Identity (code-name Keystone)
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenStack Identity（代号Keystone）
- en: '*Integrated in release: Essex*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*集成在发布版：Essex*'
- en: '**Core Service**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**核心服务**'
- en: This service was introduced during the fifth OpenStack release. Keystone is
    the authentication and authorization component built into your OpenStack cloud.
    Its key role is to handle creation, registry, and management of users, tenants,
    and all the other OpenStack services. Keystone would be the first component to
    be installed when standing up an OpenStack cloud. It has the capability to connect
    to external directory services such as LDAP. Another key feature of Keystone is
    that it is built based on **role-based access controls** (**RBAC**). Allowing
    cloud operators to provide distinct role-based access to individual service features
    to the cloud consumers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这项服务是在第五个OpenStack发布中引入的。Keystone是内置在您的OpenStack云中的身份验证和授权组件。它的关键作用是处理用户、租户和所有其他OpenStack服务的创建、注册和管理。在搭建OpenStack云时，Keystone将是第一个要安装的组件。它有能力连接到LDAP等外部目录服务。Keystone的另一个关键特性是它是基于**基于角色的访问控制**（**RBAC**）构建的。这使得云运营商能够为云消费者提供对各个服务功能的不同基于角色的访问。
- en: OpenStack Dashboard (code-name Horizon)
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenStack仪表板（代号Horizon）
- en: '*Integrated in release: Essex*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*集成版本：Essex*'
- en: This service is the second service to be introduced in the fifth OpenStack release.
    Horizon provides cloud operators and consumers with a web-based GUI to control
    their compute, storage, and network resources. The OpenStack dashboard runs on
    top of **Apache** and the **Django** REST framework. Making it very easy to integrate
    into and extend to meet your personal use case. On the backend, Horizon also uses
    the native OpenStack APIs. The basis behind Horizon was to be able to provide
    cloud operators with a quick overall view of the state of their cloud, and cloud
    consumers a self-service provisioning portal to the clouds resources designated
    to them.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这项服务是第五个OpenStack发布中引入的第二项服务。Horizon为云运营商和消费者提供了一个基于Web的GUI，用于控制他们的计算、存储和网络资源。OpenStack仪表板运行在**Apache**和**Django**
    REST框架之上。这使得它非常容易集成和扩展，以满足您的个人用例。在后端，Horizon还使用本机OpenStack API。Horizon的基础是为了能够为云运营商提供对其云状态的快速整体视图，以及为云消费者提供一个自助服务的云资源配置门户。
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Keep in mind that Horizon can handle approximately 70% of the overall available
    OpenStack functionality. To leverage 100% of the OpenStack functionality, you
    would need to use the API's directly and/or use CLI for each service.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，Horizon可以处理大约70%的可用OpenStack功能。要利用100%的OpenStack功能，您需要直接使用API和/或为每项服务使用CLI。
- en: OpenStack Networking (code-name Neutron)
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenStack网络（代号Neutron）
- en: '*Integrated in release: Folsom*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*集成版本：Folsom*'
- en: '**Core Service**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**核心服务**'
- en: This service is probably the second most powerful component within your OpenStack
    cloud next to Nova.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这项服务可能是您的OpenStack云中除Nova之外第二强大的组件。
- en: '*OpenStack Networking is intended to provide a pluggable, scalable and API-driven
    system for managing networks and IP addresses.*'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*OpenStack Networking旨在提供可插拔、可扩展和API驱动的系统，用于管理网络和IP地址。*'
- en: This quote was taken directly from the OpenStack Networking documentation as
    it best reflects exactly the purpose behind Neutron. Neutron is responsible for
    creating your virtual networks with your OpenStack cloud. This would entail creation
    of virtual networks, routers, subnets, firewalls, load balancers, and similar
    network functions. Neutron was developed with an extension framework, which allows
    for integration from additional network components (physical network device control)
    and models (flat, Layer 2, and/or Layer 3 networks). Various vendor-specific plugins
    and adapters have been created to work inline with Neutron. This service adds
    to the self-service aspect of OpenStack, removing the network aspect from being
    a roadblock to consuming your cloud.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个引用直接摘自OpenStack Networking文档，最好地反映了Neutron背后的目的。Neutron负责在OpenStack云中创建您的虚拟网络。这将涉及创建虚拟网络、路由器、子网、防火墙、负载均衡器和类似的网络功能。Neutron是使用扩展框架开发的，允许集成额外的网络组件（物理网络设备控制）和模型（平面、第2层和/或第3层网络）。已经创建了各种特定于供应商的插件和适配器，以与Neutron配合使用。这项服务增加了OpenStack的自助服务功能，消除了网络方面成为使用云的障碍。
- en: With Neutron being one of the most advanced and powerful components within OpenStack,
    a whole book was dedicated to it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 作为OpenStack中最先进和强大的组件之一，Neutron有一整本书专门介绍它。
- en: OpenStack Block Storage (code-name Cinder)
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenStack块存储（代号Cinder）
- en: '*Integrated in release: Folsom*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*集成版本：Folsom*'
- en: '**Core Service**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**核心服务**'
- en: Cinder is the component that provides **Block Storage as a Service** to your
    OpenStack cloud by leveraging local disks or attached storage devices. This translates
    into persistent block-level storage volumes available to your instances. Cinder
    is responsible for managing and maintaining the block volumes created, attaching/detaching
    those volumes, and also backup creation of that volume. One of the highly notable
    features of Cinder is its ability to connect to multiple types of backend-shared
    storage platforms at the same time. This capabilities spectrum also spans all
    the way down to being able to leverage simple Linux server storage as well. As
    an added bonus, **quality of service** (**QoS**) roles can be applied to the different
    types of backends. Extending the ability to use the block storage devices to meet
    various application requirements.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Cinder是为您的OpenStack云提供**块存储服务**的组件，利用本地磁盘或附加存储设备。这意味着您的实例可以使用持久的块级存储卷。Cinder负责管理和维护创建的块卷，附加/分离这些卷，以及备份创建。Cinder的一个显着特点是其能够同时连接到多种类型的后端共享存储平台。这种能力范围还可以延伸到利用简单的Linux服务器存储。作为额外的奖励，**服务质量**（**QoS**）角色可以应用于不同类型的后端。扩展了使用块存储设备以满足各种应用需求的能力。
- en: OpenStack Orchestration (code-name Heat)
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenStack编排（代号Heat）
- en: '*Integrated in release: Havana*'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*集成版本：Havana*'
- en: This was one of the two services to be introduced in the eighth OpenStack release.
    Heat provides the orchestration capability over your OpenStack cloud resources.
    It is described as a mainline project part of the OpenStack orchestration program.
    This infers that additional automation functionality is in the pipeline for OpenStack.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第八个OpenStack版本中引入的两项服务之一。Heat提供了对您的OpenStack云资源的编排能力。它被描述为OpenStack编排计划的主要项目。这意味着OpenStack还将有额外的自动化功能。
- en: The built-in orchestration engine is used to automate provisioning of applications
    and its components, known as a stack. A stack might include instances, networks,
    subnets, routers, ports, router interfaces, security groups, security group rules,
    Auto Scaling rules, and so on. Heat utilizes templates to define a stack and is
    written in a standard markup format, YAML. You will hear of those templates referred
    to as **HOT** (**Heat Orchestration Template**) templates.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 内置编排引擎用于自动化应用和其组件的提供，称为堆栈。一个堆栈可能包括实例、网络、子网、路由器、端口、路由器接口、安全组、安全组规则、自动扩展规则等等。Heat利用模板来定义一个堆栈，并以标准标记格式YAML编写。您将听到这些模板被称为**HOT**（**Heat
    Orchestration Template**）模板。
- en: OpenStack Telemetry (code-name Ceilometer)
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenStack遥测（代号Ceilometer）
- en: '*Integrated in release: Havana*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*集成在版本中：哈瓦那*'
- en: This is the second of the two services introduced in the eighth OpenStack release.
    Ceilometer collects the cloud usage and performance statistics together into one
    centralized data store. This capability becomes a key component to a cloud operator
    as it gives clear metrics into the overall cloud, which can be used to make scaling
    decisions.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第八个OpenStack版本中引入的两项服务之一。Ceilometer将云使用和性能统计数据集中存储到一个集中的数据存储中。这种能力成为云运营商的关键组成部分，因为它提供了对整个云的清晰度量标准，可以用来做出扩展决策。
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You have the option of choosing the data store backend to Ceilometer. Such options
    include MongoDB, MySQL, PostgreSQL, HBase, and DB2.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择将数据存储后端设置为Ceilometer。这些选项包括MongoDB、MySQL、PostgreSQL、HBase和DB2。
- en: OpenStack Database (code-name Trove)
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenStack数据库（代号Trove）
- en: '*Integrated in release: Icehouse*'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*集成在版本中：冰雪屋*'
- en: Trove is the component that provides **Database as a Service** to your OpenStack
    cloud. This capability includes providing scalable and reliable relational and
    nonrelational database engines. The goal behind this service was to remove the
    burden of needing to understand database installation and administration. With
    Trove, cloud consumers can provision database instances just by leveraging the
    services API. Trove supports multiple singe-tenant databases within a Nova instance.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Trove是为您的OpenStack云提供**数据库服务**的组件。这种能力包括提供可伸缩和可靠的关系型和非关系型数据库引擎。这项服务的目标是消除需要理解数据库安装和管理的负担。有了Trove，云消费者可以通过利用服务API来提供数据库实例。Trove支持在Nova实例中的多个单租户数据库。
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The data store types currently supported are MySQL, MongoDB, Cassandra, Redis,
    and CouchDB.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 目前支持的数据存储类型包括MySQL、MongoDB、Cassandra、Redis和CouchDB。
- en: OpenStack Data Processing (code-name Sahara)
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenStack数据处理（代号Sahara）
- en: '*Integrated in release: Juno*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*集成在版本中：朱诺*'
- en: Sahara is the component that provides **Data Processing as a Service** to your
    OpenStack cloud. This capability includes the ability to provision an application
    cluster tuned to handle large amounts of analytical data. The data store options
    available are **Hadoop** and/or **Spark**. This service will also aid the cloud
    consumer in being able to abstract the complication of installing and maintaining
    this type of cluster.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Sahara是为您的OpenStack云提供**数据处理服务**的组件。这种能力包括能够提供一个专门处理大量分析数据的应用集群。可用的数据存储选项包括**Hadoop**和/或**Spark**。这项服务还将帮助云消费者抽象出安装和维护这种类型集群的复杂性。
- en: OpenStack Bare Metal Provisioning (code-name Ironic)
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenStack裸金属提供（代号Ironic）
- en: '*Integrated in release: Kilo*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*集成在版本中：基洛*'
- en: This service has been one of the most anxiously awaited components part of the
    OpenStack project. Ironic provides the capability to provision physical Bare Metal
    servers from within your OpenStack cloud. It is commonly known as a Bare Metal
    hypervisor API and leverages a set of plugins to enable interaction with the Bare
    Metal servers. It is the newest service to be introduced to the OpenStack family
    and is still under development.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这项服务一直是OpenStack项目中最受期待的组件之一。Ironic提供了在OpenStack云中从物理裸金属服务器进行提供的能力。它通常被称为裸金属虚拟化API，并利用一组插件来实现与裸金属服务器的交互。这是最新引入OpenStack家族的服务，仍在开发中。
- en: Other optional services
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他可选服务
- en: There are a few additional services still in the early phases of maturity that
    are listed later. The scope and depth of some of them are still being determined,
    so it felt best not to possibly misrepresent them here in writing. The bigger
    takeaway here is the depth of added capability these new services will add to
    your OpenStack cloud when they are ready.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些处于早期成熟阶段的其他服务，稍后会列出。一些服务的范围和深度仍在确定中，因此最好不要在这里可能误传它们。更重要的是，当这些新服务准备就绪时，它们将为您的OpenStack云增加的能力的深度。
- en: '| **Code-name** | **Service** |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| **代号** | **服务** |'
- en: '| Zaqar | Messaging service |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| Zaqar | 消息服务 |'
- en: '| Manila | Share filesystems |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 马尼拉 | 共享文件系统 |'
- en: '| Designate | DNS service |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 指定 | DNS服务 |'
- en: '| Barbican | Key management |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 巴比肯 | 密钥管理 |'
- en: '| Magnum | Containers |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 马格南 | 容器 |'
- en: '| Murano | Application catalog |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 穆拉诺 | 应用目录 |'
- en: '| Congress | Governance |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 国会 | 治理 |'
- en: OpenStack supporting components
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenStack支持的组件
- en: Very similar to any traditional application, there are dependent core components
    that are pivotal to its functionality and not necessarily the application itself.
    In the case of the base OpenStack architecture, there are two core components
    that would be considered the core or backbone of the cloud. OpenStack functionality
    requires access to an SQL-based backend database service and an **AMQP **(Advanced
    Message Queuing Protocol) software platform. Just like with any other technology,
    OpenStack too has base supported reference architectures out there for us to follow.
    From a database perspective, the common choice will be MySQL and the default AMQP
    package is **RabbitMQ**. These two dependencies must be installed, configured,
    and functional before you can start an OpenStack deployment.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何传统应用程序非常相似，有一些关键的核心组件对其功能至关重要，但不一定是应用程序本身。在基本的OpenStack架构中，有两个核心组件被认为是云的核心或骨干。OpenStack功能需要访问基于SQL的后端数据库服务和**AMQP**（高级消息队列协议）软件平台。就像任何其他技术一样，OpenStack也有基本支持的参考架构供我们遵循。从数据库的角度来看，常见的选择将是MySQL，而默认的AMQP软件包是**RabbitMQ**。在开始OpenStack部署之前，这两个依赖关系必须安装、配置和正常运行。
- en: There are additional optional software packages that can also be used to provide
    further stability as part of your cloud design. Information about this management
    software and further OpenStack architecture details can be found at the following
    link [http://docs.openstack.org/arch-design/generalpurpose-architecture.html](http://docs.openstack.org/arch-design/generalpurpose-architecture.html).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他可选的软件包，也可以用来提供更稳定的云设计。关于这些管理软件和更多OpenStack架构细节的信息可以在以下链接找到[http://docs.openstack.org/arch-design/generalpurpose-architecture.html](http://docs.openstack.org/arch-design/generalpurpose-architecture.html)。
- en: Features and benefits
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特点和优势
- en: The power of OpenStack has been tested true by numerous enterprise-grade organizations,
    thus gaining the focus of many leading IT companies. As this adoption increases,
    we will surely see an increase in consumption and additional improved features/functionality.
    For now, let's review some of OpenStack's features and benefits.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack的强大已经得到了许多企业级组织的验证，因此吸引了许多领先的IT公司的关注。随着这种采用的增加，我们肯定会看到消费量的增加和额外的改进功能。现在，让我们回顾一些OpenStack的特点和优势。
- en: Fully distributed architecture
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完全分布式架构
- en: Every service within the OpenStack platform can be grouped together and/or separated
    to meet your personal use case. Also as mentioned earlier, only the Core services
    (Keystone, Nova, and Glance) are required to have a functioning cloud. All other
    components can be optional. This level of flexibility is something every administrator
    seeks for an **Infrastructure as a Service** (**IaaS**) platform.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack平台内的每个服务都可以分组和/或分离，以满足您的个人用例。正如前面提到的，只有核心服务（Keystone、Nova和Glance）需要具有功能的云。所有其他组件都可以是可选的。这种灵活性是每个管理员对于**基础设施即服务**（**IaaS**）平台都在寻求的。
- en: Using commodity hardware
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用商品硬件
- en: OpenStack was uniquely designed to accommodate almost any type of hardware.
    The underlying OS is the only dependency to OpenStack. As long as OpenStack supports
    the underlying OS and that OS is supported on the particular hardware, you are
    all set to go! There is no requirement to purchase OEM hardware or even hardware
    with specific specs. This gives yet another level of deployment flexibility to
    administrators. A good example of this can be giving your old hardware sitting
    around in your data center new life within an OpenStack cloud.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack被设计成可以适应几乎任何类型的硬件。底层操作系统是OpenStack的唯一依赖。只要OpenStack支持底层操作系统，并且该操作系统在特定硬件上受支持，您就可以开始了！没有购买OEM硬件或具有特定规格的硬件的要求。这为管理员提供了另一种部署灵活性。一个很好的例子是让你的旧硬件在数据中心中得到新的生命，成为OpenStack云中的一部分。
- en: Scaling horizontally or vertically
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 水平或垂直扩展
- en: The ability to easily scale your cloud was another key feature to OpenStack.
    Adding additional compute nodes is as simple as installing the necessary OpenStack
    services on the new server. The same process is used to expand the OpenStack services
    control plane as well. Just as with other platforms, you also can add more computing
    resources to any node as another approach to scaling up.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 轻松扩展您的云是OpenStack的另一个关键特性。添加额外的计算节点就像在新服务器上安装必要的OpenStack服务一样简单。扩展OpenStack服务控制平面也使用相同的过程。与其他平台一样，您也可以向任何节点添加更多的计算资源作为另一种扩展的方法。
- en: Meeting high availability requirements
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 满足高可用性要求
- en: OpenStack is able to certify meeting high availability (99.9%) requirements
    for its own infrastructure services if implemented via the documented best practices.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果按照文档中的最佳实践实施，OpenStack能够证明满足其自身基础设施服务的高可用性（99.9%）要求。
- en: Compute isolation and multi-dc Support
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算隔离和多数据中心支持
- en: Another key feature of OpenStack is the support to handle compute hypervisor
    isolation and the ability to support multiple OpenStack regions across data centers.
    Compute isolation includes the ability to separate multiple pools of hypervisors
    distinguished by hypervisor type, hardware similarity, and/or vCPU ratio.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStack的另一个关键特性是支持处理计算虚拟化隔离和支持跨数据中心的多个OpenStack区域的能力。计算隔离包括分离由虚拟化程序类型、硬件相似性和/或vCPU比率区分的多个虚拟化程序池的能力。
- en: The ability to support multiple OpenStack regions, which is a complete installation
    of functioning OpenStack clouds with shared services such as Keystone and Horizon,
    across data centers is a key function to maintaining highly available infrastructure.
    This model eases overall cloud administration, allowing a single pane of glass
    to manage multiple clouds.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 支持多个OpenStack区域的能力，这是在数据中心之间安装具有共享服务（如Keystone和Horizon）的完整OpenStack云的关键功能，有助于维护高度可用的基础设施。这种模式简化了整体云管理，允许单一视图管理多个云。
- en: Robust role-based access control
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 强大的基于角色的访问控制
- en: All the OpenStack services allow RBAC when assigning authorization to cloud
    consumers. This gives cloud operators the ability to decide the specific functions
    allowed by the cloud consumers. Such an example would be to grant a cloud user
    the ability to create instances, but deny the ability to upload new server images
    or adjust instance-sizing options.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 所有OpenStack服务都允许在向云消费者分配授权时使用RBAC。这使得云操作员能够决定云消费者允许的特定功能。例如，可以授予云用户创建实例的权限，但拒绝上传新的服务器镜像或调整实例大小选项的权限。
- en: Working examples – listing the services
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作示例-列出服务
- en: So we have covered what OpenStack is, the services that make up OpenStack, and
    some of the key features of OpenStack. It is only appropriate to show a working
    example of the OpenStack functionality and the methods available to manage/administer
    your OpenStack cloud.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经介绍了OpenStack是什么，构成OpenStack的服务以及OpenStack的一些关键特性。展示OpenStack功能和可用于管理/管理OpenStack云的方法的工作示例是非常合适的。
- en: To re-emphasize, OpenStack management, administration, and consumption of services
    can be accomplished via either an API, CLI, and/or web dashboard. When considering
    some level of automation, the last option of the web dashboard is normally not
    involved. So for the remainder of this book, we will solely focus on using the
    OpenStack APIs and CLIs.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，OpenStack管理、管理和消费服务可以通过API、CLI和/或Web仪表板来完成。在考虑一定程度的自动化时，通常不涉及Web仪表板的最后选项。因此，在本书的其余部分，我们将专注于使用OpenStack
    API和CLI。
- en: Listing the OpenStack services
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出OpenStack服务
- en: Now, let's take a look at how you can use either the OpenStack API or CLI to
    check for the available services active within your cloud.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用OpenStack API或CLI来检查云中可用的服务。
- en: Via API
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过API
- en: The first step in using the OpenStack services is authentication against Keystone.
    You must always first authenticate (tell the API who you are) and then receive
    authorization (API ingests your username and determines what predefined task(s)
    you can execute) based on what your user is allowed to do. That complete process
    ends in providing you with an authentication token.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OpenStack服务的第一步是对Keystone进行身份验证。您必须始终首先进行身份验证（告诉API您是谁），然后根据您的用户被允许执行的预定义任务来接收授权（API接受您的用户名并确定您可以执行的任务）。该完整过程最终会提供给您一个认证令牌。
- en: Tip
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Keystone can provide four different types of token formats: UUID, fernet, PKI,
    and PKIZ. A typical UUID token looks like this `53f7f6ef0cc344b5be706bcc8b1479e1`.
    Most do not use the PKI token as it is a much longer string and harder to work
    with. There are great performance benefits from using fernet tokens instead of
    UUID due to not requiring persistence. It is suggested to set Keystone to provide
    fernet tokens within your cloud.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Keystone可以提供四种不同类型的令牌格式：UUID、fernet、PKI和PKIZ。典型的UUID令牌如下所示`53f7f6ef0cc344b5be706bcc8b1479e1`。大多数人不使用PKI令牌，因为它是一个更长的字符串，更难处理。使用fernet令牌而不是UUID有很大的性能优势，因为不需要持久性。建议在云中设置Keystone以提供fernet令牌。
- en: 'Here is an example of making an authentication request for a secure token.
    Making API requests using cURL, a useful tool for interacting with RESTful APIs,
    is the easiest approach. Using cURL with various options, you are able to simulate
    actions similar to using the OpenStack CLI or the Horizon dashboard:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个请求安全令牌的认证请求示例。使用cURL进行API请求是与RESTful API交互的最简单方法。使用cURL和各种选项，您可以模拟类似于使用OpenStack
    CLI或Horizon仪表板的操作：
- en: '[PRE0]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Because the credential string is fairly long and easy to incorrectly manipulate,
    it is suggested to use the `-d @<filename>` functionality part of cURL. This allows
    you to insert the credential string into a file and then be able to pass it into
    your API request by just referencing the file. This exercise is very similar to
    creating a client environment script (also known as OpenRC files). Adding `| python
    -mjson.tool` to the end of your API request makes the JSON output easier to read.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 由于凭证字符串相当长且容易错误操作，建议使用cURL的`-d @<filename>`功能部分。这允许您将凭证字符串插入文件中，然后通过引用文件将其传递到API请求中。这个练习与创建客户端环境脚本（也称为OpenRC文件）非常相似。在API请求的末尾添加`|
    python -mjson.tool`可以使JSON输出更容易阅读。
- en: 'An example of the credential string would look like this:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 凭证字符串的示例如下所示：
- en: '[PRE1]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: Detailed steps to download the code bundle are mentioned in the Preface of this
    book.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 下载代码包的详细步骤在本书的前言中提到。
- en: 'The code bundle for the book is also hosted on GitHub at: [https://github.com/PacktPublishing/OpenStack-Administration-with-Ansible-2](https://github.com/PacktPublishing/OpenStack-Administration-with-Ansible-2).
    We also have other code bundles from our rich catalog of books and videos available
    at: [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 该书的代码包也托管在GitHub上：[https://github.com/PacktPublishing/OpenStack-Administration-with-Ansible-2](https://github.com/PacktPublishing/OpenStack-Administration-with-Ansible-2)。我们还有其他代码包，可以在[https://github.com/PacktPublishing/](https://github.com/PacktPublishing/)找到。请查看！
- en: When the example is executed against the Keystone API, it will respond with
    an authentication token. The token is actually returned within the HTTP header
    of the response. That token should be used for all subsequent API requests. Keep
    in mind that the token does expire, but traditionally, a token is configured to
    the last 24 hours from the creation timestamp.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当示例针对Keystone API执行时，它将返回一个认证令牌。该令牌实际上是在响应的HTTP标头中返回的。该令牌应该用于所有后续的API请求。请记住，令牌会过期，但传统上，令牌被配置为从创建时间戳开始的最后24小时。
- en: 'As mentioned earlier, the token can be found in the HTTP header of the API
    response message. The HTTP header property name is `X-Subject-Token`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，令牌可以在API响应消息的HTTP标头中找到。HTTP标头属性名称为`X-Subject-Token`：
- en: '[PRE2]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once you have the authentication token, you can begin crafting subsequent API
    requests to request information about your cloud and/or execute tasks. Now we
    will request the list of services available to your cloud:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您获得了身份验证令牌，您就可以开始制作后续的API请求，以请求有关您的云的信息和/或执行任务。现在我们将请求您的云中可用的服务列表：
- en: '[PRE3]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output from this API request will be the complete list of services registered
    within your cloud by `name`, `description`, `type`, `id`, and whether it is active.
    An abstract of the output would look similar to the following code:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个API请求的输出将是在您的云中注册的所有服务的完整列表，按照`名称`、`描述`、`类型`、`ID`以及是否活跃的方式。输出的摘要看起来类似于以下代码：
- en: '[PRE4]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Via CLI
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过CLI
- en: All the base principles applied to using the API earlier also applies to using
    the CLI. The major difference is with the CLI all you need to do is create an
    OpenRC file with your credentials and execute defined commands. The CLI handles
    formatting the API calls behind the scenes, grabbing the token for subsequent
    requests, and formatting the output also.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 之前使用API时应用的所有基本原则也适用于使用CLI。主要区别在于使用CLI时，您只需要创建一个带有您的凭据的OpenRC文件，并执行定义的命令。CLI在后台处理API调用的格式，获取令牌以进行后续请求，并格式化输出。
- en: Same as earlier, first you need to authenticate against Keystone to be granted
    a secure token. This action is accomplished by first sourcing your OpenRC file
    and then by executing the `service-list` command. The next example will demonstrate
    it in more detail. Now that there are two active versions of the Keystone service,
    version 2.0 and 3.0, you have the choice of which version you wish to have active
    to handle authentication/authorization.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，首先您需要对Keystone进行身份验证，以获得安全令牌。首先通过源化您的OpenRC文件，然后执行`service-list`命令来完成此操作。下一个示例将更详细地演示。现在Keystone服务有两个活跃版本，版本2.0和3.0，您可以选择希望激活的版本来处理身份验证/授权。
- en: 'Here is an example of an OpenRC file v2.0 named `openrc`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个名为`openrc`的OpenRC文件v2.0的示例：
- en: '[PRE5]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The OpenRC file v3.0 would look similar to this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: OpenRC文件v3.0将类似于这样：
- en: '[PRE6]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Once you create and source the OpenRC file, you can begin using the CLI to
    execute commands such as requesting the list of services. Take a look at the following
    working example:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建并源化OpenRC文件，您就可以开始使用CLI执行诸如请求服务列表之类的命令。看下面的工作示例：
- en: '[PRE7]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output will look similar to this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将类似于这样：
- en: '![Via CLI](graphics/image_01_001.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![通过CLI](graphics/image_01_001.jpg)'
- en: Summary
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The adoption of OpenStack among the enterprises has taken off since the first
    revision of this book.  Many large companies such as Walmart, BMW, Volkswagon,
    AT&T and Comcast have come forward sharing their success stories and continued
    support for OpenStack.  I hope this chapter may have cleared up any questions
    you had about OpenStack and maybe even dispelled any myths you may have heard.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 自本书第一版以来，OpenStack在企业中的采用已经开始蓬勃发展。许多大公司，如沃尔玛、宝马、大众、AT&T和康卡斯特，都已经分享了他们的成功故事，并继续支持OpenStack。我希望本章可能已经解答了您对OpenStack的任何疑问，甚至可能打消了您听到的任何谣言。
- en: We will now transition to learning about Ansible and why using it in conjunction
    with OpenStack is a great combination.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将过渡到学习有关Ansible以及为什么将其与OpenStack结合使用是一个很好的组合。
