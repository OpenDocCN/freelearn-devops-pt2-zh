- en: Test Execution Phase
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试执行阶段
- en: Now that we understand what the test design phase is, it's time to move on to
    the next phase, that is, the test execution phase. This is a phase in the software
    testing life cycle where the build code is validated using the test cases that
    were designed and created in the test design phase.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了测试设计阶段是什么，是时候进入下一个阶段了，即测试执行阶段。这是软件测试生命周期中的一个阶段，在这个阶段，构建代码使用在测试设计阶段设计和创建的测试用例进行验证。
- en: While the development team is busy building the code for the application, the
    test team gears up the test design and test cycle preparation phases. It also
    utilizes this time to prepare test environments and test data. The team then starts
    the execution of the test cases, but only after the latest code changes have been
    deployed in the test environment or when the first testable components have been
    deployed for testing. Once the test ...
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发团队忙于构建应用程序代码的同时，测试团队开始准备测试设计和测试周期准备阶段。它还利用这段时间准备测试环境和测试数据。然后团队开始执行测试用例，但只有在最新的代码更改部署到测试环境后或者第一个可测试组件被部署进行测试后才开始。一旦测试...
- en: Defining test cycles
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义测试周期
- en: 'Test cycles are designed based on the type of project the test team is working
    on. While designing test cycles, the test team performs the following tasks:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 测试周期的设计基于测试团队正在处理的项目类型。在设计测试周期时，测试团队执行以下任务：
- en: '**Validates the test coverage**: This ensures that the test execution phase
    includes all of the test cases that are required to validate all of the requirements.'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证测试覆盖范围：这确保测试执行阶段包括验证所有需求所需的所有测试用例。
- en: '**Estimates the efforts**: Based on the complexity of the requirements, the
    priority of the test cases, the current skill level of the assigned resources,
    the availability of the testing tools, and the scope and allotted time, the test
    team estimates the time required to complete the test execution.'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 估计工作量：基于需求的复杂性、测试用例的优先级、分配资源的当前技能水平、测试工具的可用性以及范围和分配的时间，测试团队估计完成测试执行所需的时间。
- en: '**Defines iterations**: If several defects are found during the initial test
    execution iteration, which results in a huge impact on the features of the application,
    the test team can always add another test execution iteration. Depending on the
    number of cycles, the buffer time, the defect retest time, and scheduled meetings,
    the estimation of test execution may vary.'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义迭代：如果在初始测试执行迭代期间发现了多个缺陷，这对应用程序的功能产生了巨大影响，测试团队可以随时添加另一个测试执行迭代。根据循环次数、缓冲时间、缺陷重新测试时间和预定会议，测试执行的估计可能会有所不同。
- en: 'There are various types of test cycles/iterations that the test team can design
    based on defined and implied customer needs. A few test cases should be designed
    as part of the smoke and regression test cycles as well:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 根据定义和隐含的客户需求，测试团队可以设计各种类型的测试周期/迭代。一些测试用例也应设计为冒烟测试和回归测试周期的一部分：
- en: '**Smoke test cycle**: This cycle enables testers to check whether the current
    deployed version is testable or not after the execution of a small set of test
    cases. For example, in the case of a banking website, some basic tests, such as
    launching the application, navigating through various tabs, clicking on the available
    links, and logging in and out of the application, can be helpful so that you can
    find out whether the application is working. If it breaks immediately after being
    launched or after clicking on the personal banking link, the team can report a
    defect. Then, the developers can start working on a fix right away. Smoke testing
    helps to ensure that the correct version of the build has been deployed in the
    requested test environment. Sometimes, during the deployment phase, the build
    can fail and developers might have to roll back the changes and redeploy the new
    build. In such cases, smoke testing is useful, as it can identify whether all
    the basic features are available to test and that no files or functionality are
    missing from the currently deployed build.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 冒烟测试周期：此周期使测试人员能够在执行一小组测试用例后检查当前部署的版本是否可测试。例如，在银行网站的情况下，一些基本测试，如启动应用程序、浏览各种选项卡、单击可用链接以及登录和退出应用程序，可以帮助您了解应用程序是否正常工作。如果应用程序在启动后立即崩溃或在单击个人银行链接后崩溃，团队可以报告一个缺陷。然后，开发人员可以立即开始修复。冒烟测试有助于确保已在请求的测试环境中部署了正确版本的构建。有时，在部署阶段，构建可能会失败，开发人员可能需要回滚更改并重新部署新构建。在这种情况下，冒烟测试很有用，因为它可以确定当前部署的构建是否具有所有基本功能可供测试，并且当前部署的构建中没有文件或功能缺失。
- en: '**Regression test cycle**: This cycle is used to identify any adverse effects
    of the newly added/implemented requirements on the existing, workable solutions
    of the product or application. We can also use automated tools to schedule a regression
    test and gather the results as and when needed.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回归测试周期：此周期用于识别新添加/实施的需求对产品或应用程序现有可行解决方案的任何不利影响。我们还可以使用自动化工具安排回归测试，并根据需要收集结果。
- en: In [Chapter 4](2406e2e0-83fd-45df-b410-cf0ddfff4e6e.xhtml), *Test Management
    Approach*, we looked at how we can add test cycles to a test plan. In the next
    section, we'll take a closer look at how to add and remove test cases from a test
    cycle, as well as how to start, complete, and abort test cycles in the test execution
    phase.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](2406e2e0-83fd-45df-b410-cf0ddfff4e6e.xhtml)中，《测试管理方法》，我们看了如何将测试周期添加到测试计划中。在接下来的部分中，我们将更详细地了解如何向测试周期添加和移除测试用例，以及如何在测试执行阶段开始、完成和中止测试周期。
- en: Adding test cases to the test cycle from the same project
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从同一项目添加测试用例到测试周期
- en: Since we have already worked on the necessary test cases, they are ready to
    use and we can add them to a test cycle. Adding test cases from the current project
    is done by dragging and dropping or linking the test cases into the newly created
    test cycles. Let's look at how we can create and initialize test cycles. Once
    we have created test cycles, we can add test cases to them, update test cycles,
    and then commence with the test execution phase.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经完成了必要的测试用例，它们已经准备好使用，我们可以将它们添加到测试周期中。从当前项目添加测试用例是通过拖放或将测试用例链接到新创建的测试周期中完成的。让我们看看如何创建和初始化测试周期。一旦我们创建了测试周期，就可以向其中添加测试用例，更新测试周期，然后开始测试执行阶段。
- en: Initializing test cycles
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化测试周期
- en: 'Test cases are grouped to form test cycles or test iterations. Before we commence
    the execution of a cycle, it''s important to check whether we have added the complete
    set of test cases that are required to verify a feature request. You should check
    the following before initializing a test cycle:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用例被分组形成测试周期或测试迭代。在执行周期之前，重要的是要检查我们是否已经添加了完整的测试用例集，以验证功能请求。在初始化测试周期之前，您应该检查以下内容：
- en: The current build version that the testing will be performed against
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试将要执行的当前构建版本
- en: The test environment where the testing will be performed
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试将要执行的测试环境
- en: The execution start and end date
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行开始和结束日期
- en: The test cases should be organized based on their priority
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例应该根据其优先级进行组织
- en: The test cases should be assigned to testers who will be responsible for executing
    the test cases
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例应该分配给负责执行测试用例的测试人员
- en: Let's look at how we can create and execute test cycles using Jira plugins.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用Jira插件创建和执行测试周期。
- en: synapseRT
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: synapseRT
- en: 'In synapseRT, once test plan has been created and is ready, as it has had the
    test cases added to it, we can create test cycles:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在synapseRT中，一旦测试计划已经创建并准备就绪，因为已经添加了测试用例，我们可以创建测试周期：
- en: 'Click on the Add button in the Test Cycle section and enter the test cycle
    details, such as Name, Environment, and Start Date and End Date, as shown in the
    following screenshot:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“测试周期”部分的“添加”按钮，输入测试周期的详细信息，例如名称、环境、开始日期和结束日期，如下面的屏幕截图所示：
- en: '![](Images/4e6b0c21-8e2b-4598-b4e8-ef568bf13573.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/4e6b0c21-8e2b-4598-b4e8-ef568bf13573.png)'
- en: 'After creating the cycle, we have the option to change its state from Draft
    to Start, Complete, or Abort. We can also view and edit its details. To modify
    its details, click on Edit next to the newly created test cycle, as shown in the
    following screenshot:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建周期后，我们可以选择将其状态从草稿更改为开始、完成或中止。我们还可以查看和编辑其详细信息。要修改其详细信息，请单击新创建的测试周期旁边的“编辑”，如下面的屏幕截图所示：
- en: After adding the test cycle, we can see all of the test cases that ...
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加测试周期后，我们可以看到所有的测试用例...
- en: Zephyr
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Zephyr
- en: 'Like synapseRT, Zephyr doesn''t need a test plan or test cases to create a
    test cycle. Follow these steps to create a test cycle:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与synapseRT一样，Zephyr不需要测试计划或测试用例来创建测试周期。按照以下步骤创建测试周期：
- en: 'When creating a test cycle in Zephyr, we can be more specific about its details,
    such as the Version, Description, Name, start and end dates, and so on. These
    details help us differentiate test cycles from one another:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Zephyr中创建测试周期时，我们可以更加具体地设置其详细信息，例如版本、描述、名称、开始和结束日期等。这些详细信息帮助我们区分不同的测试周期：
- en: '![](Images/6675c42e-622b-4031-b4dd-3fd3e15ad85d.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/6675c42e-622b-4031-b4dd-3fd3e15ad85d.png)'
- en: 'As you can see in the following screenshot, once we add a test cycle, it''s
    displayed under the Cycle Summary tab. This tab shows us the total number of test
    cases that have been added under this test cycle, its creator, total executions,
    start and end dates, and so on:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如下面的屏幕截图所示，一旦我们添加了一个测试周期，它将显示在“周期摘要”选项卡下。该选项卡显示了在该测试周期下添加的测试用例的总数，其创建者，总执行次数，开始和结束日期等信息：
- en: '![](Images/c93432d5-ee50-4411-be32-045803307b05.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/c93432d5-ee50-4411-be32-045803307b05.png)'
- en: 'Test cases can be added and removed by clicking on the +Add Tests button from
    the test cycle. We also get the option to select the test cases by their ticket
    number or by adding them from another test cycle. As you can see in the following
    screenshot, we have added three test cases using their ticket number:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击“+添加测试”按钮从测试周期中添加和删除测试用例。我们还可以选择按其票号选择测试用例或从另一个测试周期中添加测试用例的选项。如下面的屏幕截图所示，我们已经使用它们的票号添加了三个测试用例：
- en: '![](Images/5a4a4685-76b6-4ccc-96f2-074d0ec7cf84.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/5a4a4685-76b6-4ccc-96f2-074d0ec7cf84.png)'
- en: 'In the case of Zephyr, we can update the test status at the test case level
    or update it at the test step level. The following screenshot shows updating the
    execution status of the test case at the test case level. By default, Zephyr has
    the UNEXECUTED, PASS, FAIL, WIP, and BLOCKED statuses for test execution:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Zephyr的情况下，我们可以在测试用例级别更新测试状态，也可以在测试步骤级别更新测试状态。以下屏幕截图显示了在测试用例级别更新测试用例的执行状态。默认情况下，Zephyr具有未执行、通过、失败、进行中和阻塞的测试执行状态：
- en: '![](Images/b1f89ab6-6d89-4038-b632-183ba125adcb.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/b1f89ab6-6d89-4038-b632-183ba125adcb.png)'
- en: Test Management
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试管理
- en: 'Like Zephyr, Test Management tools don''t need test plans or test cases to
    create a test cycle:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 与Zephyr一样，测试管理工具不需要测试计划或测试用例来创建测试周期：
- en: 'We can add test cycles by navigating to the Tests | Cycles section. Once we
    click on the New button to add a new cycle, we will be shown the following Details
    screen, where we can enter details about this cycle, such as Folder, Status, Version,
    Iteration, Owner, Planned start date and Planned end date, Description, and so
    on:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过导航到“测试|周期”部分来添加测试周期。一旦我们单击“新建”按钮添加新周期，我们将看到以下详细信息屏幕，在这里我们可以输入有关此周期的详细信息，例如文件夹、状态、版本、迭代、所有者、计划开始日期和计划结束日期、描述等：
- en: '![](Images/94b9f4ea-1519-44f3-b56b-ce1be4c2db56.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/94b9f4ea-1519-44f3-b56b-ce1be4c2db56.png)'
- en: Once we have added a new test cycle, we will have access to its unique identifier
    so that we can differentiate it from other cycles. All of the cycles can be viewed
    under the Cycles tab. In this section, we ...
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们添加了新的测试周期，我们将获得其唯一标识符，以便我们可以将其与其他周期区分开。所有周期都可以在“周期”选项卡下查看。在这一部分，我们...
- en: Test execution status
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试执行状态
- en: 'The test execution status defines its current state during the execution phase.
    The following are the most commonly used test execution statuses:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 测试执行状态定义了其在执行阶段的当前状态。以下是最常用的测试执行状态：
- en: '**No Run / Not Executed**: A No Run or Not Executed test status is displayed
    when the test cases have been added to the test cycles. Its status then gets updated
    as per the execution results.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**未运行/未执行**：当测试用例已添加到测试周期中时，将显示未运行或未执行的测试状态。然后根据执行结果更新其状态。'
- en: '**Passed**: If all the test steps mentioned in the test satisfy the expected
    results, its status can be marked as Passed.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过**：如果测试中提到的所有测试步骤满足预期结果，其状态可以标记为通过。'
- en: '**Failed**: If any of the test steps fail to meet the expected results, then
    it can be marked as Failed.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**失败**：如果任何测试步骤未能满足预期结果，那么可以将其标记为失败。'
- en: '**Not Applicable / Not in scope**: Sometimes, test cases don''t need to be
    executed as part of a current test cycle. In such cases, the test execution status
    can be updated to Not Applicable.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不适用/不在范围内**：有时，测试用例不需要作为当前测试周期的一部分执行。在这种情况下，测试执行状态可以更新为不适用。'
- en: '**Blocked**: If an open defect impacts the testing of one or more test cases,
    then the relevant test cases can be marked as Blocked, with the updated defect
    number linked to it.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阻塞**：如果一个未解决的缺陷影响了一个或多个测试用例的测试，那么相关的测试用例可以被标记为阻塞，并与更新的缺陷号相关联。'
- en: If at any point during the test case's execution the test steps fail, then the
    status of the entire test case is marked as Failed. At this point, the testers
    have the option to create defects and link them to the test case, either at the
    step level or at the test case level.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在测试用例的执行过程中的任何时候测试步骤失败，那么整个测试用例的状态将被标记为失败。此时，测试人员可以选择在步骤级别或测试用例级别创建缺陷并将其链接到测试用例。
- en: Also, during every test run, testing tools create a new test run instance. Therefore,
    it is relatively easy to compare the test execution results of a test in the same
    cycle.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在每次测试运行期间，测试工具会创建一个新的测试运行实例。因此，相对容易比较同一周期内测试的测试执行结果。
- en: Organizing test cycles
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织测试周期
- en: Just like we can prioritize test cases, test cycles can also be ordered based
    on their priority. Sequentially arranging and reordering test cycles often saves
    the time and effort of retesting one or more test cases, or even the entire cycle,
    and helps to verify the most complete or urgent requirements during the initial
    phase of the test execution cycle.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们可以对测试用例进行优先排序一样，测试周期也可以根据其优先级进行排序。顺序排列和重新排序测试周期通常可以节省重新测试一个或多个测试用例，甚至整个周期的时间和精力，并有助于在测试执行周期的初始阶段验证最完整或最紧急的需求。
- en: This helps in the early identification of defects and gives the team enough
    time to fix and retest any changes. As the execution progresses, the test team
    updates all of the project stakeholders about the current execution status, which
    contains information about the total number of test cases being considered for
    this release, the number of test cases marked as passed, ...
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于早期发现缺陷，并为团队提供足够的时间来修复和重新测试任何更改。随着执行的进行，测试团队更新所有项目利益相关者有关当前执行状态的信息，其中包含有关此版本考虑的测试用例总数，标记为通过的测试用例数量，...
- en: Completing test cycles
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成测试周期
- en: 'Before confirming the closure of test cycles, it is required that you go through
    the following checklist:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在确认关闭测试周期之前，需要您查看以下检查表：
- en: All of the test cases in that cycle have either been marked as passed or not
    applicable
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该周期中的所有测试用例都已标记为通过或不适用
- en: All of the defects related to the test cases have been fixed and retested, and
    the relevant test cases have been passed
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与测试用例相关的所有缺陷都已修复并重新测试，并且相关的测试用例已通过
- en: All of the artifacts that are part of text execution have been generated and
    attached to the relevant test cases
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有作为文本执行一部分的工件都已生成并附加到相关的测试用例
- en: All of the artifacts, including the test reports that have been generated, satisfy
    the exit or test completion criteria as per the test plan
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有生成的工件，包括测试报告，都满足测试计划的退出或测试完成标准
- en: Test execution reports have been generated and shared with project stakeholders
    and approved by the relevant approvers
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试执行报告已生成并与项目利益相关者共享，并已获得相关审批者的批准
- en: Once this checklist has been gone through and completed, the test team can officially
    announce the closure of selected test cycles/iterations or execution phases.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成了这个检查表，测试团队可以正式宣布选择的测试周期/迭代或执行阶段的关闭。
- en: Adding test cases to the test cycle from a different project
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从不同项目添加测试用例到测试周期
- en: It's ideal to reuse test cases from previous releases or different projects.
    We can add them under the current project and use them as part of the current
    cycle. Let's look at how we can add test cases from different projects to the
    test cycle.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最好重用以前版本或不同项目中的测试用例。我们可以将它们添加到当前项目并将其用作当前周期的一部分。让我们看看如何将不同项目中的测试用例添加到测试周期中。
- en: synapseRT
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: synapseRT
- en: 'We can add test cases from another project to test cycles. To do that, click
    on the Add Test Case button in the Test Case and search for the desired test cases.
    As you can see in the following screenshot, we add test cases from another project
    simply by searching for its ID:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从另一个项目中添加测试用例到测试周期中。要做到这一点，点击测试用例中的“添加测试用例”按钮，并搜索所需的测试用例。正如您在以下截图中所看到的，我们通过搜索其ID简单地从另一个项目中添加测试用例：
- en: '![](Images/0034a7b9-57cc-4d90-8daa-8fe825233150.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/0034a7b9-57cc-4d90-8daa-8fe825233150.png)'
- en: Zephyr
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 风神
- en: 'We can add test cases in Zephyr from another project. Navigate to the test
    cycle and click on the Add Tests button; you will see the following screen. Now,
    search for any test cases from another project by their ticket numbers and add
    them to the project:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从另一个项目中向Zephyr中添加测试用例。导航到测试周期，然后点击“添加测试”按钮；您将看到以下屏幕。现在，通过它们的票号从另一个项目中搜索任何测试用例，并将它们添加到项目中：
- en: '![](Images/138d487d-f6e9-4782-ad5b-7dcf336bca71.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/138d487d-f6e9-4782-ad5b-7dcf336bca71.png)'
- en: Test Management
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试管理
- en: 'While adding test cases to the current test cycle, Test Management gives you
    the option to select the necessary project. The current project is selected by
    default. We can select another project from which we want to add test cases. Upon
    selection, we can see all of the test cases that are available for us to add to
    our current test cycle. Select the desired test cases and click on the Add button:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在将测试用例添加到当前测试周期时，测试管理为您提供了选择必要项目的选项。当前项目会被默认选择。我们可以从其他项目中选择要添加测试用例的项目。选择后，我们可以看到所有可供我们添加到当前测试周期的测试用例。选择所需的测试用例，然后点击“添加”按钮：
- en: '![](Images/76735228-ffeb-4803-9c8e-47080fdab687.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](Images/76735228-ffeb-4803-9c8e-47080fdab687.png)'
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the creation and execution of test cycles
    using Jira plugins. Test cycles in the test execution phase can be created with
    details such as start and end dates, assigned testers, build numbers, and so on. Test
    cycles can be modified to add and remove test cases from the current project before
    starting a test cycle. Test cases can also be reused from previous releases as
    part of the current release.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Jira插件创建和执行测试周期。测试执行阶段的测试周期可以包括开始和结束日期、指定的测试人员、构建编号等详细信息。在开始测试周期之前，可以修改测试周期以添加或移除当前项目中的测试用例。测试用例也可以从之前的版本中重复使用，作为当前版本的一部分。
- en: In the next chapter, we will discuss the importance of defect management and
    see how Jira helps us to track and manage defects effectively.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论缺陷管理的重要性，并看看Jira如何帮助我们有效地跟踪和管理缺陷。
