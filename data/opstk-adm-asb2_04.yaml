- en: Chapter 4. Customizing Your Clouds Quotas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。定制您的云配额
- en: 'Now that we have tackled creating our first OpenStack administration playbook,
    it is time to progress onto our next task. The next task we will cover is how
    to customize the project quotas in your cloud. This is normally the next step
    in the process of setting up new projects/tenants for your cloud consumers. We
    will step through how one would manually do this first and then transition into
    creating a playbook with roles to fully automate it:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经解决了创建我们的第一个OpenStack管理Playbook，是时候进入下一个任务了。我们将要涵盖的下一个任务是如何定制云中的项目配额。这通常是为云消费者设置新项目/租户的过程中的下一步。我们将首先逐步介绍如何手动执行此操作，然后过渡到创建具有角色的Playbook，以完全自动化它：
- en: Defining and creating quotas
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义和创建配额
- en: Automation considerations
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化考虑
- en: Coding the playbook and roles
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写Playbook和角色
- en: Playbook and role review
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Playbook和角色审查
- en: Defining and creating quotas
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义和创建配额
- en: What are quotas? Within OpenStack, you can set quotas on a tenant/project or
    user level in order to restrict the resource consumption allowed. The Compute
    service (Nova) manages the quota values and also enforces them. As a cloud operator,
    this is another important feature OpenStack offers. Quotas allow you to control
    the cloud's overall system capacity. You may ask, why not just set up one default
    quota and let every project use it? We will step through why this approach may
    or may not work based on the particular use case. It is also worth mentioning
    that the Block Storage service (Cinder) also has the capability of setting quotas.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是配额？在OpenStack中，您可以在租户/项目或用户级别上设置配额，以限制允许的资源消耗。计算服务（Nova）管理配额值并强制执行它们。作为云操作员，这是OpenStack提供的另一个重要功能。配额允许您控制云的整体系统容量。您可能会问，为什么不只设置一个默认配额，让每个项目都使用它？我们将根据特定用例逐步介绍这种方法可能有效或无效的原因。还值得一提的是，块存储服务（Cinder）也具有设置配额的能力。
- en: 'Since we now know that you can set quotas, let''s review what resources can
    be restricted and what the default values are. The following table describes the
    type of quotas that can be set:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在知道您可以设置配额，让我们回顾一下可以受限制的资源以及默认值是什么。以下表格描述了可以设置的配额类型：
- en: '| **Quota Name** | **Defines the number of** |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| **配额名称** | **定义的数量** |'
- en: '| Instances | Instances allowed in each project |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| 实例 | 每个项目中允许的实例 |'
- en: '| Cores | Instance cores allowed in each project |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| 内核 | 每个项目中允许的实例内核 |'
- en: '| RAM (MB) | RAM megabytes allowed in each instance |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| RAM（MB） | 每个实例中允许的RAM兆字节 |'
- en: '| Floating IPs | Floating IPs allowed in each project |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 浮动IP | 每个项目中允许的浮动IP |'
- en: '| Fixed IPs | Fixed IPs allowed in each project |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 固定IP | 每个项目中允许的固定IP |'
- en: '| Metadata Items | Metadata items allowed in each instance |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 元数据项 | 每个实例中允许的元数据项 |'
- en: '| Injected Files | Injected files allowed in each project |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 注入文件 | 每个项目中允许的注入文件 |'
- en: '| Injected File Content Bytes | Content bytes allowed in each injected file
    |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 注入文件内容字节 | 每个注入文件中允许的内容字节 |'
- en: '| Keypairs | Keypairs allowed in each project |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 密钥对 | 每个项目中允许的密钥对 |'
- en: '| Security Groups | Security groups allowed in each project |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 安全组 | 每个项目中允许的安全组 |'
- en: '| Security Group Rules | Rules allowed in each security group |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 安全组规则 | 每个安全组中允许的规则 |'
- en: '| Server Groups | Server groups allowed in each project |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 服务器组 | 每个项目中允许的服务器组 |'
- en: '| Server Group Members | Server group members allowed in each project |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 服务器组成员 | 每个项目中允许的服务器组成员 |'
- en: As you can see, there are quite a few options to apply restrictions to. As a
    cloud operator, you would want to take full advantage of tuning these options
    on a per-project basis. Taking on this approach allows you to optimize your cloud
    usage, in essence stretching your resources further while provisioning only what
    is needed. As an administrator, I hated seeing wasted resources hanging out there
    when, if better controls were in place, they could be used for something else.
    Quotas serve as the opposite approach, also the concept of keeping the Cloud Consumer
    from exhausting all of the cloud resources.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所见，有很多选项可以应用限制。作为云操作员，您希望充分利用这些选项，以便在每个项目的基础上进行调整。采用这种方法可以优化您的云使用，从本质上延伸您的资源，同时只提供所需的资源。作为管理员，我讨厌看到浪费的资源挂在那里，如果有更好的控制措施，它们可以用于其他用途。配额作为相反的方法，也是保持云消费者不会耗尽所有云资源的概念。
- en: 'Yes, the process of tuning quotas does involve efforts (aka extra work). Thus,
    the concept of setting global default quota values has become popular. To view
    the default quota values, you would execute the following command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，调整配额的过程确实需要努力（也就是额外的工作）。因此，设置全局默认配额值的概念变得流行起来。要查看默认配额值，您将执行以下命令：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output will look like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![Defining and creating quotas](graphics/image_04_001.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![定义和创建配额](graphics/image_04_001.jpg)'
- en: Tip
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Whenever you wish to set a quota value to be unlimited, set the value to `-1`.
    This tells Nova to allow that resource to be unrestricted for that project or
    globally if set as default.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您希望将配额值设置为无限制时，请将该值设置为“-1”。这告诉Nova允许该资源在该项目或全局范围内不受限制。
- en: Now, let's focus on how we can adjust the quota values manually using CLI. For
    simplicity purposes, we will demonstrate the manual commands using the OpenStack
    CLI only.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们专注于如何使用CLI手动调整配额值。出于简单起见，我们将仅使用OpenStack CLI演示手动命令。
- en: Manually creating quotas
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动创建配额
- en: To be accurate, you only have the capability to update the values set for global
    quotas or quotas set for a specific tenant/project. You cannot create new quotas;
    just update the values. To list, update, and reset a quota involves sending requests
    to the Compute service (Nova).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 准确地说，您只能更新全局配额或特定租户/项目的配额设置的值。您无法创建新的配额；只能更新值。列出、更新和重置配额涉及向计算服务（Nova）发送请求。
- en: 'Just like with every OpenStack service, you must authenticate first by sourcing
    the OpenRC file discussed in [Chapter 1](ch01.html "Chapter 1. Introduction to
    OpenStack"), *Introduction to OpenStack*. You would then need to provide the values
    for the quota you wish to update (refer to the table mentioned earlier for your
    options). Now, let''s look at the following example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 就像每个OpenStack服务一样，你必须首先通过在[第1章](ch01.html "第1章. OpenStack简介")中讨论的OpenRC文件进行认证，*OpenStack简介*。然后，你需要为你希望更新的配额提供值（参考前面提到的表格以获取你的选项）。现在，让我们看下面的例子：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once the command is executed, no output is written back to the screen. You can
    then execute the `quota show` command to confirm the update.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行了命令，屏幕上不会有任何输出。然后你可以执行`quota show`命令来确认更新。
- en: 'A real life working example could look something like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一个真实的工作示例可能是这样的：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Keep in mind that the preceding example only shows updating the `instance` and
    `core` quotas for a project. There are other quota values that can be updated.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，前面的示例只显示了更新项目的`实例`和`核心`配额。还有其他可以更新的配额值。
- en: Setting up default quotas
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置默认配额
- en: In the event you wish to only set up a default quota that all tenant/projects
    and users will be assigned, the process is a bit different. Nova also manages
    the default quota assignments. Setting up a default quota can be very useful when
    you wish to quickly create a tenant/project or user with automatic built-in controls
    in place.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想设置所有租户/项目和用户都将被分配的默认配额，那么这个过程会有点不同。Nova也管理默认的配额分配。设置默认配额在你希望快速创建一个带有自动内置控制的租户/项目或用户时非常有用。
- en: Nothing is worse than creating a project that has no resource restrictions by
    mistake, and before you know it, the consumers of that project have exhausted
    your cloud. Cloud is intended to give the consumers the impression of being limitless.
    In reality, we all know that there is no such thing; everything has a limit in
    some manner. From my experience, if you give a user 20 vCPU, they will use it
    all if allowed. Putting cloud resource restrictions in place is very important
    as a cloud operator.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最糟糕的情况莫过于错误地创建了一个没有资源限制的项目，然后在你意识到之前，该项目的消费者已经耗尽了你的云。云旨在给消费者一种无限的印象。实际上，我们都知道这是不可能的；一切都在某种程度上有限制。根据我的经验，如果你给一个用户20个vCPU，如果允许的话，他们会全部使用完。设置云资源限制对于云操作者来说非常重要。
- en: 'The command to update the default quota for your cloud is given later. This
    command can be executed after authenticating just as in the previous examples.
    The quota options are the same as updating a project or user-specific quota. Again,
    please refer to the table mentioned earlier for your options. Here is an example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后会给出更新云的默认配额的命令。这个命令可以在认证后执行，就像前面的例子一样。配额选项与更新项目或特定用户的配额相同。请再次参考前面提到的表格以获取你的选项。以下是一个例子：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: One of the main differences with the preceding command is you must supply something
    that Nova refers to as `quota` class. A `quota` class is the way Nova distinguishes
    between a default `quota` and a custom `quota` you may set up. Assuming future
    releases of Nova will include the ability to create additional `quota` classes.
    For now, you only have the ability to update the only `quota` class available,
    which is named `default`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的命令的主要区别之一是，你必须提供Nova所谓的“配额”类。`配额`类是Nova区分默认`配额`和你可能设置的自定义`配额`的方式。假设未来的Nova版本将包括创建额外的`配额`类的功能。目前，你只能更新唯一可用的`配额`类，即名为`default`的`配额`类。
- en: 'A working example of the command would look like this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的工作示例可能是这样的：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Please keep in mind, whatever you set the default `quota` values to is what
    every project or user will have configured initially.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，无论你将默认的`配额`值设置为多少，每个项目或用户最初都会配置为这个值。
- en: Resetting quota values
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重置配额值
- en: 'A time may come when you may want to start fresh and reset a quota set for
    a project(s) or user(s). Fortunately, this is an easy process within OpenStack.
    You would use the `quota-delete` command for Nova. This will delete the custom
    quota and reset it back to the default quota. See the following example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有一天，你可能希望重新开始并重置为项目或用户设置的配额。幸运的是，在OpenStack中这是一个简单的过程。你可以使用Nova的`quota-delete`命令。这将删除自定义配额并将其重置为默认配额。参见以下示例：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With the preceding command, you would supply either the tenant ID or the user
    ID to which you want to revert the quota back to the default values.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的命令，你可以提供要将配额恢复为默认值的租户ID或用户ID。
- en: Automation considerations
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化考虑
- en: When creating this role, there was only one automation decision that I had to
    make outside of the ones we covered in the previous chapter. All the other considerations
    carried over.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建这个角色时，除了我们在前一章中讨论的内容之外，我只需要做出一个自动化决定。所有其他考虑都延续了下来。
- en: Because the Nova `quota` commands allow numerous options to be passed with no
    interdependencies, we have to figure out a way to not restrict that flexibility
    in the role and at the same time not require constant updates directly to the
    role. Ansible makes such a decision really easy by allowing variables to be passed
    as a `hash`. Within the variable file, you can then define the options for each
    project or user and have the task cycle through each project/user with those options.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因为Nova `配额`命令允许传递多个选项而没有相互依赖，我们必须想出一种方法，既不限制角色的灵活性，又不需要直接对角色进行不断的更新。Ansible通过允许将变量作为`哈希`传递来做出这样的决定。在变量文件中，你可以为每个项目或用户定义选项，并让任务循环遍历每个项目/用户以使用这些选项。
- en: 'I promise this is the last time I will make this disclaimer, but I felt that
    it is important to emphasize:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我保证这是我最后一次做出这样的声明，但我觉得强调这一点很重要：
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are many ways to approach automating tasks for OpenStack with Ansible,
    the ones shown in this book is just one way I personally have found success with
    and most certainly not the only way. The playbooks/roles are intended to be working
    examples you can use as is or adjust/improve for your personal use cases.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以使用Ansible自动化OpenStack的任务，本书中展示的方法只是我个人发现成功的一种方式，当然不是唯一的方式。这些剧本/角色旨在成为您可以直接使用或调整/改进以适应个人用例的工作示例。
- en: Just like last time, now that this has been said let's get on with creating
    this role.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 就像上次一样，既然已经说了，让我们继续创建这个角色。
- en: Coding the playbooks and roles
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写剧本和角色
- en: We will now create a role that allows us to update a single and/or multiple
    project(s) quotas at one time. Updating a quota is a relatively simple two-step
    process. Step 1 is to record the tenant ID or user ID in which you wish to update
    the quota for. Then, step 2 is to actually update the quota.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建一个角色，允许我们一次更新单个和/或多个项目的配额。更新配额是一个相对简单的两步过程。第一步是记录您希望更新配额的租户ID或用户ID。然后，第二步是实际更新配额。
- en: 'Since we are only creating a role in this example, we can start with the `main.yml`
    file within the role directory named `adjust-quotas/tasks`. The contents at the
    beginning of this file will look like this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在本示例中我们只是创建一个角色，我们可以从角色目录中的`main.yml`文件开始，该目录名为`adjust-quotas/tasks`。该文件开头的内容将如下所示：
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Just like the manual commands we reviewed earlier in this chapter, you must
    supply the quota options you wish to adjust and the tenant name from the variable
    file we will review later. Again, we are using the `with_together` command to
    loop through the two variables defined pairing the values together.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在本章前面审查的手动命令一样，您必须从稍后我们将审查的变量文件中提供您希望调整的配额选项和租户名称。同样，我们使用`with_together`命令循环遍历两个变量，将值配对在一起。
- en: 'Here is a further breakdown of the variables defined in the task:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是任务中定义的变量的进一步细分：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When the role is executed, no output is generated in this particular case.
    If you wanted to provide an output to confirm the successful execution of the
    task, you can add the `quota show` command as an additional task in your role.
    An example of that would look like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行角色时，在这种特定情况下不会生成任何输出。如果您想要提供输出以确认任务成功执行，可以将`quota show`命令作为角色中的附加任务添加。这将如下所示：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You have now completed your second OpenStack administration role. To support
    this role, we now need to create the variable file that will go along with it.
    The variable file named `main.yml`, which will be located in the `adjust-quotas/vars`
    directory.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已经完成了第二个OpenStack管理角色。为了支持这个角色，我们现在需要创建与之配套的变量文件。变量文件名为`main.yml`，将位于`adjust-quotas/vars`目录中。
- en: Tip
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Keep in mind that the values defined in the variable file are intended to be
    changed before each execution for normal everyday use.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，变量文件中定义的值是打算在每次执行前进行更改以进行正常的日常使用。
- en: 'The values shown in the following example are just working examples. Let''s
    take a look:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例中显示的值只是工作示例。让我们来看一下：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let''s take a moment to break down each variable. The summary would be:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们花点时间来分解每个变量。总结如下：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now that our variable file is created, we can move on to creating the master
    playbook file. Just like in the previous chapter, the file will be named `quota-update.yml`
    and saved to the root of the playbook directory. The contents of the `quota-update.yml`
    file would be:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的变量文件已经创建，我们可以继续创建主剧本文件。就像在上一章中一样，文件将被命名为`quota-update.yml`并保存到剧本目录的根目录中。`quota-update.yml`文件的内容将是：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The summary of this file is as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件的摘要如下：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: All that is left is to populate our host inventory file and the global variable
    file. Since we already created these in the previous chapter, there is no need
    to repeat this process. The values defined earlier would remain the same. Here
    is a quick recap of how those files are configured.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在只剩下填充我们的主机清单文件和全局变量文件。由于我们在上一章中已经创建了这些文件，所以没有必要重复这个过程。之前定义的值将保持不变。以下是这些文件的配置快速回顾。
- en: 'Hosts file in the root of the playbook directory is:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 剧本目录根目录中的主机文件是：
- en: '[PRE13]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Global variable file inside the `group_vars/` directory is:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`group_vars/`目录中的全局变量文件是：'
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: OK, so here we are, two administration playbooks and roles completed now. As
    always, we will finish up the chapter with a quick review of the playbook and
    role just created.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们完成了两个管理剧本和角色。和往常一样，我们将以快速审查刚刚创建的剧本和角色结束本章。
- en: Reviewing playbooks and roles
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查剧本和角色
- en: 'To get right to it, we can start from the top with the role we created named
    `create-users-env`. The completed role and file, named `main.yml`, located in
    the `adjust-quotas/tasks` directory, looks like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们可以从我们创建的名为`create-users-env`的角色开始。完成的角色和文件，名为`main.yml`，位于`adjust-quotas/tasks`目录中，看起来像这样：
- en: '[PRE15]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The corresponding variable file, named `main.yml`, located in the `adjust-quota/vars`
    directory, for this role will look like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 该角色对应的变量文件，名为`main.yml`，位于`adjust-quota/vars`目录中，将如下所示：
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, the master playbook file, named `quota-update.yml`, located in the `root`
    of the `playbook` directory, will look like this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，位于`playbook`目录的`root`中的主剧本文件，名为`quota-update.yml`，将如下所示：
- en: '[PRE17]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Following this, we created the hosts file, which also is located in the `root` directory
    of the `playbook` directory:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建了主机文件，也位于`playbook`目录的`root`目录中：
- en: '[PRE18]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, we wrapped this playbook all up by creating the global variable file
    named `util_container`, saving it to the `group_vars/` directory of the playbook:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们通过创建名为`util_container`的全局变量文件来包装这个剧本，将其保存到剧本的`group_vars/`目录中：
- en: '[PRE19]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete set of code can again be found in the following GitHub repository
    at [https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2](https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码集可以在以下GitHub存储库中再次找到：[https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2](https://github.com/os-admin-with-ansible/os-admin-with-ansible-v2)。
- en: 'Now of course, we have to test out our work. Assuming that you have cloned
    the GitHub repository mentioned earlier, the command to test out the playbook
    from the Deployment node would be as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当然，我们必须测试我们的工作。假设您已经克隆了前面提到的GitHub存储库，从部署节点测试playbook的命令如下：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: As an OpenStack operator quotas will be a focus on yours, so any effort in being
    able to streamlet that process will be beneficial. Ansible is the key to being
    able to simplify repeated tasks such as this.  Just as in the previous chapter,
    you can use this role in combination with others as many times as you want. This
    is why, you want to design your roles to be the base generic task as much as possible .
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 作为OpenStack操作员，配额将是您关注的重点，因此，能够简化该流程的任何努力都将是有益的。Ansible是简化重复任务的关键。就像在上一章中一样，您可以将此角色与其他角色结合使用多次。这就是为什么您希望尽可能将角色设计为基本通用任务的原因。
- en: Some of the things we covered in this chapter are defining what a quota within
    OpenStack is. We then took that knowledge and learned how to update a quota for
    a project/user using the OpenStack CLI. We applied some base principles as to
    why you would use the default cloud quotas and how to update them appropriately.
    Next, we reviewed how to reset any of the custom quotas created. Finally, we developed
    our very own Ansible playbook and role to automate updating custom project/user
    quotas.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的一些内容包括定义OpenStack中配额的概念。然后，我们利用这些知识学习了如何使用OpenStack CLI更新项目/用户的配额。我们应用了一些关于为什么要使用默认云配额以及如何适当地更新它们的基本原则。接下来，我们回顾了如何重置任何自定义配额。最后，我们开发了我们自己的Ansible
    playbook和角色，以自动更新自定义项目/用户配额。
- en: Let's now to move on to the next chapter where we will take on the administrative
    task of snapshotting your cloud. The functionality of taking instance snapshots
    is a powerful tool if you wanted to use that instance as a gold copy and/or retain
    a backup of the instance. Understanding how to handle this sort of task on a cloud
    operator level is very beneficial. The next chapter will cover how to create snapshots
    manually, cover the power of being able to snapshot all instances within a project
    at once and then of course conclude with how to automate that task with Ansible.
    On to [Chapter 5](ch05.html "Chapter 5. Snapshot Your Cloud"), *Snapshot Your
    Cloud*, we go!
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续进行下一章，我们将承担云快照的管理任务。如果您想将实例用作金标本和/或保留实例的备份，那么拍摄实例快照的功能是一个强大的工具。了解如何在云操作员级别处理这种任务非常有益。下一章将介绍如何手动创建快照，介绍一次性快照项目中所有实例的功能，然后当然还包括如何使用Ansible自动化该任务。我们继续到[第5章](ch05.html
    "第5章。快照您的云") *快照您的云*。
