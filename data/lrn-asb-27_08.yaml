- en: Getting Notification from Ansible
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Ansible 获取通知
- en: One of the big advantages of Ansible, compared to a bash script, is its idempotency,
    ensuring that everything is in order. This is a very nice feature that not only
    assures you that nothing has changed the configurations on your server, but also
    that new configurations will be applied in a short time.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与 bash 脚本相比，Ansible 的一个重大优势之一是其幂等性，确保一切井然有序。这是一个非常好的功能，不仅向您保证服务器配置没有变化，而且新配置也将在短时间内生效。
- en: Due to these reasons, many people run their `master.yaml` file once a day. When
    you do this (and probably you should!), you want some kind of feedback sent to
    you by Ansible itself. There are also many other cases where you may want Ansible
    to send messages to you or your team. For instance, if you use Ansible to deploy
    your application, you may want to send an IRC message (or other kinds of group
    chat messages) to your development team channel, so that they are all informed
    of the status of your system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这些原因，许多人每天运行他们的 `master.yaml` 文件一次。当您这样做时（也许您应该！），您希望 Ansible 本身向您发送某种反馈。还有许多其他情况，您可能希望
    Ansible 向您或您的团队发送消息。例如，如果您使用 Ansible 部署您的应用程序，您可能希望向开发团队频道发送 IRC 消息（或其他类型的群聊消息），以便他们都了解系统的状态。
- en: Other times, you want Ansible to notify Nagios that it's going to break something,
    so that Nagios does not worry and does not start to shoot emails and messages
    to your system administrators. In this chapter, we are going to look at multiple
    ways to help you to set up Ansible Playbooks that can both work with your monitoring
    system and eventually send notifications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你希望 Ansible 通知 Nagios 即将破坏某些东西，这样 Nagios 就不会担心，也不会开始向系统管理员发送电子邮件和消息。在本章中，我们将探讨多种方法，帮助您设置
    Ansible Playbooks，既可以与您的监控系统配合工作，又可以最终发送通知。
- en: 'In this chapter, we''ll explore the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: Email notifications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件通知
- en: Ansible XMPP/Jabber
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible XMPP/Jabber
- en: Slack and Rocket chat
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Slack 和 Rocket 聊天
- en: Sending a message to an IRC channel (community information and contributing)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 IRC 频道发送消息（社区信息和贡献）
- en: Amazon Simple Notification Service
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon 简单通知服务
- en: Nagios
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nagios
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Many of the examples will require third-party systems (to send messages to),
    which you may or may not be using. If you do not have access to one of these systems,
    the relative example will not be executable for you. This is not a big problem,
    since you can still read the section and many notification modules are very similar
    to another. You might find that a module that is more suitable for your environment
    is present and functions in a very similar way. For a full list of Ansible notification
    modules, you can refer to [https://docs.ansible.com/ansible/latest/modules/list_of_notification_modules.html](https://docs.ansible.com/ansible/latest/modules/list_of_notification_modules.html).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 许多示例将需要第三方系统（用于发送消息），您可能正在使用或没有使用。如果您无法访问其中一个系统，则相关示例将无法执行。这并不是一个大问题，因为您仍然可以阅读该部分，并且许多通知模块非常相似。您可能会发现，适用于您环境的模块与另一个模块的功能非常相似。您可以参考
    Ansible 通知模块的完整列表：[https://docs.ansible.com/ansible/latest/modules/list_of_notification_modules.html](https://docs.ansible.com/ansible/latest/modules/list_of_notification_modules.html)。
- en: You can download all of the files from this book's GitHub repository at: [https://github.com/PacktPublishing/Learning-Ansible-2.X-Third-Edition/tree/master/Chapter06](https://github.com/PacktPublishing/Learning-Ansible-2.X-Third-Edition/tree/master/Chapter06).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从本书的 GitHub 存储库下载所有文件：[https://github.com/PacktPublishing/Learning-Ansible-2.X-Third-Edition/tree/master/Chapter06](https://github.com/PacktPublishing/Learning-Ansible-2.X-Third-Edition/tree/master/Chapter06)。
- en: Sending emails with Ansible
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ansible 发送电子邮件
- en: It's frequent that a user needs to be promptly notified about an action that
    an Ansible Playbook performs. This can be either because it's important that this
    user knows about it, or because there is an automated system that has to be notified
    in order to (not) start some procedure.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 经常有用户需要及时通知有关 Ansible Playbook 执行的操作。这可能是因为这个用户知道这一点很重要，或者因为有一个自动化系统必须通知以便（不）启动某个过程。
- en: 'The easiest and most common way of alerting people is to send emails. Ansible
    allows you to send emails from your playbook using a `mail` module. You can use
    this module in between any of your tasks and notify your user whenever required.
    Also, in some cases, you cannot automate each and every thing because either you
    lack the authority or it requires some manual checking and confirmation. If this
    is the case, you can notify the responsible user that Ansible has done its job
    and it''s time for them to perform their duty. Let''s use the `mail` module to
    notify your users with a very simple playbook called `uptime_and_email.yaml`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒人们的最简单和最常见的方法是发送电子邮件。Ansible允许您使用`mail`模块从您的playbook发送电子邮件。您可以在任何任务之间使用此模块，并在需要时通知用户。此外，在某些情况下，您无法自动化每一件事，因为要么您缺乏权限，要么需要进行一些手动检查和确认。如果是这种情况，您可以通知负责人员Ansible已经完成了其工作，现在是他们执行其职责的时候了。让我们使用名为`uptime_and_email.yaml`的非常简单的playbook来使用`mail`模块通知您的用户：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding playbook firstly reads the current machine uptime, issuing the
    `uptime` command, and then sends it via email to the `me@fale.io` email address.
    To send the email, we clearly need some additional information, such as the SMTP
    host, a valid set of SMTP credentials, and the content of the email. This example
    is very easy and will allow us to keep the examples short, but obviously, you
    can generate the emails in a similar way in very long and complex playbooks. If
    we focus on the `mail` task a little bit, we can see that we are using it with
    the following data:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 前述playbook首先读取当前机器的正常运行时间，发出`uptime`命令，然后通过电子邮件发送到`me@fale.io`电子邮件地址。要发送电子邮件，我们显然需要一些额外信息，如SMTP主机、有效的SMTP凭据以及电子邮件的内容。这个例子非常简单，将使我们能够保持示例简短，但显然，你可以以非常类似的方式在非常长且复杂的playbooks中生成电子邮件。如果我们稍微专注于`mail`任务，我们可以看到我们正在使用以下数据：
- en: An email server to be used to send the email (also with login information, which
    is required for this server)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要用于发送电子邮件的电子邮件服务器（还需登录信息，这是该服务器所必需的）
- en: The receiver email address
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收者电子邮件地址
- en: The email subject
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件主题
- en: The email body
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件正文
- en: 'Other interesting parameters that the `mail` module supports are the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`mail`模块支持的其他有趣参数如下：'
- en: 'The `attach` parameter: This is used to add attachments to the email that will
    be generated. This is very useful when, for instance, you want to send a log via
    an email.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attach`参数：这用于向将生成的电子邮件添加附件。例如，当您希望通过电子邮件发送日志时，这非常有用。'
- en: 'The `port` parameter: This is used to specify which port is used by the email
    server.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`参数：这用于指定电子邮件服务器使用的端口。'
- en: An interesting thing about this module is that the only mandatory field is `subject`,
    and not the body, as many people would expect. The RFC 2822 does not force the
    presence of either the subject or the body, so an email without both of them is
    still valid, but it would be very hard for a human to manage such formatted email.
    Ansible, therefore, will always send emails with both subject and body, and if
    the body is empty, it will use the `subject` string both in the subject and in
    the body.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此模块的有趣之处在于，唯一强制性字段是`subject`，而不是正文，许多人可能期望正文也是必需的。RFC 2822不强制要求主题或正文的存在，因此即使没有它们，电子邮件仍然有效，但对于人来说，管理这种格式的电子邮件将非常困难。因此，Ansible将始终发送带有主题和正文的电子邮件，如果正文为空，则会在主题和正文中都使用`subject`字符串。
- en: 'We can now proceed to execute the script to validate its functionality with
    the following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以继续执行脚本以验证其功能，使用以下命令：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This playbook might not work on some machines, since the `-p` parameter of `uptime`
    is Linux-specific and might not work on other POSIX operating systems, such as
    macOS.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`uptime`的`-p`参数是特定于Linux的，可能无法在其他POSIX操作系统（如macOS）上运行，因此此playbook可能在某些机器上无法正常工作。
- en: 'By running the previous playbook, we will have a result similar to the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行上述playbook，我们将得到类似以下的结果：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Also, as expected, Ansible has sent me an email with the following content:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，Ansible已经向我发送了一封带有以下内容的电子邮件：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This module can be used in many different ways. An example of a real-world case
    that I've seen is a playbook that was created to automate a piece of a very complex,
    but sequential process, where multiple people were involved. Each person had a
    specific point in the process in which they had to start their work and the next
    person in the chain cannot start their work before the previous person completed
    theirs. The key to keep the process ticking was each person emailing the next
    person in the chain to notify them that their own part was completed and therefore
    the receiver needed to start their work in the process. The people in the process
    generally carried out the email notification manually. When we started to automate
    that procedure, we did it for one specific piece and no one noticed that that
    part was automated.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块可以以许多不同的方式使用。我见过一个实际案例，那就是为了自动化一个非常复杂但顺序流程的一部分，涉及多个人员。每个人在流程的特定点必须开始他们的工作，而链中的下一个人在前一个人完成他们的工作之前不能开始他们的工作。保持该过程运作的关键在于每个人手动向链中的下一个人发送电子邮件，通知他们他们自己的部分已经完成，因此接收者需要开始他们在流程中的工作。在我们开始自动化该程序之前，人们通常手动进行电子邮件通知，但当我们开始自动化该程序的一部分时，没有人注意到该部分已经自动化。
- en: Having such long processes tracked via email is not the best way to handle them
    since errors are easy to make, potentially losing track of the process. Also,
    those kind of complex and sequential processes tend to be very slow, but it's
    widely used in organizations and often you cannot change it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这样的复杂、顺序流程，通过电子邮件进行跟踪并不是处理它们的最好方式，因为错误很容易犯，可能导致跟踪丢失。此外，此类复杂顺序流程往往非常缓慢，但它们在组织中被广泛使用，通常您无法进行更改。
- en: There are cases where the process needs to send notifications in a more real-time
    way than emails, so XMPP could be a good way to do it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有些情况下，流程需要以比电子邮件更实时的方式发送通知，因此 XMPP 是一个好的选择。
- en: XMPP
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XMPP
- en: Emails are slow, unreliable, and often people do not react to them immediately.
    There are cases where you want to send a real-time message to one of your users.
    Many organizations rely on XMPP/Jabber for their internal chat system and the
    great thing is that Ansible is able to directly send messages to XMPP/Jabber users
    and conference rooms.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件速度慢，不可靠，并且人们通常不会立即对其做出反应。在某些情况下，您希望向您的用户发送实时消息。许多组织依赖 XMPP/Jabber 作为其内部聊天系统，而美妙的事情是
    Ansible 能够直接向 XMPP/Jabber 用户和会议室发送消息。
- en: 'Let''s tweak the previous example to send uptime information to a user in the
    `uptime_and_xmpp_user.yaml` file:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改之前的示例，在 `uptime_and_xmpp_user.yaml` 文件中发送可靠性信息给某个用户：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you want to use the Ansible `jabber` task, you will need to have the `xmpppy`
    library installed on the system that will perform the task. One way to install
    it is by using your package manager. For instance, on Fedora you can just execute
    `sudo dnf install -y python2-xmpp` and it will be installed. You can also use
    `pip install xmpppy`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要使用 Ansible 的 `jabber` 任务，需要在执行该任务的系统上安装 `xmpppy` 库。其中一种安装方法是使用您的软件包管理器。例如，在
    Fedora 上，您只需执行 `sudo dnf install -y python2-xmpp` 即可进行安装。您也可以使用 `pip install xmpppy`
    进行安装。
- en: The first task is exactly the same as we had in the previous section, while
    the second one has small differences. As you can see, the `jabber` module is very
    similar to the `mail` module and requires similar parameters. In the XMPP case,
    we don't need to specify the server host and port, since that information is automatically
    gathered by XMPP from the DNS. In cases where we would need to use a different
    server host or port, we can use, respectively, the `host` and `port` parameters.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个任务与前一节完全相同，而第二个任务则有一些细微的差别。正如您所看到的，`jabber` 模块非常类似于 `mail` 模块，并且需要类似的参数。在
    XMPP 的情况下，我们不需要指定服务器主机和端口，因为 XMPP 会从 DNS 自动收集该信息。在需要使用不同服务器主机或端口的情况下，我们可以分别使用
    `host` 和 `port` 参数。
- en: 'We can now proceed to execute the script to validate its functionality with
    the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下命令执行该脚本以验证其功能：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will have a result similar to the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到类似于以下的结果：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In cases where we want to send a message to a conference room instead of a
    single user, it is enough to change the receiver in the  `to` parameter, by adding
    the associated conference room instead:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们想要发消息到会议室而不是单个用户的情况，只需要将接收者在 `to` 参数中更改为与会议室相应的接收者即可。
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Except for the receiver change and the addition of `(mailto:sysop@conference.fale.io)/ansiblebot`
    which identifies the chat handle to use (`ansiblebot`, in this case), XMPP handles
    users and conference rooms in the same way, so it's very easy to switch from one
    to the other.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 除了接收者更改和添加 `(mailto:sysop@conference.fale.io)/ansiblebot`（标识要使用的聊天句柄 `ansiblebot`，在本例中）之外，XMPP
    对用户和会议室的处理方式是相同的，因此从一种切换到另一种非常容易。
- en: Although XMPP is fairly popular, not every company uses it. Another collaboration
    platform that Ansible can send messages to is Slack.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 XMPP 相当流行，但并非每家公司都使用它。另一个 Ansible 可以发送消息的协作平台是 Slack。
- en: Slack
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Slack
- en: In the last few years, many new chat and collaboration platforms have appeared.
    One of the most used ones is Slack. Slack is a cloud-based team collaboration
    tool, and this allows even easier integration with Ansible than XMPP.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年中，出现了许多新的聊天和协作平台。其中最常用的之一是 Slack。Slack 是一个基于云的团队协作工具，这使得与 XMPP 相比，与 Ansible
    的集成更加容易。
- en: 'Let''s put the following lines in the `uptime_and_slack.yaml` file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将以下行放入 `uptime_and_slack.yaml` 文件中：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As we discussed, this module has an even simpler syntax than the XMPP one. In
    fact, it only needs to know the token (which you can generate on the Slack website),
    the channel to send the message to, and the message itself.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们讨论的那样，此模块的语法甚至比 XMPP 更简单。事实上，它只需要知道令牌（您可以在 Slack 网站上生成），要发送消息的频道以及消息本身。
- en: Since version 1.8 of Ansible, the new version of the Slack token is required,
    for instance, `G522SJP14/D563DW213/7Qws484asdWD4w12Md3avf4FeD`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 自 Ansible 的 1.8 版本以来，需要新版本的 Slack 令牌，例如 `G522SJP14/D563DW213/7Qws484asdWD4w12Md3avf4FeD`。
- en: 'Run the playbook with the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行 Playbook：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This results in the following output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致以下输出：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Since Slack''s goal is to make communications more efficient, it allows us
    to tweak multiple aspects of the message. The most interesting points, from my
    point of view, are the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Slack 的目标是使通信更有效，它允许我们调整消息的多个方面。从我的角度来看，最有趣的几点是：
- en: '`color`: This allows you to specify a color bar to be put at the beginning
    of the message to identify the following states:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color`：这允许您指定一个颜色条，放在消息开头以标识以下状态：'
- en: 'Good: green bar'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Good: green bar'
- en: 'Normal: no bar'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Normal: no bar'
- en: 'Warning: yellow bar'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警告：黄色条
- en: 'Danger: red bar'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Danger: red bar'
- en: '`icon_url`: This allows you to change the user image for that message.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`icon_url`：这允许您为该消息更改用户图像。'
- en: 'For example, the following code would send a message with a warning color and
    a custom user image:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码将以警告颜色和自定义用户图像发送消息：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Since not every company is comfortable with Slack being able to see their private
    conversations, there are alternatives, such as Rocket Chat.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于并非每家公司都愿意让 Slack 看到他们的私人对话，因此存在替代方案，例如 Rocket Chat。
- en: Rocket Chat
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rocket Chat
- en: Many companies like the functionality of Slack, but do not want to lose out
    on the privacy that an on-premises service gives you when using Slack. **Rocket
    Chat** is an open source software solution that implements most of the features
    of Slack, as well as the majority of its interface. Being open source, every company
    can install it on-premises and manage it in a way that is compliant with their
    IT rules.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 许多公司喜欢 Slack 的功能，但不想在使用 Slack 时失去本地服务所提供的隐私。**Rocket Chat** 是一个开源软件解决方案，实现了
    Slack 的大多数功能以及其大部分界面。作为开源软件，每家公司都可以将其安装在本地，并以符合其 IT 规则的方式进行管理。
- en: 'As Rocket Chat''s goal is to be a drop-in replacement for Slack, from our point
    of view, very few changes need to be done. In fact, we can create the `uptime_and_rocket.yaml` file
    with the following content:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Rocket Chat 的目标是成为 Slack 的即插即用替代方案，从我们的角度来看，几乎不需要做任何更改。事实上，我们可以创建 `uptime_and_rocket.yaml`
    文件，其中包含以下内容：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, the only lines that changed are the sixth and seventh, where
    the word `slack` has been replaced by `rocketchat`. Also, we need to add the domain
    field specifying where our installation of Rocket Chat is located.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，仅有第六和第七行发生了变化，其中 `slack` 一词已被替换为 `rocketchat`。此外，我们需要添加一个 `domain` 字段，指定我们的
    Rocket Chat 安装位于何处。
- en: 'Run the code with the following command:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行代码：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This results in the following output:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这导致以下输出：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Another way to self-host a company's conversations is by using IRC, a very old
    but still commonly used protocol. Ansible is also able to send messages using
    it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种自托管公司对话的方式是使用 IRC，这是一个非常古老但仍然常用的协议。Ansible 也能够使用它发送消息。
- en: Internet Relay Chat
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Internet Relay Chat
- en: '**Internet Relay Chat** (**IRC**) is probably the most well-known and widely-used
    chat protocol of the 1990s and it''s still used today. Its popularity and continued
    use is mainly due to its use in open source communities and its simplicity. From
    an Ansible perspective, IRC is a pretty straightforward module and we can use
    it, as shown in the following example (to be put in the `uptime_and_irc.yaml`
    file):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**互联网中继聊天**（**IRC**）可能是 1990 年代最著名和广泛使用的聊天协议，至今仍在使用。它的受欢迎程度和持续使用主要是由于它在开源社区中的使用和其简单性。从
    Ansible 的角度来看，IRC 是一个非常直接的模块，我们可以像以下示例一样使用它（放在 `uptime_and_irc.yaml` 文件中）：'
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You need the `socket` Python library installed to use the Ansible IRC module.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装 `socket` Python 库才能使用 Ansible IRC 模块。
- en: 'In the IRC module, the following fields are required:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IRC 模块中，需要以下字段：
- en: '`channel`: This is to specify in which channel your message will be delivered.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`channel`：指定消息将要传送到的频道。'
- en: '`msg`: This is the message you want to send.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`msg`：这是您要发送的消息。'
- en: 'Other configurations you will usually specify are:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通常您需要指定的其他配置包括：
- en: '`server`: Select `server` to connect to, if not `localhost`.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server`：选择要连接的`服务器`，如果不是`localhost`。'
- en: '`port`: Select `port` to connect to, if not `6667`.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`port`：选择连接的`端口`，如果不是`6667`。'
- en: '`color`: This to specify the message `color`, if not `black`.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color`：指定消息`颜色`，如果不是`黑色`。'
- en: '`nick`: This to specify the `nick` sending the message, if not `ansible`.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nick`：指定发送消息的`昵称`，如果不是`ansible`。'
- en: '`use_ssl`: Use SSL and TLS security.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`use_ssl`：使用 SSL 和 TLS 安全性。'
- en: '`style`: This is if you want to send your message with bold, italic, underline,
    or reverse style.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style`：如果要以粗体、斜体、下划线或反向样式发送消息，则使用此选项。'
- en: 'Run the code with the following command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行代码：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This results in the following output:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We have seen many different communication systems that are probably in place
    in your company or project, but those are usually used for a human-to-human or
    a machine-to-human communication. Machine-to-machine communication usually uses
    different systems, such as Amazon SNS.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到许多不同的通信系统可能在您的公司或项目中使用，但这些通常用于人与人或机器与人的通信。机器对机器的通信通常使用不同的系统，例如亚马逊 SNS。
- en: Amazon Simple Notification Service
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亚马逊简单通知服务
- en: 'Sometimes, you want your playbooks to be agnostic in the way you receive the
    alert. This has several advantages, mainly in terms of flexibility. In fact, in
    this model, Ansible will deliver the messages to a notification service and the
    notification service will then take care of delivering them. **Amazon Simple Notification
    Service** (**SNS**) is not the only notification service available, but it''s
    probably the most used. SNS has the following components:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您希望您的 Playbook 在接收警报的方式上是不可知的。这具有多个优点，主要是灵活性。事实上，在这种模型中，Ansible 将消息交付给一个通知服务，然后通知服务将负责交付消息。**亚马逊简单通知服务**（**SNS**）并不是唯一可用的通知服务，但它可能是最常用的。SNS
    有以下组件：
- en: '**Messages**: Messages generated by publishers identified by a UUID'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息**：由 UUID 识别的发布者生成的消息'
- en: '**Publishers**: Programs generating messages'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布者**：生成消息的程序'
- en: '**Topics**: Named groups of messages, which can be thought of in a similar
    way to chat channels or rooms'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题**：命名的消息组，可以类比于聊天频道或房间'
- en: '**Subscribers**: Clients that will receive all messages published in the topics
    they have subscribed to'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订阅者**：订阅了他们感兴趣主题的所有消息的客户端'
- en: 'So in our case, we will have, specifically, the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我们的情况下，具体如下：
- en: '**Messages**: Ansible notifications'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息**：Ansible 通知'
- en: '**Publishers**: Ansible itself'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布者**：Ansible 本身'
- en: '**Topics**: Probably different topics to group messages based on the system
    and/or the kind of notification (for example, storage, networking, or computing)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主题**：根据系统和/或通知类型（例如存储、网络或计算）对消息进行分组的可能不同主题'
- en: '**Subscribers**: The people in your team that have to be notified'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订阅者**：您团队中必须得到通知的人员'
- en: 'As we said, one of the big advantages of SNS is that you can decouple the way
    Ansible sends messages (the SNS API) from the way your users will receive them.
    In fact, you will be able to choose different delivery systems per user and per
    topic rules, and eventually you can change them dynamically to ensure that the
    messages are sent in the best way possible for any situation. The five ways SNS
    can send messages, at the moment, are as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所说，SNS 的一个重大优势是，您可以将 Ansible 发送消息的方式（即 SNS API）与用户接收消息的方式分离开来。事实上，您将能够为每个用户和每个主题规则选择不同的传送系统，并最终可以动态更改它们，以确保消息以最佳方式发送到任何情况中。目前，SNS
    可以发送消息的五种方式如下：
- en: Amazon **Lambda** functions (serverless functions written in Python, Java, and
    JavaScript)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon **Lambda** 函数（用 Python、Java 和 JavaScript 编写的无服务器函数）
- en: Amazon **Simple Queue Service** (**SQS**) (a message queuing system)
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon **Simple Queue Service**（**SQS**）（一种消息队列系统）
- en: Email
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件
- en: HTTP(S) call
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP(S) 调用
- en: SMS
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 短信
- en: 'Let''s see how we can send SNS messages with Ansible. To do so, we can create
    a file called `uptime_and_sns.yaml` with the following content:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 Ansible 发送 SNS 消息。为此，我们可以创建一个名为 `uptime_and_sns.yaml` 的文件，其中包含以下内容：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this example, we are using the `msg` key to set the message that will be
    sent, `topic` to choose the most appropriate topic, and `subject` will be used
    as the subject for email deliveries. There are many other options you can set.
    Mainly, they are useful for sending different messages using different delivery
    methods.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用 `msg` 键来设置将要发送的消息，`topic` 选择最合适的主题，并且 `subject` 将用作电子邮件投递的主题。您可以设置许多其他选项。主要用于使用不同的传送方式发送不同的消息。
- en: 'For instance, it would make sense to send a short message via SMS (in the end,
    the first **S** in **SMS** means **short**) and longer and more detailed messages
    via emails. To do so, the SNS module provides us with the following delivery-specific
    options:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，通过短信发送短消息（最后，**SMS** 中的第一个 **S** 意味着 **短**），通过电子邮件发送更长且更详细的消息是有意义的。为此，SNS
    模块为我们提供了以下针对传送的特定选项
- en: '`email`'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`'
- en: '`http`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http`'
- en: '`https`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https`'
- en: '`sms`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sms`'
- en: '`sqs`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sqs`'
- en: 'As we have seen in previous chapter, AWS modules require credentials, and we
    can set them up in multiple ways. The three AWS-specific parameters that are needed
    to run this module are:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一章中所看到的，AWS 模块需要凭据，我们可以以多种方式设置它们。运行此模块所需的三个 AWS 特定参数是：
- en: '`aws_access_key`: This is the AWS access key; if not specified, the environmental
    variable, `aws_access_key`, will be considered or the content of `~/.aws/credentials`.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aws_access_key`：这是 AWS 访问密钥；如果未指定，则将考虑环境变量 `aws_access_key` 或 `~/.aws/credentials`
    的内容。'
- en: '`aws_secret_key`: This is the AWS secret key; if not specified, the environmental
    variable, `aws_secret_key`, will be considered or the content of `~/.aws/credentials`.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aws_secret_key`：这是 AWS 秘密密钥；如果未指定，则将考虑环境变量 `aws_secret_key` 或 `~/.aws/credentials`
    的内容。'
- en: '`region`: This is the AWS region to use; if not specified, the environmental
    variable, `ec2_region`, will be considered or the content of `~/.aws/config`.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`region`：这是要使用的 AWS 区域；如果未指定，则将考虑环境变量 `ec2_region` 或 `~/.aws/config` 的内容。'
- en: 'Run the code with the following command:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行代码：
- en: '[PRE19]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will result in the following output:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致以下输出：
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: There are cases where we want to notify a monitoring system so that it will
    not trigger any alarm due to Ansible actions. A common example of such a system
    is Nagios.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们希望通知监控系统，以便它不会由于 Ansible 操作而触发任何警报。这种系统的常见示例是 Nagios。
- en: Nagios
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nagios
- en: '**Nagios** is one of the most used tools for controlling the status of services
    and servers. Nagios is capable of regularly auditing the state of servers and
    services and notifying users in case of problems. If you have Nagios in your environment,
    you need to be very careful when you administer your machines, because in cases
    where Nagios finds servers or services in an unhealthy state, it will start sending
    emails and SMS and making calls to your team. When you run Ansible scripts against
    nodes that are controlled by Nagios, you have to be even more careful, because
    you risk emails, SMS messages, and calls being triggered during the night or other
    inappropriate times. To avoid this, Ansible is able to notify Nagios beforehand,
    so that Nagios does not send notifications in that time window, even if some services
    are down (for instance, because they are rebooted) or other checks fail.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**Nagios**是用于监控服务和服务器状态的最常用工具之一。Nagios能够定期审计服务器和服务的状态，并在出现问题时通知用户。如果您的环境中有Nagios，那么在管理机器时必须非常小心，因为在Nagios发现服务器或服务处于不健康状态时，它会开始发送电子邮件和短信并向您的团队打电话。当您对由Nagios控制的节点运行Ansible脚本时，您必须更加小心，因为您会面临在夜间或其他不适当时间触发电子邮件、短信消息和电话的风险。为了避免这种情况，Ansible能够事先通知Nagios，以便在那个时间窗口内Nagios不会发送通知，即使一些服务处于下线状态（例如，因为它们正在重新启动）或其他检查失败。'
- en: 'In this example, we are going to stop a service, wait for five minutes, and
    then start it again since this would actually create a Nagios failure in the majority
    of configurations. In fact, usually, Nagios is configured to accept up to two
    consecutive failures of a test (with usually one execution every minute), putting
    the service in a warning state before raising a critical state. We are going to
    create the `long_restart_service.yaml` file, which will trigger the Nagios critical
    state:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将会停止一个服务，等待五分钟，然后再次启动它，因为这实际上会导致在大多数配置中出现Nagios故障。事实上，通常情况下，Nagios被配置为接受最多两次连续的测试失败（通常每分钟执行一次测试），在提升为关键状态之前将服务置于警告状态。我们将创建名为`long_restart_service.yaml`的文件，这将触发Nagios关键状态：
- en: '[PRE21]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Run the code with the following command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令来执行代码：
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This should trigger a Nagios alert and result in the following output:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会触发Nagios警报，并导致以下输出：
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If no Nagios alert has been triggered, either your Nagios installation does
    not track that service or five minutes is not enough to make it raise a critical
    state. To check, you should get in contact to the person or the team that manages
    your Nagios installation, since Nagios allows full configuration to a point where
    it's very hard to predict how Nagios will behave without knowing its configuration.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有触发Nagios警报，那么可能是因为您的Nagios安装没有跟踪该服务，或者五分钟不足以使其提升为关键状态。要检查，请联系管理您Nagios安装的人员或团队，因为Nagios允许完全配置到一个非常难以预测Nagios行为的地步，而不知道其配置是很难的。
- en: 'We can now create a very similar playbook that will ensure that Nagios will
    not send any alerts. We are going to create a file called `long_restart_service_no_alert.yaml`
    with the following content (the full code is available on GitHub):'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个非常相似的playbook，以确保Nagios不会发送任何警报。我们将创建一个名为`long_restart_service_no_alert.yaml`的文件，其内容如下（完整代码可在GitHub上找到）：
- en: '[PRE24]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As you can see, we have added two tasks. The first is to inform Nagios not to
    send alerts for the HTTPd service on the given host, and the second is to inform
    Nagios to start sending alerts for the service again. Even if you do not specify
    the service and therefore all alerts on that host are silenced, my advice is to
    disable only the alert you are going to break so that Nagios is still able to
    work normally on the majority of your infrastructure.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，我们添加了两个任务。第一个任务是告诉Nagios不要发送有关给定主机上HTTPd服务的警报，第二个任务是告诉Nagios再次开始发送有关该服务的警报。即使您没有指定服务，因此静音了该主机上的所有警报，我的建议是仅禁用您将要中断的警报，以便Nagios仍然能够在大多数基础架构上正常工作。
- en: If the playbook run fails before reaching the re-enablement of the alerts, your
    alerts will stay *disabled*.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果playbook运行在恢复警报之前失败，你的警报将保持*禁用*状态。
- en: This module's goal is to toggle the Nagios alerts as well as schedule downtime,
    and from Ansible 2.2, this module can also unschedule downtimes.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块的目标是切换Nagios警报以及安排停机时间，从Ansible 2.2开始，该模块还可以取消安排的停机时间。
- en: 'Run the code with the following command:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令来运行代码：
- en: '[PRE25]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This should trigger a Nagios alert and result in the following output (the
    full code output is available on GitHub):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这将触发 Nagios 警报，并导致以下输出（完整的代码输出可在 GitHub 上获得）：
- en: '[PRE26]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: To use the Nagios module, you need to delegate the action to your Nagios server
    using the `delegate_to` parameter, as shown in the example.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Nagios 模块，您需要使用 `delegate_to` 参数将操作委托给 Nagios 服务器，如示例所示。
- en: Sometimes, what you want to achieve with a Nagios integration is exactly the
    opposite. In fact, you are not interested in muting it, but you want Nagios to
    handle your test results. A common case is if you want to leverage your Nagios
    configuration to notify your administrators of the output of a task. To do so,
    we can use the Nagios `nsca` utility, integrating it into our playbooks. Ansible
    does not yet have a specific module for managing it, but you can always run it
    using the command module, leveraging the `send_nsca` CLI program.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，与 Nagios 集成要实现的目标完全相反。事实上，你并不想把它静音，而是想让 Nagios 处理你的测试结果。一个常见的情况是，如果您想利用您的
    Nagios 配置通知您的管理员一个任务的输出。为此，我们可以使用 Nagios 的 `nsca` 工具，将其集成到我们的 playbook 中。Ansible
    还没有一个管理它的特定模块，但您可以使用命令模块来运行它，利用 `send_nsca` CLI 程序。
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how we can teach Ansible to send notifications
    to other systems and people. You learned to send notifications through a variety
    of systems, including email and messaging services, such as Slack. Finally, you
    learned how to prevent Nagios from sending unwanted notifications about system
    health during periods when you are operating it.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经学习了如何让 Ansible 发送通知到其他系统和人员。您学会了通过电子邮件和消息服务（如 Slack）发送通知的方法。最后，你学会了如何在你运行
    Nagios 时防止它发送关于系统健康状况的不必要通知。
- en: In the next chapter, we will learn how to create a module so that you can extend
    Ansible to perform any kind of task.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何创建一个模块，以便您可以扩展 Ansible 来执行任何类型的任务。
