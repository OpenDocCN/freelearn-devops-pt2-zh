- en: Logging and Monitoring
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志记录和监控
- en: 'This chapter will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Working with EFK
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用EFK
- en: Working with Google Stackdriver
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Google Stackdriver进行工作
- en: Monitoring master and node
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控主节点和节点
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Logging and monitoring are two of the most important tasks in Kubernetes. However,
    there are many ways to achieve logging and monitoring in Kubernetes, because there
    are a lot of logging and monitoring open source applications, as well as many
    public cloud services.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录和监控是Kubernetes中最重要的任务之一。然而，在Kubernetes中实现日志记录和监控有许多方法，因为有许多日志记录和监控开源应用程序，以及许多公共云服务。
- en: Kubernetes has a best practice for setting up a logging and monitoring infrastructure
    that most Kubernetes provisioning tools support as an add-on. In addition, managed
    Kubernetes services, such as Google Kubernetes Engine, integrate GCP log and a
    monitoring service out of the box.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes有一个最佳实践，用于设置大多数Kubernetes配置工具支持的日志记录和监控基础设施的附加组件。此外，托管的Kubernetes服务，如Google
    Kubernetes Engine，集成了GCP日志和监控服务。
- en: Let's set up a logging and monitoring service on your Kubernetes cluster.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在您的Kubernetes集群上设置日志记录和监控服务。
- en: Working with EFK
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用EFK
- en: In the Container world, log management always faces a technical difficulty,
    because Container has its own filesystem, and when Container is dead or evicted,
    the log files are gone. In addition, Kubernetes can easily scale out and scale
    down the Pods, so we need to care about a centralized log persistent mechanism.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器世界中，日志管理总是面临技术困难，因为容器有自己的文件系统，当容器死亡或被驱逐时，日志文件就会消失。此外，Kubernetes可以轻松地扩展和缩减Pods，因此我们需要关注一个集中式的日志持久化机制。
- en: Kubernetes has an add-on for setting up centralized log management, which is
    called EFK. EFK stands for **Elasticsearch**, **Fluentd**, and **Kibana**. These
    applications' stack bring you a full function of log collection, indexing, and
    UI.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes有一个用于设置集中式日志管理的附加组件，称为EFK。EFK代表**Elasticsearch**，**Fluentd**和**Kibana**。这些应用程序的堆栈为您提供了完整的日志收集、索引和UI功能。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: In [Chapter 1](4dd5324f-b753-4c80-b891-bd8e6013b2c1.xhtml), *Building Your Own
    Kubernetes Cluster*, we set up our Kubernetes cluster with several different provisioning
    tools. Based on your Kubernetes provisioning tool, there is an easy way to set
    up EFK stack. Note that Elasticsearch and Kibana are heavy-duty Java applications.
    They require at least 2 GB of memory each.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1章](4dd5324f-b753-4c80-b891-bd8e6013b2c1.xhtml)中，*构建您自己的Kubernetes集群*，我们使用了几种不同的配置工具来设置我们的Kubernetes集群。根据您的Kubernetes配置工具，有一种简单的方法可以设置EFK堆栈。请注意，Elasticsearch和Kibana是重型的Java应用程序。它们每个都需要至少2GB的内存。
- en: Therefore, if you use minikube, your machine should have at least 8 GB of memory
    (16 GB is recommended). If you use kubespray or kops to set up Kubernetes cluster,
    Kubernetes node should have at least 4 core CPUs and 16 GB of memory in total
    (in other words, if you have 2 nodes, each node should have a minimum of 2 core
    CPUs and 8GB of memory).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您使用minikube，您的计算机应至少有8GB的内存（建议使用16GB）。如果您使用kubespray或kops来设置Kubernetes集群，Kubernetes节点应至少具有总共4个核心CPU和16GB的内存（换句话说，如果您有2个节点，每个节点应至少具有2个核心CPU和8GB的内存）。
- en: 'In addition, in order to demonstrate how to gather the application logs efficiently,
    we create one additional namespace. It will help you to search your application
    log easily:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了演示如何有效地收集应用程序日志，我们创建了一个额外的命名空间。这将帮助您轻松搜索您的应用程序日志：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In this recipe, we will use the following Kubernetes provisioning tools to
    set up EFK stack. Based on your Kubernetes cluster, please read the appropriate
    section of this recipe:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用以下Kubernetes配置工具来设置EFK堆栈。根据您的Kubernetes集群，请阅读本配方的适当部分：
- en: minikube
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: minikube
- en: kubespray (ansible)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kubespray（ansible）
- en: kops
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kops
- en: Note that for GKE on the Google Cloud Platform, we will introduce another way
    to set up logging infrastructure in the next recipe.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在Google Cloud Platform上的GKE，我们将介绍另一种设置日志基础设施的方法。
- en: Setting up EFK with minikube
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用minikube设置EFK
- en: minikube provides an add-on feature for EFK out of the box, but it is disabled
    by default. So, you need to enable EFK on your minikube manually. EFK consumes
    a large amount of heap memory but minikube allocates only 2 GB by default, which
    is absolutely not sufficient to run the EFK stack in minikube. Therefore, we'll
    need to enlarge minikube's memory size explicitly.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: minikube提供了一个EFK的插件功能，但默认情况下是禁用的。因此，您需要手动在minikube上启用EFK。EFK消耗大量堆内存，但minikube默认只分配2GB，这绝对不足以在minikube中运行EFK堆栈。因此，我们需要显式地扩大minikube的内存大小。
- en: 'In addition, you should use the latest version of minikube, due to several
    bug fixes made for EFK while writing this cookbook. So, we are using minikube
    version 0.25.2\. Let''s configure minikube to enable EFK using the following steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您应该使用最新版本的minikube，因为在编写本教程时对EFK进行了几个错误修复。因此，我们使用minikube版本0.25.2。让我们按照以下步骤配置minikube以启用EFK：
- en: 'If you are already running `minikube`, stop `minikube` first:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经运行`minikube`，请先停止`minikube`：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update to the latest version of minikube:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新到最新版本的minikube：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Since EFK consumes a large amount of heap memory, start `minikube` with 5 GB
    of memory:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于EFK消耗大量堆内存，使用5GB内存启动`minikube`：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Make sure, all Pods in the kube-system Namespace are up, because EFK relies
    on `kube-addon-manager-minikube`:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保`kube-system`命名空间中的所有Pod都已启动，因为EFK依赖于`kube-addon-manager-minikube`：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Enable the `efk` add-on:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用`efk`插件：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Wait for a while; Elasticsearch, fluentd and kibana Pod have been deployed
    in the kube-system namespace automatically. Wait for the `STATUS `to become `Running`.
    It should take at least 10 minutes to complete:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待一段时间；Elasticsearch、fluentd和kibana Pod已经自动部署在`kube-system`命名空间中。等待`STATUS`变为`Running`。这至少需要10分钟才能完成：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Use `kubectl logs` to watch a kibana that waits for the state to become `green`.
    This also takes an additional five minutes:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl logs`来观察等待状态变为`green`的kibana。这还需要额外的五分钟：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Access the kibana service using the `minikube service` command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`minikube service`命令访问kibana服务：
- en: '[PRE8]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, you have access to the Kibana UI from your machine. You just need to set
    up an index. Since Fluentd keeps sending a log with the index name as `logstash-yyyy.mm.dd`,
    the index pattern is `logstash-*` by default. Click the Create button:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以从您的机器访问Kibana UI。您只需要设置一个索引。由于Fluentd保持发送一个以`logstash-yyyy.mm.dd`为索引名称的日志，索引模式默认为`logstash-*`。点击`Create`按钮：
- en: '![](assets/6221d481-761c-45c3-a8ad-82c7f7249adb.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6221d481-761c-45c3-a8ad-82c7f7249adb.png)'
- en: Setting up EFK with kubespray
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用kubespray设置EFK
- en: 'kubespray has a configuration concerning whether or not to enable EFK. By default,
    it is disabled, so you need to enable it with the following steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: kubespray有一个关于是否启用EFK的配置。默认情况下是禁用的，因此您需要按照以下步骤启用它：
- en: Open `<kubespray dir>/inventory/mycluster/group_vars/k8s-cluster.yaml`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`<kubespray dir>/inventory/mycluster/group_vars/k8s-cluster.yaml`。
- en: 'Around line number 152 in the `k8s-cluster.yml` file, change the value of  `efk_enabled` to
    `true`:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`k8s-cluster.yml`文件的第152行左右，将`efk_enabled`的值更改为`true`：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the `ansible-playbook` command to update your Kubernetes cluster:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`ansible-playbook`命令来更新您的Kubernetes集群：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Check to see if Elasticsearch, Fluentd, and Kibana Pod''s STATUS became Running
    or not; if you see the Pending state for more than 10 minutes, check `kubectl
    describe pod <Pod name>` to see the status. In most cases, you will get an error
    saying insufficient memory. If so, you need to add more Nodes or increase the
    available RAM:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查Elasticsearch、Fluentd和Kibana Pod的状态是否变为Running；如果看到超过10分钟的Pending状态，请检查`kubectl
    describe pod <Pod name>`以查看状态。在大多数情况下，您会收到一个错误，说`内存不足`。如果是这样，您需要添加更多的节点或增加可用的RAM：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Check the kibana log to see if the status has become `green`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查kibana日志，查看状态是否变为`green`：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run `kubectl cluster-info`, confirm Kibana is running, and capture the URL
    of Kibana:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`kubectl cluster-info`，确认Kibana正在运行，并捕获Kibana的URL：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In order to access the Kibana WebUI from your machine remotely, it is easier
    to use ssh port forwarding from your machine to the Kubernetes master:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了从远程机器访问Kibana WebUI，最好使用ssh端口转发从您的机器到Kubernetes主节点：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Access the Kibana WebUI from your machine using the following URL: `http://localhost:8080/api/v1/namespaces/kube-system/services/kibana-logging/proxy`.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下URL从您的机器访问Kibana WebUI：`http://localhost:8080/api/v1/namespaces/kube-system/services/kibana-logging/proxy`。
- en: 'Now you can access Kibana from your machine. You also need to configure the
    index. Just make sure the index name has `logstash-*` as the default value. Then,
    click the Create button:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以从您的机器访问Kibana。您还需要配置索引。只需确保索引名称的默认值为`logstash-*`。然后，点击`Create`按钮：
- en: '![](assets/280efe0d-f605-4867-9a01-356809c8b4d0.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/280efe0d-f605-4867-9a01-356809c8b4d0.png)'
- en: Setting up EFK with kops
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用kops设置EFK
- en: 'kops also has an add-on for setting up the EFK stack on your Kubernetes cluster
    easily. Proceed through the following steps to run EFK stack on your Kubernetes:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: kops还有一个用于在Kubernetes集群上轻松设置EFK堆栈的插件。按照以下步骤在Kubernetes上运行EFK堆栈：
- en: 'Run `kubectl create` to specify the kops EFK add-on:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`kubectl create`来指定kops EFK插件：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Wait for the `STATUS `of all Pods to become `Running`:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待所有Pod的`STATUS`变为`Running`：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Check Kibana''s log and wait until the state becomes `green`:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查Kibana的日志，并等待状态变为`green`：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Run `kubetl cluster-info` to capture the Kibana URL:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`kubetl cluster-info`来捕获Kibana的URL：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Use `kubectl proxy` to forward your machine to the Kubernetes API server:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl proxy`将您的机器转发到Kubernetes API服务器：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Access the Kibana WebUI from your machine using the following URL: `http://127.0.0.1:8080/api/v1/namespaces/kube-system/services/kibana-logging/proxy.
    Note that the IP address is 127.0.0.1, which is correct because we are using a
    kubectl proxy`.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下URL从您的机器访问Kibana WebUI：`http://127.0.0.1:8080/api/v1/namespaces/kube-system/services/kibana-logging/proxy`。请注意IP地址为127.0.0.1，这是正确的，因为我们正在使用kubectl代理。
- en: Now, you can start to use Kibana. Configure an index as described in the preceding
    minikube and kubespray sections.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以开始使用Kibana。按照前面的minikube和kubespray部分的描述配置索引。
- en: How it works...
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: As you can see, the installed Kibana versions are different based on the Kubernetes
    provisioning tool. But this cookbook explores the basic functions of Kibana. Therefore,
    there are no version-specific operations to worry about.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，根据Kubernetes配置工具，安装的Kibana版本是不同的。但是，本教程探讨了Kibana的基本功能。因此，无需担心特定于版本的操作。
- en: 'Let''s launch a sample application and then learn how to monitor your application
    log using Kibana:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们启动一个示例应用程序，然后学习如何使用Kibana监视应用程序日志：
- en: 'Prepare a sample application that keeps printing a `DateTime` and hello message
    to the `stdout`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备一个示例应用程序，该应用程序不断打印`DateTime`和hello消息到`stdout`：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a sample application in the `chap9` namespace:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chap9`命名空间中创建一个示例应用程序：
- en: '[PRE21]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Access the Kibana WebUI, then click the Discover tab:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问Kibana WebUI，然后点击Discover选项卡：
- en: 'Make sure the time range is `Last 15 minutes`, then type `kubernetes.namespace_name:
    chap9` in the search box and hit the *Enter* key:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '确保时间范围为“最近15分钟”，然后在搜索框中输入“kubernetes.namespace_name: chap9”，然后按下*Enter*键：'
- en: '![](assets/605953dd-4b60-4118-b5e1-8b43fd12b726.png)Searching the chap9 namespace
    log in 15 minutes'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/605953dd-4b60-4118-b5e1-8b43fd12b726.png)在15分钟内搜索chap9命名空间的日志'
- en: 'You can see all of the logs in the `chap9` namespaces as follows. The screenshot
    shows much more information than you might have expected. By clicking the add
    button for `kubernetes.host`, `kubernetes.pod_name`, and `log `will display only
    the fields necessary for this purpose:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以看到`chap9`命名空间中的所有日志如下。屏幕截图显示的信息比您预期的要多得多。通过点击`kubernetes.host`，`kubernetes.pod_name`和`log`的添加按钮，将仅显示此目的所需的字段：
- en: '![](assets/43d5f71f-eda4-47ca-a253-91abc698340c.png)Choosing log columns'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/43d5f71f-eda4-47ca-a253-91abc698340c.png)选择日志列'
- en: 'Now you can see a more simple log view for this application:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以看到这个应用程序的更简单的日志视图：
- en: '![](assets/640154f0-7bbe-4370-9d5c-617ca4a18e9a.png)Showing the final state
    of a customized Kibana view'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/640154f0-7bbe-4370-9d5c-617ca4a18e9a.png)显示自定义Kibana视图的最终状态'
- en: Congratulations! You now have have a centralized log management system in your
    Kubernetes cluster. You can observe the deployment of some Pods to see how you
    can see the application log.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您现在在您的Kubernetes集群中拥有了一个集中式日志管理系统。您可以观察一些Pod的部署，看看如何查看应用程序日志。
- en: There's more...
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The preceding EFK stack collects Pods' logs only, because Fluentd is monitoring
    `/var/log/containers/*` in the Kubernetes node host. It is good enough to monitor
    an application's behavior, but, as a Kubernetes administrator, you also need some
    Kubernetes system logs such as master and node logs.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的EFK堆栈只收集Pod的日志，因为Fluentd正在监视Kubernetes节点主机上的`/var/log/containers/*`。这已经足够监视应用程序的行为，但作为Kubernetes管理员，您还需要一些Kubernetes系统日志，如主节点和节点日志。
- en: There is an easy way to achieve Kubernetes system log management that integrates
    with the EFK stack; add a Kubernetes Event Exporter, which keeps monitoring a
    Kubernetes event. When the new event has occurred, send a log to Elasticsearch.
    So, you can monitor a Kubernetes event with Kibana as well.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个简单的方法可以实现与EFK堆栈集成的Kubernetes系统日志管理；添加一个Kubernetes事件导出器，它会持续监视Kubernetes事件。当发生新事件时，将日志发送到Elasticsearch。因此，您也可以使用Kibana监视Kubernetes事件。
- en: 'We have prepared an Eventer (Event Exporter) add-on ([https://raw.githubusercontent.com/kubernetes-cookbook/second-edition/master/chapter9/9-1/eventer.yml](https://raw.githubusercontent.com/kubernetes-cookbook/second-edition/master/chapter9/9-1/eventer.yml)).
    It is Heapster ([https://github.com/kubernetes/heapster](https://github.com/kubernetes/heapster)),
    based and expected to run on top of EFK add-ons. We can use this Eventer to monitor
    Kubernetes events through EFK:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备了一个Eventer（事件导出器）附加组件（[https://raw.githubusercontent.com/kubernetes-cookbook/second-edition/master/chapter9/9-1/eventer.yml](https://raw.githubusercontent.com/kubernetes-cookbook/second-edition/master/chapter9/9-1/eventer.yml)）。它是基于Heapster（[https://github.com/kubernetes/heapster](https://github.com/kubernetes/heapster)）的，并且预期在EFK附加组件之上运行。我们可以使用这个Eventer来通过EFK监视Kubernetes事件：
- en: Details of Heapster will be described in the next section—*Monitoring master
    and nodes*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Heapster的详细信息将在下一节“监控主节点和节点”中描述。
- en: 'Add eventer to your existing Kubernetes cluster:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将eventer添加到您现有的Kubernetes集群中：
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Make sure Eventer Pod''s `STATUS` is `Running`:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Eventer Pod的`STATUS`为`Running`：
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Use `kubectl logs` to keep observing Heapster and whether it can capture the
    event:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl logs`继续观察Heapster以及它是否能够捕获事件：
- en: '[PRE24]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'For testing purposes, open another terminal, and then create a `nginx` Pod:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出于测试目的，打开另一个终端，然后创建一个`nginx` Pod：
- en: '[PRE25]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Observe Heapster''s log; some new events have been captured:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察Heapster的日志；一些新事件已被捕获：
- en: '[PRE26]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Open Kibana and navigate to Settings | Indices| Add New. This will add a new
    index.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Kibana并导航到设置|索引|添加新内容。这将添加一个新索引。
- en: 'Put the Index name as `heapster-*`, set the time-field name as `Metadata.creationTimestamp`,
    and then click Create:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将索引名称设置为“heapster-*”，将时间字段名称设置为“Metadata.creationTimestamp”，然后单击“创建”：
- en: '![](assets/bcc5beb4-06a2-4c0a-82e5-ba0fb8277743.png)Configurring a Heapster
    index'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/bcc5beb4-06a2-4c0a-82e5-ba0fb8277743.png)配置Heapster索引'
- en: Go back to the Discover page, and then choose the `heapster-*` index from the
    left-hand panel.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回“发现”页面，然后从左侧面板中选择“heapster-*”索引。
- en: 'Select (click the Add button) Message, Source.component, and Source.host:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择（单击“添加”按钮）“Message”，“Source.component”和“Source.host”：
- en: '![](assets/339ef52f-785f-4797-a212-6dd019737602.png)Choosing the necessary
    columns'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/339ef52f-785f-4797-a212-6dd019737602.png)选择必要的列'
- en: 'Now you can see the Kubernetes system log, which shows the `nginx` Pod creation
    event as follows:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您可以看到Kubernetes系统日志，其中显示了“nginx” Pod的创建事件如下：
- en: '![](assets/4de710de-182a-4d4f-bf5f-8a0a58b488ec.png)Showing the final state
    of the system log view in Kibana'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/4de710de-182a-4d4f-bf5f-8a0a58b488ec.png)显示Kibana中系统日志视图的最终状态'
- en: Now you can monitor not only the application log, but also the Kubernetes system
    log in the EFK stack. Through switching indexes between either `logstash-*` (application
    log) or `heapster-*` (system log), you have a flexible log management environment.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您不仅可以监视应用程序日志，还可以在EFK堆栈中监视Kubernetes系统日志。通过在“logstash-*”（应用程序日志）或“heapster-*”（系统日志）之间切换索引，您可以获得灵活的日志管理环境。
- en: See also
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'In this cookbook, we learned how to enable the EFK stack for your Kubernetes
    cluster. Kibana is a powerful tool that you can use to create your own dashboard
    and keep checking the logs more efficiently. Please visit Kibana''s online documentation
    to understand how to use it:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们学习了如何为您的Kubernetes集群启用EFK堆栈。Kibana是一个强大的工具，您可以使用它创建自己的仪表板并更有效地检查日志。请访问Kibana的在线文档以了解如何使用它：
- en: Kibana User Guide Reference: [https://www.elastic.co/guide/en/kibana/index.html](https://www.elastic.co/guide/en/kibana/current/index.html)
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kibana用户指南参考：[https://www.elastic.co/guide/en/kibana/index.html](https://www.elastic.co/guide/en/kibana/current/index.html)
- en: Working with Google Stackdriver
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Google Stackdriver
- en: In [Chapter 7](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml), *Building Kubernetes
    on GCP*, we introduced GKE. It has an integrated logging mechanism, which is called
    Google Stackdriver. In this section, we will explore the integration between GKE
    and Stackdriver.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml)，“在GCP上构建Kubernetes”中，我们介绍了GKE。它具有集成的日志记录机制，称为Google
    Stackdriver。在本节中，我们将探索GKE和Stackdriver之间的集成。
- en: Getting ready
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: To use a Stackdriver, you just need a GCP account. If you have never used GCP,
    please go back and read [Chapter 7](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml),
    *Building Kubernetes on GCP*, to set up a GCP account and the `gcloud` command-line
    interface.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Stackdriver，您只需要一个GCP帐户。如果您从未使用过GCP，请返回并阅读[第7章](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml)，“在GCP上构建Kubernetes”，以设置GCP帐户和“gcloud”命令行界面。
- en: 'To use Stackdriver on GKE, no action is needed, because GKE uses Stackdriver
    as a logging platform by default. But if you want to explicitly enable Stackdriver,
    specify `--enable-cloud-logging` while launching your Kubernetes by using the `gcloud`
    command, as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要在GKE上使用Stackdriver，无需采取任何操作，因为GKE默认使用Stackdriver作为日志记录平台。但是，如果要显式启用Stackdriver，请在使用“gcloud”命令启动Kubernetes时指定“--enable-cloud-logging”，如下所示：
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If, for some reason, you have a GKE that doesn''t enable Stackdriver, you can
    use the `gcloud` command to enable it afterwards:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于某种原因，您的GKE未启用Stackdriver，您可以使用“gcloud”命令在之后启用它：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How to do it...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'In order to demonstrate Stackdriver with GKE, we will create one namespace
    on Kubernetes, then launch a sample Pod to see some logs on the Stackdriver, as
    shown in the following steps:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示GKE的Stackdriver，我们将在Kubernetes上创建一个命名空间，然后启动一个示例Pod以查看Stackdriver上的一些日志，如下所示：
- en: 'Create the `chap9` namespace:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`chap9`命名空间：
- en: '[PRE29]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Prepare a sample application Pod:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备一个示例应用程序Pod：
- en: '[PRE30]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Create the Pod on the `chap9` namespace:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chap9`命名空间上创建Pod：
- en: '[PRE31]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Access the GCP Web Console and navigate to Logging | Logs.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问GCP Web控制台，导航到Logging | Logs。
- en: 'Select Audited Resources | GKE Container | Your GKE cluster name (ex: my-gke)
    | chap9 namespace:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '选择Audited Resources | GKE Container | Your GKE cluster name (ex: my-gke) |
    chap9 namespace：'
- en: '![](assets/56cce8ab-6c3c-4e16-a08e-064c7457fe23.png)Selecting the chap9 namespace
    Pod log'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/56cce8ab-6c3c-4e16-a08e-064c7457fe23.png)选择chap9命名空间Pod日志'
- en: 'As an alternative way of accessing the `chap9` namespace log, you can select
    an advanced filter. Then, type the following criteria to the text field and click
    the Submit Filter button:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为访问`chap9`命名空间日志的另一种方式，您可以选择高级过滤器。 然后，将以下标准输入到文本字段中，然后单击Submit Filter按钮：
- en: '![](assets/4e824b79-9f07-4735-8829-7a16e421fa31.png)Using an advanced filter'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/4e824b79-9f07-4735-8829-7a16e421fa31.png)使用高级过滤器'
- en: '[PRE32]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![](assets/6443a266-ce69-4ce2-b263-14d382b44278.png)Input an advanced filter
    criterion'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/6443a266-ce69-4ce2-b263-14d382b44278.png)输入高级过滤器标准'
- en: 'Now, you can see the `myapp` log on Stackdriver:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以在Stackdriver上看到`myapp`日志：
- en: '![](assets/d7882e0f-0411-4fa5-ba69-a38cce0bc95f.png)Showing the chap9 Pod log
    in Stackdriver'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/d7882e0f-0411-4fa5-ba69-a38cce0bc95f.png)在Stackdriver中显示chap9 Pod日志'
- en: How it works...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Stackdriver has a basic functionality for narrowing down a date, severity,
    and keyword search. It helps to monitor an application''s behavior. How about
    system-level behavior, such as master and node activities? Stackdriver also supports
    searching of the system-level log. Actually, `fluentd` captures not only the application
    log, but the system log as well. By performing the following steps, you can see
    the system log in Stackdriver:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Stackdriver具有缩小日期、严重性和关键字搜索的基本功能。它有助于监视应用程序的行为。那么系统级行为呢，比如主节点活动？Stackdriver还支持系统级日志的搜索。实际上，`fluentd`不仅捕获应用程序日志，还捕获系统日志。通过执行以下步骤，您可以在Stackdriver中查看系统日志：
- en: 'Select GKE Cluster Operations | Your GKE name (for example, my-gke) | All location:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '选择GKE Cluster Operations | Your GKE name (例如，my-gke) | All location:'
- en: You should select All location instead of a particular location, because some
    Kubernetes operation logs do not contain location values. ![](assets/9c02d2bc-23bf-4707-be44-f29c62780a8c.png)Choosing
    a GKE system log in Stackdriver
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该选择All location而不是特定位置，因为某些Kubernetes操作日志不包含位置值。 ![](assets/9c02d2bc-23bf-4707-be44-f29c62780a8c.png)在Stackdriver中选择GKE系统日志
- en: 'As an alternative, input an advanced filter as follows:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为替代，输入以下高级过滤器：
- en: '[PRE33]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![](assets/2807ea60-99cc-4078-accf-f993e14c1c46.png)Showing a GKE system log
    in Stackdriver'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/2807ea60-99cc-4078-accf-f993e14c1c46.png)在Stackdriver中显示GKE系统日志'
- en: See also
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: In this recipe, we introduced Google Stackdriver. It is a built-in function
    of Google Kubernetes Engine. Stackdriver is a simple but powerful log management
    tool. In addition, Stackdriver is capable of monitoring the system status. You
    can make built-in or custom metrics to monitor and provide alerts regarding events
    as well. This will be described in the next recipe.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们介绍了Google Stackdriver。它是Google Kubernetes Engine的内置功能。Stackdriver是一个简单但功能强大的日志管理工具。此外，Stackdriver能够监视系统状态。您可以创建内置或自定义指标来监视并提供有关事件的警报。这将在下一个配方中描述。
- en: 'In addition, please read the following chapter to recap the basics of GCP and
    GKE:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请阅读以下章节以回顾GCP和GKE的基础知识：
- en: '[Chapter 7](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml), *Building Kubernetes
    on GCP*'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第7章](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml)，*在GCP上构建Kubernetes*'
- en: Monitoring master and node
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控主节点和节点
- en: During the journey of the previous recipes, you learned how to build your own
    cluster, run various resources, enjoy different usage scenarios, and even enhance
    cluster administration. Now, here comes a new level of perspective for your Kubernetes
    cluster. In this recipe, we are going to talk about monitoring. Through the monitoring
    tool, users will not only learn about the resource consumption of nodes, but also
    the Pods. This will help us to have greater efficiency as regards resource utilization.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的教程中，您学会了如何构建自己的集群，运行各种资源，享受不同的使用场景，甚至增强了集群管理。现在，您的Kubernetes集群将迎来一个新的视角。在这个教程中，我们将讨论监控。通过监控工具，用户不仅可以了解节点的资源消耗，还可以了解Pods的情况。这将帮助我们更有效地利用资源。
- en: Getting ready
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'As with earlier recipes, all you have to prepare is a healthy Kubernetes cluster.
    The following command, along with `kubectl`, will help you to verify the status
    of your Kubernetes system:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的教程一样，您只需准备一个健康的Kubernetes集群。以下命令和kubectl将帮助您验证Kubernetes系统的状态：
- en: '[PRE34]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: For demonstration later, we will deploy the monitoring system on a `minikube-booted`
    cluster. However, it works for any kind of well-installed clusters.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 为了后续演示，我们将在一个minikube-booted集群上部署监控系统。但是，它适用于任何类型的良好安装的集群。
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In this section, we will work on installing a monitoring system and introducing
    its dashboard. This monitoring system is based on *Heapster* ([https://github.com/kubernetes/heapster](https://github.com/kubernetes/heapster)),
    a resource usage collecting and analyzing tool. Heapster communicates with kubelet
    to get the resource usage of both machine and container. Along with Heapster,
    we have influxDB ([https://influxdata.com](https://influxdata.com)) for storage
    and Grafana ([http://grafana.org](http://grafana.org)) as the frontend dashboard,
    which visualizes the status of resources in several user-friendly plots:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何安装监控系统并介绍其仪表板。这个监控系统是基于Heapster（https://github.com/kubernetes/heapster）的，它是一个资源使用收集和分析工具。Heapster与kubelet通信，获取机器和容器的资源使用情况。除了Heapster，我们还有influxDB（https://influxdata.com）用于存储，以及Grafana（http://grafana.org）作为前端仪表板，可视化资源状态在几个用户友好的图表中。
- en: '![](assets/7e703755-eaf8-442f-a2b2-881dcecd6c4c.png)The interaction of monitoring
    components'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 监控组件的交互
- en: 'Heapster gathers information from **kubelet** on each node and provides data
    for other platforms. In our case, an influxDB is a sink for saving historical
    data. It is available for users to do further data analysis, such as the prediction
    of peak workload, and then make corresponding resource adjustments. We have Grafana
    working as an affable web console; users can manage monitoring status through
    the browser. Moreover, `kubectl` has the subcommand `top`, which provides the
    ability to grep cluster-wide information through Heapster:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Heapster从每个节点的kubelet收集信息，并为其他平台提供数据。在我们的情况下，influxDB是保存历史数据的汇聚点。用户可以进一步进行数据分析，比如预测高峰工作负载，然后进行相应的资源调整。我们有Grafana作为友好的Web控制台；用户可以通过浏览器管理监控状态。此外，kubectl有子命令top，可以通过Heapster获取整个集群的信息。
- en: '[PRE35]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This command turns out an error message.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令会出现错误消息。
- en: 'Installing a monitoring system could be much easier than anticipated. By applying
    configuration files from the open-source communities and companies, we can set
    up component monitoring on Kubernetes simply with the aid of a few commands:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 安装监控系统可能比预期的要容易得多。通过应用来自开源社区和公司的配置文件，我们可以借助几个命令在Kubernetes上简单地设置组件监控：
- en: '[PRE36]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: You could find that applying an online source is also feasible for creating
    Kubernetes applications.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现，应用在线资源也可以用于创建Kubernetes应用程序。
- en: How it works...
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'After you have installed influxDB, Heapster, and Grafana, let''s learn how
    to get the status of the resource. First, you may use `kubectl top` now. Check
    the utilization of nodes and Pods, as well as verifying the functionality of monitoring:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了influxDB、Heapster和Grafana之后，让我们学习如何获取资源的状态。首先，您现在可以使用`kubectl top`。检查节点和Pod的利用率，并验证监控功能的功能：
- en: '[PRE37]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Currently, `kubectl top` only covers nodes and Pods, and just shows their CPU
    and RAM usage.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`kubectl top`只涵盖节点和Pod，并显示它们的CPU和RAM使用情况。
- en: According to the output of `kubectl top`, what does the **m** mean in terms
    of the quantity of CPU usage? It means "milli", as in millisecond and millimeter.
    Millicpu is regarded as 10^(-3) CPU. For example, if the Heapster Pod uses 1 m
    CPU, it only takes 0.1% CPU computation power at this moment.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 根据`kubectl top`的输出，**m**在CPU使用量方面代表什么？它代表"毫"，如毫秒和毫米。 Millicpu被视为10^(-3) CPU。例如，如果Heapster
    Pod使用1 m CPU，那么它在这一刻只占用了0.1%的CPU计算能力。
- en: Introducing the Grafana dashboard
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Grafana仪表板
- en: 'Now, let''s take a look at the Grafana dashboard. In our case, for the minikube-booted
    cluster, we should open a proxy to enable accessibility from the localhost to
    the Kubernetes cluster:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看Grafana仪表板。在我们的情况下，对于minikube启动的集群，我们应该打开代理，以便从本地主机访问Kubernetes集群：
- en: '[PRE38]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'You may access Grafana through this URL: `http://localhost:8001/api/v1/namespaces/kube-system/services/monitoring-grafana/proxy/`.
    The magic that enables us to see the web page is made by the Kubernetes DNS server
    and proxy:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下URL访问Grafana：`http://localhost:8001/api/v1/namespaces/kube-system/services/monitoring-grafana/proxy/`。使我们能够看到网页的魔法是由Kubernetes
    DNS服务器和代理完成的：
- en: '**Accessing the Grafana dashboard in an anti-minikube Kubernetes**'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**在反minikube Kubernetes中访问Grafana仪表板**'
- en: 'To access Grafana through a browser, it depends on the network configuration
    of nodes and the Kubernetes service of Grafana. Follow these points for forwarding
    the web page to your client:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过浏览器访问Grafana，这取决于节点的网络配置和Grafana的Kubernetes服务。按照以下步骤将网页转发到您的客户端：
- en: '**Upgrade Grafana''s service type**: The configuration file we applied creates
    Grafana with a ClusterIP service. You should change it to `NodePort` or `LoadBalancer`
    for exposing Grafana to the outside world.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**升级Grafana的服务类型**：我们应用的配置文件创建了一个带有ClusterIP服务的Grafana。您应该将其更改为`NodePort`或`LoadBalancer`，以将Grafana暴露给外部世界。'
- en: '**Check firewalls**: Make sure your clients or load balancer are able to access
    your node of the cluster.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查防火墙**：确保您的客户端或负载均衡器能够访问集群的节点。'
- en: '**Dashboard access through the target port**: Instead of using a detailed URL,
    like we did on the minikube cluster, you can access Grafana with simple ones such
    as `NODE_ENTRYPOINT:3000` (Grafana requests port 3000 in the configuration file
    by default) or the entry point of the load balancer.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过目标端口访问仪表板**：与我们在minikube集群上所做的详细URL不同，您可以使用简单的URL访问Grafana，例如`NODE_ENTRYPOINT:3000`（Grafana默认在配置文件中请求端口3000）或负载均衡器的入口点。'
- en: '![](assets/9b62104d-22b6-43df-839f-f3dcf61859f6.png)The home page of Grafana'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/9b62104d-22b6-43df-839f-f3dcf61859f6.png)Grafana的主页'
- en: 'In the default settings of Grafana, we have two dashboards, **Cluster** and
    **Pods**. The **Cluster** board covers the nodes'' resource utilization, such
    as CPU, memory, network transaction, and storage. The **Pods** dashboard has similar
    plots for each Pod and you can check each container in a Pod:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在Grafana的默认设置中，我们有两个仪表板，**Cluster**和**Pods**。**Cluster**仪表板涵盖了节点的资源利用情况，如CPU、内存、网络事务和存储。**Pods**仪表板为每个Pod提供了类似的图表，您可以检查Pod中的每个容器：
- en: '![](assets/e1bda91b-4fb6-4da5-804f-a586ce2eaf50.png)Viewing the Pod kube-dns
    by Pod dashboard'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/e1bda91b-4fb6-4da5-804f-a586ce2eaf50.png)通过Pod仪表板查看Pod kube-dns'
- en: As the preceding screenshot show, for example, we can observe the CPU utilization
    of individual containers in the Pod `kube-dns` in the namespace `kube-system`,
    which is the cluster of the DNS server. You can find that there are three containers
    in this Pod, `kubedns`, `dnsmasq`, and `sidecar`, and the lines in the plot express
    the limit, request, and real usage of CPU for containers respectively.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的截图所示，例如，我们可以观察`kube-system`命名空间中`kube-dns` Pod中各个容器的CPU利用率，这是DNS服务器的集群。您可以发现这个Pod中有三个容器，`kubedns`，`dnsmasq`和`sidecar`，图中的线分别表示容器的CPU限制、请求和实际使用情况。
- en: Creating a new metric to monitor Pod
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的指标来监控Pod
- en: 'For a running application, metrics are the data we can collect and use to analyze
    its behavior and performance. Metrics can come from the system side, such as the
    usage of CPU, or be based on the functionality of an application, such as the
    request frequency of certain functions. There are several metrics for monitoring
    offered by Heapster ([https://github.com/kubernetes/heapster/blob/master/docs/storage-schema.md](https://github.com/kubernetes/heapster/blob/master/docs/storage-schema.md)).
    We are going to show you how to create a customized panel by yourself. Please
    take the following steps as a reference:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对于正在运行的应用程序，指标是我们可以收集和用来分析其行为和性能的数据。指标可以来自系统方面，比如CPU的使用，也可以基于应用程序的功能，比如某些功能的请求频率。Heapster提供了几个用于监控的指标（[https://github.com/kubernetes/heapster/blob/master/docs/storage-schema.md](https://github.com/kubernetes/heapster/blob/master/docs/storage-schema.md)）。我们将向您展示如何自己创建一个定制面板。请参考以下步骤：
- en: 'Go to the dashboard of Pod, and drag the web page to the bottom. There is a
    button called ADD ROW; click it to add a metric. Then, choose the first category
    Graph as a new panel for expressing this metric:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入Pod的仪表板，将网页拖动到底部。有一个名为“添加行”的按钮；点击它以添加一个指标。然后，选择第一个类别图形作为表达这个指标的新面板：
- en: '![](assets/988cdb9a-61da-4fb4-993c-1dfbbd44ff19.png)Adding a new metric with
    graph expression'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/988cdb9a-61da-4fb4-993c-1dfbbd44ff19.png)使用图表表达添加新的指标'
- en: 'An empty panel block appears. Go ahead and click on it for further configuration.
    Just choose Edit when the editing block shows up right after you pick the panel:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出现一个空的面板块。继续点击它进行进一步配置。当您选择面板后，编辑块出现时，只需选择编辑：
- en: '![](assets/261dae87-d0cc-437e-822d-5dc45d76c76b.png)Starting to edit a panel'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/261dae87-d0cc-437e-822d-5dc45d76c76b.png)开始编辑一个面板'
- en: 'First, give your panel a name. For example, `CPU Rate`. We would like to create
    one showing the rate of CPU utilization:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，给你的面板起一个名字。例如，`CPU利用率`。我们想要创建一个显示CPU利用率的面板：
- en: '![](assets/5d8b175c-f7cb-4d2f-b640-6e133b8f8ddd.png)Giving the panel a title
    on the "General" page'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/5d8b175c-f7cb-4d2f-b640-6e133b8f8ddd.png)在“常规”页面上给面板一个标题'
- en: 'Set up the following parameters for specific data querying. Take the following
    screenshot as reference:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置以下参数以进行特定数据查询。参考以下截图：
- en: 'FROM: `cpu/usage_rate`'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'FROM: `cpu/usage_rate`'
- en: 'WHERE: `type = pod_container`'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'WHERE: `type = pod_container`'
- en: 'AND: `namespace_name=$namespace, pod_name=$podname value`'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'AND: `namespace_name=$namespace, pod_name=$podname value`'
- en: 'GROUP BY: `tag(container_name)`'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'GROUP BY: `tag(container_name)`'
- en: 'ALIAS BY: `$tag_container_name`'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ALIAS BY: `$tag_container_name`'
- en: '![](assets/fef0d5dc-9c4c-4942-b895-c4a5a663f7fa.png)Parameters of data querying
    for CPU-rate metric'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/fef0d5dc-9c4c-4942-b895-c4a5a663f7fa.png)CPU利用率指标的数据查询参数'
- en: 'Does any line of status show up? If not, modifying the configuration in the
    display page will help you build the best looking graph for you. Make the Null
    value connected and you will find lines showing out:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否有任何状态线显示？如果没有，修改显示页面中的配置将帮助您构建最好看的图表。使空值连接，您将发现线条显示出来：
- en: '![](assets/f3a38ac6-cf33-48ea-b24d-63f864e5b62a.png)Editing the look of your
    metric. Checking the null value to be "connected" for showing the lines'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/f3a38ac6-cf33-48ea-b24d-63f864e5b62a.png)编辑您的指标外观。检查空值是否为“连接”以显示线条'
- en: Here you go! Feel free to close the edit mode. You now have a new metric for
    every Pod.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就是这样！随意关闭编辑模式。现在您为每个Pod都有了一个新的指标。
- en: Just try to discover more functionality of the Grafana dashboard and the Heapster
    monitoring tool. You will obtain further details about your system, services,
    and containers through the information from the monitoring system.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试发现Grafana仪表板和Heapster监控工具的更多功能。通过监控系统的信息，您将获得有关系统、服务和容器的进一步细节。
- en: There's more...
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We built up a monitoring system based on Heapster, which is maintained by the
    Kubernetes group. Yet, several tools and platforms focusing on container cluster
    have sprung up to support the community, such as Prometheus ([https://prometheus.io](https://prometheus.io)).
    On the other hand, public clouds may have run daemons on VM for grabbing the metrics
    by default, and provided services for corresponding actions. We don't have to
    build one within the cluster. Next, we are going to introduce the monitoring method
    on AWS and GCP. You may wish to check [C*hapter 6*](b7e1d803-52d0-493b-9123-5848da3fa9ec.xhtml),
    *Building Kubernetes on AWS*, and [C*hapter 7*](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml),
    *Building Kubernetes on GCP*, to build a cluster and learn more concepts.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建立了一个基于Heapster的监控系统，由Kubernetes小组维护。然而，一些专注于容器集群的工具和平台已经涌现出来，以支持社区，比如Prometheus
    ([https://prometheus.io](https://prometheus.io))。另一方面，公共云可能会在VM上运行守护程序来默认抓取指标，并提供相应的服务。我们不必在集群内构建一个。接下来，我们将介绍在AWS和GCP上的监控方法。您可能希望查看[C*hapter
    6*](b7e1d803-52d0-493b-9123-5848da3fa9ec.xhtml)，*在AWS上构建Kubernetes*，和[C*hapter
    7*](dfc46490-f109-4f07-ba76-1a381b006d76.xhtml)，*在GCP上构建Kubernetes*，以构建一个集群并了解更多概念。
- en: Monitoring your Kubernetes cluster on AWS
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS上监控您的Kubernetes集群
- en: 'While working on AWS, we usually rely on AWS CloudWatch([https://aws.amazon.com/cloudwatch/](https://aws.amazon.com/cloudwatch/))
    for monitoring. You can create a dashboard, and pick up any basic metrics you
    want. CloudWatch already collects a bunch of metrics for you:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS上工作时，我们通常依赖AWS CloudWatch([https://aws.amazon.com/cloudwatch/](https://aws.amazon.com/cloudwatch/))进行监控。您可以创建一个仪表板，并选择任何您想要的基本指标。CloudWatch已经为您收集了大量的指标：
- en: '![](assets/74f9230e-9818-4dc3-95e8-453cf4ea2bad.png)Create a new metric with
    AWS CloudWatch'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/74f9230e-9818-4dc3-95e8-453cf4ea2bad.png)使用AWS CloudWatch创建一个新的指标'
- en: But, for the resource of Kubernetes, such as Pods, customized metrics for them
    need to be sent out to CloudWatch with manual configuration. With a kops installation,
    it is recommended that you build your monitoring system with Heapster or Prometheus.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，对于Kubernetes的资源，比如Pods，需要通过手动配置将它们的自定义指标发送到CloudWatch。使用kops安装时，建议您使用Heapster或Prometheus构建您的监控系统。
- en: AWS has its own container cluster service, Amazon ECS. This may be the reason
    why AWS didn't support Kubernetes deeply and we have to build clusters through
    kops and terraform, along with other add-on services. Nevertheless, according
    to recent news, there will be a new service called **Amazon Elastic Container
    Service for Kubernetes** (**Amazon EKS**). We can look forward to the integration
    of Kubernetes and other AWS services.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: AWS有自己的容器集群服务，Amazon ECS。这可能是AWS没有深度支持Kubernetes的原因，我们必须通过kops和terraform构建集群，以及其他附加服务。然而，根据最近的消息，将会有一个名为**Amazon
    Elastic Container Service for Kubernetes** (**Amazon EKS**)的新服务。我们可以期待Kubernetes与其他AWS服务的集成。
- en: Monitoring your Kubernetes cluster on GCP
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GCP上监控您的Kubernetes集群
- en: 'Before we look at the monitoring platform of GCP, the nodes of GKE cluster
    should admit being scanned for any applied status:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看GCP的监控平台之前，GKE集群的节点应该承认被扫描以获取任何应用状态：
- en: '[PRE39]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '*Google Stackdriver* provides system monitoring in a hybrid cloud environment.
    Besides its own GCP, it can also cover your computing resources on AWS. To access
    its web console, you can find its section under the menu on the left-hand side.
    There are multiple service categories in Stackdriver. Select Monitoring to check
    related functionality.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '*Google Stackdriver*在混合云环境中提供系统监控。除了其自己的GCP，它还可以覆盖您在AWS上的计算资源。要访问其Web控制台，您可以在左侧菜单中找到其部分。Stackdriver中有多个服务类别。选择监控以检查相关功能。'
- en: 'As a new user, you will get a 30-day free trial. The initial configuration
    is simple; just enable an account and bind your project. You may avoid the agent
    installation and AWS account setup since we simply want to check the GKE cluster.
    Once you log in to Stackdriver successfully, click Resources on the left-side
    panel and choose Kubernetes Engine under infrastructure type:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 作为新用户，您将获得30天的免费试用。初始配置很简单；只需启用一个帐户并绑定您的项目。由于我们只是想检查GKE集群，您可以避免安装代理和设置AWS帐户。成功登录Stackdriver后，点击左侧面板上的资源，然后选择基础设施类型下的Kubernetes
    Engine。
- en: '![](assets/4f113195-bb4d-4420-976a-93ac659c547a.png)Main page for GKE on Strackdriver
    monitoring'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/4f113195-bb4d-4420-976a-93ac659c547a.png)GKE on Strackdriver监控的主页'
- en: 'There are several metrics set up already for computing resources from node
    to container. Take your time exploring and check the official introduction for
    more features: [https://cloud.google.com/kubernetes-engine/docs/how-to/monitoring](https://cloud.google.com/kubernetes-engine/docs/how-to/monitoring).'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 已经为从节点到容器的计算资源设置了多个指标。花些时间探索并查看官方介绍以获取更多功能：[https://cloud.google.com/kubernetes-engine/docs/how-to/monitoring](https://cloud.google.com/kubernetes-engine/docs/how-to/monitoring)。
- en: See also
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'This recipe showed you how to monitor your machines in the Kubernetes system.
    However, it is wise to study the recipes of the main components and daemons. You
    can get more ideas about working processes and resource usage. Moreover, since
    we have worked with several services to build our monitoring system, reviewing
    recipes about the Kubernetes services again will give you a clear idea about how
    you can build up this monitoring system:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱向您展示了如何监控Kubernetes系统中的机器。然而，研究主要组件和守护程序的食谱是明智的。您可以更多地了解工作流程和资源使用情况。此外，由于我们已经使用了几项服务来构建我们的监控系统，再次审查有关Kubernetes服务的食谱将让您清楚地了解如何构建这个监控系统：
- en: The *Exploring Architecture* recipe in [Chapter 1](1a0d884d-59d3-4f67-adee-2d2e37030132.xhtml),
    *Building Your Own Kubernetes Cluster*
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](1a0d884d-59d3-4f67-adee-2d2e37030132.xhtml)中的*探索架构*食谱，*构建您自己的Kubernetes集群*'
- en: The *Working with Services* recipe in [Chapter 2](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml),
    *Walking through Kubernetes Concepts*
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](e9a51674-078b-4ffc-a76c-98774150bfa3.xhtml)中的*使用服务*食谱，*深入了解Kubernetes概念*'
- en: 'Kubernetes is a project that keeps moving forward and upgrading apace. The
    recommended way to catch up is to check out new features on its official website:
    [http://kubernetes.io](http://kubernetes.io). Also, you can always get new Kubernetes
    versions on GitHub at [https://github.com/kubernetes/kubernetes/releases](https://github.com/kubernetes/kubernetes/releases).
    Keeping your Kubernetes system up to date, and learning new features practically,
    is the best method for accessing Kubernetes technology continuously.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes是一个不断向前发展和升级的项目。跟进的推荐方法是在其官方网站上查看新功能：[http://kubernetes.io](http://kubernetes.io)。此外，您还可以在GitHub上获取新的Kubernetes版本：[https://github.com/kubernetes/kubernetes/releases](https://github.com/kubernetes/kubernetes/releases)。保持您的Kubernetes系统最新，并实际学习新功能，是持续访问Kubernetes技术的最佳方法。
