- en: Chapter 7. Extending Jenkins Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。扩展Jenkins插件
- en: 'For Jenkins plugin development so far, we have looked at the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看过Jenkins插件开发的以下内容：
- en: The approach to take—reuse where possible, avoiding unnecessary duplication
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采取的方法-在可能的情况下重用，避免不必要的重复
- en: Collaborating—how both the process and the community work
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协作-过程和社区如何工作
- en: Design methodologies and Java patterns used
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用的设计方法和Java模式
- en: Setting up the development environment and build tools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开发环境和构建工具
- en: Developing the first simple plugin
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发第一个简单的插件
- en: Deploying and testing our plugins locally and remotely
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地和远程部署和测试我们的插件
- en: We will now take a look at the ways to help you sort out that missing middle
    part from the previous chapter and implement the code that enables your plugin
    to do what it does… whatever that may be!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将看一下帮助您解决上一章缺失的中间部分并实现使您的插件能够做任何事情的方法！
- en: The intention here is to walk you through the development of your own plugin
    and demonstrate the ways in which you can (and should) approach the (re)use of
    the resources that are already out there.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的意图是引导您开发自己的插件，并演示您可以（并且应该）如何处理已经存在的资源的（再）使用的方式。
- en: This means that when you come up with an idea for your own plugin and want to
    develop it, you will be able to do so as quickly and easily as possible by following
    best practices and by avoiding the addition of unnecessary duplication to the
    Jenkins and plugin code base.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当您想要开发自己的插件并且想要尽可能快速和轻松地进行开发时，您可以通过遵循最佳实践并避免向Jenkins和插件代码库添加不必要的重复来实现这一点。
- en: While doing this, we will also explore some of the additional frameworks and
    technologies used by and available to Jenkins plugins. These include Jelly, Stapler,
    localization, and internationalization; when used together, these tools and practices
    enable plugin developers to reuse the Jenkins built-in functionality in order
    to make their plugins look like they "belong" to Jenkins, rather than something
    that has been simply added on, by maintaining the same look and feel as the rest
    of the user interface.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在此过程中，我们还将探索Jenkins插件使用的一些额外框架和技术。这些包括Jelly、Stapler、本地化和国际化；当这些工具和实践一起使用时，能够使插件开发人员重用Jenkins内置功能，使他们的插件看起来像是“属于”Jenkins，而不是简单地添加上去的东西，通过保持与用户界面的其他部分相同的外观和感觉。
- en: Following this approach of getting yourself started and knowing how to use these
    frameworks will save you a lot of time and frustration. Once you know how to go
    about researching and reusing the code and functionality that's already provided
    by the existing plugins and Jenkins, you will save yourself a lot of development
    work as well.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这种方法，开始并了解如何使用这些框架将为您节省大量时间和挫折。一旦您知道如何研究和重用现有插件和Jenkins提供的代码和功能，您也将节省大量的开发工作。
- en: While working on the `Hello World` plugin, we covered quite a lot of new information
    and introduced some new concepts. This was all done at a pretty high level and
    with minimum coding and configuration so that we could maintain focus on the overall
    process and learn how things work. The actual code was about as simple as you
    can get for a plugin; all it did was write a message to the console log every
    time the build was run.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发“Hello World”插件时，我们涵盖了大量新信息并引入了一些新概念。这些都是在相当高的层次上完成的，并且最小化了编码和配置，以便我们可以专注于整个过程并了解事物的运作方式。实际的代码非常简单，对于一个插件来说，它只是在每次运行构建时向控制台日志中写入一条消息。
- en: As you're no doubt aware, Jenkins plugins have been created to perform all kinds
    of tasks, and they do so in a wide variety of ways—some of them integrate seamlessly
    with the Jenkins user interface, while others work away mostly unseen in the background.
    Some extend existing functionalities and others add entirely new functions. Plugins
    seem to be cohesive—they all have roughly the same look and feel, rather than
    appear to have been developed by different people, who had their own ideas about
    color schemes, navigation, dialogs, and so on. They are even able to respond to
    locale changes to provide dialogs in different languages depending on user-specified
    preferences. While much of Jenkins functionality comes from a large number of
    plugins, many of which have been assimilated into the core of Jenkins, the impression
    and user experience is that of a quite slick and cohesive whole, rather than a
    collection of fragmented and disparate additions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，Jenkins插件已被创建用于执行各种任务，并且它们以各种方式执行这些任务-有些与Jenkins用户界面无缝集成，而其他一些在背景中默默工作。有些扩展了现有功能，而其他一些添加了全新的功能。插件似乎是一致的-它们大致具有相同的外观和感觉，而不是看起来像是由不同的人开发的，他们对颜色方案、导航、对话框等有自己的想法。它们甚至能够响应区域设置的更改，根据用户指定的首选项以不同语言提供对话框。尽管Jenkins的许多功能来自大量插件，其中许多已经被吸收到Jenkins的核心中，但印象和用户体验是一个相当流畅和一致的整体，而不是一个碎片化和不一致的添加集合。
- en: In this chapter, we will take a look at the other elements that go into Jenkins
    plugins, and expand the ways in which you can flesh out your own plugin. We will
    also look at how to go about finding and reusing existing code/plugins to get
    you started quickly, and we will walk through the contents of a plugin that offers
    features similar to a hypothetical new plugin that we would like to start developing.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看一下进入Jenkins插件的其他元素，并扩展您可以完善自己的插件的方式。我们还将看一下如何查找和重用现有的代码/插件以便快速开始，并且我们将浏览一个提供类似于我们想要开始开发的假设新插件的功能的插件的内容。
- en: Where to start?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从哪里开始？
- en: So, after checking the Jenkins site and the community, we have decided to write
    a new plugin, as nothing out there (or currently in the works) will do whatever
    it is we want; where do we start?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在查看了Jenkins网站和社区之后，我们决定编写一个新的插件，因为目前没有任何现成的（或者正在开发中的）插件能够满足我们的需求；我们应该从哪里开始呢？
- en: We could start off with a new blank Eclipse project and write everything ourselves
    if we really wanted to, but that would take ages.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从一个新的空白Eclipse项目开始，如果我们真的想的话，可以自己写所有的东西，但那将需要很长时间。
- en: We could use the skeleton `Hello World` project, delete what is in there, and
    start adding our code to that, but this doesn't sound like the sort of approach
    we'd expect to follow, given all the code reuse and avoidance of duplication we've
    been talking about for a while now.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用骨架`Hello World`项目，删除其中的内容，然后开始向其中添加我们的代码，但考虑到我们已经讨论了一段时间的代码重用和避免重复，这似乎不是我们期望遵循的方法。
- en: Even if you have a completely novel idea for a plugin, there is bound to be
    something roughly related to it out there already; even if this doesn't provide
    the functionality that we want, it may work in a similar way or use many of the
    same extension points that we have identified as being of interest to us, so it's
    worth checking this out.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您对插件有一个完全新颖的想法，也肯定已经有与之大致相关的东西存在；即使这并不能提供我们想要的功能，它可能以类似的方式工作或使用我们已经确定的许多感兴趣的扩展点，因此值得检查一下。
- en: Looking at the list of existing plugins
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看现有插件列表
- en: Usually, the first place to look at is the list of available plugins. If your
    Jenkins instance is up to date, you can browse through the currently available
    options in your Jenkins **Available plugins** page.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，查看的第一个地方是可用插件的列表。如果您的Jenkins实例是最新的，您可以在Jenkins的**可用插件**页面中浏览当前可用的选项。
- en: Go to **Manage Jenkins**, then select **Manage Plugins**, and select the **Available**
    tab for an ever-growing list of plugins to choose from.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 转到**管理Jenkins**，然后选择**管理插件**，并选择**可用**选项卡，以选择越来越多的插件列表。
- en: Note that this screen allows you to filter by specific words and provides a
    brief description of each plugin.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此屏幕允许您按特定单词进行过滤，并提供每个插件的简要描述。
- en: 'Alternatively, the Jenkins **Plugins** page provides an easier-to-browse and
    slightly more detailed listing:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，Jenkins的**插件**页面提供了一个更容易浏览和稍微更详细的列表：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Plugins](https://wiki.jenkins-ci.org/display/JENKINS/Plugins)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Plugins](https://wiki.jenkins-ci.org/display/JENKINS/Plugins)'
- en: This lists the plugins grouped by their general category or function and also
    hosts links to the corresponding Jenkins home page for each plugin. In turn, the
    home page provides further information that includes links to the source code
    for that plugin on GitHub, which you can browse online or download locally.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将按其一般类别或功能对插件进行分组，并提供到每个插件相应Jenkins主页的链接。反过来，主页提供了更多信息，包括指向GitHub上该插件的源代码的链接，您可以在线浏览或本地下载。
- en: If you are able to find something similar to your plugin here, then going through
    the source code on GitHub will enable you to see how each plugin works in detail.
    You will also be able to find out what extension points this plugin uses.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您能在这里找到与您的插件类似的东西，那么在GitHub上查看源代码将使您能够详细了解每个插件的工作原理。您还将能够找出此插件使用了哪些扩展点。
- en: 'Another option to consider is going straight to the **Extension points** index
    page here:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个要考虑的选项是直接转到这里的**扩展点**索引页面：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Extension+points](https://wiki.jenkins-ci.org/display/JENKINS/Extension+points)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Extension+points](https://wiki.jenkins-ci.org/display/JENKINS/Extension+points)'
- en: 'This list is automatically generated and maintained by the **Extension Indexer**
    program, which is available at:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此列表是由**Extension Indexer**程序自动生成和维护的，该程序可在以下位置找到：
- en: '[https://github.com/jenkinsci/backend-extension-indexer](https://github.com/jenkinsci/backend-extension-indexer)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/jenkinsci/backend-extension-indexer](https://github.com/jenkinsci/backend-extension-indexer)'
- en: This program parses the current code base for all the declared extension points
    and then lists them on the **Extension points** page that it generates, along
    with further details such as the project home page and a list of the plugins that
    use them.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序解析当前代码库中声明的所有扩展点，然后在生成的**扩展点**页面上列出它们，以及诸如项目主页和使用它们的插件列表等进一步的细节。
- en: Whichever starting point works for you, the list of plugins or the list of extension
    points, you should hopefully end up at the same place—with an idea of something
    roughly similar to what you want to end up with, which should be a good place
    to get you started.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪个起点适合您，插件列表还是扩展点列表，您都应该希望最终到达同一个地方——大致类似于您想要最终得到的东西的想法，这应该是一个很好的开始。
- en: 'For example, if my plugin was connected to Docker, I could start searching
    through the list of existing plugins from here on my local Jenkins:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我的插件与Docker连接，我可以从本地Jenkins的现有插件列表开始搜索：
- en: '![Looking at the list of existing plugins](../images/00051.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![查看现有插件列表](../images/00051.jpeg)'
- en: 'Alternatively, I could go to [https://wiki.jenkins-ci.org/display/JENKINS/Extension+points](https://wiki.jenkins-ci.org/display/JENKINS/Extension+points),
    and search for Docker references here:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我可以转到[https://wiki.jenkins-ci.org/display/JENKINS/Extension+points](https://wiki.jenkins-ci.org/display/JENKINS/Extension+points)，并在这里搜索Docker的引用：
- en: '![Looking at the list of existing plugins](../images/00052.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![查看现有插件列表](../images/00052.jpeg)'
- en: 'Both of these routes eventually lead to the home page of the plugin in question,
    for example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这两条路最终都会导致所讨论的插件的主页，例如：
- en: '![Looking at the list of existing plugins](../images/00053.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![查看现有插件列表](../images/00053.jpeg)'
- en: This tells you everything that you need to know about the plugin and includes
    a link to the source code and configuration files for this plugin that are hosted
    on GitHub.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉您关于插件的一切，包括指向托管在GitHub上的此插件的源代码和配置文件的链接。
- en: To illustrate the rest of the process and introduce the other frameworks and
    files that you may want to use, we will think of a new plugin that we'd like to
    start developing. We will try to find something that already exists, use it to
    get us started, and then look at the code, configuration files, and extension
    points that will be used to get us to the point where we can start adding our
    own code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明其余的过程并介绍其他你可能想要使用的框架和文件，我们将考虑一个我们想要开始开发的新插件。我们将尝试找到一个已经存在的东西，用它来开始，然后查看代码、配置文件和扩展点，以便让我们达到可以开始添加我们自己的代码的地步。
- en: A new build type required
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要一个新的构建类型
- en: For this hypothetical example, I'm going to start off by creating a new build
    step for Docker builds. This would allow the user to create a build of this type,
    add in some information, and then eventually do something with it along the lines
    of a Docker build.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个假设的例子，我将首先创建一个用于Docker构建的新构建步骤。这将允许用户创建这种类型的构建，添加一些信息，然后最终执行与Docker构建类似的操作。
- en: 'Where you normally have options to add build steps of these types (with the
    addition of our **Say hello world** example):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在通常添加构建步骤的选项中（加上我们的**打印Hello World**示例）：
- en: '![A new build type required](../images/00054.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![需要一个新的构建类型](../images/00054.jpeg)'
- en: This amazing new plugin-to-be will add an additional entry to kick off a Docker
    Build.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个令人惊奇的新插件将添加一个额外的条目来启动Docker构建。
- en: By looking through similar projects that add additional build steps and from
    the `Hello World` example, I can guess that my new plugin will also want to extend
    the `Builder`, `BuildStep`, and `AbstractProject` classes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看添加额外构建步骤的类似项目和**Hello World**示例，我猜想我的新插件也需要扩展`Builder`、`BuildStep`和`AbstractProject`类。
- en: 'After looking through the links and resources previously listed, I can see
    that there is an existing Graven Plugin project that performs very similar steps
    to what we are after and also just happens to include all of the new resources
    that we wanted to examine in this chapter. Plus, it''s got some handy documentation
    here:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看之前列出的链接和资源之后，我发现有一个现有的Graven插件项目，执行的步骤与我们想要的非常相似，而且恰好包括了我们想要在本章中检查的所有新资源。另外，这里还有一些方便的文档：
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Create+a+new+Plugin+with+a+custom+build+Step](https://wiki.jenkins-ci.org/display/JENKINS/Create+a+new+Plugin+with+a+custom+build+Step)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Create+a+new+Plugin+with+a+custom+build+Step](https://wiki.jenkins-ci.org/display/JENKINS/Create+a+new+Plugin+with+a+custom+build+Step)'
- en: 'Let''s take a look at it. The source code can be downloaded from GitHub here
    and then extracted to a local directory:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下。源代码可以从GitHub下载，然后提取到本地目录：
- en: '[https://github.com/jenkinsci/graven-plugin](https://github.com/jenkinsci/graven-plugin)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/jenkinsci/graven-plugin](https://github.com/jenkinsci/graven-plugin)'
- en: This gives us everything we need to get started on our own plugin, which should
    make things much easier than starting from scratch—we can examine and reuse the
    extension points used here to see how the plugin goes about creating a new build
    type, and adjusts the properties files and other resources, as they perform the
    same steps that we want to do.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们开始自己的插件所需的一切，这比从头开始要容易得多——我们可以检查和重用这里使用的扩展点，看看插件是如何创建新的构建类型，并调整属性文件和其他资源的，因为它执行了我们想要做的相同步骤。
- en: Loading and building our starting point
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载和构建我们的起点
- en: 'Let''s import this project in to Eclipse. Again, the process is quite simple;
    as we did in the previous chapter, we will make a directory for our Eclipse Project,
    use `cd` to enter into the directory containing our project''s POM file, and then
    run the `eclipse:configure-workspace` goal again, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这个项目导入到Eclipse中。同样，这个过程非常简单；就像我们在上一章中所做的那样，我们将为我们的Eclipse项目创建一个目录，使用`cd`进入包含我们项目的POM文件的目录，然后再次运行`eclipse:configure-workspace`目标，如下所示：
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This should download all the dependencies and allow you to import the project
    to your IDE (navigate to **File** | **Import** | **General** | **Existing Projects
    in to Workspace**), in the same way as we did in the previous chapter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该下载所有的依赖项，并允许你将项目导入到你的IDE中（导航到**文件** | **导入** | **常规** | **导入现有项目到工作区**），就像我们在上一章中所做的那样。
- en: 'You should now have all the resources and source code, which constitutes this
    plugin, loaded in to your IDE, and it should look roughly like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该已经将这个插件的所有资源和源代码加载到你的IDE中，它应该大致看起来像这样：
- en: '![Loading and building our starting point](../images/00055.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![加载和构建我们的起点](../images/00055.jpeg)'
- en: We will now take a quick look through these files and file types, explain their
    functions, and explore the additional plugin components and options they provide
    for this plugin, and could potentially bring to our new plugin.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将快速浏览这些文件和文件类型，解释它们的功能，并探索它们为这个插件提供的附加插件组件和选项，以及它们可能为我们的新插件带来的潜在功能。
- en: The Builder class and Stapler
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建器类和Stapler
- en: 'The first class is `GravenBuilder.java`. The class declares that it extends
    the `Builder` class:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个类是`GravenBuilder.java`。该类声明扩展了`Builder`类：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As we can see in the JavaDoc at [http://javadoc.jenkins-ci.org/hudson/tasks/Builder.html](http://javadoc.jenkins-ci.org/hudson/tasks/Builder.html),
    extending the `Builder` class will register this class with Jenkins as a **custom
    builder**, which is what we are after.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[http://javadoc.jenkins-ci.org/hudson/tasks/Builder.html](http://javadoc.jenkins-ci.org/hudson/tasks/Builder.html)的JavaDoc中所看到的，扩展`Builder`类将把这个类注册为Jenkins的**自定义构建器**，这正是我们想要的。
- en: Tip
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: This extension declaration is how the **Extension point** page is updated—the
    program that builds the index will find this reference in the code and automatically
    create the association for us.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个扩展声明是**扩展点**页面如何更新的——构建索引的程序将在代码中找到这个引用，并自动为我们创建关联。
- en: 'The `GravenBuilder` class also contains this simple method:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`GravenBuilder`类还包含这个简单的方法：'
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Through the use of the `@DataBoundConstructor` annotation, this method will
    register the selection of this task/build type when the user decides to create
    this new build type. This is done automatically via the Stapler framework, which
    Jenkins uses to serialize and convert Java objects. You can find out more about
    Stapler, how it works, and how to make use of it in your plugins here:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`@DataBoundConstructor`注解，当用户决定创建此新的构建类型时，此方法将注册此任务/构建类型的选择。这是通过Jenkins使用的Stapler框架自动完成的，该框架用于序列化和转换Java对象。您可以在此处了解有关Stapler的更多信息，它的工作原理以及如何在插件中使用它。
- en: '[http://stapler.kohsuke.org/what-is.html](http://stapler.kohsuke.org/what-is.html)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://stapler.kohsuke.org/what-is.html](http://stapler.kohsuke.org/what-is.html)'
- en: Also, in the `GravenBuilder` class, there is an inner class named `Descriptor`.
    This extends `BuildStepDescriptor`, and its function is to provide a way for Jenkins
    to manage instances of `GravenBuilder` and their lifecycles.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在`GravenBuilder`类中，有一个名为`Descriptor`的内部类。这个类扩展了`BuildStepDescriptor`，其功能是为Jenkins提供一种管理`GravenBuilder`实例及其生命周期的方式。
- en: The `GravenInstallation` class contains all the required installation and registration
    settings; this sets the tool tips and defines the display name to be used for
    this plugin, and so on.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`GravenInstallation`类包含所有必需的安装和注册设置；这些设置工具提示并定义了用于此插件的显示名称等。'
- en: Jelly and Jenkins
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jelly和Jenkins
- en: 'The `config.jelly` configuration file is a simple Jelly template. You can find
    out more about Jelly in Jenkins in the following link:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`config.jelly`配置文件是一个简单的Jelly模板。您可以在以下链接中了解有关Jenkins中Jelly的更多信息：'
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Basic+guide+to+Jelly+usage+in+Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Basic+guide+to+Jelly+usage+in+Jenkins)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Basic+guide+to+Jelly+usage+in+Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Basic+guide+to+Jelly+usage+in+Jenkins)'
- en: 'You can read more about Jelly, in general, here at [http://commons.apache.org/proper/commons-jelly/](http://commons.apache.org/proper/commons-jelly/).
    This article states the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://commons.apache.org/proper/commons-jelly/](http://commons.apache.org/proper/commons-jelly/)中了解更多关于Jelly的一般信息。这篇文章陈述了以下内容：
- en: '*Jelly is a Java and XML based scripting and processing engine.*'
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*Jelly是基于Java和XML的脚本和处理引擎。*'
- en: The main purpose of Jelly in this context is to provide developers with a highly
    flexible tag library through which they can quickly and easily create and handle
    UI view changes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，Jelly的主要目的是为开发人员提供一个高度灵活的标签库，通过它们可以快速轻松地创建和处理UI视图更改。
- en: From a developer point of view, Jelly files interact with Java code to get and
    set declared values at runtime and presents them to the user via the UI.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发者的角度来看，Jelly文件与Java代码交互，以在运行时获取和设置声明的值，并通过UI呈现给用户。
- en: Help
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帮助
- en: The `help*.html` files provide context-sensitive help messages to the user.
    These messages are simply defined within the `<div>` tags and will be displayed
    as standard-looking tooltips within the Jenkins user interface. This approach
    allows you to guide your user, advise them on what they can and can't do, and
    explain what your plugin does and requires.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`help*.html`文件为用户提供上下文相关的帮助消息。这些消息只是在`<div>`标签内定义，并将显示为Jenkins用户界面中的标准工具提示。这种方法允许您引导用户，建议他们可以做什么，不能做什么，并解释您的插件的功能和要求。'
- en: The `index.jelly` file provides the user with a general high-level description
    of what this plugin does—we will see this text being displayed as the plugin description
    in Jenkins when we look at the plugin in action later on.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.jelly`文件为用户提供了关于此插件功能的一般高级描述——当我们在Jenkins中查看插件运行时，我们将看到这段文本显示为插件描述。'
- en: Properties files and Messages
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性文件和消息
- en: 'The `Messages.properties` and `config_fr.properties` files are there to provide
    users with i18n internationalization, as described here:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`Messages.properties`和`config_fr.properties`文件用于提供i18n国际化，如下所述：'
- en: '[https://wiki.jenkins-ci.org/display/JENKINS/Internationalization](https://wiki.jenkins-ci.org/display/JENKINS/Internationalization)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.jenkins-ci.org/display/JENKINS/Internationalization](https://wiki.jenkins-ci.org/display/JENKINS/Internationalization)'
- en: 'There is some more detail on localization and internationalization at this
    link:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在此链接中有关本地化和国际化的更多详细信息：
- en: '[http://www.w3.org/International/questions/qa-i18n](http://www.w3.org/International/questions/qa-i18n)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.w3.org/International/questions/qa-i18n](http://www.w3.org/International/questions/qa-i18n)'
- en: In Jenkins plugin development, all we really need to do is provide `config_LOCALE.properties`
    files to cater to each language. For example, if the user's `LOCALE` variable
    is set to `fr`, the messages in the `config_fr.properties` file will be used—other
    `LOCALE` files can be added as desired to support other languages.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jenkins插件开发中，我们实际上只需要提供`config_LOCALE.properties`文件来满足每种语言。例如，如果用户的`LOCALE`变量设置为`fr`，则将使用`config_fr.properties`文件中的消息——其他`LOCALE`文件可以根据需要添加以支持其他语言。
- en: 'Your plugin code is able to use and refer to the properties at runtime, as
    follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 您的插件代码能够在运行时使用和引用这些属性，如下所示：
- en: '[PRE3]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `Messages.java` class in the target directory is generated at build time,
    based on these properties files.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`Messages.java`类在目标目录中是根据这些属性文件在构建时生成的。'
- en: The POM file
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POM文件
- en: The last remaining file, `pom.xml`, is the Maven settings file that we have
    looked at before. This one is particular to the plugin we are using here and contains
    the group, artifact, and version information that will be used to build, run,
    and package the project, which we will do now.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最后剩下的文件`pom.xml`是我们之前看过的Maven设置文件。这个文件特定于我们在此处使用的插件，并包含将用于构建、运行和打包项目的组、artifact和版本信息，我们现在将执行这些操作。
- en: Right-clicking on the `pom.xml` file and selecting **Run as** and then **Maven
    Build…** allows you to specify the `hpi:run` goal again, which should start up
    a new local instance of Jenkins with this plugin compiled and deployed to this
    new instance, along with all of the resources and localization settings the plugin
    contains.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击`pom.xml`文件，然后选择**Run as**，然后**Maven Build...**允许您再次指定`hpi:run`目标，这应该会启动一个新的本地Jenkins实例，其中包含了这个插件编译和部署到这个新实例的所有资源和本地化设置。
- en: When the instance starts up, we can connect via a browser and see the various
    settings and code that we have reviewed in theory being used in practice.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当实例启动时，我们可以通过浏览器连接并查看我们在理论上审查过的各种设置和代码在实践中被使用。
- en: 'We can check and see that the plugin is listed as installed, along with the
    message text, which is picked up from `index.jelly`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以检查并查看插件是否被列为已安装，以及消息文本，这些消息文本是从`index.jelly`中提取的：
- en: '![The POM file](../images/00056.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![POM文件](../images/00056.jpeg)'
- en: 'When we create a new Freestyle job and take a look at the available **Build**
    steps that we could add, this plugin will be displayed as a new option—**execute
    GRaveN task**, which has been picked up from **Messages.properties**:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个新的自由风格作业并查看可用的**构建**步骤时，这个插件将显示为一个新选项——**执行GRaveN任务**，这是从**Messages.properties**中提取的：
- en: '![The POM file](../images/00057.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![POM文件](../images/00057.jpeg)'
- en: 'When we select this option, we will be presented with the dialogs, localized
    tool tips, and input boxes that were defined in the configuration and code we
    just reviewed:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们选择这个选项时，我们将看到在配置和代码中定义的对话框、本地化工具提示和输入框：
- en: '![The POM file](../images/00058.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![POM文件](../images/00058.jpeg)'
- en: This example plugin looks like a good starting point for our hypothetical one.
    It may not do everything that we want to do, but we can adjust and reuse the settings
    files and some of the code and extension points it uses to get us started, and
    we can have the basics of our own plugin up and running very quickly.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例插件看起来像是我们假想插件的一个很好的起点。它可能不能做我们想做的一切，但我们可以调整和重用设置文件和一些代码以及扩展点，让我们开始，并且可以很快地运行我们自己的插件的基本功能。
- en: The implementation of this hypothetical plugin, or your own plugin, may well
    have different needs when you get down to the details, but hopefully, this will
    illustrate the approaches and routes you could follow to get your plugin up and
    running quickly.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个假想插件的实现，或者你自己的插件，在细节上可能有不同的需求，但希望这能说明你可以遵循的方法和途径，让你快速启动你的插件。
- en: If you ever want to find out how a plugin works, or how to change a plugin,
    or fix a bug in a plugin, knowing your way around the various resource files and
    how to load and run any locally based plugin by starting off with its source code
    is a very useful skill.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解一个插件是如何工作的，或者如何改变一个插件，或者修复一个插件中的错误，了解各种资源文件的使用方法，并通过从源代码开始加载和运行任何本地插件是一项非常有用的技能。
- en: Plugin progress
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件进展
- en: We searched and identified something that did roughly what we wanted to do,
    at least to start off with. We have identified extension points that provide some
    of the functionalities that we are after, and we have the beginnings of a pretty
    fully-featured plugin that will look and feel like a normal part of Jenkins. It
    will provide the user with inbuilt help and will even speak the user's preferred
    language… so long as we add the corresponding config files.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们搜索并找到了大致符合我们想要做的事情的东西，至少起步阶段是这样。我们已经确定了提供我们需要的一些功能的扩展点，并且我们已经有了一个功能非常齐全的插件的雏形，它看起来和感觉像Jenkins的一个正常部分。它将为用户提供内置的帮助，甚至会说用户偏好的语言...只要我们添加相应的配置文件。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The next steps for this plugin would be to implement more of our own code, to
    perform the Docker build, or whatever functions we want to perform. Again, this
    functionality could take further advantage of the available extension points,
    or if there are none available that will do what we want, we should consider declaring
    their interfaces and sharing them with the community after coding our own implementation.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件的下一步将是实现更多我们自己的代码，执行Docker构建，或者我们想要执行的任何功能。再次，这个功能可以进一步利用可用的扩展点，或者如果没有可用的扩展点可以做我们想要的事情，我们应该考虑声明它们的接口，并在编写自己的实现后与社区分享。
- en: In the next chapter, we will explore the tools, options, and resources available
    for testing our plugins. We will also look further into debugging as we explore
    how to approach, resolve, and avoid issues with plugins.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨测试插件的工具、选项和资源。当我们探讨如何处理、解决和避免插件问题时，我们还将进一步深入调试。
