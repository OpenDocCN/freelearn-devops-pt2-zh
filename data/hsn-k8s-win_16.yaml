- en: Development Workflow with Kubernetes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kubernetes的开发工作流程
- en: Let's face it—Kubernetes application development is not simple. In the previous
    chapters, we have been mainly focusing on the cluster provisioning and operations
    side of Kubernetes, which has its own complexities. As a software developer working
    with Kubernetes on Windows, you will have quite different challenges. In fact,
    you may need to switch your design approach to cloud-first, cloud-native, Kubernetes-first,
    or another modern approach. You have seen that Kubernetes is good at handling
    Windows applications that were never meant to be hosted in a container at design
    time, but to fully use the power of Kubernetes, you have to reverse this dependency
    and start thinking about Kubernetes as the center of the design and your development
    environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们面对现实吧——Kubernetes应用程序开发并不简单。在前几章中，我们主要关注了Kubernetes的集群供应和运营方面，这本身就有其复杂性。作为在Windows上使用Kubernetes的软件开发人员，您将面临完全不同的挑战。事实上，您可能需要调整设计方法，采用云优先、云原生、Kubernetes优先或其他现代方法。您已经看到，Kubernetes擅长处理从未设计时就意味着要在容器中托管的Windows应用程序，但要充分利用Kubernetes的功能，您必须扭转这种依赖关系，开始将Kubernetes视为设计的中心和开发环境。
- en: In this chapter, we will demonstrate a few popular tools that you can use in
    your development workflow on Windows, starting with basic integrations for Visual
    Studio 2019 and Visual Studio Code, and ending with advanced snapshot debugging
    using Azure Application Insights. You will also learn how to use Helm (version
    3) for creating redistributable packages for your Kubernetes application. And
    as a cherry on top, we will introduce Azure Dev Spaces, which greatly simplifies
    Kubernetes development for the whole team.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将演示一些流行的工具，您可以在Windows上的开发工作流程中使用，从Visual Studio 2019和Visual Studio Code的基本集成开始，到使用Azure
    Application Insights进行高级快照调试结束。您还将学习如何使用Helm（版本3）为您的Kubernetes应用程序创建可再分发的软件包。最后，我们将介绍Azure
    Dev Spaces，它极大地简化了整个团队的Kubernetes开发。
- en: 'This chapter will focus on the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点讨论以下主题：
- en: Using developer tooling with Kubernetes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Kubernetes的开发工具
- en: Packaging applications using Helm
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Helm打包应用程序
- en: Debugging containerized applications using Azure Application Insights
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Azure Application Insights调试容器化应用程序
- en: Using the Kubernetes dashboard
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Kubernetes仪表板
- en: Working on microservices in a team using Azure Dev Spaces
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Azure Dev Spaces团队中的微服务开发
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您将需要以下内容：
- en: Windows 10 Pro, Enterprise, or Education (version 1903 or later; 64-bit) installed.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已安装Windows 10 Pro、Enterprise或Education（1903版或更高版本；64位）。
- en: Microsoft Visual Studio 2019 Community (or any other edition) if you want to
    edit the source code for the application and debug it. Please note that, for the
    Snapshot Debugger feature, you need the Enterprise edition.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio 2019 Community（或任何其他版本），如果您想编辑应用程序的源代码并对其进行调试。请注意，对于快照调试器功能，您需要企业版。
- en: Microsoft Visual Studio Code, if you want to manage Kubernetes clusters using
    a graphical interface.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio Code，如果您想使用图形界面管理Kubernetes集群。
- en: The Chocolatey package manager for Windows ([https://chocolatey.org/](https://chocolatey.org/)).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows的Chocolatey软件包管理器（[https://chocolatey.org/](https://chocolatey.org/)）。
- en: An Azure account.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure账户。
- en: A Windows/Linux Kubernetes cluster deployed using the **Azure Kubernetes Service **(**AKS**) engine,
    ready to deploy the Voting application from the previous chapters.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Azure Kubernetes Service（AKS）引擎部署的Windows/Linux Kubernetes集群，准备部署前几章中的投票应用程序。
- en: Using the Chocolatey package manager is not mandatory, but it makes the installation
    process and application version management much easier. The installation process
    is documented at [https://chocolatey.org/install](https://chocolatey.org/install).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Chocolatey软件包管理器并非强制性，但它可以使安装过程和应用程序版本管理变得更加容易。安装过程在[https://chocolatey.org/install](https://chocolatey.org/install)中有文档记录。
- en: To follow along, you will need your own Azure account in order to create Azure
    resources for the Kubernetes cluster. If you haven't already created the account
    for the previous chapters, you can read more about how to obtain a limited free
    account for personal use at [https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随操作，您需要自己的Azure帐户以创建Kubernetes集群的Azure资源。如果您尚未为之前的章节创建帐户，您可以阅读有关如何获取个人使用的有限免费帐户的更多信息，网址为[https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/)。
- en: Deploying a Kubernetes cluster using the AKS engine has been covered in [Chapter
    8](ab695a0d-05dc-48f8-8c41-bbd167cfbfa6.xhtml), *Deploying a Hybrid Azure Kubernetes
    Service Engine Clu**ster*. The deployment of the Voting application to Kubernetes
    has been covered in [Chapter 10](4e5931bc-4267-4631-a5fe-bc140827257d.xhtml), *Deploying
    Microsoft SQL Server 2019 and ASP.NET MVC Application*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用AKS引擎部署Kubernetes集群已在[第8章](ab695a0d-05dc-48f8-8c41-bbd167cfbfa6.xhtml)中进行了介绍，*部署混合Azure
    Kubernetes服务引擎集群*。将Voting应用程序部署到Kubernetes已在[第10章](4e5931bc-4267-4631-a5fe-bc140827257d.xhtml)中进行了介绍，*部署Microsoft
    SQL Server 2019和ASP.NET MVC应用程序*。
- en: You can download the latest code samples for this book chapter from the official
    *GitHub* repository at [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从官方*GitHub*存储库中下载本书章节的最新代码示例，网址为[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12)。
- en: Using developer tooling with Kubernetes
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kubernetes的开发工具
- en: In your everyday development of .NET applications on Windows, you will most
    likely use Visual Studio 2019 or Visual Studio Code. In this section, we will
    show you how to install additional extensions for Kubernetes that allow you to
    bootstrap applications for container orchestrators.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上日常开发.NET应用程序时，您很可能会使用Visual Studio 2019或Visual Studio Code。在本节中，我们将向您展示如何安装用于Kubernetes的附加扩展，以便为容器编排器引导应用程序。
- en: Support for managing Windows containers in Kubernetes is currently very limited
    in Visual Studio 2019 and Visual Studio Code. You will not be able to use most
    of the features, such as integration with Azure Dev Spaces, although this is likely
    to change in the future. In the case of .NET Core, you can develop on Windows
    and rely on Linux Docker images.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 2019和Visual Studio Code目前对在Kubernetes中管理Windows容器的支持非常有限。您将无法使用大多数功能，例如与Azure
    Dev Spaces集成，尽管这可能会在未来发生变化。在.NET Core的情况下，您可以在Windows上开发并依赖于Linux Docker镜像。
- en: First, let's take a look at how you can enable Kubernetes support for Visual
    Studio 2019.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看如何在Visual Studio 2019中启用Kubernetes支持。
- en: Visual Studio 2019
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio 2019
- en: The latest version of Visual Studio comes with a predefined Azure development workloadthat
    you can easily install from the Visual Studio Installer application directly.
    You do not need to install any additional extensions in order to have Kubernetes
    support in Visual Studio.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最新版本的Visual Studio带有预定义的Azure开发工作负载，您可以直接从Visual Studio安装程序应用程序轻松安装。您无需安装任何其他扩展即可在Visual
    Studio中获得Kubernetes支持。
- en: If you have used Visual Studio Tools for Kubernetes (now deprecated) in the
    previous editions of Visual Studio, then you can expect a similar functionality
    in the Azure development workload in the latest version of Visual Studio.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前在Visual Studio的早期版本中使用过Visual Studio Tools for Kubernetes（现已弃用），那么您可以在最新版本的Visual
    Studio的Azure开发工作负载中期望类似的功能。
- en: 'To install an Azure development workload, please go through the following steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Azure开发工作负载，请按照以下步骤操作：
- en: In the start menu for Windows, search for the Visual Studio Installer application.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Windows的开始菜单中，搜索Visual Studio Installer应用程序。
- en: Select your version of Visual Studio, click More, and select Modify.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的Visual Studio版本，点击更多，然后选择修改。
- en: 'Select Azure development and accept the changes by clicking Modify:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Azure开发并通过点击修改来接受更改：
- en: '![](assets/3b8a6b8d-896c-4139-a5e6-890ef713949c.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3b8a6b8d-896c-4139-a5e6-890ef713949c.png)'
- en: Wait for the installation to finish and launch Visual Studio.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待安装完成并启动Visual Studio。
- en: 'Now, you can create new projects for the type container application for Kubernetes,
    which uses the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以为Kubernetes的容器应用程序创建新项目，其中包括以下内容：
- en: '*ASP.NET* Core'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ASP.NET* Core'
- en: Helm charts for packaging
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于打包的Helm图表
- en: Azure Dev Spaces for fast iterative development on AKS
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于在AKS上进行快速迭代开发的Azure Dev Spaces
- en: 'It is also possible to add Kubernetes/Helm support for an existing ASP.NET
    Core:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以为现有的ASP.NET Core添加Kubernetes/Helm支持：
- en: Right-click on the project in Solution Explorer.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中右键单击项目。
- en: Navigate to Add | Container Orchestrator Support
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到添加|容器编排器支持
- en: Choose Kubernetes/Helm.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Kubernetes/Helm。
- en: Unfortunately, Visual Studio 2019 currently has limited features for managing
    Kubernetes clusters. Alternatively, you can use Visual Studio Code for this task.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Visual Studio 2019目前对于管理Kubernetes集群的功能有限。作为替代，您可以使用Visual Studio Code来完成这项任务。
- en: Visual Studio Code
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: 'For Visual Studio Code you can use two *official* extensions from Microsoft:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Visual Studio Code，您可以使用微软提供的两个*官方*扩展：
- en: '**Kubernetes** **(**`ms-kubernetes-tools.vscode-kubernetes-tools`**)**: Enables
    you to explore Kubernetes clusters in the tree view, manage Kubernetes objects,
    and provide IntelliSense for editing manifest files and Helm charts.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes** **(**`ms-kubernetes-tools.vscode-kubernetes-tools`**)**：使您能够在树视图中探索Kubernetes集群，管理Kubernetes对象，并为编辑清单文件和Helm图表提供智能感知。'
- en: '**Azure Dev Spaces (**`azuredevspaces.azds`**)**: Enables Azure Dev Spaces
    integration, similar to what you have in Visual Studio 2019.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Dev Spaces (**`azuredevspaces.azds`**)**：启用Azure Dev Spaces集成，类似于您在Visual
    Studio 2019中的功能。'
- en: 'To install these two extensions, open Visual Studio Code and go through the
    following steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装这两个扩展，打开Visual Studio Code并按照以下步骤操作：
- en: Open the Extensions panel (*Ctrl *+ *Shift *+ *X*).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开扩展面板（*Ctrl*+*Shift*+*X*）。
- en: Search for Kubernetes in Marketplace.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Marketplace中搜索Kubernetes。
- en: Click Install.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击安装。
- en: Repeat the same for Azure Dev Spaces.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复相同步骤以安装Azure Dev Spaces。
- en: In the right menu, you can now use the Kubernetes panel, which automatically
    loads your kubeconfig. This extension is especially great for working with workspaces
    containing manifest files, as you get autocompletion, YAML syntax highlighting,
    and validation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧菜单中，您现在可以使用Kubernetes面板，它会自动加载您的kubeconfig。这个扩展特别适用于处理包含清单文件的工作空间，因为您会得到自动完成、YAML语法高亮显示和验证。
- en: 'You can manage your cluster from the tree view or by using commands (*Ctrl *+ *Shift *+ *P*)—this
    can be used instead of executing `kubectl` commands in PowerShell. For example,
    you can follow logs for your container:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从树视图或使用命令（*Ctrl*+*Shift*+*P*）来管理您的集群——这可以代替在PowerShell中执行`kubectl`命令。例如，您可以查看容器的日志：
- en: '![](assets/29d93186-f70d-493f-b6f0-14feb40a227f.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/29d93186-f70d-493f-b6f0-14feb40a227f.png)'
- en: Visual Studio Code is currently the most useful and advanced tool you can use
    in Windows for working with Kubernetes and Helm. In the next section, we will
    show how you can use Helm for packaging applications.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code目前是Windows中用于处理Kubernetes和Helm的最有用和最先进的工具。 在下一节中，我们将展示如何使用Helm打包应用程序。
- en: Packaging applications using Helm
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Helm打包应用程序
- en: Applications need packaging for easy redistribution and dependency management.
    In Windows, you can use Chocolatey, in Ubuntu you can use **APT **(short for Advanced
    Package Tool), and for Kubernetes you can use Helm as a package manager([https://v3.helm.sh/](https://v3.helm.sh/)).
    There are a couple of alternatives, such as Kustomize (which comes with native
    support in `kubectl`) and Kapitan, but, in general, Helm is currently regarded
    as the industry standard, with the largest official repository of Helm charts
    ([https://github.com/helm/charts](https://github.com/helm/charts)).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序需要打包以便轻松重新分发和管理依赖关系。 在Windows中，您可以使用Chocolatey，在Ubuntu中，您可以使用**APT**（Advanced
    Package Tool的缩写），而对于Kubernetes，您可以使用Helm作为包管理器（[https://v3.helm.sh/](https://v3.helm.sh/)）。
    还有一些替代方案，比如Kustomize（它在`kubectl`中具有本机支持）和Kapitan，但总的来说，Helm目前被认为是行业标准，拥有最大的Helm图表官方存储库（[https://github.com/helm/charts](https://github.com/helm/charts)）。
- en: 'The main use cases for Helm are as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Helm的主要用例如下：
- en: Deploying popular software to your Kubernetes cluster. Packages are distributed
    as Helm charts.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将流行软件部署到您的Kubernetes集群。 软件包以Helm图表的形式分发。
- en: Sharing your own applications as Helm charts. This can include packaging a product
    for consumption by the end users or using Helm as an internal package and dependency
    manager for microservices in your system.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享您自己的应用程序作为Helm图表。 这可以包括为最终用户打包产品或将Helm用作系统中微服务的内部包和依赖项管理器。
- en: Ensuring that the applications receive proper upgrades, including dependency
    management.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保应用程序获得适当的升级，包括依赖关系管理。
- en: Configuring software deployments for your needs. Helm charts are basically generic
    **Yet Another Markup Language** (**YAML**) parametrized templates for Kubernetes
    manifests. Helm uses Go templates ([https://godoc.org/text/template](https://godoc.org/text/template))
    for parametrization. If you are familiar with Go then you will be at home; if
    not, then you will find it pretty similar to other templating systems, such as Mustache.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的需求配置软件部署。 Helm图表基本上是Kubernetes清单的通用**另一种标记语言**（**YAML**）参数化模板。 Helm使用Go模板（[https://godoc.org/text/template](https://godoc.org/text/template)）进行参数化。
    如果您熟悉Go，那么您会感到很亲切； 如果不熟悉，那么您会发现它与其他模板系统非常相似，比如Mustache。
- en: Please note that the architecture of Helm has drastically changed with the recent
    release of version 3.0.0.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Helm的架构在最近发布的3.0.0版本中发生了 drastical 变化。
- en: Previously, Helm required a dedicated service deployed on Kubernetes called
    Tiller, which was responsible for actual communication with Kubernetes API. This
    has caused various problems, including security and RBAC (short for Role-Based
    Access Control) issues. As of Helm 3.0.0, Tiller is no longer needed and chart
    management is done by the client. You can read more about the differences between
    older Helm versions in the official FAQ at [https://helm.sh/docs/faq/#changes-since-helm-2](https://helm.sh/docs/faq/#changes-since-helm-2).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，Helm需要在Kubernetes上部署一个名为Tiller的专用服务，负责与Kubernetes API的实际通信。 这引发了各种问题，包括安全性和RBAC（Role-Based
    Access Control的缩写）问题。 从Helm 3.0.0开始，不再需要Tiller，图表管理由客户端完成。 您可以在官方FAQ中阅读有关旧版Helm版本之间的区别的更多信息[https://helm.sh/docs/faq/#changes-since-helm-2](https://helm.sh/docs/faq/#changes-since-helm-2)。
- en: Helm is distributed as a client (library) with a CLI similar to kubectl. All
    operations in Helm can be performed using the client now. Let's install Helm on
    your Windows machine.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Helm被分发为一个带有类似kubectl的CLI的客户端（库）。现在可以使用客户端执行Helm中的所有操作。让我们在您的Windows机器上安装Helm。
- en: Installing Helm
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Helm
- en: 'It is recommended that you install Helm on a Windows machine using Chocolatey.
    To install Helm, go through the following steps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在Windows机器上使用Chocolatey安装Helm。要安装Helm，请按照以下步骤进行：
- en: Open the PowerShell window as an administrator.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员身份打开PowerShell窗口。
- en: 'Execute the following installation command:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下安装命令：
- en: '[PRE0]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When the installation is finished, verify that you are running version `3.0.0`
    or higher:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，请验证您是否运行版本`3.0.0`或更高版本：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Check whether you have any repositories that have been added using the `helm
    repo list` command. If you don''t (as in version 3.0.0), add the official `stable`
    repository and update:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查是否有使用`helm repo list`命令添加的任何存储库。如果没有（在版本3.0.0中），添加官方的`stable`存储库并更新：
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, try searching for some Helm charts—for example, let''s check whether there
    is a chart for Microsoft SQL Server:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，尝试搜索一些Helm图表，例如，让我们检查是否有Microsoft SQL Server的图表：
- en: '[PRE3]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Helm Hub** ([https://hub.helm.sh/](https://hub.helm.sh/)) offers a user-friendly
    interface for browsing the official Helm repository ([https://github.com/helm/charts](https://github.com/helm/charts)).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**Helm Hub** ([https://hub.helm.sh/](https://hub.helm.sh/))提供了一个用户友好的界面，用于浏览官方Helm存储库([https://github.com/helm/charts](https://github.com/helm/charts))。'
- en: We have found a stable chart for SQL Server running in Linux containers. It
    is based on version 2017, but we can still use it for our Voting application.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找到了一个在Linux容器中运行的SQL Server的稳定图表。它基于2017年的版本，但我们仍然可以将其用于我们的投票应用程序。
- en: Deploying Microsoft SQL Server using Helm
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Helm部署Microsoft SQL Server
- en: 'Let''s now walk through how to deploy Microsoft SQL Server to our AKS Engine
    cluster. The structure of each chart is similar:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看如何将Microsoft SQL Server部署到我们的AKS Engine集群。每个图表的结构都是相似的：
- en: In the `root` directory, you can find a detailed readme with a description of
    how to install the chart and what the possible parameters are ([https://github.com/helm/charts/tree/master/stable/mssql-linux](https://github.com/helm/charts/tree/master/stable/mssql-linux)).
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`root`目录中，您可以找到一个详细的自述文件，其中描述了如何安装图表以及可能的参数是什么([https://github.com/helm/charts/tree/master/stable/mssql-linux](https://github.com/helm/charts/tree/master/stable/mssql-linux))。
- en: The `Chart.yaml` file contains chart metadata, including dependency information.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Chart.yaml`文件包含图表元数据，包括依赖信息。'
- en: The `templates` directory contains all Go templates for Kubernetes manifests.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates`目录包含所有用于Kubernetes清单的Go模板。'
- en: The `values.yaml` file defines the default values for the chart that can be
    overridden using CLI parameters or by providing a YAML file.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values.yaml`文件定义了可以使用CLI参数或提供YAML文件来覆盖的图表的默认值。'
- en: 'The process of installing a Helm chart is straightforward: define the right
    values for your needs (and possibly analyze the templates to understand what is
    happening) and run the `helm install` command. Looking at the chart for SQL Server,
    we need to specify the following `values.yaml` file:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Helm图表的过程很简单：为您的需求定义正确的值（可能需要分析模板以了解发生了什么），然后运行`helm install`命令。查看SQL Server的图表，我们需要指定以下`values.yaml`文件：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To deploy SQL Server using Helm, go through the following steps:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Helm部署SQL Server，请按照以下步骤进行：
- en: Open the PowerShell window.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开PowerShell窗口。
- en: Save the preceding file as `values.yaml` in your current directory.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将前面的文件保存为`values.yaml`在当前目录中。
- en: 'Create prerequisites. We need the `dev-helm` namespace and the `azure-disk` StorageClass.
    Create the following `prereq.yaml` manifest file:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建先决条件。我们需要`dev-helm`命名空间和`azure-disk` StorageClass。创建以下`prereq.yaml`清单文件：
- en: '[PRE5]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Apply the manifest file using the `kubectl apply -f .\prereq.yaml` command.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl apply -f .\prereq.yaml`命令应用清单文件。
- en: 'Execute a dry run of the Helm chart installation. You will be able to see which
    Kubernetes manifest files would be applied:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行Helm图表安装的干运行。您将能够看到将应用哪些Kubernetes清单文件：
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This command will perform a dry run of the installation of `stable/mssql-linux`
    as a `demo-mssql` Helm release in the `dev-helm` namespace.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将执行`stable/mssql-linux`作为`demo-mssql` Helm发布在`dev-helm`命名空间的安装干运行。
- en: 'If you are happy with the result, perform the installation:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您对结果满意，请执行安装：
- en: '[PRE7]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Observe the deployment of SQL Server using the following command:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令观察SQL Server的部署：
- en: '[PRE8]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can also check the status using the Helm CLI:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以使用Helm CLI检查状态：
- en: '[PRE9]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Use a SQL Server Management Studio or SQL Tools container to verify that SQL
    Server is running properly. You can use an external IP address for the service—we
    have exposed a LoadBalancer service.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用SQL Server Management Studio或SQL Tools容器验证SQL Server是否正常运行。您可以使用服务的外部IP地址——我们已经暴露了一个负载均衡器服务。
- en: Commands for managing Helm releases are namespace-scoped in a similar manner
    to kubectl.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 管理Helm发布的命令与kubectl类似，都是命名空间范围的。
- en: As you can see, using Helm is very efficient for quickly bootstrapping complex
    applications in your cluster. Now, let's prepare a Helm chart for our Voting application.
    We will use an SQL Server chart as a dependency.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，使用Helm在集群中快速引导复杂的应用程序非常高效。现在，让我们为我们的投票应用程序准备一个Helm图表。我们将使用一个SQL Server图表作为依赖。
- en: Creating a Helm chart for our Voting application
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的投票应用程序创建一个Helm图表
- en: In order to package our Voting application as a Helm chart, we will use the
    manifest files from the previous chapter that we used for the Horizontal Pod Autoscaler
    demonstration. You can find the base manifest files in the GitHub repository for
    the book at [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12/02_voting-application-base](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12/02_voting-application-base).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的投票应用程序打包为Helm图表，我们将使用上一章中用于水平Pod自动缩放演示的清单文件。您可以在书的GitHub存储库中找到基本的清单文件。
- en: 'To prepare the Helm chart, we need to go through the following steps:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备Helm图表，我们需要按照以下步骤进行：
- en: Gather all the required Kubernetes manifest files and determine which parts
    should be parameterized. We will use these for creating Helm template files and
    the `default values` file.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 收集所有必需的Kubernetes清单文件，并确定哪些部分应该被参数化。我们将用这些来创建Helm模板文件和“默认值”文件。
- en: Define all of the dependencies for our application and define the proper parameter
    values for them. We will inject these parameters into the `default values` file
    for our parent chart.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为我们的应用程序定义所有的依赖关系，并为它们定义适当的参数值。我们将把这些参数注入到我们父图表的“默认值”文件中。
- en: Transform the Entity Framework database migrations into post-installation and
    post-upgrade Helm hooks.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Entity Framework数据库迁移转换为安装后和升级后的Helm钩子。
- en: The majority of the work here is transforming the raw Kubernetes manifest files
    into Helm templates. We will show only the relevant parts of this process in the
    next few steps. For the best coding experience, use Visual Studio Code for editing
    the Helm charts. You can find the final Helm chart for our Voting application
    in the Github repository at [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12/03_voting-application-helm](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12/03_voting-application-helm).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的大部分工作是将原始的Kubernetes清单文件转换为Helm模板。在接下来的几个步骤中，我们将只展示这个过程的相关部分。为了获得最佳的编码体验，请使用Visual
    Studio Code编辑Helm图表。您可以在Github存储库[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12/03_voting-application-helm](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12/03_voting-application-helm)中找到我们投票应用程序的最终Helm图表。
- en: 'Please go through the following steps to create your Helm chart:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤创建您的Helm图表：
- en: 'First, let''s uninstall the SQL Server Helm release from the cluster. We will
    install this chart automatically as a dependency in the Voting application parent
    chart:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们从集群中卸载SQL Server Helm发布。我们将自动将此图表作为Voting应用程序父图表的依赖项安装：
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the following command to create a Helm chart scaffolding:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令创建Helm图表脚手架：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will create a directory named `voting-application` that contains the basic
    structure and templates for your Helm chart. We will reuse most of them.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个名为`voting-application`的目录，其中包含Helm图表的基本结构和模板。我们将重复使用其中的大部分内容。
- en: 'Navigate to the chart directory using `cd .\voting-application\` and modify
    the chart metadata in the `Chart.yaml` file:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cd .\voting-application\`导航到图表目录，并修改`Chart.yaml`文件中的图表元数据：
- en: '[PRE12]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The most important bits of the code here deal with defining the proper dependencies
    and setting the proper `apiVersion`, which will be used as a Docker image tag
    in the templates. Add `mssql-linux` with the latest chart version (`0.10.1`) from
    the official stable repository at `https://kubernetes-charts.storage.googleapis.com`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这里代码的最重要部分涉及定义适当的依赖关系和设置适当的`apiVersion`，这将在模板中用作Docker镜像标签。从官方稳定存储库`https://kubernetes-charts.storage.googleapis.com`中添加`mssql-linux`的最新图表版本（`0.10.1`）。
- en: Navigate to the `templates` directory using the `cd .\templates\` command. We
    will use `reuse _helpers.tpl` (which contains template helper functions), `service.yaml`,
    `serviceaccount.yaml`, and `ingress.yaml` in the original form. These manifest
    templates will produce exactly what we need without any changes.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cd .\templates\`命令导航到`templates`目录。我们将在原始形式中使用`reuse _helpers.tpl`（其中包含模板助手函数）、`service.yaml`、`serviceaccount.yaml`和`ingress.yaml`。这些清单模板将产生我们需要的内容，无需任何更改。
- en: 'The next step is to define a manifest template for our Deployment named `deployment.yaml`;
    you should inspect the original `deployment.yaml` file in the chart scaffolding,
    as you can use the majority of it in our template. The final version of this template
    can be found at [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter12/03_voting-application-helm/templates/deployment.yaml](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter12/03_voting-application-helm/templates/deployment.yaml).
    As an example, let''s explain how you can parametrize the Docker image tag and
    inject the SQL Server password:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是为我们的Deployment定义一个清单模板，命名为`deployment.yaml`；您应该检查图表脚手架中的原始`deployment.yaml`文件，因为您可以在我们的模板中使用其中的大部分内容。此模板的最终版本可以在[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter12/03_voting-application-helm/templates/deployment.yaml](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter12/03_voting-application-helm/templates/deployment.yaml)找到。例如，让我们解释一下如何对Docker镜像标签进行参数化并注入SQL
    Server密码：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let's analyze it step by step. The `{{ include "voting-application.fullname"
    . }}` phrase shows you how to include a template defined in `_helpers.tpl` and
    use it as the Deployment name. If there is some more advanced templating logic,
    you should always use this file for defining reusable templates.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步地分析。`{{ include "voting-application.fullname" . }}`短语向您展示了如何包含在`_helpers.tpl`中定义的模板，并将其用作部署名称。如果有更高级的模板逻辑，您应该始终使用此文件来定义可重用的模板。
- en: The Docker image for the pod container is defined as `"{{ .Values.image.repository
    }}:{{ .Chart.AppVersion }}"`; you use `.Values` for referencing variables defined
    in the `values.yaml` file and `.Chart` for referencing chart metadata. And finally,
    we have used `{{ .Release.Name }}-mssql-linux-secret` in order to reference the
    secret created by the dependent SQL Server chart.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Pod容器的Docker镜像定义为`"{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"`；您可以使用`.Values`来引用在`values.yaml`文件中定义的变量，使用`.Chart`来引用图表元数据。最后，我们使用了`{{
    .Release.Name }}-mssql-linux-secret`来引用由依赖的SQL Server图表创建的秘密。
- en: You need to know the internals of the dependent chart to know what value should
    be used ([https://github.com/helm/charts/blob/master/stable/mssql-linux/templates/secret.yaml](https://github.com/helm/charts/blob/master/stable/mssql-linux/templates/secret.yaml)[).](https://github.com/helm/charts/blob/master/stable/mssql-linux/templates/secret.yaml)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要了解依赖图表的内部结构，以了解应使用什么值（[https://github.com/helm/charts/blob/master/stable/mssql-linux/templates/secret.yaml](https://github.com/helm/charts/blob/master/stable/mssql-linux/templates/secret.yaml)[)。](https://github.com/helm/charts/blob/master/stable/mssql-linux/templates/secret.yaml)
- en: Unfortunately, Helm does not have an easy referencing process for such values
    from dependent charts, so you have to either hardcode the name by following the
    conventions used by Helm (which we did) or define a dedicated template in `_helpers.tpl`
    (which is a more clean approach, but also more complex).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，Helm没有一个简单的引用过程来从依赖图表中获取这些值，因此您必须要么按照Helm使用的约定硬编码名称（我们这样做了），要么在`_helpers.tpl`中定义一个专用模板（这是一种更清晰的方法，但也更复杂）。
- en: To define RBAC roles and RoleBindings, we create two additional template files, `rolebinding.yaml`
    and `role.yaml`. You can find the contents in [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12/03_voting-application-helm/templates](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12/03_voting-application-helm/templates).
    Defining RBAC manifests for the application can be made conditional; you can see
    this practice in the official Helm charts.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义RBAC角色和RoleBindings，我们创建了两个额外的模板文件，`rolebinding.yaml`和`role.yaml`。您可以在[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12/03_voting-application-helm/templates](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12/03_voting-application-helm/templates)中找到内容。为应用程序定义RBAC清单可以是有条件的；您可以在官方Helm图表中看到这种做法。
- en: 'The last manifest that we need to define is a Helm hook ([https://helm.sh/docs/topics/charts_hooks/](https://helm.sh/docs/topics/charts_hooks/))
    for running Entity Framework database migrations ([https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter12/03_voting-application-helm/templates/post-install-job.yaml](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter12/03_voting-application-helm/templates/post-install-job.yaml)).
    A hook is just like any other manifest template, but it has additional annotations
    that ensure that the manifest is applied at a certain point in the lifecycle of
    a chart release. Additionally, if the hook is a Kubernetes job, Helm can wait
    to finish the job and provide cleanup. We want this hook to be a job, the same
    kind that we have already used for EF migrations, and we want it to be executed
    after the release is installed or upgraded. Let''s see how we can define the annotations
    for our job in the `post-install-job.yaml` file:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要定义的最后一个清单是用于运行Entity Framework数据库迁移的Helm钩子（[https://helm.sh/docs/topics/charts_hooks/](https://helm.sh/docs/topics/charts_hooks/)）（[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter12/03_voting-application-helm/templates/post-install-job.yaml](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter12/03_voting-application-helm/templates/post-install-job.yaml)）。钩子就像任何其他清单模板一样，但它具有额外的注释，确保清单在图表发布的生命周期的某个特定点应用。此外，如果钩子是Kubernetes作业，Helm可以等待作业完成并进行清理。我们希望这个钩子是一个作业，与我们已经用于EF迁移的相同类型，并且希望它在安装或升级发布后执行。让我们看看如何在`post-install-job.yaml`文件中定义我们作业的注释：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The key annotation that turns a manifest template into a hook is `"helm.sh/hook"`.
    We use `post-install` and `post-upgrade` values to ensure that the hook is executed
    after installation and after the upgrade of the Helm release. The `"helm.sh/hook-weight"` phrase
    is used for determining the order of hooks, which in our case doesn't matter,
    as we have only one hook.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 将清单模板转换为钩子的关键注释是`"helm.sh/hook"`。我们使用`post-install`和`post-upgrade`值来确保钩子在安装后和Helm发布升级后执行。`"helm.sh/hook-weight"`短语用于确定钩子的顺序，在我们的情况下并不重要，因为我们只有一个钩子。
- en: The `"helm.sh/hook-delete-policy"` phrase defines the cases in which the job
    instances should be automatically deleted. We would like to delete them only on
    a successful hook execution; otherwise, we want to leave the resources so that
    we can debug the problem.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`"helm.sh/hook-delete-policy"`短语定义了作业实例应在何种情况下自动删除。我们希望仅在成功的钩子执行时删除它们；否则，我们希望保留资源，以便我们可以调试问题。'
- en: Please note that we specify the job `backoffLimit` as `10`; we need this in
    case of a long SQL Server pod creation, which, in this case, can take even a few
    minutes; if we don't do this, the hook will fail too quickly.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们将作业的`backoffLimit`指定为`10`；在SQL Server pod创建时间较长的情况下，我们需要这个值，这种情况下可能需要几分钟；如果我们不这样做，钩子将失败得太快。
- en: 'The last step is providing default template values in the `values.yaml` file
    in the root directory of the chart ([https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter12/03_voting-application-helm/values.yaml](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter12/03_voting-application-helm/values.yaml)).
    Let''s take a look at some important bits in the file:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是在图表的根目录中的`values.yaml`文件中提供默认模板值（[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter12/03_voting-application-helm/values.yaml](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter12/03_voting-application-helm/values.yaml)）。让我们来看看文件中的一些重要部分：
- en: '[PRE15]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can organize the values; however, they are already conveniently arranged.
    For example, everything regarding the Docker image is grouped into the image node,
    and then you can reference the image repository name in the chart as `{{ .Values.image.repository
    }}`. A very important thing to remember is to provide a proper `nodeSelector`,
    which ensures that the pods are scheduled for Windows nodes only. Lastly, you
    define the values for a dependent chart using its name.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以组织值；但是，它们已经方便地排列好了。例如，关于Docker镜像的所有内容都被分组到图像节点中，然后您可以在图表中引用图像存储库名称为`{{ .Values.image.repository
    }}`。要记住的一个非常重要的事情是提供适当的`nodeSelector`，以确保pod仅安排在Windows节点上。最后，使用其名称为依赖图表定义值。
- en: Here, we have used `mssql-linux` because this is the chart that we reference
    in the `Chart.yaml` file. You can read more about managing dependencies and defining
    the values in the documentation at [https://helm.sh/docs/topics/charts/#chart-dependencies](https://helm.sh/docs/topics/charts/#chart-dependencies).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了`mssql-linux`，因为这是我们在`Chart.yaml`文件中引用的图表。您可以在文档中阅读有关管理依赖项和定义值的更多信息[https://helm.sh/docs/topics/charts/#chart-dependencies](https://helm.sh/docs/topics/charts/#chart-dependencies)。
- en: Many aspects of Helm are based on conventions. You can find more about the best
    practices for implementing charts in the documentation at [https://helm.sh/docs/topics/chart_best_practices/](https://helm.sh/docs/topics/chart_best_practices/).
    Use the `helm lint` command to check whether there are any issues with your chart.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Helm的许多方面都基于惯例。您可以在文档中找到有关实施图表的最佳实践的更多信息[https://helm.sh/docs/topics/chart_best_practices/](https://helm.sh/docs/topics/chart_best_practices/)。使用`helm
    lint`命令检查图表是否存在任何问题。
- en: 'The chart for our Voting application is ready. Now, we will install this chart
    to our Kubernetes cluster in the `dev-helm` namespace:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的投票应用程序的图表已准备就绪。现在，我们将在`dev-helm`命名空间中将此图表安装到我们的Kubernetes集群中：
- en: Open the PowerShell window in the `root` directory of the chart.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图表的`root`目录中打开PowerShell窗口。
- en: 'Ensure that all the dependent charts are fetched from the repository:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保从存储库中获取所有依赖的图表：
- en: '[PRE16]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Perform a `dry run` of the Helm chart installation to check the manifest files:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行Helm图表安装的`dry run`以检查清单文件：
- en: '[PRE17]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This command will print all the resolved manifest files that will be applied
    to the installation of the chart in the current directory,`.` , with the default
    values.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将打印所有解析的清单文件，这些文件将应用于当前目录中图表的安装，使用默认值。
- en: 'Now, install the chart. We need to provide an extended timeout for the installation
    as our Entity Framework database migration job may need a few minutes to succeed.
    This depends on how quickly SQL Server is initialized and ready to connect. Use
    the following command:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，安装图表。我们需要为安装提供扩展的超时，因为我们的Entity Framework数据库迁移作业可能需要几分钟才能成功。这取决于SQL Server初始化和准备连接的速度。使用以下命令：
- en: '[PRE18]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The installation will take a bit of time; you can observe the progress of the
    Deployment for individual Kubernetes objects in a separate PowerShell window:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装将需要一些时间；您可以在单独的PowerShell窗口中观察单个Kubernetes对象的部署进度。
- en: '[PRE19]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: When the installation ends, use `kubectl get -n dev-helm svc -w voting-application`
    to get the external IP address of the LoadBalancer service for our Voting application.
    Navigate to the address in a web browser and enjoy!
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装结束后，使用`kubectl get -n dev-helm svc -w voting-application`获取我们的投票应用程序的LoadBalancer服务的外部IP地址。在Web浏览器中导航到该地址并享受！
- en: '![](assets/171f7646-087d-479b-af81-98ec8625ced1.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/171f7646-087d-479b-af81-98ec8625ced1.png)'
- en: In a production environment, you should use a Helm chart repository to manage
    your charts. You can learn more about setting up a repository at [https://v3.helm.sh/docs/topics/chart_repository/](https://v3.helm.sh/docs/topics/chart_repository/).
    Additionally, to manage releases for Helm charts *declaratively*, similar to `kubectl
    apply`, you may consider using `Helmfile` ([https://github.com/roboll/helmfile](https://github.com/roboll/helmfile)).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，您应该使用Helm图表存储库来管理您的图表。您可以在[https://v3.helm.sh/docs/topics/chart_repository/](https://v3.helm.sh/docs/topics/chart_repository/)了解有关设置存储库的更多信息。此外，为了*声明性*地管理Helm图表的发布，类似于`kubectl
    apply`，您可以考虑使用`Helmfile`（[https://github.com/roboll/helmfile](https://github.com/roboll/helmfile)）。
- en: In the next section, you will learn how to easily add Azure Application Insights
    to your ASP.NET MVC application running in a Windows container. We will also show
    you how to perform an upgrade of the Helm release that we have just installed.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何轻松将Azure Application Insights添加到在Windows容器中运行的ASP.NET MVC应用程序中。我们还将向您展示如何执行刚刚安装的Helm发布的升级。
- en: Debugging a containerized application using Azure Application Insights
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure Application Insights调试容器化应用程序
- en: 'Azure Application Insights is a part of Azure Monitor, which provides **application
    performance management** (**APM**) capabilities for your applications. It is a
    large platform, with a rich **UI** (short for **user interface**) in the Azure
    portal, which provides the following features (among others):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Application Insights是Azure Monitor的一部分，为您的应用程序提供**应用程序性能管理**（**APM**）功能。它是一个庞大的平台，在Azure门户中具有丰富的**用户界面**（**UI**）,提供以下功能（以及其他功能）：
- en: Request monitoring and tracing, including distributed tracing between multiple
    microservices
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求监控和跟踪，包括多个微服务之间的分布式跟踪
- en: Exception monitoring and snapshot debugging
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异常监控和快照调试
- en: Collecting performance counters for the host machines
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集主机机器的性能计数器
- en: Smart anomaly detection and alerting
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 智能异常检测和警报
- en: Easy log collection and analytics
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松的日志收集和分析
- en: The most interesting feature for us is snapshot debugging, which can help diagnose
    issues in production Deployments where running with an attached remote debugger
    is not advised. For this, you will need Visual Studio 2019 Enterprise edition
    if you would like to analyze the snapshots using Visual Studio. Alternatively,
    you can perform analysis in the Azure portal itself, which has a lightweight web-based
    debugger available.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 对我们来说最有趣的功能是快照调试，它可以帮助诊断在不建议使用附加远程调试器的生产部署中的问题。为此，如果您想使用Visual Studio分析快照，您将需要Visual
    Studio 2019企业版。或者，您可以在Azure门户本身进行分析，该门户具有轻量级的基于Web的调试器。
- en: Alternatively, you can use zero-instrumentation application monitoring for Kubernetes
    applications running on Azure using out-of-band instrumentation provided by the
    Istio service mesh, as explained at [https://docs.microsoft.com/en-us/azure/azure-monitor/app/kubernetes](https://docs.microsoft.com/en-us/azure/azure-monitor/app/kubernetes).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以使用Istio服务网格提供的带外仪器应用程序监控，在Azure上运行的Kubernetes应用程序，如[https://docs.microsoft.com/en-us/azure/azure-monitor/app/kubernetes](https://docs.microsoft.com/en-us/azure/azure-monitor/app/kubernetes)中所述。
- en: 'To enable Azure Application Insights together with snapshot debugging, we need
    to go through the following steps:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 启用Azure Application Insights与快照调试，我们需要按照以下步骤进行：
- en: Enable Azure Application Insights in the Visual Studio project.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio项目中启用Azure Application Insights。
- en: Install the `Microsoft.ApplicationInsights.SnapshotCollector` NuGet package.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`Microsoft.ApplicationInsights.SnapshotCollector` NuGet包。
- en: Configure snapshot debugging and modify the Serilog configuration to use the
    sink for sending logs to `System.Diagnostics.Trace`.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置快照调试并修改Serilog配置以使用发送日志到`System.Diagnostics.Trace`的接收器。
- en: Add a demonstration exception.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加演示异常。
- en: Build a new Docker image and push it to Docker Hub.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建一个新的Docker镜像并将其推送到Docker Hub。
- en: Upgrade the Helm release.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 升级Helm发布。
- en: After this, we will be able to analyze trace maps, application logs, and exceptions
    directly in the Azure portal. Please note that this log collection solution is
    different from what we demonstrated in [Chapter 8](ab695a0d-05dc-48f8-8c41-bbd167cfbfa6.xhtml), *Deploying
    a Hybrid Azure Kubernetes Service Engine Cluster, *where we used Azure Log Analytics
    for AKS Engine. They use the same Azure services, but, in the new solution, we
    will get application logs only—you will not see Kubernetes or container runtime
    logs in Azure Log Analytics views.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将能够直接在Azure门户中分析跟踪图、应用程序日志和异常。请注意，此日志收集解决方案与我们在[第8章](ab695a0d-05dc-48f8-8c41-bbd167cfbfa6.xhtml)中演示的不同，*部署混合Azure
    Kubernetes服务引擎集群*，在那里我们使用Azure Log Analytics来处理AKS Engine。它们使用相同的Azure服务，但在新解决方案中，我们将仅获取应用程序日志——在Azure
    Log Analytics视图中看不到Kubernetes或容器运行时日志。
- en: Enabling Azure Application Insights
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用Azure应用程序洞察
- en: Please go through the following steps to enable Azure Application Insights in
    our Voting application. Alternatively, you can use the ready source code available
    in the Github repository at [https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12/04_voting-application-azure-application-insights-src](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12/04_voting-application-azure-application-insights-src).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤在我们的投票应用程序中启用Azure应用程序洞察。或者，您可以使用Github存储库中提供的现成源代码[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12/04_voting-application-azure-application-insights-src](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/tree/master/Chapter12/04_voting-application-azure-application-insights-src)。
- en: 'If you choose to do so, you need to provide your own Azure Application Insights
    key in the later steps during the Helm release upgrade:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择这样做，您需要在Helm发布升级期间的后续步骤中提供自己的Azure应用程序洞察密钥：
- en: Open the `VotingApplication` solution in Visual Studio 2019.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2019中打开`VotingApplication`解决方案。
- en: 'In Solution Explorer, right-click on the `VotingApplication` project, choose
    Add and select Application Insights Telemetry...:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中，右键单击`VotingApplication`项目，选择添加，然后选择应用程序洞察遥测...：
- en: '![](assets/30d776a5-31b6-4ab1-80f8-18b010f920b9.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/30d776a5-31b6-4ab1-80f8-18b010f920b9.png)'
- en: Click Get Started.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击开始。
- en: Sign in to Azure and provide a new Resource Group and Resource name (or use
    the default ones).
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录Azure并提供一个新的资源组和资源名称（或使用默认值）。
- en: Click Register. The operation will take a few minutes. Once this time has passed,
    a new Azure Application Insights instance will be created in your Azure subscription,
    and the appropriate NuGet packages will be added to the Visual Studio project.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击注册。该操作将需要几分钟的时间。一旦时间过去，将在您的Azure订阅中创建一个新的Azure应用程序洞察实例，并将适当的NuGet包添加到Visual
    Studio项目中。
- en: 'Update the resource for CodeLens and enable it to collect traces from `System.Diagnostics`:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新CodeLens的资源并启用它来从`System.Diagnostics`中收集跟踪：
- en: '![](assets/6bc49f59-621a-410b-be48-85af04691aec.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6bc49f59-621a-410b-be48-85af04691aec.png)'
- en: 'We do not want to have the instrumentation key hardcoded into the Docker image.
    Application Insights supports the ability to inject the key `APPINSIGHTS_INSTRUMENTATIONKEY`
    environment variable. Navigate to the `ApplicationInsights.config` file in the
    solution, find the following XML node, write down the key for further usage, and
    remove the XML node:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不希望将仪表键硬编码到Docker镜像中。应用程序洞察支持注入`APPINSIGHTS_INSTRUMENTATIONKEY`环境变量的能力。导航到解决方案中的`ApplicationInsights.config`文件，找到以下XML节点，记下密钥以供进一步使用，并删除XML节点：
- en: '[PRE20]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Search for all occurrences of your instrumentation key in the solution. You
    will find one more in `_Layout.cshtml`; replace it with the following value:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索解决方案中所有的仪表键的出现。您会在`_Layout.cshtml`中找到另一个；用以下值替换它：
- en: '[PRE21]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Right-click the `VotingApplication` project in the Solution Explorer and select Manage
    Nuget Packages.... Install the following NuGet package in `Microsoft.ApplicationInsights.SnapshotCollectorandSerilog.Sinks.Trace`.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中右键单击`VotingApplication`项目，然后选择`管理Nuget Packages...`。安装以下NuGet包`Microsoft.ApplicationInsights.SnapshotCollectorandSerilog.Sinks.Trace`。
- en: 'Configure the snapshot debugger. In the `ApplicationInsights.config` file,
    ensure that, in the root node `ApplicationInsights`, you have the following XML
    node:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置快照调试器。在`ApplicationInsights.config`文件中，确保在根节点`ApplicationInsights`中有以下XML节点：
- en: '[PRE22]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Register the Serilog sink in the `NinjectWebCommon.cs` file in the `RegisterServices`
    method. Your logger configuration should look like the following:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`NinjectWebCommon.cs`文件的`RegisterServices`方法中注册Serilog sink。您的日志记录器配置应如下所示：
- en: '[PRE23]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the `HomeController.cs` file, add a new controller action, `TestException`,
    which we will use for testing the snapshot debugging. It should just throw an
    unhandled exception:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HomeController.cs`文件中，添加一个新的控制器动作`TestException`，我们将用于测试快照调试。它应该只是抛出一个未处理的异常：
- en: '[PRE24]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'At this point, our Voting application is fully configured to use Azure Application
    Insights. We can now upgrade the Helm release using the following steps:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们的投票应用程序已完全配置为使用Azure Application Insights。现在可以使用以下步骤升级Helm发布：
- en: Build a new Docker image with a `1.5.0` tag, just like we did in the previous
    chapters, and push it to the Docker Hub. In our case, it will be called `packtpubkubernetesonwindows/voting-application:1.5.0`.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`1.5.0`标签构建一个新的Docker镜像，就像我们在之前的章节中所做的那样，并将其推送到Docker Hub。在我们的情况下，它将被称为`packtpubkubernetesonwindows/voting-application:1.5.0`。
- en: Navigate to the directory with the Helm chart for the application.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到应用程序的Helm图表所在的目录。
- en: In the `Chart.yaml` file, use `1.5.0` (the same as the Docker image tag) as
    the `appVersion`. As suggested by our best practices, change the version of the
    chart—for example, use `0.2.0`.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chart.yaml`文件中，使用`1.5.0`（与Docker镜像标签相同）作为`appVersion`。根据我们的最佳实践建议，更改图表的版本，例如使用`0.2.0`。
- en: 'In the `values.yaml` file, add your instrumentation key and increase `replicaCount`
    to `5`:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`values.yaml`文件中，添加您的仪表键，并将`replicaCount`增加到`5`：
- en: '[PRE25]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now we need to inject the instrumentation key to the pod template into `Deployment`
    for our Voting application. Modify `templates\deployment.yaml` so that `azureApplicationInsightsKey`
    is injected into the `APPINSIGHTS_INSTRUMENTATIONKEY` environment variable:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要将仪表键注入到`Voting`应用程序的`Deployment`中的pod模板中。修改`templates\deployment.yaml`，以便将`azureApplicationInsightsKey`注入到`APPINSIGHTS_INSTRUMENTATIONKEY`环境变量中：
- en: '[PRE26]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Perform a `dry run` for the upgrade of the Helm release using the new version
    of our chart. You should see the instrumentation key being properly resolved in
    the output manifests:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用图表的新版本执行Helm发布的`dry run`。
- en: '[PRE27]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Run the `upgrade`:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`upgrade`：
- en: '[PRE28]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Wait for all replicas to be upgraded to the new version.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待所有副本升级到新版本。
- en: 'Now, your application should be running and sending all of the telemetry to
    Azure Application Insights. You can navigate to Application Insights from Azure
    Portal ([https://portal.azure.com/](https://portal.azure.com/)) or open it directly
    from Visual Studio by right-clicking `Application Insights` under Connected Services
    and selecting Open Application Insights Portal:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的应用程序应该正在运行并将所有遥测发送到Azure Application Insights。您可以从Azure门户导航到Application
    Insights（[https://portal.azure.com/](https://portal.azure.com/)），或者通过在Visual Studio中右键单击`Connected
    Services`下的`Application Insights`并选择`Open Application Insights Portal`来直接打开它：
- en: '![](assets/65469ece-eb53-4068-9744-6e3c85d08d35.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/65469ece-eb53-4068-9744-6e3c85d08d35.png)'
- en: 'You can explore multiple features that are available out of the box with the
    current configuration—for example, visualizing the telemetry data as an application
    map that shows the dependencies between the different components in your application
    and what their current status is:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以探索当前配置中提供的多个开箱即用的功能，例如将遥测数据可视化为应用程序地图，显示应用程序中不同组件之间的依赖关系及其当前状态：
- en: '![](assets/33d80fe8-3a56-446b-9125-dfe93e71be40.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/33d80fe8-3a56-446b-9125-dfe93e71be40.png)'
- en: 'If you are interested in the overall performance of end-user requests, you
    can check out the dedicated dashboard based on the ASP.NET MVC telemetry:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对最终用户请求的整体性能感兴趣，可以查看基于ASP.NET MVC遥测的专用仪表板：
- en: '![](assets/be8d2e57-0963-4d58-bd84-9408a76d409b.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/be8d2e57-0963-4d58-bd84-9408a76d409b.png)'
- en: 'And, of course, you can inspect application **logs**, which are delivered by
    the Serilog sink. The most important feature in this view is the possibility of
    running complex queries using the Kusto language ([https://docs.microsoft.com/en-us/azure/kusto/query/](https://docs.microsoft.com/en-us/azure/kusto/query/)),
    which is designed for analyzing log data:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您还可以检查由Serilog汇集的应用程序**日志**。此视图中最重要的功能是使用Kusto语言（[https://docs.microsoft.com/en-us/azure/kusto/query/](https://docs.microsoft.com/en-us/azure/kusto/query/)）运行复杂查询的可能性，该语言专为分析日志数据而设计：
- en: '![](assets/e74cf28b-f712-4327-8309-a3eecd6e91db.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/e74cf28b-f712-4327-8309-a3eecd6e91db.png)'
- en: You can learn more about the Azure Application Insights features in the official
    documentation at [https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview](https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方文档中了解有关Azure应用程序洞察功能的更多信息[https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview](https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview)。
- en: Now, let's see how you can use the snapshot debugger in order to debug your
    containerized application, even when you do not have access to a remote debugger.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用快照调试器来调试您的容器化应用程序，即使您没有访问远程调试器也可以。
- en: Snapshot debugger
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快照调试器
- en: The Azure Application Insights service offers the snapshot debugger, which is
    a feature for monitoring exception telemetry from your application, including
    production scenarios. Whenever there is an unhandled exception (top-throwing),
    the snapshot debugger collects managed memory dumps that can be analyzed directly
    in Azure Portal or, for more advanced scenarios, Visual Studio 2019 Enterprise
    edition. Visual Studio will have this feature installed by default if you selected
    the ASP.NET workload in the installer.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Azure应用程序洞察服务提供了快照调试器，这是一个用于监视应用程序异常遥测的功能，包括生产场景。每当出现未处理的异常（顶部抛出），快照调试器都会收集可以直接在Azure门户中分析的托管内存转储，或者针对更高级的场景，使用Visual
    Studio 2019企业版。如果您在安装程序中选择了ASP.NET工作负载，则Visual Studio将默认安装此功能。
- en: Snapshot debugging can be configured for regular .NET applications that are
    not using ASP.NET MVC. You can find out more in the documentation at [https://docs.microsoft.com/en-us/azure/azure-monitor/app/snapshot-debugger-vm#configure-snapshot-collection-for-other-net-applications](https://docs.microsoft.com/en-us/azure/azure-monitor/app/snapshot-debugger-vm#configure-snapshot-collection-for-other-net-applications).
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 快照调试可以为不使用ASP.NET MVC的常规.NET应用程序进行配置。您可以在文档中了解更多信息[https://docs.microsoft.com/en-us/azure/azure-monitor/app/snapshot-debugger-vm#configure-snapshot-collection-for-other-net-applications](https://docs.microsoft.com/en-us/azure/azure-monitor/app/snapshot-debugger-vm#configure-snapshot-collection-for-other-net-applications)。
- en: 'In the previous paragraphs, we already enabled snapshot debugging in our application
    by installing the `Microsoft.ApplicationInsights.SnapshotCollector` NuGet package
    and providing additional configurations. Now, we can test this feature in our
    Voting application:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的段落中，我们已经通过安装`Microsoft.ApplicationInsights.SnapshotCollector` NuGet包并提供额外的配置来启用了应用程序中的快照调试。现在，我们可以在我们的投票应用程序中测试此功能：
- en: 'In your web browser, navigate to the test endpoint that always throws an exception:
    `http://<serviceExternalIp>/Home/TestException`. Trigger this endpoint twice; by
    default, we have to hit the same exception more than once to trigger snapshot
    collection.'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中，导航到始终引发异常的测试端点：`http://<serviceExternalIp>/Home/TestException`。触发此端点两次；默认情况下，我们必须多次触发相同的异常才能触发快照收集。
- en: You will see the default error page for our Voting application. At the same
    time, the snapshot has already been collected, without any noticeable performance
    impact for the end user.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到我们投票应用程序的默认错误页面。与此同时，快照已经被收集，对最终用户几乎没有性能影响。
- en: Navigate to the Application Insights for our Voting application in Azure Portal
    ([https://portal.azure.com/](https://portal.azure.com/)).
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Azure门户中为我们的投票应用程序导航到应用程序洞察。
- en: 'Open the Failures pane and select the Operations button when viewing the Operations
    tab or select the Exceptions button when viewing the Exceptions tab:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开“失败”窗格，并在查看“操作”选项卡时选择“操作”按钮，或在查看“异常”选项卡时选择“异常”按钮：
- en: '![](assets/f00421e9-9bb6-4d2b-aa14-0d431bea4df8.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f00421e9-9bb6-4d2b-aa14-0d431bea4df8.png)'
- en: From the right, select a Sample operation pane and open one of the exception
    occurrences.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从右侧选择示例操作窗格并打开异常发生之一。
- en: 'At the beginning, you will not see any snapshots on the timeline; you have
    to first add the Application Insights Snapshot Debugger Role. To do that, click
    (Don''t see snapshot? Troubleshoot):'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一开始，您在时间轴上看不到任何快照；您必须首先添加应用程序洞察快照调试器角色。要做到这一点，请单击（看不到快照？排除故障）：
- en: '![](assets/2beb9c1c-48b1-493a-ad2e-b73b14f082aa.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2beb9c1c-48b1-493a-ad2e-b73b14f082aa.png)'
- en: 'Click Add Application Insights Snapshot Debugger Role:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击添加应用程序洞察快照调试器角色：
- en: '![](assets/47b1975f-5151-46d7-be97-cec1263a1e2e.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/47b1975f-5151-46d7-be97-cec1263a1e2e.png)'
- en: After that, a basic health check will be executed. Please bear in mind that
    it takes a few minutes until the snapshots are uploaded, so, if you experience
    any health check failures, retry in a few minutes.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，将执行基本的健康检查。请记住，快照上传需要几分钟的时间，因此，如果您遇到任何健康检查失败，请在几分钟后重试。
- en: 'Now, back in the End-to-end transaction details view, you will see small icons
    representing the debug snapshots. Click one of them:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在端到端事务详细信息视图中，您将看到代表调试快照的小图标。单击其中一个：
- en: '![](assets/fa796b3d-87c8-4e5c-8b67-afa9124ecc56.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fa796b3d-87c8-4e5c-8b67-afa9124ecc56.png)'
- en: 'The Debug Snapshot view offers you lightweight debugger capabilities, including
    code decompilation. To analyze the snapshot in Visual Studio 2019 Enterprise,
    click the Download Snapshot button:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调试快照视图为您提供了轻量级的调试器功能，包括代码反编译。要在Visual Studio 2019 Enterprise中分析快照，请单击“下载快照”按钮：
- en: '![](assets/6fc7d714-5866-483e-8907-6faf0d492e8a.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6fc7d714-5866-483e-8907-6faf0d492e8a.png)'
- en: When the file downloads, open it in Visual Studio by double-clicking it.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件下载完成后，双击在Visual Studio中打开它。
- en: In Visual Studio, click Debug with Managed Only or Debug Managed Memory, depending
    on your needs. The second option is really useful when you are analyzing memory
    leaks and other memory-related issues.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，根据您的需求，单击“仅使用托管调试”或“调试托管内存”。当您分析内存泄漏和其他与内存相关的问题时，第二个选项非常有用。
- en: You may need to select your source code location in order to see the source
    code view ([https://docs.microsoft.com/en-us/visualstudio/debugger/specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger?view=vs-2019](https://docs.microsoft.com/en-us/visualstudio/debugger/specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger?view=vs-2019)).
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能需要选择源代码位置，以便查看源代码视图（[https://docs.microsoft.com/en-us/visualstudio/debugger/specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger?view=vs-2019](https://docs.microsoft.com/en-us/visualstudio/debugger/specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger?view=vs-2019)）。
- en: 'Now, you can use all of the debugging tools that you have always used—for example,
    you can analyze the Parallel Stacks view:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以使用您一直使用的所有调试工具，例如，您可以分析并行堆栈视图：
- en: '![](assets/c5ef3a45-6b7a-4bcd-b478-1198d6e22864.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c5ef3a45-6b7a-4bcd-b478-1198d6e22864.png)'
- en: If you run into any other problems while using the snapshot debugger, check
    the official troubleshooting guide at [https://docs.microsoft.com/en-us/azure/azure-monitor/app/snapshot-debugger-troubleshoot](https://docs.microsoft.com/en-us/azure/azure-monitor/app/snapshot-debugger-troubleshoot).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在使用快照调试器时遇到任何其他问题，请查看官方的故障排除指南[https://docs.microsoft.com/en-us/azure/azure-monitor/app/snapshot-debugger-troubleshoot](https://docs.microsoft.com/en-us/azure/azure-monitor/app/snapshot-debugger-troubleshoot)。
- en: The snapshot debugger has even more features, which make it possible to set
    live snap points so that you can create snapshots without waiting for an exception.
    Unfortunately, right now, this feature is only available for Azure App Service
    workloads or managed AKS clusters running applications in Linux containers. You
    can find more in the documentation at [https://docs.microsoft.com/en-us/visualstudio/debugger/debug-live-azure-applications?view=vs-2019](https://docs.microsoft.com/en-us/visualstudio/debugger/debug-live-azure-applications?view=vs-2019).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 快照调试器甚至具有更多功能，可以设置实时快照点，以便您可以在不等待异常的情况下创建快照。不幸的是，目前此功能仅适用于在Linux容器中运行应用程序的Azure应用服务工作负载或托管的AKS集群。您可以在文档中找到更多信息[https://docs.microsoft.com/en-us/visualstudio/debugger/debug-live-azure-applications?view=vs-2019](https://docs.microsoft.com/en-us/visualstudio/debugger/debug-live-azure-applications?view=vs-2019)。
- en: In the next section, we will take a look at Kubernetes Dashboard.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍Kubernetes仪表板。
- en: Using Kubernetes Dashboard
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Kubernetes仪表板
- en: Kubernetes Dashboard ([https://github.com/kubernetes/dashboard](https://github.com/kubernetes/dashboard))
    is the default, web-based user interface for deploying, managing, and troubleshooting
    applications running on Kubernetes. Generally, it is recommended that you use
    declarative kubectl management of the cluster instead of using Dashboard, but
    it is still a useful tool for having cluster overview, analyzing logs, and quickly
    executing into pod containers.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes仪表板（[https://github.com/kubernetes/dashboard](https://github.com/kubernetes/dashboard)）是默认的基于Web的用户界面，用于部署、管理和排除运行在Kubernetes上的应用程序。通常建议您使用声明性的kubectl管理集群，而不是使用仪表板，但它仍然是一个有用的工具，可以查看集群概述，分析日志，并快速执行到pod容器中。
- en: 'To use Dashboard, you have to first install it. You have the following options
    to do this:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用仪表板，您必须首先安装它。您有以下选项可以这样做：
- en: Deploy using the official manifest by running `kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta6/aio/deploy/recommended.yaml`.
    You can double-check the latest version in the documentation at [https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/).
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过运行`kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0-beta6/aio/deploy/recommended.yaml`来使用官方清单进行部署。您可以在文档中的[https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/](https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard)中再次检查最新版本。
- en: Install the Helm chart using the `helm install kubernetes-dashboard stable/kubernetes-dashboard` command.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`helm install kubernetes-dashboard stable/kubernetes-dashboard`命令安装Helm图表。
- en: In AKS Engine, use the `kubernetes-dashboard` add-on, which is enabled by default
    in the cluster ApiModel.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在AKS Engine中，使用默认启用的`kubernetes-dashboard`附加组件。
- en: It is important to know that there are strict compatibility rules for the Kubernetes
    API and Kubernetes Dashboard. You can check the matrix in the official releases
    page at [https://github.com/kubernetes/dashboard/releases](https://github.com/kubernetes/dashboard/releases).
    Currently, AKS Engine is deployed with version `1.10.1` of Dashboard, which is
    notcompatible with the latest versions of the Kubernetes API. This means that
    we will deploy Dashboard using the official manifest. The AKS Engine cluster is
    by default an RBAC-enabled cluster, so we need to configure RBAC in order to use
    Dashboard as a cluster administrator.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要知道Kubernetes API和Kubernetes仪表板有严格的兼容性规则。 您可以在官方发布页面[https://github.com/kubernetes/dashboard/releases](https://github.com/kubernetes/dashboard/releases)上检查矩阵。
    目前，AKS Engine部署了版本`1.10.1`的仪表板，与Kubernetes API的最新版本不兼容。 这意味着我们将使用官方清单部署仪表板。 AKS
    Engine集群默认为启用RBAC的集群，因此我们需要配置RBAC以便作为集群管理员使用仪表板。
- en: Deploying Kubernetes Dashboard
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署Kubernetes仪表板
- en: 'To deploy and configure RBAC, go through the following steps:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署和配置RBAC，请按照以下步骤进行：
- en: Open the PowerShell window.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开PowerShell窗口。
- en: 'Deploy Kubernetes Dashboard using the official manifest:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用官方清单部署Kubernetes仪表板：
- en: '[PRE29]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Create the `serviceaccount.yaml` manifest file for `admin-user`:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`admin-user`创建`serviceaccount.yaml`清单文件：
- en: '[PRE30]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Apply the manifest file using the `kubectl apply -f serviceaccount.yaml` command.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl apply -f serviceaccount.yaml`命令应用清单文件。
- en: 'Create the `clusterrolebinding.yaml` manifest file to give this user a `cluster-admin`
    role:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`clusterrolebinding.yaml`清单文件，为此用户授予`cluster-admin`角色：
- en: '[PRE31]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Apply the manifest file using the `kubectl apply -f clusterrolebinding.yaml` command.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`kubectl apply -f clusterrolebinding.yaml`命令应用清单文件。
- en: 'To get the bearer token for this user, use the following snippet in PowerShell
    and copy the value after `token:`:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取此用户的令牌，请在PowerShell中使用以下代码段，并复制`token:`后面的值：
- en: '[PRE32]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: When granting the `cluster-admin` role to the ServiceAccount that will be used
    to access the dashboard, you need to understand any security implications. Anyone
    who has the token for the `admin-user` ServiceAccount will be able to perform
    any actions in your cluster. In production scenarios, consider creating roles
    that expose only the necessary functionalities.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在授予将用于访问仪表板的ServiceAccount的`cluster-admin`角色时，您需要了解任何安全影响。 拥有`admin-user` ServiceAccount令牌的任何人都将能够在您的集群中执行任何操作。
    在生产场景中，考虑创建仅公开必要功能的角色。
- en: 'Now, you are ready to access Dashboard. To do this, please go through the following
    steps:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以访问仪表板。 要做到这一点，请按照以下步骤进行：
- en: In the PowerShell window, start a proxy for connecting to the API using the `kubectl
    proxy` command. The dashboard is not exposed as an external service, which means
    we have to use the proxy.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PowerShell窗口中，使用`kubectl proxy`命令启动连接到API的代理。 仪表板未公开为外部服务，这意味着我们必须使用代理。
- en: Open the web browser and navigate to `http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/`.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Web浏览器，转到`http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/`。
- en: Authenticate using the token option and provide the bearer token that we have
    retrieved in the previous steps.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用令牌选项进行身份验证，并提供我们在前面步骤中检索到的令牌。
- en: 'You will be redirected to the overview of your cluster:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被重定向到集群的概述：
- en: '![](assets/b3b0106c-e10f-4eb6-8a4f-c1d177661e02.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b3b0106c-e10f-4eb6-8a4f-c1d177661e02.png)'
- en: The Kubernetes Dashboard has multiple features that cover many functionalities
    provided by `kubectl`. In the next sections, we will explore how to access the
    container logs and execute into pod containers, as they are useful in debugging
    scenarios.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes仪表板具有多个功能，涵盖了`kubectl`提供的许多功能。在接下来的部分中，我们将探讨如何访问容器日志并执行到Pod容器中，因为它们在调试场景中非常有用。
- en: Accessing pod container logs
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问Pod容器日志
- en: 'Kubernetes Dashboard gives you an easy interface for accessing pod container
    logs quickly. To access logs for one of the pods for our Voting application, go
    through the following steps:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes仪表板为您提供了一个方便的界面，可以快速访问pod容器日志。要访问我们投票应用程序的一个pod的日志，请按照以下步骤进行：
- en: In the menu, navigate to Workloads | Pods.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在菜单中，导航到工作负载 | Pod。
- en: Find one of the pods for our Voting application. On the right side, click the
    three-dot button and select Logs.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到我们投票应用程序的一个pod。在右侧，点击三个点按钮，然后选择日志。
- en: 'You will be redirected to the logs view where you can inspect the logs in real
    time, just as if you used the `kubectl logs` command:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被重定向到日志视图，在那里您可以实时检查日志，就像使用`kubectl logs`命令一样：
- en: '![](assets/f1bdcda2-64d6-401e-9035-804a7701cd73.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/f1bdcda2-64d6-401e-9035-804a7701cd73.png)'
- en: Next, let's see how to `exec` into a pod container.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何`exec`到一个Pod容器中。
- en: Executing commands in a pod container
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Pod容器中执行命令
- en: 'In a similar fashion as for accessing logs, you can exec into a Pod container
    in order to run ad-hoc commands. This approach can be useful when debugging issues
    or quickly introducing configuration changes in development clusters. Perform
    the following steps:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 与访问日志类似，您可以`exec`到Pod容器中以运行临时命令。在调试问题或快速引入开发集群中的配置更改时，这种方法非常有用。执行以下步骤：
- en: In the menu, navigate to Workloads | Pods.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在菜单中，导航到工作负载 | Pod。
- en: Find one of the pods for our Voting application. On the right side, click the
    three-dot button and select `e``xec`.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到我们投票应用程序的一个pod。在右侧，点击三个点按钮，然后选择`e``xec`。
- en: 'The PowerShell terminal will open after a few seconds. You can run any arbitrary
    PowerShell commands and modify the container state:'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几秒钟后，PowerShell终端将打开。您可以运行任意的PowerShell命令并修改容器状态：
- en: '![](assets/9bcc0f38-0253-4aad-9c48-fc299a9b338d.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9bcc0f38-0253-4aad-9c48-fc299a9b338d.png)'
- en: Congratulations! You have successfully deployed Kubernetes Dashboard and you
    are now equipped with yet another useful debugging tool. In the next section,
    you will learn how you can improve your development environment for Kubernetes
    using Azure Dev Spaces.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功部署了Kubernetes仪表板，现在又多了一个有用的调试工具。在下一节中，您将学习如何使用Azure Dev Spaces改进Kubernetes的开发环境。
- en: Working on microservices in a team using Azure Dev Spaces
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在团队中使用Azure Dev Spaces进行微服务开发
- en: Azure Dev Spaces ([https://docs.microsoft.com/en-us/azure/dev-spaces/](https://docs.microsoft.com/en-us/azure/dev-spaces/)),
    also known as **AZDS** (short for** Azure Dev Spaces**), is one of the latest
    offerings from Microsoft for an enhanced Kubernetes development experience. This
    service provides a rapid and iterative development experience for teams using
    AKS clusters. Please note that currently, only managed AKS clusters are supported,
    which means that you cannot use AKS Enginefor this service. What is more, the
    current version does not support the development of Windows container applications;
    it is possible to interact with existing Windows pods, but they will not be managed
    by AZDS ([https://docs.microsoft.com/en-us/azure/dev-spaces/how-to/run-dev-spaces-windows-containers](https://docs.microsoft.com/en-us/azure/dev-spaces/how-to/run-dev-spaces-windows-containers)).
    From this point of view, AZDS is not useful for Windows container application
    development, but, as it is likely to receive this support soon, we are going to
    give you an overview of this offering.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Dev Spaces（[https://docs.microsoft.com/en-us/azure/dev-spaces/](https://docs.microsoft.com/en-us/azure/dev-spaces/)），也称为**AZDS**（**Azure
    Dev Spaces**的缩写），是微软提供的增强Kubernetes开发体验的最新产品之一。该服务为使用AKS集群的团队提供了快速和迭代的开发体验。请注意，目前仅支持托管的AKS集群，这意味着您无法为此服务使用AKS
    Engine。此外，当前版本不支持开发Windows容器应用程序；可以与现有的Windows pod进行交互，但它们不会由AZDS管理（[https://docs.microsoft.com/en-us/azure/dev-spaces/how-to/run-dev-spaces-windows-containers](https://docs.microsoft.com/en-us/azure/dev-spaces/how-to/run-dev-spaces-windows-containers)）。从这个角度来看，AZDS对于Windows容器应用程序开发并不有用，但由于很可能很快会得到支持，我们将为您概述这一产品。
- en: 'The main features of AZDS are as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: AZDS的主要特点如下：
- en: You can minimize the local development environment setup. You can debug and
    test all components of your distributed application directly in AKS, without replacing
    or mocking up dependencies (dev/prod parity).
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以最小化本地开发环境设置。您可以在AKS中直接调试和测试分布式应用程序的所有组件，而无需替换或模拟依赖关系（开发/生产一致性）。
- en: You can organize the Kubernetes cluster into shared and private Dev Spaces.
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以将Kubernetes集群组织成共享和私有的Dev Spaces。
- en: It can run independent updates of microservices without affecting the rest of
    the AKS cluster and other developers. You can develop your own version of a service,
    test it in isolation, and, when you are ready to share it with other team members,
    update the instance so that it is visible to everyone.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以独立更新微服务，而不影响AKS集群和其他开发人员的其余部分。您可以开发自己的服务版本，在隔离环境中进行测试，并在准备好与其他团队成员共享时更新实例，以便所有人都能看到。
- en: It fully integrates with Visual Studio Code and Visual Studio 2019, including
    their remote debugging features. It can also be managed from the Azure CLI.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它与Visual Studio Code和Visual Studio 2019完全集成，包括它们的远程调试功能。也可以从Azure CLI进行管理。
- en: It can connect your local machine to a Kubernetes cluster and test or debug
    local applications (with or without containers) with all the dependencies ([https://docs.microsoft.com/en-us/azure/dev-spaces/how-to/connect](https://docs.microsoft.com/en-us/azure/dev-spaces/how-to/connect)).
    This feature is similar to telepresence.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以将您的本地计算机连接到Kubernetes集群，并测试或调试本地应用程序（带有或不带有容器），并使用所有依赖项（[https://docs.microsoft.com/en-us/azure/dev-spaces/how-to/connect](https://docs.microsoft.com/en-us/azure/dev-spaces/how-to/connect)）。此功能类似于telepresence。
- en: It provides a faster development loop using incremental code compilation directly
    in the container whenever code changes are detected.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过增量代码编译在容器中提供更快的开发循环，每当检测到代码更改时。
- en: To create an AKS cluster, you can use the Powershell script that we provided
    in [Chapter 4](118e3c89-786e-4718-ba67-6c38928e2a42.xhtml), *Kubernetes Concepts
    and Windows Support* ([https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter04/05_CreateAKSWithWindowsNodes.ps1](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter04/05_CreateAKSWithWindowsNodes.ps1)).
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建AKS集群，您可以使用我们在[第4章](118e3c89-786e-4718-ba67-6c38928e2a42.xhtml)中提供的Powershell脚本，*Kubernetes概念和Windows支持*（[https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter04/05_CreateAKSWithWindowsNodes.ps1](https://github.com/PacktPublishing/Hands-On-Kubernetes-on-Windows/blob/master/Chapter04/05_CreateAKSWithWindowsNodes.ps1)）。
- en: 'The script can also create a cluster with a two-node Linux pool only. Go through
    the following steps to create an AKS cluster with AZDS enabled:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本还可以仅创建具有两个节点Linux池的集群。 按照以下步骤创建启用了AZDS的AKS集群：
- en: 'Download the script and execute it with the appropriate parameters. You need
    to select an Azure location that supports AZDS ([https://docs.microsoft.com/en-us/azure/dev-spaces/about#supported-regions-and-configurations](https://docs.microsoft.com/en-us/azure/dev-spaces/about#supported-regions-and-configurations))
    and select the Kubernetes version that is available in the location (use the `az
    aks get-versions --location <azureLocation>` command). In this example, we will
    create an AKS cluster instance named `devspaces-demo` in the `westeurope` location
    and Kubernetes version `1.15.4`. Be sure to select a cluster name that does not
    contain reserved words or trademarks, or later you will not be able to enable
    AZDS:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载脚本并使用适当的参数执行。 您需要选择支持AZDS的Azure位置（[https://docs.microsoft.com/en-us/azure/dev-spaces/about#supported-regions-and-configurations](https://docs.microsoft.com/en-us/azure/dev-spaces/about#supported-regions-and-configurations)）并选择该位置可用的Kubernetes版本（使用`az
    aks get-versions --location <azureLocation>`命令）。 在此示例中，我们将在`westeurope`位置创建一个名为`devspaces-demo`的AKS集群实例，并选择Kubernetes版本`1.15.4`。
    请务必选择不包含保留字或商标的集群名称，否则您将无法启用AZDS：
- en: '[PRE33]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The cluster Deployment can take about 15 minutes. When it is completed, a new
    context for `kubectl` named `aks-windows-cluster` will be added and set as the
    default.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集群部署大约需要15分钟。 完成后，将添加并设置名为`aks-windows-cluster`的`kubectl`的新上下文为默认值。
- en: 'Enable AZDS for the cluster using the following command:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令为集群启用AZDS：
- en: '[PRE34]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The AZDS CLI will be installed. Use the `default` namespace as the Dev Space
    when prompted.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将安装AZDS CLI。 在提示时将`default`命名空间用作Dev Space。
- en: 'Now that the AKS cluster has AZDS enabled, we can demonstrate how easy it is
    to create a new ASP.NET Core 3.0 Kubernetes application in Visual Studio 2019
    and debug it directly in the cluster. Go through the following steps to create
    the application:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 现在AKS集群已启用AZDS，我们可以演示在Visual Studio 2019中创建新的ASP.NET Core 3.0 Kubernetes应用程序并直接在集群中进行调试有多么容易。
    按照以下步骤创建应用程序：
- en: Open Visual Studio 2019 and select Create a new project.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2019并选择创建新项目。
- en: Find the Container Application for Kubernetes template and click Next.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到适用于Kubernetes的容器应用程序模板，然后单击“下一步”。
- en: Choose the project name and location and click Next.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择项目名称和位置，然后单击“下一步”。
- en: Select the Web Application (Model–View–Controller) type and click Create.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Web应用程序（模型-视图-控制器）类型，然后单击“创建”。
- en: 'We need to introduce small changes to the default configuration. In the `charts\azds-demo\values.yaml`
    file, ensure that `ingress` is enabled using the following code:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要对默认配置进行小的更改。 在`charts\azds-demo\values.yaml`文件中，确保使用以下代码启用`ingress`：
- en: '[PRE35]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'By default, Kestrel listens on port `5000`. We need to change the port to `80`
    in order to be compatible with Dockerfile and Kubernetes Service. In the `Program.cs`
    file, ensure that the application startup looks as follows:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，Kestrel监听端口`5000`。我们需要将端口更改为`80`，以便与Dockerfile和Kubernetes Service兼容。在`Program.cs`文件中，确保应用程序启动如下所示：
- en: '[PRE36]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Projects that have AZDS support enabled have the `azds.yaml` file, which defines
    the Dev Spaces configuration, Dockerfile, and `charts` directory with the Helm
    chart, ready to be deployed to the cluster by AZDS. Now, let''s deploy the application
    to the `default` Dev Space in our AKS cluster:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 启用了AZDS支持的项目具有`azds.yaml`文件，其中定义了Dev Spaces配置、Dockerfile和具有Helm图表的`charts`目录，准备好由AZDS部署到集群。现在，让我们将应用程序部署到我们的AKS集群中的`default`
    Dev Space中：
- en: 'From the launch settings for your project, select Azure Dev Spaces:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目的启动设置中，选择Azure Dev Spaces：
- en: '![](assets/c2194bff-518a-4187-8584-4d5809bdd7c0.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c2194bff-518a-4187-8584-4d5809bdd7c0.png)'
- en: Select devspaces demo AKS cluster and default space, and mark it as Publicly
    accessible, and continue by clicking OK.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`devspaces demo AKS cluster`和`default space`，并将其标记为公开访问，然后继续点击确定。
- en: AZDS will build the Dockerfile, install the Helm chart, and attach the debugger.
    In the web browser, the Ingress public endpoint will be automatically opened—for
    example, [h](http://default.azds-demo.2dpkt6cj7f.weu.azds.io/)[t](http://default.azds-demo.2dpkt6cj7f.weu.azds.io/)[tp:/](http://default.azds-demo.2dpkt6cj7f.weu.azds.io/)[/default.azds-demo.2dpkt6cj7f.weu.azds.io/](http://default.azds-demo.2dpkt6cj7f.weu.azds.io/).
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AZDS将构建Dockerfile，安装Helm图表，并附加调试器。在Web浏览器中，Ingress公共端点将自动打开，例如[h](http://default.azds-demo.2dpkt6cj7f.weu.azds.io/)[t](http://default.azds-demo.2dpkt6cj7f.weu.azds.io)[tp:/](http://default.azds-demo.2dpkt6cj7f.weu.azds.io/)[/default.azds-demo.2dpkt6cj7f.weu.azds.io/](http://default.azds-demo.2dpkt6cj7f.weu.azds.io/)。
- en: In the `HomeController.cs` file, add the breakpoint in the index controller
    action. Refresh the web page in the browser. You will see that the breakpoint
    is caught exactly as if the application was debugged in a local environment!
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HomeController.cs`文件中，在索引控制器操作中添加断点。刷新浏览器中的网页，您将看到断点被捕获，就像应用程序在本地环境中进行调试一样！
- en: 'Stop debugging and introduce a change in the `Index.cshtml` file. For example,
    change the main header to the following:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止调试并在`Index.cshtml`文件中引入更改。例如，将主标题更改为以下内容：
- en: '[PRE37]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Launch the application again, using the Azure Dev Spaces configuration. In
    the Output window, you will see that the application is quickly rebuilt, and, after
    a while, the web browser with the modified main page opens again:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次使用Azure Dev Spaces配置启动应用程序。在输出窗口中，您将看到应用程序被快速重建，并且一段时间后，修改后的主页将再次在Web浏览器中打开：
- en: '![](assets/80e79be7-9d30-4521-8e2b-44251f7bbf39.png)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/80e79be7-9d30-4521-8e2b-44251f7bbf39.png)'
- en: For more AZDS scenarios in team development, please check the official documentation
    at [https://docs.microsoft.com/en-us/azure/dev-spaces/team-development-netcore-visualstudio](https://docs.microsoft.com/en-us/azure/dev-spaces/team-development-netcore-visualstudio).
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解团队开发中更多的AZDS场景，请查看官方文档[https://docs.microsoft.com/en-us/azure/dev-spaces/team-development-netcore-visualstudio](https://docs.microsoft.com/en-us/azure/dev-spaces/team-development-netcore-visualstudio)。
- en: And all of this has happened directly on the AKS cluster. As you can see, development
    iterations are much faster than they are in a normal dev-loop when building a
    Docker image, pushing it, and rolling out a new Deployment.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都发生在AKS集群上。正如您所看到的，与在正常的开发循环中构建Docker镜像、推送它并部署新的部署相比，开发迭代要快得多。
- en: To delete the AKS cluster, use the `az group delete --name aks-windows-resource-group
    --yes` command.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除AKS集群，请使用`az group delete --name aks-windows-resource-group --yes`命令。
- en: Congratulations! You have successfully set up Azure Dev Spaces for your AKS
    cluster.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功为您的AKS集群设置了Azure Dev Spaces。
- en: Summary
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter has focused on how you, as a developer, can improve your development
    experience with Kubernetes clusters. First, we learned how to configure essential
    development extensions for Visual Studio Code and Visual Studio 2019\. Next, you
    learned how to use Helm for packaging Kubernetes applications, first by using
    an official Helm chart for Microsoft SQL Server and later by creating a dedicated
    chart for our Voting application.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了作为开发人员如何通过Kubernetes集群改进开发体验。首先，我们学习了如何为Visual Studio Code和Visual Studio
    2019配置必要的开发扩展。接下来，您学习了如何使用Helm打包Kubernetes应用程序，首先是通过使用Microsoft SQL Server的官方Helm图表，然后是通过为我们的投票应用程序创建一个专用图表。
- en: Next, we learned how to integrate Azure Application Insights into your application
    and how you can leverage advanced features such as the snapshot debugger in order
    to debug problems in production scenarios for Windows pods. Using our new Docker
    image with Application Insights instrumentation, we learned how to perform a Helm
    release upgrade. We introduced Kubernetes Dashboard, which is the most commonly
    used web UI for Kubernetes. Lastly, you learned what the Azure Dev Spaces service
    is and how you can use it to increase the development iteration speed when working
    with AKS clusters.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们学习了如何将Azure Application Insights集成到您的应用程序中，以及如何利用高级功能，如快照调试器，以便在Windows
    pod的生产场景中调试问题。使用我们新的带有Application Insights仪表的Docker镜像，我们学习了如何执行Helm发布升级。我们介绍了Kubernetes
    Dashboard，这是最常用的Kubernetes Web UI。最后，您了解了Azure Dev Spaces服务是什么，以及在使用AKS集群时如何使用它来增加开发迭代速度。
- en: In the next chapter, we will focus on the important topic of security, especially
    in the context of Windows containers.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于安全这一重要主题，特别是在Windows容器的背景下。
- en: Questions
  id: totrans-329
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is Helm and why should you use it?
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm是什么，为什么应该使用它？
- en: What is the biggest difference between Helm versions two and three?
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Helm版本二和三之间最大的区别是什么？
- en: How can you implement automatic Entity Framework database migrations in a Helm
    chart?
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在Helm图表中实现自动的Entity Framework数据库迁移？
- en: How do you perform a rollout of a new version of your application that is installed
    as a Helm chart?
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何执行安装为Helm图表的应用程序的新版本的发布？
- en: What is the snapshot debugger and how can you use it in production scenarios?
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 快照调试器是什么，如何在生产场景中使用它？
- en: Why is it not recommended that you use Kubernetes Dashboard to modify resources
    in the cluster?
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么不建议使用Kubernetes Dashboard来修改集群中的资源？
- en: What are the advantages of using Azure Dev Spaces?
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Azure Dev Spaces的优势是什么？
- en: You can find answers to these questions in the *Assessments* section of this
    book.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在本书的*评估*部分找到这些问题的答案。
- en: Further reading
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information about Kubernetes features and how to manage applications,
    please refer to the following PacktPub books:'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Kubernetes功能以及如何管理应用程序的更多信息，请参考以下PacktPub图书：
- en: '*The Complete Kubernetes Guide* ([https://www.packtpub.com/virtualization-and-cloud/complete-kubernetes-guide](https://www.packtpub.com/virtualization-and-cloud/complete-kubernetes-guide))'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*完整的Kubernetes指南*（[https://www.packtpub.com/virtualization-and-cloud/complete-kubernetes-guide](https://www.packtpub.com/virtualization-and-cloud/complete-kubernetes-guide)）'
- en: '*Getting Started with Kubernetes - Third Edition* ([https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition](https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition))'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开始使用Kubernetes-第三版*（[https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition](https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition)）'
- en: '*Kubernetes for Developers* ([https://www.packtpub.com/virtualization-and-cloud/kubernetes-developers](https://www.packtpub.com/virtualization-and-cloud/kubernetes-developers))'
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者的Kubernetes（[https://www.packtpub.com/virtualization-and-cloud/kubernetes-developers](https://www.packtpub.com/virtualization-and-cloud/kubernetes-developers)）
- en: 'If you are interested in learning more about Azure Application Insights, please
    refer to the following PacktPub books:'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您对学习Azure应用洞察感兴趣，请参考以下PacktPub图书：
- en: '*Hands-On Azure for Developers* ([https://www.packtpub.com/virtualization-and-cloud/hands-azure-developers](https://www.packtpub.com/virtualization-and-cloud/hands-azure-developers))'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者的Azure实践（[https://www.packtpub.com/virtualization-and-cloud/hands-azure-developers](https://www.packtpub.com/virtualization-and-cloud/hands-azure-developers)）
- en: '*Azure for Architects - Second Edition* ([https://www.packtpub.com/virtualization-and-cloud/azure-architects-second-edition](https://www.packtpub.com/virtualization-and-cloud/azure-architects-second-edition))'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure架构师-第二版（[https://www.packtpub.com/virtualization-and-cloud/azure-architects-second-edition](https://www.packtpub.com/virtualization-and-cloud/azure-architects-second-edition)）
- en: 'For more information regarding Helm, you can check out the following PacktPub
    book:'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Helm的更多信息，您可以查看以下PacktPub图书：
- en: '*Mastering Kubernetes - Second Edition* ([https://www.packtpub.com/application-development/mastering-kubernetes-second-edition](https://www.packtpub.com/application-development/mastering-kubernetes-second-edition))'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精通Kubernetes-第二版（[https://www.packtpub.com/application-development/mastering-kubernetes-second-edition](https://www.packtpub.com/application-development/mastering-kubernetes-second-edition)）
